mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/scottatchley,1,https://github.com/mercury-hpc/mercury/pull/72,This is an untested (not even compiled) patch,This is an untested (not even compiled) patch,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-193459212,This is an untested (not even compiled) patch,Thanks for creating the pull request! I gave it a try and replied in the issue #70,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-223031695,This is an untested (not even compiled) patch,I've tested this pull request (modulo the math fix) with the CCI Verbs transport and can confirm that it does indeed reduce Mercury CPU usage from 100% down to a negligible percentage when using the na_cci plugin on CCI/Verbs.  I vote we go ahead and merge this change; if there are remaining problems within the CCI/TCP transport then they'll have to be addressed separately anyway.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,4,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-223032773,This is an untested (not even compiled) patch,"Also, for informational purposes, here is a fork/branch of Mercury that has all 3 of the present Mercury pull requests (plus fixes) combined in one place.  I am using this as my working branch for now to get some mileage on the combination of na_cci changes:
https://github.com/carns/mercury/tree/topic/na-cci-create-endpoint-at-rdmaflags-blocking
That's just for informational purposes; the pull requests should be handled separately and we can't merge the create_at() changes until that is the mainstream API in CCI.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-223201305,This is an untested (not even compiled) patch,"Hmm when running ctest, things hang with TCP so I just can't merge it now...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,6,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-223271745,This is an untested (not even compiled) patch,"Ah, Ok. I'll try that early next week.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,7,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224069823,This is an untested (not even compiled) patch,"I confirmed that ctest also hangs for me when using cci/tcp in conjunction with this pull request (with or without the suggested arithmetic fix).  I have not investigated the cause yet, just sharing that I have matching behavior in that case.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,8,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224076431,This is an untested (not even compiled) patch,Does the code that you were using to confirm the CPU usage with verbs also hang when using tcp? Or do you only see it when using ctest/mercury's internal tests?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,9,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224082173,This is an untested (not even compiled) patch,"I have it working.  There are two more corrections to the pull request above (to keep ""remaining"" from going negative, and to fix a timing bug), but there is also a bug in CCI/TCP that needs to be fixed for all of the tests to pass with this change.  See CCI/cci#42.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,10,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224084043,This is an untested (not even compiled) patch,OK thanks for looking at it!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,11,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224086093,This is an untested (not even compiled) patch,"Just to clarify, these changes (updates to this pull request, plus fix for issue in cci repo) are enough to make ctest run correctly for Mercury with the na_cci blocking support in place.
That in turn will make Mercury run without excessive CPU usage for the cci/verbs plugin.  Unfortunately the cci/tcp plugin still burns CPU regardless of what Mercury is doing due to an orthogonal internal bug in CCI.
So ultimately this stuff is somewhat incremental (just getting pieces in place).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/scottatchley,12,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224253552,This is an untested (not even compiled) patch,"On Jun 6, 2016, at 4:57 PM, carns notifications@github.com wrote:
Just to clarify, these changes (updates to this pull request, plus fix for issue in cci repo) are enough to make ctest run correctly for Mercury with the na_cci blocking support in place.
That in turn will make Mercury run without excessive CPU usage for the cci/verbs plugin. Unfortunately the cci/tcp plugin still burns CPU regardless of what Mercury is doing due to an orthogonal internal bug in CCI.

Sorry about the slowness on our end. Geoffroy’s blocking TCP implementation used a traditional MPI technique (i.e. use a polling thread). It is on my plate to fix, but I have been distracted by our efforts to define and acquire Spider-3, our next generation center-wide file system, as well as by CORAL activities.

So ultimately this stuff is somewhat incremental (just getting pieces in place).
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,13,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224279132,This is an untested (not even compiled) patch,No problem @scottatchley.  I'm just pushing on the Mercury side of things (getting the poll fd exposed in the CCI API to interact with Mercury properly) so that everything else will fall into place once the CCI/TCP CPU usage issue is resolved.  I'm already in a scenario where I can run over CCI/verbs without busy spinning if I use the right combination of git branches.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,14,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-224357570,This is an untested (not even compiled) patch,"One more more quick informational update.  If I use the combination of https://github.com/carns/mercury/tree/topic/na-cci-create-endpoint-at-rdmaflags-blocking and https://github.com/CCI/cci/tree/topic/create_endpoint_at branches of Mercury and CCI, respectively, I can confirm that the CCI SM transport also operates without busy spinning as well.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-229751813,This is an untested (not even compiled) patch,"I was thinking I could merge that one too but looks like there is still a fix missing in CCI, I've got all your changes though so I'm ready to merge.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,16,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-229754752,This is an untested (not even compiled) patch,"Ok, we still need the cci/tcp fix for blocking mode to work with that transport, right?
Should we make the na_cci blocking mode optional (selectable at runtime somehow) so that Mercury users can decide about the cpu overhead / latency tradeoff?  In the near term it would also let us get this feature upstreamed for folks that want to use it while still leaving it off by default so that nightly tests pass with cci/tcp.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,17,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-229756841,This is an untested (not even compiled) patch,"Right.
Hmm ok yes that would work for me. I can add an option in cmake for that if you want.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/carns,18,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-229759664,This is an untested (not even compiled) patch,"That sounds good to me.  I would volunteer but I think I would do more harm than good in cmake.
I think we might eventually want it a run-time rather than compile-time option, but we can come back to that later.  For now it would be great just to have an official version of that functionality in the mainline code :-)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,72,2016-03-07T20:59:02Z,2016-07-01T05:17:01Z,2016-07-01T05:18:35Z,CLOSED,False,12,1,1,https://github.com/scottatchley,Add blocking support to na_cci,1,[],https://github.com/mercury-hpc/mercury/pull/72,https://github.com/soumagne,19,https://github.com/mercury-hpc/mercury/pull/72#issuecomment-229856004,This is an untested (not even compiled) patch,Merged in a8a6031 and 8cdf125,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,73,2016-03-15T18:36:52Z,2016-05-05T19:32:28Z,2016-05-10T15:50:23Z,CLOSED,False,253,2,1,https://github.com/carns,make na_cci honor NA_Iinitialize() URI,1,[],https://github.com/mercury-hpc/mercury/pull/73,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/73,"It's Ok if this isn't merged at all, or if it has some value but needs revision first.  I'm mainly opening a pull request to document the feature and start a discussion including @scottatchley @soumagne and @JohnPJenkins to see if we can find the ""right"" way to resolve this.
The issue, documented in part in #48, is that the Mercury API provides a URI at Iinitialization time that is intended to specify how the transport should listen for incoming requests, but this URI is ignored by na_cci in favor of the CCI config file.  This patch addresses that crudely by having na_cci intercept the CCI_CONFIG environment variable and redirect it to a temporary file that has been modified to use the port specified by Mercury.  It only works for TCP right now.
This is helpful for my work because it means that I can set a single, global CCI_CONFIG environment variable that works equally well for multiple servers and multiple clients in the same environment, with Mercury in charge of which ones use explicit listening ports, and what that port value is.","It's Ok if this isn't merged at all, or if it has some value but needs revision first.  I'm mainly opening a pull request to document the feature and start a discussion including @scottatchley @soumagne and @JohnPJenkins to see if we can find the ""right"" way to resolve this.
The issue, documented in part in #48, is that the Mercury API provides a URI at Iinitialization time that is intended to specify how the transport should listen for incoming requests, but this URI is ignored by na_cci in favor of the CCI config file.  This patch addresses that crudely by having na_cci intercept the CCI_CONFIG environment variable and redirect it to a temporary file that has been modified to use the port specified by Mercury.  It only works for TCP right now.
This is helpful for my work because it means that I can set a single, global CCI_CONFIG environment variable that works equally well for multiple servers and multiple clients in the same environment, with Mercury in charge of which ones use explicit listening ports, and what that port value is.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,73,2016-03-15T18:36:52Z,2016-05-05T19:32:28Z,2016-05-10T15:50:23Z,CLOSED,False,253,2,1,https://github.com/carns,make na_cci honor NA_Iinitialize() URI,1,[],https://github.com/mercury-hpc/mercury/pull/73,https://github.com/scottatchley,2,https://github.com/mercury-hpc/mercury/pull/73#issuecomment-197285615,"It's Ok if this isn't merged at all, or if it has some value but needs revision first.  I'm mainly opening a pull request to document the feature and start a discussion including @scottatchley @soumagne and @JohnPJenkins to see if we can find the ""right"" way to resolve this.
The issue, documented in part in #48, is that the Mercury API provides a URI at Iinitialization time that is intended to specify how the transport should listen for incoming requests, but this URI is ignored by na_cci in favor of the CCI config file.  This patch addresses that crudely by having na_cci intercept the CCI_CONFIG environment variable and redirect it to a temporary file that has been modified to use the port specified by Mercury.  It only works for TCP right now.
This is helpful for my work because it means that I can set a single, global CCI_CONFIG environment variable that works equally well for multiple servers and multiple clients in the same environment, with Mercury in charge of which ones use explicit listening ports, and what that port value is.",Adding @gvallee.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,73,2016-03-15T18:36:52Z,2016-05-05T19:32:28Z,2016-05-10T15:50:23Z,CLOSED,False,253,2,1,https://github.com/carns,make na_cci honor NA_Iinitialize() URI,1,[],https://github.com/mercury-hpc/mercury/pull/73,https://github.com/scottatchley,3,https://github.com/mercury-hpc/mercury/pull/73#issuecomment-198342929,"It's Ok if this isn't merged at all, or if it has some value but needs revision first.  I'm mainly opening a pull request to document the feature and start a discussion including @scottatchley @soumagne and @JohnPJenkins to see if we can find the ""right"" way to resolve this.
The issue, documented in part in #48, is that the Mercury API provides a URI at Iinitialization time that is intended to specify how the transport should listen for incoming requests, but this URI is ignored by na_cci in favor of the CCI config file.  This patch addresses that crudely by having na_cci intercept the CCI_CONFIG environment variable and redirect it to a temporary file that has been modified to use the port specified by Mercury.  It only works for TCP right now.
This is helpful for my work because it means that I can set a single, global CCI_CONFIG environment variable that works equally well for multiple servers and multiple clients in the same environment, with Mercury in charge of which ones use explicit listening ports, and what that port value is.","Hi all,
I am on vacation this week, but I have been checking mail occasionally.
This would require an API change or addition to CCI to support this properly. The lack of the ability to bind to a port or other identifier was debated much early and left to fix later. The main issue is that we did not want to assume all transports would use sockets for connection setup. Without assuming sockets, we were stuck with what would be the equivalent of a service/port that would be usable by each transport. As it turns out, all of the completed transports use sockets for connection handling. The only odd ball is SM which uses UNIX domain sockets and thus a path rather than a service/port.
Let me think about modifying cci_create_endpoint() or adding cci_create_endpoint_at() in order to handle transports needing a service and the SM transport needing a path.
Scott

On Mar 16, 2016, at 1:45 AM, Atchley, Scott atchleyes@ornl.gov wrote:
Adding @gvallee.

On Mar 15, 2016, at 2:36 PM, carns notifications@github.com wrote:
It's Ok if this isn't merged at all, or if it has some value but needs revision first. I'm mainly opening a pull request to document the feature and start a discussion including @scottatchley @soumagne and @JohnPJenkins to see if we can find the ""right"" way to resolve this.
The issue, documented in part in #48, is that the Mercury API provides a URI at Iinitialization time that is intended to specify how the transport should listen for incoming requests, but this URI is ignored by na_cci in favor of the CCI config file. This patch addresses that crudely by having na_cci intercept the CCI_CONFIG environment variable and redirect it to a temporary file that has been modified to use the port specified by Mercury. It only works for TCP right now.
This is helpful for my work because it means that I can set a single, global CCI_CONFIG environment variable that works equally well for multiple servers and multiple clients in the same environment, with Mercury in charge of which ones use explicit listening ports, and what that port value is.
You can view, comment on, or merge this pull request online at:
#73
Commit Summary
• allow mercury to override cci parameters
File Changes
• M src/na/na_cci.c (255)
Patch Links:
• https://github.com/mercury-hpc/mercury/pull/73.patch
• https://github.com/mercury-hpc/mercury/pull/73.diff
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,73,2016-03-15T18:36:52Z,2016-05-05T19:32:28Z,2016-05-10T15:50:23Z,CLOSED,False,253,2,1,https://github.com/carns,make na_cci honor NA_Iinitialize() URI,1,[],https://github.com/mercury-hpc/mercury/pull/73,https://github.com/carns,4,https://github.com/mercury-hpc/mercury/pull/73#issuecomment-217253741,"It's Ok if this isn't merged at all, or if it has some value but needs revision first.  I'm mainly opening a pull request to document the feature and start a discussion including @scottatchley @soumagne and @JohnPJenkins to see if we can find the ""right"" way to resolve this.
The issue, documented in part in #48, is that the Mercury API provides a URI at Iinitialization time that is intended to specify how the transport should listen for incoming requests, but this URI is ignored by na_cci in favor of the CCI config file.  This patch addresses that crudely by having na_cci intercept the CCI_CONFIG environment variable and redirect it to a temporary file that has been modified to use the port specified by Mercury.  It only works for TCP right now.
This is helpful for my work because it means that I can set a single, global CCI_CONFIG environment variable that works equally well for multiple servers and multiple clients in the same environment, with Mercury in charge of which ones use explicit listening ports, and what that port value is.",Deprecated by #95,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,74,2016-03-17T19:21:23Z,2016-03-30T16:27:52Z,2016-05-10T15:50:23Z,CLOSED,False,1809,1589,73,https://github.com/hyoklee,work in progress so far,59,[],https://github.com/mercury-hpc/mercury/pull/74,https://github.com/hyoklee,1,https://github.com/mercury-hpc/mercury/pull/74,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,76,2016-03-19T17:07:42Z,2016-03-20T07:02:52Z,2016-05-10T15:50:23Z,CLOSED,False,76,31,1,https://github.com/carns,defer RPC callback execution to HG_Trigger(),1,[],https://github.com/mercury-hpc/mercury/pull/76,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/76,"Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()","Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,76,2016-03-19T17:07:42Z,2016-03-20T07:02:52Z,2016-05-10T15:50:23Z,CLOSED,False,76,31,1,https://github.com/carns,defer RPC callback execution to HG_Trigger(),1,[],https://github.com/mercury-hpc/mercury/pull/76,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/76#issuecomment-198757251,"Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()","I see that you added another queue, was it needed or this was more to distinguish the rpc execution callback from the other callbacks?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,76,2016-03-19T17:07:42Z,2016-03-20T07:02:52Z,2016-05-10T15:50:23Z,CLOSED,False,76,31,1,https://github.com/carns,defer RPC callback execution to HG_Trigger(),1,[],https://github.com/mercury-hpc/mercury/pull/76,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/76#issuecomment-198769425,"Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()","The latter.  I wasn't sure if there was a way to differentiate between the two cases based on just the hg_handle so I put them in separate queues.  If there is a way to tell them apart then we can simplify the patch by putting them all in the same completion queue, I think.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,76,2016-03-19T17:07:42Z,2016-03-20T07:02:52Z,2016-05-10T15:50:23Z,CLOSED,False,76,31,1,https://github.com/carns,defer RPC callback execution to HG_Trigger(),1,[],https://github.com/mercury-hpc/mercury/pull/76,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/76#issuecomment-198860796,"Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()","I merged it manually, not sure I followed the official github procedure on this one... :/",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,76,2016-03-19T17:07:42Z,2016-03-20T07:02:52Z,2016-05-10T15:50:23Z,CLOSED,False,76,31,1,https://github.com/carns,defer RPC callback execution to HG_Trigger(),1,[],https://github.com/mercury-hpc/mercury/pull/76,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/76#issuecomment-198861355,"Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()",I also simplified the patch,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,76,2016-03-19T17:07:42Z,2016-03-20T07:02:52Z,2016-05-10T15:50:23Z,CLOSED,False,76,31,1,https://github.com/carns,defer RPC callback execution to HG_Trigger(),1,[],https://github.com/mercury-hpc/mercury/pull/76,https://github.com/carns,6,https://github.com/mercury-hpc/mercury/pull/76#issuecomment-198948287,"Fixes #61

instead of executing RPC handlers directly within HG_Progress, instead
queue it up to be executed during HG_Trigger() call
this avoids deadlocks in some concurrent servers that don't expect
RPC handler work to be performed while calling Progress()",Thanks @soumagne!  That looks much cleaner with a single completion queue.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,81,2016-03-30T16:31:45Z,2016-04-05T18:18:18Z,2016-05-10T15:50:23Z,CLOSED,False,3085,1940,77,https://github.com/hyoklee,work-in-progress so far for RPC cancellation,83,[],https://github.com/mercury-hpc/mercury/pull/81,https://github.com/hyoklee,1,https://github.com/mercury-hpc/mercury/pull/81,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,85,2016-04-01T16:53:41Z,2016-04-07T22:17:18Z,2016-05-10T15:50:23Z,MERGED,True,23,2,3,https://github.com/JohnPJenkins,add hg_request_forward_cb convenience function,1,[],https://github.com/mercury-hpc/mercury/pull/85,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/85,"Simple function that should account for 90% of hg_request use cases (HG_Forward + hg_request_wait).
Also, noticed a doc error about returning -HG_XXX_ERROR, which doesn't seem to be done, and added an HG_OTHER_ERROR error type for errors outside the purview of mercury (such as mercury_util).","Simple function that should account for 90% of hg_request use cases (HG_Forward + hg_request_wait).
Also, noticed a doc error about returning -HG_XXX_ERROR, which doesn't seem to be done, and added an HG_OTHER_ERROR error type for errors outside the purview of mercury (such as mercury_util).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,85,2016-04-01T16:53:41Z,2016-04-07T22:17:18Z,2016-05-10T15:50:23Z,MERGED,True,23,2,3,https://github.com/JohnPJenkins,add hg_request_forward_cb convenience function,1,[],https://github.com/mercury-hpc/mercury/pull/85,https://github.com/JohnPJenkins,2,https://github.com/mercury-hpc/mercury/pull/85#issuecomment-207076356,"Simple function that should account for 90% of hg_request use cases (HG_Forward + hg_request_wait).
Also, noticed a doc error about returning -HG_XXX_ERROR, which doesn't seem to be done, and added an HG_OTHER_ERROR error type for errors outside the purview of mercury (such as mercury_util).",Just rebased it with the changes against master. All good?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,85,2016-04-01T16:53:41Z,2016-04-07T22:17:18Z,2016-05-10T15:50:23Z,MERGED,True,23,2,3,https://github.com/JohnPJenkins,add hg_request_forward_cb convenience function,1,[],https://github.com/mercury-hpc/mercury/pull/85,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/85#issuecomment-207112235,"Simple function that should account for 90% of hg_request use cases (HG_Forward + hg_request_wait).
Also, noticed a doc error about returning -HG_XXX_ERROR, which doesn't seem to be done, and added an HG_OTHER_ERROR error type for errors outside the purview of mercury (such as mercury_util).","Yeah.. although now that I look at it, I wish mercury_request.h was not depending on mercury headers, since it's a separate layer. So I'm not sure if this is the right place to put that routine. I'll merge it for now and we can think later.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,85,2016-04-01T16:53:41Z,2016-04-07T22:17:18Z,2016-05-10T15:50:23Z,MERGED,True,23,2,3,https://github.com/JohnPJenkins,add hg_request_forward_cb convenience function,1,[],https://github.com/mercury-hpc/mercury/pull/85,https://github.com/JohnPJenkins,4,https://github.com/mercury-hpc/mercury/pull/85#issuecomment-207427982,"Simple function that should account for 90% of hg_request use cases (HG_Forward + hg_request_wait).
Also, noticed a doc error about returning -HG_XXX_ERROR, which doesn't seem to be done, and added an HG_OTHER_ERROR error type for errors outside the purview of mercury (such as mercury_util).","IMO, having a utility that builds on top of other mercury things is OK, at least if the utility is a client-facing one, which the hg_request shim is.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,87,2016-04-04T17:45:53Z,2016-04-04T18:27:13Z,2016-05-10T15:50:23Z,MERGED,True,43,0,4,https://github.com/JohnPJenkins,add HG_Context_get_class,1,[],https://github.com/mercury-hpc/mercury/pull/87,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/87,Self-explanatory...,Self-explanatory...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,89,2016-04-05T18:24:09Z,2016-04-13T06:32:31Z,2016-05-10T15:50:23Z,CLOSED,False,1218,130,32,https://github.com/hyoklee,work-in-progress for RPC cancellation,47,[],https://github.com/mercury-hpc/mercury/pull/89,https://github.com/hyoklee,1,https://github.com/mercury-hpc/mercury/pull/89,added bulk cancellation.,added bulk cancellation.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,89,2016-04-05T18:24:09Z,2016-04-13T06:32:31Z,2016-05-10T15:50:23Z,CLOSED,False,1218,130,32,https://github.com/hyoklee,work-in-progress for RPC cancellation,47,[],https://github.com/mercury-hpc/mercury/pull/89,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/89#issuecomment-209252505,added bulk cancellation.,I brought the changes to commit b4f8d07 in topic_cancel branch. I will continue the work/testing from there.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,94,2016-05-04T15:58:44Z,2016-05-04T16:37:56Z,2016-05-10T15:50:23Z,MERGED,True,1,1,1,https://github.com/JohnPJenkins,typo in handle size bounds,1,[],https://github.com/mercury-hpc/mercury/pull/94,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/94,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,94,2016-05-04T15:58:44Z,2016-05-04T16:37:56Z,2016-05-10T15:50:23Z,MERGED,True,1,1,1,https://github.com/JohnPJenkins,typo in handle size bounds,1,[],https://github.com/mercury-hpc/mercury/pull/94,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/94#issuecomment-216922538,,I thought this was fixed a long time ago :/ I remember having seen that one multiple times before... looks like I had missed it again...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,95,2016-05-05T19:27:36Z,2016-05-31T21:55:09Z,2016-06-30T18:28:53Z,CLOSED,False,20,2,1,https://github.com/carns,update na_cci to use create_endpoint_at(),3,[],https://github.com/mercury-hpc/mercury/pull/95,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/95,"Don't merge this (yet), it depends on CCI functionality that is currently in a development branch of CCI (https://github.com/CCI/cci.git topic/create-endpoint-at)

this makes na_cci honor the port specification in the HG listen  address
requires the topic/create_endpoint_at branch of cci
anything after the "":"" in the HG string address is passed on to the ""service"" argument of cci_create_endpoint_at() if Mercury is initialized in listening mode

Thanks to @scottatchley for the CCI component of this work (i.e. the hard part)!","Don't merge this (yet), it depends on CCI functionality that is currently in a development branch of CCI (https://github.com/CCI/cci.git topic/create-endpoint-at)

this makes na_cci honor the port specification in the HG listen  address
requires the topic/create_endpoint_at branch of cci
anything after the "":"" in the HG string address is passed on to the ""service"" argument of cci_create_endpoint_at() if Mercury is initialized in listening mode

Thanks to @scottatchley for the CCI component of this work (i.e. the hard part)!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,95,2016-05-05T19:27:36Z,2016-05-31T21:55:09Z,2016-06-30T18:28:53Z,CLOSED,False,20,2,1,https://github.com/carns,update na_cci to use create_endpoint_at(),3,[],https://github.com/mercury-hpc/mercury/pull/95,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/95#issuecomment-217253822,"Don't merge this (yet), it depends on CCI functionality that is currently in a development branch of CCI (https://github.com/CCI/cci.git topic/create-endpoint-at)

this makes na_cci honor the port specification in the HG listen  address
requires the topic/create_endpoint_at branch of cci
anything after the "":"" in the HG string address is passed on to the ""service"" argument of cci_create_endpoint_at() if Mercury is initialized in listening mode

Thanks to @scottatchley for the CCI component of this work (i.e. the hard part)!",Thanks for making the fix! Yeah... I expect the check will fail because there will be a link error with the version of CCI that is used on travis,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,95,2016-05-05T19:27:36Z,2016-05-31T21:55:09Z,2016-06-30T18:28:53Z,CLOSED,False,20,2,1,https://github.com/carns,update na_cci to use create_endpoint_at(),3,[],https://github.com/mercury-hpc/mercury/pull/95,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/95#issuecomment-222833211,"Don't merge this (yet), it depends on CCI functionality that is currently in a development branch of CCI (https://github.com/CCI/cci.git topic/create-endpoint-at)

this makes na_cci honor the port specification in the HG listen  address
requires the topic/create_endpoint_at branch of cci
anything after the "":"" in the HG string address is passed on to the ""service"" argument of cci_create_endpoint_at() if Mercury is initialized in listening mode

Thanks to @scottatchley for the CCI component of this work (i.e. the hard part)!","I've jumbled up this branch terribly somehow, will open another pull request later.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,95,2016-05-05T19:27:36Z,2016-05-31T21:55:09Z,2016-06-30T18:28:53Z,CLOSED,False,20,2,1,https://github.com/carns,update na_cci to use create_endpoint_at(),3,[],https://github.com/mercury-hpc/mercury/pull/95,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/95#issuecomment-222835577,"Don't merge this (yet), it depends on CCI functionality that is currently in a development branch of CCI (https://github.com/CCI/cci.git topic/create-endpoint-at)

this makes na_cci honor the port specification in the HG listen  address
requires the topic/create_endpoint_at branch of cci
anything after the "":"" in the HG string address is passed on to the ""service"" argument of cci_create_endpoint_at() if Mercury is initialized in listening mode

Thanks to @scottatchley for the CCI component of this work (i.e. the hard part)!","Hmm ok no problem, I will squash the commits anyway so do not worry if you have merge commits or anything weird as long as the diff is correct...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/97,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).","Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217889537,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",Ah ok I see... when you say it detects other things do you mean related to mercury or not related?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/JohnPJenkins,3,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217909488,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).","Related to mercury and not this particular issue. Here's the output using cci+tcp.
hg-threaded-progress-tsan.zip
Would take some digging to determine whether these are false positives or valid (potential) races.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217911742,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).","Hmm ok thanks for sending that. Sorry for the delay in getting back to it, but am trying to catch up...
Also since there was an issue with the NA Put op id, I would assume there are similar issues for the other functions...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/JohnPJenkins,5,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217913473,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",Possibly so. Want me to go ahead and make a similar change for the other op_id stores?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/JohnPJenkins,6,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217914672,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).","The tsan output indicates a possible race between progress/trigger (hg_core_send_output_cb) and NA_Msg_send_expected, with the same var (op_id).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/soumagne,7,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217915222,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",Yeah I saw that when skimming through the files you sent. Yes ok if you can fix the other ones and send me the patch that will be helpful and that will avoid me to context switch :),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/JohnPJenkins,8,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217915722,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",Will do - I'll just rebase on this PR after lunch.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217915974,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",Ok great thanks!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,97,2016-05-09T14:34:10Z,2016-05-09T17:54:36Z,2016-05-17T20:59:49Z,CLOSED,False,6,2,1,https://github.com/JohnPJenkins,rearrange op-id store to avoid race,1,[],https://github.com/mercury-hpc/mercury/pull/97,https://github.com/JohnPJenkins,10,https://github.com/mercury-hpc/mercury/pull/97#issuecomment-217938549,"Made a quick fix to NA_Put to help mitigate the race condition in #96. It appears sufficient - tsan doesn't complain for the test case (it detects other things, though...), and I'm able to execute the program without the race corrupting glibc :).",The fix is wrong - closing this and moving back to the issue thread.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,98,2016-05-09T20:51:04Z,2016-05-09T21:53:31Z,2016-05-17T20:58:43Z,MERGED,True,0,2828,7,https://github.com/JohnPJenkins,remove ssm,1,[],https://github.com/mercury-hpc/mercury/pull/98,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/98,It's neither used nor supported.,It's neither used nor supported.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,99,2016-05-09T21:18:51Z,2016-05-10T15:01:56Z,2016-05-17T20:58:09Z,CLOSED,False,75,83,4,https://github.com/JohnPJenkins,reorder op_id assignment,1,[],https://github.com/mercury-hpc/mercury/pull/99,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/99,"Discussed in #96. Didn't touch SSM because #98. If you want, I can rebase one after you pull the other.","Discussed in #96. Didn't touch SSM because #98. If you want, I can rebase one after you pull the other.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,99,2016-05-09T21:18:51Z,2016-05-10T15:01:56Z,2016-05-17T20:58:09Z,CLOSED,False,75,83,4,https://github.com/JohnPJenkins,reorder op_id assignment,1,[],https://github.com/mercury-hpc/mercury/pull/99,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/99#issuecomment-218002402,"Discussed in #96. Didn't touch SSM because #98. If you want, I can rebase one after you pull the other.","Ok no in this case I don't think you need to rebase because you didn't touch the SSM plugin so everything is good. I haven't tried yet, are most of the races you saw with tsan gone after that?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,99,2016-05-09T21:18:51Z,2016-05-10T15:01:56Z,2016-05-17T20:58:09Z,CLOSED,False,75,83,4,https://github.com/JohnPJenkins,reorder op_id assignment,1,[],https://github.com/mercury-hpc/mercury/pull/99,https://github.com/JohnPJenkins,3,https://github.com/mercury-hpc/mercury/pull/99#issuecomment-218156538,"Discussed in #96. Didn't touch SSM because #98. If you want, I can rebase one after you pull the other.",Patched up the history against master.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,100,2016-05-18T14:17:02Z,2016-05-21T04:48:47Z,2016-06-16T16:31:57Z,MERGED,True,129,0,6,https://github.com/JohnPJenkins,getters for HG class/protocol,1,[],https://github.com/mercury-hpc/mercury/pull/100,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/100,This simply provides an HG API for the user to easily get at the class (not previously possible) and protocol (would have to parse HG_Addr_get_string) strings.,This simply provides an HG API for the user to easily get at the class (not previously possible) and protocol (would have to parse HG_Addr_get_string) strings.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,100,2016-05-18T14:17:02Z,2016-05-21T04:48:47Z,2016-06-16T16:31:57Z,MERGED,True,129,0,6,https://github.com/JohnPJenkins,getters for HG class/protocol,1,[],https://github.com/mercury-hpc/mercury/pull/100,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/100#issuecomment-220758363,This simply provides an HG API for the user to easily get at the class (not previously possible) and protocol (would have to parse HG_Addr_get_string) strings.,"Ok I'll merge it, looks like this is another one related to bullet 3 in #46",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,101,2016-06-01T02:36:09Z,2016-06-30T18:21:51Z,2016-06-30T18:28:37Z,CLOSED,False,19,2,1,https://github.com/carns,update na_cci to use create_endpoint_at,1,[],https://github.com/mercury-hpc/mercury/pull/101,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/101,"(repeat of previous pull request #95 which had to be closed because of a comedy of git mistakes)
This is the update to Mercury that will take advantage of CCI's new create_endpoint_at() API to honor port descriptions provided by Mercury as part of the host URI.
The corresponding functionality is not released yet in CCI, just getting the Mercury side changes ready in this pull request.","(repeat of previous pull request #95 which had to be closed because of a comedy of git mistakes)
This is the update to Mercury that will take advantage of CCI's new create_endpoint_at() API to honor port descriptions provided by Mercury as part of the host URI.
The corresponding functionality is not released yet in CCI, just getting the Mercury side changes ready in this pull request.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,101,2016-06-01T02:36:09Z,2016-06-30T18:21:51Z,2016-06-30T18:28:37Z,CLOSED,False,19,2,1,https://github.com/carns,update na_cci to use create_endpoint_at,1,[],https://github.com/mercury-hpc/mercury/pull/101,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/101#issuecomment-229195956,"(repeat of previous pull request #95 which had to be closed because of a comedy of git mistakes)
This is the update to Mercury that will take advantage of CCI's new create_endpoint_at() API to honor port descriptions provided by Mercury as part of the host URI.
The corresponding functionality is not released yet in CCI, just getting the Mercury side changes ready in this pull request.",Looks like I'll be able to merge that now? since Scott has posted a 2.0 release of CCI...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,101,2016-06-01T02:36:09Z,2016-06-30T18:21:51Z,2016-06-30T18:28:37Z,CLOSED,False,19,2,1,https://github.com/carns,update na_cci to use create_endpoint_at,1,[],https://github.com/mercury-hpc/mercury/pull/101,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/101#issuecomment-229510797,"(repeat of previous pull request #95 which had to be closed because of a comedy of git mistakes)
This is the update to Mercury that will take advantage of CCI's new create_endpoint_at() API to honor port descriptions provided by Mercury as part of the host URI.
The corresponding functionality is not released yet in CCI, just getting the Mercury side changes ready in this pull request.",OK I'm holding off until I understand why I'm getting a segfault if I do: ./bin/hg_test_server -c cci -p sm,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,102,2016-06-01T15:02:40Z,2016-06-02T05:11:05Z,2016-06-14T20:43:42Z,CLOSED,False,13,3,1,https://github.com/carns,update na_cci to use new NA_MEM flag conventions,1,[],https://github.com/mercury-hpc/mercury/pull/102,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/102,This is the na_cci change that bridges the gap between the na.h flag changes from @soumagne in Mercury and the verbs flag changes from @scottatchley in CCI.,This is the na_cci change that bridges the gap between the na.h flag changes from @soumagne in Mercury and the verbs flag changes from @scottatchley in CCI.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,102,2016-06-01T15:02:40Z,2016-06-02T05:11:05Z,2016-06-14T20:43:42Z,CLOSED,False,13,3,1,https://github.com/carns,update na_cci to use new NA_MEM flag conventions,1,[],https://github.com/mercury-hpc/mercury/pull/102,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/102#issuecomment-223196935,This is the na_cci change that bridges the gap between the na.h flag changes from @soumagne in Mercury and the verbs flag changes from @scottatchley in CCI.,Merged in f77db0d,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,103,2016-06-10T15:44:02Z,2016-06-10T15:58:31Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm unnecessary APPLE check for pc generation,1,[],https://github.com/mercury-hpc/mercury/pull/103,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/103,"pkg-config works just fine on APPLE.
Also, does mercury really support windows??","pkg-config works just fine on APPLE.
Also, does mercury really support windows??",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,103,2016-06-10T15:44:02Z,2016-06-10T15:58:31Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm unnecessary APPLE check for pc generation,1,[],https://github.com/mercury-hpc/mercury/pull/103,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/103#issuecomment-225221392,"pkg-config works just fine on APPLE.
Also, does mercury really support windows??","Hmm ok yes I have it installed too on my mac (probably through homebrew), although does it work by default if you don't have pkg-config installed? I guess the travis check will tell me anyway...
:) yes mercury does support windows if you use MPI... Ideally we'd need just another TCP plugin to make things easier, although not a priority.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,103,2016-06-10T15:44:02Z,2016-06-10T15:58:31Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm unnecessary APPLE check for pc generation,1,[],https://github.com/mercury-hpc/mercury/pull/103,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/103#issuecomment-225222802,"pkg-config works just fine on APPLE.
Also, does mercury really support windows??",Ok test looks fine so I merged it,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,103,2016-06-10T15:44:02Z,2016-06-10T15:58:31Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm unnecessary APPLE check for pc generation,1,[],https://github.com/mercury-hpc/mercury/pull/103,https://github.com/JohnPJenkins,4,https://github.com/mercury-hpc/mercury/pull/103#issuecomment-225223243,"pkg-config works just fine on APPLE.
Also, does mercury really support windows??",Oops - the other .pc's are behind apple checks as well - i'll fix those and make another PR,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,103,2016-06-10T15:44:02Z,2016-06-10T15:58:31Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm unnecessary APPLE check for pc generation,1,[],https://github.com/mercury-hpc/mercury/pull/103,https://github.com/JohnPJenkins,5,https://github.com/mercury-hpc/mercury/pull/103#issuecomment-225224374,"pkg-config works just fine on APPLE.
Also, does mercury really support windows??",So we need to apply that patch to mchecksum's .pc file as well. Only problem is it's a submodule and I don't have write permissions. Can you update it?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,103,2016-06-10T15:44:02Z,2016-06-10T15:58:31Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm unnecessary APPLE check for pc generation,1,[],https://github.com/mercury-hpc/mercury/pull/103,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/103#issuecomment-225230537,"pkg-config works just fine on APPLE.
Also, does mercury really support windows??","Ok I updated it, you may need to do a git submodule update",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,104,2016-06-10T16:52:26Z,2016-06-10T17:00:13Z,2016-06-14T20:43:42Z,CLOSED,False,1,1,1,https://github.com/JohnPJenkins,rm another APPLE check,1,[],https://github.com/mercury-hpc/mercury/pull/104,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/104,Same issue in src/CMakeLists.txt that I missed... - this part adds libraries and includes to the variable replaced in mercury.pc.in.,Same issue in src/CMakeLists.txt that I missed... - this part adds libraries and includes to the variable replaced in mercury.pc.in.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,109,2016-06-16T19:55:13Z,2016-06-16T21:35:33Z,2016-06-30T18:28:37Z,CLOSED,False,3,3,1,https://github.com/jolivier23,Update mercury_error.h,1,[],https://github.com/mercury-hpc/mercury/pull/109,https://github.com/jolivier23,1,https://github.com/mercury-hpc/mercury/pull/109,"Users of Mercury that turn warnings to errors and use -Wall can't compile if verbose errors are disabled.  This fixes that by consuming the arguments in the macro.  The (void)0 allows a compiler to catch errors like this
if (...)
HG_LOG_ERROR(""Error Message"") //missing semicolon
do_something_important();","Users of Mercury that turn warnings to errors and use -Wall can't compile if verbose errors are disabled.  This fixes that by consuming the arguments in the macro.  The (void)0 allows a compiler to catch errors like this
if (...)
HG_LOG_ERROR(""Error Message"") //missing semicolon
do_something_important();",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,109,2016-06-16T19:55:13Z,2016-06-16T21:35:33Z,2016-06-30T18:28:37Z,CLOSED,False,3,3,1,https://github.com/jolivier23,Update mercury_error.h,1,[],https://github.com/mercury-hpc/mercury/pull/109,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/109#issuecomment-226620953,"Users of Mercury that turn warnings to errors and use -Wall can't compile if verbose errors are disabled.  This fixes that by consuming the arguments in the macro.  The (void)0 allows a compiler to catch errors like this
if (...)
HG_LOG_ERROR(""Error Message"") //missing semicolon
do_something_important();",This was brought in commit 46d5c25,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/112,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-227855079,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","I ljust looked at it quickly so I may have missed one or two things but yes that looks good to me at least, thanks! Regarding the default protocol in the tests, I had also added these variables in CMakeLists.txt: NA_BMI_TESTING_PROTOCOL, NA_CCI_TESTING_PROTOCOL, etc
where you can pass a list of protocols that need to be tested per plugin, for example you can pass ""tcp;sm"" for CCI. Maybe that would be enough to just use that by default? and then we can just get rid of the default tcp protocol.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,3,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-227858702,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Sounds good to me!
One question is how to handle MPI static vs dynamic mode. There's some trickery involved in the test files / cmake to accommodate the different modes. Might inadvertently break something during these changes...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-227859437,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Yeah... well I guess that will be the occasion to clean it up :),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,5,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-228452669,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","So I'll let this PR sit for a while while the create_endpoint_at stuff finalizes, then I'll modify the CCI NA to use it. The BMI anon server hostname stuff is probably not hard to accommodate in the BMI code, but let's just ignore it for now. After that, should be ready to go!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,6,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-228452906,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Oh, and as a result, we're now testing CCI+SM by default as well. More coverage!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,7,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-228454581,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Nice thanks! Yes I guess we can put tcp/sm by default, should be supported everywhere and user can still remove it anyway.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,8,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229365926,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","So I tried this PR out with CCI 2.0 and it failed :(. Specifically, it hung on the mercury_rpc_cci_sm test.  Works on mercury master though, which is weird since I didn't change anything in the CCI NA... Will look into this probably tomorrow.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229369493,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Hmm ok, yes that seems weird...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/scottatchley,10,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229375096,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","On Jun 29, 2016, at 10:05 AM, John Jenkins notifications@github.com wrote:
So I tried this PR out with CCI 2.0 and it failed :(. Specifically, it hung on the mercury_rpc_cci_sm test. Works on mercury master though, which is weird since I didn't change anything in the CCI NA... Will look into this probably tomorrow.

That is odd. Right now, master and 2.0 are identical.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,11,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229391477,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Sorry, I meant mercury master, not cci (tests pass fine with cci 2.0 there).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,12,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229394982,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Looked into this a bit more - the mercury test succeeded on mercury's git master b/c it wasn't testing sm by default (this PR does). So the issue seems to be with our use of CCI. I'll make a mercury issue for this.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,13,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229769073,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","I've fixed up the test address generation code and tests are back to green locally. Before a pull happens, want to summarize where we are and propose a simplification.
Initialization
When not listening, any plugin can pass in an address string of the form [<class>+]<protocol>[://]"". I.e. no hostname/port expected. (the [] means optional here).

BMI ignores passed hostnames AFAICT.
CCI will try to create its endpoint with whatever you give it, so non-listeners can request a specific port, for example.
MPI expects no hostname and errors out otherwise.

In listen mode, the expected hostname is plugin dependent.

BMI expects <host>:<port>
CCI falls back to cci_create_endpoint when a host string isn't provided, using an OS assigned port for TCP,Verbs and the process PID for SM.
CCI+TCP,Verbs expect <port> if an addr is provided.
CCI+SM expect <id1>/<id2> if an addr is provided.

We can simplify the BMI,CCI split by changing the BMI NA to just expect a port and appending ""localhost"" under the covers, as there's no other valid option. Thoughts?
Lookup
Nothing has changed here. Class still optional, and ""full"" host strings are expected.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/hyoklee,14,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229771442,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Does id (below) mean process id? I hope you can clarify it with concrete example for CCI+SM case (and others).

•CCI+SM expect  id1:id2  if an addr is provided.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229773023,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Thanks, that looks good to me. Yes I would be fine with BMI just having localhost...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,16,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229773955,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","AFAICT, the first id being a PID is just a convention used as a default in CCI. See README.ctp.sm in CCI for more info.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,17,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229774342,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Okay, I'll change BMI over and push the changes. Once all are OK with them, I'll rebase my branch to a single commit and you can pull.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,18,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229780462,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","So I have a better understanding of the test suite now :). Should be ready to go. Would someone like to give it a try locally?
Also, where should these formatting options be documented? Doesn't seem like it fits cleanly in the doxygen setup...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,19,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229781076,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Ok thanks! let me give it a try. I think it should be documented on the website, or alternatively on the wiki for now?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,20,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229781562,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Over there? http://mercury-hpc.github.io/documentation/#network-abstraction-layer,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,21,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229782816,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Not sure what's happening, let me have a look:
CMake Error at Testing/na/CMakeLists.txt:38 (if):
if given arguments:
 ""bmi"" ""STREQUAL"" ""mpi"" ""AND"" ""STREQUAL"" ""static""",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,22,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229785430,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",An empty protocol is being passed in. Not sure why that would be the case...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,23,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229785622,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Yes that's my fault :) some leftovers. I fixed it now, everything looks good!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,24,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229785817,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Excellent, I'll squash my commits and push.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,25,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229786283,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","OK wait, can you also fix the unused variables before you do that?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,26,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229786541,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","/home/jsoumagne/workspace/mercury/source/Testing/na/na_test.c: In function ‘na_test_gen_config’:
/home/jsoumagne/workspace/mercury/source/Testing/na/na_test.c:201:10: warning: unused variable ‘na_hostname’ [-Wunused-variable]
     char na_hostname[NA_TEST_MAX_ADDR_NAME];
          ^
/home/jsoumagne/workspace/mercury/source/Testing/na/na_test.c: In function ‘NA_Test_server_init’:
/home/jsoumagne/workspace/mercury/source/Testing/na/na_test.c:493:17: warning: variable ‘nret’ set but not used [-Wunused-but-set-variable]
     na_return_t nret;

/home/jsoumagne/workspace/mercury/source/src/na/na_cci.c: In function ‘na_cci_initialize’:
/home/jsoumagne/workspace/mercury/source/src/na/na_cci.c:445:11: warning: unused variable ‘string_port’ [-Wunused-variable]
     char *string_port = NULL;
           ^
/home/jsoumagne/workspace/mercury/source/src/na/na_cci.c:437:15: warning: unused parameter ‘listen’ [-Wunused-parameter]
     na_bool_t listen)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,27,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229786693,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Huh, I didn't see those warnings. I'll clean those up.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,28,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229786898,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Oops, didn't have warnings set...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,29,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229787492,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",OK thanks! no problem ;),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,30,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229789269,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Okay, changes are in one happy commit. Let's see what travis thinks...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,31,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229789769,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",It is going to complain because I haven't updated cci there... let me fix that,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,32,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229789974,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","I'll do that on this branch, as it will fail on the current master.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,33,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229790232,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",No the current master uses the new cci now,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,34,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229791169,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Just give me 2 seconds because I also need to clear the cache for travis,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,35,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229791238,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Okay, let me know when I should re-rebase.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,36,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229791794,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",No wonder it's taking a long time for travis to run - you're building gcc from scratch every time :-P. Is that really necessary?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,37,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229792422,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",":) haha no it's not building from scratch every time, it builds it once and then uses the cache. Yeah unfortunately that's the only solution I found to be able to use tsan etc because ubuntu packages are just buggy",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,38,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229793714,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","That's good to know, though I was under the impression travis builds proceeded under a ""clean"" environment. Is there an option to hold onto a workspace similar to e.g. jenkins?
I take it the PPA route wasn't helpful?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,39,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229794679,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","I pushed now but it may be better to wait until the first build is done so that your pull request can use the build cache. Yes the environment is clean but you can cache dependencies so that you don't have to build them every time. In that case I specify a directory that I want to cache.
Yeah the other problem with travis is that repositories need to be white listed (which is not something I control) and unfortunately none of them have the right packages :'(",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,40,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229795919,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Ah ok that's a nice feature.
I'll probably do the rebase + test tomorrow morning, I'll be taking off soon.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,41,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229796656,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Yeah it usually takes about 45 minutes if we build gcc as well ;),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,42,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229805616,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Well sorry, I forgot that the tarball has configure files already but not the repo... so have to rebuild again",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,43,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229842515,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",OK it passed this time so you can rebase now when you want,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,44,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229856475,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","I merged #72 into master so just as a heads up you'll get a conflict when you rebase, you may want to squash first and then rebase... although the conflict should be easy to solve, it's only the cci_create_endpoint() stuff...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,45,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229950548,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Thanks, I'll patch things up and give it a go.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,46,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229957160,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",The changes I needed to make are purely cosmetic. I've run into a problem though: mercury_bulk_cci_tcp with NA_CCI_USE_POLL hangs. I'll investigate further.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,47,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229958412,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Yes this is normal, we are missing a fix in CCI for the tcp plugin so it will hang for now if you have NA_CCI_USE_POLL enabled, see comment in #72",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,48,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229959831,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Ah, thanks for the clarification, should've checked there first. I'll retry the tests with NA_CCI_USE_POLL and without cci+tcp and if that succeeds I think we're good to go.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,49,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229964549,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Hooray, tests are green! It's been quite a journey to just handle addresses a little differently :).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,50,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229980130,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Merged ;),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,51,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229998001,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","Looks like there are some errors with tsan
=================================================================
==22274==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 22 byte(s) in 1 object(s) allocated from:
    #0 0x7fb26ac0197a in malloc (/lib64/libasan.so.2+0x9897a)
    #1 0x40b538 in NA_Test_server_init /home/jsoumagne/workspace/mercury/source/Testing/na/na_test.c:442
    #2 0x405e86 in HG_Test_server_init /home/jsoumagne/workspace/mercury/source/Testing/mercury_test.c:323
    #3 0x403247 in main /home/jsoumagne/workspace/mercury/source/Testing/test_server.c:57
    #4 0x7fb26905657f in __libc_start_main (/lib64/libc.so.6+0x2057f)

Direct leak of 16 byte(s) in 1 object(s) allocated from:
    #0 0x7fb26ac0197a in malloc (/lib64/libasan.so.2+0x9897a)
    #1 0x7fb26a2e0d5d in na_bmi_addr_self /home/jsoumagne/workspace/mercury/source/src/na/na_bmi.c:866
    #2 0x7fb26a2d61f0 in NA_Addr_self /home/jsoumagne/workspace/mercury/source/src/na/na.c:629
    #3 0x40b4b6 in NA_Test_server_init /home/jsoumagne/workspace/mercury/source/Testing/na/na_test.c:436
    #4 0x405e86 in HG_Test_server_init /home/jsoumagne/workspace/mercury/source/Testing/mercury_test.c:323
    #5 0x403247 in main /home/jsoumagne/workspace/mercury/source/Testing/test_server.c:57
    #6 0x7fb26905657f in __libc_start_main (/lib64/libc.so.6+0x2057f)

SUMMARY: AddressSanitizer: 38 byte(s) leaked in 2 allocation(s).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,52,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229998224,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Same with CCI,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,53,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229998376,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",https://cdash.hdfgroup.org/viewTest.php?onlyfailed&buildid=20630,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,54,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-229998714,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...","And failures on OSX now, not sure what's going on... https://cdash.hdfgroup.org/index.php?project=MERCURY",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/JohnPJenkins,55,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-230005160,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Leaks shouldn't be too hard to fix. I'll look at that now. Not sure what's up with the OSX stuff.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,112,2016-06-22T19:34:01Z,2016-07-01T20:19:27Z,2016-08-10T21:40:44Z,CLOSED,False,160,209,8,https://github.com/JohnPJenkins,[WIP] address parsing,1,[],https://github.com/mercury-hpc/mercury/pull/112,https://github.com/soumagne,56,https://github.com/mercury-hpc/mercury/pull/112#issuecomment-230038692,"Here's an initial look to get an idea of what my address parsing changes would do. Strategy is to parse through the class+protocol pair, then leave the remainder for the NA layer. MPI and CCI already ignore the host name, so there was not much to do there. BMI requires reconstructing the ""protocol://hostname:port"", but that's a fairly simple piece of code.
Note that addr_lookup in the top-level NA layer just peeks at the class name, and passes the remainder down to the plugin. The BMI and CCI plugins then pass them directly to the libs, while MPI parses the port string starting from ';', effectively ignoring the ""protocol://"" portion.
TODO:

 Modify tests to init clients in anon mode (""class+protocol""). Currently passes in the server string to initialize.
 Modify tests to always get the server address through file. Right now it does sometimes but not others. Will be simpler to just have one code path, then we can test things like having anon-mode servers. This actually isn't the case, I misread the code.
 Get rid of hard-coded tcp default protocol in tests (or just special case MPI to ""dynamic"") - use the NA_*_TESTING_PROTOCOL variables for this instead.
 Get rid of default protocol check in test code, enforce given protocol
 Turn MPI error checks (bad protocol, existence of hostname during initialization) into errors once tests are changed. They are currently warnings.
 Rebase on Phil's cci_create_endpoint_at branch once it gets merged, and incorporate call into code.
 Special-case address creation in test code. BMI, CCI+tcp(+verbs?) - hostname:port. CCI+sm - pid:tag (need to check format). MPI: nothing. Right now, hardcodes host string to hostname:port unless using MPI.
 Similarly, modify BMI to allow anon-mode servers? This might require a BMI change, if so, then just error out when no hoststring is provided at the NA layer. Not worth the trouble.

Might have forgot one or two...",Closing that now since discussion was moved to #114,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/114,Fixes leaks introduced by #112,Fixes leaks introduced by #112,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230034325,Fixes leaks introduced by #112,Hmm does not seem to be fixed: https://cdash.hdfgroup.org/viewDynamicAnalysis.php?buildid=20646,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,3,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230036563,Fixes leaks introduced by #112,"From https://cdash.hdfgroup.org/viewDynamicAnalysisFile.php?id=46470:
=================================================================
==7586==ERROR: LeakSanitizer: detected memory leaks

<b>Direct leak</b> Direct leak of 22 byte(s) in 1 object(s) allocated from:
    #0 0x7f763fdf81f8 in __interceptor_malloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:38
    #1 0x7f7640f0fea8 in NA_Test_server_init /home/travis/build/mercury-hpc/mercury/Testing/na/na_test.c:442
    #2 0x7f7640f0b235 in HG_Test_server_init /home/travis/build/mercury-hpc/mercury/Testing/mercury_test.c:323
    #3 0x7f7640efe9be in main /home/travis/build/mercury-hpc/mercury/Testing/test_server.c:57
    #4 0x7f763e4547ec in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x217ec)

That doesn't seem right... It's reporting a leak for something that 8 lines later is obviously freed.
<b>Direct leak</b> Direct leak of 16 byte(s) in 1 object(s) allocated from:
    #0 0x7f763fdf81f8 in __interceptor_malloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:38
    #1 0x7f763f4ba7fd in na_bmi_addr_self /home/travis/build/mercury-hpc/mercury/src/na/na_bmi.c:866
    #2 0x7f763f4b2d16 in NA_Addr_self /home/travis/build/mercury-hpc/mercury/src/na/na.c:629
    #3 0x7f7640f0fe76 in NA_Test_server_init /home/travis/build/mercury-hpc/mercury/Testing/na/na_test.c:436
    #4 0x7f7640f0b235 in HG_Test_server_init /home/travis/build/mercury-hpc/mercury/Testing/mercury_test.c:323
    #5 0x7f7640efe9be in main /home/travis/build/mercury-hpc/mercury/Testing/test_server.c:57
    #6 0x7f763e4547ec in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x217ec)

Same here, Addr_self and Addr_free for BMI correspond to a single malloc/free pair.
Also, does the check that github reports not correspond to all of the tests done?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230037233,Fixes leaks introduced by #112,"Yeah the check only means that the configure/build/test were run sucessfully, you still need to look at the dashboard to check that test results are passing or not. I can probably make it more strict so that it actually fails every time a test does not pass.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,5,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230037558,Fixes leaks introduced by #112,"Yeah that's probably a good idea. Also, how do I tell which branch the cdash website is showing? I didn't see that info anywhere.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230037720,Fixes leaks introduced by #112,Just check the travis build number in the build name: travis-ci-linux-x64-gcc-debug-addresssanitizer-231,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,7,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230037970,Fixes leaks introduced by #112,"My problem is that if I make it more strict, it will fail for everything, even for random failures like we currently have with the CCI tcp plugin... so I would rather keep it more permissive for now.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,8,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230039460,Fixes leaks introduced by #112,"I just tried on my laptop and I don't see the leaks anymore with tsan, I'm not sure why it shows up with travis still...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,9,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230040607,Fixes leaks introduced by #112,"The leaks are gone on my end, but I am getting data race output from tsan for cci+sm tests in a free call from sm_handle_connect_reply. Completely different output from the cdash stuff.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,10,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230040709,Fixes leaks introduced by #112,"Oh, and I've been using gcc 5.1 for testing.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,11,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230041328,Fixes leaks introduced by #112,"Well we don't test sm on travis so that's normal. Also Cdash only collects the results that the travis build submits, it's not doing any test itself.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,12,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230041607,Fixes leaks introduced by #112,I'm using 5.3.1 here and it's gone too for me. I suspect travis is not fetching the pull request correctly...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,13,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230041758,Fixes leaks introduced by #112,Can you try to push a fake commit to that pull request to trigger the build again?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,14,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230044859,Fixes leaks introduced by #112,Is there something about the travis env preventing running the sm tests?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230046082,Fixes leaks introduced by #112,"Yes there were some failures, I forgot now the actual error though I would have to try again",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,16,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230046182,Fixes leaks introduced by #112,"Hmm that's really bizarre, same failures again in the dashboard after your fake commit...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,17,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230049635,Fixes leaks introduced by #112,This is quite confusing. Perhaps we're running into some local compiler issues (ie the asan/tsan libs used in the local gcc get pointed at the system gcc)?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,18,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230050817,Fixes leaks introduced by #112,"If we wanted to, we could get gcc 4.8 through an ubuntu PPA - https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test . That should have the sanitizers.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,19,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230051796,Fixes leaks introduced by #112,"Yes I tried those already, it's buggy, and same for that https://bugs.launchpad.net/ubuntu/+source/gcc-5/+bug/1413474",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,20,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230053026,Fixes leaks introduced by #112,I don't think it's a compiler issue... ok I have another idea :) can you try to push a commit that prints a line in the test so that we can see if we're testing the right version?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,21,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230056255,Fixes leaks introduced by #112,"Committed - search for the string ""ZZZ"" in the output.
FWIW, I'm running into some strange issues in my local setup. tsan/asan cause the na_simple_cci_* test to fail. Clients run fine, but the server Finalizes and returns a non-zero exit code without any indication of error. However, when I run the test directly (na_test_server/na_test_client), the server hangs in the progress loop after the clients are finished and exit, test_done_g never having been set.
Tests are green when not using *san.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,22,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230058049,Fixes leaks introduced by #112,"Yes there is an issue with the na_simple_cci* tests, I saw that too, I haven't figured out yet why it fails, that's the only ones that fail.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,23,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230058301,Fixes leaks introduced by #112,"Oh, I figured out why the hang was happening - there was a hard-coded number of expected clients under those tests (and that count (2) doesn't match up with the number of clients ran in the test (4) ).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/hyoklee,24,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230058445,Fixes leaks introduced by #112,"Awesome, @JohnPJenkins!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,25,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230058593,Fixes leaks introduced by #112,"As I suspected, I don't see the string, so that means it's indeed not testing the right version... funny",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,26,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230058700,Fixes leaks introduced by #112,Maybe they just broke something in the travis code,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,27,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230059099,Fixes leaks introduced by #112,"More specifically, na_simple_* loops over the count of expected clients doing a progress loop (with timeout NA_MAX_IDLE_TIME), which is set in NA_Test_server_init to be MPIEXEC_MAX_NUMPROCS. NUMRPOCS is 2, the -np option is given as 4.
Tests aren't green still - here's the leak report for na_test_server -c cci -p sm:
Direct leak of 32 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79f009a in __interceptor_malloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:38
    #1 0x7f4af676c43a in tsearch (/lib/x86_64-linux-gnu/libc.so.6+0xf143a)

Indirect leak of 4096 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
    #1 0x7f4af22e5114 in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1522
    #2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
    #3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
    #4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
    #5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)

Indirect leak of 4096 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
    #1 0x7f4af22e51bf in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1539
    #2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
    #3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
    #4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
    #5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)

Indirect leak of 144 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
    #1 0x7f4af22e501e in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1498
    #2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
    #3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
    #4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
    #5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)

Indirect leak of 64 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
    #1 0x7f4af7744356 in handle_connect_request /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1786
    #2 0x7f4af7745379 in na_cci_progress /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1927
    #3 0x7f4af771cea5 in NA_Progress /nfs2/jenkins/work/sds/mercury/src/na/na.c:1482
    #4 0x403791 in main /nfs2/jenkins/work/sds/mercury/Testing/na/test_server.c:298
    #5 0x7f4af669c76c in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2176c)

Indirect leak of 64 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
    #1 0x7f4af22e500b in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1497
    #2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
    #3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
    #4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
    #5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)

Indirect leak of 31 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79bbd8f in __interceptor_strdup ../../.././libsanitizer/asan/asan_interceptors.cc:514
    #1 0x7f4af22e5090 in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1509
    #2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
    #3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
    #4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
    #5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)

Indirect leak of 31 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79bbd8f in __interceptor_strdup ../../.././libsanitizer/asan/asan_interceptors.cc:514
    #1 0x7f4af77445b3 in handle_connect_request /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1797
    #2 0x7f4af7745379 in na_cci_progress /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1927
    #3 0x7f4af771cea5 in NA_Progress /nfs2/jenkins/work/sds/mercury/src/na/na.c:1482
    #4 0x403791 in main /nfs2/jenkins/work/sds/mercury/Testing/na/test_server.c:298
    #5 0x7f4af669c76c in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2176c)

Indirect leak of 31 byte(s) in 1 object(s) allocated from:
    #0 0x7f4af79bbd8f in __interceptor_strdup ../../.././libsanitizer/asan/asan_interceptors.cc:514
    #1 0x7f4af22e52a9 in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1557
    #2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
    #3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
    #4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
    #5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)

SUMMARY: AddressSanitizer: 8589 byte(s) leaked in 9 allocation(s)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,28,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230060166,Fixes leaks introduced by #112,Could that be related to #111 ?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,29,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230060774,Fixes leaks introduced by #112,"Hmm, can't tell. Some would seem to be legit CCI leaks (leaks caused in CCI's managed progress thread), while others are in the CCI NA. Don't know what's up with tsearch leaking :) - any code using that?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,30,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230061210,Fixes leaks introduced by #112,"./src/plugins/ctp/sm/ctp_sm_api.c:1674:    node = tsearch(sconn, &sep->conns, sm_compare_conns);",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,31,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230061815,Fixes leaks introduced by #112,"Ah, tsearch allocates when it fails to find a node and inserts a new one.
Is there any way we can add suppressions similar to valgrind? We shouldn't fail HG builds b/c leaks in BMI/CCI. (BMI fails when it is instrumented with asan because a hash function overreads its input).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,32,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230062204,Fixes leaks introduced by #112,asan does allow suppressions: http://clang.llvm.org/docs/AddressSanitizer.html#issue-suppression,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,33,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230062457,Fixes leaks introduced by #112,"We can pass options to Ctest using CTEST_MEMORYCHECK_SANITIZER_OPTIONS, see for example in Testing/script/travis_script.cmake line 88, so I think we could do that",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,34,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230063305,Fixes leaks introduced by #112,"Well but that's another topic, I would like to understand first why travis is not testing the right revision in the pull requests...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,35,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230064051,Fixes leaks introduced by #112,I stepped through the travis log and re-ran the git commands locally with no issue. Is this another bad caching issue?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,36,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230064253,Fixes leaks introduced by #112,"Here is what travis does:
$ git clone --depth=50 https://github.com/mercury-hpc/mercury.git mercury-hpc/mercury
Cloning into 'mercury-hpc/mercury'...
remote: Counting objects: 427, done.
remote: Compressing objects: 100% (280/280), done.
remote: Total 427 (delta 246), reused 247 (delta 144), pack-reused 0
Receiving objects: 100% (427/427), 270.00 KiB | 0 bytes/s, done.
Resolving deltas: 100% (246/246), done.
Checking connectivity... done.

$ cd mercury-hpc/mercury

$ git fetch origin +refs/pull/114/merge:
remote: Counting objects: 18, done.
remote: Compressing objects: 100% (17/17), done.
remote: Total 18 (delta 14), reused 4 (delta 1), pack-reused 0
Unpacking objects: 100% (18/18), done.
From https://github.com/mercury-hpc/mercury
 * branch            refs/pull/114/merge -> FETCH_HEAD

$ git checkout -qf FETCH_HEAD",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,37,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230064514,Fixes leaks introduced by #112,Can you add in a search to the test shell or travis build matrix after the git operations happen? ie a find mercury-hpc/mercury -name \*.c | xargs grep ZZZ? Might need to change the path of course.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,38,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230064632,Fixes leaks introduced by #112,"I'm heading out for the weekend, will be back on Wednesday.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,39,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230064858,Fixes leaks introduced by #112,OK! I'll post here if I find something. For now what I can say is that the git command is correct and gets your commit with the string but the string is not in log. You can get the log by clicking on raw log and look for the string which should appear just before the listen printf.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,40,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230581469,Fixes leaks introduced by #112,osx fix in c98da53 and pull request ctest fix in 5f9aa81,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,41,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230780466,Fixes leaks introduced by #112,"Hey, noticed this (minus the debug statements) got pulled. Were the issues we were having resolved?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,42,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230782313,Fixes leaks introduced by #112,Yes I fixed the issue on OS X (segfault with locator in na_info_parse) and the pull request problem where ctest was actually doing a checkout of another revision so it's not doing that anymore. I haven't fixed the na_simple_* test though but that should be a separate issue.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,43,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230787016,Fixes leaks introduced by #112,That's good to hear! Now back to productive work :).,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,44,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230812609,Fixes leaks introduced by #112,"Oh and before we change topic and forget, let me know when you have a look at #107",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,45,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230816423,Fixes leaks introduced by #112,"I've made a note of it, though I don't know exactly when I'll look at it. I have a fairly hectic week ahead of me...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,46,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-230833049,Fixes leaks introduced by #112,"Oh no problem, just meant when you have time, that's really minor anyway, thanks!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,47,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231347862,Fixes leaks introduced by #112,"Hi John,
I just pushed a commit to CCI that fixes several leaks in the SM connection path. Can you recheck the below or are you filtering out CCI internal leak messages?
Scott

On Jul 1, 2016, at 6:16 PM, John Jenkins notifications@github.com wrote:
More specifically, na_simple_* loops over the count of expected clients doing a progress loop (with timeout NA_MAX_IDLE_TIME), which is set in NA_Test_server_init to be MPIEXEC_MAX_NUMPROCS. NUMRPOCS is 2, the -np option is given as 4.
Tests aren't green still - here's the leak report for na_test_server -c cci -p sm:
Direct leak of 32 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79f009a in __interceptor_malloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:38
#1 0x7f4af676c43a in tsearch (/lib/x86_64-linux-gnu/libc.so.6+0xf143a)
Indirect leak of 4096 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
#1 0x7f4af22e5114 in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1522
#2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
#3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
#4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
#5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)
Indirect leak of 4096 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
#1 0x7f4af22e51bf in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1539
#2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
#3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
#4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
#5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)
Indirect leak of 144 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
#1 0x7f4af22e501e in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1498
#2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
#3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
#4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
#5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)
Indirect leak of 64 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
#1 0x7f4af7744356 in handle_connect_request /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1786
#2 0x7f4af7745379 in na_cci_progress /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1927
#3 0x7f4af771cea5 in NA_Progress /nfs2/jenkins/work/sds/mercury/src/na/na.c:1482
#4 0x403791 in main /nfs2/jenkins/work/sds/mercury/Testing/na/test_server.c:298
#5 0x7f4af669c76c in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2176c)
Indirect leak of 64 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79f0201 in __interceptor_calloc ../../.././libsanitizer/asan/asan_malloc_linux.cc:54
#1 0x7f4af22e500b in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1497
#2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
#3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
#4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
#5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)
Indirect leak of 31 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79bbd8f in __interceptor_strdup ../../.././libsanitizer/asan/asan_interceptors.cc:514
#1 0x7f4af22e5090 in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1509
#2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
#3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
#4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
#5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)
Indirect leak of 31 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79bbd8f in __interceptor_strdup ../../.././libsanitizer/asan/asan_interceptors.cc:514
#1 0x7f4af77445b3 in handle_connect_request /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1797
#2 0x7f4af7745379 in na_cci_progress /nfs2/jenkins/work/sds/mercury/src/na/na_cci.c:1927
#3 0x7f4af771cea5 in NA_Progress /nfs2/jenkins/work/sds/mercury/src/na/na.c:1482
#4 0x403791 in main /nfs2/jenkins/work/sds/mercury/Testing/na/test_server.c:298
#5 0x7f4af669c76c in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2176c)
Indirect leak of 31 byte(s) in 1 object(s) allocated from:
#0 0x7f4af79bbd8f in __interceptor_strdup ../../.././libsanitizer/asan/asan_interceptors.cc:514
#1 0x7f4af22e52a9 in sm_create_conn /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1557
#2 0x7f4af22e65b5 in sm_handle_connect /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:1935
#3 0x7f4af22e705e in sm_progress_sock /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:2143
#4 0x7f4af22e31b3 in sm_conn_thread /nfs2/jenkins/work/sds/cci/src/plugins/ctp/sm/ctp_sm_api.c:795
#5 0x7f4af6465e99 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x7e99)
SUMMARY: AddressSanitizer: 8589 byte(s) leaked in 9 allocation(s)
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,48,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231358792,Fixes leaks introduced by #112,"Thanks Scott! I'll plan to look at it either today or later next week.
I believe the way it currently works is that Travis success is just based on the test suite, but it also performs and reports through HDFs CDash interface the sanitizer results. @soumagne?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,49,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231391271,Fixes leaks introduced by #112,"Yes it reports thread sanitizer and address sanitizer results. https://cdash.hdfgroup.org/index.php?project=MERCURY The interface should be updated and cleaner when we update to the latest version of cdash but the IT person has not gotten to it yet.
We are not filtering out CCI leak messages.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,50,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231391690,Fixes leaks introduced by #112,"Also travis does not test sm for now, I have to get back to it as they were some issues when I enabled it, I can try again though.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,51,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231431677,Fixes leaks introduced by #112,@scottatchley Just checked SM - connection leaks are gone. Thanks for the fix!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,52,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231463523,Fixes leaks introduced by #112,"Thanks for the check!
Are there any outstanding issues with the sm transport? Blocking mode? Race conditions? Other?

From: John Jenkins notifications@github.com
Date: July 8, 2016 at 2:09:21 PM EDT
To: mercury-hpc/mercury mercury@noreply.github.com
Cc: Mention mention@noreply.github.com, Atchley, Scott atchleyes@ornl.gov
Subject: Re: [mercury-hpc/mercury] tests leak fix (#114)
@scottatchleyhttps://github.com/scottatchley Just checked SM - connection leaks are gone. Thanks for the fix!

You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHubhttps://github.com//pull/114#issuecomment-231431677, or mute the threadhttps://github.com/notifications/unsubscribe/AAlWwOC_215V5TCmBGaknMqzAFxpFQdpks5qTpJNgaJpZM4JDWr7.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/JohnPJenkins,53,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231466027,Fixes leaks introduced by #112,"I'll defer to @carns on blocking support, haven't tried it myself. Otherwise, nothing outstanding AFAICT!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/carns,54,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231469830,Fixes leaks introduced by #112,Blocking mode on the cci/sm transport works great for me!  Not even a hiccup.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,55,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231488822,Fixes leaks introduced by #112,"Ok, thanks for the confirmation. I will continue to focus on verbs. I will probably write a CCI native test that spawns multiple threads on both a client and server and repeatedly connect, communicate, disconnect, and repeat.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,56,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231866314,Fixes leaks introduced by #112,"@scottatchley , you might want to look at that: https://cdash.hdfgroup.org/viewDynamicAnalysisFile.php?id=46913
I enabled the sm transport in travis and am getting some errors.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/carns,57,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231870927,Fixes leaks introduced by #112,"FYI, the RMA options specifically will fail when using CCI/SM on some linux distros if you don't set /proc/sys/kernel/yama/ptrace_scope to 0 (as root).  This loosens permission restrictions on that system call to allow two pids owned by the same users to access each other's memory.
If CCI/SM gets a predictable errno out of the cma system calls in this case then maybe it could print a verbose error message suggesting that fix?  A few of us have bumped into it at different times.
Not sure if that's what's going on, but it might be worth checking in that docker image.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,58,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231878376,Fixes leaks introduced by #112,Hmm ok thanks I just checked and it's indeed set to 1 so I guess that's the problem. I can't change that value though as this image does not allow me to be root unless I use another image which requires other changes and increases the boot time.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,59,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231878987,Fixes leaks introduced by #112,"1 - restricted ptrace: a process must have a predefined relationship
with the inferior it wants to call PTRACE_ATTACH on. By default,
this relationship is that of only its descendants when the above
classic criteria is also met. To change the relationship, an
inferior can call prctl(PR_SET_PTRACER, debugger, ...) to declare
an allowed debugger PID to call PTRACE_ATTACH on the inferior.
Using PTRACE_TRACEME is unchanged.
I guess we could also call prctl in that case...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,60,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231892651,Fixes leaks introduced by #112,"You beat me to this.
This is only required if using CMA. If using the mmap bounce buffers, it is not needed.
Perhaps we can add the prctl() call if CMA is enabled. I am hesitant to do that in a library without warning the application user that this security feature has been disabled.
Thoughts/comments?

On Jul 11, 2016, at 6:00 PM, Jerome Soumagne notifications@github.com wrote:
1 - restricted ptrace: a process must have a predefined relationship
with the inferior it wants to call PTRACE_ATTACH on. By default,
this relationship is that of only its descendants when the above
classic criteria is also met. To change the relationship, an
inferior can call prctl(PR_SET_PTRACER, debugger, ...) to declare
an allowed debugger PID to call PTRACE_ATTACH on the inferior.
Using PTRACE_TRACEME is unchanged.
I guess we could also call prctl in that case...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,61,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231895367,Fixes leaks introduced by #112,"I just reread the process_vm_[write|read]v() manpage. If it fails with EPERM, I have added the following message:
ctp_sm_rma: process_vm_[write|read]v() failed because it cannot trace another process. See https://www.kernel.org/doc/Documentation/security/Yama.txt for more details.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,62,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-231897853,Fixes leaks introduced by #112,"Ah ok then for the time being I could just simply try to have CMA disabled on the travis images, I also understand now why only the tests that call NA_Put/NA_Get were failing.
Hmmm yes that's true, although that's probably not as worse as setting ptrace_scope to 0 as root... Just googled it to see if others had the same issue and found that discussion: https://www.open-mpi.org/community/lists/users/2015/02/26391.php ... looks like their decision was to enable CMA if no yama and no PR_SET_PTRACER.
Maybe the best solution is to keep the verbose error message or have an option force CMA I guess which would call prctl() and throw a warning...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,63,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-232009969,Fixes leaks introduced by #112,CCI has --with-cma to enable CMA. Perhaps I should change the default to --without-cma and include a message in the configure --help output that enabling CMA will force the ability to trace? I could put more detail in the sm README.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/soumagne,64,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-232197960,Fixes leaks introduced by #112,"I added prctl(PR_SET_PTRACER, PR_SET_PTRACER_ANY, 0, 0, 0) if sm is used in the mercury testing suite and everything is fine now with CMA.
Just been thinking a little more and if enabling CMA in CCI changes permissions under the hood then it may do too much in some cases if let's say somebody only wants to have CMA enabled between parent and child processes and not any process. I think the best option is to just keep the verbose error message and let the app decide :)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/carns,65,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-232377735,Fixes leaks introduced by #112,"For my 2c, I like the idea of keeping cma on by default and just doing what we can via docs/error messages to tell people how to either turn it off or set permissions.
I'm worried about the failure mode of accidentally compiling without CMA support and then being confused by the resulting performance :)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,114,2016-07-01T17:56:06Z,2016-07-05T06:49:08Z,2016-07-13T14:51:46Z,CLOSED,False,6,0,4,https://github.com/JohnPJenkins,tests leak fix,3,[],https://github.com/mercury-hpc/mercury/pull/114,https://github.com/scottatchley,66,https://github.com/mercury-hpc/mercury/pull/114#issuecomment-232380070,Fixes leaks introduced by #112,"Ok, I will leave configure alone. If it detects CMA, it will compile it in. If compiled in and it fails, it will print the warning once when the first RMA fails with EPERM.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,115,2016-07-05T06:19:21Z,2016-07-05T06:49:30Z,2016-07-05T19:41:36Z,CLOSED,False,8,1,5,https://github.com/soumagne,Pull request test,4,[],https://github.com/mercury-hpc/mercury/pull/115,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/115,Test to see if the test suite is triggered correctly,Test to see if the test suite is triggered correctly,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,117,2016-07-08T21:07:53Z,2016-07-11T05:16:44Z,2016-08-10T21:39:59Z,CLOSED,False,6,1,1,https://github.com/JohnPJenkins,actually check protocol in mpi,1,[],https://github.com/mercury-hpc/mercury/pull/117,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/117,Found while looking into #107.,Found while looking into #107.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,118,2016-07-10T14:03:11Z,2016-07-11T05:16:44Z,2016-07-11T15:49:44Z,CLOSED,False,2,0,1,https://github.com/carns,add note about patching BMI for OSX,1,[],https://github.com/mercury-hpc/mercury/pull/118,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/118,"The BMI repository referred to in the Mercury documentation will not build on OSX without first applying the patch described in this README update, provided by Rob Ross.","The BMI repository referred to in the Mercury documentation will not build on OSX without first applying the patch described in this README update, provided by Rob Ross.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,118,2016-07-10T14:03:11Z,2016-07-11T05:16:44Z,2016-07-11T15:49:44Z,CLOSED,False,2,0,1,https://github.com/carns,add note about patching BMI for OSX,1,[],https://github.com/mercury-hpc/mercury/pull/118,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/118#issuecomment-231644195,"The BMI repository referred to in the Mercury documentation will not build on OSX without first applying the patch described in this README update, provided by Rob Ross.","Actually I had that patch in mercury in Testing/script, I guess I could remove it now as well",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,118,2016-07-10T14:03:11Z,2016-07-11T05:16:44Z,2016-07-11T15:49:44Z,CLOSED,False,2,0,1,https://github.com/carns,add note about patching BMI for OSX,1,[],https://github.com/mercury-hpc/mercury/pull/118,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/118#issuecomment-231776519,"The BMI repository referred to in the Mercury documentation will not build on OSX without first applying the patch described in this README update, provided by Rob Ross.","Ah, I didn't realize that the patch was there as well.  Probably for the best if it lives in the BMI repo in the long run, though.  Thanks for merging the doc update.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,121,2016-07-19T16:24:27Z,2016-07-19T21:47:27Z,2016-08-08T04:14:06Z,CLOSED,False,2,0,2,https://github.com/ashleypittman,Add a couple of missing includes to avoid compiler errors.,1,"['hg', 'na', 'minor', 'task']",https://github.com/mercury-hpc/mercury/pull/121,https://github.com/ashleypittman,1,https://github.com/mercury-hpc/mercury/pull/121,"Change-Id: I0dcba0e7f6775bb6070eb146d37a9ad934186bab
Signed-off-by: Ashley Pittman ashley.m.pittman@intel.com","Change-Id: I0dcba0e7f6775bb6070eb146d37a9ad934186bab
Signed-off-by: Ashley Pittman ashley.m.pittman@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,121,2016-07-19T16:24:27Z,2016-07-19T21:47:27Z,2016-08-08T04:14:06Z,CLOSED,False,2,0,2,https://github.com/ashleypittman,Add a couple of missing includes to avoid compiler errors.,1,"['hg', 'na', 'minor', 'task']",https://github.com/mercury-hpc/mercury/pull/121,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/121#issuecomment-233776681,"Change-Id: I0dcba0e7f6775bb6070eb146d37a9ad934186bab
Signed-off-by: Ashley Pittman ashley.m.pittman@intel.com","Thanks, I fixed those and a couple more in ee1cf63 and ecb9fff",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,1,https://github.com/mercury-hpc/mercury/pull/124,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-237898709,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","I haven't gone through all the changes yet but from what I just saw that looks quite good to me (even if some tests are failing for now :) ). A couple of things I'd like to keep though:

I'd like us not to use the TAILQ/LIST etc directly but keep using the mercury_queue / mercury_list stuff, maybe that just means improving it to provide macros that map to TAILQ/LIST so that we skip the allocation?
For the NA op ID passed to the NA calls, maybe we can just keep one parameter? instead of having 2 op_ids parameters",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-237902438,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","FWIW, I've become a big fan of utlist (and the other ut* companion data structures) for this sort of thing recently:
https://github.com/troydhanson/uthash/tree/master/src
The utlist.h file is standalone and can just be copied into a project, and it has a very permissive license.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/carns,4,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-237902711,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",Here is a better overview of utlist: https://troydhanson.github.io/uthash/utlist.html,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-237935221,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",Ah interesting actually I saw it recently in the MDHIM tree as well ;),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,6,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238003205,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","I'm still processing, but I looked over the test output and discovered that ""ctest"" under the configuration of mercury I've been using does 40 tests, while the one on travis does 105.
It turns out that none of the 40 tests that my build was doing ran the hg_core_forward_self() code path, and there was one line that needed to be updated on that code path.  I was able to manually trigger the bug without using ""ctest"" by running ""hg_test_rpc --comm bmi --protocol tcp --self"" ...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,7,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238047517,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","Hmm, I found another malloc() on the server side on the critical path.   When you start a server (listening==true), it creates/malloc's and posts HG_MAX_UNEXPECTED_RECV (defined to 256) hg_handles to the pending list (in the hg_context).   That's done by the function hg_core_listen().
The handles on the pending list get consumed as new requests come in to the server.  The processing function (HG_Core_progress()) continues to call hg_core_listen() if you are listening for requests. The hg_core_listen() checks to see if the pending list of handles in the context is not empty.   If the list is not empty (the normal case), hg_core_listen() doesn't do anything -- it just returns.
But if the list of pending handles in the context drops to zero (list is empty), then it allocates another set of HG_MAX_UNEXPECTED_RECV (256) handles for future requests.
So the behavior of the server is to process HG_MAX_UNEXPECTED_RECV (256) requests without allocating memory (it uses up the pending list).   Then on the next request it will do a burst of allocs while allocating another set of 256 handles for recv unexpected.  When I was doing detailed testing, I didn't run enough requests to trip on the 256 boundary to see this.
I think a way to handle this is to modify the code so that when the server is finished with a handle from the pending list that was allocated by hg_core_listen(), it should add it back to the pending list for reuse/recycle rather than freeing it (and using up the pending list).   That way we'd only do the malloc in hg_core_listen() if we are getting so many unexpected receives that we need more handles in the pending list pool than we currently have.
It seems like the key place here is hg_core_trigger_entry().  Currently for the ""Execute user callback"" case it unconditionally frees the handle after running the callback.   We need some way to tell if the current hg_handle is from the pending list, and if so we want to reset it and put it back on the pending list so it can be reused by the server (rather than freeing it and making the server malloc more down the line).
This only impacts the NA code path... for the ""self"" code path the handle from HG_Forward is directly used in the reply (so it doesn't use pending list handles in that case, I think).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,8,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238048159,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","I had thought about passing the preallocated NA op_id into the NA send/recv calls using the op_id that was already there (e.g. changing it from an OUT parameter into an IN/OUT parameter), but thought it would be easier/safer to do it as an extra arg to start with and then come back later to look at merging them together once things were stable.
My intent in using the <sys/queue.h> macros was to get around the mallocs in the mercury_queue/mercury_list stuff, and sys/queue.h was already in the build so it fit with the code already there.  utlist would be ok too, i think.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238138283,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","Re the 256 unexpected recv allocation, I agree, that's something we should definitely optimize and re-use the handles, that's also part of the fixes that I'd like to go in so that the NA plugins do the initial allocations etc.
Re the op ids and the macros stuff, yes no worries, I think that is already quite good that you went through that, we'll just clean it up and fix the existing the util stuff.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,10,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238299837,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","I just pushed an update to let the server cache the 256 unexpected recv handles and recycle them when done.  It works with the NA preallocation change I did earlier (so those structures get allocated at the same time as the handle).
On a somewhat related note, the address sanitizer output showed an issue at shutdown with the BMI na I'm looking at (a preallocated BMI op_id is getting freed at shutdown, and then the memory is referenced after the free).   To address this I think I need to add a reference counter to the BMI op_id (the CCI op_id already has a ref counter).   The reference count should be 2 at the shutdown (one for the preallocation and one for the NA that is currently using the op_id).  Dropping the preallocation should drop the reference count to 1 (instead of freeing), then when the NA is done it will drop the final reference and free.  At least that what I'm currently thinking (have tried to add it yet).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,11,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238302802,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","Thanks! Hopefully I can start getting through your changes soon. Also please send me the CLA stuff when you get that done.
I see, yes from what you're describing that seems right to me. Should be fine to add a refcount I think.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,12,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238307426,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",I'm working on getting approvals for signing the CLA.   Will advise.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,13,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238927669,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","Just to let you know, I'm now working on fixing mercury queue so that it uses atomics as well (and we can also get rid of all the mutexes for insertion/retrieval). So we'll definitely not use TAILQ or utlist directly in the code.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/JohnPJenkins,14,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238931017,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",Is there an off-the-shelf C library for concurrent/lockless data structures? May be easier than rolling our own.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238932460,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",Not that I know except what exists through opa_queue etc.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,16,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-238951874,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct",I created a separate issue #127 for that,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/soumagne,17,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-251015034,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","Had to rework a bunch of things but I've got everything clean and checked in now. There are a few more things (e.g., proc create needs to be moved to HG_Create) but I'm also fixing it. Thanks!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,124,2016-08-05T14:36:05Z,2016-10-03T01:49:41Z,2016-10-04T13:36:38Z,CLOSED,False,760,409,16,https://github.com/chuckcranor,reduced memory allocation,11,"['hg', 'na', 'major', 'defect']",https://github.com/mercury-hpc/mercury/pull/124,https://github.com/chuckcranor,18,https://github.com/mercury-hpc/mercury/pull/124#issuecomment-251389477,"I looked at the mallocs in mercury in the critical path.  For one noop operation a
mercury client does 14 memory allocations.  On the server it does 12 memory
allocations per bake noop operation.
I looked at the mercury code and spent some time restructuring
it to reduce the number of memory allocations in the critical path,
assuming that the client will cache the hg_handle it uses to communiate
with the server.
Changes I made include:
  - removed mallocs associated with the hg_context pending
    and processing lists by converting them into a <sys/queue.h>
    LIST.

  - removed malloc associated with the hg_forward_cb_info
    structure and carry the info in the handle.  I had to
    add a new internal forwarding callback type to make this
    work with the current layering in the code.

  - removed memory allocation of hg_completion_entry by embedding it
    in other structures.  the completion queue becomes a simple TAILQ.

  - removed hg_queue allocate of na completion queue by converting
    it to a TAILQ

  - moved allocation of na_cb_completion_data and na_cb_info
    into the op_id data structures (so when you allocate an
    op_id, you get the na_cb_completion_data and na_cb_info
    with them)

 - add framework to allow higher level code to preallocate na send
   and recv op_id's at handle creation time.   use framework to
   allow high level code to pass preallocated NA op_id's down into
   the na layer at message send/recv time  (feature is optional)
   this involves two new NA calls: NA_Prealloc_op_id()
   and NA_Prealloc_op_id_free().

   currently applies only to expected/unexpected send/recv since
   that's that bake-bulk noop uses.   if you cache your hg_handles,
   the cache will include the preallocated NA structures.

 - added support for preallocated NA op_id's to BMI and CCI
   (not currently compiling MPI, so didn't do that one)

those changes combined with caching the hg_handle on the client
side reduce the number of critical path memory allocations for noop
to zero.
[here's a detailed list of current mercury memory allocations on the
critical path for a noop call]
 For the client side there are 14 memory allocations per noop:

(allocate handle)
[1] malloc 184 bytes for hg_handle
[2] posix_memalign 252 bytes (align=4096) for handle->in_buf
[3] posix_memalign 252 bytes (align=4096) for handle->out_buf
(forward request)
[4] malloc 32 bytes for hg_forward_cb_info   (HG_Forward)
[5] calloc 128 bytes for a na_cci_op_id_t  (recv_expected: for reply)
[6] calloc 128 bytes for a na_cci_op_id_t  (send_unexpect: for request)
(send completes)
[7] malloc 40 bytes for na_cb_info struct
[8] malloc 32 bytes for na_cb_completion
[9] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/* trigger callback will discard, i think
since na_completed_count == 1 /
(reply arrives)
[10] malloc 40 bytes for na_cb_info struct
[11] malloc 32 bytes for na_cb_completion
[12] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
/ trigger callback has na_completed_count == 2, can pass up */
(rpc now complete)
[13] malloc 16 bytes for hg_completion_entry struct
[14] malloc 24 bytes for hg_queue_entry struct
(the callback will now be triggered)
the server side has 12 memory allocations (i'm not counting any of
the init stuff that happens during server startup):
(server gets unexpected recv at NA layer and queues it at NA layer)
[1] malloc 40 bytes for a na_cb_info struct
[2] malloc 32 bytes for a na_cb_completion
[3] malloc 24 bytes for a hg_queue_entry (for push)
(server HG callback triggered [hg_core_recv_input_cb()])
[4] malloc 24 bytes for a hg_list_entry_t  (for ""processing"" list)
[5] malloc 16 bytes for a hg_completion_entry
[6] malloc 24 bytes for a hg_queue_entry   (put on HG completion queue)
(server collects req and runs noop)
(server sends reply with HG_Respond() on handle)
[7] calloc 128 bytes for a na_cci_op_id_t    (sending reply)
(server's reply send completes)
[8] malloc 40 bytes for na_cb_info struct
[9] malloc 32 bytes for na_cb_completion
[10] malloc 24 bytes for hg_queue_entry  (na_private_context->completion)
(rpc now complete-queue completion for server)
[11] malloc 16 bytes for hg_completion_entry struct
[12] malloc 24 bytes for hg_queue_entry struct","nice, thanks for getting the fixes in!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,128,2016-08-10T21:52:34Z,2016-08-24T21:47:43Z,2016-08-24T21:47:43Z,CLOSED,False,54,50,2,https://github.com/JohnPJenkins,match proc function signatures for provided types,1,"['hg', 'minor', 'bug']",https://github.com/mercury-hpc/mercury/pull/128,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/128,"The following function signature (and it's peers):
hg_return_t hg_proc_hg_uint8_t(hg_proc_t proc, hg_uint8_t *data);
Doesn't match the expected function pointer type:
hg_return_t (*hg_proc_cb_t)(hg_proc_t proc, void *data);
This trips up C++ compilers in particular - they won't convert the function
pointer type. I believe C99 complains as well, but I haven't tried.
In any case, it's a simple enough fix - type-pun inputs to void*'s and cast back in the function bodies.","The following function signature (and it's peers):
hg_return_t hg_proc_hg_uint8_t(hg_proc_t proc, hg_uint8_t *data);
Doesn't match the expected function pointer type:
hg_return_t (*hg_proc_cb_t)(hg_proc_t proc, void *data);
This trips up C++ compilers in particular - they won't convert the function
pointer type. I believe C99 complains as well, but I haven't tried.
In any case, it's a simple enough fix - type-pun inputs to void*'s and cast back in the function bodies.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,128,2016-08-10T21:52:34Z,2016-08-24T21:47:43Z,2016-08-24T21:47:43Z,CLOSED,False,54,50,2,https://github.com/JohnPJenkins,match proc function signatures for provided types,1,"['hg', 'minor', 'bug']",https://github.com/mercury-hpc/mercury/pull/128,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/128#issuecomment-239018255,"The following function signature (and it's peers):
hg_return_t hg_proc_hg_uint8_t(hg_proc_t proc, hg_uint8_t *data);
Doesn't match the expected function pointer type:
hg_return_t (*hg_proc_cb_t)(hg_proc_t proc, void *data);
This trips up C++ compilers in particular - they won't convert the function
pointer type. I believe C99 complains as well, but I haven't tried.
In any case, it's a simple enough fix - type-pun inputs to void*'s and cast back in the function bodies.",I compile with pedantic and C11 and it doesn't complain :) anyway yes that should match the callback. I will merge it. Thanks!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,133,2016-08-18T13:18:55Z,2016-08-19T16:59:46Z,2016-08-19T18:03:52Z,CLOSED,False,58,0,2,https://github.com/carns,hg_proc_memcpy_decode_in_place(),3,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/133,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/133,"A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.","A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,133,2016-08-18T13:18:55Z,2016-08-19T16:59:46Z,2016-08-19T18:03:52Z,CLOSED,False,58,0,2,https://github.com/carns,hg_proc_memcpy_decode_in_place(),3,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/133,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/133#issuecomment-240864414,"A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.",Maybe I'm missing something but how is it different from the hg_proc_save_ptr() / hg_proc_restore_ptr() routines that were also added?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,133,2016-08-18T13:18:55Z,2016-08-19T16:59:46Z,2016-08-19T18:03:52Z,CLOSED,False,58,0,2,https://github.com/carns,hg_proc_memcpy_decode_in_place(),3,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/133,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/133#issuecomment-240865377,"A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.","It's different in that I didn't know about the save/restore_ptr() functions :)
I'll have a look at those and report back.  There might not be any reason to merge this pull request.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,133,2016-08-18T13:18:55Z,2016-08-19T16:59:46Z,2016-08-19T18:03:52Z,CLOSED,False,58,0,2,https://github.com/carns,hg_proc_memcpy_decode_in_place(),3,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/133,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/133#issuecomment-240867038,"A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.","I think I modified those recently when I fixed the bulk handle encoding and I may have forgotten to tell anyone about it :)
@liuxuezhao you may also want to look at the save/restore_ptr functions instead of using HG_Core directly...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,133,2016-08-18T13:18:55Z,2016-08-19T16:59:46Z,2016-08-19T18:03:52Z,CLOSED,False,58,0,2,https://github.com/carns,hg_proc_memcpy_decode_in_place(),3,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/133,https://github.com/carns,5,https://github.com/mercury-hpc/mercury/pull/133#issuecomment-241073931,"A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.","Yep, I'm closing this pull request.  I tested the save/restore_ptr proc functions just now and they work great.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,133,2016-08-18T13:18:55Z,2016-08-19T16:59:46Z,2016-08-19T18:03:52Z,CLOSED,False,58,0,2,https://github.com/carns,hg_proc_memcpy_decode_in_place(),3,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/133,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/133#issuecomment-241090951,"A variation on the existing hg_proc_memcopy() routine that just sets a pointer to refer to a memory address in the original message, rather than copying out to an external buffer.  This can be used to avoid one extra malloc/free pair when eagerly packing raw data payloads into RPC requests or responses.",OK great thanks!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,134,2016-08-18T13:29:05Z,2016-08-24T21:52:44Z,2016-08-24T21:52:44Z,CLOSED,False,6,3,1,https://github.com/carns,remove unecessary poll() call in na_cci if remaining time is zero,1,"['na', 'minor', 'defect']",https://github.com/mercury-hpc/mercury/pull/134,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/134,"Reduce latency by skipping the poll() system call if the na_cci progress loop has no timeout, or if timeout has been exhausted in previous iteration.","Reduce latency by skipping the poll() system call if the na_cci progress loop has no timeout, or if timeout has been exhausted in previous iteration.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,134,2016-08-18T13:29:05Z,2016-08-24T21:52:44Z,2016-08-24T21:52:44Z,CLOSED,False,6,3,1,https://github.com/carns,remove unecessary poll() call in na_cci if remaining time is zero,1,"['na', 'minor', 'defect']",https://github.com/mercury-hpc/mercury/pull/134,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/134#issuecomment-240863124,"Reduce latency by skipping the poll() system call if the na_cci progress loop has no timeout, or if timeout has been exhausted in previous iteration.","Just curious, does this reduce latency a lot?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,134,2016-08-18T13:29:05Z,2016-08-24T21:52:44Z,2016-08-24T21:52:44Z,CLOSED,False,6,3,1,https://github.com/carns,remove unecessary poll() call in na_cci if remaining time is zero,1,"['na', 'minor', 'defect']",https://github.com/mercury-hpc/mercury/pull/134,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/134#issuecomment-240865079,"Reduce latency by skipping the poll() system call if the na_cci progress loop has no timeout, or if timeout has been exhausted in previous iteration.","It helps a little bit, but nothing earth shattering.
One thing I am curious about is if there is any significant difference between busy-spinning at the Mercury API level (by calling progress with 0 timeout) vs. busy-spinning at the na_cci layer (by disabling the USE_POLL feature).  It may help the former, which would be helpful in having the ability to control polling behavior a little further up the stack.  I haven't confirmed, though.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,134,2016-08-18T13:29:05Z,2016-08-24T21:52:44Z,2016-08-24T21:52:44Z,CLOSED,False,6,3,1,https://github.com/carns,remove unecessary poll() call in na_cci if remaining time is zero,1,"['na', 'minor', 'defect']",https://github.com/mercury-hpc/mercury/pull/134,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/134#issuecomment-240866164,"Reduce latency by skipping the poll() system call if the na_cci progress loop has no timeout, or if timeout has been exhausted in previous iteration.","OK. Hmm yes not sure either, let's see once I add polling at the NA layer...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,136,2016-09-05T13:55:37Z,2016-09-07T05:39:35Z,2016-09-07T05:39:35Z,CLOSED,False,2,1,1,https://github.com/carns,prevent segfault if HG_Init() fails,1,"['hg', 'na', 'minor', 'bug']",https://github.com/mercury-hpc/mercury/pull/136,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/136,"Minor bug fix: HG_Init() typically segfaults if you attempt to initialize with an unsupported transport.  This makes it difficult for callers to probe to see which ones are available.
HG_Init() also prints out verbose errors to stderr in this case, but that's probably for the best.","Minor bug fix: HG_Init() typically segfaults if you attempt to initialize with an unsupported transport.  This makes it difficult for callers to probe to see which ones are available.
HG_Init() also prints out verbose errors to stderr in this case, but that's probably for the best.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,1,https://github.com/mercury-hpc/mercury/pull/143,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,2,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253302401,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Looking at the proc implementation, I don't immediately see any explicit padding, but I do see the addition of a checksum footer, so we need to take that into account.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,3,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253306265,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","I may need a bit of an assist on getting the checksum size. Looks like I'd need to a) determine what type of checksum to use, and b) get the size of the checksum out of mchecksum/xdr. Are users able to use different checksums than HG_CHECKSUM_DEFAULT?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253308287,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Hmm no you don't choose which checksum you use, since you don't create the proc, you just use the one that gets passed to you?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253308782,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Regarding the checksum footer yes that's true, although to be safe we could consider that it's max 64 bits?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253312018,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Otherwise looks good to me, you could also add the corresponding HG_Core function that just subtracts the header size from the max unexpected/expected and then have the HG function call the HG Core function and subtract to it the size of the checksum.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,7,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253314607,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.",Looks like mchecksum uses a max of 64 bits. What does XDR do?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,8,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253315327,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","XDR uses a fixed size delimited by the eager buf size. XDR encoding is currently broken I think though, I'd need to look at it.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,9,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253343948,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.",I included a hacky max checksum size this time around. Not great but mchecksum doesn't expose the info we need. The alternative is to create a mchecksum object on the fly and evaluate it but I'll just stick with the simpler option for now...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,10,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253344339,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Additionally, I return 0 if XDR is being used for the time being.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,11,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253351371,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Thanks! Yes that's fine to me, when we add larger checksums we'll reconsider I guess...
One minor thing is that I was thinking that the HG_Core routines would not subtract the checksum size since the user may not use hg_proc, so it would only get subtracted at the HG level...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,12,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253351719,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Good catch, so HG_Core always includes the header, and HG_ always includes the checksum (if enabled). I'll re-up the commit.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,13,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253351932,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.",Yes. Thanks!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,14,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253353575,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.",I also made some pedantic checks in case the overhead overflows the max (un)expected sizes.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253354593,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.",Trying the new rebase merge button... let's see :),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/soumagne,16,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253355695,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","The new rebase button seems much better to merge the pull requests, we dropped the pull request number in the commit message this time though but doesn't really matter.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,143,2016-10-12T18:41:53Z,2016-10-12T22:10:39Z,2016-10-13T12:56:55Z,MERGED,True,132,0,5,https://github.com/JohnPJenkins,[WIP] size getters for eager mode RPC arg xfers,1,"['hg', 'na', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/143,https://github.com/JohnPJenkins,17,https://github.com/mercury-hpc/mercury/pull/143#issuecomment-253505145,"See #142 for discussion. This initial implementation doesn't account for alignment/etc., unclear whether it's necessary.","Yes, very useful when merge commits are overkill.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,157,2017-02-08T16:31:53Z,2017-06-21T22:29:38Z,2017-06-21T22:29:38Z,CLOSED,False,1,1,1,https://github.com/gamvrosi,Avoid redefining _GNU_SOURCE,1,"['hg', 'minor', 'bug']",https://github.com/mercury-hpc/mercury/pull/157,https://github.com/gamvrosi,1,https://github.com/mercury-hpc/mercury/pull/157,We've been getting compilation warnings when including mercury_thread.h. This resolves them.,We've been getting compilation warnings when including mercury_thread.h. This resolves them.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,160,2017-02-27T17:54:50Z,2018-01-31T23:38:40Z,2018-10-02T21:27:18Z,CLOSED,False,977,3,13,https://github.com/soumagne,Add protocol register function in HG HL,1,"['hg', 'minor', 'feature']",https://github.com/mercury-hpc/mercury/pull/160,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/160,Add the protocol registration functions in the high level API layer,Add the protocol registration functions in the high level API layer,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,161,2017-02-28T02:02:31Z,2017-04-17T22:32:06Z,2018-10-02T21:27:18Z,CLOSED,False,56,3,6,https://github.com/carns,WIP: add mplex_id to hg_info and request header,2,[],https://github.com/mercury-hpc/mercury/pull/161,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/161,"this field can be used by services atop Mercury to vector incoming
RPCs to particular resources (e.g., cores) from the initial RPC handler","this field can be used by services atop Mercury to vector incoming
RPCs to particular resources (e.g., cores) from the initial RPC handler",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,161,2017-02-28T02:02:31Z,2017-04-17T22:32:06Z,2018-10-02T21:27:18Z,CLOSED,False,56,3,6,https://github.com/carns,WIP: add mplex_id to hg_info and request header,2,[],https://github.com/mercury-hpc/mercury/pull/161,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/161#issuecomment-294614736,"this field can be used by services atop Mercury to vector incoming
RPCs to particular resources (e.g., cores) from the initial RPC handler",Merged in 4023180 and e7493eb,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,162,2017-03-17T19:32:21Z,2017-08-04T23:13:52Z,2018-10-02T21:27:18Z,CLOSED,False,4165,115,31,https://github.com/soumagne,WIP: NA OFI plugin,69,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/162,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/162,This is a pull request that we can use to comment / discuss issues etc.,This is a pull request that we can use to comment / discuss issues etc.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,173,2017-08-09T02:57:48Z,2017-08-09T20:17:36Z,2018-10-02T21:27:18Z,CLOSED,False,49,24,3,https://github.com/carns,probe for available BMI port numbers,1,[],https://github.com/mercury-hpc/mercury/pull/173,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/173,"Fixes #165
Requires origin/master version of BMI as of 8/9/2017

if no port number is specified for BMI in server mode, then try ports
within a range until one of them works, and store default hostname and
port as address that can be queried with HG_Addr_to_string() and used
by other hosts","Fixes #165
Requires origin/master version of BMI as of 8/9/2017

if no port number is specified for BMI in server mode, then try ports
within a range until one of them works, and store default hostname and
port as address that can be queried with HG_Addr_to_string() and used
by other hosts",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,173,2017-08-09T02:57:48Z,2017-08-09T20:17:36Z,2018-10-02T21:27:18Z,CLOSED,False,49,24,3,https://github.com/carns,probe for available BMI port numbers,1,[],https://github.com/mercury-hpc/mercury/pull/173,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/173#issuecomment-321369384,"Fixes #165
Requires origin/master version of BMI as of 8/9/2017

if no port number is specified for BMI in server mode, then try ports
within a range until one of them works, and store default hostname and
port as address that can be queried with HG_Addr_to_string() and used
by other hosts",Merged in af445c7,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,177,2017-08-22T15:05:21Z,2017-09-05T15:30:09Z,2018-10-02T21:27:18Z,CLOSED,False,8,0,1,https://github.com/carns,bug fix to address cleanup in na_sm,1,[],https://github.com/mercury-hpc/mercury/pull/177,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/177,"Fixes #176
It looks like the address was not being removed from poll_addr_queue on addr_free.","Fixes #176
It looks like the address was not being removed from poll_addr_queue on addr_free.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,177,2017-08-22T15:05:21Z,2017-09-05T15:30:09Z,2018-10-02T21:27:18Z,CLOSED,False,8,0,1,https://github.com/carns,bug fix to address cleanup in na_sm,1,[],https://github.com/mercury-hpc/mercury/pull/177,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/177#issuecomment-327212896,"Fixes #176
It looks like the address was not being removed from poll_addr_queue on addr_free.",Merged in 41ed234,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,188,2017-10-31T03:06:58Z,2017-12-04T03:40:04Z,2017-12-04T03:40:52Z,CLOSED,False,69,7,3,https://github.com/carns,add HG_NEVER_BLOCK environment variable,1,"['hg', 'na', 'feature']",https://github.com/mercury-hpc/mercury/pull/188,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/188,"This adds an environment variable that does the following:

forces all progress and trigger timeouts to zero
skips obtaining file descriptor for blocking/polling purposes from na plugins that support this feature (currently cci and ofi)

The former could be done by the caller already via arguments to HG_Progress() and HG_Trigger(), but the latter cannot normally be controlled by the caller.  In the case of CCI/Verbs at least you can save multiple microseconds of latency by preventing it from doing bookkeeping on a notification file descriptor regardless of whether you intend to use it or not.
Ideally this would be an init-time option rather than an environment variable, see #187 .","This adds an environment variable that does the following:

forces all progress and trigger timeouts to zero
skips obtaining file descriptor for blocking/polling purposes from na plugins that support this feature (currently cci and ofi)

The former could be done by the caller already via arguments to HG_Progress() and HG_Trigger(), but the latter cannot normally be controlled by the caller.  In the case of CCI/Verbs at least you can save multiple microseconds of latency by preventing it from doing bookkeeping on a notification file descriptor regardless of whether you intend to use it or not.
Ideally this would be an init-time option rather than an environment variable, see #187 .",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,191,2017-11-20T22:58:13Z,2017-11-28T22:17:58Z,2017-11-28T22:18:28Z,MERGED,True,4,0,1,https://github.com/vvenkates27,Checking for x86 before using cpu_spinwait,1,"['hg', 'minor', 'task']",https://github.com/mercury-hpc/mercury/pull/191,https://github.com/vvenkates27,1,https://github.com/mercury-hpc/mercury/pull/191,"Check if its x86 before using cpu_spinwait, if not use
empty function now on other architectures.","Check if its x86 before using cpu_spinwait, if not use
empty function now on other architectures.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,203,2018-01-21T22:56:28Z,2018-04-12T22:57:01Z,2018-10-02T21:27:19Z,CLOSED,False,21,10,1,https://github.com/hppritcha,na/ofi: fix a double free problem in error case,1,[],https://github.com/mercury-hpc/mercury/pull/203,https://github.com/hppritcha,1,https://github.com/mercury-hpc/mercury/pull/203,"If a provider is unable to initialize properly
when creating an endpoint or domain, the OFI NA
wasn't handling cleanup of OFI info objects quite
right, resulting in heap corruption with double
frees, etc.
Signed-off-by: Howard Pritchard howardp@lanl.gov","If a provider is unable to initialize properly
when creating an endpoint or domain, the OFI NA
wasn't handling cleanup of OFI info objects quite
right, resulting in heap corruption with double
frees, etc.
Signed-off-by: Howard Pritchard howardp@lanl.gov",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,203,2018-01-21T22:56:28Z,2018-04-12T22:57:01Z,2018-10-02T21:27:19Z,CLOSED,False,21,10,1,https://github.com/hppritcha,na/ofi: fix a double free problem in error case,1,[],https://github.com/mercury-hpc/mercury/pull/203,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/203#issuecomment-380971709,"If a provider is unable to initialize properly
when creating an endpoint or domain, the OFI NA
wasn't handling cleanup of OFI info objects quite
right, resulting in heap corruption with double
frees, etc.
Signed-off-by: Howard Pritchard howardp@lanl.gov",Merged in 52a20eb,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,206,2018-01-29T12:15:11Z,2018-10-25T18:49:28Z,2018-10-25T18:49:29Z,CLOSED,False,4,0,1,https://github.com/marcvef,NA CCI: Added error handling when cci_connect() fails,1,[],https://github.com/mercury-hpc/mercury/pull/206,https://github.com/marcvef,1,https://github.com/mercury-hpc/mercury/pull/206,"When na_cci_addr_lookup() is eventually called from HG_Addr_lookup(), the function cci_connect() can return an error which is currently not handled. As a result, clients receive HG_SUCCESS when calling HG_Addr_lookup() although it has failed. This patch returns the appropriate error message for two cases: (1) cci_connect() timed out, or (2) other errors.
We faced this situation, while using CCI with the verbs plugin, when many clients called HG_Addr_lookup() to the same servers, essentially overwhelming the server to respond in time. The following error message was produced on the client side, with HG_Addr_lookup() returning HG_SUCCESS:
 # na_cci_addr_lookup(): cci_connect(verbs://a0357-ib:4433) failed with CCI_ETIMEDOUT
# NA -- Error -- /some/path/mercury/src/na/na_cci.c:833

Note, that cci_connect() can be given an optional timeout value (currently set to NULL in na_cci_addr_lookup(), i.e., wait forever according to documentation), which is not used in cci_connect().","When na_cci_addr_lookup() is eventually called from HG_Addr_lookup(), the function cci_connect() can return an error which is currently not handled. As a result, clients receive HG_SUCCESS when calling HG_Addr_lookup() although it has failed. This patch returns the appropriate error message for two cases: (1) cci_connect() timed out, or (2) other errors.
We faced this situation, while using CCI with the verbs plugin, when many clients called HG_Addr_lookup() to the same servers, essentially overwhelming the server to respond in time. The following error message was produced on the client side, with HG_Addr_lookup() returning HG_SUCCESS:
 # na_cci_addr_lookup(): cci_connect(verbs://a0357-ib:4433) failed with CCI_ETIMEDOUT
# NA -- Error -- /some/path/mercury/src/na/na_cci.c:833

Note, that cci_connect() can be given an optional timeout value (currently set to NULL in na_cci_addr_lookup(), i.e., wait forever according to documentation), which is not used in cci_connect().",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,206,2018-01-29T12:15:11Z,2018-10-25T18:49:28Z,2018-10-25T18:49:29Z,CLOSED,False,4,0,1,https://github.com/marcvef,NA CCI: Added error handling when cci_connect() fails,1,[],https://github.com/mercury-hpc/mercury/pull/206,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/206#issuecomment-361421417,"When na_cci_addr_lookup() is eventually called from HG_Addr_lookup(), the function cci_connect() can return an error which is currently not handled. As a result, clients receive HG_SUCCESS when calling HG_Addr_lookup() although it has failed. This patch returns the appropriate error message for two cases: (1) cci_connect() timed out, or (2) other errors.
We faced this situation, while using CCI with the verbs plugin, when many clients called HG_Addr_lookup() to the same servers, essentially overwhelming the server to respond in time. The following error message was produced on the client side, with HG_Addr_lookup() returning HG_SUCCESS:
 # na_cci_addr_lookup(): cci_connect(verbs://a0357-ib:4433) failed with CCI_ETIMEDOUT
# NA -- Error -- /some/path/mercury/src/na/na_cci.c:833

Note, that cci_connect() can be given an optional timeout value (currently set to NULL in na_cci_addr_lookup(), i.e., wait forever according to documentation), which is not used in cci_connect().","Interesting, thanks! I'll go through it and merge it.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,208,2018-02-01T18:06:17Z,2018-02-20T22:40:25Z,2018-10-02T21:27:19Z,MERGED,True,1093,329,32,https://github.com/soumagne,Bring scalable endpoint changes,19,[],https://github.com/mercury-hpc/mercury/pull/208,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/208,This is related to the discussion in #168,This is related to the discussion in #168,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,212,2018-02-22T20:56:02Z,2018-02-28T20:36:58Z,2018-10-02T21:27:19Z,MERGED,True,34,7,1,https://github.com/soumagne,Fix mercury poll to prevent concurrent accesses to poll set,1,[],https://github.com/mercury-hpc/mercury/pull/212,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/212,"Reported by Chuck:
chuck@h0:/proj/TableFS/testU16/scripts/batch % fgrep 'Could not find fd in poll_set' /tmp/nex.log
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set","Reported by Chuck:
chuck@h0:/proj/TableFS/testU16/scripts/batch % fgrep 'Could not find fd in poll_set' /tmp/nex.log
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set
 # hg_poll_remove(): Could not find fd in poll_set",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,213,2018-03-05T16:03:38Z,2018-10-25T19:19:02Z,2018-10-25T19:19:02Z,CLOSED,False,15,15,1,https://github.com/vvenkates27,TEST: Adding RPC rate for latency test,1,[],https://github.com/mercury-hpc/mercury/pull/213,https://github.com/vvenkates27,1,https://github.com/mercury-hpc/mercury/pull/213,"Modifying output fo rpc_lat_test, fixing an incorrect comment
and add rpc rate for output","Modifying output fo rpc_lat_test, fixing an incorrect comment
and add rpc rate for output",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,215,2018-03-15T15:39:59Z,2018-04-16T22:42:32Z,2018-10-02T21:27:19Z,CLOSED,False,39285,0,271,https://github.com/roblatham00,Boost rollup,2,[],https://github.com/mercury-hpc/mercury/pull/215,https://github.com/roblatham00,1,https://github.com/mercury-hpc/mercury/pull/215,"If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211","If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,215,2018-03-15T15:39:59Z,2018-04-16T22:42:32Z,2018-10-02T21:27:19Z,CLOSED,False,39285,0,271,https://github.com/roblatham00,Boost rollup,2,[],https://github.com/mercury-hpc/mercury/pull/215,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/215#issuecomment-373467280,"If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211",Thanks! Yeah I think something is missing in the cmake config but I can take care of it. Also I would still keep the conditional to check for boost so we probably don't need commit d4559db,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,215,2018-03-15T15:39:59Z,2018-04-16T22:42:32Z,2018-10-02T21:27:19Z,CLOSED,False,39285,0,271,https://github.com/roblatham00,Boost rollup,2,[],https://github.com/mercury-hpc/mercury/pull/215,https://github.com/roblatham00,3,https://github.com/mercury-hpc/mercury/pull/215#issuecomment-380590319,"If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211","OK, i have remove the HAVE_BOOST checks, but I don't think I am correctly telling mercury ""hey, use these headers""",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,215,2018-03-15T15:39:59Z,2018-04-16T22:42:32Z,2018-10-02T21:27:19Z,CLOSED,False,39285,0,271,https://github.com/roblatham00,Boost rollup,2,[],https://github.com/mercury-hpc/mercury/pull/215,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/215#issuecomment-380896534,"If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211",OK I will look at it,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,215,2018-03-15T15:39:59Z,2018-04-16T22:42:32Z,2018-10-02T21:27:19Z,CLOSED,False,39285,0,271,https://github.com/roblatham00,Boost rollup,2,[],https://github.com/mercury-hpc/mercury/pull/215,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/215#issuecomment-381275092,"If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211",OK I see what needs to be fixed. I'm working on it now.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,215,2018-03-15T15:39:59Z,2018-04-16T22:42:32Z,2018-10-02T21:27:19Z,CLOSED,False,39285,0,271,https://github.com/roblatham00,Boost rollup,2,[],https://github.com/mercury-hpc/mercury/pull/215,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/215#issuecomment-381772938,"If we ship with the boost preprocessor headers we don't need to depend on boost and users can still get the fancy helper macros.    I'm pretty nervous about the cmake changes.  Also not entirely convinced yet that mercury clients will not notice this change...
Closes #211",Merged in 662423e,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,216,2018-03-20T22:38:52Z,2018-03-29T17:34:01Z,2018-10-02T21:27:19Z,MERGED,True,2604,1724,29,https://github.com/soumagne,Rework mercury core layer to better separate HG layer from HG core layer,7,[],https://github.com/mercury-hpc/mercury/pull/216,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/216,"Separate HG class from HG core class
Separate HG context from HG core context
Separate HG handle from HG core handle
Separate proc_bulk from mercury_proc.h","Separate HG class from HG core class
Separate HG context from HG core context
Separate HG handle from HG core handle
Separate proc_bulk from mercury_proc.h",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,217,2018-03-26T14:01:20Z,2018-03-30T19:10:01Z,2018-10-02T21:27:19Z,CLOSED,False,51,3,3,https://github.com/carns,HG_Registered_proc_cb,2,[],https://github.com/mercury-hpc/mercury/pull/217,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/217,"Adds a new API call, HG_Registered_proc_cb(), which is identical to HG_Registered except that if the RPC has been registered it returns pointers to the input and output encoder callbacks.
PR also includes less verbose explicit error messages in the set_rpc() code path, so that failure to reset a handle because the hg_id_t has not been registered yet can be a gracefully recovered error instead of a critical error.
Also a bug fix to the set_rpc() path to make sure that it does not modify the caller's output arguments unless the call is successful.
The purpose of this set of changes is to enable the following pattern: a client attempts to use an hg_id_t that hasn't been registered yet, then falls back to register it on the fly, reusing encoders from an existing hg_id_t that is known to have the same wire protocol.  This will be used for dynamic registration of new hg_id_ts that are being multiplexed for service-specific reasons on the server.","Adds a new API call, HG_Registered_proc_cb(), which is identical to HG_Registered except that if the RPC has been registered it returns pointers to the input and output encoder callbacks.
PR also includes less verbose explicit error messages in the set_rpc() code path, so that failure to reset a handle because the hg_id_t has not been registered yet can be a gracefully recovered error instead of a critical error.
Also a bug fix to the set_rpc() path to make sure that it does not modify the caller's output arguments unless the call is successful.
The purpose of this set of changes is to enable the following pattern: a client attempts to use an hg_id_t that hasn't been registered yet, then falls back to register it on the fly, reusing encoders from an existing hg_id_t that is known to have the same wire protocol.  This will be used for dynamic registration of new hg_id_ts that are being multiplexed for service-specific reasons on the server.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,219,2018-04-11T01:21:15Z,2018-04-12T22:57:01Z,2018-10-02T21:27:19Z,CLOSED,False,9,2,1,https://github.com/carns,"support ""verbs;ofi_rxm"" libfabric provider",1,[],https://github.com/mercury-hpc/mercury/pull/219,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/219,"This allows Mercury to be initialized with ""verbs;ofi_rxm"" provider combination in addition to the base ""verbs"" provider.  The former uses a utility provider (ofi_rxm) to implements the RDM endpoint type over the MSG endpoint type of the underlying verbs provider.  This is anticipated to be more stable and performant than the base verbs provider in the long run.
Retains the same flags/options as the existing verbs provider path, but (for now at least) does not mutex lock API calls until we determine if that's needed or not.","This allows Mercury to be initialized with ""verbs;ofi_rxm"" provider combination in addition to the base ""verbs"" provider.  The former uses a utility provider (ofi_rxm) to implements the RDM endpoint type over the MSG endpoint type of the underlying verbs provider.  This is anticipated to be more stable and performant than the base verbs provider in the long run.
Retains the same flags/options as the existing verbs provider path, but (for now at least) does not mutex lock API calls until we determine if that's needed or not.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,219,2018-04-11T01:21:15Z,2018-04-12T22:57:01Z,2018-10-02T21:27:19Z,CLOSED,False,9,2,1,https://github.com/carns,"support ""verbs;ofi_rxm"" libfabric provider",1,[],https://github.com/mercury-hpc/mercury/pull/219,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/219#issuecomment-380971630,"This allows Mercury to be initialized with ""verbs;ofi_rxm"" provider combination in addition to the base ""verbs"" provider.  The former uses a utility provider (ofi_rxm) to implements the RDM endpoint type over the MSG endpoint type of the underlying verbs provider.  This is anticipated to be more stable and performant than the base verbs provider in the long run.
Retains the same flags/options as the existing verbs provider path, but (for now at least) does not mutex lock API calls until we determine if that's needed or not.",Merged in caaaac3,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,221,2018-04-20T21:11:40Z,2018-05-30T21:49:10Z,2018-10-02T21:27:19Z,CLOSED,False,117,45,2,https://github.com/jiayulu,use native psm2 address,4,[],https://github.com/mercury-hpc/mercury/pull/221,https://github.com/jiayulu,1,https://github.com/mercury-hpc/mercury/pull/221,"use native psm2 address for the psm2 provider in the ofi plugin.
Signed-off-by: Yulu Jia yulu.jia@intel.com","use native psm2 address for the psm2 provider in the ofi plugin.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,226,2018-06-12T10:24:54Z,2018-10-26T19:27:19Z,2018-10-26T19:27:19Z,CLOSED,False,51,0,2,https://github.com/dorier,added HG_Registered_disable_response function to check if response is…,1,[],https://github.com/mercury-hpc/mercury/pull/226,https://github.com/dorier,1,https://github.com/mercury-hpc/mercury/pull/226,This new function can be used to check if response is disabled for a given RPC ID.,This new function can be used to check if response is disabled for a given RPC ID.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,231,2018-08-06T19:32:11Z,2018-08-08T00:57:23Z,2018-10-02T21:27:19Z,CLOSED,False,17,6,1,https://github.com/carns,[WIP] update NA_OFI_PROV_VERBS_RXM code path,1,[],https://github.com/mercury-hpc/mercury/pull/231,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/231,"ofi_na.c sets different provider type enumeration depending on whether you use ""verbs"" or ""verbs;ofi_rxm"" as the libfabric provider.  Right now they use slightly different options and workarounds.  This patch synchronizes them so that the ""verbs;ofi_rxm"" performs the same workarounds as ""verbs"".  This largely pertains to thread safety and signaling.
Not clear if this is correct yet, just sharing PR for comment at this point.","ofi_na.c sets different provider type enumeration depending on whether you use ""verbs"" or ""verbs;ofi_rxm"" as the libfabric provider.  Right now they use slightly different options and workarounds.  This patch synchronizes them so that the ""verbs;ofi_rxm"" performs the same workarounds as ""verbs"".  This largely pertains to thread safety and signaling.
Not clear if this is correct yet, just sharing PR for comment at this point.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,235,2018-08-07T21:02:47Z,2018-08-07T21:25:42Z,2018-10-02T21:27:19Z,MERGED,True,4,3,1,https://github.com/carns,bug fixes to fi_writemsg() usage with verbs,1,[],https://github.com/mercury-hpc/mercury/pull/235,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/235,"add FI_COMPLETION flag
fix pointer error in msg_rma.desc (necessary for providers using MR_BASIC)

Fixes #233","add FI_COMPLETION flag
fix pointer error in msg_rma.desc (necessary for providers using MR_BASIC)

Fixes #233",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,235,2018-08-07T21:02:47Z,2018-08-07T21:25:42Z,2018-10-02T21:27:19Z,MERGED,True,4,3,1,https://github.com/carns,bug fixes to fi_writemsg() usage with verbs,1,[],https://github.com/mercury-hpc/mercury/pull/235,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/235#issuecomment-411208630,"add FI_COMPLETION flag
fix pointer error in msg_rma.desc (necessary for providers using MR_BASIC)

Fixes #233",Thanks! that looks good to me.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,237,2018-08-08T18:41:59Z,2018-08-14T16:08:10Z,2018-10-02T21:27:19Z,MERGED,True,15,14,2,https://github.com/carns,unify verbs and verbs;ofi_rxm path in na_ofi,2,[],https://github.com/mercury-hpc/mercury/pull/237,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/237,"Fixes #236 .
Does not resolve any other correctness issues, just gives us a cleaner starting point.","Fixes #236 .
Does not resolve any other correctness issues, just gives us a cleaner starting point.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,237,2018-08-08T18:41:59Z,2018-08-14T16:08:10Z,2018-10-02T21:27:19Z,MERGED,True,15,14,2,https://github.com/carns,unify verbs and verbs;ofi_rxm path in na_ofi,2,[],https://github.com/mercury-hpc/mercury/pull/237,https://github.com/carns,2,https://github.com/mercury-hpc/mercury/pull/237#issuecomment-411608486,"Fixes #236 .
Does not resolve any other correctness issues, just gives us a cleaner starting point.",Minor correction: this does fix a bug.  When this PR is applied (in conjunction with the other recent changes in origin/master) then the Margo benchmarks finalize cleanly.  origin/master is missing a check for the RXM provider around a call to fi_cq_signal() within na_ofi_cancel() that will segfault otherwise.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,239,2018-08-17T17:52:23Z,2018-08-21T19:33:51Z,2018-10-02T21:27:19Z,MERGED,True,6,8,1,https://github.com/carns,remove mutex around verbs provider path,1,[],https://github.com/mercury-hpc/mercury/pull/239,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/239,"Enables FI_THREAD_SAFE for verbs;ofi_rxm and removes extra mutex locks.
Per earlier email discussion with @liuxuezhao .","Enables FI_THREAD_SAFE for verbs;ofi_rxm and removes extra mutex locks.
Per earlier email discussion with @liuxuezhao .",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,243,2018-09-10T20:53:14Z,2018-09-10T21:58:35Z,2018-10-02T21:27:19Z,MERGED,True,13,1,1,https://github.com/carns,Carns/dev ofi gni fixes,2,[],https://github.com/mercury-hpc/mercury/pull/243,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/243,Fixes #241,Fixes #241,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,245,2018-09-11T21:23:14Z,2018-10-02T18:47:37Z,2018-10-02T21:27:19Z,MERGED,True,152,152,1,https://github.com/carns,unify OFI provider-specific options in one macro,1,[],https://github.com/mercury-hpc/mercury/pull/245,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/245,"fixes #240
All optional parameters that vary by OFI provider are listed in a single macro at the top of na_ofi.c with this PR.  The code path keys off of these by indexing parameter arrays based on the provider enum.
The only remaining provider-specific conditionals in the communications path are there to deal with addressing differences.
The purpose of this PR is to make it less fragile to modify parameters for specific providers.","fixes #240
All optional parameters that vary by OFI provider are listed in a single macro at the top of na_ofi.c with this PR.  The code path keys off of these by indexing parameter arrays based on the provider enum.
The only remaining provider-specific conditionals in the communications path are there to deal with addressing differences.
The purpose of this PR is to make it less fragile to modify parameters for specific providers.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,246,2018-09-24T21:52:56Z,2018-10-17T05:09:52Z,2018-10-26T18:56:43Z,MERGED,True,2956,1603,20,https://github.com/soumagne,Bulk: bind HG addr to bulk handle and NA OFI addressing fixes,2,"['hg', 'na', 'critical', 'fixed', 'defect', 'feature']",https://github.com/mercury-hpc/mercury/pull/246,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/246,"HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes","HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,246,2018-09-24T21:52:56Z,2018-10-17T05:09:52Z,2018-10-26T18:56:43Z,MERGED,True,2956,1603,20,https://github.com/soumagne,Bulk: bind HG addr to bulk handle and NA OFI addressing fixes,2,"['hg', 'na', 'critical', 'fixed', 'defect', 'feature']",https://github.com/mercury-hpc/mercury/pull/246,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/246#issuecomment-428247355,"HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes","I have reworked the entire NA OFI plugin so that addressing is done using native addressing only, I think it is much cleaner now and we no longer need the fi_getinfo() on lookup. Tests pass for sockets / verbs / psm2. Gni has one issue remaining that seems to be due to FI_SOURCE_ERR not signaling the wait_set correctly, I have to debug that. I also have to enable the ""caching"" of serialized bulk handles.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,246,2018-09-24T21:52:56Z,2018-10-17T05:09:52Z,2018-10-26T18:56:43Z,MERGED,True,2956,1603,20,https://github.com/soumagne,Bulk: bind HG addr to bulk handle and NA OFI addressing fixes,2,"['hg', 'na', 'critical', 'fixed', 'defect', 'feature']",https://github.com/mercury-hpc/mercury/pull/246,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/246#issuecomment-429048212,"HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes",We decided that we will also add a HG_Bulk_get_addr() function so that the address can be retrieved from a bulk handle and then passed to HG_Bulk_transfer().,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,246,2018-09-24T21:52:56Z,2018-10-17T05:09:52Z,2018-10-26T18:56:43Z,MERGED,True,2956,1603,20,https://github.com/soumagne,Bulk: bind HG addr to bulk handle and NA OFI addressing fixes,2,"['hg', 'na', 'critical', 'fixed', 'defect', 'feature']",https://github.com/mercury-hpc/mercury/pull/246,https://github.com/liuxuezhao,4,https://github.com/mercury-hpc/mercury/pull/246#issuecomment-429685909,"HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes","I have reworked the entire NA OFI plugin so that addressing is done using native addressing only, I think it is much cleaner now and we no longer need the fi_getinfo() on lookup. Tests pass for sockets / verbs / psm2. Gni has one issue remaining that seems to be due to FI_SOURCE_ERR not signaling the wait_set correctly, I have to debug that. I also have to enable the ""caching"" of serialized bulk handles.

Hi, just curious that after the change, does it support FI_SOURCE? By previous testing, by using FI_SOURCE the PSM2 can get higher RPC rate.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,246,2018-09-24T21:52:56Z,2018-10-17T05:09:52Z,2018-10-26T18:56:43Z,MERGED,True,2956,1603,20,https://github.com/soumagne,Bulk: bind HG addr to bulk handle and NA OFI addressing fixes,2,"['hg', 'na', 'critical', 'fixed', 'defect', 'feature']",https://github.com/mercury-hpc/mercury/pull/246,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/246#issuecomment-429709459,"HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes","Yes PSM2 still supports FI_SOURCE | FI_SOURCE_ERR, I haven't changed that. The change is that GNI is now also enabled in that mode.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,246,2018-09-24T21:52:56Z,2018-10-17T05:09:52Z,2018-10-26T18:56:43Z,MERGED,True,2956,1603,20,https://github.com/soumagne,Bulk: bind HG addr to bulk handle and NA OFI addressing fixes,2,"['hg', 'na', 'critical', 'fixed', 'defect', 'feature']",https://github.com/mercury-hpc/mercury/pull/246,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/246#issuecomment-430129070,"HG Bulk:

add HG_Bulk_bind(), HG_Bulk_get_addr(), HG_Bulk_get_context_id()
also add HG_Bulk_bind_transfer() for convenience

HG Bulk proc:

enable caching of serialized bulk handles / cleanup

HG Core:

add HG_Core_addr_create() and HG_Core_addr_set_na()

NA:

add NA_Addr_serialize()/NA_Addr_deserialize()/get_serialize_size() and corresponding plugin callbacks

NA OFI:

Add na_ofi_addr_serialize() plugin callback implementation
Rework address handling to only use native addressing format
Fix passing of init node and domain info in na_ofi_initialize()
Fix socket provider to bind to specific host/port (fix #207)
Update gni provider to use FI_SOURCE | FI_SOURCE_ERR caps
Rework and clean up na_ofi_progress()
Allocate src_err_addr for fi_cq_readerr()
Clean up NA OFI op ID and na_ofi_complete()
Clean up NA OFI plugin and add missing NA_INLINE / prototypes
Remove unused macros

Testing:

update bulk test for bind addr testing / clean up return codes",Requires ofiwg/libfabric#4532 and ofiwg/libfabric#4520. Work around  ofiwg/libfabric#4521. All tests pass after that so should be ready to be merged after documentation is updated.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,247,2018-09-28T15:47:08Z,2018-09-28T16:04:12Z,2018-10-02T21:27:19Z,CLOSED,False,2,0,1,https://github.com/carns,fix uninitialized variable,1,[],https://github.com/mercury-hpc/mercury/pull/247,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/247,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,247,2018-09-28T15:47:08Z,2018-09-28T16:04:12Z,2018-10-02T21:27:19Z,CLOSED,False,2,0,1,https://github.com/carns,fix uninitialized variable,1,[],https://github.com/mercury-hpc/mercury/pull/247,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/247#issuecomment-425484342,,Ah I see thanks I'll just do a memset instead to make sure the struct is initialized,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,247,2018-09-28T15:47:08Z,2018-09-28T16:04:12Z,2018-10-02T21:27:19Z,CLOSED,False,2,0,1,https://github.com/carns,fix uninitialized variable,1,[],https://github.com/mercury-hpc/mercury/pull/247,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/247#issuecomment-425486069,,"Ok, sounds good.  I found this while trying to track down a problem in a different WIP merge request; once you have a memset fix in master I'll rebase that branch.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,247,2018-09-28T15:47:08Z,2018-09-28T16:04:12Z,2018-10-02T21:27:19Z,CLOSED,False,2,0,1,https://github.com/carns,fix uninitialized variable,1,[],https://github.com/mercury-hpc/mercury/pull/247,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/247#issuecomment-425486538,,It's in master now,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,247,2018-09-28T15:47:08Z,2018-09-28T16:04:12Z,2018-10-02T21:27:19Z,CLOSED,False,2,0,1,https://github.com/carns,fix uninitialized variable,1,[],https://github.com/mercury-hpc/mercury/pull/247,https://github.com/carns,5,https://github.com/mercury-hpc/mercury/pull/247#issuecomment-425492284,,thanks Jerome!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,248,2018-10-03T15:20:29Z,2018-10-03T16:02:10Z,2018-10-03T16:02:10Z,MERGED,True,1,1,1,https://github.com/carns,re-enable FI_DIRECTED_RECV for ofi verbs provider,1,[],https://github.com/mercury-hpc/mercury/pull/248,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/248,"FI_DIRECTED_RECV is supported when using the verbs;ofi_rxm provider stack.  Re-enable it to be consistent with other providers in na_ofi.c and gain an extra layer of safety on message matching.
Closes #244","FI_DIRECTED_RECV is supported when using the verbs;ofi_rxm provider stack.  Re-enable it to be consistent with other providers in na_ofi.c and gain an extra layer of safety on message matching.
Closes #244",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,259,2018-10-29T23:40:41Z,2018-10-31T23:03:43Z,2018-11-06T00:05:36Z,CLOSED,False,2,0,1,https://github.com/ael-code,fix: CMake silently ignore SM auto routing option,1,[],https://github.com/mercury-hpc/mercury/pull/259,https://github.com/ael-code,1,https://github.com/mercury-hpc/mercury/pull/259,"If LibUUID was not found by cmake the MERCURY_USE_SM_ROUTING was silently ignored.
CMake would now throw an error explaining that SM auto routing cannot be supported without LibUUID.
fix #258","If LibUUID was not found by cmake the MERCURY_USE_SM_ROUTING was silently ignored.
CMake would now throw an error explaining that SM auto routing cannot be supported without LibUUID.
fix #258",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,260,2018-11-05T20:08:46Z,2018-11-06T00:03:55Z,2018-11-06T00:06:15Z,CLOSED,False,2,2,1,https://github.com/carns,enable wait_fd and auto progress for psm2,1,[],https://github.com/mercury-hpc/mercury/pull/260,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/260,"Tested on Bebop system at ANL/LCRC.  This sets the WAIT_FD option in na_ofi in combination with the AUTO progress mode (the former will not work without the latter).
Causes a penalty to latency but not throughput in exchange for reducing CPU consumption when not in busy spin mode.","Tested on Bebop system at ANL/LCRC.  This sets the WAIT_FD option in na_ofi in combination with the AUTO progress mode (the former will not work without the latter).
Causes a penalty to latency but not throughput in exchange for reducing CPU consumption when not in busy spin mode.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,260,2018-11-05T20:08:46Z,2018-11-06T00:03:55Z,2018-11-06T00:06:15Z,CLOSED,False,2,2,1,https://github.com/carns,enable wait_fd and auto progress for psm2,1,[],https://github.com/mercury-hpc/mercury/pull/260,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/260#issuecomment-436082352,"Tested on Bebop system at ANL/LCRC.  This sets the WAIT_FD option in na_ofi in combination with the AUTO progress mode (the former will not work without the latter).
Causes a penalty to latency but not throughput in exchange for reducing CPU consumption when not in busy spin mode.","Ah I just see your pull request :( after I checked it in already... OK well at least on the positive side, we reached the same conclusion :)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,260,2018-11-05T20:08:46Z,2018-11-06T00:03:55Z,2018-11-06T00:06:15Z,CLOSED,False,2,2,1,https://github.com/carns,enable wait_fd and auto progress for psm2,1,[],https://github.com/mercury-hpc/mercury/pull/260,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/260#issuecomment-436082821,"Tested on Bebop system at ANL/LCRC.  This sets the WAIT_FD option in na_ofi in combination with the AUTO progress mode (the former will not work without the latter).
Causes a penalty to latency but not throughput in exchange for reducing CPU consumption when not in busy spin mode.",Merged in 865068c,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,264,2018-11-08T18:31:18Z,2018-11-08T19:38:10Z,2018-11-08T19:39:07Z,MERGED,True,2,2,1,https://github.com/carns,bmi_na: bug fix to put ctrl msg,1,"['na', 'minor', 'bug']",https://github.com/mercury-hpc/mercury/pull/264,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/264,"BMI send is asynchronous; stack variable could go out of scope by
transmission time.  Re-use flag already present in na_bmi_op_id that's
normally only used by initiator of put operation.","BMI send is asynchronous; stack variable could go out of scope by
transmission time.  Re-use flag already present in na_bmi_op_id that's
normally only used by initiator of put operation.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,265,2018-11-08T19:27:27Z,2018-11-08T19:47:12Z,2018-11-08T19:47:12Z,MERGED,True,12,4,1,https://github.com/carns,bug fix to bmi tags for internal RMA emulation,1,"['na', 'minor', 'bug']",https://github.com/mercury-hpc/mercury/pull/265,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/265,"differentiate tags used for different RMA control steps by reserving 8
bits of tag space
this prevents (for example) the payload msg of one RMA operation from
colliding with a control msg of a different RMA, when the tags are
chosen by two different hosts independently","differentiate tags used for different RMA control steps by reserving 8
bits of tag space
this prevents (for example) the payload msg of one RMA operation from
colliding with a control msg of a different RMA, when the tags are
chosen by two different hosts independently",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,266,2018-11-10T01:08:15Z,2018-11-10T04:11:17Z,2020-01-27T00:43:50Z,MERGED,True,533,227,10,https://github.com/soumagne,HG: add support for response overflow,2,"['hg', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/266,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/266,"HG Core: send ack once more data has been processed to release handle
Testing: add overflow test back and clean up test server return codes","HG Core: send ack once more data has been processed to release handle
Testing: add overflow test back and clean up test server return codes",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,269,2019-01-28T04:19:47Z,2019-02-08T20:35:06Z,2020-01-27T00:47:54Z,MERGED,True,3962,3959,43,https://github.com/soumagne,Refactor NA plugin code and simplify get/set function definitions,1,[],https://github.com/mercury-hpc/mercury/pull/269,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/269,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,275,2019-02-20T21:52:23Z,2019-10-21T22:43:53Z,2019-10-21T22:43:53Z,CLOSED,False,1,0,1,https://github.com/jiayulu,return error in na_ofi_cq_read,1,[],https://github.com/mercury-hpc/mercury/pull/275,https://github.com/jiayulu,1,https://github.com/mercury-hpc/mercury/pull/275,"let na_ofi_cq_read return NA_PROTOCOL_ERROR instead of NA_SUCCESS if the
error code is FI_EIO.
Signed-off-by: Yulu Jia yulu.jia@intel.com","let na_ofi_cq_read return NA_PROTOCOL_ERROR instead of NA_SUCCESS if the
error code is FI_EIO.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,275,2019-02-20T21:52:23Z,2019-10-21T22:43:53Z,2019-10-21T22:43:53Z,CLOSED,False,1,0,1,https://github.com/jiayulu,return error in na_ofi_cq_read,1,[],https://github.com/mercury-hpc/mercury/pull/275,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/275#issuecomment-466095342,"let na_ofi_cq_read return NA_PROTOCOL_ERROR instead of NA_SUCCESS if the
error code is FI_EIO.
Signed-off-by: Yulu Jia yulu.jia@intel.com","thanks! I agree it should return that. I can't remember now though if there was any specific reason for not returning NA_PROTOCOL_ERROR, have you checked with @liuxuezhao ?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,275,2019-02-20T21:52:23Z,2019-10-21T22:43:53Z,2019-10-21T22:43:53Z,CLOSED,False,1,0,1,https://github.com/jiayulu,return error in na_ofi_cq_read,1,[],https://github.com/mercury-hpc/mercury/pull/275,https://github.com/liuxuezhao,3,https://github.com/mercury-hpc/mercury/pull/275#issuecomment-467235347,"let na_ofi_cq_read return NA_PROTOCOL_ERROR instead of NA_SUCCESS if the
error code is FI_EIO.
Signed-off-by: Yulu Jia yulu.jia@intel.com","BTW, for your error handling (in cart or IOF), simply relying on the return code from HG_Forward() for error handling probably not enough, in some case the fi_tsend()'s failure cannot be catched (or even it just suceed and the target dead), better to check if its completion callback is called.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,275,2019-02-20T21:52:23Z,2019-10-21T22:43:53Z,2019-10-21T22:43:53Z,CLOSED,False,1,0,1,https://github.com/jiayulu,return error in na_ofi_cq_read,1,[],https://github.com/mercury-hpc/mercury/pull/275,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/275#issuecomment-544739029,"let na_ofi_cq_read return NA_PROTOCOL_ERROR instead of NA_SUCCESS if the
error code is FI_EIO.
Signed-off-by: Yulu Jia yulu.jia@intel.com",Fixed in b4e7cb2,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/282,Currently does not pass bulk tests.,Currently does not pass bulk tests.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,2,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-482116217,Currently does not pass bulk tests.,3 days ago the new 1.7.1 libfabric version has been released. And the changelog shows a lot of improvement and fixes for both TCP and RXM.  Maybe the bulk-transfer tests will pass with this new version,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,3,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-500776266,Currently does not pass bulk tests.,Any progress on this?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-500908964,Currently does not pass bulk tests.,Still on my queue to get back to it but should be relatively soon now. Is there anything that you can't currently do with the sockets provider?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,5,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-501214084,Currently does not pass bulk tests.,"Still on my queue to get back to it but should be relatively soon now. Is there anything that you can't currently do with the sockets provider?

Sockets provider is working flawlessly, it is just a matter of performance. We would like to move to the new TCP provider of libfabbric",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-503329558,Currently does not pass bulk tests.,Still having the same issues with 1.8.0rc1,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,7,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-503336231,Currently does not pass bulk tests.,"Bulk requests fail with following error message:
libfabric:24412:tcp:ep_data:tcpx_validate_rx_rma_data():392<warn> invalid rma iov received
libfabric:24412:tcp:domain:tcpx_get_rx_entry_op_read_req():523<warn> invalid rma data
libfabric:24412:ofi_rxm:ep_ctrl:rxm_eq_readerr():88<warn> fi_eq_readerr: err: Invalid argument (22), prov_err: Success (0)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,8,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-503376489,Currently does not pass bulk tests.,"Opened issue ofiwg/libfabric#5102, that's the reason for RMA transfers failing. Still getting some weird completion event tags afterwards though so need to fix that too...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-503391244,Currently does not pass bulk tests.,"@ael-code please give a try to the topic_ofi_tcp branch, it should be good to go now. Please let me know if you see any issues.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,10,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-503405232,Currently does not pass bulk tests.,"Actually no you should probably wait, there are multi-threading issues reported by the thread sanitizer with lock order inversion issues. That will need to be fixed in libfabric as well it looks like... I'll open another issue tomorrow.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,11,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-503625345,Currently does not pass bulk tests.,"Opened ofiwg/libfabric#5104, should not prevent from using the tcp provider though.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,12,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509616333,Currently does not pass bulk tests.,Let me know when I can test this and I'll give back some feedback.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/carns,13,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509641785,Currently does not pass bulk tests.,"I just tried to test it with a margo example program, but the server isn't starting up.  Here is the output when I set FI_LOG_LEVEL=debug, just snipping the part that looks relevant to tcp:
libfabric:15354:tcp:core:fi_param_define_():231<info> registered var port_low_range
libfabric:15354:tcp:core:fi_param_define_():231<info> registered var port_high_range
libfabric:15354:tcp:core:fi_param_get_():280<info> variable port_high_range=<not set>
libfabric:15354:tcp:core:fi_param_get_():280<info> variable port_low_range=<not set>
libfabric:15354:core:core:ofi_register_provider():374<info> registering provider: tcp (1.0)
libfabric:15354:core:core:ofi_register_provider():374<info> registering provider: ofi_perf_hook (1.0)
libfabric:15354:core:core:ofi_register_provider():374<info> registering provider: ofi_noop_hook (1.0)
libfabric:15354:ofi_rxm:core:fi_param_get_():280<info> variable use_srx=<not set>
libfabric:15354:tcp:core:fi_param_get_():280<info> variable iface=<not set>
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://192.168.1.24:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://172.17.0.1:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://172.18.0.1:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in6://[fe80::c3e6:eea:cff5:75aa]:0
libfabric:15354:tcp:core:ofi_insert_loopback_addr():1092<info> available addr: : fi_sockaddr_in://1.0.0.127:0
libfabric:15354:tcp:core:ofi_insert_loopback_addr():1104<info> available addr: : fi_sockaddr_in6://[::1]:0
libfabric:15354:core:core:ofi_layering_ok():794<info> Need core provider, skipping ofi_mrail
libfabric:15354:ofi_rxm:core:fi_param_get_():280<info> variable use_srx=<not set>
libfabric:15354:tcp:core:fi_param_get_():280<info> variable iface=<not set>
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://192.168.1.24:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://172.17.0.1:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://172.18.0.1:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in6://[fe80::c3e6:eea:cff5:75aa]:0
libfabric:15354:tcp:core:ofi_insert_loopback_addr():1092<info> available addr: : fi_sockaddr_in://1.0.0.127:0
libfabric:15354:tcp:core:ofi_insert_loopback_addr():1104<info> available addr: : fi_sockaddr_in6://[::1]:0
libfabric:15354:core:core:ofi_layering_ok():794<info> Need core provider, skipping ofi_mrail
libfabric:15354:tcp:core:fi_param_get_():280<info> variable iface=<not set>
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://192.168.1.24:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://172.17.0.1:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in://172.18.0.1:0
libfabric:15354:tcp:core:ofi_get_list_of_addr():1198<info> available addr: : fi_sockaddr_in6://[fe80::c3e6:eea:cff5:75aa]:0
libfabric:15354:tcp:core:ofi_insert_loopback_addr():1092<info> available addr: : fi_sockaddr_in://1.0.0.127:0
libfabric:15354:tcp:core:ofi_insert_loopback_addr():1104<info> available addr: : fi_sockaddr_in6://[::1]:0
libfabric:15354:core:core:ofi_layering_ok():794<info> Need core provider, skipping ofi_mrail
libfabric:15354:core:core:fi_fabric_():1084<info> Opened fabric: TCP-IP
libfabric:15354:core:core:fi_fabric_():1084<info> Opened fabric: TCP-IP
libfabric:15354:ofi_rxm:core:fi_param_get_():280<info> variable use_srx=<not set>
libfabric:15354:core:core:ofi_layering_ok():794<info> Need core provider, skipping ofi_mrail
libfabric:15354:core:core:fi_param_get_():280<info> variable universe_size=<not set>
libfabric:15354:ofi_rxm:av:util_av_init():455<info> AV size 1024
libfabric:15354:ofi_rxm:core:fi_param_get_():280<info> variable use_srx=<not set>
libfabric:15354:tcp:core:util_getinfo():157<info> FI_SOURCE set, but no node or service
libfabric:15354:core:core:fi_getinfo_():889<warn> fi_getinfo: provider tcp returned -22 (Invalid argument)
libfabric:15354:core:core:ofi_layering_ok():794<info> Need core provider, skipping ofi_mrail
libfabric:15354:core:core:fi_getinfo_():889<warn> fi_getinfo: provider ofi_rxm returned -61 (No data available)
# NA -- Error -- /home/pcarns/working/src/mochi/mercury/src/na/na_ofi.c:2023
 # na_ofi_endpoint_open(): fi_getinfo((null)) failed, rc: -61(No data available).

I'm using ""tcp;ofi_rxm://"" as the address string on the server.
Do you see anything obvious I'm doing wrong here?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/carns,14,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509642780,Currently does not pass bulk tests.,"Oh, the server starts if I give it a fully specified address like ""ofi+tcp;ofi_rxm://127.0.0.1:3000"".  Is this necessary?  It looks like I would maybe need to modify my client code to allow it to specify it's own address too.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509672172,Currently does not pass bulk tests.,@ael-code yes please give it a try and let me know if you encounter any issues,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,16,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509672541,Currently does not pass bulk tests.,@carns with sockets before you could start the server without specifying anything?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,17,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509676319,Currently does not pass bulk tests.,"alright yes I see, we don't really do anything different in the OFI plugin so sounds like a provider issue",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/carns,18,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509676898,Currently does not pass bulk tests.,"Right, even in this branch I can start without a fully specified address using sockets:
[pcarns@carns-x1 examples (master)]$ ./margo-example-server ""sockets://""
# accepting RPCs on address ""ofi+sockets://192.168.1.24:46265""
^C

But not with tcp:
[pcarns@carns-x1 examples (master)]$ ./margo-example-server ""tcp;ofi_rxm://""
# NA -- Error -- /home/pcarns/working/src/mochi/mercury/src/na/na_ofi.c:2023
 # na_ofi_endpoint_open(): fi_getinfo((null)) failed, rc: -61(No data available).
# NA -- Error -- /home/pcarns/working/src/mochi/mercury/src/na/na_ofi.c:3282
 # na_ofi_initialize(): Could not create endpoint for (null)
# NA -- Error -- /home/pcarns/working/src/mochi/mercury/src/na/na.c:356
 # NA_Initialize_opt(): Could not initialize plugin
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury_core.c:1135
 # hg_core_init(): Could not initialize NA class
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury_core.c:3601
 # HG_Core_init_opt(): Cannot initialize HG core layer
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury.c:1092
 # HG_Init_opt(): Could not create HG core class
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury_core.c:3679
 # HG_Core_context_create_id(): NULL HG core class
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury.c:1188
 # HG_Context_create_id(): Could not create context for ID 0
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury_core.c:4452
 # HG_Core_create(): NULL HG core context
# HG -- Error -- /home/pcarns/working/src/mochi/mercury/src/mercury.c:1742
 # HG_Create(): Cannot create HG handle with ID 0
[mutex.c:120] ABT_mutex_free: 20
Error: margo_init()",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/carns,19,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-509691910,Currently does not pass bulk tests.,"I have not looked in the libfabric code at all, but FWIW the tcp provider man page makes it sound as if it is supposed to be capable of creating it's own ""passive"" endpoints:
https://github.com/ofiwg/libfabric/blob/master/man/man7/fi_tcp.7#L58
(that part of the man page describes environment variables that set the bounds on port numbers it will select)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,20,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-510449715,Currently does not pass bulk tests.,"As @carns already mentioned, it is not possible anymore to instantiate mercury by providing just the transport protocol prefix. Instead it is necessary to pass at least the hostname/ip/interface field, thus something like this ofi+tcp;ofi_rxm or ofi+tcp;ofi_rxm:// won't work, while ofi+tcp;ofi_rxm://localhost or ofi+tcp;ofi_rxm://127.0.0.1 works.
While on the server I always pass also the ip address I want Mercury to bind to, for the client I usually pass only the protocol string. This was working till now.
Moreover the lookup of addresses is not working for me, when I try to lookup server address I get the following:
[2019-07-11 11:35:28.223] [debug] Looking up address: 'ofi+tcp;ofi_rxm://127.0.0.1:43809'
# NA -- Error -- /opt/gkfs/deps_src/mercury/src/na/na_ofi.c:3636
 # na_ofi_addr_lookup(): Unrecognized provider type found from: 
# HG -- Error -- /opt/gkfs/deps_src/mercury/src/mercury_core.c:1403
 # hg_core_addr_lookup(): Could not start lookup for address 
# HG -- Error -- /opt/gkfs/deps_src/mercury/src/mercury_core.c:4290
 # HG_Core_addr_lookup(): Could not lookup address
terminate called after throwing an instance of 'std::runtime_error'
  what():  Failed to lookup address: HG_NA_ERROR",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,21,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-510521945,Currently does not pass bulk tests.,"Yes I'm working on getting the initialization fixed. For your lookup error though that looks like an error on your initialization, can you make sure that you're using the same transport/protocol? You might have been using sockets thinking you were using tcp.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,22,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-510523441,Currently does not pass bulk tests.,"Although in the error message that you get, the provider name seems to be blank so let me check that this is not some sort of bad interaction with the formatting of strings when using the SM routing option.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,23,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-511350209,Currently does not pass bulk tests.,"For your lookup error though that looks like an error on your initialization, can you make sure that you're using the same transport/protocol? You might have been using sockets thinking you were using tcp.

I'm sure I'm using the same transport/protocol on both sides",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,24,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-511350547,Currently does not pass bulk tests.,"Although in the error message that you get, the provider name seems to be blank so let me check that this is not some sort of bad interaction with the formatting of strings when using the SM routing option.

I've compiled mercury with SM auto-routing option, but I've disable it at runtime.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,25,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-513393721,Currently does not pass bulk tests.,"@ael-code yes that was related to the SM routing issue that you had entered before. I pushed the fix for it, try again now.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/soumagne,26,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-513415687,Currently does not pass bulk tests.,"@carns please try again, it should work fine now if you just pass ofi+tcp without any hostname",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/ael-code,27,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-515015908,Currently does not pass bulk tests.,"I've tested the new version and I can confirm that the initialization and lookup now works as expected.
Unfortunately I've discovered another minor problem, If I run the new ofi+tcp transportation layer on top of an Omni-path device the very first HG_forward that is issued will never trigger its callback function. That is really strange since the server is actually responding correctly to that RPC.
If I run the same code on the standard TCP interface, everything works as expected.
The old ofi+sockets transportation layer was working both on TCP and Omni-path interface.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,282,2019-04-01T20:05:14Z,2019-08-06T21:26:58Z,2019-10-24T21:40:41Z,MERGED,True,199,218,9,https://github.com/soumagne,NA OFI: enable tcp provider using tcp;ofi_rxm and MR mode fixes,7,"['na', 'major', 'feature']",https://github.com/mercury-hpc/mercury/pull/282,https://github.com/carns,28,https://github.com/mercury-hpc/mercury/pull/282#issuecomment-515201817,Currently does not pass bulk tests.,"I haven't done any extensive testing yet, but I can confirm that the tcp provider works correctly without a fully specified hostname now too.  Thanks @soumagne !  I also confirmed that I can switch back and forth between using the tcp and sockets provider in the same build by using tcp:// or sockets://.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,284,2019-04-09T23:37:49Z,2019-06-06T16:25:56Z,2019-06-06T16:25:56Z,CLOSED,False,5,4,1,https://github.com/yulujia,fix na_ofi_cancel,1,[],https://github.com/mercury-hpc/mercury/pull/284,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/284,"call na_ofi_complete() even when fi_cancel() fails.
Signed-off-by: Yulu Jia yulu.jia@intel.com","call na_ofi_complete() even when fi_cancel() fails.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,284,2019-04-09T23:37:49Z,2019-06-06T16:25:56Z,2019-06-06T16:25:56Z,CLOSED,False,5,4,1,https://github.com/yulujia,fix na_ofi_cancel,1,[],https://github.com/mercury-hpc/mercury/pull/284,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/284#issuecomment-489896963,"call na_ofi_complete() even when fi_cancel() fails.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@yulujia could you please remind me which libfabric provider you're testing against? is it only sockets or you also see the issue with psm2?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,284,2019-04-09T23:37:49Z,2019-06-06T16:25:56Z,2019-06-06T16:25:56Z,CLOSED,False,5,4,1,https://github.com/yulujia,fix na_ofi_cancel,1,[],https://github.com/mercury-hpc/mercury/pull/284,https://github.com/yulujia,3,https://github.com/mercury-hpc/mercury/pull/284#issuecomment-490645491,"call na_ofi_complete() even when fi_cancel() fails.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@soumagne , I only see the problem with the sockets provider, psm2 seems fine.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,284,2019-04-09T23:37:49Z,2019-06-06T16:25:56Z,2019-06-06T16:25:56Z,CLOSED,False,5,4,1,https://github.com/yulujia,fix na_ofi_cancel,1,[],https://github.com/mercury-hpc/mercury/pull/284,https://github.com/yulujia,4,https://github.com/mercury-hpc/mercury/pull/284#issuecomment-490648832,"call na_ofi_complete() even when fi_cancel() fails.
Signed-off-by: Yulu Jia yulu.jia@intel.com","in the original code if fi_cancel() fails, ret is still returned as NA_SUCCESS, caller of HG_Cancel can't detect the failure.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,285,2019-05-13T20:29:45Z,2019-06-03T17:50:02Z,2020-01-27T00:44:35Z,MERGED,True,25,10,6,https://github.com/soumagne,NA OFI: return appropriate error code if operation cannot be canceled,1,[],https://github.com/mercury-hpc/mercury/pull/285,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/285,This is related to #284,This is related to #284,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,285,2019-05-13T20:29:45Z,2019-06-03T17:50:02Z,2020-01-27T00:44:35Z,MERGED,True,25,10,6,https://github.com/soumagne,NA OFI: return appropriate error code if operation cannot be canceled,1,[],https://github.com/mercury-hpc/mercury/pull/285,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/285#issuecomment-491974504,This is related to #284,@yulujia could you please try that pull request out?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,285,2019-05-13T20:29:45Z,2019-06-03T17:50:02Z,2020-01-27T00:44:35Z,MERGED,True,25,10,6,https://github.com/soumagne,NA OFI: return appropriate error code if operation cannot be canceled,1,[],https://github.com/mercury-hpc/mercury/pull/285,https://github.com/yulujia,3,https://github.com/mercury-hpc/mercury/pull/285#issuecomment-491975187,This is related to #284,"@soumagne sure, let me try it.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,285,2019-05-13T20:29:45Z,2019-06-03T17:50:02Z,2020-01-27T00:44:35Z,MERGED,True,25,10,6,https://github.com/soumagne,NA OFI: return appropriate error code if operation cannot be canceled,1,[],https://github.com/mercury-hpc/mercury/pull/285,https://github.com/yulujia,4,https://github.com/mercury-hpc/mercury/pull/285#issuecomment-491982433,This is related to #284,now I can get return code -HG_CANCEL_ERROR from HG_Cancel(). I should be able to work with this. thanks for the patch.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,285,2019-05-13T20:29:45Z,2019-06-03T17:50:02Z,2020-01-27T00:44:35Z,MERGED,True,25,10,6,https://github.com/soumagne,NA OFI: return appropriate error code if operation cannot be canceled,1,[],https://github.com/mercury-hpc/mercury/pull/285,https://github.com/yulujia,5,https://github.com/mercury-hpc/mercury/pull/285#issuecomment-498357916,This is related to #284,"Jerome, can you land this PR?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,285,2019-05-13T20:29:45Z,2019-06-03T17:50:02Z,2020-01-27T00:44:35Z,MERGED,True,25,10,6,https://github.com/soumagne,NA OFI: return appropriate error code if operation cannot be canceled,1,[],https://github.com/mercury-hpc/mercury/pull/285,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/285#issuecomment-498358707,This is related to #284,Done,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,286,2019-05-15T17:07:27Z,2019-05-16T18:13:25Z,2019-05-16T18:13:25Z,MERGED,True,1,1,1,https://github.com/carns,fix bug in header encoding for null input,1,[],https://github.com/mercury-hpc/mercury/pull/286,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/286,"Don't skip too many header encoding steps if input struct and/or encoder is null.
This fix ensures that Mercury includes the HG_Class_set_input_offset() area when transmitting RPCs with no input arguments.","Don't skip too many header encoding steps if input struct and/or encoder is null.
This fix ensures that Mercury includes the HG_Class_set_input_offset() area when transmitting RPCs with no input arguments.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,286,2019-05-15T17:07:27Z,2019-05-16T18:13:25Z,2019-05-16T18:13:25Z,MERGED,True,1,1,1,https://github.com/carns,fix bug in header encoding for null input,1,[],https://github.com/mercury-hpc/mercury/pull/286,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/286#issuecomment-492772185,"Don't skip too many header encoding steps if input struct and/or encoder is null.
This fix ensures that Mercury includes the HG_Class_set_input_offset() area when transmitting RPCs with no input arguments.",Also I assume we need the same fix for the output.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,288,2019-05-15T21:00:03Z,2019-05-16T18:13:42Z,2019-05-16T18:13:42Z,MERGED,True,7,3,2,https://github.com/carns,allow NULL size argument to HG_Get_input_buf(),1,[],https://github.com/mercury-hpc/mercury/pull/288,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/288,"This is helpful for use cases where the caller doesn't need to know the buffer size and just wants to access the smaller region that they have reserved with HG_Class_set_input_offset().
This patch does not change the semantics of the call for existing users.  It just allows new users to pass NULL for the last argument rather than declaring a dummy variable to hold the unwanted result.","This is helpful for use cases where the caller doesn't need to know the buffer size and just wants to access the smaller region that they have reserved with HG_Class_set_input_offset().
This patch does not change the semantics of the call for existing users.  It just allows new users to pass NULL for the last argument rather than declaring a dummy variable to hold the unwanted result.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,290,2019-06-05T22:03:53Z,2019-09-03T22:37:07Z,2019-09-03T22:37:07Z,CLOSED,False,1,1,1,https://github.com/yulujia,fix refcounting in na_ofi_addr_lookup,1,[],https://github.com/mercury-hpc/mercury/pull/290,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/290,"increment na_ofi_op_id->noo_refcount by 1 instead of setting it to 1.
Signed-off-by: Yulu Jia yulu.jia@intel.com","increment na_ofi_op_id->noo_refcount by 1 instead of setting it to 1.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,290,2019-06-05T22:03:53Z,2019-09-03T22:37:07Z,2019-09-03T22:37:07Z,CLOSED,False,1,1,1,https://github.com/yulujia,fix refcounting in na_ofi_addr_lookup,1,[],https://github.com/mercury-hpc/mercury/pull/290,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/290#issuecomment-499544649,"increment na_ofi_op_id->noo_refcount by 1 instead of setting it to 1.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@yulujia this creates memory leaks, see https://cdash.hdfgroup.org/viewDynamicAnalysis.php?buildid=27404 I think instead of incrementing the refcount we should make sure that the refcount is 1 at this point.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,290,2019-06-05T22:03:53Z,2019-09-03T22:37:07Z,2019-09-03T22:37:07Z,CLOSED,False,1,1,1,https://github.com/yulujia,fix refcounting in na_ofi_addr_lookup,1,[],https://github.com/mercury-hpc/mercury/pull/290,https://github.com/yulujia,3,https://github.com/mercury-hpc/mercury/pull/290#issuecomment-499669990,"increment na_ofi_op_id->noo_refcount by 1 instead of setting it to 1.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@soumagne if the code enters the branch here:
https://github.com/mercury-hpc/mercury/pull/290/files#diff-3c6058bbbf011335ba35366df9515df7L3649
won't line 3668 lose refcount?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,290,2019-06-05T22:03:53Z,2019-09-03T22:37:07Z,2019-09-03T22:37:07Z,CLOSED,False,1,1,1,https://github.com/yulujia,fix refcounting in na_ofi_addr_lookup,1,[],https://github.com/mercury-hpc/mercury/pull/290,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/290#issuecomment-499982947,"increment na_ofi_op_id->noo_refcount by 1 instead of setting it to 1.
Signed-off-by: Yulu Jia yulu.jia@intel.com","ah right, I think that line should just be deleted then. We actually currently never go into that situation because we don't re-use op IDs for address lookups.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,290,2019-06-05T22:03:53Z,2019-09-03T22:37:07Z,2019-09-03T22:37:07Z,CLOSED,False,1,1,1,https://github.com/yulujia,fix refcounting in na_ofi_addr_lookup,1,[],https://github.com/mercury-hpc/mercury/pull/290,https://github.com/yulujia,5,https://github.com/mercury-hpc/mercury/pull/290#issuecomment-527667213,"increment na_ofi_op_id->noo_refcount by 1 instead of setting it to 1.
Signed-off-by: Yulu Jia yulu.jia@intel.com",fixed by f0b9f99,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,291,2019-06-05T23:43:28Z,2019-06-06T15:29:53Z,2019-06-06T15:29:53Z,CLOSED,False,1,0,1,https://github.com/yulujia,check ci,1,[],https://github.com/mercury-hpc/mercury/pull/291,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/291,Signed-off-by: Yulu Jia yulu.jia@intel.com,Signed-off-by: Yulu Jia yulu.jia@intel.com,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,291,2019-06-05T23:43:28Z,2019-06-06T15:29:53Z,2019-06-06T15:29:53Z,CLOSED,False,1,0,1,https://github.com/yulujia,check ci,1,[],https://github.com/mercury-hpc/mercury/pull/291,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/291#issuecomment-499545158,Signed-off-by: Yulu Jia yulu.jia@intel.com,Yes CI is working correctly :),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,300,2019-08-16T19:29:50Z,2019-10-21T22:41:19Z,2019-10-21T22:41:19Z,CLOSED,False,29,28,1,https://github.com/yulujia,fix premature assignment of na_op_id,1,[],https://github.com/mercury-hpc/mercury/pull/300,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/300,"Do not assign pointer if the newly allocated op_id struct is freed.
Otherwise the pointer will point to garbage values.
Signed-off-by: Yulu Jia yulu.jia@intel.com","Do not assign pointer if the newly allocated op_id struct is freed.
Otherwise the pointer will point to garbage values.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,300,2019-08-16T19:29:50Z,2019-10-21T22:41:19Z,2019-10-21T22:41:19Z,CLOSED,False,29,28,1,https://github.com/yulujia,fix premature assignment of na_op_id,1,[],https://github.com/mercury-hpc/mercury/pull/300,https://github.com/yulujia,2,https://github.com/mercury-hpc/mercury/pull/300#issuecomment-522140085,"Do not assign pointer if the newly allocated op_id struct is freed.
Otherwise the pointer will point to garbage values.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@soumagne @carns what do you think of this?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,300,2019-08-16T19:29:50Z,2019-10-21T22:41:19Z,2019-10-21T22:41:19Z,CLOSED,False,29,28,1,https://github.com/yulujia,fix premature assignment of na_op_id,1,[],https://github.com/mercury-hpc/mercury/pull/300,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/300#issuecomment-522691080,"Do not assign pointer if the newly allocated op_id struct is freed.
Otherwise the pointer will point to garbage values.
Signed-off-by: Yulu Jia yulu.jia@intel.com",This looks like a good change to me.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,300,2019-08-16T19:29:50Z,2019-10-21T22:41:19Z,2019-10-21T22:41:19Z,CLOSED,False,29,28,1,https://github.com/yulujia,fix premature assignment of na_op_id,1,[],https://github.com/mercury-hpc/mercury/pull/300,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/300#issuecomment-523124530,"Do not assign pointer if the newly allocated op_id struct is freed.
Otherwise the pointer will point to garbage values.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@yulujia thanks I will take a closer look. I think we could even get rid of these assignments since most of them are never used because the OP ID is pre-allocated for all operations except for the lookup.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,300,2019-08-16T19:29:50Z,2019-10-21T22:41:19Z,2019-10-21T22:41:19Z,CLOSED,False,29,28,1,https://github.com/yulujia,fix premature assignment of na_op_id,1,[],https://github.com/mercury-hpc/mercury/pull/300,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/300#issuecomment-544738337,"Do not assign pointer if the newly allocated op_id struct is freed.
Otherwise the pointer will point to garbage values.
Signed-off-by: Yulu Jia yulu.jia@intel.com",Fixed in b4e7cb2,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,303,2019-08-23T12:23:59Z,2019-08-26T15:25:15Z,2019-08-26T15:25:15Z,CLOSED,False,19,20,2,https://github.com/carns,input offset bugfix,2,[],https://github.com/mercury-hpc/mercury/pull/303,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/303,"Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.","Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,303,2019-08-23T12:23:59Z,2019-08-26T15:25:15Z,2019-08-26T15:25:15Z,CLOSED,False,19,20,2,https://github.com/carns,input offset bugfix,2,[],https://github.com/mercury-hpc/mercury/pull/303,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/303#issuecomment-524563893,"Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.","Thanks!, I think I see the problem now, I think maybe we should have added 2 routines instead of trying to handle everything in Get_input_buf(), i.e. we should have get_input_buf and get_extra_input_buf()",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,303,2019-08-23T12:23:59Z,2019-08-26T15:25:15Z,2019-08-26T15:25:15Z,CLOSED,False,19,20,2,https://github.com/carns,input offset bugfix,2,[],https://github.com/mercury-hpc/mercury/pull/303,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/303#issuecomment-524563919,"Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.",I will clean it up,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,303,2019-08-23T12:23:59Z,2019-08-26T15:25:15Z,2019-08-26T15:25:15Z,CLOSED,False,19,20,2,https://github.com/carns,input offset bugfix,2,[],https://github.com/mercury-hpc/mercury/pull/303,https://github.com/carns,4,https://github.com/mercury-hpc/mercury/pull/303#issuecomment-524881616,"Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.",Thanks @soumagne .  I didn't realize we needed a routine to access the extra buf.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,303,2019-08-23T12:23:59Z,2019-08-26T15:25:15Z,2019-08-26T15:25:15Z,CLOSED,False,19,20,2,https://github.com/carns,input offset bugfix,2,[],https://github.com/mercury-hpc/mercury/pull/303,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/303#issuecomment-524888207,"Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.","actually yes I think you're right, it's probably enough to limit to the eager message size, I'll just do the same for the output.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,303,2019-08-23T12:23:59Z,2019-08-26T15:25:15Z,2019-08-26T15:25:15Z,CLOSED,False,19,20,2,https://github.com/carns,input offset bugfix,2,[],https://github.com/mercury-hpc/mercury/pull/303,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/303#issuecomment-524905403,"Fixes #302
The encoding of extra input header information was correct, it's just that the HG_Get_input_buf() function assumed that it had been moved to the extra_buf memory buffer if the request exceeded the eager limit.
This PR makes the encoder (hg_set_struct()) and the function for accessing the extra header (HG_Get_input_buf()) consistent in assuming the data is in the request.
It also adds a safety check to the HG_Class_set_input_offset(), because the extra header information cannot be larger than the eager buffer size.",Merged in c35f690,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,305,2019-09-03T06:33:43Z,2019-09-03T14:47:40Z,2020-01-23T22:04:50Z,MERGED,True,0,2,1,https://github.com/liuxuezhao,refcount of na_ofi_op_id is overwritten,1,[],https://github.com/mercury-hpc/mercury/pull/305,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/305,"na_ofi_addr_lookup() always sets refcount of na_ofi_op_id to 1,
this is incorrect if this ID is passed in by caller.
This patch removes the assignment because na_ofi_op_create() has
already set it to 1 for the case of creation.
Signed-off-by: Liang Zhen liang.zhen@intel.com","na_ofi_addr_lookup() always sets refcount of na_ofi_op_id to 1,
this is incorrect if this ID is passed in by caller.
This patch removes the assignment because na_ofi_op_create() has
already set it to 1 for the case of creation.
Signed-off-by: Liang Zhen liang.zhen@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,307,2019-09-04T17:49:47Z,2020-01-14T19:44:11Z,2020-01-14T19:44:11Z,CLOSED,False,2,2,1,https://github.com/yulujia,NA OFI: complete canceled RECV ops immediately,1,[],https://github.com/mercury-hpc/mercury/pull/307,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/307,"complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com","complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,307,2019-09-04T17:49:47Z,2020-01-14T19:44:11Z,2020-01-14T19:44:11Z,CLOSED,False,2,2,1,https://github.com/yulujia,NA OFI: complete canceled RECV ops immediately,1,[],https://github.com/mercury-hpc/mercury/pull/307,https://github.com/yulujia,2,https://github.com/mercury-hpc/mercury/pull/307#issuecomment-528099513,"complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com","@soumagne Is there an example in Mercury to show how to use this? In my test, one process sends an RPC to another running process, then cancels the RPC, the HG_Cancel() fails, later when the test fails with the error in the commit message. You think this should not be happening?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,307,2019-09-04T17:49:47Z,2020-01-14T19:44:11Z,2020-01-14T19:44:11Z,CLOSED,False,2,2,1,https://github.com/yulujia,NA OFI: complete canceled RECV ops immediately,1,[],https://github.com/mercury-hpc/mercury/pull/307,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/307#issuecomment-528105471,"complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com",No that error does not seem right to me... I'm not sure why you're getting the no such file or directory error?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,307,2019-09-04T17:49:47Z,2020-01-14T19:44:11Z,2020-01-14T19:44:11Z,CLOSED,False,2,2,1,https://github.com/yulujia,NA OFI: complete canceled RECV ops immediately,1,[],https://github.com/mercury-hpc/mercury/pull/307,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/307#issuecomment-528105711,"complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com",Did the other process die?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,307,2019-09-04T17:49:47Z,2020-01-14T19:44:11Z,2020-01-14T19:44:11Z,CLOSED,False,2,2,1,https://github.com/yulujia,NA OFI: complete canceled RECV ops immediately,1,[],https://github.com/mercury-hpc/mercury/pull/307,https://github.com/yulujia,5,https://github.com/mercury-hpc/mercury/pull/307#issuecomment-528576409,"complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com","Did the other process die?

no, the other process was still running.
In another issue I am working on, we have a similar error, all process are running, then at some point the server starts get errors like the following. These errors consistently show up if we run the test long enough.
1 08/26-23:52:02.11 boro-64 DAOS[99612/99625] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:2770
2  # na_ofi_cq_read(): fi_cq_readerr got err: 5(Input/output error), prov_errno: -5(Input/output error).
3 08/26-23:52:02.11 boro-64 DAOS[99612/99625] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:2770
4  # na_ofi_cq_read(): fi_cq_readerr got err: 5(Input/output error), prov_errno: -5(Input/output error).
5 08/26-23:52:02.12 boro-64 DAOS[99612/99622] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4211
6  # na_ofi_msg_send_expected(): fi_tsend(expected) failed, rc: -2(No such file or directory)
7 08/26-23:52:02.12 boro-64 DAOS[99612/99622] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:2161
8  # hg_core_respond_na(): Could not post send for output buffer
9 08/26-23:52:02.12 boro-64 DAOS[99612/99622] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:5105
10  # HG_Core_respond(): Could not respond
11 08/26-23:52:02.12 boro-64 DAOS[99612/99622] hg   ERR  # HG -- Error -- mercury/src/mercury.c:2486
12  # HG_Respond(): Could not respond
other times we get this error:
4100814 09/03-16:46:00.92 wolf-21 DAOS[102792/102797] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4040
4100815  # na_ofi_msg_send_unexpected(): fi_tsend(unexpected) failed, rc: -2(No such file or directory)
4100816 09/03-16:46:00.92 wolf-21 DAOS[102792/102797] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:2057
4100817  # hg_core_forward_na(): Could not post send for input buffer
4100818 09/03-16:46:00.92 wolf-21 DAOS[102792/102797] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:4718
4100819  # HG_Core_forward(): Could not forward buffer
4100820 09/03-16:46:00.92 wolf-21 DAOS[102792/102797] hg   ERR  # HG -- Error -- mercury/src/mercury.c:2092
4100821  # HG_Forward(): Could not forward call",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,307,2019-09-04T17:49:47Z,2020-01-14T19:44:11Z,2020-01-14T19:44:11Z,CLOSED,False,2,2,1,https://github.com/yulujia,NA OFI: complete canceled RECV ops immediately,1,[],https://github.com/mercury-hpc/mercury/pull/307,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/307#issuecomment-574340373,"complete canceled RECV ops immediately so that  HG_Context_destroy() can
succeed.
Right now we get errors during HG_Context_destroy()
= = = = = = =
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # NA -- Error -- mercury/src/na/na_ofi.c:4790
na_ofi_cancel(): fi_cancel unexpected recv failed, rc: -2(No such file or directory).
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:991
hg_core_pending_list_cancel(): Could not cancel handle
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury_core.c:3836
HG_Core_context_destroy(): Cannot cancel list of pending entries
09/03-23:47:22.31 CaRT[26606/26606] hg   ERR  # HG -- Error -- mercury/src/mercury.c:1230
HG_Context_destroy(): Could not destroy HG core context
= = = = = = = =
Signed-off-by: Yulu Jia yulu.jia@intel.com",No longer needed after changes in #330,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,309,2019-09-20T07:53:50Z,2020-01-14T19:43:43Z,2020-01-23T22:03:39Z,CLOSED,False,0,3,1,https://github.com/liuxuezhao,ignore na_ofi_op_id_valid cases,1,[],https://github.com/mercury-hpc/mercury/pull/309,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/309,"Ever got such err msg over verbs provider:
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2627
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2797
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:4784
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # HG -- Error --
/home/mjean/daos/_build.external/mercury/src/mercury_core.c:2974
It possibly due to get duplicated/invalid completion event from ofi,
can ignore it rather than return error.","Ever got such err msg over verbs provider:
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2627
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2797
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:4784
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # HG -- Error --
/home/mjean/daos/_build.external/mercury/src/mercury_core.c:2974
It possibly due to get duplicated/invalid completion event from ofi,
can ignore it rather than return error.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,309,2019-09-20T07:53:50Z,2020-01-14T19:43:43Z,2020-01-23T22:03:39Z,CLOSED,False,0,3,1,https://github.com/liuxuezhao,ignore na_ofi_op_id_valid cases,1,[],https://github.com/mercury-hpc/mercury/pull/309,https://github.com/liuxuezhao,2,https://github.com/mercury-hpc/mercury/pull/309#issuecomment-533488990,"Ever got such err msg over verbs provider:
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2627
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2797
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:4784
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # HG -- Error --
/home/mjean/daos/_build.external/mercury/src/mercury_core.c:2974
It possibly due to get duplicated/invalid completion event from ofi,
can ignore it rather than return error.","the test failure seems not caused by the patch itself?
Upload file: /home/travis/build/mercury-hpc/mercury-debug/Testing/20190920-0859/Test.xml to http://cdash.hdfgroup.org/submit.php?project=MERCURY&FileName=worker.travis-ci.org___travis-ci-linux-x64-gcc-debug-2062___20190920-0859-Experimental___XML___Test.xml&build=travis-ci-linux-x64-gcc-debug-2062&site=worker.travis-ci.org&stamp=20190920-0859-Experimental&MD5=717be5a33881c6d84560d5662171a258 Size: 153951
Error when uploading file: /home/travis/build/mercury-hpc/mercury-debug/Testing/20190920-0859/Test.xml
Error message was: The requested URL returned error: 504 Gateway Time-out
Problems when submitting via HTTP
The command ""ctest -VV --output-on-failure -S ./Testing/script/travis_script.cmake"" exited with 255.
cache.2
store build cache
Done. Your build exited with 1.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,309,2019-09-20T07:53:50Z,2020-01-14T19:43:43Z,2020-01-23T22:03:39Z,CLOSED,False,0,3,1,https://github.com/liuxuezhao,ignore na_ofi_op_id_valid cases,1,[],https://github.com/mercury-hpc/mercury/pull/309,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/309#issuecomment-574340175,"Ever got such err msg over verbs provider:
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2627
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:2797
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # NA -- Error --
/home/mjean/daos/_build.external/mercury/src/na/na_ofi.c:4784
09/20-07:13:47.66 wolf-118 DAOS[32101/32126] hg ERR # HG -- Error --
/home/mjean/daos/_build.external/mercury/src/mercury_core.c:2974
It possibly due to get duplicated/invalid completion event from ofi,
can ignore it rather than return error.",No longer needed after changes in #330,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,311,2019-09-26T01:41:05Z,2019-09-26T18:48:33Z,2019-09-26T19:02:15Z,CLOSED,False,19,3,1,https://github.com/carns,use fallback when getlogin() fails,1,[],https://github.com/mercury-hpc/mercury/pull/311,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/311,"If getlogin() fails on a system, use ""unknown"" as a placeholder string
to construct the /tmp paths to fall back gracefully.","If getlogin() fails on a system, use ""unknown"" as a placeholder string
to construct the /tmp paths to fall back gracefully.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,311,2019-09-26T01:41:05Z,2019-09-26T18:48:33Z,2019-09-26T19:02:15Z,CLOSED,False,19,3,1,https://github.com/carns,use fallback when getlogin() fails,1,[],https://github.com/mercury-hpc/mercury/pull/311,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/311#issuecomment-535637173,"If getlogin() fails on a system, use ""unknown"" as a placeholder string
to construct the /tmp paths to fall back gracefully.",I merged that fix in b9bf065 I actually changed the getlogin call to instead use getpwuid which seems safer.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,311,2019-09-26T01:41:05Z,2019-09-26T18:48:33Z,2019-09-26T19:02:15Z,CLOSED,False,19,3,1,https://github.com/carns,use fallback when getlogin() fails,1,[],https://github.com/mercury-hpc/mercury/pull/311,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/311#issuecomment-535642311,"If getlogin() fails on a system, use ""unknown"" as a placeholder string
to construct the /tmp paths to fall back gracefully.","great, thanks!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,314,2019-10-03T18:44:55Z,2019-10-21T22:42:00Z,2019-10-21T22:42:00Z,CLOSED,False,27,14,2,https://github.com/yulujia,NA OFI: set op_id to NULL after free,3,[],https://github.com/mercury-hpc/mercury/pull/314,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/314,"if hg_core_handle->na_recv_op_id
hg_core_handle->na_send_op_id
hg_core_handle->na_ack_op_id
are freed, set them to NULL to avoid potential dangling pointers.


destroy hg_core_handle->na_ack_op_id in hg_core_free_na()


Signed-off-by: Yulu Jia yulu.jia@intel.com","if hg_core_handle->na_recv_op_id
hg_core_handle->na_send_op_id
hg_core_handle->na_ack_op_id
are freed, set them to NULL to avoid potential dangling pointers.


destroy hg_core_handle->na_ack_op_id in hg_core_free_na()


Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,314,2019-10-03T18:44:55Z,2019-10-21T22:42:00Z,2019-10-21T22:42:00Z,CLOSED,False,27,14,2,https://github.com/yulujia,NA OFI: set op_id to NULL after free,3,[],https://github.com/mercury-hpc/mercury/pull/314,https://github.com/yulujia,2,https://github.com/mercury-hpc/mercury/pull/314#issuecomment-538472887,"if hg_core_handle->na_recv_op_id
hg_core_handle->na_send_op_id
hg_core_handle->na_ack_op_id
are freed, set them to NULL to avoid potential dangling pointers.


destroy hg_core_handle->na_ack_op_id in hg_core_free_na()


Signed-off-by: Yulu Jia yulu.jia@intel.com","@soumagne what do you think of this patch? We are seeing an assertion failure:
Assertion `hg_atomic_get32(&na_ofi_op_id->noo_refcount)' failed
I think it 's an use-after-free error, i.e. trying to access hg_core_handle->na_ack_op_id after it's freed. hg_core_handle->na_ack_op_id is allocated and assigned in the ofi plugin, but when the ofi plugin frees the op_id, it has no way to set hg_core_handle->na_ack_op_id back to NULL.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,314,2019-10-03T18:44:55Z,2019-10-21T22:42:00Z,2019-10-21T22:42:00Z,CLOSED,False,27,14,2,https://github.com/yulujia,NA OFI: set op_id to NULL after free,3,[],https://github.com/mercury-hpc/mercury/pull/314,https://github.com/yulujia,3,https://github.com/mercury-hpc/mercury/pull/314#issuecomment-539039683,"if hg_core_handle->na_recv_op_id
hg_core_handle->na_send_op_id
hg_core_handle->na_ack_op_id
are freed, set them to NULL to avoid potential dangling pointers.


destroy hg_core_handle->na_ack_op_id in hg_core_free_na()


Signed-off-by: Yulu Jia yulu.jia@intel.com","this is a backtrace when we hit the error:
(gdb) bt
#0  0x00007ffff67821f7 in raise () from /lib64/libc.so.6
#1  0x00007ffff67838e8 in abort () from /lib64/libc.so.6
#2  0x00007ffff677b266 in __assert_fail_base () from /lib64/libc.so.6
#3  0x00007ffff677b312 in __assert_fail () from /lib64/libc.so.6
#4  0x00007ffff4d95a50 in na_ofi_op_id_addref (na_ofi_op_id=0xc720b0) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/na/na_ofi.c:2591
#5  0x00007ffff4d9fc7a in na_ofi_op_id_addref (na_ofi_op_id=0xc720b0) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/na/na_ofi.c:4180
#6  na_ofi_msg_send_expected (na_class=0x878db0, context=0x9b0c00, callback=0x7ffff4fb50a0 <hg_core_send_ack_cb>, arg=<optimized out>, buf=0x7fffe0f7f140, buf_size=1,
    plugin_data=0x0, dest_addr=0xc750d0, dest_id=0 '\000', tag=4849, op_id=0x801f70) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/na/na_ofi.c:4174
#7  0x00007ffff4fb354c in hg_core_send_ack (hg_core_handle=0x801e50) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/mercury_core.c:2517
#8  0x00007ffff4fb986d in hg_get_extra_payload_cb (callback_info=<optimized out>) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/mercury.c:976
#9  0x00007ffff4fbcff0 in hg_bulk_trigger_entry (hg_bulk_op_id=0xc9c310) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/mercury_bulk.c:1040
#10 0x00007ffff4fb795b in hg_core_trigger (context=0x8a0cf0, timeout=<optimized out>, timeout@entry=0, max_count=max_count@entry=4294967295,
    actual_count=actual_count@entry=0x7fffffffb91c) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/mercury_core.c:3314
#11 0x00007ffff4fb87bb in HG_Core_trigger (context=<optimized out>, timeout=timeout@entry=0, max_count=max_count@entry=4294967295,
    actual_count=actual_count@entry=0x7fffffffb91c) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/mercury_core.c:5149
#12 0x00007ffff4fbc81d in HG_Trigger (context=context@entry=0x7e0ee0, timeout=timeout@entry=0, max_count=max_count@entry=4294967295,
    actual_count=actual_count@entry=0x7fffffffb91c) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/mercury.c:2525
#13 0x00007ffff725f38a in crt_hg_trigger (hg_ctx=hg_ctx@entry=0x7e0708) at src/cart/crt_hg.c:1323
#14 0x00007ffff7266734 in crt_hg_progress (hg_ctx=hg_ctx@entry=0x7e0708, timeout=timeout@entry=1000) at src/cart/crt_hg.c:1370
#15 0x00007ffff722d1cb in crt_progress (crt_ctx=0x7e06f0, timeout=timeout@entry=-1, cond_cb=cond_cb@entry=0x7ffff791a4f0 <ev_progress_cb>, arg=arg@entry=0x7fffffffb9c0)
    at src/cart/crt_context.c:1259
#16 0x00007ffff791e4f6 in daos_event_priv_wait () at src/client/api/event.c:1213
#17 0x00007ffff792104c in dc_task_schedule (task=0xc71ea0, instant=instant@entry=true) at src/client/api/task.c:139
#18 0x00007ffff79201e2 in daos_obj_list_akey (oh=..., th=..., th@entry=..., dkey=dkey@entry=0x7fffffffbd18, nr=nr@entry=0x7fffffffbb3c, kds=kds@entry=0x7fffffffbb60,
    sgl=sgl@entry=0x7fffffffbfa0, anchor=anchor@entry=0x7fffffffbbe0, ev=0x0) at src/client/api/object.c:226
#19 0x0000000000420548 in enumerate_akey (th=th@entry=..., dkey=dkey@entry=0x43ff66 ""d_key"", number=number@entry=0x7fffffffbb3c, kds=kds@entry=0x7fffffffbb60,
    anchor=anchor@entry=0x7fffffffbbe0, buf=buf@entry=0xda45e0, len=len@entry=1048576, req=req@entry=0x7fffffffbc60) at src/tests/suite/daos_obj.c:1044
#20 0x000000000042e36b in enumerate_simple (state=<optimized out>) at src/tests/suite/daos_obj.c:1321
#21 0x00007ffff6b14b42 in cmocka_run_one_test_or_fixture () from /lib64/libcmocka.so.0
#22 0x00007ffff6b15515 in _cmocka_run_group_tests () from /lib64/libcmocka.so.0
#23 0x000000000042efde in run_daos_io_test (rank=rank@entry=0, size=size@entry=1, sub_tests=sub_tests@entry=0x0, sub_tests_size=sub_tests_size@entry=0)
    at src/tests/suite/daos_obj.c:3642
#24 0x0000000000404b6f in run_specified_tests (sub_tests_size=0, sub_tests=0x0, size=1, rank=0, tests=0x7fffffffcf64 ""iACoRO"") at src/tests/suite/daos_test.c:103
#25 main (argc=2, argv=0x7fffffffe0b8) at src/tests/suite/daos_test.c:344
(gdb) f 4
#4  0x00007ffff4d95a50 in na_ofi_op_id_addref (na_ofi_op_id=0xc720b0) at /home/liw2/go/src/github.com/daos-stack/daos/_build.external/mercury/src/na/na_ofi.c:2591
2591        assert(hg_atomic_get32(&na_ofi_op_id->noo_refcount));
(gdb) p *na_ofi_op_id
$1 = {noo_magic_1 = 140737332156616, noo_context = 0x7ffff6b098c8 <main_arena+360>, noo_fi_ctx = {internal = {0xc76a10, 0x101, 0x7ffff6b098a8 <main_arena+328>,
      0x7ffff6b098a8 <main_arena+328>}}, noo_completion_data = {callback = 0x7ffff4fb50a0 <hg_core_send_ack_cb>, callback_info = {arg = 0x801e50, ret = NA_SUCCESS,
      type = NA_CB_SEND_EXPECTED, info = {lookup = {addr = 0x0}, recv_unexpected = {actual_buf_size = 0, source = 0x0, tag = 0}}},
    plugin_callback = 0x7ffff4d9b730 <na_ofi_release>, plugin_callback_args = 0xc720b0, entry = {next = 0x0}}, noo_addr = 0xc750d0, noo_completed = {v = 1}, noo_canceled = {
    v = 0}, noo_info = {noo_lookup = {noi_addr = 0x0}, noo_recv_unexpected = {noi_buf = 0x0, noi_buf_size = 0, noi_msg_size = 0, noi_tag = 0}, noo_recv_expected = {
      noi_buf = 0x0, noi_buf_size = 0, noi_msg_size = 0, noi_tag = 0}}, noo_refcount = {v = 0}, noo_entry = {next = 0x0}, noo_magic_2 = 0}
(gdb) ```",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,314,2019-10-03T18:44:55Z,2019-10-21T22:42:00Z,2019-10-21T22:42:00Z,CLOSED,False,27,14,2,https://github.com/yulujia,NA OFI: set op_id to NULL after free,3,[],https://github.com/mercury-hpc/mercury/pull/314,https://github.com/yulujia,4,https://github.com/mercury-hpc/mercury/pull/314#issuecomment-540091126,"if hg_core_handle->na_recv_op_id
hg_core_handle->na_send_op_id
hg_core_handle->na_ack_op_id
are freed, set them to NULL to avoid potential dangling pointers.


destroy hg_core_handle->na_ack_op_id in hg_core_free_na()


Signed-off-by: Yulu Jia yulu.jia@intel.com","@soumagne , what do you think of this one?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,314,2019-10-03T18:44:55Z,2019-10-21T22:42:00Z,2019-10-21T22:42:00Z,CLOSED,False,27,14,2,https://github.com/yulujia,NA OFI: set op_id to NULL after free,3,[],https://github.com/mercury-hpc/mercury/pull/314,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/314#issuecomment-544738509,"if hg_core_handle->na_recv_op_id
hg_core_handle->na_send_op_id
hg_core_handle->na_ack_op_id
are freed, set them to NULL to avoid potential dangling pointers.


destroy hg_core_handle->na_ack_op_id in hg_core_free_na()


Signed-off-by: Yulu Jia yulu.jia@intel.com",Fixed in b4e7cb2,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,315,2019-10-04T17:20:42Z,2019-10-22T17:12:05Z,2019-12-06T16:05:30Z,CLOSED,False,14,1,1,https://github.com/roblatham00,Cray fixes,2,[],https://github.com/mercury-hpc/mercury/pull/315,https://github.com/roblatham00,1,https://github.com/mercury-hpc/mercury/pull/315,A couple things I had to fix to make mercury happy.  I think I talked about them on the list but wanted to make sure Jerome saw them first before committing.,A couple things I had to fix to make mercury happy.  I think I talked about them on the list but wanted to make sure Jerome saw them first before committing.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,315,2019-10-04T17:20:42Z,2019-10-22T17:12:05Z,2019-12-06T16:05:30Z,CLOSED,False,14,1,1,https://github.com/roblatham00,Cray fixes,2,[],https://github.com/mercury-hpc/mercury/pull/315,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/315#issuecomment-545062760,A couple things I had to fix to make mercury happy.  I think I talked about them on the list but wanted to make sure Jerome saw them first before committing.,Merged in f026fac,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,316,2019-10-05T00:36:45Z,2020-01-14T19:43:15Z,2020-01-14T19:43:15Z,CLOSED,False,3,0,1,https://github.com/yulujia,NA RECV: force hg_core_handle->ret to HG_CANCELED,1,[],https://github.com/mercury-hpc/mercury/pull/316,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/316,"for na recv operatoins, always set hg_core_handle->ret to HG_CANCELED
when HG_Cancel() didn't return error.
Signed-off-by: Yulu Jia yulu.jia@intel.com","for na recv operatoins, always set hg_core_handle->ret to HG_CANCELED
when HG_Cancel() didn't return error.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,316,2019-10-05T00:36:45Z,2020-01-14T19:43:15Z,2020-01-14T19:43:15Z,CLOSED,False,3,0,1,https://github.com/yulujia,NA RECV: force hg_core_handle->ret to HG_CANCELED,1,[],https://github.com/mercury-hpc/mercury/pull/316,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/316#issuecomment-574339962,"for na recv operatoins, always set hg_core_handle->ret to HG_CANCELED
when HG_Cancel() didn't return error.
Signed-off-by: Yulu Jia yulu.jia@intel.com",No longer needed after changes in #330,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,318,2019-10-24T00:03:48Z,2022-02-24T00:33:57Z,2022-02-24T00:33:57Z,CLOSED,False,210,48,3,https://github.com/yulujia,NA OFI: use ip addr for psm2,1,[],https://github.com/mercury-hpc/mercury/pull/318,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/318,"let psm2 uses ip:port address format so that user can specify uri at
init time.
Signed-off-by: Yulu Jia yulu.jia@intel.com","let psm2 uses ip:port address format so that user can specify uri at
init time.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,318,2019-10-24T00:03:48Z,2022-02-24T00:33:57Z,2022-02-24T00:33:57Z,CLOSED,False,210,48,3,https://github.com/yulujia,NA OFI: use ip addr for psm2,1,[],https://github.com/mercury-hpc/mercury/pull/318,https://github.com/yulujia,2,https://github.com/mercury-hpc/mercury/pull/318#issuecomment-562687314,"let psm2 uses ip:port address format so that user can specify uri at
init time.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@soumagne could you comment on this PR? I wasn't sure what you meant in the email.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,318,2019-10-24T00:03:48Z,2022-02-24T00:33:57Z,2022-02-24T00:33:57Z,CLOSED,False,210,48,3,https://github.com/yulujia,NA OFI: use ip addr for psm2,1,[],https://github.com/mercury-hpc/mercury/pull/318,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/318#issuecomment-1049363828,"let psm2 uses ip:port address format so that user can specify uri at
init time.
Signed-off-by: Yulu Jia yulu.jia@intel.com",closing as we now handle multiple address formats for each provider,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,319,2019-10-25T16:55:26Z,2019-11-11T18:05:48Z,2020-01-27T00:45:46Z,MERGED,True,458,122,12,https://github.com/soumagne,NA OFI: refactor internal handling of addresses,2,[],https://github.com/mercury-hpc/mercury/pull/319,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/319,"Prevent some extra allocations
Allow for unexpected and deserialized addresses to be converted to strings","Prevent some extra allocations
Allow for unexpected and deserialized addresses to be converted to strings",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,323,2019-11-12T21:17:13Z,2019-11-13T21:24:18Z,2020-01-27T00:45:14Z,MERGED,True,41,24,4,https://github.com/soumagne,NA OFI: allow for passing explicit domain name (fixes #297),1,[],https://github.com/mercury-hpc/mercury/pull/323,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/323,"Users can now pass: ofi+protocol://domain/iface:port
(e.g., ofi+verbs://mlx5_0/ib0:12345)
Are also valid:

ofi+protocol://domain/hostname:port
ofi+protocol://domain
ofi+protocol://iface
ofi+protocol://hostname
ofi+protocol://domain/iface
ofi+protocol://domain/hostname
ofi+protocol://iface:port
ofi+protocol://hostname:port

Update NA tests to use domain name","Users can now pass: ofi+protocol://domain/iface:port
(e.g., ofi+verbs://mlx5_0/ib0:12345)
Are also valid:

ofi+protocol://domain/hostname:port
ofi+protocol://domain
ofi+protocol://iface
ofi+protocol://hostname
ofi+protocol://domain/iface
ofi+protocol://domain/hostname
ofi+protocol://iface:port
ofi+protocol://hostname:port

Update NA tests to use domain name",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/327,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/liuxuezhao,2,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-558431022,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","We met the problem in DAOS rebuild test, and have a cart ticket https://jira.hpdd.intel.com/browse/CART-820.
@soumagne could you please check if this patch is reasonable to you? thanks",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-558681173,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","FWIW this seems sensible to me. Mercury informing the transport layer that it should cancel seems like it should be a ""best effort"" kind of thing, especially since we can't know the true outcome of the cancellation attempt anyway until we get notification from libfabric for completion of the operation in question.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-558845968,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",Yes that also seems fine with me. Probably seems fine also wrt previous #308 comments.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-558846635,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",I will take a closer look and will make sure we can get that in and close all the cancel related PRs that we have pending.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/liuxuezhao,6,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-558881062,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","Thanks you both, just FYI that WangDi verified that DAOS rebuild test can pass  with this patch.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/liuxuezhao,7,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-562473526,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","I will take a closer look and will make sure we can get that in and close all the cancel related PRs that we have pending.

Hi Jerome, any conclusion for this issue?
What we observed in DAOS/CART (log available at https://jira.hpdd.intel.com/browse/CART-820), we firstly get failure from HG_Cancel() with return code of HG_CANCEL_ERROR, that means the cancel failed so DAOS has to explicitly complete the RPC with an error code. But right after that, that RPC's completion callback being triggered (by calling HG_progress/trigger) with hg_cb_info::ret set as HG_CANCELED and then complete the RPC another time.
With this patch can fix the issue.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/soumagne,8,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-562634761,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",@liuxuezhao yes sorry I'm almost done with the previous fix. I'm planning to merge that one just after.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/liuxuezhao,9,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-562907236,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","@liuxuezhao yes sorry I'm almost done with the previous fix. I'm planning to merge that one just after.

No problem, I am fine that if other alternative solution can make it works. Is there a PR for that? or maybe have not pushed yet.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,327,2019-11-26T02:20:41Z,2020-01-14T19:42:38Z,2020-01-23T22:04:23Z,CLOSED,False,8,9,1,https://github.com/liuxuezhao,NA OFI: ignore fi_cancel's failure,1,[],https://github.com/mercury-hpc/mercury/pull/327,https://github.com/soumagne,10,https://github.com/mercury-hpc/mercury/pull/327#issuecomment-574339707,"Ignore fi_cancel's failure (just add a warning log msg).
We observed a DAOS test failure that:

RPC timedout for some reason,
DAOS calls HG_Cancel() but it fails, then DAOS complete that RPC
The RPC's completion callback (crt_hg_req_send_cb) being triggered
again by mercury, this cause the error that one RPC's completion
callback being called twice.

This patch fixes it by ignoring fi_cancel()'s failure, so won't return
error by HG_Cancel() by step 2), because at mercury level it return
error for HG_Cancel() and trigger the same RPC's completion callback
later should be an issue.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",No longer needed after changes in #330,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,330,2019-12-11T00:14:19Z,2020-01-14T23:40:04Z,2020-01-27T00:42:05Z,MERGED,True,3811,5710,62,https://github.com/soumagne,HG/NA errors and initial support for retries,11,[],https://github.com/mercury-hpc/mercury/pull/330,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/330,Rework HG and NA return codes and add macros to simplify error handling. Also add support for HG_AGAIN.,Rework HG and NA return codes and add macros to simplify error handling. Also add support for HG_AGAIN.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,331,2020-01-10T15:34:23Z,2020-03-10T21:40:28Z,2020-03-10T21:40:28Z,CLOSED,False,26,23,1,https://github.com/carns,clean up address URL handling for BMI,2,[],https://github.com/mercury-hpc/mercury/pull/331,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/331,"TODO:

make BMI honor attempts to bind to specific addresses (DONE)
make BMI honor attempts to auto-select port (DONE)
query BMI at run time to reconstruct port if necessary

Requires BMI master version with new get_info() option.
@chuckcranor","TODO:

make BMI honor attempts to bind to specific addresses (DONE)
make BMI honor attempts to auto-select port (DONE)
query BMI at run time to reconstruct port if necessary

Requires BMI master version with new get_info() option.
@chuckcranor",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,331,2020-01-10T15:34:23Z,2020-03-10T21:40:28Z,2020-03-10T21:40:28Z,CLOSED,False,26,23,1,https://github.com/carns,clean up address URL handling for BMI,2,[],https://github.com/mercury-hpc/mercury/pull/331,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/331#issuecomment-573182001,"TODO:

make BMI honor attempts to bind to specific addresses (DONE)
make BMI honor attempts to auto-select port (DONE)
query BMI at run time to reconstruct port if necessary

Requires BMI master version with new get_info() option.
@chuckcranor",Thanks for the changes! Let me know when you think this is ready to be merged,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,331,2020-01-10T15:34:23Z,2020-03-10T21:40:28Z,2020-03-10T21:40:28Z,CLOSED,False,26,23,1,https://github.com/carns,clean up address URL handling for BMI,2,[],https://github.com/mercury-hpc/mercury/pull/331,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/331#issuecomment-587944751,"TODO:

make BMI honor attempts to bind to specific addresses (DONE)
make BMI honor attempts to auto-select port (DONE)
query BMI at run time to reconstruct port if necessary

Requires BMI master version with new get_info() option.
@chuckcranor",This can be merged whenever you are ready from my perspective.  Looks like it works Ok in conjunction with @chuckcranor 's proposed new subnet logic.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,331,2020-01-10T15:34:23Z,2020-03-10T21:40:28Z,2020-03-10T21:40:28Z,CLOSED,False,26,23,1,https://github.com/carns,clean up address URL handling for BMI,2,[],https://github.com/mercury-hpc/mercury/pull/331,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/331#issuecomment-597331368,"TODO:

make BMI honor attempts to bind to specific addresses (DONE)
make BMI honor attempts to auto-select port (DONE)
query BMI at run time to reconstruct port if necessary

Requires BMI master version with new get_info() option.
@chuckcranor",Closing as changes are now part of #352,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,333,2020-01-16T17:03:50Z,2020-01-16T17:08:19Z,2020-01-27T00:40:21Z,MERGED,True,1,0,1,https://github.com/soumagne,HG: add HG_OTHER_ERROR return code back,1,[],https://github.com/mercury-hpc/mercury/pull/333,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/333,May be used by RPC callback to return error codes back to client,May be used by RPC callback to return error codes back to client,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,334,2020-01-16T23:48:06Z,2020-03-05T00:29:43Z,2020-03-05T21:54:48Z,MERGED,True,1877,1776,17,https://github.com/soumagne,NA OFI/SM: add support for retries,6,[],https://github.com/mercury-hpc/mercury/pull/334,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/334,"Clean up tests and add rpc_lat, read_bw, write_bw to test suite
Fix shutdown of pool when using SEP
Clean up and fix init/finalize code
Add CMake option for max number of handles","Clean up tests and add rpc_lat, read_bw, write_bw to test suite
Fix shutdown of pool when using SEP
Clean up and fix init/finalize code
Add CMake option for max number of handles",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,336,2020-01-23T23:07:25Z,2020-01-23T23:11:21Z,2020-01-27T00:41:17Z,MERGED,True,46,31,4,https://github.com/soumagne,Add env variables to turn on debug log,4,[],https://github.com/mercury-hpc/mercury/pull/336,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/336,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,337,2020-01-24T22:31:44Z,2020-01-24T23:49:23Z,2020-01-27T00:40:36Z,MERGED,True,58,93,1,https://github.com/soumagne,HG Core: wait for pending handles to complete after cancel (fix #335),1,[],https://github.com/mercury-hpc/mercury/pull/337,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/337,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,338,2020-01-27T00:52:54Z,2020-02-12T22:46:07Z,2020-02-12T22:58:49Z,MERGED,True,2024,1889,39,https://github.com/soumagne,Test suite and NA OFI addr fixes,10,[],https://github.com/mercury-hpc/mercury/pull/338,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/338,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,340,2020-02-13T19:31:58Z,2020-02-13T20:44:48Z,2020-02-17T21:03:58Z,MERGED,True,12,14,3,https://github.com/soumagne,CI: update travis yml and switch to xenial/gcc-9,1,[],https://github.com/mercury-hpc/mercury/pull/340,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/340,Update CMake dependency,Update CMake dependency,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,341,2020-02-17T19:40:13Z,2020-03-09T23:08:11Z,2020-03-10T19:17:34Z,MERGED,True,132,132,10,https://github.com/soumagne,Switch CDash and test fixes,8,[],https://github.com/mercury-hpc/mercury/pull/341,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/341,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,1,https://github.com/mercury-hpc/mercury/pull/347,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-591714298,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@yulujia  What type of error do you get from fi_cancel()?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,3,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-591725937,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@yulujia What type of error do you get from fi_cancel()?

we saw that fi_cancel() failed on this line:
https://github.com/mercury-hpc/mercury/pull/347/files#diff-3c6058bbbf011335ba35366df9515df7R4470
then HG_Cancel() returns success, mercury never executes the rpc completion callback.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592066557,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@yulujia which error code from fi_cancel() did you get? we need to make sure that this is an expected error code from libfabric and not simply create a patch to fix a test. Can you please also detail your use case. This fix is not correct because the operation may have already completed so you are creating a race by adding immediate completion. Either we need to test against a specific fi_cancel() error code or we need to fix libfabric but we cannot complete the OP immediately like that.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,5,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592109613,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@soumagne the error code was -2 (No such file or directory). My test is doing this:

launch two processes, rank_0 and rank_1
rank_1 tells rank_0 to exit
rank_1 sends rank_0 an RPC, wait for the RPC to timeout, then cancel the RPC. This is when we hit the error.

The man page for fi_cancel says:
 For fi_cancel, a return value of 0 indicates that the cancel request was submitted for processing.

that implies an error code means the cancel request wasn't submitted. In that case it shouldn't introduce a race condition.
logs messages around the error:
5092 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] rpc  ERR  src/cart/crt_context.c:763 crt_req_timeout_hdlr(0x7f70f800b010)  [opc=0xfe000000 xid=0x1a rank:tag=0:0] aborting to group service_group, rank 0, tgt_ur  (null)
   1 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] hg   DBUG # NA -- Debug -- codes/cart-hg-cancel/_build.external-Linux/mercury/src/na/na_ofi.c:4392                                                  
   2  # na_ofi_cancel(): Operation ID 0x7f70f800b380 already completed                                                                                                                                             
   3 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] hg   DBUG # NA -- Debug -- codes/cart-hg-cancel/_build.external-Linux/mercury/src/na/na_ofi.c:4396                                                  
   4  # na_ofi_cancel(): Canceling operation ID 0x7f70f800af10                                                                                                                                                     
   5 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] hg   DBUG # NA -- Debug -- codes/cart-hg-cancel/_build.external-Linux/mercury/src/na/na_ofi.c:4423                                                  
   6  # na_ofi_cancel(): fi_cancel() rc: -2(No such file or directory)                                                                                                                                             
   7 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] hg   ERR  # NA -- Error -- codes/cart-hg-cancel/_build.external-Linux/mercury/src/na/na_ofi.c:4427                                                  
   8  # na_ofi_cancel(): Operation ID 0x7f70f800af10 failed to cancel                                                                                                                                              
   9 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] hg   DBUG # NA -- Debug -- codes/cart-hg-cancel/_build.external-Linux/mercury/src/na/na_ofi.c:4392                                                  
  10  # na_ofi_cancel(): Operation ID 0x7f70f800b430 already completed                                                                                                                                             
  11 02/27-10:16:31.02 wolf-21 CaRT[56739/56800] rpc  DBUG src/cart/crt_context.c:816 crt_context_timeout_check(0x7f70f800b010)  [opc=0xfe000000 xid=0x1a rank:tag=0:0] decref to 2.                               ```",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/carns,6,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592120906,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","Re: potential race conditions, what if the operation were to successfully complete after a failed cancellation attempt?  That seems like the danger here.  I don't think the caller here would be able to guarantee that won't happen, and if it did, then the network operation would access memory that the Mercury API (by way of the callback) had already indicated was safe for reuse.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,7,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592125206,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com",@carns I see what you mean. In the case I described above what would be a proper way to ensure the rpc completion callback is triggered?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/carns,8,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592130555,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com",I'm not sure what Mercury could do to help in this scenario.  Any idea why fi_cancel() failed?  That seems like the underlying problem that really needs to be fixed to handle this safely.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592135307,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@yulujia right agree with @carns that was exactly my point. If the operation already succeeded you will get a return code of -FI_ENOENT, that's why I had that debugging code there before. We cannot rely on that return code to take any action but only on the events that get generated from libfabric. There are two resulting code paths currently:

https://github.com/mercury-hpc/mercury/blob/master/src/na/na_ofi.c#L2564 when fi_cancel() succeeds and we get an FI_ECANCELED event
https://github.com/mercury-hpc/mercury/blob/master/src/na/na_ofi.c#L2791 where cancelation may have occurred while the request was being processed and before it was completed, in which case fi_cancel() would return FI_ENOENT

Either way those two code paths should currently be the only ones that can be taken. If we don't fall in either of those code paths then we should understand why first, before making any changes to the code or trying to complete a request immediately (which can be unsafe). Currently I do not see a reason for your use case to not fall in those two code paths. Are you making progress after you call HG_Cancel()?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,10,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592142035,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","Are you making progress after you call HG_Cancel()?

Yes the progress thread is still running.

Either way those two code paths should currently be the only ones that can be taken.

In both code paths you assume fi_cancel() successfully submitted the cancel request. In the error case I had, it looks to me fi_cancel() didn't submit the request in the first place, so neither of the two code paths were taken.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,11,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592145474,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","No, I just said that in the second bullet you would get a FI_ENOENT return code. In any case, if you get a FI_ENOENT return code, you need to understand why, that means that the operation cannot be found, so where is it? you cannot simply immediately complete the operation without knowing where the operation is gone.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,12,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592162322,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","n any case, if you get a FI_ENOENT return code ... that means that the operation cannot be found, so where is it?

the only thing regarding return code in the man page is this:
For fi_cancel, a return value of 0 indicates that the cancel request was submitted for processing.

on the flip side, a non zero return code means the request was not submitted. There is no explicit explanation about different error codes, how do you know FI_ENOENT means the operation cannot be found? If the operation is not processed by fi_cancel(), it should be still sitting in the same place before fi_cancel() is called .",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,13,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592182202,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","You should have a look at the libfabric code, the man page is not sufficient. I can just guarantee you that your current fix is prone to races. If the operation is successfully submitted you cannot assume that the operation is sitting in the same place. If it were, then fi_cancel() would return 0. Now it's also possible that there is a problem in libfabric and we need to fix it but we should make sure that we understand it or understand what is happening, you cannot immediately complete an operation without knowing what is happening or by simply making assumptions.
Also does this happen with all the providers or is it only with one specific provider?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,14,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-592797463,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","Okay I took a look at the libfabric code. For the sockets provider fi_cancel() returns -FI_ENOENT right away if the fid passed in is a send:
534          case FI_CLASS_TX_CTX:                                                                                                                                                                                 
   1         case FI_CLASS_STX_CTX:                                                                                                                                                                                                                                                                                       
   2                 return -FI_ENOENT;

this patch will not create a race condition. If the code reaches the point at the new na_ofi_complete() call, it not possible that the op_id can complete anywhere else.
I am not sure about other providers. The cancel code for rxm seems to do the right thing.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,15,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-593188415,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","no I'll try to explain again...

you are trying to cancel a send and you don't know if the target is alive or not.
as soon as the send is posted, there is a chance that it can successfully complete
you cannot complete the operation ID there because there is a chance that this OP ID will show up in the completion queue. What you are doing is equivalent to calling free() on something that is still in use.

So either we need to fix libfabric or maybe there is another error code in the completion queue that we need to catch (which I can look at) but your fix as it is will create issues. Please send me your test code so that I can make sure that it's doing the right thing.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,16,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-594250059,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","you cannot complete the operation ID there because there is a chance that this OP ID will show up in the completion queue. What you are doing is equivalent to calling free() on something that is still in use.

If you check for NULL pointer before calling free() it won't be problem. When na_ofi_progress() retrieves the FI_ECANCELED event, it checks for NA_OFI_OP_CANCELED, that's equivalent to checking for NULL pointer.
Given the status of fi_cancel(), forcing completion in na_ofi_cancel() works better than the way it currently is. See #327
Also, HG_Cancel() doesn't work as expected on verbs. If rank 1 sends an RPC to an already exited rank 0, the rpc completion callback is never executed.
my test is i this PR: daos-stack/cart#361
the test is named: test_rpc_to_ghost_rank
after cart is built, the way we run it is:
edit
    install/Linux/TESTING/corpc/cart_corpc_one_node.yaml 

so that it only contains the ghost_rank test. Also replace boro-A with your hostname. then:
    cd /install/Linux/TESTING
    ./launch.py -s one_node,corpc

Another test that manifests the HG_Cancel() issue is:
    ./launch.py -s one_node,iv",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/carns,17,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-594502339,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@yulujia , the scenario you described in the above comment is not thread safe.  Consider a configuration in which a dedicated thread has been assigned to running the Mercury progress loop, and another set of threads is servicing RPCs.  The fi_cancel() and na_ofi_progress() calls will always be issued by different threads in that configuration.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/yulujia,18,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-594706634,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@carns, there's the atomic compare and set operation, that will make it thread-safe, right?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,19,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-594794814,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com","@yulujia #327 is wrong too and was an attempt to fix the original code that was not correct. You say:

Given the status of fi_cancel(), forcing completion in na_ofi_cancel() works better than the way it currently is.

Sorry but that's not the way we should work, we need to identify and fix the problems at the source and in libfabric if there's a problem there but we certainly do not introduce workarounds that create races. You need to understand that as soon as you call na_ofi_complete(), that pushes the operation ID into the completion queue and makes it ready to be re-used. If later on, libfabric tells us that the operation completed after an fi_cq_read(), what will happen is that the pointer to the operation ID that will be retrieved will be invalid/freed/re-used and we'll have no safe way to check. So again, it's not only about the atomic operation, the atomic operation only protects the accesses to the status field of the operation ID. If you release the operation ID and then later on, the pointer to that operation ID shows up (because the fi_tsend() may still successfully complete, we just can't know), it will be an invalid read.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,347,2020-02-27T00:23:17Z,2020-03-11T22:43:50Z,2020-03-11T22:43:50Z,CLOSED,False,13,3,1,https://github.com/yulujia,ofi: complete rpc if fi_cancel() fails,3,[],https://github.com/mercury-hpc/mercury/pull/347,https://github.com/soumagne,20,https://github.com/mercury-hpc/mercury/pull/347#issuecomment-597916569,"if fi_cancel() returns error, call na_ofi_complete() to ensure rpc
completion.
Signed-off-by: Yulu Jia yulu.jia@intel.com",Closing that PR as this is a libfabric issue now tracked in ofiwg/libfabric#5701,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/srini009,1,https://github.com/mercury-hpc/mercury/pull/350,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/carns,2,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-597973256,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","I would also suggest that the comments for this interface reference a URL (I'm not sure which one off hand) for the MPI_T interface with a brief comment along the lines of ""The following interface is patterned off of the MPI_T interface, except that X, Y, Z"", where X, Y, an Z are notable philosophical differences (like being oriented around HG classes rather than globals) if there are any.
That way we can lean on the MPI documentation to some degree and also help rationalize the API conventions, since there is some value to reusing terminology for this stuff.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/srini009,3,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-602935052,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","Hey guys @carns, @soumagne: Thank you for your useful comments. I generally agree with all the points that have been put forward. I shall address most if not all comments in the next 2 days. I hope that works!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/srini009,4,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-607539311,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","@soumagne, @carns: I have addressed all your comments. Kindly check if this is okay. I apologize for the delay, it took longer than I expected.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/carns,5,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-610042693,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","@soumagne, @carns: I have addressed all your comments. Kindly check if this is okay. I apologize for the delay, it took longer than I expected.

Thanks @srini009 !
I just checked two things that I had commented on:
a) did you find a URL or some other reference to put in the comments for the general model the API is using?  It might be there and I'm missing it.
b) there has got to be a better way to implement COUNTER_INC() than looping over an incr() right?  Maybe do a get() and then a cas() instead (with a retry loop if needed)?  Jerome may have another idea.  I'm thinking of the case where the val could be relatively large, like if you are accumulating bytes transmitted or something.  The current code might be slow, and also isn't technically atomic across the macro.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/srini009,6,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-610055378,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","Hi @carns,
As for (a), I have addressed the comment by modifying the commit description (see top). Oops, I think you probably meant the code! :) I shall add the same comments in the interface header file as well.
As for (b), indeed, I did give this a thought. As far as atomicity is concerned, hopefully, I'm not mistaken, but I think we don't need to enforce atomicity at the macro level since individual updates are atomic and addition is commutative. I don't think we shall be encountering race conditions here. But you're right, it is incredibly inefficient for large updates related to bytes transferred, etc. Perhaps I can take @soumagne's help here.
I am excited about this becoming a part of mercury. After that, it is a relatively quick step to introduce a bunch of new PVARs that are insightful.
Regards,",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/carns,7,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-610399983,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","Hi @carns,
As for (a), I have addressed the comment by modifying the commit description (see top). Oops, I think you probably meant the code! :) I shall add the same comments in the interface header file as well.
As for (b), indeed, I did give this a thought. As far as atomicity is concerned, hopefully, I'm not mistaken, but I think we don't need to enforce atomicity at the macro level since individual updates are atomic and addition is commutative. I don't think we shall be encountering race conditions here. But you're right, it is incredibly inefficient for large updates related to bytes transferred, etc. Perhaps I can take @soumagne's help here.
I am excited about this becoming a part of mercury. After that, it is a relatively quick step to introduce a bunch of new PVARs that are insightful.
Regards,

Ah!  Yes, that link and explanation in the PR comment is perfect, just drop it in the code.  My thinking is that in the future someone might look at the code and want to change things without realizing that it's intentionally matching some broader conventions.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/carns,8,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-612008612,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","@soumagne what's the best what to do the performance counter macro?  Do a get(), calculate new value, then cas() (in a loop to retry if the cas fails)?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,350,2020-03-04T23:35:52Z,,2021-09-02T06:48:07Z,OPEN,False,4188,55,43,https://github.com/srini009,Add initial MPI_T-like profiling support in Mercury,40,[],https://github.com/mercury-hpc/mercury/pull/350,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/350#issuecomment-612109721,"Add an MPI_T-like profiling interface in Mercury.
Profiling interface is active by default.
Currently, only one PVAR is exported called ""hg_pvar_hg_forward_count"" that counts the number of times the HG_Forward call is invoked on this instance.
Refer to: https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report/node372.htm#Node372 for the corresponding MPI 3.1 PVAR interface specification that this implementation is largely based off of.
Notable differences with MPI (implementation, not interface spec):

PVAR sessions in Mercury are associated with the hg_class object to avoid the use of global variables.
Similarly, PVARs themselves are not global variables and aren't declared globally and used as such. Instead, each module interested in exporting PVARs must register these PVARs and refer to them by the use of handles (that internally fetch the address of the PVAR) within the local function where these PVARs are updated.
We used atomics for updating counter PVARs where MPI does not.","@carns @srini009 yes for the performance counter instead of:
#define HG_PROF_PVAR_COUNTER_INC(name, val)
    addr_##name = (addr_##name == NULL ? hg_prof_get_pvar_addr_from_name(#name): addr_##name);
    for(int i=0; i < val; i++)
        hg_atomic_incr32(addr_##name);
you should do something like:
#define HG_PROF_PVAR_COUNTER_INC(name, val) do {
    hg_util_int32_t tmp;

    addr_##name = (addr_##name == NULL ? hg_prof_get_pvar_addr_from_name(#name): addr_##name);
    do {
        tmp = hg_atomic_get32(addr_##name);
    } while (!hg_atomic_cas32(addr_##name, tmp, (tmp + val)));
} while (0)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,352,2020-03-10T19:31:34Z,2020-03-10T21:49:13Z,2020-06-03T20:28:12Z,MERGED,True,248,29,5,https://github.com/soumagne,NA BMI: bringing BMI fixes + ip addr fixes,2,[],https://github.com/mercury-hpc/mercury/pull/352,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/352,Also bring fixes from #342,Also bring fixes from #342,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,353,2020-03-10T23:05:21Z,2020-03-10T23:09:36Z,2020-06-03T20:17:27Z,MERGED,True,89,132,1,https://github.com/soumagne,NA OFI: fix op ID state to be completed in case of error,1,[],https://github.com/mercury-hpc/mercury/pull/353,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/353,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,354,2020-03-12T05:22:49Z,2020-03-12T05:32:11Z,2020-06-03T20:16:56Z,MERGED,True,99,32,2,https://github.com/soumagne,NA OFI: handle I/O errors that are returned from error CQ,1,[],https://github.com/mercury-hpc/mercury/pull/354,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/354,HG: let NA callback propagate error to user,HG: let NA callback propagate error to user,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,355,2020-03-17T02:45:31Z,2020-03-17T02:55:21Z,2020-06-03T20:12:59Z,MERGED,True,22,15,5,https://github.com/soumagne,NA OFI: fix RPC sent after error occured,2,[],https://github.com/mercury-hpc/mercury/pull/355,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/355,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,358,2020-04-09T23:59:48Z,2020-04-10T00:21:45Z,2020-06-03T20:13:43Z,MERGED,True,9,4,1,https://github.com/soumagne,NA OFI: fix a potential bug in na_ofi_addr_ht_lookup,1,[],https://github.com/mercury-hpc/mercury/pull/358,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/358,"When multiple client processes connect/send_msg to server, a race
condition possibly causes the same source to be inserted to AV multiple
times. The original code removes the fi_addr from AV, but if OFI AV
uses one slot for the multiple AV insert of same source, that will cause
some problems.
This patch refines it by checking the fi_addr and only removes it from AV
when the fi_addrs are different.","When multiple client processes connect/send_msg to server, a race
condition possibly causes the same source to be inserted to AV multiple
times. The original code removes the fi_addr from AV, but if OFI AV
uses one slot for the multiple AV insert of same source, that will cause
some problems.
This patch refines it by checking the fi_addr and only removes it from AV
when the fi_addrs are different.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,361,2020-05-14T23:58:36Z,2020-06-06T02:41:22Z,2020-06-22T20:17:13Z,MERGED,True,5307,4702,71,https://github.com/soumagne,Addr_lookup and SM changes,13,[],https://github.com/mercury-hpc/mercury/pull/361,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/361,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,363,2020-06-03T00:55:11Z,2020-06-03T05:24:02Z,2020-06-03T05:24:17Z,MERGED,True,2,2,1,https://github.com/soumagne,Update CDash URL,1,[],https://github.com/mercury-hpc/mercury/pull/363,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/363,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,364,2020-06-08T20:31:16Z,2020-06-09T01:31:45Z,2020-06-11T22:54:15Z,MERGED,True,4,1,2,https://github.com/soumagne,CI: fixes for CDash results posted to GitHub,2,[],https://github.com/mercury-hpc/mercury/pull/364,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/364,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,365,2020-06-10T23:06:54Z,2020-06-10T23:15:04Z,2020-06-11T22:55:13Z,MERGED,True,304,189,6,https://github.com/soumagne,Host ID and auto SM fixes,2,[],https://github.com/mercury-hpc/mercury/pull/365,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/365,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,366,2020-06-11T17:35:31Z,2020-06-11T18:30:44Z,2020-06-11T22:55:33Z,MERGED,True,78,28,5,https://github.com/soumagne,NA SM: use gethostid() by default for host IDs and use UUIDs as an option,1,[],https://github.com/mercury-hpc/mercury/pull/366,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/366,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,367,2020-06-17T00:26:19Z,2020-06-24T11:15:56Z,2020-06-24T11:15:57Z,CLOSED,False,1,1,1,https://github.com/carns,"WIP: include -Wl,-rpath in pkgconfig Libs:",1,[],https://github.com/mercury-hpc/mercury/pull/367,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/367,"Marked as a WIP for discussion.  Rationale: Mercury is usually installed in non-system paths (either by HPC system administrator or HPC system user).  Executables that user Mercury need to be able to find this library path at runtime, which generally means using LD_LIBRARY_PATH or embedded rpaths.  LD_LIBRARY_PATH isn't a great universal solution because it relies on being able to propagate an environment variable wherever the executable is launched.  RPATH/RUNPATH/NEEDED is conceptually easier, but different compilers have different default settings for how they handle library dependencies, making it unpredictable if a given system will automatically get it right.
This patch adds an explicit rpath in the mercury.pc file to make sure that external users set the embedded rpath correctly regardless of compiler/binutils default settings.
Marked as WIP because I'm not entirely certain this is the sensible thing to do.  If this doesn't look generally correct, we could modify mercury.pc in the spack package instead.  Or if it is the wrong approach altogether we can find a way to tweak margo to assume an rpath for Mercury, but I'm not sure if other Mercury users could hit this problem.
Confirmed this produces Margo/SSG executables on Summit with correct paths for Mercury.
@chuckcranor @roblatham00","Marked as a WIP for discussion.  Rationale: Mercury is usually installed in non-system paths (either by HPC system administrator or HPC system user).  Executables that user Mercury need to be able to find this library path at runtime, which generally means using LD_LIBRARY_PATH or embedded rpaths.  LD_LIBRARY_PATH isn't a great universal solution because it relies on being able to propagate an environment variable wherever the executable is launched.  RPATH/RUNPATH/NEEDED is conceptually easier, but different compilers have different default settings for how they handle library dependencies, making it unpredictable if a given system will automatically get it right.
This patch adds an explicit rpath in the mercury.pc file to make sure that external users set the embedded rpath correctly regardless of compiler/binutils default settings.
Marked as WIP because I'm not entirely certain this is the sensible thing to do.  If this doesn't look generally correct, we could modify mercury.pc in the spack package instead.  Or if it is the wrong approach altogether we can find a way to tweak margo to assume an rpath for Mercury, but I'm not sure if other Mercury users could hit this problem.
Confirmed this produces Margo/SSG executables on Summit with correct paths for Mercury.
@chuckcranor @roblatham00",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,367,2020-06-17T00:26:19Z,2020-06-24T11:15:56Z,2020-06-24T11:15:57Z,CLOSED,False,1,1,1,https://github.com/carns,"WIP: include -Wl,-rpath in pkgconfig Libs:",1,[],https://github.com/mercury-hpc/mercury/pull/367,https://github.com/carns,2,https://github.com/mercury-hpc/mercury/pull/367#issuecomment-645566404,"Marked as a WIP for discussion.  Rationale: Mercury is usually installed in non-system paths (either by HPC system administrator or HPC system user).  Executables that user Mercury need to be able to find this library path at runtime, which generally means using LD_LIBRARY_PATH or embedded rpaths.  LD_LIBRARY_PATH isn't a great universal solution because it relies on being able to propagate an environment variable wherever the executable is launched.  RPATH/RUNPATH/NEEDED is conceptually easier, but different compilers have different default settings for how they handle library dependencies, making it unpredictable if a given system will automatically get it right.
This patch adds an explicit rpath in the mercury.pc file to make sure that external users set the embedded rpath correctly regardless of compiler/binutils default settings.
Marked as WIP because I'm not entirely certain this is the sensible thing to do.  If this doesn't look generally correct, we could modify mercury.pc in the spack package instead.  Or if it is the wrong approach altogether we can find a way to tweak margo to assume an rpath for Mercury, but I'm not sure if other Mercury users could hit this problem.
Confirmed this produces Margo/SSG executables on Summit with correct paths for Mercury.
@chuckcranor @roblatham00","I'm trying some other options too, will report back soon.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,367,2020-06-17T00:26:19Z,2020-06-24T11:15:56Z,2020-06-24T11:15:57Z,CLOSED,False,1,1,1,https://github.com/carns,"WIP: include -Wl,-rpath in pkgconfig Libs:",1,[],https://github.com/mercury-hpc/mercury/pull/367,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/367#issuecomment-648758354,"Marked as a WIP for discussion.  Rationale: Mercury is usually installed in non-system paths (either by HPC system administrator or HPC system user).  Executables that user Mercury need to be able to find this library path at runtime, which generally means using LD_LIBRARY_PATH or embedded rpaths.  LD_LIBRARY_PATH isn't a great universal solution because it relies on being able to propagate an environment variable wherever the executable is launched.  RPATH/RUNPATH/NEEDED is conceptually easier, but different compilers have different default settings for how they handle library dependencies, making it unpredictable if a given system will automatically get it right.
This patch adds an explicit rpath in the mercury.pc file to make sure that external users set the embedded rpath correctly regardless of compiler/binutils default settings.
Marked as WIP because I'm not entirely certain this is the sensible thing to do.  If this doesn't look generally correct, we could modify mercury.pc in the spack package instead.  Or if it is the wrong approach altogether we can find a way to tweak margo to assume an rpath for Mercury, but I'm not sure if other Mercury users could hit this problem.
Confirmed this produces Margo/SSG executables on Summit with correct paths for Mercury.
@chuckcranor @roblatham00",Closing this PR; we have a workaround in the margo build system that's less invasive.  Will land that one instead later today.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,368,2020-06-18T18:36:20Z,2020-06-19T20:09:50Z,2020-06-22T20:16:27Z,MERGED,True,841,887,7,https://github.com/soumagne,Rework of HG polling mechanism,5,[],https://github.com/mercury-hpc/mercury/pull/368,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/368,This simplifies the current polling mechanism by no longer using callbacks for hg_poll_add() routines and unifies previous hg_core_progress_na() and hg_core_progress_poll() routines. It also prevents extra stack allocations by preallocating event arrays.,This simplifies the current polling mechanism by no longer using callbacks for hg_poll_add() routines and unifies previous hg_core_progress_na() and hg_core_progress_poll() routines. It also prevents extra stack allocations by preallocating event arrays.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,369,2020-06-19T22:05:03Z,2020-06-19T22:11:56Z,2020-06-22T20:15:23Z,MERGED,True,0,1,1,https://github.com/soumagne,HG core: fix busy spin accidentally inserted into previous commit,1,[],https://github.com/mercury-hpc/mercury/pull/369,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/369,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,371,2020-06-22T21:21:54Z,2020-06-22T21:34:19Z,2020-06-23T16:58:29Z,MERGED,True,65,6,3,https://github.com/soumagne,Misc fixes,3,[],https://github.com/mercury-hpc/mercury/pull/371,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/371,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,372,2020-06-23T00:41:07Z,2020-06-23T16:02:12Z,2020-06-23T16:58:17Z,MERGED,True,15,8,1,https://github.com/soumagne,HG util: make cpu_spinwait use intrinsics,1,[],https://github.com/mercury-hpc/mercury/pull/372,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/372,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,374,2020-07-07T07:19:21Z,2020-07-07T16:10:54Z,2020-07-07T16:10:54Z,MERGED,True,7,5,1,https://github.com/liuxuezhao,util: refine hg_mem_get_page_size,1,[],https://github.com/mercury-hpc/mercury/pull/374,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/374,"Avoid querying pagesize every time
Signed-off-by: Johann Lombardi johann.lombardi@intel.com","Avoid querying pagesize every time
Signed-off-by: Johann Lombardi johann.lombardi@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,374,2020-07-07T07:19:21Z,2020-07-07T16:10:54Z,2020-07-07T16:10:54Z,MERGED,True,7,5,1,https://github.com/liuxuezhao,util: refine hg_mem_get_page_size,1,[],https://github.com/mercury-hpc/mercury/pull/374,https://github.com/liuxuezhao,2,https://github.com/mercury-hpc/mercury/pull/374#issuecomment-654674014,"Avoid querying pagesize every time
Signed-off-by: Johann Lombardi johann.lombardi@intel.com","@soumagne  the CDash failure is some memleaks in ofi, such as https://mercury-cdash.hdfgroup.org/testDetails.php?test=15303&build=471 . should be unrelated with this patch. thanks.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,376,2020-07-08T00:44:41Z,2020-07-08T02:07:27Z,2020-07-08T02:07:27Z,MERGED,True,1,1,1,https://github.com/roblatham00,"Fix build error in the ""no atomics"" case",1,[],https://github.com/mercury-hpc/mercury/pull/376,https://github.com/roblatham00,1,https://github.com/mercury-hpc/mercury/pull/376,Fixes #375,Fixes #375,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,377,2020-07-10T20:23:34Z,2020-07-15T16:09:13Z,2020-08-12T00:26:34Z,MERGED,True,721,47,8,https://github.com/soumagne,Add support for Ubsan builds,2,[],https://github.com/mercury-hpc/mercury/pull/377,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/377,Add format checks,Add format checks,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,379,2020-07-29T22:09:36Z,2020-07-30T01:32:38Z,2020-07-30T01:32:55Z,MERGED,True,6084,7435,78,https://github.com/soumagne,Fix format,3,[],https://github.com/mercury-hpc/mercury/pull/379,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/379,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,381,2020-08-10T23:26:55Z,2020-08-11T05:19:13Z,2020-08-12T00:24:59Z,MERGED,True,1460,788,36,https://github.com/soumagne,Rework mercury proc and tune mercury_time,2,[],https://github.com/mercury-hpc/mercury/pull/381,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/381,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,382,2020-08-11T05:21:36Z,2020-08-11T22:05:07Z,2020-08-11T22:05:18Z,MERGED,True,1,1,1,https://github.com/soumagne,Travis: test OFI v1.11.0rc2,1,[],https://github.com/mercury-hpc/mercury/pull/382,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/382,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,383,2020-08-11T22:04:17Z,2020-08-12T00:15:01Z,2020-08-12T00:15:05Z,MERGED,True,30,11,8,https://github.com/soumagne,Fixes previous commits on MacOS,3,[],https://github.com/mercury-hpc/mercury/pull/383,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/383,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,384,2020-08-12T09:14:16Z,2020-08-14T21:50:17Z,2020-08-14T21:50:56Z,MERGED,True,2,2,1,https://github.com/liuxuezhao,bulk: fix an bug in hg_bulk_transfer_cb,1,[],https://github.com/mercury-hpc/mercury/pull/384,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/384,"When the bulk transfer failed, should increase op_completed_count
and complete the bulk when needed, or the bulk possibly cannot complete
forever.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","When the bulk transfer failed, should increase op_completed_count
and complete the bulk when needed, or the bulk possibly cannot complete
forever.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,384,2020-08-12T09:14:16Z,2020-08-14T21:50:17Z,2020-08-14T21:50:56Z,MERGED,True,2,2,1,https://github.com/liuxuezhao,bulk: fix an bug in hg_bulk_transfer_cb,1,[],https://github.com/mercury-hpc/mercury/pull/384,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/384#issuecomment-674286813,"When the bulk transfer failed, should increase op_completed_count
and complete the bulk when needed, or the bulk possibly cannot complete
forever.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",Will merge accompanying test and further clean up in following PR.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,387,2020-08-19T21:12:07Z,2020-08-20T20:57:40Z,2020-08-20T20:57:40Z,MERGED,True,1,1,1,https://github.com/carns,use epoll_wait() in na_sm even with timeout 0,1,[],https://github.com/mercury-hpc/mercury/pull/387,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/387,"This slightly alters the logic in na_sm_progress() so that it calls epoll_wait() (by way of hg_poll_wait()) even when the timeout is zero as long as a poll_set is present.
The reason is for performance; if the poll_wait() is not called, then na_sm must call both recvmsg() and read() in case unexpected messages are present.  The former in particular is more expensive than epoll_wait() with a zero timeout.
Output below shows the average response time difference (dropped from 3.3 usec to 2.6 usec) for a Mochi sdskv benchmark with a single process.  This example is not actually doing any na communication at all (all operations are ""self"" RPCs), but there is a performance difference anyway because mercury must check the active na+sm transport on every iteration.
test case:

[carns@carns-x1-7g null]$ cat baseline-64k-puts-sm.json
{
    ""protocol"" : ""na+sm"",
    ""seed"" : 0,
    ""server"" : {
        ""use-progress-thread"" : false,
        ""rpc-thread-count"" : 0,
        ""database"" : {
            ""type"" : ""null"",
            ""name"" : ""benchmark-db"",
            ""path"" : ""/tmp/sdskv""
        }
    },
    ""benchmarks"" : [
        {
            ""type"" : ""put"",
            ""repetitions"" : 65536,
            ""num-entries"" : 1,
            ""key-sizes"" : [ 8, 32 ],
            ""val-sizes"" : [ 24, 48 ],
            ""erase-on-teardown"" : true
        }
    ]
}

single-process performance before change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000003345
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000005673
Minimum(sec)    : 0.000002861
Q1(sec)         : 0.000003099
Median(sec)     : 0.000003099
Q3(sec)         : 0.000003338
Maximum(sec)    : 0.000670195

after change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000002660
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000004737
Minimum(sec)    : 0.000002146
Q1(sec)         : 0.000002384
Median(sec)     : 0.000002384
Q3(sec)         : 0.000002623
Maximum(sec)    : 0.000395060

FWIW I was looking at this path in an attempt to figure out where the outliers (the ""Maximum"" field in the output).  This PR does not address that, though; still looking.","This slightly alters the logic in na_sm_progress() so that it calls epoll_wait() (by way of hg_poll_wait()) even when the timeout is zero as long as a poll_set is present.
The reason is for performance; if the poll_wait() is not called, then na_sm must call both recvmsg() and read() in case unexpected messages are present.  The former in particular is more expensive than epoll_wait() with a zero timeout.
Output below shows the average response time difference (dropped from 3.3 usec to 2.6 usec) for a Mochi sdskv benchmark with a single process.  This example is not actually doing any na communication at all (all operations are ""self"" RPCs), but there is a performance difference anyway because mercury must check the active na+sm transport on every iteration.
test case:

[carns@carns-x1-7g null]$ cat baseline-64k-puts-sm.json
{
    ""protocol"" : ""na+sm"",
    ""seed"" : 0,
    ""server"" : {
        ""use-progress-thread"" : false,
        ""rpc-thread-count"" : 0,
        ""database"" : {
            ""type"" : ""null"",
            ""name"" : ""benchmark-db"",
            ""path"" : ""/tmp/sdskv""
        }
    },
    ""benchmarks"" : [
        {
            ""type"" : ""put"",
            ""repetitions"" : 65536,
            ""num-entries"" : 1,
            ""key-sizes"" : [ 8, 32 ],
            ""val-sizes"" : [ 24, 48 ],
            ""erase-on-teardown"" : true
        }
    ]
}

single-process performance before change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000003345
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000005673
Minimum(sec)    : 0.000002861
Q1(sec)         : 0.000003099
Median(sec)     : 0.000003099
Q3(sec)         : 0.000003338
Maximum(sec)    : 0.000670195

after change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000002660
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000004737
Minimum(sec)    : 0.000002146
Q1(sec)         : 0.000002384
Median(sec)     : 0.000002384
Q3(sec)         : 0.000002623
Maximum(sec)    : 0.000395060

FWIW I was looking at this path in an attempt to figure out where the outliers (the ""Maximum"" field in the output).  This PR does not address that, though; still looking.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,387,2020-08-19T21:12:07Z,2020-08-20T20:57:40Z,2020-08-20T20:57:40Z,MERGED,True,1,1,1,https://github.com/carns,use epoll_wait() in na_sm even with timeout 0,1,[],https://github.com/mercury-hpc/mercury/pull/387,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/387#issuecomment-676783563,"This slightly alters the logic in na_sm_progress() so that it calls epoll_wait() (by way of hg_poll_wait()) even when the timeout is zero as long as a poll_set is present.
The reason is for performance; if the poll_wait() is not called, then na_sm must call both recvmsg() and read() in case unexpected messages are present.  The former in particular is more expensive than epoll_wait() with a zero timeout.
Output below shows the average response time difference (dropped from 3.3 usec to 2.6 usec) for a Mochi sdskv benchmark with a single process.  This example is not actually doing any na communication at all (all operations are ""self"" RPCs), but there is a performance difference anyway because mercury must check the active na+sm transport on every iteration.
test case:

[carns@carns-x1-7g null]$ cat baseline-64k-puts-sm.json
{
    ""protocol"" : ""na+sm"",
    ""seed"" : 0,
    ""server"" : {
        ""use-progress-thread"" : false,
        ""rpc-thread-count"" : 0,
        ""database"" : {
            ""type"" : ""null"",
            ""name"" : ""benchmark-db"",
            ""path"" : ""/tmp/sdskv""
        }
    },
    ""benchmarks"" : [
        {
            ""type"" : ""put"",
            ""repetitions"" : 65536,
            ""num-entries"" : 1,
            ""key-sizes"" : [ 8, 32 ],
            ""val-sizes"" : [ 24, 48 ],
            ""erase-on-teardown"" : true
        }
    ]
}

single-process performance before change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000003345
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000005673
Minimum(sec)    : 0.000002861
Q1(sec)         : 0.000003099
Median(sec)     : 0.000003099
Q3(sec)         : 0.000003338
Maximum(sec)    : 0.000670195

after change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000002660
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000004737
Minimum(sec)    : 0.000002146
Q1(sec)         : 0.000002384
Median(sec)     : 0.000002384
Q3(sec)         : 0.000002623
Maximum(sec)    : 0.000395060

FWIW I was looking at this path in an attempt to figure out where the outliers (the ""Maximum"" field in the output).  This PR does not address that, though; still looking.",Great thanks! I have an idea about the max if you're using sm. Currently the first message to the peer will allocate the source address if it does not exist yet (see https://github.com/mercury-hpc/mercury/blob/master/src/na/na_sm.c#L2754). What we could do to optimize that is pre-allocate a pool of addresses I guess.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,387,2020-08-19T21:12:07Z,2020-08-20T20:57:40Z,2020-08-20T20:57:40Z,MERGED,True,1,1,1,https://github.com/carns,use epoll_wait() in na_sm even with timeout 0,1,[],https://github.com/mercury-hpc/mercury/pull/387,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/387#issuecomment-676784516,"This slightly alters the logic in na_sm_progress() so that it calls epoll_wait() (by way of hg_poll_wait()) even when the timeout is zero as long as a poll_set is present.
The reason is for performance; if the poll_wait() is not called, then na_sm must call both recvmsg() and read() in case unexpected messages are present.  The former in particular is more expensive than epoll_wait() with a zero timeout.
Output below shows the average response time difference (dropped from 3.3 usec to 2.6 usec) for a Mochi sdskv benchmark with a single process.  This example is not actually doing any na communication at all (all operations are ""self"" RPCs), but there is a performance difference anyway because mercury must check the active na+sm transport on every iteration.
test case:

[carns@carns-x1-7g null]$ cat baseline-64k-puts-sm.json
{
    ""protocol"" : ""na+sm"",
    ""seed"" : 0,
    ""server"" : {
        ""use-progress-thread"" : false,
        ""rpc-thread-count"" : 0,
        ""database"" : {
            ""type"" : ""null"",
            ""name"" : ""benchmark-db"",
            ""path"" : ""/tmp/sdskv""
        }
    },
    ""benchmarks"" : [
        {
            ""type"" : ""put"",
            ""repetitions"" : 65536,
            ""num-entries"" : 1,
            ""key-sizes"" : [ 8, 32 ],
            ""val-sizes"" : [ 24, 48 ],
            ""erase-on-teardown"" : true
        }
    ]
}

single-process performance before change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000003345
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000005673
Minimum(sec)    : 0.000002861
Q1(sec)         : 0.000003099
Median(sec)     : 0.000003099
Q3(sec)         : 0.000003338
Maximum(sec)    : 0.000670195

after change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000002660
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000004737
Minimum(sec)    : 0.000002146
Q1(sec)         : 0.000002384
Median(sec)     : 0.000002384
Q3(sec)         : 0.000002623
Maximum(sec)    : 0.000395060

FWIW I was looking at this path in an attempt to figure out where the outliers (the ""Maximum"" field in the output).  This PR does not address that, though; still looking.","I guess maybe to confirm what I just said, you could check if the first message/RPC is the outlier or if it's another one?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,387,2020-08-19T21:12:07Z,2020-08-20T20:57:40Z,2020-08-20T20:57:40Z,MERGED,True,1,1,1,https://github.com/carns,use epoll_wait() in na_sm even with timeout 0,1,[],https://github.com/mercury-hpc/mercury/pull/387,https://github.com/carns,4,https://github.com/mercury-hpc/mercury/pull/387#issuecomment-676834448,"This slightly alters the logic in na_sm_progress() so that it calls epoll_wait() (by way of hg_poll_wait()) even when the timeout is zero as long as a poll_set is present.
The reason is for performance; if the poll_wait() is not called, then na_sm must call both recvmsg() and read() in case unexpected messages are present.  The former in particular is more expensive than epoll_wait() with a zero timeout.
Output below shows the average response time difference (dropped from 3.3 usec to 2.6 usec) for a Mochi sdskv benchmark with a single process.  This example is not actually doing any na communication at all (all operations are ""self"" RPCs), but there is a performance difference anyway because mercury must check the active na+sm transport on every iteration.
test case:

[carns@carns-x1-7g null]$ cat baseline-64k-puts-sm.json
{
    ""protocol"" : ""na+sm"",
    ""seed"" : 0,
    ""server"" : {
        ""use-progress-thread"" : false,
        ""rpc-thread-count"" : 0,
        ""database"" : {
            ""type"" : ""null"",
            ""name"" : ""benchmark-db"",
            ""path"" : ""/tmp/sdskv""
        }
    },
    ""benchmarks"" : [
        {
            ""type"" : ""put"",
            ""repetitions"" : 65536,
            ""num-entries"" : 1,
            ""key-sizes"" : [ 8, 32 ],
            ""val-sizes"" : [ 24, 48 ],
            ""erase-on-teardown"" : true
        }
    ]
}

single-process performance before change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000003345
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000005673
Minimum(sec)    : 0.000002861
Q1(sec)         : 0.000003099
Median(sec)     : 0.000003099
Q3(sec)         : 0.000003338
Maximum(sec)    : 0.000670195

after change:

[carns@carns-x1-7g null]$ sdskv-benchmark baseline-64k-puts-sm.json
================ put ================
{
	""erase-on-teardown"" : true,
	""key-sizes"" : [ 8, 32 ],
	""num-entries"" : 1,
	""repetitions"" : 65536,
	""type"" : ""put"",
	""val-sizes"" : [ 24, 48 ]
}
-------------------------------------
Samples         : 65536
Average(sec)    : 0.000002660
Variance(sec^2) : 0.000000000
StdDev(sec)     : 0.000004737
Minimum(sec)    : 0.000002146
Q1(sec)         : 0.000002384
Median(sec)     : 0.000002384
Q3(sec)         : 0.000002623
Maximum(sec)    : 0.000395060

FWIW I was looking at this path in an attempt to figure out where the outliers (the ""Maximum"" field in the output).  This PR does not address that, though; still looking.","I guess maybe to confirm what I just said, you could check if the first message/RPC is the outlier or if it's another one?

No, unfortunately they are scattered throughout the run time.  They seem to be semi-periodic, though, not totally random.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,388,2020-08-20T23:20:05Z,2020-08-28T19:06:08Z,2020-10-09T04:53:00Z,MERGED,True,23,6,2,https://github.com/soumagne,Testing: ofi update,1,[],https://github.com/mercury-hpc/mercury/pull/388,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/388,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/carns,1,https://github.com/mercury-hpc/mercury/pull/396,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?","If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/carns,2,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694424032,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?",Fixes #395,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694430850,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?",Thanks a lot Phil! I think it looks good! Just a few minor comments.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/carns,4,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694446863,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?","Ok, I refactored to a separate function and corrected the formatting (thanks for the tip!).
Thoughts on the error message format?  Just go with it as is?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694449676,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?","Great thanks! I think the error message looks reasonable to me, we can still tweak it more later if needed.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694452353,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?","Just a few more warnings to fix for you :) see https://mercury-cdash.hdfgroup.org/viewBuildError.php?type=1&buildid=851
/home/travis/build/mercury-hpc/mercury/src/na/na_ofi.c: In function 'na_ofi_provider_check':
[CTest: warning matched] /home/travis/build/mercury-hpc/mercuryna/na_ofi.c:1415:23: warning: conversion to 'size_t' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1415 |             avail_len += strlen(cur->fabric_attr->prov_name) + 1;
      |                       ^~
[CTest: warning matched] /home/travis/build/mercury-hpc/mercuryna/na_ofi.c:1415:26: warning: conversion from 'size_t' {aka 'long unsigned int'} to 'int' may change value [-Wconversion]
 1415 |             avail_len += strlen(cur->fabric_attr->prov_name) + 1;
      |                          ^~~~~~
[CTest: warning matched] /home/travis/build/mercury-hpc/mercuryna/na_ofi.c:1421:30: warning: conversion to 'size_t' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1421 |     avail = calloc(avail_len + 1, 1);
      |                    ~~~~~~~~~~^~~",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/soumagne,7,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694453468,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?","You can see those warnings by going to mercury-cdash.hdfgroup.org and click on the number in the ""Warn"" column.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/carns,8,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694458864,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?","Oh man, that's tough!  I think I have it fixed now :)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694477508,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?",;) right I know I have the whole scrutinizer set up,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,396,2020-09-17T18:27:59Z,2020-09-17T20:20:54Z,2020-09-17T20:21:39Z,MERGED,True,92,4,1,https://github.com/carns,print verbose error if ofi provider not available,1,[],https://github.com/mercury-hpc/mercury/pull/396,https://github.com/soumagne,10,https://github.com/mercury-hpc/mercury/pull/396#issuecomment-694478034,"If initial fi_getinfo() fails, then query libfabric to determine if the desired provider is available.  If not, then display a more helpful error message.
I'm marking this PR as a draft, because the resulting error message is somewhat cluttered by the additional context (function, line number, etc.) prepended by the logging functions:
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1513
 # na_ofi_getinfo(): Requested OFI provider ""verbs;ofi_rxm"" (derived from
  ""verbs"" Mercury protocol) is not available.
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1517
 # na_ofi_getinfo(): Please re-compile libfabric with support for
  ""verbs;ofi_rxm"" or use one of the following available providers:
  tcp;ofi_rxm,tcp,sockets
# NA -- Error -- /home/carns/working/src/mochi/mercury/src/na/na_ofi.c:1526
 # na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
...

Is there a logging variant that doesn't do that, or should we make one?  Or just leave it as is?",Alright it's merged now :) thanks!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,399,2020-10-07T06:58:09Z,2020-10-08T06:05:00Z,2020-10-09T04:52:58Z,MERGED,True,6058,3514,32,https://github.com/soumagne,HG core/HG bulk refactoring and bulk performance improvements,7,[],https://github.com/mercury-hpc/mercury/pull/399,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/399,See commit log for more details.,See commit log for more details.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,400,2020-10-09T03:02:05Z,2020-10-09T04:06:46Z,2020-10-09T04:06:57Z,MERGED,True,60,27,1,https://github.com/soumagne,NA BMI: prevent progress_unexpected from racing with main progress function,1,[],https://github.com/mercury-hpc/mercury/pull/400,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/400,Add safety checks on op IDs,Add safety checks on op IDs,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,401,2020-10-09T04:40:49Z,2020-10-09T06:42:07Z,2020-10-09T06:42:10Z,MERGED,True,49,6,4,https://github.com/soumagne,HG Util: Improve handling on EINTR errors in hg_poll_wait() (fix #392),1,[],https://github.com/mercury-hpc/mercury/pull/401,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/401,Add HG_POLLINTR event,Add HG_POLLINTR event,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,402,2020-10-17T02:43:47Z,2020-10-17T02:59:48Z,2020-10-20T04:15:10Z,MERGED,True,825,566,3,https://github.com/soumagne,NA SM: fixes for deferring the exchange of file descriptors,2,[],https://github.com/mercury-hpc/mercury/pull/402,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/402,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,403,2020-10-19T01:03:17Z,2020-10-19T01:07:16Z,2020-10-20T04:15:28Z,MERGED,True,7,9,1,https://github.com/soumagne,NA SM: fix potential issue where unresolved address would get polled,1,[],https://github.com/mercury-hpc/mercury/pull/403,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/403,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,404,2020-10-19T02:47:39Z,2020-10-19T02:48:22Z,2020-10-20T04:15:20Z,MERGED,True,4,2,1,https://github.com/soumagne,NA SM: fix op ID status assignment when unexpected queue is empty,1,[],https://github.com/mercury-hpc/mercury/pull/404,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/404,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,405,2020-10-20T19:15:13Z,2020-10-23T05:47:29Z,2020-10-30T16:47:53Z,MERGED,True,1124,955,43,https://github.com/soumagne,Misc fixes to address remaining issues for release,10,[],https://github.com/mercury-hpc/mercury/pull/405,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/405,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,406,2020-10-27T01:50:56Z,2020-10-27T01:55:10Z,2020-10-30T16:47:46Z,MERGED,True,18,7,1,https://github.com/soumagne,HG core: make sure handle is not released until cancelation is processed,1,[],https://github.com/mercury-hpc/mercury/pull/406,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/406,Skip processing input if NA recv error occurred,Skip processing input if NA recv error occurred,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,407,2020-10-28T01:57:35Z,2020-10-30T00:28:41Z,2020-10-30T16:47:33Z,MERGED,True,511,311,20,https://github.com/soumagne,Testing tweaks,3,[],https://github.com/mercury-hpc/mercury/pull/407,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/407,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,408,2020-11-03T02:56:00Z,2020-11-18T20:25:27Z,2021-01-08T19:19:43Z,MERGED,True,1743,1836,7,https://github.com/soumagne,NA: make sure completion callback is called after OP ID is released,1,[],https://github.com/mercury-hpc/mercury/pull/408,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/408,NA OFI: remove now unused refcount,NA OFI: remove now unused refcount,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,413,2020-12-16T17:48:43Z,2021-01-08T19:33:03Z,2021-01-08T19:33:11Z,MERGED,True,11,4,4,https://github.com/gnuoyd,Minor fixes,4,[],https://github.com/mercury-hpc/mercury/pull/413,https://github.com/gnuoyd,1,https://github.com/mercury-hpc/mercury/pull/413,A batch of minor changes to the main Hg sources that I have made during the UCX plugin development.,A batch of minor changes to the main Hg sources that I have made during the UCX plugin development.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,414,2020-12-16T17:51:53Z,2020-12-16T20:23:50Z,2021-01-08T19:18:32Z,MERGED,True,20,0,1,https://github.com/gnuoyd,Add hg_time_from_ms() for making an hg_time_t from an integer duration,1,[],https://github.com/mercury-hpc/mercury/pull/414,https://github.com/gnuoyd,1,https://github.com/mercury-hpc/mercury/pull/414,in milliseconds.  The UCX plugin will use this.,in milliseconds.  The UCX plugin will use this.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,415,2021-01-08T01:37:51Z,2021-01-08T02:26:30Z,2021-01-08T19:17:14Z,MERGED,True,197,49,9,https://github.com/soumagne,Bulk forward serialization test/debug and misc fixes,3,[],https://github.com/mercury-hpc/mercury/pull/415,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/415,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,416,2021-01-08T19:44:42Z,2021-01-10T01:54:46Z,2021-01-22T17:52:15Z,MERGED,True,4,4,1,https://github.com/soumagne,Update travis dependencies to latest versions,1,[],https://github.com/mercury-hpc/mercury/pull/416,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/416,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,417,2021-01-11T19:08:07Z,2021-01-20T22:26:53Z,2021-01-22T17:52:22Z,MERGED,True,28,15,3,https://github.com/soumagne,HG core: remove unnecessary spinwait() and track handle in cq,1,[],https://github.com/mercury-hpc/mercury/pull/417,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/417,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,419,2021-01-12T17:54:38Z,2021-01-12T19:53:41Z,2021-01-12T19:53:41Z,CLOSED,False,55,0,1,https://github.com/soumagne,[WIP] Github-actions migration,1,[],https://github.com/mercury-hpc/mercury/pull/419,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/419,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,420,2021-01-14T02:21:59Z,2021-01-20T22:26:40Z,2021-01-22T17:52:02Z,MERGED,True,8,3,1,https://github.com/soumagne,HG bulk: prevent virtual handle data to be sent eagerly,1,[],https://github.com/mercury-hpc/mercury/pull/420,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/420,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,421,2021-01-15T23:42:05Z,2021-01-15T23:43:16Z,2021-01-19T23:53:44Z,MERGED,True,283,343,9,https://github.com/soumagne,Migrate from Travis CI to GitHub Actions,1,[],https://github.com/mercury-hpc/mercury/pull/421,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/421,"Enable format checks
Run matrix tests with all build types and gcc
Enable coverage and sanitizer steps
Cache and install extra dependencies
Tweak CMake common script to enable step-by-step builds
Remove unused travis files","Enable format checks
Run matrix tests with all build types and gcc
Enable coverage and sanitizer steps
Cache and install extra dependencies
Tweak CMake common script to enable step-by-step builds
Remove unused travis files",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,422,2021-01-20T00:01:12Z,2021-01-20T19:04:22Z,2021-01-22T17:52:08Z,MERGED,True,40,39,3,https://github.com/soumagne,Update gh deps install and include OFI 6509 patch,1,[],https://github.com/mercury-hpc/mercury/pull/422,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/422,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,423,2021-01-23T00:03:44Z,2021-01-23T00:13:27Z,2021-01-27T01:35:55Z,MERGED,True,7,5,2,https://github.com/soumagne,HG util: fix timeout passed to pthread_cond_timedwait(),1,[],https://github.com/mercury-hpc/mercury/pull/423,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/423,CLOCK_MONOTONIC_COARSE cannot be passed to pthread_condattr_setclock or it causes pthread_cond_timedwait() to return early. This was causing HG_Trigger() to excessively spin when a timeout was passed.,CLOCK_MONOTONIC_COARSE cannot be passed to pthread_condattr_setclock or it causes pthread_cond_timedwait() to return early. This was causing HG_Trigger() to excessively spin when a timeout was passed.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,424,2021-01-25T21:03:11Z,2021-01-26T22:47:48Z,2021-01-27T01:36:21Z,MERGED,True,169,46,7,https://github.com/soumagne,Static fixes and enable CI for static builds,2,[],https://github.com/mercury-hpc/mercury/pull/424,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/424,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,425,2021-01-27T01:37:52Z,2021-01-27T01:50:44Z,2021-03-08T23:38:14Z,MERGED,True,36,49,2,https://github.com/soumagne,HG/NA: remove race in trigger optimization that was skipping signaling,1,[],https://github.com/mercury-hpc/mercury/pull/425,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/425,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,430,2021-02-04T00:09:35Z,2021-02-04T17:01:35Z,2021-03-08T23:37:47Z,MERGED,True,3,9,2,https://github.com/soumagne,HG util: remove check for STDERR_FILENO (fix #428),1,[],https://github.com/mercury-hpc/mercury/pull/430,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/430,"Returning an error when adding a file descriptor lower than STDERR_FILENO
was causing errors when users were closing those std file descriptors","Returning an error when adding a file descriptor lower than STDERR_FILENO
was causing errors when users were closing those std file descriptors",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,430,2021-02-04T00:09:35Z,2021-02-04T17:01:35Z,2021-03-08T23:37:47Z,MERGED,True,3,9,2,https://github.com/soumagne,HG util: remove check for STDERR_FILENO (fix #428),1,[],https://github.com/mercury-hpc/mercury/pull/430,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/430#issuecomment-772917067,"Returning an error when adding a file descriptor lower than STDERR_FILENO
was causing errors when users were closing those std file descriptors","My original intent was to prevent from adding those file descriptors by mistake to the polling sets but it looks like that's not compatible with that use case. Just removing that check for now, any better idea?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,430,2021-02-04T00:09:35Z,2021-02-04T17:01:35Z,2021-03-08T23:37:47Z,MERGED,True,3,9,2,https://github.com/soumagne,HG util: remove check for STDERR_FILENO (fix #428),1,[],https://github.com/mercury-hpc/mercury/pull/430,https://github.com/MichaelBrim,3,https://github.com/mercury-hpc/mercury/pull/430#issuecomment-773301666,"Returning an error when adding a file descriptor lower than STDERR_FILENO
was causing errors when users were closing those std file descriptors","@soumagne I don't know if it's a better idea, but what we did in MRNet to avoid the stdio file descriptor numbers in our poll set was to keep calling socket() (or whatever syscall created the fd) until the result was above STDERR_FILENO. We also left open the stdio fds to ensure future operations wouldn't use them.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,430,2021-02-04T00:09:35Z,2021-02-04T17:01:35Z,2021-03-08T23:37:47Z,MERGED,True,3,9,2,https://github.com/soumagne,HG util: remove check for STDERR_FILENO (fix #428),1,[],https://github.com/mercury-hpc/mercury/pull/430,https://github.com/gnuoyd,4,https://github.com/mercury-hpc/mercury/pull/430#issuecomment-773432533,"Returning an error when adding a file descriptor lower than STDERR_FILENO
was causing errors when users were closing those std file descriptors","This looks fine.
In *BSD a library function, daemon(3), daemonizes a process. It detaches descriptors [0, 2] by performing fd = open(""/dev/null"", O_RDWR) and then dup2(fd, STDIN_FILENO), dup2(fd, STDOUT_FILENO), dup2(fd, STDERR_FILENO). Sounds like UnifyFS should have cribbed that function. :-)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,430,2021-02-04T00:09:35Z,2021-02-04T17:01:35Z,2021-03-08T23:37:47Z,MERGED,True,3,9,2,https://github.com/soumagne,HG util: remove check for STDERR_FILENO (fix #428),1,[],https://github.com/mercury-hpc/mercury/pull/430,https://github.com/carns,5,https://github.com/mercury-hpc/mercury/pull/430#issuecomment-775340146,"Returning an error when adding a file descriptor lower than STDERR_FILENO
was causing errors when users were closing those std file descriptors","I know I'm late, but I agree with this patch.  We hit the same issue in PVFS. Once a file descriptor has been closed (including stdin, stdout, and stderr) those FD numbers are fair game for Linux to reuse for any purpose.  The only ones you can trust to be truly invalidate are negative numbers.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,431,2021-02-09T20:48:12Z,2021-03-08T23:39:29Z,2021-03-08T23:40:23Z,MERGED,True,2,1,1,https://github.com/soumagne,HG: do not block when loopback is enabled and no fd is exposed by NA,1,[],https://github.com/mercury-hpc/mercury/pull/431,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/431,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,432,2021-02-09T20:48:38Z,2021-02-10T18:10:23Z,2021-03-08T23:37:35Z,MERGED,True,6,0,1,https://github.com/soumagne,NA OFI: yield to other threads when using PSM2,1,[],https://github.com/mercury-hpc/mercury/pull/432,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/432,"When not yielding, a thread dedicated to progress would busy spin and not allow for other threads to be scheduled.","When not yielding, a thread dedicated to progress would busy spin and not allow for other threads to be scheduled.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,432,2021-02-09T20:48:38Z,2021-02-10T18:10:23Z,2021-03-08T23:37:35Z,MERGED,True,6,0,1,https://github.com/soumagne,NA OFI: yield to other threads when using PSM2,1,[],https://github.com/mercury-hpc/mercury/pull/432,https://github.com/chuckcranor,2,https://github.com/mercury-hpc/mercury/pull/432#issuecomment-776735567,"When not yielding, a thread dedicated to progress would busy spin and not allow for other threads to be scheduled.","Simple enough and only impacts ofi+psm2, so ok with me....   i'm still not entirely clear on what the spin is in marcvef's test case though.  does this fix the underlying problem, or just mask it?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,432,2021-02-09T20:48:38Z,2021-02-10T18:10:23Z,2021-03-08T23:37:35Z,MERGED,True,6,0,1,https://github.com/soumagne,NA OFI: yield to other threads when using PSM2,1,[],https://github.com/mercury-hpc/mercury/pull/432,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/432#issuecomment-776761692,"When not yielding, a thread dedicated to progress would busy spin and not allow for other threads to be scheduled.","Simple enough and only impacts ofi+psm2, so ok with me.... i'm still not entirely clear on what the spin is in marcvef's test case though. does this fix the underlying problem, or just mask it?

My understanding of the scenario is this: one thread is spinning on HG_Progress() (occasionally alternating to HG_Trigger()) while another pool of threads calls HG_Respond().  Something in the HG_Respond() path, probably down in libfabric or opa-psm2, is unable to acquire a lock because the progress thread is dominating it.
So this PR is a ""fix"" in that it artificially introduces some fairness in the locking by letting the thread pool get a crack at the lock if the progress thread drops the locks without having found any work to do.  I'm not thrilled with have to use a yield for this purpose, but the scope of the change is pretty limited.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,433,2021-03-11T16:33:58Z,2021-03-11T21:59:38Z,2021-03-23T21:24:58Z,MERGED,True,33,21,2,https://github.com/gnuoyd,hg_request_wait(): simplify timeout logic & arithmetic,1,[],https://github.com/mercury-hpc/mercury/pull/433,https://github.com/gnuoyd,1,https://github.com/mercury-hpc/mercury/pull/433,"The previous countdown to timeout was hard to follow, and I wasn't sure about using a double to keep the time remaining.
This change compares the current time with an hg_time_t deadline to see if it's
time to exit. Should still run through the loop at least once if the timeout is 0 milliseconds.
I added a new utility function, hg_time_to_ms(), for converting an hg_time_t directly
to integer milliseconds.","The previous countdown to timeout was hard to follow, and I wasn't sure about using a double to keep the time remaining.
This change compares the current time with an hg_time_t deadline to see if it's
time to exit. Should still run through the loop at least once if the timeout is 0 milliseconds.
I added a new utility function, hg_time_to_ms(), for converting an hg_time_t directly
to integer milliseconds.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,433,2021-03-11T16:33:58Z,2021-03-11T21:59:38Z,2021-03-23T21:24:58Z,MERGED,True,33,21,2,https://github.com/gnuoyd,hg_request_wait(): simplify timeout logic & arithmetic,1,[],https://github.com/mercury-hpc/mercury/pull/433,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/433#issuecomment-796919335,"The previous countdown to timeout was hard to follow, and I wasn't sure about using a double to keep the time remaining.
This change compares the current time with an hg_time_t deadline to see if it's
time to exit. Should still run through the loop at least once if the timeout is 0 milliseconds.
I added a new utility function, hg_time_to_ms(), for converting an hg_time_t directly
to integer milliseconds.","Thanks for adding that, I think it looks better that way. Let me fix the CI though, some weirdness happened there.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,434,2021-03-11T18:16:36Z,2021-03-11T20:01:23Z,2021-03-23T21:24:27Z,MERGED,True,9,6,2,https://github.com/soumagne,Update to latest OFI and fix CI,1,[],https://github.com/mercury-hpc/mercury/pull/434,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/434,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/436,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()","This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/carns,2,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-806857095,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()","Is there a runtime API for changing the subsys, or just the level?  (I see the HG_Set_log_level() function).",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-806876412,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()","Overall this looks great.  My only other comment is that it might be helpful if the prefix on the messages (like [99070.800103] fatal: [error]  in the example given above also indicates explicitly that that it is a mercury log message.
I just tested this PR out with a Mochi service example that was using it's own logging too, and I could imagine an end user not realizing which underlying software component had emitted the error.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-807447707,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()","@carns yes there are hg_log_set_level() and hg_log_set_subsys(), those are in mercury log and not directly exposed through the HG API. HG_Set_log_level() actually does two things now, it set the log level to what you ask for and also enables the hg subsys module.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-807449062,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()","you're also right, I'll add an extra label that mentions the mercury package name.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/carns,6,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-808279272,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()","@carns yes there are hg_log_set_level() and hg_log_set_subsys(), those are in mercury log and not directly exposed through the HG API. HG_Set_log_level() actually does two things now, it set the log level to what you ask for and also enables the hg subsys module.

Seems like it the public API should let you change both?  I'm just thinking about it from the perspective of services layered atop Mercury that might want to be able to control logging.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/soumagne,7,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-818298678,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()",@carns I addressed both comments that you had and also added an HG_Set_log_subsys() API call.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,436,2021-03-23T15:57:50Z,2021-04-12T22:53:03Z,2021-05-06T20:07:09Z,MERGED,True,2148,818,24,https://github.com/soumagne,"Improve logging and add subsystems, debug traces and report",3,[],https://github.com/mercury-hpc/mercury/pull/436,https://github.com/carns,8,https://github.com/mercury-hpc/mercury/pull/436#issuecomment-819674907,"This adds a new environment variable HG_LOG_SUBSYS as well as multiple log subsystems. Log subsystems that depend on a given parent log will be automatically turned on unless they are too verbose, in which case they can manually enabled.
For instance: HG_LOG_SUBSYS=na will turn on NA logs. HG_LOG_SUBSYS=op,progress will turn on op and progress related logs. HG_LOG_SUBSYS=hg will turn on HG logs as well as NA logs (HG log is parent of NA log). It is also possible to prevent a subsystem from being enabled, e.g., HG_LOG_SUBSYS=hg,~na will only print HG logs and turn off NA logs.
Additionally a new log level has been added, HG_LOG_LEVEL=min_debug. This level prevents log output from being printed but records a trace and counters that will be printed when an error occurs on a given subsystem. Here is an example:
# [99070.800103] fatal: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1618 
## na_ofi_provider_check(): Requested OFI provider ""gni"" (derived from ""gni""
   protocol) is not available. Please re-compile libfabric with support for
   ""gni"" or use one of the following available providers:
   tcp;ofi_rxm,udp;ofi_rxd,shm,udp,tcp,sockets
# [99070.800121] na: [error] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na_ofi.c:1721 
## na_ofi_getinfo(): fi_getinfo() failed, rc: -61 (No data available)
### ----------------------
### (na) debug log summary
### ----------------------
# COUNTERS
# -
# NLOGS ENTRIES: 1
# [99070.684087] /home/jsoumagne/workspace/mercury-hpc/mercury/src/na/na.c:265
## NA_Initialize_opt()",Thanks!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,438,2021-03-24T17:25:18Z,2021-03-25T20:38:35Z,2021-03-29T21:59:17Z,MERGED,True,81,58,7,https://github.com/soumagne,Attempt to remove done step in CI,4,[],https://github.com/mercury-hpc/mercury/pull/438,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/438,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,440,2021-03-25T22:03:33Z,2021-03-25T22:50:00Z,2021-03-29T21:58:37Z,MERGED,True,97,67,2,https://github.com/soumagne,Fix refcount on failed response / misc cleanup,3,[],https://github.com/mercury-hpc/mercury/pull/440,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/440,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,442,2021-03-29T21:36:22Z,2021-03-29T21:55:28Z,2021-03-29T22:00:07Z,MERGED,True,167,76,4,https://github.com/soumagne,HG/NA: add HG_HOSTUNREACH / NA_HOSTUNREACH error codes,1,[],https://github.com/mercury-hpc/mercury/pull/442,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/442,"NA OFI: return and convert OFI error codes back to upper layers (fix #437)
HG bulk: return specific error code from NA back to user (fix #312)","NA OFI: return and convert OFI error codes back to upper layers (fix #437)
HG bulk: return specific error code from NA back to user (fix #312)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,443,2021-04-02T22:11:38Z,2021-04-05T18:50:46Z,2021-05-06T20:06:35Z,MERGED,True,155,47,9,https://github.com/soumagne,Enable CI on OSX and fix a few NA OFI init issues,7,[],https://github.com/mercury-hpc/mercury/pull/443,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/443,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,444,2021-04-06T23:30:03Z,2021-04-07T18:43:47Z,2021-05-06T19:49:20Z,MERGED,True,167,100,8,https://github.com/soumagne,NA: add max_unexpected_size and max_expected_size hints (fix #263),2,[],https://github.com/mercury-hpc/mercury/pull/444,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/444,"NA OFI: add support for msg size hints and refactor domain open code
Add -Z na test option to control max msg size","NA OFI: add support for msg size hints and refactor domain open code
Add -Z na test option to control max msg size",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,446,2021-04-14T12:56:28Z,2021-04-16T21:25:45Z,2021-04-16T21:25:45Z,CLOSED,False,2,1,1,https://github.com/KoyamaSohei,na sm: check if entry is in poll list,1,[],https://github.com/mercury-hpc/mercury/pull/446,https://github.com/KoyamaSohei,1,https://github.com/mercury-hpc/mercury/pull/446,"Description
on na_sm_addr_free, there is a possibility that na_sm_addr is not in  list of addresses to poll.
For example, like the code of #445 , it can happen if we call NA_Addr_free without doing forwarding.
Additional context
Currently due to issue #445 , these processes are not performed because the refcount is always 1 or more.
However, after fixing #445 , this case can occur.
Additional context 2
I Implemented this with reference to na_ofi_domain_close in na_ofi.c

  
    
      mercury/src/na/na_ofi.c
    
    
         Line 2311
      in
      4325efa
    
  
  
    

        
          
           if (na_ofi_domain->entry.next || na_ofi_domain->entry.prev)","Description
on na_sm_addr_free, there is a possibility that na_sm_addr is not in  list of addresses to poll.
For example, like the code of #445 , it can happen if we call NA_Addr_free without doing forwarding.
Additional context
Currently due to issue #445 , these processes are not performed because the refcount is always 1 or more.
However, after fixing #445 , this case can occur.
Additional context 2
I Implemented this with reference to na_ofi_domain_close in na_ofi.c

  
    
      mercury/src/na/na_ofi.c
    
    
         Line 2311
      in
      4325efa
    
  
  
    

        
          
           if (na_ofi_domain->entry.next || na_ofi_domain->entry.prev)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,446,2021-04-14T12:56:28Z,2021-04-16T21:25:45Z,2021-04-16T21:25:45Z,CLOSED,False,2,1,1,https://github.com/KoyamaSohei,na sm: check if entry is in poll list,1,[],https://github.com/mercury-hpc/mercury/pull/446,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/446#issuecomment-821572432,"Description
on na_sm_addr_free, there is a possibility that na_sm_addr is not in  list of addresses to poll.
For example, like the code of #445 , it can happen if we call NA_Addr_free without doing forwarding.
Additional context
Currently due to issue #445 , these processes are not performed because the refcount is always 1 or more.
However, after fixing #445 , this case can occur.
Additional context 2
I Implemented this with reference to na_ofi_domain_close in na_ofi.c

  
    
      mercury/src/na/na_ofi.c
    
    
         Line 2311
      in
      4325efa
    
  
  
    

        
          
           if (na_ofi_domain->entry.next || na_ofi_domain->entry.prev)",Fixed in #448,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,447,2021-04-14T13:52:44Z,2021-04-16T21:25:27Z,2021-04-16T21:25:27Z,CLOSED,False,15,4,1,https://github.com/KoyamaSohei,na sm: fix refcount on lookup,3,[],https://github.com/mercury-hpc/mercury/pull/447,https://github.com/KoyamaSohei,1,https://github.com/mercury-hpc/mercury/pull/447,"Description
fix #445
I would be grateful if you would consider #446 before this PR.","Description
fix #445
I would be grateful if you would consider #446 before this PR.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,447,2021-04-14T13:52:44Z,2021-04-16T21:25:27Z,2021-04-16T21:25:27Z,CLOSED,False,15,4,1,https://github.com/KoyamaSohei,na sm: fix refcount on lookup,3,[],https://github.com/mercury-hpc/mercury/pull/447,https://github.com/KoyamaSohei,2,https://github.com/mercury-hpc/mercury/pull/447#issuecomment-820280293,"Description
fix #445
I would be grateful if you would consider #446 before this PR.","Currently my fix is ​​failing the test... (e.g. https://mercury-cdash.hdfgroup.org/test/76981 )
==6396==ERROR: AddressSanitizer: heap-use-after-free on address 0x607000008638 at pc 0x7f9747a5e404 bp 0x7ffdcf04b940 sp 0x7ffdcf04b930
WRITE of size 4 at 0x607000008638 thread T0
    #0 0x7f9747a5e403 in hg_atomic_incr32 /home/runner/work/mercury/mercury/src/util/mercury_atomic.h:319
    #1 0x7f9747a5e403 in na_sm_addr_lookup /home/runner/work/mercury/mercury/src/na/na_sm.c:3835
    #0 0x7f41dbd1a403 in hg_atomic_incr32 /home/runner/work/mercury/mercury/src/util/mercury_atomic.h:319
    #1 0x7f41dbd1a403 in na_sm_addr_lookup /home/runner/work/mercury/mercury/src/na/na_sm.c:3835
    #2 0x7f9747a27481 in NA_Addr_lookup /home/runner/work/mercury/mercury/src/na/na.c:594
    #2 0x7f41dbce3481 in NA_Addr_lookup /home/runner/work/mercury/mercury/src/na/na.c:594
    #3 0x7f9747ac8d89 in hg_core_addr_lookup /home/runner/work/mercury/mercury/src/mercury_core.c:1606
    #4 0x7f9747ad63b5 in HG_Core_addr_lookup1 /home/runner/work/mercury/mercury/src/mercury_core.c:4575
    #3 0x7f41dbd84d89 in hg_core_addr_lookup /home/runner/work/mercury/mercury/src/mercury_core.c:1606
    #4 0x7f41dbd923b5 in HG_Core_addr_lookup1 /home/runner/work/mercury/mercury/src/mercury_core.c:4575
    #5 0x7f9747ab2b2b in HG_Addr_lookup1 /home/runner/work/mercury/mercury/src/mercury.c:1495
    #6 0x55e205fc8385 in hg_test_rpc_lookup /home/runner/work/mercury/mercury/Testing/test_rpc.c:378
    #7 0x55e205fc8385 in main /home/runner/work/mercury/mercury/Testing/test_rpc.c:782
    #8 0x7f97474b80b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)
    #9 0x55e205fc3ffd in _start (/home/runner/work/mercury/mercury/build/bin/hg_test_rpc+0xaffd)

Probably because we don't call hg_hash_table_remove when releasing the address, and address's key remains in the hash table. I don't know if this is the expected behavior.
I will investigate further.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,447,2021-04-14T13:52:44Z,2021-04-16T21:25:27Z,2021-04-16T21:25:27Z,CLOSED,False,15,4,1,https://github.com/KoyamaSohei,na sm: fix refcount on lookup,3,[],https://github.com/mercury-hpc/mercury/pull/447,https://github.com/KoyamaSohei,3,https://github.com/mercury-hpc/mercury/pull/447#issuecomment-820463622,"Description
fix #445
I would be grateful if you would consider #446 before this PR.",It seems that the test passed :),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,447,2021-04-14T13:52:44Z,2021-04-16T21:25:27Z,2021-04-16T21:25:27Z,CLOSED,False,15,4,1,https://github.com/KoyamaSohei,na sm: fix refcount on lookup,3,[],https://github.com/mercury-hpc/mercury/pull/447,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/447#issuecomment-820819725,"Description
fix #445
I would be grateful if you would consider #446 before this PR.","That fix is not quite correct though but thanks for opening the PR. I need to fix a few more things, I should have the fix ready either later today or tomorrow.",True,{'THUMBS_UP': ['https://github.com/KoyamaSohei']}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,447,2021-04-14T13:52:44Z,2021-04-16T21:25:27Z,2021-04-16T21:25:27Z,CLOSED,False,15,4,1,https://github.com/KoyamaSohei,na sm: fix refcount on lookup,3,[],https://github.com/mercury-hpc/mercury/pull/447,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/447#issuecomment-821572299,"Description
fix #445
I would be grateful if you would consider #446 before this PR.",Fixed in #448,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,448,2021-04-16T21:08:42Z,2021-04-16T21:24:33Z,2021-05-06T20:07:43Z,MERGED,True,623,427,4,https://github.com/soumagne,Support NA sends to self and misc NA fixes,7,[],https://github.com/mercury-hpc/mercury/pull/448,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/448,"NA SM addr fixes
NA OFI cleanups and fixes","NA SM addr fixes
NA OFI cleanups and fixes",True,{'THUMBS_UP': ['https://github.com/KoyamaSohei']}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,450,2021-04-19T16:42:43Z,2021-04-19T20:00:49Z,2021-05-06T20:09:25Z,MERGED,True,5,2,1,https://github.com/soumagne,NA OFI: fix potential memory leak in na_ofi_provider_check(),1,[],https://github.com/mercury-hpc/mercury/pull/450,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/450,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,451,2021-04-20T23:47:02Z,2021-04-21T01:09:41Z,2021-05-06T20:10:23Z,MERGED,True,273,167,1,https://github.com/soumagne,NA OFI: add addr pool to prevent addr allocation on unexpected recv,1,[],https://github.com/mercury-hpc/mercury/pull/451,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/451,Clean up NA OFI class access,Clean up NA OFI class access,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,452,2021-04-21T19:18:40Z,2021-04-22T00:27:12Z,2021-05-06T20:06:01Z,MERGED,True,20,5,1,https://github.com/soumagne,HG util: add best-effort C++ compatibility (fix #449),1,[],https://github.com/mercury-hpc/mercury/pull/452,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/452,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,452,2021-04-21T19:18:40Z,2021-04-22T00:27:12Z,2021-05-06T20:06:01Z,MERGED,True,20,5,1,https://github.com/soumagne,HG util: add best-effort C++ compatibility (fix #449),1,[],https://github.com/mercury-hpc/mercury/pull/452,https://github.com/chuckcranor,2,https://github.com/mercury-hpc/mercury/pull/452#issuecomment-825855469,,"Seems like this is the best we can do if we want to use stdatomic.h, and as pointed out in http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0943r1.html android uses it -- so we are not too far out on a limb (plus Mercury itself is all in C anyway).  Unfortunate that C/C++ conflict happened though...",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,453,2021-04-22T00:25:55Z,2021-04-22T00:32:39Z,2021-05-06T20:08:36Z,MERGED,True,183,69,6,https://github.com/soumagne,CI: clean up GitHub actions yml files,1,[],https://github.com/mercury-hpc/mercury/pull/453,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/453,"Add release/pre-release actions to automate release process
CMake: fix cpack source package build
Add template for changes / moves change list to Documentation","Add release/pre-release actions to automate release process
CMake: fix cpack source package build
Add template for changes / moves change list to Documentation",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,456,2021-05-06T22:21:16Z,2021-05-06T22:31:01Z,2021-05-10T20:36:19Z,MERGED,True,41,1,3,https://github.com/soumagne,HG util: fix log initialization with constructor priority (fix #454),1,[],https://github.com/mercury-hpc/mercury/pull/456,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/456,Add CMake check for attribute((constructor(priority))),Add CMake check for attribute((constructor(priority))),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,457,2021-05-07T16:18:55Z,2021-05-07T21:12:28Z,2021-05-10T20:36:13Z,MERGED,True,44,0,1,https://github.com/soumagne,Update CHANGES.md,1,[],https://github.com/mercury-hpc/mercury/pull/457,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/457,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,458,2021-05-10T22:13:20Z,2021-05-11T18:27:54Z,2021-05-12T18:49:29Z,MERGED,True,147,121,5,https://github.com/soumagne,CMake: fix cpack source file packaging,1,[],https://github.com/mercury-hpc/mercury/pull/458,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/458,"Use PUBLIC_HEADER property
Update mchecksum submodule","Use PUBLIC_HEADER property
Update mchecksum submodule",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,459,2021-05-11T22:46:02Z,2021-05-11T23:56:14Z,2021-05-12T18:49:37Z,MERGED,True,264,1462,37,https://github.com/soumagne,Format checks,2,[],https://github.com/mercury-hpc/mercury/pull/459,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/459,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,460,2021-05-12T17:18:28Z,2021-05-12T18:39:01Z,2021-05-12T18:49:42Z,MERGED,True,18,13,2,https://github.com/soumagne,Misc fix,4,[],https://github.com/mercury-hpc/mercury/pull/460,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/460,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,465,2021-05-25T16:20:39Z,2021-05-25T16:41:40Z,2021-06-07T16:43:59Z,MERGED,True,3,2,1,https://github.com/soumagne,HG bulk: fix missing mutex unlock (fix #462),1,[],https://github.com/mercury-hpc/mercury/pull/465,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/465,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,471,2021-06-03T22:19:16Z,2021-06-04T16:17:57Z,2021-06-07T16:43:29Z,MERGED,True,925,321,12,https://github.com/soumagne,add memory pool to util and buk test fixes,6,[],https://github.com/mercury-hpc/mercury/pull/471,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/471,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,472,2021-06-04T20:00:41Z,2021-06-07T16:42:26Z,2021-06-07T16:43:41Z,MERGED,True,21,12,5,https://github.com/soumagne,Formating,1,[],https://github.com/mercury-hpc/mercury/pull/472,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/472,"Rerun formatter after update to clang 12
Add script for applying format","Rerun formatter after update to clang 12
Add script for applying format",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,473,2021-06-07T22:04:04Z,2021-06-07T22:18:20Z,2021-06-21T20:45:42Z,MERGED,True,95,15,8,https://github.com/soumagne,Add bidirectional option to RPC lat test,2,[],https://github.com/mercury-hpc/mercury/pull/473,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/473,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,474,2021-06-08T17:31:21Z,2021-07-07T22:54:27Z,2021-08-09T20:31:18Z,MERGED,True,19,2,1,https://github.com/soumagne,On PPC systems default to gettimeofday() on ms resolution (fix #464),1,[],https://github.com/mercury-hpc/mercury/pull/474,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/474,ppc/32 and ppc/64 do not support CLOCK_MONOTONIC_COARSE in vdso,ppc/32 and ppc/64 do not support CLOCK_MONOTONIC_COARSE in vdso,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,475,2021-06-08T22:36:55Z,2021-06-09T21:22:14Z,2021-06-21T20:41:00Z,MERGED,True,37,23,2,https://github.com/soumagne,CI config fixes and warnings fixes,2,[],https://github.com/mercury-hpc/mercury/pull/475,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/475,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,476,2021-06-09T21:36:30Z,2021-06-09T21:51:07Z,2021-06-21T20:45:24Z,MERGED,True,106,10,8,https://github.com/soumagne,HG util: fix log subsys to prevent setting duplicates,1,[],https://github.com/mercury-hpc/mercury/pull/476,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/476,"Add get stream routines
Add option to execute routine within debug macro
Update testing to set default log levels
HG/NA: fix generation of subsys name string","Add get stream routines
Add option to execute routine within debug macro
Update testing to set default log levels
HG/NA: fix generation of subsys name string",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,477,2021-06-11T19:50:05Z,2021-06-21T19:38:21Z,2021-06-21T20:47:01Z,MERGED,True,116,43,5,https://github.com/soumagne,Tidy up UCX thread configuration,3,[],https://github.com/mercury-hpc/mercury/pull/477,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/477,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,479,2021-06-21T19:48:33Z,2021-06-24T19:10:27Z,2021-08-09T20:35:22Z,MERGED,True,230,49,4,https://github.com/soumagne,Add support for init string / protocol check to UCX,3,[],https://github.com/mercury-hpc/mercury/pull/479,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/479,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,481,2021-06-24T18:48:16Z,2021-06-24T19:08:58Z,2021-08-09T20:32:37Z,MERGED,True,179,112,12,https://github.com/soumagne,Cleanups,4,[],https://github.com/mercury-hpc/mercury/pull/481,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/481,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,482,2021-06-25T20:11:08Z,2021-06-25T20:14:53Z,2021-08-09T20:34:16Z,MERGED,True,1,18,1,https://github.com/soumagne,Testing: remove protocol check and leave it up to NA,1,[],https://github.com/mercury-hpc/mercury/pull/482,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/482,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,483,2021-06-25T22:53:22Z,2021-06-25T22:56:05Z,2021-08-09T20:34:53Z,MERGED,True,21,8,1,https://github.com/soumagne,HG Core: print HG handle information,1,[],https://github.com/mercury-hpc/mercury/pull/483,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/483,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,484,2021-07-07T21:14:17Z,2021-07-07T22:52:33Z,2021-08-09T20:33:40Z,MERGED,True,0,3,1,https://github.com/soumagne,NA Test: do not need to set protocol with static mode,1,[],https://github.com/mercury-hpc/mercury/pull/484,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/484,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,486,2021-07-14T22:40:18Z,2021-07-14T23:01:23Z,2021-08-09T20:31:42Z,MERGED,True,30,0,1,https://github.com/soumagne,HG util: ensure debug logs are freed at exit,1,[],https://github.com/mercury-hpc/mercury/pull/486,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/486,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,487,2021-07-28T22:26:20Z,2021-10-18T19:51:43Z,2021-10-18T22:32:55Z,MERGED,True,2,2,2,https://github.com/soumagne,CI: update OFI to 1.13.2,2,[],https://github.com/mercury-hpc/mercury/pull/487,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/487,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,490,2021-08-09T19:48:50Z,2021-08-09T20:04:35Z,2021-08-09T20:31:22Z,MERGED,True,6,20,1,https://github.com/soumagne,Fixes for not using CLOCK_MONOTONIC_COARSE on PPC,1,[],https://github.com/mercury-hpc/mercury/pull/490,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/490,Add missing defines.,Add missing defines.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,491,2021-08-09T19:54:34Z,2021-08-09T20:05:38Z,2021-08-09T20:32:00Z,MERGED,True,24,16,1,https://github.com/soumagne,HG bulk: fix call to NA_Mem_deregister() when handle is deserialized,1,[],https://github.com/mercury-hpc/mercury/pull/491,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/491,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,492,2021-08-09T20:20:08Z,2021-08-09T20:30:30Z,2021-08-09T21:51:40Z,MERGED,True,32,21,6,https://github.com/soumagne,HG Test: Add '-y' '--buf_size_min' option to specify a minimum buffer size,1,[],https://github.com/mercury-hpc/mercury/pull/492,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/492,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,493,2021-08-09T22:01:23Z,2021-08-09T22:28:03Z,2021-08-09T22:28:33Z,MERGED,True,278,13,10,https://github.com/soumagne,Expand support features for NA plugins,4,[],https://github.com/mercury-hpc/mercury/pull/493,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/493,"NA: add thread modes
NA test: add support for polling in latency tests
NA IP: add na_ip_check_interface() that can be used by plugins to select IP interface to use
HG util: add hg_mem_header_alloc/free calls to allocate buffers with a preceding header","NA: add thread modes
NA test: add support for polling in latency tests
NA IP: add na_ip_check_interface() that can be used by plugins to select IP interface to use
HG util: add hg_mem_header_alloc/free calls to allocate buffers with a preceding header",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,494,2021-08-09T22:30:19Z,2021-08-20T22:03:28Z,2021-08-20T22:03:28Z,MERGED,True,3689,1,9,https://github.com/soumagne,NA: add UCX plugin and support for UCX,2,[],https://github.com/mercury-hpc/mercury/pull/494,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/494,"Testing: enable UCX plugin in CI
Testing: set NA_UCX_TESTING_PROTOCOL to all by default","Testing: enable UCX plugin in CI
Testing: set NA_UCX_TESTING_PROTOCOL to all by default",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,497,2021-08-17T21:17:40Z,2021-08-17T22:20:19Z,2021-08-19T21:49:22Z,MERGED,True,384,277,12,https://github.com/soumagne,Thread safety analysis and lock handling fixes,3,[],https://github.com/mercury-hpc/mercury/pull/497,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/497,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,498,2021-08-19T21:52:33Z,2021-08-19T22:10:41Z,2021-09-29T17:02:24Z,MERGED,True,292,397,5,https://github.com/soumagne,Fix hg_time_from_ms() / clean up OFI plugin and add na_cb_info_recv_expected,4,[],https://github.com/mercury-hpc/mercury/pull/498,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/498,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,499,2021-08-20T21:38:40Z,2021-08-20T21:42:53Z,2021-09-29T17:03:19Z,MERGED,True,1,2,2,https://github.com/soumagne,HG/NA: fix some remaining warnings,1,[],https://github.com/mercury-hpc/mercury/pull/499,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/499,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,500,2021-08-20T22:45:41Z,2021-08-20T22:48:40Z,2021-09-29T17:01:10Z,MERGED,True,49,1,1,https://github.com/soumagne,Update changelog,1,[],https://github.com/mercury-hpc/mercury/pull/500,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/500,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,504,2021-08-24T17:04:25Z,,2021-08-24T17:05:50Z,OPEN,False,538,37,1,https://github.com/jgmoore-or,Adds av_table management to na_ofi.c.,2,[],https://github.com/mercury-hpc/mercury/pull/504,https://github.com/jgmoore-or,1,https://github.com/mercury-hpc/mercury/pull/504,Signed-off-by: Joseph Moore joseph.moore@intel.com,Signed-off-by: Joseph Moore joseph.moore@intel.com,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,505,2021-09-13T18:45:30Z,2021-09-13T19:30:51Z,2021-09-29T17:01:51Z,MERGED,True,236,225,26,https://github.com/soumagne,Warnings and static analysis issues,7,[],https://github.com/mercury-hpc/mercury/pull/505,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/505,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,506,2021-09-14T19:10:35Z,2021-09-14T19:48:32Z,2021-09-29T17:00:32Z,MERGED,True,72,136,5,https://github.com/soumagne,Fix some static analysis warnings,2,[],https://github.com/mercury-hpc/mercury/pull/506,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/506,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,508,2021-09-26T21:13:44Z,2021-10-07T21:06:29Z,2021-10-07T21:06:29Z,CLOSED,False,19,3,1,https://github.com/jgmoore-or,Change to na_ucx.c parsing of address string.  ,1,[],https://github.com/mercury-hpc/mercury/pull/508,https://github.com/jgmoore-or,1,https://github.com/mercury-hpc/mercury/pull/508,"Allow specification of the device in the initialization string.
Signed-off-by: Joseph Moore joseph.moore@intel.com","Allow specification of the device in the initialization string.
Signed-off-by: Joseph Moore joseph.moore@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,508,2021-09-26T21:13:44Z,2021-10-07T21:06:29Z,2021-10-07T21:06:29Z,CLOSED,False,19,3,1,https://github.com/jgmoore-or,Change to na_ucx.c parsing of address string.  ,1,[],https://github.com/mercury-hpc/mercury/pull/508,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/508#issuecomment-929691565,"Allow specification of the device in the initialization string.
Signed-off-by: Joseph Moore joseph.moore@intel.com",Thanks @jgmoore-or I will integrate it while updating the UCX plugin.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,508,2021-09-26T21:13:44Z,2021-10-07T21:06:29Z,2021-10-07T21:06:29Z,CLOSED,False,19,3,1,https://github.com/jgmoore-or,Change to na_ucx.c parsing of address string.  ,1,[],https://github.com/mercury-hpc/mercury/pull/508,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/508#issuecomment-938155896,"Allow specification of the device in the initialization string.
Signed-off-by: Joseph Moore joseph.moore@intel.com",Merged in #511,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,509,2021-09-28T23:15:06Z,2021-09-29T16:59:09Z,2021-10-18T22:33:36Z,MERGED,True,1381,1566,4,https://github.com/soumagne,NA SM update and enable multi-users / custom init strings,2,[],https://github.com/mercury-hpc/mercury/pull/509,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/509,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,510,2021-09-29T22:40:09Z,2021-09-29T23:00:35Z,2021-10-18T22:34:01Z,MERGED,True,117,107,4,https://github.com/soumagne,Timeout fixes to use deadline instead of floating-point division,3,[],https://github.com/mercury-hpc/mercury/pull/510,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/510,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,511,2021-10-07T20:38:36Z,2021-10-07T21:05:58Z,2021-10-18T22:34:33Z,MERGED,True,449,141,2,https://github.com/soumagne,UCX addr serialization fixes and cleanup / manual selection of NET_DEVICE,2,[],https://github.com/mercury-hpc/mercury/pull/511,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/511,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,512,2021-10-07T21:38:57Z,2021-10-07T21:52:22Z,2021-10-18T22:35:11Z,MERGED,True,20,4,2,https://github.com/soumagne,NA SM: add sm_info_string field to HG init info,1,[],https://github.com/mercury-hpc/mercury/pull/512,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/512,Allows for specification of shared-memory file suffix to use with auto_sm,Allows for specification of shared-memory file suffix to use with auto_sm,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,513,2021-10-07T22:45:27Z,2021-10-07T22:46:03Z,2021-10-18T22:32:46Z,MERGED,True,13,2,2,https://github.com/soumagne,Update release notes and gh-actions fix,2,[],https://github.com/mercury-hpc/mercury/pull/513,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/513,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,514,2021-10-15T22:51:40Z,2021-10-18T22:26:53Z,2021-10-18T22:33:11Z,MERGED,True,57,86,2,https://github.com/soumagne,NA OFI: TCP/sockets registration fix and OFI min version bump,2,[],https://github.com/mercury-hpc/mercury/pull/514,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/514,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,514,2021-10-15T22:51:40Z,2021-10-18T22:26:53Z,2021-10-18T22:33:11Z,MERGED,True,57,86,2,https://github.com/soumagne,NA OFI: TCP/sockets registration fix and OFI min version bump,2,[],https://github.com/mercury-hpc/mercury/pull/514,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/514#issuecomment-946217412,,Also confirmed that psm2 is still ok with it.,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,515,2021-10-19T18:57:33Z,2021-10-19T18:58:10Z,2021-10-19T19:01:23Z,MERGED,True,42,0,1,https://github.com/soumagne,Use CLA assistant for PRs,1,[],https://github.com/mercury-hpc/mercury/pull/515,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/515,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,516,2021-10-19T19:14:56Z,2021-10-19T19:17:53Z,2021-10-26T19:26:52Z,MERGED,True,2,1,1,https://github.com/soumagne,CLA: prevent from running on issues,1,[],https://github.com/mercury-hpc/mercury/pull/516,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/516,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,516,2021-10-19T19:14:56Z,2021-10-19T19:17:53Z,2021-10-26T19:26:52Z,MERGED,True,2,1,1,https://github.com/soumagne,CLA: prevent from running on issues,1,[],https://github.com/mercury-hpc/mercury/pull/516,https://github.com/apps/github-actions,2,https://github.com/mercury-hpc/mercury/pull/516#issuecomment-947031107,,CLA Assistant Lite bot All contributors have signed the CLA  ✍️ ✅,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,516,2021-10-19T19:14:56Z,2021-10-19T19:17:53Z,2021-10-26T19:26:52Z,MERGED,True,2,1,1,https://github.com/soumagne,CLA: prevent from running on issues,1,[],https://github.com/mercury-hpc/mercury/pull/516,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/516#issuecomment-947032074,,I have read the CLA Document and I hereby sign the CLA,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,517,2021-10-20T00:30:15Z,2021-10-21T23:08:40Z,2021-10-26T19:26:57Z,MERGED,True,217,135,24,https://github.com/soumagne,CI: add intel oneAPI compilers to CI matrix,3,[],https://github.com/mercury-hpc/mercury/pull/517,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/517,Update CI scripts,Update CI scripts,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,518,2021-10-25T22:43:37Z,2021-10-25T23:13:15Z,2021-10-26T19:27:04Z,MERGED,True,358,417,36,https://github.com/soumagne,Remove OpenPA dependency and HG util int types,2,[],https://github.com/mercury-hpc/mercury/pull/518,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/518,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,521,2021-11-02T22:59:55Z,2021-11-02T23:21:31Z,2021-11-03T18:53:16Z,MERGED,True,145,189,1,https://github.com/soumagne,HG core: fix handle cleanup when forward fails (fix #519),1,[],https://github.com/mercury-hpc/mercury/pull/521,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/521,"Let canceled operations return errors
Clean up hg_core_complete() to return void","Let canceled operations return errors
Clean up hg_core_complete() to return void",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,522,2021-11-03T18:55:41Z,2022-01-10T20:34:03Z,2022-01-14T20:47:47Z,MERGED,True,1,1,1,https://github.com/soumagne,CI: update OFI to 1.14.0,1,[],https://github.com/mercury-hpc/mercury/pull/522,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/522,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,523,2021-11-10T00:55:05Z,2021-11-11T00:03:43Z,2021-11-18T21:12:04Z,MERGED,True,186,212,4,https://github.com/soumagne,HG Core: correctly forward NA error return code back to HG user callback,1,[],https://github.com/mercury-hpc/mercury/pull/523,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/523,Clean up HG core NA callbacks,Clean up HG core NA callbacks,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,524,2021-11-10T09:12:02Z,2021-11-10T09:13:44Z,2021-11-10T09:13:44Z,CLOSED,False,22831,13678,176,https://github.com/liuxuezhao,NA OFI: don't need FI_WRITE when creates RO bulk handle,187,[],https://github.com/mercury-hpc/mercury/pull/524,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/524,"Need not FI_WRITE permission if create bulk handle with HG_BULK_READ_ONLY,
to fix the ibv_reg_mr() failure over verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","Need not FI_WRITE permission if create bulk handle with HG_BULK_READ_ONLY,
to fix the ibv_reg_mr() failure over verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,525,2021-11-10T09:15:43Z,2021-11-10T09:16:15Z,2021-11-10T09:16:15Z,CLOSED,False,1,1,1,https://github.com/liuxuezhao,NA OFI: don't need FI_WRITE when creates RO bulk handle,188,[],https://github.com/mercury-hpc/mercury/pull/525,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/525,"Need not FI_WRITE permission if create bulk handle with HG_BULK_READ_ONLY,
to fix the ibv_reg_mr() failure over verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","Need not FI_WRITE permission if create bulk handle with HG_BULK_READ_ONLY,
to fix the ibv_reg_mr() failure over verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,526,2021-11-10T09:22:39Z,2021-11-12T01:59:47Z,2021-11-12T01:59:47Z,CLOSED,False,1,1,1,https://github.com/liuxuezhao,NA OFI: don't need FI_WRITE when creates RO bulk handle,188,[],https://github.com/mercury-hpc/mercury/pull/526,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/526,"Need not FI_WRITE permission if create bulk handle with HG_BULK_READ_ONLY,
to fix the ibv_reg_mr() failure over verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","Need not FI_WRITE permission if create bulk handle with HG_BULK_READ_ONLY,
to fix the ibv_reg_mr() failure over verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,527,2021-11-11T21:32:50Z,2021-11-11T22:15:19Z,2021-11-18T21:11:37Z,MERGED,True,3,5,2,https://github.com/soumagne,Access fix,2,[],https://github.com/mercury-hpc/mercury/pull/527,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/527,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,529,2021-11-18T23:45:46Z,2021-11-19T00:32:07Z,2021-12-13T21:53:59Z,MERGED,True,28,61,1,https://github.com/soumagne,HG Core: fix potential issue on context destroy where handles could have been reposted,1,[],https://github.com/mercury-hpc/mercury/pull/529,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/529,Clean up context unpost and only wait on created list,Clean up context unpost and only wait on created list,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,530,2021-11-30T00:12:58Z,2021-11-30T00:53:54Z,2021-12-13T21:54:14Z,MERGED,True,42,1,4,https://github.com/soumagne,HG Bulk: add minimal tracking of bulk handles that are not freed,1,[],https://github.com/mercury-hpc/mercury/pull/530,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/530,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,532,2021-12-07T07:48:42Z,2021-12-09T06:14:57Z,2021-12-09T14:39:22Z,CLOSED,False,5,0,1,https://github.com/liuxuezhao,NA_OFI: explictly complete NON-RECV OP in na_ofi_op_cancel for verbs,1,[],https://github.com/mercury-hpc/mercury/pull/532,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/532,"By kinds of testing, verbs provider will not generate complete
event for the fi_cancel() for non-recv operations. This cause
HG_Cancel() will not trigger RPC's completion as expected.
This patch fixes it by na_ofi_complete() it for verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","By kinds of testing, verbs provider will not generate complete
event for the fi_cancel() for non-recv operations. This cause
HG_Cancel() will not trigger RPC's completion as expected.
This patch fixes it by na_ofi_complete() it for verbs provider.
Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,533,2021-12-14T22:28:30Z,2022-02-24T23:12:40Z,2022-02-24T23:12:40Z,MERGED,True,2961,1,13,https://github.com/soumagne,Bring NA psm plugin,5,[],https://github.com/mercury-hpc/mercury/pull/533,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/533,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,536,2021-12-18T00:35:55Z,2021-12-20T17:40:52Z,2022-02-01T20:42:03Z,MERGED,True,3,2,1,https://github.com/soumagne,HG util time: make sure we round up ms time conversion,1,[],https://github.com/mercury-hpc/mercury/pull/536,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/536,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,537,2021-12-22T22:22:03Z,2021-12-22T22:46:39Z,2022-01-10T17:33:34Z,MERGED,True,163,226,4,https://github.com/soumagne,NA OFI: use NA IP check module and add missing NA_OFI_VERIFY_PROV_DOM,1,[],https://github.com/mercury-hpc/mercury/pull/537,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/537,"… for tcp provider
Clean up ip and domain checking
NA IP: refactor na_ip_check_interface() to only use getaddrinfo() and getifaddrs()
Add family argument to force detection of IPv4/IPv6 addresses","… for tcp provider
Clean up ip and domain checking
NA IP: refactor na_ip_check_interface() to only use getaddrinfo() and getifaddrs()
Add family argument to force detection of IPv4/IPv6 addresses",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,538,2022-01-10T20:57:20Z,2022-02-17T18:00:28Z,2022-03-17T23:05:40Z,CLOSED,False,1,1,1,https://github.com/soumagne,NA OFI: prevent empty auth keys from being passed,1,[],https://github.com/mercury-hpc/mercury/pull/538,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/538,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,538,2022-01-10T20:57:20Z,2022-02-17T18:00:28Z,2022-03-17T23:05:40Z,CLOSED,False,1,1,1,https://github.com/soumagne,NA OFI: prevent empty auth keys from being passed,1,[],https://github.com/mercury-hpc/mercury/pull/538,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/538#issuecomment-1043248859,,will be merged as part of an upcoming PR,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,539,2022-01-13T22:20:17Z,2022-01-14T20:42:15Z,2022-01-14T20:46:09Z,MERGED,True,186,32,3,https://github.com/soumagne,NA OFI: add support for HPE CXI provider,2,[],https://github.com/mercury-hpc/mercury/pull/539,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/539,"Clean up provider table and add EP proto
Add support for FI_MR_ENDPOINT mr mode
Co-authored-by: Alexander A Oganezov alexander.a.oganezov@intel.com","Clean up provider table and add EP proto
Add support for FI_MR_ENDPOINT mr mode
Co-authored-by: Alexander A Oganezov alexander.a.oganezov@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,545,2022-02-14T07:36:08Z,2022-02-24T22:55:00Z,2022-02-24T22:55:00Z,CLOSED,False,86,2,1,https://github.com/liuxuezhao,NA OFI: two changes to FI_EAGAIN/retry handling,1,[],https://github.com/mercury-hpc/mercury/pull/545,https://github.com/liuxuezhao,1,https://github.com/mercury-hpc/mercury/pull/545,"When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,545,2022-02-14T07:36:08Z,2022-02-24T22:55:00Z,2022-02-24T22:55:00Z,CLOSED,False,86,2,1,https://github.com/liuxuezhao,NA OFI: two changes to FI_EAGAIN/retry handling,1,[],https://github.com/mercury-hpc/mercury/pull/545,https://github.com/soumagne,2,https://github.com/mercury-hpc/mercury/pull/545#issuecomment-1039345879,"When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","@liuxuezhao I'm a little confused by this patch, though I understand your intent. If you get an error from the CQ, that means that the operation was successfully submitted in the first place, hence already removed from the retry queue so you would not be able to abort it but it would only complete with an error code there. Getting back to aborting retries I think that makes sense and we should do that, probably based on a timeout of some sort though. When we retry and OFI returns EAGAIN for example the operation is not submitted yet so any error that occurs there would not be returned from the OFI CQ.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,545,2022-02-14T07:36:08Z,2022-02-24T22:55:00Z,2022-02-24T22:55:00Z,CLOSED,False,86,2,1,https://github.com/liuxuezhao,NA OFI: two changes to FI_EAGAIN/retry handling,1,[],https://github.com/mercury-hpc/mercury/pull/545,https://github.com/liuxuezhao,3,https://github.com/mercury-hpc/mercury/pull/545#issuecomment-1039736113,"When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","If you get an error from the CQ, that means that the operation was successfully submitted in the first place, hence already removed from the retry queue so you would not be able to abort it but it would only complete with an error code there.

Yes, the intent is at that time, it checks the retry op queue and abort all other OPs to the same target fi_addr. Because if based on current ofi rxm provider, those retry will always get EAGAIN so cannot get completion.
By some other DAOS test, this mercury patch cannot fully resolve the problem, possibly due to it cannot abort the new submitted OPs. We probably still need OFI change, or adding timeout tracking for each OP submitted to OFI that is more complex. Need some more discussions later.
Thanks.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,545,2022-02-14T07:36:08Z,2022-02-24T22:55:00Z,2022-02-24T22:55:00Z,CLOSED,False,86,2,1,https://github.com/liuxuezhao,NA OFI: two changes to FI_EAGAIN/retry handling,1,[],https://github.com/mercury-hpc/mercury/pull/545,https://github.com/liuxuezhao,4,https://github.com/mercury-hpc/mercury/pull/545#issuecomment-1046429877,"When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","@soumagne anything else I need to for landing this patch? not very sure if the CI failure is related with this patch, thanks.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,545,2022-02-14T07:36:08Z,2022-02-24T22:55:00Z,2022-02-24T22:55:00Z,CLOSED,False,86,2,1,https://github.com/liuxuezhao,NA OFI: two changes to FI_EAGAIN/retry handling,1,[],https://github.com/mercury-hpc/mercury/pull/545,https://github.com/soumagne,5,https://github.com/mercury-hpc/mercury/pull/545#issuecomment-1047045159,"When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","No worries, I'll take care of it. I need to merge PR #550 first to avoid conflicts. I'd also like to make sure we don't use any double for timeouts so I'll fix that as well.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,545,2022-02-14T07:36:08Z,2022-02-24T22:55:00Z,2022-02-24T22:55:00Z,CLOSED,False,86,2,1,https://github.com/liuxuezhao,NA OFI: two changes to FI_EAGAIN/retry handling,1,[],https://github.com/mercury-hpc/mercury/pull/545,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/545#issuecomment-1050312542,"When get FI_ENOTCONN/FI_ECONNRESET/FI_ECONNABORTED/FI_ECONNREFUSED for
one OP, check the per context retry_op_queue to abort all ops to the
same target fi_addr, to avoid retry that op.
Set a timestamp for first time retry, if following retry keep get
EAGAIN within NA_OFI_OP_RETRY_TIMEOUT (60 second), give up the retry.

Signed-off-by: Xuezhao Liu xuezhao.liu@intel.com","I simplified things a bit in #553. Have a look, it should be good to go now. Thanks!",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,546,2022-02-14T22:21:40Z,2022-02-14T22:54:49Z,2022-02-15T21:38:51Z,MERGED,True,147,156,9,https://github.com/soumagne,HG core: remove MERCURY_ENABLE_STATS CMake option and use 'diag' log …,1,[],https://github.com/mercury-hpc/mercury/pull/546,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/546,"…subsys instead
Let mercury log print counters on exit when debug outlet is on
HG Core: refactor existing counters (used only if debug is on)","…subsys instead
Let mercury log print counters on exit when debug outlet is on
HG Core: refactor existing counters (used only if debug is on)",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,547,2022-02-15T16:58:29Z,2022-02-15T17:45:10Z,2022-02-15T21:39:01Z,MERGED,True,16,1,2,https://github.com/soumagne,HG Core: keep 'stats' fields removed in previous commit,1,[],https://github.com/mercury-hpc/mercury/pull/547,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/547,Modify behavior of stats field to turn on diagnostics,Modify behavior of stats field to turn on diagnostics,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,549,2022-02-17T17:59:48Z,2022-02-17T18:15:58Z,2022-03-17T23:05:29Z,MERGED,True,4,0,1,https://github.com/soumagne,HG proc: prevent call to save_ptr/restore_ptr during HG_FREE,1,[],https://github.com/mercury-hpc/mercury/pull/549,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/549,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,550,2022-02-17T21:56:47Z,2022-02-23T21:37:55Z,2022-03-17T23:07:02Z,MERGED,True,2172,1400,26,https://github.com/soumagne,NA OFI: initialization and address management improvements,12,[],https://github.com/mercury-hpc/mercury/pull/550,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/550,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,550,2022-02-17T21:56:47Z,2022-02-23T21:37:55Z,2022-03-17T23:07:02Z,MERGED,True,2172,1400,26,https://github.com/soumagne,NA OFI: initialization and address management improvements,12,[],https://github.com/mercury-hpc/mercury/pull/550,https://github.com/mathstuf,2,https://github.com/mercury-hpc/mercury/pull/550#issuecomment-1047104531,,Just tested this myself; with this patch a Linux client can successfully communicate with a macOS-hosted server (over sockets://).,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,550,2022-02-17T21:56:47Z,2022-02-23T21:37:55Z,2022-03-17T23:07:02Z,MERGED,True,2172,1400,26,https://github.com/soumagne,NA OFI: initialization and address management improvements,12,[],https://github.com/mercury-hpc/mercury/pull/550,https://github.com/soumagne,3,https://github.com/mercury-hpc/mercury/pull/550#issuecomment-1047120361,,thanks for confirming @mathstuf,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,553,2022-02-24T22:07:18Z,2022-02-24T22:54:45Z,2022-03-17T23:06:40Z,MERGED,True,78,10,1,https://github.com/soumagne,NA OFI: improve handling of retries after FI_EAGAIN return code,1,[],https://github.com/mercury-hpc/mercury/pull/553,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/553,"Abort retried ops after default 90s timeout
Abort ops to a target being retried after first NA_HOSTUNREACH error in CQ","Abort retried ops after default 90s timeout
Abort ops to a target being retried after first NA_HOSTUNREACH error in CQ",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,555,2022-02-28T22:03:29Z,2022-02-28T22:09:14Z,2022-03-17T23:03:20Z,MERGED,True,31,29,1,https://github.com/soumagne,NA OFI: ensure interface name is not used as domain name for verbs etc,1,[],https://github.com/mercury-hpc/mercury/pull/555,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/555,Reinstate NA_OFI_VERIFY_PROV_DOM flag to NA_OFI_DOM_IFACE,Reinstate NA_OFI_VERIFY_PROV_DOM flag to NA_OFI_DOM_IFACE,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,556,2022-03-08T22:21:24Z,2022-03-16T17:04:46Z,2022-03-17T23:04:48Z,MERGED,True,541,815,2,https://github.com/soumagne,NA UCX: use UCP_FEATURE_AM for unexpected messages (only),3,[],https://github.com/mercury-hpc/mercury/pull/556,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/556,"Switch unexpected recvs to use OP ID queue
Remove addr resolution and retry / connection ID exchange
Use double index map for looking up addresses
Clean up op reset","Switch unexpected recvs to use OP ID queue
Remove addr resolution and retry / connection ID exchange
Use double index map for looking up addresses
Clean up op reset",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,557,2022-03-11T20:05:17Z,2022-03-11T20:14:58Z,2022-03-17T23:01:51Z,MERGED,True,12,2,2,https://github.com/soumagne,NA OFI: fix regression introduced in na_ofi_addr_to_string(),1,[],https://github.com/mercury-hpc/mercury/pull/557,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/557,HG Test: check that length returned can be used in second call,HG Test: check that length returned can be used in second call,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,558,2022-03-11T21:00:16Z,2022-04-18T20:03:51Z,2022-04-18T20:04:11Z,MERGED,True,3,3,1,https://github.com/soumagne,CI: update to libfabric 1.15.0rc2,2,[],https://github.com/mercury-hpc/mercury/pull/558,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/558,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/559,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/carns,2,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1089079348,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Hi @soumagne , can you either add a #define feature I can check for in the Mercury headers (e.g. HG_HAS_BULK_CREATE_ATTR) or bump the API version number in this PR?
I was working on margo bindings for this new function to be enabled or disabled conditionally depending on whether the function is present in Mercury.  I have an autoconf test for the function right now, but I realized it won't quite work cleanly because I need to toggle the function definition in margo.h to account for the struct hg_bulk_attr type which may not be defined.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/carns,3,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1089112326,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","(follow up after offline discussion); this PR does not have a version number bump, but I'll assume that there will be one when this PR lands.  I'll do a matching WIP PR on margo that checks the version number, and adjust it later if the version number is different than expected when it's time to add support.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,4,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1089356387,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Something worth mentioning also is that currently if we use the GPU registration, the eager bulk code path will be disabled automatically. Ideally maybe it would be nice to be able to do something like a cudaMemcpy or GDRCopy and then embed that into a small eager message but we don't have the code to do that right now. Libfabric does support it though so maybe we could force a ""local"" put or get into the eager buffer to trigger that code path in libfabric, I'll need to take a closer look and see if it's worth doing it as opposed to just let the RMA happen on the remote node.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,5,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1107703775,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","A interesting finding with the current implementation is that:

when I do a cuda memory -> remote host memory HG_bulk_transfer(), it works with any bulk data size ( as long as it <=1GB)
But when I do a remote host memory -> cuda memory HG_bulk_transfer(), it will report a error 12 (HG_PROTOCOL_ERROR) when the data size is >= 1MB with the following msg:
mlx5: c001-007.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00008813 08014857 000ac2d2
ERROR: (get_rpc): margo_bulk_transfer() failure (12)
mlx5: c001-007.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00008813 08014854 000aedd2
ERROR: (get_rpc): margo_bulk_transfer() failure (12)
mlx5: c001-007.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00008813 08014855 000aecd2
mlx5: c001-007.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00008813 08014856 000aefd2",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,6,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1109053640,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",@Zhang690683220 what do you pass as memory type? Could you please turn on debug info using HG_LOG_LEVEL=warning and HG_LOG_SUBSYS=na,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,7,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1110512261,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Hi @soumagne , after starting to use the HG_Bulk_create_attr(), I even got some error from sending a GPU data to remote CPU, which works for previous  HG_Bulk_create().
The debug settings are HG_LOG_LEVEL=warning, HG_LOG_SUBSYS=hg. Then I got this:
# [2030782.027030] mercury->addr: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/na/na_ofi.c:1613
 # na_ofi_addr_ht_lookup(): fi_av_insert() failed, rc: 0 (Success)
# [2030782.027042] mercury->addr: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/na/na_ofi.c:3424
 # na_ofi_cq_process_recv_unexpected_event(): na_ofi_addr_ht_lookup() failed
# [2030782.027045] mercury->msg: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/na/na_ofi.c:3357
 # na_ofi_cq_process_event(): Could not process unexpected recv event
# [2030782.027050] mercury->hg: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/mercury_core.c:3871
 # hg_core_progress_na(): Could not make progress on NA (NA_PROTOCOL_ERROR)
# [2030782.027053] mercury->hg: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/mercury_core.c:3810
 # hg_core_poll(): hg_core_progress_na() failed
# [2030782.027056] mercury->hg: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/mercury_core.c:3666
 # hg_core_progress(): Could not make non-blocking progress on context
# [2030782.027058] mercury->hg: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/mercury_core.c:5031
 # HG_Core_progress(): Could not make progress
# [2030782.027061] mercury->hg: [error] /work/07555/bz186/longhorn/mercury-2.1.0/src/mercury.c:2024
 # HG_Progress(): Could not make progress on context (HG_PROTOCOL_ERROR)
[critical] unexpected return code (12: HG_PROTOCOL_ERROR) from HG_Progress()
dspaces_server: src/margo-core.c:1489: __margo_hg_progress_fn: Assertion `0' failed.
[c001-008:03900] *** Process received signal ***
[c001-008:03900] Signal: Aborted (6)
[c001-008:03900] Signal code:  (-6)
[c001-008:03900] [ 0] [0x2000000504d8]
[c001-008:03900] [ 1] /lib64/libc.so.6(abort+0x2b4)[0x2000018c1f94]
[c001-008:03900] [ 2] /lib64/libc.so.6(+0x355d4)[0x2000018b55d4]
[c001-008:03900] [ 3] /lib64/libc.so.6(__assert_fail+0x64)[0x2000018b56c4]
[c001-008:03900] [ 4] /work/07555/bz186/longhorn/apps/gcc-7.3.0/mochi-margo-0.9.7/lib/libmargo.so.0(__margo_hg_progress_fn+0x790)[0x200001373864]
[c001-008:03900] [ 5] /work/07555/bz186/longhorn/apps/gcc-7.3.0/argobots-1.1/lib/libabt.so.1(+0x2b940)[0x20000151b940]
[c001-008:03900] [ 6] /work/07555/bz186/longhorn/apps/gcc-7.3.0/argobots-1.1/lib/libabt.so.1(+0x2c684)[0x20000151c684]
[c001-008:03900] *** End of error message ***",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,8,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1110520108,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Hmm looks like you're using an old version, can you please try to use the master branch and apply the patch on top of that?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,9,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1110521325,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",I'm actually not even sure why you would get an error in that code path since it's not related to GPU...,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,10,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1110553342,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Hi @soumagne , you are right. I mixed different versions of mercury. After fixing it, I still got the NA_PROTOCOL_ERROR from the HG_Bulk_create_attr():
# [2035637.957957] mercury->hg: [warning] /work/07555/bz186/longhorn/mercury/src/mercury_core.c:3245
 # hg_core_send_output_cb(): Received NA_CANCELED event on handle that was not canceled
# [2035637.958064] mercury->hg: [warning] /work/07555/bz186/longhorn/mercury/src/mercury_core.c:3245
 # hg_core_send_output_cb(): Received NA_CANCELED event on handle that was not canceled
# [2035637.958150] mercury->hg: [warning] /work/07555/bz186/longhorn/mercury/src/mercury_core.c:3245
 # hg_core_send_output_cb(): Received NA_CANCELED event on handle that was not canceled
mlx5: c001-008.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000001 00000000 00000000 00000000
00000000 00008813 08000be3 000ad1d2
# [2035637.957883] mercury->hg: [error] /work/07555/bz186/longhorn/mercury/src/mercury_bulk.c:2395
 # hg_bulk_transfer_cb(): NA callback returned error (NA_PROTOCOL_ERROR)
ERROR: (get_rpc): margo_bulk_transfer() failure (12)
mlx5: c001-008.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000002 00000000 00000000 00000000
00000000 00008813 08000be4 000ad4d2
# [2035637.957943] mercury->hg: [error] /work/07555/bz186/longhorn/mercury/src/mercury_bulk.c:2395
 # hg_bulk_transfer_cb(): NA callback returned error (NA_PROTOCOL_ERROR)
ERROR: (get_rpc): margo_bulk_transfer() failure (12)
mlx5: c001-008.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00008813 08000be2 000ad2d2
# [2035637.958029] mercury->hg: [error] /work/07555/bz186/longhorn/mercury/src/mercury_bulk.c:2395
 # hg_bulk_transfer_cb(): NA callback returned error (NA_PROTOCOL_ERROR)
ERROR: (get_rpc): margo_bulk_transfer() failure (12)
mlx5: c001-008.longhorn.tacc.utexas.edu: got completion with error:
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000003 00000000 00000000 00000000
00000000 00008813 08000be5 000acbd2
# [2035637.958127] mercury->hg: [error] /work/07555/bz186/longhorn/mercury/src/mercury_bulk.c:2395
 # hg_bulk_transfer_cb(): NA callback returned error (NA_PROTOCOL_ERROR)
ERROR: (get_rpc): margo_bulk_transfer() failure (12)

A finding that might be useful is: this only happens with iterative runs. If I set the total timestep in my code to 1, then everything goes fine. If it comes to >= 2, then this happens. I suspect it might have some bugs after the initial calls. It might narrow the location of the bug.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,11,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1111306972,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Hmm that seems weird, would you be able to point me to your program so that I can try to reproduce it ?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,12,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1111382612,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Yes, of course. The binaries are in dspaces_gpu_test. The issue happens in  They are built on top of dspaces. The dspaces is built on margo, so I added:
hg_return_t margo_bulk_create_attr(margo_instance_id    mid,
                                   hg_uint32_t          count,
                                   void**               buf_ptrs,
                                   const hg_size_t*     buf_sizes,
                                   hg_uint8_t           flags,
                                   struct hg_bulk_attr* attrs,
                                   hg_bulk_t*           handle)
{
    hg_return_t hret;
    double      tm1, tm2;
    int         diag_enabled = mid->diag_enabled;

    if (diag_enabled) tm1 = ABT_get_wtime();
    hret = HG_Bulk_create_attr(mid->hg_class, count, buf_ptrs, buf_sizes,
                               flags, attrs, handle);
    if (diag_enabled) {
        tm2 = ABT_get_wtime();
        __DIAG_UPDATE(mid->diag_bulk_create_elapsed, (tm2 - tm1));
    }

    return (hret);
}

to the margo-0.9.7.
The issue happens in include/cuda_get.cuh, which will call dspaces_cuda_get(), then goes to the HG_Bulk_create_attr().
To run the test, you have to enable test when building dspaces with cmake, then you can get the dspaces_server in the $install/bin/. Copy the dspaces_server to the cuda_put and cuda_get dir. Configure the server with:
echo ""## Config file for DataSpaces
ndim = 3
dims = 128, 128, 128
max_versions = 10
hash_version = 2
num_apps = 2
"" > dataspaces.conf

Then do a mpirun -n 1 ./dspaces_server verbs in one terminal.
Do mpirun -n 4 ./cuda_put --dims 3 --np 1 2 2 --sp 128 64 64 --ts 5 in a new terminal.
After the put, do export DSPACES_CUDA_GET_MODE=2, then mpirun -n 4 ./cuda_get --dims 3 --np 1 2 2 --sp 128 64 64 --ts 5, then you can find the errors at the server side.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,13,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112462266,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",Hmm I don't see anything wrong I think but I see that you're allocating stuff on cuda everytime you enter that routine. Could you try to set FI_MR_CUDA_CACHE_MONITOR_ENABLED=1? and re-run your program?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,14,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112615026,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","@Zhang690683220 I just pushed an additional patch to that PR, let me know when you have a chance to try it, that should hopefully fix it. I'm also trying to get set up on my end to be able to run things.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,15,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112721552,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Hi @soumagne, with the latest commit, my code works! So what is the cause?",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,16,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112723013,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types","Ah ok excellent, I had just missed an OFI setting that was also required for selecting the right domain and turning on device registration support.",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,17,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112726109,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",Nice! When can I expect this to be merged into the main branch?,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,18,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112730874,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",probably later today or tomorrow,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/soumagne,19,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112731397,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",thanks again for your help on testing that!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,559,2022-03-14T22:38:31Z,2022-04-29T18:32:28Z,2022-06-02T20:07:34Z,MERGED,True,374,115,20,https://github.com/soumagne,HG Bulk: add support for memory attributes w/ HG_Bulk_create_attr(),2,[],https://github.com/mercury-hpc/mercury/pull/559,https://github.com/Zhang690683220,20,https://github.com/mercury-hpc/mercury/pull/559#issuecomment-1112731398,"Support CUDA, ROCm, ZE
NA: add support for memory types on registration
NA OFI: update to support OFI memory types
NA UCX: update to support UCX memory types",Cool! Thank you very much!,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,560,2022-03-29T19:33:58Z,2022-03-30T22:04:09Z,2022-03-30T22:35:30Z,MERGED,True,237,222,16,https://github.com/soumagne,HG: add checksum levels and remove MERCURY_USE_CHECKSUMS build option,1,[],https://github.com/mercury-hpc/mercury/pull/560,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/560,"Checksum levels can be manually controlled at runtime (fix #429)
Update to mchecksum v2.0
Testing: fix warnings in tests","Checksum levels can be manually controlled at runtime (fix #429)
Update to mchecksum v2.0
Testing: fix warnings in tests",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,562,2022-04-12T22:00:02Z,2022-04-15T16:26:09Z,2022-04-15T16:37:25Z,MERGED,True,835,636,4,https://github.com/soumagne,NA OFI: rework handling of fi_info to open fabric/domain/endpoint,1,[],https://github.com/mercury-hpc/mercury/pull/562,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/562,"(fix #554)
Separate fabric from domain and keep single domain per NA class
Refactor handling of scalable vs standard endpoints
Improve debug info to print verbose FI info of selected provider","(fix #554)
Separate fabric from domain and keep single domain per NA class
Refactor handling of scalable vs standard endpoints
Improve debug info to print verbose FI info of selected provider",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,564,2022-04-15T20:24:34Z,2022-04-15T21:12:23Z,2022-04-18T17:46:26Z,MERGED,True,153,58,10,https://github.com/soumagne,HG: re-introduce MERCURY_USE_CHECKSUMS option,1,[],https://github.com/mercury-hpc/mercury/pull/564,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/564,Checksums are now disabled by default (HG_CHECKSUM_NONE level),Checksums are now disabled by default (HG_CHECKSUM_NONE level),True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,566,2022-04-18T16:44:31Z,2022-04-18T17:25:09Z,2022-04-18T17:25:10Z,CLOSED,False,1,1,1,https://github.com/soumagne,CI: update OFI to 1.14.1,1,[],https://github.com/mercury-hpc/mercury/pull/566,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/566,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,567,2022-04-20T23:52:55Z,2022-04-21T01:00:30Z,2022-04-21T18:40:24Z,MERGED,True,71,17,1,https://github.com/soumagne,NA OFI: add init info parsing for CXI provider,1,[],https://github.com/mercury-hpc/mercury/pull/567,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/567,"init info format is: NIC:PID (both or only one may be passed)
NIC is cxi[0-9], PID is [0-510]","init info format is: NIC:PID (both or only one may be passed)
NIC is cxi[0-9], PID is [0-510]",True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,568,2022-05-01T00:52:37Z,2022-05-01T21:39:41Z,2022-06-02T20:07:50Z,MERGED,True,1,1,1,https://github.com/soumagne,CI: update OFI to 1.15.0,1,[],https://github.com/mercury-hpc/mercury/pull/568,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/568,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,570,2022-05-02T19:55:24Z,2022-05-04T00:38:11Z,2022-05-04T00:38:11Z,MERGED,True,2075,2053,34,https://github.com/soumagne,NA type update and NA testing refactoring,4,[],https://github.com/mercury-hpc/mercury/pull/570,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/570,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,571,2022-05-04T02:28:03Z,2022-05-04T02:29:12Z,2022-06-02T20:04:50Z,MERGED,True,143,54,3,https://github.com/soumagne,Doc update,2,[],https://github.com/mercury-hpc/mercury/pull/571,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/571,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,572,2022-05-04T02:32:46Z,2022-05-04T02:42:17Z,2022-06-02T20:05:27Z,MERGED,True,8,1,2,https://github.com/soumagne,v2.2.0rc1,2,[],https://github.com/mercury-hpc/mercury/pull/572,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/572,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,573,2022-05-10T20:22:24Z,2022-05-10T20:29:23Z,2022-06-02T20:06:50Z,MERGED,True,1,1,1,https://github.com/soumagne,NA UCX: fix potential double free of worker_addr,1,[],https://github.com/mercury-hpc/mercury/pull/573,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/573,Co-authored-by: Joseph Moore joseph.moore@intel.com,Co-authored-by: Joseph Moore joseph.moore@intel.com,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,574,2022-05-23T21:02:24Z,2022-05-25T16:40:03Z,2022-06-02T20:08:11Z,MERGED,True,10,8,1,https://github.com/soumagne,NA OFI: fix potential race on fabric close and remove atomic variable,1,[],https://github.com/mercury-hpc/mercury/pull/574,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/574,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,575,2022-05-25T22:01:50Z,2022-05-25T22:16:04Z,2022-06-02T20:05:04Z,MERGED,True,2,1,2,https://github.com/soumagne,CMake: correctly set INSTALL_RPATH for lib target,1,[],https://github.com/mercury-hpc/mercury/pull/575,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/575,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,577,2022-06-02T17:49:52Z,2022-06-02T19:48:51Z,2022-06-02T20:04:13Z,MERGED,True,128,82,8,https://github.com/soumagne,NA UCX: minor fixes,4,[],https://github.com/mercury-hpc/mercury/pull/577,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/577,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,578,2022-06-02T22:39:26Z,2022-06-03T17:01:35Z,2022-06-03T20:46:24Z,MERGED,True,54,78,3,https://github.com/soumagne,NA: clean up and simplify NA_Initialize_opt(),1,[],https://github.com/mercury-hpc/mercury/pull/578,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/578,,,True,{}
mercury-hpc/mercury,https://github.com/mercury-hpc/mercury,579,2022-06-03T22:44:23Z,2022-06-03T23:37:43Z,2022-06-03T23:37:44Z,MERGED,True,84,5,1,https://github.com/soumagne,NA OFI: add support for FI_ADDR_STR and shm provider,1,[],https://github.com/mercury-hpc/mercury/pull/579,https://github.com/soumagne,1,https://github.com/mercury-hpc/mercury/pull/579,,,True,{}
