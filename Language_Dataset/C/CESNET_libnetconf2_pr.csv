CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,4,2016-07-21T07:15:19Z,2016-07-21T15:39:53Z,2016-07-21T15:39:53Z,MERGED,True,24,5,2,https://github.com/fanchanghu,add global RPC callback feature,1,[],https://github.com/CESNET/libnetconf2/pull/4,https://github.com/fanchanghu,1,https://github.com/CESNET/libnetconf2/pull/4,"Hi,
I discussed this feature in Issue #3, and I have made a little change about it: first try the private field in the corresponding RPC schema node, if it is null, use the global RPC callback, and if it is also null, return an error.","Hi,
I discussed this feature in Issue #3, and I have made a little change about it: first try the private field in the corresponding RPC schema node, if it is null, use the global RPC callback, and if it is also null, return an error.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,4,2016-07-21T07:15:19Z,2016-07-21T15:39:53Z,2016-07-21T15:39:53Z,MERGED,True,24,5,2,https://github.com/fanchanghu,add global RPC callback feature,1,[],https://github.com/CESNET/libnetconf2/pull/4,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/4#issuecomment-234293420,"Hi,
I discussed this feature in Issue #3, and I have made a little change about it: first try the private field in the corresponding RPC schema node, if it is null, use the global RPC callback, and if it is also null, return an error.","That ""little change"" is exactly what I wanted to propose to you ;)",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,6,2016-07-26T11:08:14Z,2016-07-26T13:08:58Z,2016-07-26T13:08:58Z,CLOSED,False,3,117,2,https://github.com/jktjkt,Improvements to CMake when LibSSH is not found,2,[],https://github.com/CESNET/libnetconf2/pull/6,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/6,"...by switching from a handcrafted module to pkg-config.
With the original cmake 2.8.11 on CentOS 7.2.1511, a missing LibSSH was
not reported through a usual ""required package XYZ not found"" message,
but it generated a bit unintuitive error:
  CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
  Please set them or make sure they are set and tested correctly in the CMake files:
  LIBSSH_INCLUDE_DIR
     used as include directory in directory /home/centos/libnetconf2
 (...)
     used as include directory in directory /home/centos/libnetconf2/tests

I suspect that this happens because the custom FindLibSSH.cmake doesn't
set LIBSSH_FOUND to TRUE on success (on my system).
According to rpmfind.net [1], the required pkg-config files have been
shipping since at least the release which is available in EL6's EPEL.
[1] https://www.rpmfind.net/linux/rpm2html/search.php?query=pkgconfig(libssh)","...by switching from a handcrafted module to pkg-config.
With the original cmake 2.8.11 on CentOS 7.2.1511, a missing LibSSH was
not reported through a usual ""required package XYZ not found"" message,
but it generated a bit unintuitive error:
  CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
  Please set them or make sure they are set and tested correctly in the CMake files:
  LIBSSH_INCLUDE_DIR
     used as include directory in directory /home/centos/libnetconf2
 (...)
     used as include directory in directory /home/centos/libnetconf2/tests

I suspect that this happens because the custom FindLibSSH.cmake doesn't
set LIBSSH_FOUND to TRUE on success (on my system).
According to rpmfind.net [1], the required pkg-config files have been
shipping since at least the release which is available in EL6's EPEL.
[1] https://www.rpmfind.net/linux/rpm2html/search.php?query=pkgconfig(libssh)",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,6,2016-07-26T11:08:14Z,2016-07-26T13:08:58Z,2016-07-26T13:08:58Z,CLOSED,False,3,117,2,https://github.com/jktjkt,Improvements to CMake when LibSSH is not found,2,[],https://github.com/CESNET/libnetconf2/pull/6,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/6#issuecomment-235244467,"...by switching from a handcrafted module to pkg-config.
With the original cmake 2.8.11 on CentOS 7.2.1511, a missing LibSSH was
not reported through a usual ""required package XYZ not found"" message,
but it generated a bit unintuitive error:
  CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
  Please set them or make sure they are set and tested correctly in the CMake files:
  LIBSSH_INCLUDE_DIR
     used as include directory in directory /home/centos/libnetconf2
 (...)
     used as include directory in directory /home/centos/libnetconf2/tests

I suspect that this happens because the custom FindLibSSH.cmake doesn't
set LIBSSH_FOUND to TRUE on success (on my system).
According to rpmfind.net [1], the required pkg-config files have been
shipping since at least the release which is available in EL6's EPEL.
[1] https://www.rpmfind.net/linux/rpm2html/search.php?query=pkgconfig(libssh)","Hi,
if you have the correct libssh package installed then the FindLibSSH.cmake module should definitely find it. The error may not be perfect, but it should be obvious what the problem is. The CMake module is written by the libssh team and I don't really see a reason why not to use it.
Regarding skipping -l in the additional linked libraries, are you saying it did not work for you the way it is?
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,6,2016-07-26T11:08:14Z,2016-07-26T13:08:58Z,2016-07-26T13:08:58Z,CLOSED,False,3,117,2,https://github.com/jktjkt,Improvements to CMake when LibSSH is not found,2,[],https://github.com/CESNET/libnetconf2/pull/6,https://github.com/jktjkt,3,https://github.com/CESNET/libnetconf2/pull/6#issuecomment-235259200,"...by switching from a handcrafted module to pkg-config.
With the original cmake 2.8.11 on CentOS 7.2.1511, a missing LibSSH was
not reported through a usual ""required package XYZ not found"" message,
but it generated a bit unintuitive error:
  CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
  Please set them or make sure they are set and tested correctly in the CMake files:
  LIBSSH_INCLUDE_DIR
     used as include directory in directory /home/centos/libnetconf2
 (...)
     used as include directory in directory /home/centos/libnetconf2/tests

I suspect that this happens because the custom FindLibSSH.cmake doesn't
set LIBSSH_FOUND to TRUE on success (on my system).
According to rpmfind.net [1], the required pkg-config files have been
shipping since at least the release which is available in EL6's EPEL.
[1] https://www.rpmfind.net/linux/rpm2html/search.php?query=pkgconfig(libssh)","if you have the correct libssh package installed then the FindLibSSH.cmake module should definitely find it

Correct; there's no problem if that library is already installed.

The CMake module is written by the libssh team and I don't really see a reason why not to use it.

It doesn't conform to CMake's conventions. A FindFoo.cmake should always set Foo_FOUND to TRUE if that library is available. This bundled file does not set that variable on success -- it only sets it upon failure, which is why the find_package(... REQUIRED) doesn't error out early, and why the cmake process only gets interrupted by trying to use an undefined variable. As you said, a file coming form libssh means that this is a libssh bug. As this case demonstrates, a pkg-config approach would eliminate this error. The decision is yours for sure.

Regarding skipping -l in the additional linked libraries, are you saying it did not work for you the way it is?

Nope, it works already. I changed it because I was investigating another issue, it's just a followup cleanup that I split from my original commit (unpushed) for clarity. Feel free to ignore that one if you don't like it -- I was removing that hardcoded and redundant -lssh_threads so I cleaned up the rest as well.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,6,2016-07-26T11:08:14Z,2016-07-26T13:08:58Z,2016-07-26T13:08:58Z,CLOSED,False,3,117,2,https://github.com/jktjkt,Improvements to CMake when LibSSH is not found,2,[],https://github.com/CESNET/libnetconf2/pull/6,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/6#issuecomment-235261831,"...by switching from a handcrafted module to pkg-config.
With the original cmake 2.8.11 on CentOS 7.2.1511, a missing LibSSH was
not reported through a usual ""required package XYZ not found"" message,
but it generated a bit unintuitive error:
  CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
  Please set them or make sure they are set and tested correctly in the CMake files:
  LIBSSH_INCLUDE_DIR
     used as include directory in directory /home/centos/libnetconf2
 (...)
     used as include directory in directory /home/centos/libnetconf2/tests

I suspect that this happens because the custom FindLibSSH.cmake doesn't
set LIBSSH_FOUND to TRUE on success (on my system).
According to rpmfind.net [1], the required pkg-config files have been
shipping since at least the release which is available in EL6's EPEL.
[1] https://www.rpmfind.net/linux/rpm2html/search.php?query=pkgconfig(libssh)","Hi,
it seems to me all this just polishes the build script, but does not fix any actual errors. So thanks for the effort, I will consider all this in the future when I have time for such minor fixes of the whole project, but I will not merge it now.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,8,2016-08-02T20:07:45Z,2016-08-03T06:34:15Z,2016-08-03T06:34:42Z,MERGED,True,1,1,1,https://github.com/cloojure,Update README.md,1,[],https://github.com/CESNET/libnetconf2/pull/8,https://github.com/cloojure,1,https://github.com/CESNET/libnetconf2/pull/8,small typo,small typo,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,8,2016-08-02T20:07:45Z,2016-08-03T06:34:15Z,2016-08-03T06:34:42Z,MERGED,True,1,1,1,https://github.com/cloojure,Update README.md,1,[],https://github.com/CESNET/libnetconf2/pull/8,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/8#issuecomment-237154453,small typo,Thanks!,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,13,2016-11-03T13:34:59Z,2017-02-24T08:23:48Z,2017-02-24T08:23:48Z,CLOSED,False,2,2,2,https://github.com/jktjkt,"Build with LibSSH 0.6.3, too",1,[],https://github.com/CESNET/libnetconf2/pull/13,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/13,"...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.","...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,13,2016-11-03T13:34:59Z,2017-02-24T08:23:48Z,2017-02-24T08:23:48Z,CLOSED,False,2,2,2,https://github.com/jktjkt,"Build with LibSSH 0.6.3, too",1,[],https://github.com/CESNET/libnetconf2/pull/13,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/13#issuecomment-258386017,"...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.","I'm afraid that there really was some bug that appeared already in libnetconf. However, this is question for @michalvasko (he's currently not avavilable, should be back online in 10 days), so, please, let's wait for his answer.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,13,2016-11-03T13:34:59Z,2017-02-24T08:23:48Z,2017-02-24T08:23:48Z,CLOSED,False,2,2,2,https://github.com/jktjkt,"Build with LibSSH 0.6.3, too",1,[],https://github.com/CESNET/libnetconf2/pull/13,https://github.com/jktjkt,3,https://github.com/CESNET/libnetconf2/pull/13#issuecomment-258388074,"...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.","Thanks, I've already noticed a difference about handling of SSH_BIND_OPTIONS_HOSTKEY (see the updated commit 7bfbea0).
Anyway, this can wait, sure.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,13,2016-11-03T13:34:59Z,2017-02-24T08:23:48Z,2017-02-24T08:23:48Z,CLOSED,False,2,2,2,https://github.com/jktjkt,"Build with LibSSH 0.6.3, too",1,[],https://github.com/CESNET/libnetconf2/pull/13,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/13#issuecomment-260305244,"...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.","Hi,
libssh 0.6.3 does not support ECDSA keys, for one, if I remember correctly. However, the reason we require 0.6.4 or higher is that in 0.6.3 was a communication-breaking bug when using own sockets, no message could be received I think and the reading hanged forever.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,13,2016-11-03T13:34:59Z,2017-02-24T08:23:48Z,2017-02-24T08:23:48Z,CLOSED,False,2,2,2,https://github.com/jktjkt,"Build with LibSSH 0.6.3, too",1,[],https://github.com/CESNET/libnetconf2/pull/13,None,5,https://github.com/CESNET/libnetconf2/pull/13#issuecomment-282177434,"...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.","Hi @michalvasko , I'm running across some issue when using libssh 0.6.3 with libnetconf2/libnetconf where the connection is hanging. Just saw your comment. Is this only issue only when using own sockets or are there problems using libssh 0.6.3?
Thanks a lot in advance for your time!",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,13,2016-11-03T13:34:59Z,2017-02-24T08:23:48Z,2017-02-24T08:23:48Z,CLOSED,False,2,2,2,https://github.com/jktjkt,"Build with LibSSH 0.6.3, too",1,[],https://github.com/CESNET/libnetconf2/pull/13,https://github.com/michalvasko,6,https://github.com/CESNET/libnetconf2/pull/13#issuecomment-282232449,"...because that's what is available in Debian Jessie.
-> Is this OK from your point of view?
Maybe there are some important bugfixes/features in that release which I'm not aware of. Changelog suggests new support for ECs, etc.","Hi,
in libnetconf2 we always use own sockets, so that is why I encountered it. Whether there are any other problems I don't know.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,14,2016-11-04T17:30:08Z,2016-11-15T10:07:47Z,2016-11-15T13:22:45Z,MERGED,True,12,22,2,https://github.com/jktjkt,cmake: Switch to GNUInstallDirs,1,[],https://github.com/CESNET/libnetconf2/pull/14,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/14,"There's a good existing CMake module which makes this configuration
less special and more boring; it also makes Debian crossbuilds much
easier.
Warning: on non-Debian amd64 systems, this will change the installation
directory of libraries, they will be put into
${CMAKE_INSTALL_PREFIX}/lib64/ now. The old versions of libraries which
might still be in lib/ will be left in place, which means that there's
some potential for breakage on developers' systems.
The same applies to PKG_CONFIG_PATH which is changed from lib/ to lib64/
on these systems.
Still, I think that following cmake conventions is a good reason to
follow suit here.
For some reason, the project() stanza has to go before this include,
otherwise the include directories that are picked up are not changed to
lib64 on my system.","There's a good existing CMake module which makes this configuration
less special and more boring; it also makes Debian crossbuilds much
easier.
Warning: on non-Debian amd64 systems, this will change the installation
directory of libraries, they will be put into
${CMAKE_INSTALL_PREFIX}/lib64/ now. The old versions of libraries which
might still be in lib/ will be left in place, which means that there's
some potential for breakage on developers' systems.
The same applies to PKG_CONFIG_PATH which is changed from lib/ to lib64/
on these systems.
Still, I think that following cmake conventions is a good reason to
follow suit here.
For some reason, the project() stanza has to go before this include,
otherwise the include directories that are picked up are not changed to
lib64 on my system.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,16,2016-11-09T23:46:55Z,2016-11-15T09:58:11Z,2016-11-15T09:58:12Z,MERGED,True,1,1,1,https://github.com/mohitarora24,Update io.c,1,[],https://github.com/CESNET/libnetconf2/pull/16,https://github.com/mohitarora24,1,https://github.com/CESNET/libnetconf2/pull/16,Fixed the length else got a malformed xml on client.,Fixed the length else got a malformed xml on client.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,19,2016-11-21T08:48:07Z,2016-11-21T09:38:32Z,2016-11-21T09:46:24Z,MERGED,True,12,0,1,https://github.com/jktjkt,Fix memleak in OpenSSL uninitialization,1,[],https://github.com/CESNET/libnetconf2/pull/19,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/19,"On my version of OpenSSL (openssl-1.0.2j on Gentoo Linux), the original
version of this code resulted in a small memleak reoprted by ASAN:
  Direct leak of 24 byte(s) in 1 object(s) allocated from:
    #0 0x4d5460 in malloc /var/tmp/portage/sys-devel/llvm-3.9.0/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64
    #1 0x7f8fff9cb7fc in CRYPTO_malloc /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/crypto/mem.c:346
    #2 0x7f8fffcd372b in load_builtin_compressions /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/ssl/ssl_ciph.c:487
    #3 0x7f8fffcd5b5a in SSL_COMP_get_compression_methods /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/ssl/ssl_ciph.c:1962
    #4 0x7f8fffcdc6b1 in SSL_library_init /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/ssl/ssl_algs.c:150
    #5 0x7f90005ea466 in nc_ssh_tls_init /home/jkt/work/prog/libnetconf2/build/../src/session.c:1165:5
    #6 0x7f90005ea448 in nc_init /home/jkt/work/prog/libnetconf2/build/../src/session.c:1209:5
    #7 0x7f90005fe7c5 in nc_server_init /home/jkt/work/prog/libnetconf2/build/../src/session_server.c:430:5
    #8 0x50ffd8 in main /home/jkt/work/prog/libnetconf2/build/../tests/test_fd_comm.c:335:5
    #9 0x7f8ffe93e733 in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #10 0x419e18 in _start (/home/jkt/work/prog/libnetconf2/build/tests/test_fd_comm+0x419e18)

Upstream OpenSSL's issue tracker suggests [1] to use
SSL_COMP_add_compression_method [2]. That particular overload was only
added in 1.0.2, and since 1.1.0, it's deprecated and documented [3] to
be a no-op. RHEL6 comes with 1.0.1.
TL;DR: it's an API-compatibility mess, but it fixes a leak. It shouldn't
break the build.
[1] https://rt.openssl.org/Ticket/Display.html?id=2561&user=guest&pass=guest
[2] https://www.openssl.org/docs/man1.0.2/ssl/SSL_COMP_add_compression_method.html
[3] https://www.openssl.org/docs/man1.1.0/ssl/SSL_COMP_add_compression_method.html","On my version of OpenSSL (openssl-1.0.2j on Gentoo Linux), the original
version of this code resulted in a small memleak reoprted by ASAN:
  Direct leak of 24 byte(s) in 1 object(s) allocated from:
    #0 0x4d5460 in malloc /var/tmp/portage/sys-devel/llvm-3.9.0/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64
    #1 0x7f8fff9cb7fc in CRYPTO_malloc /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/crypto/mem.c:346
    #2 0x7f8fffcd372b in load_builtin_compressions /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/ssl/ssl_ciph.c:487
    #3 0x7f8fffcd5b5a in SSL_COMP_get_compression_methods /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/ssl/ssl_ciph.c:1962
    #4 0x7f8fffcdc6b1 in SSL_library_init /var/tmp/portage/dev-libs/openssl-1.0.2j/work/openssl-1.0.2j-abi_x86_64.amd64/ssl/ssl_algs.c:150
    #5 0x7f90005ea466 in nc_ssh_tls_init /home/jkt/work/prog/libnetconf2/build/../src/session.c:1165:5
    #6 0x7f90005ea448 in nc_init /home/jkt/work/prog/libnetconf2/build/../src/session.c:1209:5
    #7 0x7f90005fe7c5 in nc_server_init /home/jkt/work/prog/libnetconf2/build/../src/session_server.c:430:5
    #8 0x50ffd8 in main /home/jkt/work/prog/libnetconf2/build/../tests/test_fd_comm.c:335:5
    #9 0x7f8ffe93e733 in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #10 0x419e18 in _start (/home/jkt/work/prog/libnetconf2/build/tests/test_fd_comm+0x419e18)

Upstream OpenSSL's issue tracker suggests [1] to use
SSL_COMP_add_compression_method [2]. That particular overload was only
added in 1.0.2, and since 1.1.0, it's deprecated and documented [3] to
be a no-op. RHEL6 comes with 1.0.1.
TL;DR: it's an API-compatibility mess, but it fixes a leak. It shouldn't
break the build.
[1] https://rt.openssl.org/Ticket/Display.html?id=2561&user=guest&pass=guest
[2] https://www.openssl.org/docs/man1.0.2/ssl/SSL_COMP_add_compression_method.html
[3] https://www.openssl.org/docs/man1.1.0/ssl/SSL_COMP_add_compression_method.html",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,20,2016-12-27T08:53:00Z,2017-01-02T12:49:57Z,2017-01-02T12:49:57Z,MERGED,True,1,1,1,https://github.com/WinterZheng,fix the error in notification messages,1,[],https://github.com/CESNET/libnetconf2/pull/20,https://github.com/WinterZheng,1,https://github.com/CESNET/libnetconf2/pull/20,"Fix the error in notification message write.
Now the nc_server_notif_send API works well based on my test. Looking forward to merging the notification branch to master. Thanks.","Fix the error in notification message write.
Now the nc_server_notif_send API works well based on my test. Looking forward to merging the notification branch to master. Thanks.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,22,2017-03-13T08:38:25Z,2017-03-13T09:27:19Z,2017-03-13T09:27:19Z,MERGED,True,1,1,1,https://github.com/fanchanghu,session BUGFIX capabilitys do not include ns if it is prefix of another,1,[],https://github.com/CESNET/libnetconf2/pull/22,https://github.com/fanchanghu,1,https://github.com/CESNET/libnetconf2/pull/22,"Hi,
I found the namespace  is not sent to client in hello message, if it is prefix of another one. Such as ""uri:ab"" will not be added if ""uri:abc"" has already be added.","Hi,
I found the namespace  is not sent to client in hello message, if it is prefix of another one. Such as ""uri:ab"" will not be added if ""uri:abc"" has already be added.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,22,2017-03-13T08:38:25Z,2017-03-13T09:27:19Z,2017-03-13T09:27:19Z,MERGED,True,1,1,1,https://github.com/fanchanghu,session BUGFIX capabilitys do not include ns if it is prefix of another,1,[],https://github.com/CESNET/libnetconf2/pull/22,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/22#issuecomment-286054831,"Hi,
I found the namespace  is not sent to client in hello message, if it is prefix of another one. Such as ""uri:ab"" will not be added if ""uri:abc"" has already be added.","Hi,
thanks, seems fine.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,33,2017-07-12T19:57:34Z,2018-01-31T11:51:09Z,2018-01-31T11:51:09Z,MERGED,True,322,2,12,https://github.com/PavolVican,FEATURE add building package,1,[],https://github.com/CESNET/libnetconf2/pull/33,https://github.com/PavolVican,1,https://github.com/CESNET/libnetconf2/pull/33,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,33,2017-07-12T19:57:34Z,2018-01-31T11:51:09Z,2018-01-31T11:51:09Z,MERGED,True,322,2,12,https://github.com/PavolVican,FEATURE add building package,1,[],https://github.com/CESNET/libnetconf2/pull/33,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/33#issuecomment-314898669,,"Codecov Report

Merging #33 into devel will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel      #33      +/-   ##
==========================================
- Coverage   28.38%   28.37%   -0.02%     
==========================================
  Files          19       19              
  Lines        8539     8539              
  Branches     1763     1763              
==========================================
- Hits         2424     2423       -1     
- Misses       5358     5359       +1     
  Partials      757      757



Impacted Files
Coverage Δ





src/session_server.c
21.25% <0%> (-0.07%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 04e060e...384786e. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,36,2017-08-01T12:17:21Z,2017-08-03T13:01:14Z,2017-08-03T13:01:14Z,MERGED,True,2,1,1,https://github.com/fanchanghu,session BUGFIX block forever,1,[],https://github.com/CESNET/libnetconf2/pull/36,https://github.com/fanchanghu,1,https://github.com/CESNET/libnetconf2/pull/36,"Hi,
When a client quits before sending hello message, the server will block forever if its hello timeout is not set. This request try to fix it by setting the default hello timeout to 60s in that situation.","Hi,
When a client quits before sending hello message, the server will block forever if its hello timeout is not set. This request try to fix it by setting the default hello timeout to 60s in that situation.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,36,2017-08-01T12:17:21Z,2017-08-03T13:01:14Z,2017-08-03T13:01:14Z,MERGED,True,2,1,1,https://github.com/fanchanghu,session BUGFIX block forever,1,[],https://github.com/CESNET/libnetconf2/pull/36,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/36#issuecomment-319354902,"Hi,
When a client quits before sending hello message, the server will block forever if its hello timeout is not set. This request try to fix it by setting the default hello timeout to 60s in that situation.","Codecov Report

Merging #36 into devel will decrease coverage by 0.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##            devel      #36      +/-   ##
==========================================
- Coverage   28.45%   28.44%   -0.02%     
==========================================
  Files          19       19              
  Lines        8544     8544              
  Branches     1765     1765              
==========================================
- Hits         2431     2430       -1     
  Misses       5358     5358              
- Partials      755      756       +1



Impacted Files
Coverage Δ





src/session.c
37.61% <100%> (ø)
⬆️


src/session_server_tls.c
22.89% <0%> (-0.12%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 43d2ee5...75888b6. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,36,2017-08-01T12:17:21Z,2017-08-03T13:01:14Z,2017-08-03T13:01:14Z,MERGED,True,2,1,1,https://github.com/fanchanghu,session BUGFIX block forever,1,[],https://github.com/CESNET/libnetconf2/pull/36,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/36#issuecomment-319962020,"Hi,
When a client quits before sending hello message, the server will block forever if its hello timeout is not set. This request try to fix it by setting the default hello timeout to 60s in that situation.","Hi,
seems reasonable and you nicely kept style with the rest of the code, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/mislavn,1,https://github.com/CESNET/libnetconf2/pull/37,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).","Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/37#issuecomment-320020946,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).","Codecov Report

Merging #37 into devel will increase coverage by <.01%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##            devel      #37      +/-   ##
==========================================
+ Coverage   28.33%   28.33%   +<.01%     
==========================================
  Files          19       19              
  Lines        8577     8578       +1     
  Branches     1772     1772              
==========================================
+ Hits         2430     2431       +1     
- Misses       5390     5391       +1     
+ Partials      757      756       -1



Impacted Files
Coverage Δ





src/session_server_ssh.c
25.6% <0%> (-0.04%)
⬇️


src/session_server_tls.c
23% <0%> (+0.11%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update cb8d929...ce9a7ef. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/37#issuecomment-320649668,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).","Hi,
that seems fine except I would have initially used crypt if it was correct. With your patch if 2 users get to authenticate at the exact same time and crypt gets called simultaneously, it will likely crash. It would be better to think about some other solution that will not break thread-safety.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/mislavn,4,https://github.com/CESNET/libnetconf2/pull/37#issuecomment-320689350,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).","Hi,
@michalvasko is it enough if I add locks to the function auth_password_compare_pwd() just for the case when crypt_r is not defined?
Regards,
Mislav",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/37#issuecomment-320863631,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).","Hi Mislav,
yeah, that should work fine for cases where crypt_r cannot be used.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/michalvasko,6,https://github.com/CESNET/libnetconf2/pull/37#issuecomment-321190089,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).","Hi,
seems ok except I don't see any initialization of the lock, so just initialize it statically and it should be ready to be merged.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,37,2017-08-03T15:54:30Z,2017-08-09T11:12:56Z,2017-08-09T11:12:56Z,MERGED,True,12,0,1,https://github.com/mislavn,server session BUGFIX where crypt_r is not available,2,[],https://github.com/CESNET/libnetconf2/pull/37,https://github.com/mislavn,7,https://github.com/CESNET/libnetconf2/pull/37#issuecomment-321221219,"Hi,
I encountered a portability issue with uclibc in OpenWrt. This patched fixed my problem and it has been tested on an older OpenWrt build (uclibc), on the latest Lede build (musl) and in docker (ubuntu 16.04).",Done.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,38,2017-08-09T06:07:59Z,2017-08-09T08:35:47Z,2017-08-09T08:35:47Z,MERGED,True,48,27,3,https://github.com/fanchanghu,server BUGFIX nc_ps_poll deadlock due to multi-thread conflict,1,[],https://github.com/CESNET/libnetconf2/pull/38,https://github.com/fanchanghu,1,https://github.com/CESNET/libnetconf2/pull/38,"Hi,
nc_ps_poll will enter a deadlock branch in the line 1412, this issue can be reproduced in following steps:
1, current session is in the last position of ps->sessions;
2, state of current session is been set to NC_PS_STATE_BUSY;
3, current thread unlocks the ps lock in the line 1469;
4, another session is removed from  ps->sessions by another thread, and current session is copied to the removed position;
5, current thread set state of current session (in the old position, which is invalid now) to NC_PS_STATE_NONE;
6, the copied session state is always NC_PS_STATE_BUSY;
7, threads trap into deadlock when they handle this copied session.
By changing the sessions in the struct nc_pollsession to a pointer array, we can just move a pointer but not a struct when removing a session, then this issue is fixed.","Hi,
nc_ps_poll will enter a deadlock branch in the line 1412, this issue can be reproduced in following steps:
1, current session is in the last position of ps->sessions;
2, state of current session is been set to NC_PS_STATE_BUSY;
3, current thread unlocks the ps lock in the line 1469;
4, another session is removed from  ps->sessions by another thread, and current session is copied to the removed position;
5, current thread set state of current session (in the old position, which is invalid now) to NC_PS_STATE_NONE;
6, the copied session state is always NC_PS_STATE_BUSY;
7, threads trap into deadlock when they handle this copied session.
By changing the sessions in the struct nc_pollsession to a pointer array, we can just move a pointer but not a struct when removing a session, then this issue is fixed.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,38,2017-08-09T06:07:59Z,2017-08-09T08:35:47Z,2017-08-09T08:35:47Z,MERGED,True,48,27,3,https://github.com/fanchanghu,server BUGFIX nc_ps_poll deadlock due to multi-thread conflict,1,[],https://github.com/CESNET/libnetconf2/pull/38,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/38#issuecomment-321162798,"Hi,
nc_ps_poll will enter a deadlock branch in the line 1412, this issue can be reproduced in following steps:
1, current session is in the last position of ps->sessions;
2, state of current session is been set to NC_PS_STATE_BUSY;
3, current thread unlocks the ps lock in the line 1469;
4, another session is removed from  ps->sessions by another thread, and current session is copied to the removed position;
5, current thread set state of current session (in the old position, which is invalid now) to NC_PS_STATE_NONE;
6, the copied session state is always NC_PS_STATE_BUSY;
7, threads trap into deadlock when they handle this copied session.
By changing the sessions in the struct nc_pollsession to a pointer array, we can just move a pointer but not a struct when removing a session, then this issue is fixed.","Codecov Report

Merging #38 into devel will increase coverage by 0.02%.
The diff coverage is 38.23%.


@@            Coverage Diff             @@
##            devel      #38      +/-   ##
==========================================
+ Coverage   28.32%   28.34%   +0.02%     
==========================================
  Files          19       19              
  Lines        8562     8573      +11     
  Branches     1769     1771       +2     
==========================================
+ Hits         2425     2430       +5     
- Misses       5381     5385       +4     
- Partials      756      758       +2



Impacted Files
Coverage Δ





src/session_server_ssh.c
25.64% <0%> (-0.13%)
⬇️


src/session_server.c
21.31% <39.39%> (+0.23%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a77289e...3d4e721. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,38,2017-08-09T06:07:59Z,2017-08-09T08:35:47Z,2017-08-09T08:35:47Z,MERGED,True,48,27,3,https://github.com/fanchanghu,server BUGFIX nc_ps_poll deadlock due to multi-thread conflict,1,[],https://github.com/CESNET/libnetconf2/pull/38,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/38#issuecomment-321191152,"Hi,
nc_ps_poll will enter a deadlock branch in the line 1412, this issue can be reproduced in following steps:
1, current session is in the last position of ps->sessions;
2, state of current session is been set to NC_PS_STATE_BUSY;
3, current thread unlocks the ps lock in the line 1469;
4, another session is removed from  ps->sessions by another thread, and current session is copied to the removed position;
5, current thread set state of current session (in the old position, which is invalid now) to NC_PS_STATE_NONE;
6, the copied session state is always NC_PS_STATE_BUSY;
7, threads trap into deadlock when they handle this copied session.
By changing the sessions in the struct nc_pollsession to a pointer array, we can just move a pointer but not a struct when removing a session, then this issue is fixed.","Hi,
nice catch and well-formatted patch, thanks!
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,40,2017-08-19T15:03:23Z,2017-08-21T07:18:36Z,2017-08-21T08:14:41Z,MERGED,True,2,4,3,https://github.com/TrinityCoder,MAINTENANCE removed redundant _POSIX_SOURCE flags,1,[],https://github.com/CESNET/libnetconf2/pull/40,https://github.com/TrinityCoder,1,https://github.com/CESNET/libnetconf2/pull/40,"Hello,
when going through the source code, I found a typo in the src/io.c file. It caught my attention
because it seems that the library can be compiled OK even though the _POSIX_SOURCE is actually not defined, because the letter R is missing (_POSIX_SOUCE) from the statement.
After opening the GNU C library ""feature test macros"" page I found this description of the _GNU_SOURCE macro:

If you define this macro, everything is included: ISO C89, ISO C99, POSIX.1, POSIX.2, BSD, SVID, X/Open, LFS, and GNU extensions. In the cases where POSIX.1 conflicts with BSD, the POSIX definitions take precedence.

Moreover, at the beginning of the page, there is the definition of the _POSIX_SOURCE macro:

If you define this macro, then the functionality from the POSIX.1 standard (IEEE Standard 1003.1) is available, as well as all of the ISO C facilities.

And finally, the very last sentence on the page states that:

Likewise, if you define _GNU_SOURCE, then defining either _POSIX_SOURCE or _POSIX_C_SOURCE as well has no effect.

It is clear to me that it has no effect to #define _POSIX_SOURCE right the next line after #define _GNU_SOURCE, because according to the docs it has no effect, and therefore I propose to remove it alltogether.
UPDATE: I have also noticed the same situation inside the src/session_server_ssh.c source file. Therefore, I have updated this pull request to keep it consistent.
I have also noticed the same typo (#define _POSIX_SOURCE -> #define _POSIX_SOUCE) inside src/session_server.c. However, fixing the typo actually breaks the compilation, because some pthread_* symbols are suddenly missing...
Because at the top of src/session_server_ssh.c is #define _GNU_SOURCE, I believe that here, in src/session_server.c file should be #define _GNU_SOURCE as well.","Hello,
when going through the source code, I found a typo in the src/io.c file. It caught my attention
because it seems that the library can be compiled OK even though the _POSIX_SOURCE is actually not defined, because the letter R is missing (_POSIX_SOUCE) from the statement.
After opening the GNU C library ""feature test macros"" page I found this description of the _GNU_SOURCE macro:

If you define this macro, everything is included: ISO C89, ISO C99, POSIX.1, POSIX.2, BSD, SVID, X/Open, LFS, and GNU extensions. In the cases where POSIX.1 conflicts with BSD, the POSIX definitions take precedence.

Moreover, at the beginning of the page, there is the definition of the _POSIX_SOURCE macro:

If you define this macro, then the functionality from the POSIX.1 standard (IEEE Standard 1003.1) is available, as well as all of the ISO C facilities.

And finally, the very last sentence on the page states that:

Likewise, if you define _GNU_SOURCE, then defining either _POSIX_SOURCE or _POSIX_C_SOURCE as well has no effect.

It is clear to me that it has no effect to #define _POSIX_SOURCE right the next line after #define _GNU_SOURCE, because according to the docs it has no effect, and therefore I propose to remove it alltogether.
UPDATE: I have also noticed the same situation inside the src/session_server_ssh.c source file. Therefore, I have updated this pull request to keep it consistent.
I have also noticed the same typo (#define _POSIX_SOURCE -> #define _POSIX_SOUCE) inside src/session_server.c. However, fixing the typo actually breaks the compilation, because some pthread_* symbols are suddenly missing...
Because at the top of src/session_server_ssh.c is #define _GNU_SOURCE, I believe that here, in src/session_server.c file should be #define _GNU_SOURCE as well.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,40,2017-08-19T15:03:23Z,2017-08-21T07:18:36Z,2017-08-21T08:14:41Z,MERGED,True,2,4,3,https://github.com/TrinityCoder,MAINTENANCE removed redundant _POSIX_SOURCE flags,1,[],https://github.com/CESNET/libnetconf2/pull/40,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/40#issuecomment-323528723,"Hello,
when going through the source code, I found a typo in the src/io.c file. It caught my attention
because it seems that the library can be compiled OK even though the _POSIX_SOURCE is actually not defined, because the letter R is missing (_POSIX_SOUCE) from the statement.
After opening the GNU C library ""feature test macros"" page I found this description of the _GNU_SOURCE macro:

If you define this macro, everything is included: ISO C89, ISO C99, POSIX.1, POSIX.2, BSD, SVID, X/Open, LFS, and GNU extensions. In the cases where POSIX.1 conflicts with BSD, the POSIX definitions take precedence.

Moreover, at the beginning of the page, there is the definition of the _POSIX_SOURCE macro:

If you define this macro, then the functionality from the POSIX.1 standard (IEEE Standard 1003.1) is available, as well as all of the ISO C facilities.

And finally, the very last sentence on the page states that:

Likewise, if you define _GNU_SOURCE, then defining either _POSIX_SOURCE or _POSIX_C_SOURCE as well has no effect.

It is clear to me that it has no effect to #define _POSIX_SOURCE right the next line after #define _GNU_SOURCE, because according to the docs it has no effect, and therefore I propose to remove it alltogether.
UPDATE: I have also noticed the same situation inside the src/session_server_ssh.c source file. Therefore, I have updated this pull request to keep it consistent.
I have also noticed the same typo (#define _POSIX_SOURCE -> #define _POSIX_SOUCE) inside src/session_server.c. However, fixing the typo actually breaks the compilation, because some pthread_* symbols are suddenly missing...
Because at the top of src/session_server_ssh.c is #define _GNU_SOURCE, I believe that here, in src/session_server.c file should be #define _GNU_SOURCE as well.","Codecov Report

Merging #40 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #40      +/-   ##
==========================================
- Coverage   28.33%   28.32%   -0.02%     
==========================================
  Files          19       19              
  Lines        8579     8579              
  Branches     1772     1772              
==========================================
- Hits         2431     2430       -1     
  Misses       5391     5391              
- Partials      757      758       +1



Impacted Files
Coverage Δ





src/io.c
43.95% <ø> (ø)
⬆️


src/session_server_ssh.c
25.6% <ø> (-0.13%)
⬇️


src/session_server.c
21.29% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 688298b...9563b81. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,41,2017-09-15T11:38:20Z,2017-09-15T11:53:35Z,2017-09-15T14:35:25Z,MERGED,True,4,4,1,https://github.com/darshana-jk,BUGFIX - fix a potential crash in ERR prints.,1,[],https://github.com/CESNET/libnetconf2/pull/41,https://github.com/darshana-jk,1,https://github.com/CESNET/libnetconf2/pull/41,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,41,2017-09-15T11:38:20Z,2017-09-15T11:53:35Z,2017-09-15T14:35:25Z,MERGED,True,4,4,1,https://github.com/darshana-jk,BUGFIX - fix a potential crash in ERR prints.,1,[],https://github.com/CESNET/libnetconf2/pull/41,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/41#issuecomment-329760628,,"Thanks, merged.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,41,2017-09-15T11:38:20Z,2017-09-15T11:53:35Z,2017-09-15T14:35:25Z,MERGED,True,4,4,1,https://github.com/darshana-jk,BUGFIX - fix a potential crash in ERR prints.,1,[],https://github.com/CESNET/libnetconf2/pull/41,https://github.com/codecov-io,3,https://github.com/CESNET/libnetconf2/pull/41#issuecomment-329799790,,"Codecov Report

Merging #41 into devel will decrease coverage by 0.01%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##            devel      #41      +/-   ##
==========================================
- Coverage   28.33%   28.32%   -0.02%     
==========================================
  Files          19       19              
  Lines        8579     8579              
  Branches     1772     1772              
==========================================
- Hits         2431     2430       -1     
  Misses       5391     5391              
- Partials      757      758       +1



Impacted Files
Coverage Δ





src/session_server.c
21.29% <0%> (ø)
⬆️


src/session_server_tls.c
22.89% <0%> (-0.12%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 4dce033...2d2bf4d. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,42,2017-09-27T17:10:15Z,2017-09-28T07:10:35Z,2017-09-28T17:36:14Z,MERGED,True,8,8,1,https://github.com/Nitori-,Fix broken links in README.md,1,[],https://github.com/CESNET/libnetconf2/pull/42,https://github.com/Nitori-,1,https://github.com/CESNET/libnetconf2/pull/42,The github markdown renderer doesn't understand line breaks between the text and hyperlink portions of links.,The github markdown renderer doesn't understand line breaks between the text and hyperlink portions of links.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,42,2017-09-27T17:10:15Z,2017-09-28T07:10:35Z,2017-09-28T17:36:14Z,MERGED,True,8,8,1,https://github.com/Nitori-,Fix broken links in README.md,1,[],https://github.com/CESNET/libnetconf2/pull/42,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/42#issuecomment-332604912,The github markdown renderer doesn't understand line breaks between the text and hyperlink portions of links.,"Codecov Report

Merging #42 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #42      +/-   ##
==========================================
+ Coverage   28.32%   28.33%   +0.01%     
==========================================
  Files          19       19              
  Lines        8579     8579              
  Branches     1772     1772              
==========================================
+ Hits         2430     2431       +1     
  Misses       5391     5391              
+ Partials      758      757       -1



Impacted Files
Coverage Δ





src/session_server_ssh.c
25.73% <0%> (+0.12%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a6b8183...dd9f767. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,45,2017-10-16T07:28:45Z,2017-10-18T12:09:12Z,2017-10-18T12:09:12Z,MERGED,True,13,3,1,https://github.com/hanneskuettner,session BUGFIX segfault and corrupt server capabilities string with deviations,1,[],https://github.com/CESNET/libnetconf2/pull/45,https://github.com/hanneskuettner,1,https://github.com/CESNET/libnetconf2/pull/45,"Hi,
I encountered a corrupt server capabilities string when using deviated modules.
This has to do with an incorrect parse of the deviation node of the RFC 7895 ietf-yang-library data set.
The segfault was due to allocating space for the node but never actually assigning it.
And instead of the correct usage of deviations as common-leafs it was assumed that it is a list of yang:yang-identifier as the feature set. This lead to garbage output when the server has module deviations loaded.
Fixed by correctly parsing the deviations data node.","Hi,
I encountered a corrupt server capabilities string when using deviated modules.
This has to do with an incorrect parse of the deviation node of the RFC 7895 ietf-yang-library data set.
The segfault was due to allocating space for the node but never actually assigning it.
And instead of the correct usage of deviations as common-leafs it was assumed that it is a list of yang:yang-identifier as the feature set. This lead to garbage output when the server has module deviations loaded.
Fixed by correctly parsing the deviations data node.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,45,2017-10-16T07:28:45Z,2017-10-18T12:09:12Z,2017-10-18T12:09:12Z,MERGED,True,13,3,1,https://github.com/hanneskuettner,session BUGFIX segfault and corrupt server capabilities string with deviations,1,[],https://github.com/CESNET/libnetconf2/pull/45,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/45#issuecomment-336804258,"Hi,
I encountered a corrupt server capabilities string when using deviated modules.
This has to do with an incorrect parse of the deviation node of the RFC 7895 ietf-yang-library data set.
The segfault was due to allocating space for the node but never actually assigning it.
And instead of the correct usage of deviations as common-leafs it was assumed that it is a list of yang:yang-identifier as the feature set. This lead to garbage output when the server has module deviations loaded.
Fixed by correctly parsing the deviations data node.","Codecov Report

Merging #45 into devel will decrease coverage by 0.02%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##            devel      #45      +/-   ##
==========================================
- Coverage   28.36%   28.33%   -0.03%     
==========================================
  Files          19       19              
  Lines        8593     8600       +7     
  Branches     1771     1773       +2     
==========================================
  Hits         2437     2437              
- Misses       5397     5404       +7     
  Partials      759      759



Impacted Files
Coverage Δ





src/session.c
37.48% <0%> (-0.39%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 269dd15...ebb09ff. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,45,2017-10-16T07:28:45Z,2017-10-18T12:09:12Z,2017-10-18T12:09:12Z,MERGED,True,13,3,1,https://github.com/hanneskuettner,session BUGFIX segfault and corrupt server capabilities string with deviations,1,[],https://github.com/CESNET/libnetconf2/pull/45,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/45#issuecomment-337569660,"Hi,
I encountered a corrupt server capabilities string when using deviated modules.
This has to do with an incorrect parse of the deviation node of the RFC 7895 ietf-yang-library data set.
The segfault was due to allocating space for the node but never actually assigning it.
And instead of the correct usage of deviations as common-leafs it was assumed that it is a list of yang:yang-identifier as the feature set. This lead to garbage output when the server has module deviations loaded.
Fixed by correctly parsing the deviations data node.","Right, thank you.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,46,2017-10-26T16:02:55Z,2017-10-30T09:45:26Z,2017-10-30T09:45:26Z,MERGED,True,12,10,9,https://github.com/jktjkt,cmake: Do not write to the source directory during build,1,[],https://github.com/CESNET/libnetconf2/pull/46,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/46,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,46,2017-10-26T16:02:55Z,2017-10-30T09:45:26Z,2017-10-30T09:45:26Z,MERGED,True,12,10,9,https://github.com/jktjkt,cmake: Do not write to the source directory during build,1,[],https://github.com/CESNET/libnetconf2/pull/46,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/46#issuecomment-339734590,,"Codecov Report

Merging #46 into devel will not change coverage.
The diff coverage is n/a.


@@          Coverage Diff          @@
##           devel     #46   +/-   ##
=====================================
  Coverage   28.3%   28.3%           
=====================================
  Files         19      19           
  Lines       8614    8614           
  Branches    1776    1776           
=====================================
  Hits        2438    2438           
  Misses      5416    5416           
  Partials     760     760



Impacted Files
Coverage Δ





tests/test_init_destroy_server.c
100% <ø> (ø)
⬆️


tests/test_server_thread.c
94.09% <ø> (ø)
⬆️


tests/test_init_destroy_client.c
100% <ø> (ø)
⬆️


tests/test_time.c
100% <ø> (ø)
⬆️


tests/test_io.c
95.52% <ø> (ø)
⬆️


tests/test_client_thread.c
100% <ø> (ø)
⬆️


tests/test_fd_comm.c
100% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 916ddbb...cf15d6c. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,49,2018-02-14T13:56:35Z,2018-02-14T15:21:09Z,2018-02-14T15:21:09Z,MERGED,True,1,1,1,https://github.com/jktjkt,Use proper size for inet_ntop's buffer,1,[],https://github.com/CESNET/libnetconf2/pull/49,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/49,The manpage suggests to use this macro. The old code was failing for IPv6-mapped IPv4 addresses.,The manpage suggests to use this macro. The old code was failing for IPv6-mapped IPv4 addresses.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,49,2018-02-14T13:56:35Z,2018-02-14T15:21:09Z,2018-02-14T15:21:09Z,MERGED,True,1,1,1,https://github.com/jktjkt,Use proper size for inet_ntop's buffer,1,[],https://github.com/CESNET/libnetconf2/pull/49,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/49#issuecomment-365639889,The manpage suggests to use this macro. The old code was failing for IPv6-mapped IPv4 addresses.,"Hi,
you are right, thanks.
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,52,2018-03-21T06:01:32Z,2018-03-21T11:18:38Z,2018-03-21T11:38:39Z,CLOSED,False,6,1,1,https://github.com/darshana-jk,Prevent the socket fd leak:,1,[],https://github.com/CESNET/libnetconf2/pull/52,https://github.com/darshana-jk,1,https://github.com/CESNET/libnetconf2/pull/52,"Close the socket when SSL session cleanup.
Fix for: #53","Close the socket when SSL session cleanup.
Fix for: #53",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,52,2018-03-21T06:01:32Z,2018-03-21T11:18:38Z,2018-03-21T11:38:39Z,CLOSED,False,6,1,1,https://github.com/darshana-jk,Prevent the socket fd leak:,1,[],https://github.com/CESNET/libnetconf2/pull/52,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/52#issuecomment-374904498,"Close the socket when SSL session cleanup.
Fix for: #53","Hi Darshana,
you are getting the socket from a freed structure, I will fix it.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/leonshaw,1,https://github.com/CESNET/libnetconf2/pull/55,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-376944988,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","Codecov Report

Merging #55 into master will decrease coverage by 0.01%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##           master      #55      +/-   ##
==========================================
- Coverage   28.27%   28.26%   -0.02%     
==========================================
  Files          19       19              
  Lines        8634     8630       -4     
  Branches     1783     1782       -1     
==========================================
- Hits         2441     2439       -2     
+ Misses       5434     5430       -4     
- Partials      759      761       +2



Impacted Files
Coverage Δ





src/session_client_ssh.c
14.82% <0%> (+0.06%)
⬆️


src/session_server_ssh.c
25.42% <0%> (-0.13%)
⬇️


src/session_server_tls.c
22.89% <0%> (-0.12%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update befbfe1...dc08b95. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377142123,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","Hi,
your pull request is generally fine but I will not merge it as it is. Instead, first a terminal will be attempted to be opened the way it is now and if it fails then /dev/tty will be used as a backup. We initially had it implemented exactly the way you propose but it did not work in cases where stdout and stdin were not the same terminal/devices.
Before I make the change I want to ask why have you changed the mode for fopen from r to a+?
Regards,
Michal
EDIT: Nevermind, you use the terminal for both input and output so it makes sense.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377146207,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","Hi,
what do you think about it now? It worked for me having previously reproduced your problem.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/leonshaw,5,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377163016,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","@michalvasko
Hi,
Functionally it's fine, but I think this is redundant. If stdin is a terminal, the result is the same, but if stdin is not a terminal, ttyname_r may still fail. Using /dev/tty for both input and output also allows redirecting while being able to ask password interactively. For example with netopeer2:
netopeer2-cli < cmds > results
Thanks,
Xiao",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/michalvasko,6,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377164647,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","Hi Xiao,
as long as it works for you, we will keep it this way because like I said, it is not redundant. netopeer2-cli scripting is already possible.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/leonshaw,7,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377167045,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","@michalvasko
But the example above will give an error:
# netopeer2-cli < cmds > results
nc ERROR: ttyname_r failed (Inappropriate ioctl for device).
Segmentation fault (core dumped)

cmds:
connect --ssh --host 127.0.0.1 --login root
status

BTW, I'm actually referencing the implementation of openssh.
EDIT: Could you please also explain why try stdin first?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/michalvasko,8,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377179916,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","Hi,
it should no longer crash with the referenced fix in devel and I have briefly described how to use scripts here. I agree that is not as straightforward as your example but can be successfully used nonetheless.
We could switch it and try /dev/tty first, that is true but I do not think it matters. It is attempted to use stdin for situations when /dev/tty is not available or it is not the same as stdin (rare situations, but we have encountered them).
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/leonshaw,9,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377202923,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","@michalvasko
Hi,
I don't see code change handling failure of ttyname_r.
It's easy to create such situation. Suppose we are on /dev/tty1:
netopeer2-cli < /dev/tty2 > /dev/tty3

Using /dev/tty, the prompt and password is printed/read on /dev/tty1.
Using stdin and stdout, the prompt is printed on /dev/tty3, and password is read from /dev/tty2.

I prefer the behavior of 1, which is the same as openssh client. Generally people would expect inputing password on the TTY where they run the program, which is the controlling terminal. It's more probably that stdin is not a terminal than that /dev/tty is not available.
If you still insist on using stdin, at least the prompt and password input should be on the same TTY.
Thanks,
Xiao",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/michalvasko,10,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377230237,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.","HI Xiao,
I hope you are satisfied now, everything should work like you wanted.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,55,2018-03-28T15:36:05Z,2018-03-29T08:37:44Z,2018-03-29T13:38:29Z,CLOSED,False,27,35,1,https://github.com/leonshaw,client session BUGFIX SSH passwd auth segfault,1,[],https://github.com/CESNET/libnetconf2/pull/55,https://github.com/leonshaw,11,https://github.com/CESNET/libnetconf2/pull/55#issuecomment-377237746,"Hi,
After su from root to a normal user, ttyname of stdin is usually /dev/ttyx or /dev/pts/x, which is owned by root with permission 0620. The user has insufficient permission to the TTY resulting null password. It should use /dev/tty rather than getting ttyname from stdin.",That's good. Thanks!,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,58,2018-04-16T13:09:33Z,2018-04-19T08:21:10Z,2018-04-23T12:39:18Z,CLOSED,False,52,8,1,https://github.com/darshana-jk,server BUGFIX.,1,[],https://github.com/CESNET/libnetconf2/pull/58,https://github.com/darshana-jk,1,https://github.com/CESNET/libnetconf2/pull/58,"Properly handle call-home endpoint deletions & memory reallocation.
Prevent server from accessing a dangling pointer when call-home endpoints deleted/replaced.
We experienced a segfault in server when the full list of call home entries are replaced with new ones. gdb showed that the CH thread access memory which is not accessible (cur_endpt assumes that the memory is there, but its being moved). The changes handle call-home endpoint deletion properly. Also added proper accessing to the 'cur_endpt' pointer. Pls review.","Properly handle call-home endpoint deletions & memory reallocation.
Prevent server from accessing a dangling pointer when call-home endpoints deleted/replaced.
We experienced a segfault in server when the full list of call home entries are replaced with new ones. gdb showed that the CH thread access memory which is not accessible (cur_endpt assumes that the memory is there, but its being moved). The changes handle call-home endpoint deletion properly. Also added proper accessing to the 'cur_endpt' pointer. Pls review.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,58,2018-04-16T13:09:33Z,2018-04-19T08:21:10Z,2018-04-23T12:39:18Z,CLOSED,False,52,8,1,https://github.com/darshana-jk,server BUGFIX.,1,[],https://github.com/CESNET/libnetconf2/pull/58,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/58#issuecomment-381901886,"Properly handle call-home endpoint deletions & memory reallocation.
Prevent server from accessing a dangling pointer when call-home endpoints deleted/replaced.
We experienced a segfault in server when the full list of call home entries are replaced with new ones. gdb showed that the CH thread access memory which is not accessible (cur_endpt assumes that the memory is there, but its being moved). The changes handle call-home endpoint deletion properly. Also added proper accessing to the 'cur_endpt' pointer. Pls review.","Hi, can you be more specific about that segfault? I don't see what your patch is actually solving. The access to the removed items in the list should be limited via ch_endpt_count and it seems correct to me. What is the problem you are solving by the patch? If I understand it correctly, you just shrink the memory allocated for the array, right? But why? When ch_endpt_count is correctly used, the program should not access the items that are no more active, should it?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,58,2018-04-16T13:09:33Z,2018-04-19T08:21:10Z,2018-04-23T12:39:18Z,CLOSED,False,52,8,1,https://github.com/darshana-jk,server BUGFIX.,1,[],https://github.com/CESNET/libnetconf2/pull/58,https://github.com/darshana-jk,3,https://github.com/CESNET/libnetconf2/pull/58#issuecomment-381979676,"Properly handle call-home endpoint deletions & memory reallocation.
Prevent server from accessing a dangling pointer when call-home endpoints deleted/replaced.
We experienced a segfault in server when the full list of call home entries are replaced with new ones. gdb showed that the CH thread access memory which is not accessible (cur_endpt assumes that the memory is there, but its being moved). The changes handle call-home endpoint deletion properly. Also added proper accessing to the 'cur_endpt' pointer. Pls review.","This is from what I understand.
nc_server_ch_client_add_endpt(const char *client_name, const char *endpt_name)
function performs (assume endpt_name is unique):
lock CH client
increase the client->ch_endpt_count
realloc memory at client->ch_endpts -> increase the size of memory by (sizeof *client->ch_endpts).
initialise the new CH client endpoint which is at the last element of the client->ch_endpts.
unlock CH client.
...

So the nc_server_ch_client_del_endpt() should do the reverse.
when endpt_name != NULL:

lock CH client
decrease the client->ch_endpt_count
realloc memory at client->ch_endpts -> shrink the size of memory by by (sizeof *client->ch_endpts).
unlock CH client.

The code block between 2288-2290 memcopy the last endpoint data to the &client->ch_endpts[i] position, but what happens to the memory at the last endpoint after that?.
To my understanding this should be freed (i.e. the client->ch_endpts memory block should be shrink-ed).
Now, I agree that since the ch_endpt_count is correctly used and that memory is not accessed, but I think there's one case it accesses. That is in nc_ch_client_thread().
cur_endpt is a pointer on another thread to the same above array, when the cur_endpt is pointing to the last element of the above client->ch_endpts, and we deleted it while the nc_ch_client_thread() is in line 2929, the thread is going to wake up and again if if (cur_attempts < client->max_attempts)  which means we are going to jump to the line 2884 and the cur_endpt is still going to be pointing to the last element of the client->ch_endpts. The line 2932 client = nc_server_ch_client_with_endpt_lock(data->client_name);'' returns the correct client pointer but its not used.
Sorry but this is the best explanation I can do, I'm also not able to provide any debug dumps as this crash happened in a non PC, openwrt with uclibc environment.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,58,2018-04-16T13:09:33Z,2018-04-19T08:21:10Z,2018-04-23T12:39:18Z,CLOSED,False,52,8,1,https://github.com/darshana-jk,server BUGFIX.,1,[],https://github.com/CESNET/libnetconf2/pull/58,https://github.com/rkrejci,4,https://github.com/CESNET/libnetconf2/pull/58#issuecomment-382651720,"Properly handle call-home endpoint deletions & memory reallocation.
Prevent server from accessing a dangling pointer when call-home endpoints deleted/replaced.
We experienced a segfault in server when the full list of call home entries are replaced with new ones. gdb showed that the CH thread access memory which is not accessible (cur_endpt assumes that the memory is there, but its being moved). The changes handle call-home endpoint deletion properly. Also added proper accessing to the 'cur_endpt' pointer. Pls review.","The code block between 2288-2290 memcopy the last endpoint data to the &client->ch_endpts[i] position, but what happens to the memory at the last endpoint after that?.

It is kept for possible future use. If it will not be used (or not evrything), it will be freed/realloced later. I don't see a problem here.

but I think there's one case it accesses. That is in nc_ch_client_thread()

yeah, I got it from your explanation. I prefer to fix this part, since it is a bug, not the small memory kept for later use (and I'm not even sure that your fix solves this case). Please, could you just create an issue for this? Solving it can take some time, since I would like to discuss it with @michalvasko who is out of the office till the end of April.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,58,2018-04-16T13:09:33Z,2018-04-19T08:21:10Z,2018-04-23T12:39:18Z,CLOSED,False,52,8,1,https://github.com/darshana-jk,server BUGFIX.,1,[],https://github.com/CESNET/libnetconf2/pull/58,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/58#issuecomment-383560377,"Properly handle call-home endpoint deletions & memory reallocation.
Prevent server from accessing a dangling pointer when call-home endpoints deleted/replaced.
We experienced a segfault in server when the full list of call home entries are replaced with new ones. gdb showed that the CH thread access memory which is not accessible (cur_endpt assumes that the memory is there, but its being moved). The changes handle call-home endpoint deletion properly. Also added proper accessing to the 'cur_endpt' pointer. Pls review.","Hi Darshana,
it works now, I hope.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,60,2018-06-05T17:41:40Z,2018-06-05T17:42:35Z,2018-06-05T19:56:36Z,CLOSED,False,71,17,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,1,[],https://github.com/CESNET/libnetconf2/pull/60,https://github.com/bhart3,1,https://github.com/CESNET/libnetconf2/pull/60,Accidental pull request. Sorry for the issue!,Accidental pull request. Sorry for the issue!,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/bhart3,1,https://github.com/CESNET/libnetconf2/pull/61,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart","Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/61#issuecomment-394967491,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart","Hi,
I had planned to do exactly this when I have some spare time so thanks. However, a few problems. Minor one is code formatting, look at the comments. But I have a larger issue is the interactive authentication callback. It  should generally work (RFC) as a series of server queries and client answers. The default callback sends only one query and that is the password of the authenticating user (thus copying password authentication) because that is the most common use-case. However, if we allow changing this then I would definitely go for a generic callback.
So, keyboard-interactive callback should provide information used in session_server_ssh.c:829 (name of the authentication, instruction of what is expected form the user, and then an array of prompts that the user will directly reply to and these will be considered answers). There there would be perhaps another callback for either checking the answers one-by-one or all at once. It can even be one callback if implemented well.
As for publickey callback, there is probably not much options so it is fine except you definitely need to pass the current user trying to authenticate (this goes also for keyboard-interactive). It is not just a crucial information (you do not want to allow root to authenticate using user1 public key) but I think we should make sure that the default callbacks can be implemented as these custom ones.
As you see, it is not that simple so it is up to you whether you want to make these changes or you will leave it up to me (but I will not implement it anytime soon). Thanks anyway.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/bhart3,3,https://github.com/CESNET/libnetconf2/pull/61#issuecomment-395071974,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart","Sorry about the formatting errors. We attempted to keep the formatting the same but we definitely missed some of them.
We will make the changes that you suggested and re-upload a new version soon. Thank you very much for the feedback!
Regards,
Brandon",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/bhart3,4,https://github.com/CESNET/libnetconf2/pull/61#issuecomment-395077253,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart",One question about the comment on passing the user that is trying to authenticate into the callback functions. Can we not just use the session struct to grab the username? Which I think is what password authentication is doing as well.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/61#issuecomment-395078514,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart","Hi,
you are right, of course you can. That the username is not changed during the authentication process is checked before so you do not have to worry about that, I forgot.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/bhart3,6,https://github.com/CESNET/libnetconf2/pull/61#issuecomment-401919748,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart",Let me know if this seems more inline with your suggestions so that the questions and responses for the interactive authentication can be handled by the callback function that registers.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,61,2018-06-05T19:56:10Z,2018-07-03T12:25:14Z,2018-07-03T12:45:53Z,MERGED,True,97,28,3,https://github.com/bhart3,Add optional authentication methods for ssh pubkey and interactive.,4,[],https://github.com/CESNET/libnetconf2/pull/61,https://github.com/michalvasko,7,https://github.com/CESNET/libnetconf2/pull/61#issuecomment-402143862,"Hey everyone,
We wanted to add optional callback functions for pubkey and interactive authentication for ssh. We noticed you had implemented it for password but we added functionality that will also authenticate users differently for pubkey and interactive if you register callbacks. We modeled them after the existing changes to password authentication.
Please let us know your thoughts.
Thanks,
Brandon Hart","Hi,
should be fine now, I have just corrected some formatting errors. Thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,62,2018-06-12T00:06:45Z,2018-06-12T06:17:32Z,2018-06-12T06:17:32Z,MERGED,True,5,0,1,https://github.com/alangefe,Fix segfault when crypt() returns NULL,1,[],https://github.com/CESNET/libnetconf2/pull/62,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/62,"crypt() and crypt_r() can return NULL when an error is encountered. For example, if a user has been locked using usermod -L, queries to the password database can return an encrypted password prefixed by !, and crypt() will return NULL because the password hash is malformed.
This change prevents auth_password_compare_pwd() from dereferencing a NULL pointer if crypt() or crypt_r() returns NULL due to an error. Instead, we now return nonzero in this case (i.e., authentication failed).","crypt() and crypt_r() can return NULL when an error is encountered. For example, if a user has been locked using usermod -L, queries to the password database can return an encrypted password prefixed by !, and crypt() will return NULL because the password hash is malformed.
This change prevents auth_password_compare_pwd() from dereferencing a NULL pointer if crypt() or crypt_r() returns NULL due to an error. Instead, we now return nonzero in this case (i.e., authentication failed).",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,62,2018-06-12T00:06:45Z,2018-06-12T06:17:32Z,2018-06-12T06:17:32Z,MERGED,True,5,0,1,https://github.com/alangefe,Fix segfault when crypt() returns NULL,1,[],https://github.com/CESNET/libnetconf2/pull/62,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/62#issuecomment-396477785,"crypt() and crypt_r() can return NULL when an error is encountered. For example, if a user has been locked using usermod -L, queries to the password database can return an encrypted password prefixed by !, and crypt() will return NULL because the password hash is malformed.
This change prevents auth_password_compare_pwd() from dereferencing a NULL pointer if crypt() or crypt_r() returns NULL due to an error. Instead, we now return nonzero in this case (i.e., authentication failed).","Okay, no problem.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,64,2018-06-28T12:46:37Z,2018-08-06T09:10:09Z,2018-08-06T09:10:10Z,MERGED,True,147,46,5,https://github.com/frimpler,PR for Issue 1188 (persistent timeout in call home scenarios),4,[],https://github.com/CESNET/libnetconf2/pull/64,https://github.com/frimpler,1,https://github.com/CESNET/libnetconf2/pull/64,"Hi Michal,
I interpreted the discussion reg. sysrepo/sysrepo#1188 in that way that you are fine with the proposed solution in general and want me to provide the fix for the problem stated there. I have also added the improvements for the sockets and store now the pending ones, in order to avoid numbers of half opened sockets. And, I didn't see the IPv6 problem any more when using AF_UNSPEC.
Please have a look at it and if you don't see bigger issues, please pull it in. (Btw.: I'll not be able to work on it in the next days, if you have only minor complains :-))
Regards,
Frank","Hi Michal,
I interpreted the discussion reg. sysrepo/sysrepo#1188 in that way that you are fine with the proposed solution in general and want me to provide the fix for the problem stated there. I have also added the improvements for the sockets and store now the pending ones, in order to avoid numbers of half opened sockets. And, I didn't see the IPv6 problem any more when using AF_UNSPEC.
Please have a look at it and if you don't see bigger issues, please pull it in. (Btw.: I'll not be able to work on it in the next days, if you have only minor complains :-))
Regards,
Frank",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,64,2018-06-28T12:46:37Z,2018-08-06T09:10:09Z,2018-08-06T09:10:10Z,MERGED,True,147,46,5,https://github.com/frimpler,PR for Issue 1188 (persistent timeout in call home scenarios),4,[],https://github.com/CESNET/libnetconf2/pull/64,https://github.com/frimpler,2,https://github.com/CESNET/libnetconf2/pull/64#issuecomment-407660158,"Hi Michal,
I interpreted the discussion reg. sysrepo/sysrepo#1188 in that way that you are fine with the proposed solution in general and want me to provide the fix for the problem stated there. I have also added the improvements for the sockets and store now the pending ones, in order to avoid numbers of half opened sockets. And, I didn't see the IPv6 problem any more when using AF_UNSPEC.
Please have a look at it and if you don't see bigger issues, please pull it in. (Btw.: I'll not be able to work on it in the next days, if you have only minor complains :-))
Regards,
Frank","Hi Michal,
please have a look at the new commit. I mentioned IPv6 problems I had with my first implementations but they are solved now. The reason for them was, that a non-blocking connect behaves quite different and one has to check the usability of the socket afterwards ""by hand"" (check for socket errors). In the first implementations to this PR, this problem was hidden, because I forgot a break at the end of the loop. This caused of course, what Andrew has complained - but it wasn't really the intention to stay in the loop with a valid resource.
Regards,
Frank",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,64,2018-06-28T12:46:37Z,2018-08-06T09:10:09Z,2018-08-06T09:10:10Z,MERGED,True,147,46,5,https://github.com/frimpler,PR for Issue 1188 (persistent timeout in call home scenarios),4,[],https://github.com/CESNET/libnetconf2/pull/64,https://github.com/frimpler,3,https://github.com/CESNET/libnetconf2/pull/64#issuecomment-407672378,"Hi Michal,
I interpreted the discussion reg. sysrepo/sysrepo#1188 in that way that you are fine with the proposed solution in general and want me to provide the fix for the problem stated there. I have also added the improvements for the sockets and store now the pending ones, in order to avoid numbers of half opened sockets. And, I didn't see the IPv6 problem any more when using AF_UNSPEC.
Please have a look at it and if you don't see bigger issues, please pull it in. (Btw.: I'll not be able to work on it in the next days, if you have only minor complains :-))
Regards,
Frank","@michalvasko
Travis seem to have trouble to start. Any suggestion what can be done?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,64,2018-06-28T12:46:37Z,2018-08-06T09:10:09Z,2018-08-06T09:10:10Z,MERGED,True,147,46,5,https://github.com/frimpler,PR for Issue 1188 (persistent timeout in call home scenarios),4,[],https://github.com/CESNET/libnetconf2/pull/64,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/64#issuecomment-409471696,"Hi Michal,
I interpreted the discussion reg. sysrepo/sysrepo#1188 in that way that you are fine with the proposed solution in general and want me to provide the fix for the problem stated there. I have also added the improvements for the sockets and store now the pending ones, in order to avoid numbers of half opened sockets. And, I didn't see the IPv6 problem any more when using AF_UNSPEC.
Please have a look at it and if you don't see bigger issues, please pull it in. (Btw.: I'll not be able to work on it in the next days, if you have only minor complains :-))
Regards,
Frank","Hi Frank,
sorry, I was away. I briefly tested it and it seems to work. However, there seems to be a leftover unused variable i in session_client.c:908 so please remove it. Afterwards, I think it can be merged.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,64,2018-06-28T12:46:37Z,2018-08-06T09:10:09Z,2018-08-06T09:10:10Z,MERGED,True,147,46,5,https://github.com/frimpler,PR for Issue 1188 (persistent timeout in call home scenarios),4,[],https://github.com/CESNET/libnetconf2/pull/64,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/64#issuecomment-410641375,"Hi Michal,
I interpreted the discussion reg. sysrepo/sysrepo#1188 in that way that you are fine with the proposed solution in general and want me to provide the fix for the problem stated there. I have also added the improvements for the sockets and store now the pending ones, in order to avoid numbers of half opened sockets. And, I didn't see the IPv6 problem any more when using AF_UNSPEC.
Please have a look at it and if you don't see bigger issues, please pull it in. (Btw.: I'll not be able to work on it in the next days, if you have only minor complains :-))
Regards,
Frank","Hi Frank,
okay, seems good. Thanks!
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,65,2018-07-04T09:12:31Z,2018-07-04T09:35:00Z,2018-07-04T09:35:00Z,MERGED,True,17,9,1,https://github.com/Dajvid,io CHANGE more efficient way of finding endtag in nc_read_until,2,[],https://github.com/CESNET/libnetconf2/pull/65,https://github.com/Dajvid,1,https://github.com/CESNET/libnetconf2/pull/65,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,66,2018-07-09T15:41:18Z,2018-07-10T06:31:22Z,2018-07-10T06:32:12Z,CLOSED,False,4,2,1,https://github.com/rjarry,session: do not free rpc request external data,1,[],https://github.com/CESNET/libnetconf2/pull/66,https://github.com/rjarry,1,https://github.com/CESNET/libnetconf2/pull/66,"When making a generic rpc request:
struct lyd_node *input;
struct nc_reply *reply
struct nc_rpc *rpc;
uint64_t msgid;

input= lyd_new_path(NULL, ctx, ""/example:my-rpc/parameter"", ""value"",
                    LYD_ANYDATA_CONSTSTRING, LYD_PATH_OPT_UPDATE);

rpc = nc_rpc_act_generic(input, NC_PARAMTYPE_CONST);
nc_send_rpc(session, rpc, 1000, &msgid);
nc_recv_reply(nc_session, rpc, msgid, 1000, &reply);  /* input is freed by parse_reply */

nc_reply_free(reply);
nc_rpc_free(rpc);
lyd_free_withsiblings(input);  /* double free here */
If the rpc request data was allocated outside of parse_reply, it should not be freed.
Only free it if it was allocated in parse_reply().","When making a generic rpc request:
struct lyd_node *input;
struct nc_reply *reply
struct nc_rpc *rpc;
uint64_t msgid;

input= lyd_new_path(NULL, ctx, ""/example:my-rpc/parameter"", ""value"",
                    LYD_ANYDATA_CONSTSTRING, LYD_PATH_OPT_UPDATE);

rpc = nc_rpc_act_generic(input, NC_PARAMTYPE_CONST);
nc_send_rpc(session, rpc, 1000, &msgid);
nc_recv_reply(nc_session, rpc, msgid, 1000, &reply);  /* input is freed by parse_reply */

nc_reply_free(reply);
nc_rpc_free(rpc);
lyd_free_withsiblings(input);  /* double free here */
If the rpc request data was allocated outside of parse_reply, it should not be freed.
Only free it if it was allocated in parse_reply().",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,66,2018-07-09T15:41:18Z,2018-07-10T06:31:22Z,2018-07-10T06:32:12Z,CLOSED,False,4,2,1,https://github.com/rjarry,session: do not free rpc request external data,1,[],https://github.com/CESNET/libnetconf2/pull/66,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/66#issuecomment-403715611,"When making a generic rpc request:
struct lyd_node *input;
struct nc_reply *reply
struct nc_rpc *rpc;
uint64_t msgid;

input= lyd_new_path(NULL, ctx, ""/example:my-rpc/parameter"", ""value"",
                    LYD_ANYDATA_CONSTSTRING, LYD_PATH_OPT_UPDATE);

rpc = nc_rpc_act_generic(input, NC_PARAMTYPE_CONST);
nc_send_rpc(session, rpc, 1000, &msgid);
nc_recv_reply(nc_session, rpc, msgid, 1000, &reply);  /* input is freed by parse_reply */

nc_reply_free(reply);
nc_rpc_free(rpc);
lyd_free_withsiblings(input);  /* double free here */
If the rpc request data was allocated outside of parse_reply, it should not be freed.
Only free it if it was allocated in parse_reply().","Hi,
you are right but I thought adding a new flag was not really needed so I fixed it myself. Thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,67,2018-08-06T14:08:43Z,2018-08-07T09:38:59Z,2018-08-07T09:38:59Z,MERGED,True,3,3,1,https://github.com/frimpler,provide correct address length for inet_ntop i.o. to avoid error ENOSPC,1,[],https://github.com/CESNET/libnetconf2/pull/67,https://github.com/frimpler,1,https://github.com/CESNET/libnetconf2/pull/67,"Hi Michal,
inet_ntop produces errors with errno ""no space left on device"" in our environment. According to the man page of inet_ntop this happens when the length of the converted string (which might be up to 45 characters instead of 39 for IPv6 addresses) exceeds the length given to this function.
Regards,
Frank","Hi Michal,
inet_ntop produces errors with errno ""no space left on device"" in our environment. According to the man page of inet_ntop this happens when the length of the converted string (which might be up to 45 characters instead of 39 for IPv6 addresses) exceeds the length given to this function.
Regards,
Frank",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,67,2018-08-06T14:08:43Z,2018-08-07T09:38:59Z,2018-08-07T09:38:59Z,MERGED,True,3,3,1,https://github.com/frimpler,provide correct address length for inet_ntop i.o. to avoid error ENOSPC,1,[],https://github.com/CESNET/libnetconf2/pull/67,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/67#issuecomment-410997545,"Hi Michal,
inet_ntop produces errors with errno ""no space left on device"" in our environment. According to the man page of inet_ntop this happens when the length of the converted string (which might be up to 45 characters instead of 39 for IPv6 addresses) exceeds the length given to this function.
Regards,
Frank","Hi Frank,
right, definitely better now, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,69,2018-08-10T18:59:12Z,2018-08-13T14:17:17Z,2018-08-13T14:18:31Z,MERGED,True,8,1,1,https://github.com/rovarga,Do not send extra ssh_message_reply_default(),1,[],https://github.com/CESNET/libnetconf2/pull/69,https://github.com/rovarga,1,https://github.com/CESNET/libnetconf2/pull/69,"When we are asked to initialize keyboard-interactive authentication,
we should refrain from sending default reply, as that leads to an
extra SSH_MSG_USERAUTH_FAILURE which some clients do not like.
Fixes #68.
Signed-off-by: Robert Varga robert.varga@pantheon.tech","When we are asked to initialize keyboard-interactive authentication,
we should refrain from sending default reply, as that leads to an
extra SSH_MSG_USERAUTH_FAILURE which some clients do not like.
Fixes #68.
Signed-off-by: Robert Varga robert.varga@pantheon.tech",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,69,2018-08-10T18:59:12Z,2018-08-13T14:17:17Z,2018-08-13T14:18:31Z,MERGED,True,8,1,1,https://github.com/rovarga,Do not send extra ssh_message_reply_default(),1,[],https://github.com/CESNET/libnetconf2/pull/69,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/69#issuecomment-412533728,"When we are asked to initialize keyboard-interactive authentication,
we should refrain from sending default reply, as that leads to an
extra SSH_MSG_USERAUTH_FAILURE which some clients do not like.
Fixes #68.
Signed-off-by: Robert Varga robert.varga@pantheon.tech","Hi,
you are right it seems and it can be merged. Thanks!
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,70,2018-08-10T21:04:37Z,2018-08-13T13:46:56Z,2018-08-29T01:38:42Z,MERGED,True,7,3,1,https://github.com/alangefe,Fix parsing for notification after leaf,1,[],https://github.com/CESNET/libnetconf2/pull/70,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/70,"This commit fixes parsing of notification messages for the case where the notification follows a leaf. Prior to this change, if the notification followed a leaf, the notification would be missed. In the LYS_LEAF case, elem would be advanced to elem->next (the notification), but the for loop condition to detect the notification would not be re-evaluated due to the goto next_node jump. By the time the loop condition was re-evaluated, elem would have been advanced to the notification's child.
We've written integration tests that demonstrate the problem. This commit, together with ADTRAN/sysrepo@acac046, will allow those failing test cases to pass. (See CI results, lines 7282-7284, or test source code.) These test cases cover several different variations of notifications tied to data nodes.","This commit fixes parsing of notification messages for the case where the notification follows a leaf. Prior to this change, if the notification followed a leaf, the notification would be missed. In the LYS_LEAF case, elem would be advanced to elem->next (the notification), but the for loop condition to detect the notification would not be re-evaluated due to the goto next_node jump. By the time the loop condition was re-evaluated, elem would have been advanced to the notification's child.
We've written integration tests that demonstrate the problem. This commit, together with ADTRAN/sysrepo@acac046, will allow those failing test cases to pass. (See CI results, lines 7282-7284, or test source code.) These test cases cover several different variations of notifications tied to data nodes.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,70,2018-08-10T21:04:37Z,2018-08-13T13:46:56Z,2018-08-29T01:38:42Z,MERGED,True,7,3,1,https://github.com/alangefe,Fix parsing for notification after leaf,1,[],https://github.com/CESNET/libnetconf2/pull/70,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/70#issuecomment-412523480,"This commit fixes parsing of notification messages for the case where the notification follows a leaf. Prior to this change, if the notification followed a leaf, the notification would be missed. In the LYS_LEAF case, elem would be advanced to elem->next (the notification), but the for loop condition to detect the notification would not be re-evaluated due to the goto next_node jump. By the time the loop condition was re-evaluated, elem would have been advanced to the notification's child.
We've written integration tests that demonstrate the problem. This commit, together with ADTRAN/sysrepo@acac046, will allow those failing test cases to pass. (See CI results, lines 7282-7284, or test source code.) These test cases cover several different variations of notifications tied to data nodes.","Hi,
nice, thanks!
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,72,2018-08-15T16:55:32Z,2018-08-21T22:00:53Z,2018-08-21T22:01:05Z,CLOSED,False,7,0,2,https://github.com/alangefe,Use nonzero lock timeout for transmitting messages,1,[],https://github.com/CESNET/libnetconf2/pull/72,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/72,"This commit adds a nonzero lock timeout for transmitting messages, which greatly improves the reliability of notifications.
The old timeout value of zero meant that if there was any lock contention whatsoever, notifications received from sysrepo that needed to be sent along to clients would be dropped.
We added a nonzero lock timeout to allow the server to wait during the timeout for the lock contention to clear, so that it can transmit the notification.
The reliability improvement is dramatic. Whereas prior to this change, we saw notifications go missing around 3-5% of the time, now we are able to run our tests for more than 1000 iterations without missing a single notification.","This commit adds a nonzero lock timeout for transmitting messages, which greatly improves the reliability of notifications.
The old timeout value of zero meant that if there was any lock contention whatsoever, notifications received from sysrepo that needed to be sent along to clients would be dropped.
We added a nonzero lock timeout to allow the server to wait during the timeout for the lock contention to clear, so that it can transmit the notification.
The reliability improvement is dramatic. Whereas prior to this change, we saw notifications go missing around 3-5% of the time, now we are able to run our tests for more than 1000 iterations without missing a single notification.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,72,2018-08-15T16:55:32Z,2018-08-21T22:00:53Z,2018-08-21T22:01:05Z,CLOSED,False,7,0,2,https://github.com/alangefe,Use nonzero lock timeout for transmitting messages,1,[],https://github.com/CESNET/libnetconf2/pull/72,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/72#issuecomment-413438120,"This commit adds a nonzero lock timeout for transmitting messages, which greatly improves the reliability of notifications.
The old timeout value of zero meant that if there was any lock contention whatsoever, notifications received from sysrepo that needed to be sent along to clients would be dropped.
We added a nonzero lock timeout to allow the server to wait during the timeout for the lock contention to clear, so that it can transmit the notification.
The reliability improvement is dramatic. Whereas prior to this change, we saw notifications go missing around 3-5% of the time, now we are able to run our tests for more than 1000 iterations without missing a single notification.","Hi Andrew,
could you please elaborate more? In netopeer2-server, nc_server_notif_send() is called with a timeout of 5000, so where is the 0 timeout used?
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,72,2018-08-15T16:55:32Z,2018-08-21T22:00:53Z,2018-08-21T22:01:05Z,CLOSED,False,7,0,2,https://github.com/alangefe,Use nonzero lock timeout for transmitting messages,1,[],https://github.com/CESNET/libnetconf2/pull/72,https://github.com/alangefe,3,https://github.com/CESNET/libnetconf2/pull/72#issuecomment-414436729,"This commit adds a nonzero lock timeout for transmitting messages, which greatly improves the reliability of notifications.
The old timeout value of zero meant that if there was any lock contention whatsoever, notifications received from sysrepo that needed to be sent along to clients would be dropped.
We added a nonzero lock timeout to allow the server to wait during the timeout for the lock contention to clear, so that it can transmit the notification.
The reliability improvement is dramatic. Whereas prior to this change, we saw notifications go missing around 3-5% of the time, now we are able to run our tests for more than 1000 iterations without missing a single notification.","Hi Michal,
In this case the intermittent notifications were not being sent via nc_server_notif_send(), but were being sent via nc_server_send_reply_io(). The worker thread was calling nc_ps_poll() with a timeout of zero, which would result in nc_write_msg_io() being called with io_timeout = 0. The method failed to send the notification if there was any IO contention.
The call stack for this scenario is as follows:
worker_thread()
nc_ps_poll(timeout=0)
nc_server_send_reply_io(io_timeout=0)
nc_write_msg_io(io_timeout=0)

Regards,
Andrew",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,72,2018-08-15T16:55:32Z,2018-08-21T22:00:53Z,2018-08-21T22:01:05Z,CLOSED,False,7,0,2,https://github.com/alangefe,Use nonzero lock timeout for transmitting messages,1,[],https://github.com/CESNET/libnetconf2/pull/72,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/72#issuecomment-414569773,"This commit adds a nonzero lock timeout for transmitting messages, which greatly improves the reliability of notifications.
The old timeout value of zero meant that if there was any lock contention whatsoever, notifications received from sysrepo that needed to be sent along to clients would be dropped.
We added a nonzero lock timeout to allow the server to wait during the timeout for the lock contention to clear, so that it can transmit the notification.
The reliability improvement is dramatic. Whereas prior to this change, we saw notifications go missing around 3-5% of the time, now we are able to run our tests for more than 1000 iterations without missing a single notification.","Hi Andrew,
maybe I am missing something but I would expect some RPC replies will not be sent in this case because that is where the 0 timeout is used. nc_server_send_reply_io() calls nc_write_msg_io() only with NC_MSG_REPLY. All notifications should be sent (and can block RPC replies) because there is higher timeout used.
The solution would be to simply modify nc_ps_poll() timeout but I cannot be sure until the problem is not clear to me.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,72,2018-08-15T16:55:32Z,2018-08-21T22:00:53Z,2018-08-21T22:01:05Z,CLOSED,False,7,0,2,https://github.com/alangefe,Use nonzero lock timeout for transmitting messages,1,[],https://github.com/CESNET/libnetconf2/pull/72,https://github.com/alangefe,5,https://github.com/CESNET/libnetconf2/pull/72#issuecomment-414836081,"This commit adds a nonzero lock timeout for transmitting messages, which greatly improves the reliability of notifications.
The old timeout value of zero meant that if there was any lock contention whatsoever, notifications received from sysrepo that needed to be sent along to clients would be dropped.
We added a nonzero lock timeout to allow the server to wait during the timeout for the lock contention to clear, so that it can transmit the notification.
The reliability improvement is dramatic. Whereas prior to this change, we saw notifications go missing around 3-5% of the time, now we are able to run our tests for more than 1000 iterations without missing a single notification.","Hi Michal,
You're correct. On further investigation, we found that the specific changes above aren't actually needed. Sorry for the confusion and thanks for the help.
Regards,
Andrew",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,73,2018-08-17T17:14:33Z,2018-08-21T10:33:47Z,2018-08-29T01:41:13Z,CLOSED,False,7,0,1,https://github.com/alangefe,Add the yang-library NETCONF capability,1,[],https://github.com/CESNET/libnetconf2/pull/73,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/73,"This commit adds the yang-library NETCONF capability, which is required by
RFC 7950 section 5.6.4:
    The server also MUST advertise the following capability in the
    <hello> message (line breaks and whitespaces are used for formatting
    reasons only):

      urn:ietf:params:netconf:capability:yang-library:1.0?
        revision=<date>&module-set-id=<id>","This commit adds the yang-library NETCONF capability, which is required by
RFC 7950 section 5.6.4:
    The server also MUST advertise the following capability in the
    <hello> message (line breaks and whitespaces are used for formatting
    reasons only):

      urn:ietf:params:netconf:capability:yang-library:1.0?
        revision=<date>&module-set-id=<id>",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,73,2018-08-17T17:14:33Z,2018-08-21T10:33:47Z,2018-08-29T01:41:13Z,CLOSED,False,7,0,1,https://github.com/alangefe,Add the yang-library NETCONF capability,1,[],https://github.com/CESNET/libnetconf2/pull/73,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/73#issuecomment-414629423,"This commit adds the yang-library NETCONF capability, which is required by
RFC 7950 section 5.6.4:
    The server also MUST advertise the following capability in the
    <hello> message (line breaks and whitespaces are used for formatting
    reasons only):

      urn:ietf:params:netconf:capability:yang-library:1.0?
        revision=<date>&module-set-id=<id>","Merged manually as 50eac70 with a set of related changes:

since ietf-yang-library is YANG 1.1 schema, it is not supposed to be part of the capabilities list as a module (only as the capability as changed in this PR)
the change must reflected when processing capabilities and ietf-yang-library data on a client side to create libyang context according to the server supported schemas.

Thanks for noticing us!",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,74,2018-08-22T14:18:58Z,2018-08-22T14:34:51Z,2018-08-22T14:34:51Z,MERGED,True,5,1,1,https://github.com/Dajvid,Change CMakelist to be compatible with new version of libssh in which option -lssh_threads was removed.,2,[],https://github.com/CESNET/libnetconf2/pull/74,https://github.com/Dajvid,1,https://github.com/CESNET/libnetconf2/pull/74,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,75,2018-08-23T09:08:46Z,2018-08-23T09:40:27Z,2018-08-23T09:40:27Z,MERGED,True,2,2,1,https://github.com/Dajvid,session_server FIX function prototypes,1,[],https://github.com/CESNET/libnetconf2/pull/75,https://github.com/Dajvid,1,https://github.com/CESNET/libnetconf2/pull/75,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,76,2018-08-27T21:35:18Z,2018-08-28T10:02:58Z,2018-08-29T01:40:24Z,MERGED,True,116,16,4,https://github.com/alangefe,Provide a mechanism to setup TLS cert chain,1,[],https://github.com/CESNET/libnetconf2/pull/76,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/76,"This commit from @jwwilcox, together with a corresponding commit to netopeer2, fixes the TLS connection scenario in which the server's certificate has been signed by an intermediate CA, but the client only has the root CA available locally. In this case, the client will reject the connection attempt, because it does not know about the intermediate CA.
The changes here use the new netopeer2 callback (which supplies the intermediate certificate(s)) to call SSL_CTX_add_extra_chain_cert(), which allows the server's TLS context to automatically provide the intermediate certificate(s) to the client.
This scenario is demonstrated in the integration test test_tls_client_missing_server_intermediate() in ADTRAN:netopeer2-integration-tests. The changes here, together with the corresponding commit in netopeer2, will allow the currently failing test case to pass.","This commit from @jwwilcox, together with a corresponding commit to netopeer2, fixes the TLS connection scenario in which the server's certificate has been signed by an intermediate CA, but the client only has the root CA available locally. In this case, the client will reject the connection attempt, because it does not know about the intermediate CA.
The changes here use the new netopeer2 callback (which supplies the intermediate certificate(s)) to call SSL_CTX_add_extra_chain_cert(), which allows the server's TLS context to automatically provide the intermediate certificate(s) to the client.
This scenario is demonstrated in the integration test test_tls_client_missing_server_intermediate() in ADTRAN:netopeer2-integration-tests. The changes here, together with the corresponding commit in netopeer2, will allow the currently failing test case to pass.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,76,2018-08-27T21:35:18Z,2018-08-28T10:02:58Z,2018-08-29T01:40:24Z,MERGED,True,116,16,4,https://github.com/alangefe,Provide a mechanism to setup TLS cert chain,1,[],https://github.com/CESNET/libnetconf2/pull/76,https://github.com/alangefe,2,https://github.com/CESNET/libnetconf2/pull/76#issuecomment-416377364,"This commit from @jwwilcox, together with a corresponding commit to netopeer2, fixes the TLS connection scenario in which the server's certificate has been signed by an intermediate CA, but the client only has the root CA available locally. In this case, the client will reject the connection attempt, because it does not know about the intermediate CA.
The changes here use the new netopeer2 callback (which supplies the intermediate certificate(s)) to call SSL_CTX_add_extra_chain_cert(), which allows the server's TLS context to automatically provide the intermediate certificate(s) to the client.
This scenario is demonstrated in the integration test test_tls_client_missing_server_intermediate() in ADTRAN:netopeer2-integration-tests. The changes here, together with the corresponding commit in netopeer2, will allow the currently failing test case to pass.",This pull request goes with CESNET/netopeer2#328.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,76,2018-08-27T21:35:18Z,2018-08-28T10:02:58Z,2018-08-29T01:40:24Z,MERGED,True,116,16,4,https://github.com/alangefe,Provide a mechanism to setup TLS cert chain,1,[],https://github.com/CESNET/libnetconf2/pull/76,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/76#issuecomment-416525939,"This commit from @jwwilcox, together with a corresponding commit to netopeer2, fixes the TLS connection scenario in which the server's certificate has been signed by an intermediate CA, but the client only has the root CA available locally. In this case, the client will reject the connection attempt, because it does not know about the intermediate CA.
The changes here use the new netopeer2 callback (which supplies the intermediate certificate(s)) to call SSL_CTX_add_extra_chain_cert(), which allows the server's TLS context to automatically provide the intermediate certificate(s) to the client.
This scenario is demonstrated in the integration test test_tls_client_missing_server_intermediate() in ADTRAN:netopeer2-integration-tests. The changes here, together with the corresponding commit in netopeer2, will allow the currently failing test case to pass.","Hi,
you are right, it makes sense and was missing before, thanks a lot.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,77,2018-08-28T21:26:31Z,2018-08-29T06:26:18Z,2018-08-29T18:23:49Z,MERGED,True,2,2,1,https://github.com/alangefe,Two small TLS bug fixes,1,[],https://github.com/CESNET/libnetconf2/pull/77,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/77,"This commit from @jwwilcox fixes two TLS bugs.
The first is that in OpenSSL 1.1.0 and later, the client's certificate is actually the first in the stack, not the last. (The corresponding function for previous versions of OpenSSL remains unchanged.)
The second change fixes an off-by-one error in the loop searching for a matching cert-to-name mapping. (The bug is evident when there is more than one cert-to-name mapping present.)
These two fixes will allow the following three failing test cases in ADTRAN:netopeer2-integration-tests to pass:

test_tls_only_client_leaf_trusted_and_fingerprint_of_client_CA()
test_tls_only_client_leaf_trusted_and_fingerprint_of_client_leaf()
test_tls_fingerprint_cascade()

(The Travis CI results are available here.)","This commit from @jwwilcox fixes two TLS bugs.
The first is that in OpenSSL 1.1.0 and later, the client's certificate is actually the first in the stack, not the last. (The corresponding function for previous versions of OpenSSL remains unchanged.)
The second change fixes an off-by-one error in the loop searching for a matching cert-to-name mapping. (The bug is evident when there is more than one cert-to-name mapping present.)
These two fixes will allow the following three failing test cases in ADTRAN:netopeer2-integration-tests to pass:

test_tls_only_client_leaf_trusted_and_fingerprint_of_client_CA()
test_tls_only_client_leaf_trusted_and_fingerprint_of_client_leaf()
test_tls_fingerprint_cascade()

(The Travis CI results are available here.)",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,77,2018-08-28T21:26:31Z,2018-08-29T06:26:18Z,2018-08-29T18:23:49Z,MERGED,True,2,2,1,https://github.com/alangefe,Two small TLS bug fixes,1,[],https://github.com/CESNET/libnetconf2/pull/77,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/77#issuecomment-416839199,"This commit from @jwwilcox fixes two TLS bugs.
The first is that in OpenSSL 1.1.0 and later, the client's certificate is actually the first in the stack, not the last. (The corresponding function for previous versions of OpenSSL remains unchanged.)
The second change fixes an off-by-one error in the loop searching for a matching cert-to-name mapping. (The bug is evident when there is more than one cert-to-name mapping present.)
These two fixes will allow the following three failing test cases in ADTRAN:netopeer2-integration-tests to pass:

test_tls_only_client_leaf_trusted_and_fingerprint_of_client_CA()
test_tls_only_client_leaf_trusted_and_fingerprint_of_client_leaf()
test_tls_fingerprint_cascade()

(The Travis CI results are available here.)","Hi,
thanks for this and for testing TLS.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,78,2018-09-03T08:26:38Z,2018-09-05T06:37:26Z,2018-09-05T06:45:43Z,MERGED,True,27,19,1,https://github.com/pfeige,invalid endpoint pointer,1,[],https://github.com/CESNET/libnetconf2/pull/78,https://github.com/pfeige,1,https://github.com/CESNET/libnetconf2/pull/78,"Hi,
we are observing sporadically a SIGSEV when netoopeer2-server is performing a call-home. The cause is an invalid endpoint pointer in the client thread of libnetconf2. Within the connect loop the endpoint lock is released and taken again. After such unlock/lock sequence the pointers cur_endpt and cur_endpt_name are in general not more valid because the endpoint arrayof the current client may have changed. Therfore after the lock the mentioned endpoint pointers always have to be determined again. In the original code there are two else branches where this is not done. Here is my proposal for a corresponding fix.
Best Regards,
Peter","Hi,
we are observing sporadically a SIGSEV when netoopeer2-server is performing a call-home. The cause is an invalid endpoint pointer in the client thread of libnetconf2. Within the connect loop the endpoint lock is released and taken again. After such unlock/lock sequence the pointers cur_endpt and cur_endpt_name are in general not more valid because the endpoint arrayof the current client may have changed. Therfore after the lock the mentioned endpoint pointers always have to be determined again. In the original code there are two else branches where this is not done. Here is my proposal for a corresponding fix.
Best Regards,
Peter",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,78,2018-09-03T08:26:38Z,2018-09-05T06:37:26Z,2018-09-05T06:45:43Z,MERGED,True,27,19,1,https://github.com/pfeige,invalid endpoint pointer,1,[],https://github.com/CESNET/libnetconf2/pull/78,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/78#issuecomment-418615938,"Hi,
we are observing sporadically a SIGSEV when netoopeer2-server is performing a call-home. The cause is an invalid endpoint pointer in the client thread of libnetconf2. Within the connect loop the endpoint lock is released and taken again. After such unlock/lock sequence the pointers cur_endpt and cur_endpt_name are in general not more valid because the endpoint arrayof the current client may have changed. Therfore after the lock the mentioned endpoint pointers always have to be determined again. In the original code there are two else branches where this is not done. Here is my proposal for a corresponding fix.
Best Regards,
Peter","Hi Peter,
thanks, merged. Just a small code formatting issue I will fix.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,78,2018-09-03T08:26:38Z,2018-09-05T06:37:26Z,2018-09-05T06:45:43Z,MERGED,True,27,19,1,https://github.com/pfeige,invalid endpoint pointer,1,[],https://github.com/CESNET/libnetconf2/pull/78,https://github.com/pfeige,3,https://github.com/CESNET/libnetconf2/pull/78#issuecomment-418617699,"Hi,
we are observing sporadically a SIGSEV when netoopeer2-server is performing a call-home. The cause is an invalid endpoint pointer in the client thread of libnetconf2. Within the connect loop the endpoint lock is released and taken again. After such unlock/lock sequence the pointers cur_endpt and cur_endpt_name are in general not more valid because the endpoint arrayof the current client may have changed. Therfore after the lock the mentioned endpoint pointers always have to be determined again. In the original code there are two else branches where this is not done. Here is my proposal for a corresponding fix.
Best Regards,
Peter","OK.
Thanks,
Peter",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,79,2018-09-03T18:12:46Z,2018-09-03T18:19:45Z,2018-09-03T18:19:45Z,CLOSED,False,1030,3,4,None,Right now opening a pull request is easiest and fastest way to get codecov information. Do not merge please.,7,[],https://github.com/CESNET/libnetconf2/pull/79,None,1,https://github.com/CESNET/libnetconf2/pull/79,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,80,2018-09-06T17:14:16Z,2018-09-07T11:15:21Z,2018-09-07T11:15:21Z,CLOSED,False,3,0,1,https://github.com/jktjkt,Silence warnings by forward-declaring libyang's structs,1,[],https://github.com/CESNET/libnetconf2/pull/80,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/80,"Without this patch, I'm getting plenty of these when building
Netopeer2-server:
  In file included from /opt/nc/include/nc_server.h:27,
                   from Netopeer2/server/ietf_system.c:21:
  /opt/nc/include/libnetconf2/messages_server.h:99:53: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_reply *nc_server_reply_data(struct lyd_node *data, NC_WD_MODE wd, NC_PARAMTYPE paramtype);
                                                       ^~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:288:63: warning: ‘struct lyxml_elem’ declared inside parameter list will not be visible outside of this definition or declaration
   int nc_err_add_info_other(struct nc_server_error *err, struct lyxml_elem *other);
                                                                 ^~~~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:315:52: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_notif *nc_server_notif_new(struct lyd_node *event, char *eventtime, NC_PARAMTYPE paramtype);
                                                      ^~~~~~~~","Without this patch, I'm getting plenty of these when building
Netopeer2-server:
  In file included from /opt/nc/include/nc_server.h:27,
                   from Netopeer2/server/ietf_system.c:21:
  /opt/nc/include/libnetconf2/messages_server.h:99:53: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_reply *nc_server_reply_data(struct lyd_node *data, NC_WD_MODE wd, NC_PARAMTYPE paramtype);
                                                       ^~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:288:63: warning: ‘struct lyxml_elem’ declared inside parameter list will not be visible outside of this definition or declaration
   int nc_err_add_info_other(struct nc_server_error *err, struct lyxml_elem *other);
                                                                 ^~~~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:315:52: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_notif *nc_server_notif_new(struct lyd_node *event, char *eventtime, NC_PARAMTYPE paramtype);
                                                      ^~~~~~~~",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,80,2018-09-06T17:14:16Z,2018-09-07T11:15:21Z,2018-09-07T11:15:21Z,CLOSED,False,3,0,1,https://github.com/jktjkt,Silence warnings by forward-declaring libyang's structs,1,[],https://github.com/CESNET/libnetconf2/pull/80,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/80#issuecomment-419406220,"Without this patch, I'm getting plenty of these when building
Netopeer2-server:
  In file included from /opt/nc/include/nc_server.h:27,
                   from Netopeer2/server/ietf_system.c:21:
  /opt/nc/include/libnetconf2/messages_server.h:99:53: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_reply *nc_server_reply_data(struct lyd_node *data, NC_WD_MODE wd, NC_PARAMTYPE paramtype);
                                                       ^~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:288:63: warning: ‘struct lyxml_elem’ declared inside parameter list will not be visible outside of this definition or declaration
   int nc_err_add_info_other(struct nc_server_error *err, struct lyxml_elem *other);
                                                                 ^~~~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:315:52: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_notif *nc_server_notif_new(struct lyd_node *event, char *eventtime, NC_PARAMTYPE paramtype);
                                                      ^~~~~~~~","Hi,
sorry, should work now.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,80,2018-09-06T17:14:16Z,2018-09-07T11:15:21Z,2018-09-07T11:15:21Z,CLOSED,False,3,0,1,https://github.com/jktjkt,Silence warnings by forward-declaring libyang's structs,1,[],https://github.com/CESNET/libnetconf2/pull/80,https://github.com/jktjkt,3,https://github.com/CESNET/libnetconf2/pull/80#issuecomment-419408291,"Without this patch, I'm getting plenty of these when building
Netopeer2-server:
  In file included from /opt/nc/include/nc_server.h:27,
                   from Netopeer2/server/ietf_system.c:21:
  /opt/nc/include/libnetconf2/messages_server.h:99:53: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_reply *nc_server_reply_data(struct lyd_node *data, NC_WD_MODE wd, NC_PARAMTYPE paramtype);
                                                       ^~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:288:63: warning: ‘struct lyxml_elem’ declared inside parameter list will not be visible outside of this definition or declaration
   int nc_err_add_info_other(struct nc_server_error *err, struct lyxml_elem *other);
                                                                 ^~~~~~~~~~
  /opt/nc/include/libnetconf2/messages_server.h:315:52: warning: ‘struct lyd_node’ declared inside parameter list will not be visible outside of this definition or declaration
   struct nc_server_notif *nc_server_notif_new(struct lyd_node *event, char *eventtime, NC_PARAMTYPE paramtype);
                                                      ^~~~~~~~","Ack, just including that header file is OK as well. Let's close this one, then.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,81,2018-09-06T17:21:14Z,2018-09-07T11:09:14Z,2018-09-07T11:09:14Z,MERGED,True,12,6,1,https://github.com/jktjkt,Adapt to CESNET/libyang#602,2,[],https://github.com/CESNET/libnetconf2/pull/81,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/81,API changes for CESNET/libyang#602,API changes for CESNET/libyang#602,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,81,2018-09-06T17:21:14Z,2018-09-07T11:09:14Z,2018-09-07T11:09:14Z,MERGED,True,12,6,1,https://github.com/jktjkt,Adapt to CESNET/libyang#602,2,[],https://github.com/CESNET/libnetconf2/pull/81,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/81#issuecomment-419406884,API changes for CESNET/libyang#602,"Hi,
seems fine, if updated libyang will require it.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,82,2018-09-12T19:14:49Z,2018-09-13T06:29:04Z,2018-09-13T14:53:16Z,MERGED,True,27,26,4,https://github.com/alangefe,Fix call home client thread cleanup,1,[],https://github.com/CESNET/libnetconf2/pull/82,https://github.com/alangefe,1,https://github.com/CESNET/libnetconf2/pull/82,"This commit by @thelsper fixes a race condition in call home client creation and deletion. If a call home client is deleted and then immediately re-created with the same client name, the old client thread will not notice that the old client was destroyed, and will attempt to service the new client, while the newly created client thread for the new client also attempts to service the new client! This results in a proliferation of threads and can also result in deadlock.
To fix this, we added a unique client ID to the client information. When a client thread retrieves its client by name, it will now also check the client ID against the cached value of the client ID for the client it was previously servicing. If the client ID changes, this means that the client was destroyed, and the thread will clean itself up.
While we were here making these changes we also changed the session ID to be a true atomic, and removed the spin lock that was protecting it. (stdatomic.h was added in C11, which was why we also appended -std=gnu11 to the CFLAGS. Both sysrepo and netopeer2 are already using C11.)","This commit by @thelsper fixes a race condition in call home client creation and deletion. If a call home client is deleted and then immediately re-created with the same client name, the old client thread will not notice that the old client was destroyed, and will attempt to service the new client, while the newly created client thread for the new client also attempts to service the new client! This results in a proliferation of threads and can also result in deadlock.
To fix this, we added a unique client ID to the client information. When a client thread retrieves its client by name, it will now also check the client ID against the cached value of the client ID for the client it was previously servicing. If the client ID changes, this means that the client was destroyed, and the thread will clean itself up.
While we were here making these changes we also changed the session ID to be a true atomic, and removed the spin lock that was protecting it. (stdatomic.h was added in C11, which was why we also appended -std=gnu11 to the CFLAGS. Both sysrepo and netopeer2 are already using C11.)",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,82,2018-09-12T19:14:49Z,2018-09-13T06:29:04Z,2018-09-13T14:53:16Z,MERGED,True,27,26,4,https://github.com/alangefe,Fix call home client thread cleanup,1,[],https://github.com/CESNET/libnetconf2/pull/82,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/82#issuecomment-420898244,"This commit by @thelsper fixes a race condition in call home client creation and deletion. If a call home client is deleted and then immediately re-created with the same client name, the old client thread will not notice that the old client was destroyed, and will attempt to service the new client, while the newly created client thread for the new client also attempts to service the new client! This results in a proliferation of threads and can also result in deadlock.
To fix this, we added a unique client ID to the client information. When a client thread retrieves its client by name, it will now also check the client ID against the cached value of the client ID for the client it was previously servicing. If the client ID changes, this means that the client was destroyed, and the thread will clean itself up.
While we were here making these changes we also changed the session ID to be a true atomic, and removed the spin lock that was protecting it. (stdatomic.h was added in C11, which was why we also appended -std=gnu11 to the CFLAGS. Both sysrepo and netopeer2 are already using C11.)","Hi,
both changes are fine, thanks, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,85,2018-09-20T15:37:49Z,2019-07-10T13:21:28Z,2019-07-10T13:21:28Z,CLOSED,False,7,0,3,https://github.com/mislavn,server session BUGFIX pthread issue on ARM,1,[],https://github.com/CESNET/libnetconf2/pull/85,https://github.com/mislavn,1,https://github.com/CESNET/libnetconf2/pull/85,"Fixes issue:
error: 'PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP' undeclared (first use in this function)
I'm not sure what is the correct solution, this patch is based on sysrepo:
https://github.com/sysrepo/sysrepo/blob/master/src/data_manager.c#L2299
Signed-off-by: Mislav Novakovic mislav.novakovic@sartura.hr","Fixes issue:
error: 'PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP' undeclared (first use in this function)
I'm not sure what is the correct solution, this patch is based on sysrepo:
https://github.com/sysrepo/sysrepo/blob/master/src/data_manager.c#L2299
Signed-off-by: Mislav Novakovic mislav.novakovic@sartura.hr",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,85,2018-09-20T15:37:49Z,2019-07-10T13:21:28Z,2019-07-10T13:21:28Z,CLOSED,False,7,0,3,https://github.com/mislavn,server session BUGFIX pthread issue on ARM,1,[],https://github.com/CESNET/libnetconf2/pull/85,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/85#issuecomment-423525892,"Fixes issue:
error: 'PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP' undeclared (first use in this function)
I'm not sure what is the correct solution, this patch is based on sysrepo:
https://github.com/sysrepo/sysrepo/blob/master/src/data_manager.c#L2299
Signed-off-by: Mislav Novakovic mislav.novakovic@sartura.hr","Hi Mislav,
in principle it is fine and same mechanism can be used but the availability of this function is checked in CMake so it is missing there. Look at sysrepo/CMakeLists.txt:143 and sysrepo/src/common.sr_constants.h.in:33.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,85,2018-09-20T15:37:49Z,2019-07-10T13:21:28Z,2019-07-10T13:21:28Z,CLOSED,False,7,0,3,https://github.com/mislavn,server session BUGFIX pthread issue on ARM,1,[],https://github.com/CESNET/libnetconf2/pull/85,https://github.com/mislavn,3,https://github.com/CESNET/libnetconf2/pull/85#issuecomment-423961260,"Fixes issue:
error: 'PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP' undeclared (first use in this function)
I'm not sure what is the correct solution, this patch is based on sysrepo:
https://github.com/sysrepo/sysrepo/blob/master/src/data_manager.c#L2299
Signed-off-by: Mislav Novakovic mislav.novakovic@sartura.hr","Thanks, I'll implement the changes in the next few days.
Regards,
Mislav",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,89,2018-10-08T20:43:08Z,2018-10-11T07:44:54Z,2018-10-11T07:44:54Z,MERGED,True,1609,5,7,https://github.com/Dajvid,Unit tests for client API functions,10,[],https://github.com/CESNET/libnetconf2/pull/89,https://github.com/Dajvid,1,https://github.com/CESNET/libnetconf2/pull/89,"Reworked CMakelist.txt for tests to support mock functions

simple BUGFIX of memory leak caused by missing free in nc_rpc_free","Reworked CMakelist.txt for tests to support mock functions

simple BUGFIX of memory leak caused by missing free in nc_rpc_free",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,91,2018-10-10T10:32:05Z,2018-10-11T07:46:53Z,2018-10-11T07:46:53Z,MERGED,True,1,1,1,https://github.com/rjarry,client session: fix lock on wrong mutex,1,[],https://github.com/CESNET/libnetconf2/pull/91,https://github.com/rjarry,1,https://github.com/CESNET/libnetconf2/pull/91,"This fixes a segfault when running nc_connect_ssh_channel().
Program terminated with signal SIGSEGV, Segmentation fault.
 #0  __GI___pthread_mutex_lock (mutex=0x0) at ../nptl/pthread_mutex_lock.c:65
 #1  0x00007f0b38c0edf8 in nc_session_io_lock (session=0x561dc93a73b0, timeout=-1,
     func=0x7f0b38c36d60 <__func__.24731> ""nc_connect_ssh_channel"")
     at libnetconf2/src/session.c:347
 #2  0x00007f0b38c25f23 in nc_connect_ssh_channel (session=0x561dc8cc3200, ctx=0x561dc8cc7130)
     at libnetconf2/src/session_client_ssh.c:1753

Fixes: 131120a (""CHANGE allow concurrent notifications and RPCs"")","This fixes a segfault when running nc_connect_ssh_channel().
Program terminated with signal SIGSEGV, Segmentation fault.
 #0  __GI___pthread_mutex_lock (mutex=0x0) at ../nptl/pthread_mutex_lock.c:65
 #1  0x00007f0b38c0edf8 in nc_session_io_lock (session=0x561dc93a73b0, timeout=-1,
     func=0x7f0b38c36d60 <__func__.24731> ""nc_connect_ssh_channel"")
     at libnetconf2/src/session.c:347
 #2  0x00007f0b38c25f23 in nc_connect_ssh_channel (session=0x561dc8cc3200, ctx=0x561dc8cc7130)
     at libnetconf2/src/session_client_ssh.c:1753

Fixes: 131120a (""CHANGE allow concurrent notifications and RPCs"")",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,91,2018-10-10T10:32:05Z,2018-10-11T07:46:53Z,2018-10-11T07:46:53Z,MERGED,True,1,1,1,https://github.com/rjarry,client session: fix lock on wrong mutex,1,[],https://github.com/CESNET/libnetconf2/pull/91,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/91#issuecomment-428855219,"This fixes a segfault when running nc_connect_ssh_channel().
Program terminated with signal SIGSEGV, Segmentation fault.
 #0  __GI___pthread_mutex_lock (mutex=0x0) at ../nptl/pthread_mutex_lock.c:65
 #1  0x00007f0b38c0edf8 in nc_session_io_lock (session=0x561dc93a73b0, timeout=-1,
     func=0x7f0b38c36d60 <__func__.24731> ""nc_connect_ssh_channel"")
     at libnetconf2/src/session.c:347
 #2  0x00007f0b38c25f23 in nc_connect_ssh_channel (session=0x561dc8cc3200, ctx=0x561dc8cc7130)
     at libnetconf2/src/session_client_ssh.c:1753

Fixes: 131120a (""CHANGE allow concurrent notifications and RPCs"")","Right, thanks a lot.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,113,2018-11-08T00:58:47Z,2018-11-08T08:10:53Z,2018-11-08T13:50:35Z,MERGED,True,0,2,1,https://github.com/neheb,session: Remove engine.h include,1,[],https://github.com/CESNET/libnetconf2/pull/113,https://github.com/neheb,1,https://github.com/CESNET/libnetconf2/pull/113,OpenSSL's engine API is not used except for a cleanup call.,OpenSSL's engine API is not used except for a cleanup call.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,113,2018-11-08T00:58:47Z,2018-11-08T08:10:53Z,2018-11-08T13:50:35Z,MERGED,True,0,2,1,https://github.com/neheb,session: Remove engine.h include,1,[],https://github.com/CESNET/libnetconf2/pull/113,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/113#issuecomment-436908064,OpenSSL's engine API is not used except for a cleanup call.,"Hi,
it was there because otherwise there were leaks but I think it was a no longer support OpenSSL version, so fine.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,116,2018-11-12T21:39:23Z,2018-11-13T07:50:26Z,2018-11-13T07:50:26Z,MERGED,True,4,4,1,https://github.com/bhart3,Update syslog message priority format to match sysrepo,1,[],https://github.com/CESNET/libnetconf2/pull/116,https://github.com/bhart3,1,https://github.com/CESNET/libnetconf2/pull/116,Changes for syslog priority strings which was done for consistency to match the the sysrepo priority format in syslog messages.  The goal is to allow external filtering on combined syslog files.,Changes for syslog priority strings which was done for consistency to match the the sysrepo priority format in syslog messages.  The goal is to allow external filtering on combined syslog files.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,116,2018-11-12T21:39:23Z,2018-11-13T07:50:26Z,2018-11-13T07:50:26Z,MERGED,True,4,4,1,https://github.com/bhart3,Update syslog message priority format to match sysrepo,1,[],https://github.com/CESNET/libnetconf2/pull/116,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/116#issuecomment-438040291,Changes for syslog priority strings which was done for consistency to match the the sysrepo priority format in syslog messages.  The goal is to allow external filtering on combined syslog files.,"Codecov Report

Merging #116 into devel will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##            devel     #116   +/-   ##
=======================================
  Coverage   38.64%   38.64%           
=======================================
  Files          23       23           
  Lines        9674     9674           
  Branches     1897     1897           
=======================================
  Hits         3739     3739           
  Misses       5009     5009           
  Partials      926      926



Impacted Files
Coverage Δ





src/log.c
55% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 352c390...b186eba. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,116,2018-11-12T21:39:23Z,2018-11-13T07:50:26Z,2018-11-13T07:50:26Z,MERGED,True,4,4,1,https://github.com/bhart3,Update syslog message priority format to match sysrepo,1,[],https://github.com/CESNET/libnetconf2/pull/116,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/116#issuecomment-438169121,Changes for syslog priority strings which was done for consistency to match the the sysrepo priority format in syslog messages.  The goal is to allow external filtering on combined syslog files.,"Hi,
fine by me, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,123,2018-12-11T12:31:48Z,2018-12-12T07:45:15Z,2018-12-12T07:45:15Z,MERGED,True,428,21,10,https://github.com/olivier-matz-6wind,add support for unix socket transport,1,[],https://github.com/CESNET/libnetconf2/pull/123,https://github.com/olivier-matz-6wind,1,https://github.com/CESNET/libnetconf2/pull/123,"In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com","In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,123,2018-12-11T12:31:48Z,2018-12-12T07:45:15Z,2018-12-12T07:45:15Z,MERGED,True,428,21,10,https://github.com/olivier-matz-6wind,add support for unix socket transport,1,[],https://github.com/CESNET/libnetconf2/pull/123,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/123#issuecomment-446188975,"In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com","Codecov Report

Merging #123 into master will decrease coverage by 0.65%.
The diff coverage is 6.73%.


@@            Coverage Diff             @@
##           master     #123      +/-   ##
==========================================
- Coverage   38.52%   37.87%   -0.66%     
==========================================
  Files          23       23              
  Lines        9710     9894     +184     
  Branches     1901     1943      +42     
==========================================
+ Hits         3741     3747       +6     
- Misses       5043     5215     +172     
- Partials      926      932       +6



Impacted Files
Coverage Δ





src/session_client.c
24.77% <0%> (-0.94%)
⬇️


src/session.c
38.52% <10%> (-0.41%)
⬇️


src/session_server.c
20.96% <5.12%> (-1.32%)
⬇️


src/io.c
45.2% <50%> (-0.09%)
⬇️


tests/test_fd_comm.c
94.06% <0%> (-0.46%)
⬇️


src/session_server_ssh.c
24.31% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 16714a5...ac7fa2f. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,123,2018-12-11T12:31:48Z,2018-12-12T07:45:15Z,2018-12-12T07:45:15Z,MERGED,True,428,21,10,https://github.com/olivier-matz-6wind,add support for unix socket transport,1,[],https://github.com/CESNET/libnetconf2/pull/123,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/123#issuecomment-446196644,"In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com","Hi,
thanks for the work, the code seems well written but I am not very keen on merging this into the official repository. All the advantages (so you call them) seem to me like serious breaches of these NETCONF security requirements. Do you really need this to be merged, can't you just use your own patched version?
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,123,2018-12-11T12:31:48Z,2018-12-12T07:45:15Z,2018-12-12T07:45:15Z,MERGED,True,428,21,10,https://github.com/olivier-matz-6wind,add support for unix socket transport,1,[],https://github.com/CESNET/libnetconf2/pull/123,https://github.com/jktjkt,4,https://github.com/CESNET/libnetconf2/pull/123#issuecomment-446200008,"In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com","From a bystander's perspective, I can think about some use cases for this approach (testing and a local CLI-based access, for example). Also, being able to configure via the NETCONF protocol from a locally running, possibly non-networked access port such as a local console port even in face of a misconfigured firewall looks nice, but then it probably could work when talking via the loopback interface (does your FW support adding rules to loopback? If so, there might be more issues ahead.).
Either way, it seems that a logical next step is implementing SO_PEERCRED or SCM_CREDENTIALS so that the NETCONF server can infer the Unix identity of the client. That should answer @michalvasko 's reference to NETCONF safety.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,123,2018-12-11T12:31:48Z,2018-12-12T07:45:15Z,2018-12-12T07:45:15Z,MERGED,True,428,21,10,https://github.com/olivier-matz-6wind,add support for unix socket transport,1,[],https://github.com/CESNET/libnetconf2/pull/123,https://github.com/olivier-matz-6wind,5,https://github.com/CESNET/libnetconf2/pull/123#issuecomment-446210299,"In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com","Thank you for the feedback.
About security requirements, my understanding is that it they are fulfilled because there is an authentication mechanism:

the client must be authenticated on the system
the server can set permissions to the unix socket so that only some uid or gid can connect
the server gets the netconf username from the unix socket with getsockopt(..., SO_PEERCRED)

As supposed by @jktjkt, we are able use a local cli on our equipment. It can connect to Netopeer with ssh or unix socket. We use a unix socket by default to bypass local firewall rules (our equipment is also a firewall, and it can have a DROP policy by default) and to ensure that the connection can work from another netns.
I'd be happy if it gets merged, and not only because it is easier for us ;) I think it can be useful for other people that have the same use case than us. It guess it is also faster to setup than other transports, for testing purposes.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,123,2018-12-11T12:31:48Z,2018-12-12T07:45:15Z,2018-12-12T07:45:15Z,MERGED,True,428,21,10,https://github.com/olivier-matz-6wind,add support for unix socket transport,1,[],https://github.com/CESNET/libnetconf2/pull/123,https://github.com/michalvasko,6,https://github.com/CESNET/libnetconf2/pull/123#issuecomment-446492820,"In addition to SSH and TLS transport, add the support for UNIX
socket. Despite it's not in NETCONF standard, using a UNIX socket has
several advantages:


no need of password, keys, or certificate. The connection is allowed
for a local user authenticated on the system, and having the proper
permissions to connect to the netopeer socket.


the connection to netopeer is possible even if the firewall is
enabled. This is an advantage when configuring a firewall equipment
through netconf.


the connection to netopeer is possible from another netns.


Signed-off-by: Olivier Matz olivier.matz@6wind.com","I do not doubt the usefulness of this transport, just the security aspects. But I guess it is not as bad as I thought (I am still not sure that communicating using UNIX socket can be considered confidential, but we are talking about the same machine as the server is running on, so fine) so it can be merged.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,125,2018-12-12T10:55:15Z,2018-12-12T15:23:27Z,2018-12-12T15:23:27Z,MERGED,True,0,28,1,https://github.com/olivier-matz-6wind,remove duplicated setsockopts for keepalive,1,[],https://github.com/CESNET/libnetconf2/pull/125,https://github.com/olivier-matz-6wind,1,https://github.com/CESNET/libnetconf2/pull/125,"When rebasing commit ac7fa2f (""add support for unix socket
transport""), a conflict with commit be52dc2 (""session CHANGE
enable keep-alive for both server and client TCP sessions"") was not
properly managed. This resulted in duplicated code in
nc_sock_accept_binds() to set the tcp keepalive socket options.
Remove the duplicated code from nc_sock_accept_binds(), since it is
already done in nc_sock_enable_keepalive().
Fixes: ac7fa2f (""add support for unix socket transport"")
Signed-off-by: Olivier Matz olivier.matz@6wind.com","When rebasing commit ac7fa2f (""add support for unix socket
transport""), a conflict with commit be52dc2 (""session CHANGE
enable keep-alive for both server and client TCP sessions"") was not
properly managed. This resulted in duplicated code in
nc_sock_accept_binds() to set the tcp keepalive socket options.
Remove the duplicated code from nc_sock_accept_binds(), since it is
already done in nc_sock_enable_keepalive().
Fixes: ac7fa2f (""add support for unix socket transport"")
Signed-off-by: Olivier Matz olivier.matz@6wind.com",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,125,2018-12-12T10:55:15Z,2018-12-12T15:23:27Z,2018-12-12T15:23:27Z,MERGED,True,0,28,1,https://github.com/olivier-matz-6wind,remove duplicated setsockopts for keepalive,1,[],https://github.com/CESNET/libnetconf2/pull/125,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/125#issuecomment-446549131,"When rebasing commit ac7fa2f (""add support for unix socket
transport""), a conflict with commit be52dc2 (""session CHANGE
enable keep-alive for both server and client TCP sessions"") was not
properly managed. This resulted in duplicated code in
nc_sock_accept_binds() to set the tcp keepalive socket options.
Remove the duplicated code from nc_sock_accept_binds(), since it is
already done in nc_sock_enable_keepalive().
Fixes: ac7fa2f (""add support for unix socket transport"")
Signed-off-by: Olivier Matz olivier.matz@6wind.com","Codecov Report

Merging #125 into master will increase coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #125      +/-   ##
=========================================
+ Coverage   37.87%   37.9%   +0.03%     
=========================================
  Files          23      23              
  Lines        9894    9878      -16     
  Branches     1943    1939       -4     
=========================================
- Hits         3747    3744       -3     
+ Misses       5214    5205       -9     
+ Partials      933     929       -4



Impacted Files
Coverage Δ





src/session_server.c
20.98% <ø> (+0.02%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 0a2a23d...2f62210. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,125,2018-12-12T10:55:15Z,2018-12-12T15:23:27Z,2018-12-12T15:23:27Z,MERGED,True,0,28,1,https://github.com/olivier-matz-6wind,remove duplicated setsockopts for keepalive,1,[],https://github.com/CESNET/libnetconf2/pull/125,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/125#issuecomment-446626133,"When rebasing commit ac7fa2f (""add support for unix socket
transport""), a conflict with commit be52dc2 (""session CHANGE
enable keep-alive for both server and client TCP sessions"") was not
properly managed. This resulted in duplicated code in
nc_sock_accept_binds() to set the tcp keepalive socket options.
Remove the duplicated code from nc_sock_accept_binds(), since it is
already done in nc_sock_enable_keepalive().
Fixes: ac7fa2f (""add support for unix socket transport"")
Signed-off-by: Olivier Matz olivier.matz@6wind.com","Hi,
I think you are correct, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,127,2018-12-14T12:24:07Z,2018-12-17T11:07:32Z,2018-12-17T11:07:32Z,MERGED,True,9,0,1,https://github.com/preetbhansali,Race condition in nc_ps_lock,3,[],https://github.com/CESNET/libnetconf2/pull/127,https://github.com/preetbhansali,1,https://github.com/CESNET/libnetconf2/pull/127,"On our platform, all netconf server threads got stuck at this thing.
The current thread was ready to grab the lock because another thread had released the lock. But when the current thread was scheduled, pthread_cond_timedwait() returned S_errno_ETIMEDOUT error. As such we removed this from the queue. (And more threads waiting for the lock so queue len was not modified to 0).
So nobody is left to broadcast the condition and all the threads get stuck on waiting for the broadcast signal. They timeout and then wait again and this goes on.","On our platform, all netconf server threads got stuck at this thing.
The current thread was ready to grab the lock because another thread had released the lock. But when the current thread was scheduled, pthread_cond_timedwait() returned S_errno_ETIMEDOUT error. As such we removed this from the queue. (And more threads waiting for the lock so queue len was not modified to 0).
So nobody is left to broadcast the condition and all the threads get stuck on waiting for the broadcast signal. They timeout and then wait again and this goes on.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,127,2018-12-14T12:24:07Z,2018-12-17T11:07:32Z,2018-12-17T11:07:32Z,MERGED,True,9,0,1,https://github.com/preetbhansali,Race condition in nc_ps_lock,3,[],https://github.com/CESNET/libnetconf2/pull/127,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/127#issuecomment-447313117,"On our platform, all netconf server threads got stuck at this thing.
The current thread was ready to grab the lock because another thread had released the lock. But when the current thread was scheduled, pthread_cond_timedwait() returned S_errno_ETIMEDOUT error. As such we removed this from the queue. (And more threads waiting for the lock so queue len was not modified to 0).
So nobody is left to broadcast the condition and all the threads get stuck on waiting for the broadcast signal. They timeout and then wait again and this goes on.","Codecov Report

Merging #127 into devel will decrease coverage by 0.01%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##            devel     #127      +/-   ##
==========================================
- Coverage   37.91%   37.89%   -0.02%     
==========================================
  Files          23       23              
  Lines        9878     9880       +2     
  Branches     1939     1940       +1     
==========================================
- Hits         3745     3744       -1     
- Misses       5205     5207       +2     
- Partials      928      929       +1



Impacted Files
Coverage Δ





src/session_server.c
20.95% <0%> (-0.03%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 67b7af2...629dfc4. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,127,2018-12-14T12:24:07Z,2018-12-17T11:07:32Z,2018-12-17T11:07:32Z,MERGED,True,9,0,1,https://github.com/preetbhansali,Race condition in nc_ps_lock,3,[],https://github.com/CESNET/libnetconf2/pull/127,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/127#issuecomment-447748466,"On our platform, all netconf server threads got stuck at this thing.
The current thread was ready to grab the lock because another thread had released the lock. But when the current thread was scheduled, pthread_cond_timedwait() returned S_errno_ETIMEDOUT error. As such we removed this from the queue. (And more threads waiting for the lock so queue len was not modified to 0).
So nobody is left to broadcast the condition and all the threads get stuck on waiting for the broadcast signal. They timeout and then wait again and this goes on.","Hi,
okay, makes sense, just please address my comment.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,127,2018-12-14T12:24:07Z,2018-12-17T11:07:32Z,2018-12-17T11:07:32Z,MERGED,True,9,0,1,https://github.com/preetbhansali,Race condition in nc_ps_lock,3,[],https://github.com/CESNET/libnetconf2/pull/127,https://github.com/preetbhansali,4,https://github.com/CESNET/libnetconf2/pull/127#issuecomment-447798130,"On our platform, all netconf server threads got stuck at this thing.
The current thread was ready to grab the lock because another thread had released the lock. But when the current thread was scheduled, pthread_cond_timedwait() returned S_errno_ETIMEDOUT error. As such we removed this from the queue. (And more threads waiting for the lock so queue len was not modified to 0).
So nobody is left to broadcast the condition and all the threads get stuck on waiting for the broadcast signal. They timeout and then wait again and this goes on.","Ok, thanks.
I have added it.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,127,2018-12-14T12:24:07Z,2018-12-17T11:07:32Z,2018-12-17T11:07:32Z,MERGED,True,9,0,1,https://github.com/preetbhansali,Race condition in nc_ps_lock,3,[],https://github.com/CESNET/libnetconf2/pull/127,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/127#issuecomment-447807608,"On our platform, all netconf server threads got stuck at this thing.
The current thread was ready to grab the lock because another thread had released the lock. But when the current thread was scheduled, pthread_cond_timedwait() returned S_errno_ETIMEDOUT error. As such we removed this from the queue. (And more threads waiting for the lock so queue len was not modified to 0).
So nobody is left to broadcast the condition and all the threads get stuck on waiting for the broadcast signal. They timeout and then wait again and this goes on.","Okay, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,137,2019-02-04T06:03:50Z,2019-02-04T09:59:03Z,2019-02-04T09:59:03Z,MERGED,True,6,2,1,https://github.com/pick-a-username,[F] Restore global_rpc_clb callback,1,[],https://github.com/CESNET/libnetconf2/pull/137,https://github.com/pick-a-username,1,https://github.com/CESNET/libnetconf2/pull/137,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,137,2019-02-04T06:03:50Z,2019-02-04T09:59:03Z,2019-02-04T09:59:03Z,MERGED,True,6,2,1,https://github.com/pick-a-username,[F] Restore global_rpc_clb callback,1,[],https://github.com/CESNET/libnetconf2/pull/137,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/137#issuecomment-460142016,,"Codecov Report

Merging #137 into devel will decrease coverage by 0.03%.
The diff coverage is 33.33%.


@@            Coverage Diff             @@
##            devel     #137      +/-   ##
==========================================
- Coverage   37.91%   37.87%   -0.04%     
==========================================
  Files          23       23              
  Lines        9910     9912       +2     
  Branches     1945     1946       +1     
==========================================
- Hits         3757     3754       -3     
- Misses       5221     5222       +1     
- Partials      932      936       +4



Impacted Files
Coverage Δ





src/session_server.c
20.88% <33.33%> (-0.03%)
⬇️


src/io.c
45.07% <0%> (-0.14%)
⬇️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b2b9584...16284ca. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,137,2019-02-04T06:03:50Z,2019-02-04T09:59:03Z,2019-02-04T09:59:03Z,MERGED,True,6,2,1,https://github.com/pick-a-username,[F] Restore global_rpc_clb callback,1,[],https://github.com/CESNET/libnetconf2/pull/137,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/137#issuecomment-460189483,,"Hi,
the change makes sense and I am not sure how it got deleted, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,140,2019-03-13T17:02:59Z,2019-03-14T10:27:07Z,2019-03-14T10:27:07Z,MERGED,True,70,0,5,https://github.com/frimpler,fix and testcase for empty deviation parameter,1,[],https://github.com/CESNET/libnetconf2/pull/140,https://github.com/frimpler,1,https://github.com/CESNET/libnetconf2/pull/140,"In our tests, the <capability> element in <hello> message sporadically contained an empty deviations parameter (""&deviations=""). The issue could be reproduced by a test case (test_server_thread.c).
We see the root cause in the missing initialization of v in in nc_server_get_cpblts_version().
Please have a look,
Frank","In our tests, the <capability> element in <hello> message sporadically contained an empty deviations parameter (""&deviations=""). The issue could be reproduced by a test case (test_server_thread.c).
We see the root cause in the missing initialization of v in in nc_server_get_cpblts_version().
Please have a look,
Frank",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,140,2019-03-13T17:02:59Z,2019-03-14T10:27:07Z,2019-03-14T10:27:07Z,MERGED,True,70,0,5,https://github.com/frimpler,fix and testcase for empty deviation parameter,1,[],https://github.com/CESNET/libnetconf2/pull/140,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/140#issuecomment-472527445,"In our tests, the <capability> element in <hello> message sporadically contained an empty deviations parameter (""&deviations=""). The issue could be reproduced by a test case (test_server_thread.c).
We see the root cause in the missing initialization of v in in nc_server_get_cpblts_version().
Please have a look,
Frank","Codecov Report

Merging #140 into devel will increase coverage by 0.21%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##            devel     #140      +/-   ##
==========================================
+ Coverage   37.86%   38.07%   +0.21%     
==========================================
  Files          23       23              
  Lines        9922     9927       +5     
  Branches     1947     1947              
==========================================
+ Hits         3757     3780      +23     
+ Misses       5233     5202      -31     
- Partials      932      945      +13



Impacted Files
Coverage Δ





src/session.c
40.55% <ø> (+2.02%)
⬆️


tests/test_server_thread.c
94.07% <100%> (+0.08%)
⬆️


tests/test_fd_comm.c
94.06% <0%> (-0.46%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️


src/io.c
45.47% <0%> (+0.26%)
⬆️


src/session_client.c
24.93% <0%> (+0.27%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b4e6657...cb9274f. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,140,2019-03-13T17:02:59Z,2019-03-14T10:27:07Z,2019-03-14T10:27:07Z,MERGED,True,70,0,5,https://github.com/frimpler,fix and testcase for empty deviation parameter,1,[],https://github.com/CESNET/libnetconf2/pull/140,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/140#issuecomment-472791617,"In our tests, the <capability> element in <hello> message sporadically contained an empty deviations parameter (""&deviations=""). The issue could be reproduced by a test case (test_server_thread.c).
We see the root cause in the missing initialization of v in in nc_server_get_cpblts_version().
Please have a look,
Frank","Hi,
that is clearly a bug, thanks for the fix and test.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,150,2019-04-23T08:21:52Z,2019-04-24T07:05:41Z,2019-04-24T07:05:41Z,MERGED,True,2,2,1,https://github.com/chaitu-tk,libssh: Fix the replace order to derive libssh path,1,[],https://github.com/CESNET/libnetconf2/pull/150,https://github.com/chaitu-tk,1,https://github.com/CESNET/libnetconf2/pull/150,"In order to derive the library path to include for libssh from the .so
file path, fix the replace order, otherwise you end up with an extra
""/lib"" in the path and the build will not be able to find the libssh.","In order to derive the library path to include for libssh from the .so
file path, fix the replace order, otherwise you end up with an extra
""/lib"" in the path and the build will not be able to find the libssh.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,150,2019-04-23T08:21:52Z,2019-04-24T07:05:41Z,2019-04-24T07:05:41Z,MERGED,True,2,2,1,https://github.com/chaitu-tk,libssh: Fix the replace order to derive libssh path,1,[],https://github.com/CESNET/libnetconf2/pull/150,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/150#issuecomment-485699509,"In order to derive the library path to include for libssh from the .so
file path, fix the replace order, otherwise you end up with an extra
""/lib"" in the path and the build will not be able to find the libssh.","Codecov Report

Merging #150 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #150      +/-   ##
=========================================
+ Coverage   38.09%   38.1%   +0.01%     
=========================================
  Files          23      23              
  Lines        9956    9956              
  Branches     1948    1948              
=========================================
+ Hits         3793    3794       +1     
  Misses       5217    5217              
+ Partials      946     945       -1



Impacted Files
Coverage Δ





src/session_server_ssh.c
24.44% <0%> (+0.12%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 02ea9ad...f2a28fc. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,150,2019-04-23T08:21:52Z,2019-04-24T07:05:41Z,2019-04-24T07:05:41Z,MERGED,True,2,2,1,https://github.com/chaitu-tk,libssh: Fix the replace order to derive libssh path,1,[],https://github.com/CESNET/libnetconf2/pull/150,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/150#issuecomment-486095952,"In order to derive the library path to include for libssh from the .so
file path, fix the replace order, otherwise you end up with an extra
""/lib"" in the path and the build will not be able to find the libssh.","Hi,
a bit strange that we have never encountered the problem but it seems OK, so it can be merged.
Regards,
Michal",True,{'THUMBS_UP': ['https://github.com/chaitu-tk']}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,154,2019-06-15T12:13:17Z,2019-06-15T19:32:24Z,2019-06-15T19:32:25Z,CLOSED,False,0,2,1,https://github.com/adamjrichter,Trivial: delete unnecessary assignment in nc_err_set_msg().,1,[],https://github.com/CESNET/libnetconf2/pull/154,https://github.com/adamjrichter,1,https://github.com/CESNET/libnetconf2/pull/154,"cppcheck noticed, toward the end of nc_err_set_msg() in src/messages_server.c, that there is an unnecessary ""lang = NULL;"" assignment in an ""else"" branch where it is known that lang is NULL.  This patch deletes that unnecessary assignment.
I am having a cmake problem right now (something is trying to link with -lpthreads instead of -lpthread, even though this does not appear to be mentioned in the source tree), so I have not even built this, but the patch is quite trivial, so I am submitting it anyway.  However, if you prefer, please feel free to tell me to wait until I have at least compiled it.
This may be the only legitimate complaint that ""cppcheck --enable=warning ."" found.  Giving it ""--enable=all"" of course produces more output, which I am examining.
Thanks in advance for considering this trivial patch.","cppcheck noticed, toward the end of nc_err_set_msg() in src/messages_server.c, that there is an unnecessary ""lang = NULL;"" assignment in an ""else"" branch where it is known that lang is NULL.  This patch deletes that unnecessary assignment.
I am having a cmake problem right now (something is trying to link with -lpthreads instead of -lpthread, even though this does not appear to be mentioned in the source tree), so I have not even built this, but the patch is quite trivial, so I am submitting it anyway.  However, if you prefer, please feel free to tell me to wait until I have at least compiled it.
This may be the only legitimate complaint that ""cppcheck --enable=warning ."" found.  Giving it ""--enable=all"" of course produces more output, which I am examining.
Thanks in advance for considering this trivial patch.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,154,2019-06-15T12:13:17Z,2019-06-15T19:32:24Z,2019-06-15T19:32:25Z,CLOSED,False,0,2,1,https://github.com/adamjrichter,Trivial: delete unnecessary assignment in nc_err_set_msg().,1,[],https://github.com/CESNET/libnetconf2/pull/154,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/154#issuecomment-502362858,"cppcheck noticed, toward the end of nc_err_set_msg() in src/messages_server.c, that there is an unnecessary ""lang = NULL;"" assignment in an ""else"" branch where it is known that lang is NULL.  This patch deletes that unnecessary assignment.
I am having a cmake problem right now (something is trying to link with -lpthreads instead of -lpthread, even though this does not appear to be mentioned in the source tree), so I have not even built this, but the patch is quite trivial, so I am submitting it anyway.  However, if you prefer, please feel free to tell me to wait until I have at least compiled it.
This may be the only legitimate complaint that ""cppcheck --enable=warning ."" found.  Giving it ""--enable=all"" of course produces more output, which I am examining.
Thanks in advance for considering this trivial patch.","Codecov Report

Merging #154 into master will decrease coverage by <.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #154      +/-   ##
==========================================
- Coverage   38.12%   38.11%   -0.01%     
==========================================
  Files          23       23              
  Lines        9957     9956       -1     
  Branches     1948     1948              
==========================================
- Hits         3796     3795       -1     
+ Misses       5217     5216       -1     
- Partials      944      945       +1



Impacted Files
Coverage Δ





src/messages_server.c
15.87% <ø> (+0.03%)
⬆️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7269b00...3761db4. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,154,2019-06-15T12:13:17Z,2019-06-15T19:32:24Z,2019-06-15T19:32:25Z,CLOSED,False,0,2,1,https://github.com/adamjrichter,Trivial: delete unnecessary assignment in nc_err_set_msg().,1,[],https://github.com/CESNET/libnetconf2/pull/154,https://github.com/adamjrichter,3,https://github.com/CESNET/libnetconf2/pull/154#issuecomment-502393526,"cppcheck noticed, toward the end of nc_err_set_msg() in src/messages_server.c, that there is an unnecessary ""lang = NULL;"" assignment in an ""else"" branch where it is known that lang is NULL.  This patch deletes that unnecessary assignment.
I am having a cmake problem right now (something is trying to link with -lpthreads instead of -lpthread, even though this does not appear to be mentioned in the source tree), so I have not even built this, but the patch is quite trivial, so I am submitting it anyway.  However, if you prefer, please feel free to tell me to wait until I have at least compiled it.
This may be the only legitimate complaint that ""cppcheck --enable=warning ."" found.  Giving it ""--enable=all"" of course produces more output, which I am examining.
Thanks in advance for considering this trivial patch.","Oops.  i am sorry I did not notice that you have a ""devel"" branch.  I will cancel this pull request and resubmit it against devel.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,155,2019-06-15T20:31:19Z,2019-06-20T08:05:06Z,2019-06-20T10:01:20Z,MERGED,True,1,3,2,https://github.com/adamjrichter,"Eliminte two trivial redundancies, which the compiler already optimizes out",2,[],https://github.com/CESNET/libnetconf2/pull/155,https://github.com/adamjrichter,1,https://github.com/CESNET/libnetconf2/pull/155,"This pull request eliminates the following two trivial redundancies, both found by cppcheck.
src/messages.c: nc_err_set_msg() assigned the parameter lang to NULL when it already was guaranteed to have that value.  Also, the parameter is never used after that point anyhow.
src/session_server_tls.c: nc_server_tls_get_ctn() had duplicate ""&&"" clauses (""[...] ctn->name && ctn->name"")
These deletions result in unchanged .o files on x86_64 if I build with ""-O2"" and add a couple of blank lines to messages.c to keep the line numbers the same.
Thanks in advance for considering this patch.","This pull request eliminates the following two trivial redundancies, both found by cppcheck.
src/messages.c: nc_err_set_msg() assigned the parameter lang to NULL when it already was guaranteed to have that value.  Also, the parameter is never used after that point anyhow.
src/session_server_tls.c: nc_server_tls_get_ctn() had duplicate ""&&"" clauses (""[...] ctn->name && ctn->name"")
These deletions result in unchanged .o files on x86_64 if I build with ""-O2"" and add a couple of blank lines to messages.c to keep the line numbers the same.
Thanks in advance for considering this patch.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,155,2019-06-15T20:31:19Z,2019-06-20T08:05:06Z,2019-06-20T10:01:20Z,MERGED,True,1,3,2,https://github.com/adamjrichter,"Eliminte two trivial redundancies, which the compiler already optimizes out",2,[],https://github.com/CESNET/libnetconf2/pull/155,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/155#issuecomment-502398246,"This pull request eliminates the following two trivial redundancies, both found by cppcheck.
src/messages.c: nc_err_set_msg() assigned the parameter lang to NULL when it already was guaranteed to have that value.  Also, the parameter is never used after that point anyhow.
src/session_server_tls.c: nc_server_tls_get_ctn() had duplicate ""&&"" clauses (""[...] ctn->name && ctn->name"")
These deletions result in unchanged .o files on x86_64 if I build with ""-O2"" and add a couple of blank lines to messages.c to keep the line numbers the same.
Thanks in advance for considering this patch.","Codecov Report

Merging #155 into devel will decrease coverage by 0.01%.
The diff coverage is 0%.


@@            Coverage Diff            @@
##            devel    #155      +/-   ##
=========================================
- Coverage   38.12%   38.1%   -0.02%     
=========================================
  Files          23      23              
  Lines        9957    9956       -1     
  Branches     1948    1948              
=========================================
- Hits         3796    3794       -2     
+ Misses       5217    5216       -1     
- Partials      944     946       +2



Impacted Files
Coverage Δ





src/messages_server.c
15.87% <ø> (+0.03%)
⬆️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7269b00...d44680e. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,155,2019-06-15T20:31:19Z,2019-06-20T08:05:06Z,2019-06-20T10:01:20Z,MERGED,True,1,3,2,https://github.com/adamjrichter,"Eliminte two trivial redundancies, which the compiler already optimizes out",2,[],https://github.com/CESNET/libnetconf2/pull/155,https://github.com/adamjrichter,3,https://github.com/CESNET/libnetconf2/pull/155#issuecomment-502399971,"This pull request eliminates the following two trivial redundancies, both found by cppcheck.
src/messages.c: nc_err_set_msg() assigned the parameter lang to NULL when it already was guaranteed to have that value.  Also, the parameter is never used after that point anyhow.
src/session_server_tls.c: nc_server_tls_get_ctn() had duplicate ""&&"" clauses (""[...] ctn->name && ctn->name"")
These deletions result in unchanged .o files on x86_64 if I build with ""-O2"" and add a couple of blank lines to messages.c to keep the line numbers the same.
Thanks in advance for considering this patch.","I think the codecov complaints may just be that a redundant line which I deleted happened to be executed by a test, decreasing the covered_lines / all_lines ratio.  I think a better measure would probably be absolute number of uncovered lines, which I believe my patch does not increase.  However, if I am missing something and there is some change I should make, please just let me know.  Thanks for your attention to this.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,155,2019-06-15T20:31:19Z,2019-06-20T08:05:06Z,2019-06-20T10:01:20Z,MERGED,True,1,3,2,https://github.com/adamjrichter,"Eliminte two trivial redundancies, which the compiler already optimizes out",2,[],https://github.com/CESNET/libnetconf2/pull/155,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/155#issuecomment-503922867,"This pull request eliminates the following two trivial redundancies, both found by cppcheck.
src/messages.c: nc_err_set_msg() assigned the parameter lang to NULL when it already was guaranteed to have that value.  Also, the parameter is never used after that point anyhow.
src/session_server_tls.c: nc_server_tls_get_ctn() had duplicate ""&&"" clauses (""[...] ctn->name && ctn->name"")
These deletions result in unchanged .o files on x86_64 if I build with ""-O2"" and add a couple of blank lines to messages.c to keep the line numbers the same.
Thanks in advance for considering this patch.","Hi,
no problem, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,157,2019-06-20T10:43:49Z,2019-07-10T13:21:28Z,2019-07-10T16:37:52Z,CLOSED,False,8,4,3,https://github.com/adamjrichter,"Split a few ""assert(a && b)"" statements for more precise diagnostics.",1,[],https://github.com/CESNET/libnetconf2/pull/157,https://github.com/adamjrichter,1,https://github.com/CESNET/libnetconf2/pull/157,"Thanks for merging in my previous pull request.  I was thinking of merging this into that pull request if I needed to increase the number of lines covered by test cases by somewhat legitimate means, but, I figured it is easier to evaluate separate pull requests.  Now that I have made the change, I feel like I ought to go ahead and submit it.
I should also warn that I have only compiled the code, not run it.  I tried configuring with cmake with  -DENABLE_BUILD_TESTS=ON, but I did not immediately notice a resultant test program to run.  So, I hope it is OK that I am going forward with this making a pull request for this trivial change.
This change splits ""assert(a && b)"" statements into separate ""assert(a)"" and ""assert(b)""
statements for more precise diagnostics in the three functions which
""egrep -r 'assert.*&&'"" found:
src/io.c: nc_read_msg_io()
src/session.c: nc_difftimespec()
src/session_client.c: nc_ctx_check_and_fill()
Here is a slightly customized boilerplate argument for why I encourage splitting such assert statements (which I only include in the pull request, not the commit message, which is much smaller), but I should also add that keeping developers happy may have a bigger impact on development trajectory, so if you or other just prefer conjunctions in assert statements, I understand.  Anyhow, here goes.


Assertion failures are often sporadic, and users who report them may
not be in a position to efficiently narrow them down further, so it
is important to get as much precision from each assertion failure as
possible.  This may be particularly true for the nc_difftimespec() change
in src/session.c, as it is based on math on subsecond times.


It is a more efficient use of developers time when a bug report
arrives if the problem has been narrowed down that much more.  A
new bug report may initially attract more interest, so, if the
problem has been narrowed down that much more, it may increase the
chance that developers may invest the time to try to resolve the
problem, and also reduce unnecessary traffic on the developer mailing
list about possible causes of the bug that separating the assertion
was able to rule out.


When using a debugger to step over an assertion failure in the
first part of the statement, the second part is still tested.


Providing separate likelihood hints to the compiler in the form
of separate assert statements does not require the compiler to
be quite as smart to recognize that it should optimize both branches,
although I do not know if that makes a difference for any compiler
commonly used to compile libnetconf2 (that is, I suspect that they are
all smart enough to realize is that ""a && b"" is likely true, then ""a""
is likely true and ""b"" is likely true), and, surprisingly, it appears to me
that glibc's assert() does not include a compiler branch hint (although,
for example, BUG_ON() in the Linux kernel did for x86_64 when I
last checked).


Separated assertions can be more readable, sometimes eliminating
parentheses, often making references to the same values line up
on the same columns, which can make range checks more obvious,
and sometimes changing multi-line conditions to separate single
line conditions, which can be recognized separately.
Consider, for example, how columnization in this makes this range
check more recongizable and makes it easier to recognize in a glance
that it is a bounds check and what the bounds are:
         assert(reg.vstride >= 0 && reg.vstride < ARRAY_SIZE(vstride_for_reg));
                 ... vs. ...

         assert(reg.vstride >= 0);
         assert(reg.vstride < ARRAY_SIZE(vstride_for_reg));

A possible counter-argument to this might be that, in a sequence of
assertions, it can be informative to group related assertions together.
That can be true, but it is possible to get this grouping other means,
such as by using blank lines to separate expressly such grouping, and
still have the more informative assertion failure messages from separate
assertion calls.


Thank you for considering this patch submission.","Thanks for merging in my previous pull request.  I was thinking of merging this into that pull request if I needed to increase the number of lines covered by test cases by somewhat legitimate means, but, I figured it is easier to evaluate separate pull requests.  Now that I have made the change, I feel like I ought to go ahead and submit it.
I should also warn that I have only compiled the code, not run it.  I tried configuring with cmake with  -DENABLE_BUILD_TESTS=ON, but I did not immediately notice a resultant test program to run.  So, I hope it is OK that I am going forward with this making a pull request for this trivial change.
This change splits ""assert(a && b)"" statements into separate ""assert(a)"" and ""assert(b)""
statements for more precise diagnostics in the three functions which
""egrep -r 'assert.*&&'"" found:
src/io.c: nc_read_msg_io()
src/session.c: nc_difftimespec()
src/session_client.c: nc_ctx_check_and_fill()
Here is a slightly customized boilerplate argument for why I encourage splitting such assert statements (which I only include in the pull request, not the commit message, which is much smaller), but I should also add that keeping developers happy may have a bigger impact on development trajectory, so if you or other just prefer conjunctions in assert statements, I understand.  Anyhow, here goes.


Assertion failures are often sporadic, and users who report them may
not be in a position to efficiently narrow them down further, so it
is important to get as much precision from each assertion failure as
possible.  This may be particularly true for the nc_difftimespec() change
in src/session.c, as it is based on math on subsecond times.


It is a more efficient use of developers time when a bug report
arrives if the problem has been narrowed down that much more.  A
new bug report may initially attract more interest, so, if the
problem has been narrowed down that much more, it may increase the
chance that developers may invest the time to try to resolve the
problem, and also reduce unnecessary traffic on the developer mailing
list about possible causes of the bug that separating the assertion
was able to rule out.


When using a debugger to step over an assertion failure in the
first part of the statement, the second part is still tested.


Providing separate likelihood hints to the compiler in the form
of separate assert statements does not require the compiler to
be quite as smart to recognize that it should optimize both branches,
although I do not know if that makes a difference for any compiler
commonly used to compile libnetconf2 (that is, I suspect that they are
all smart enough to realize is that ""a && b"" is likely true, then ""a""
is likely true and ""b"" is likely true), and, surprisingly, it appears to me
that glibc's assert() does not include a compiler branch hint (although,
for example, BUG_ON() in the Linux kernel did for x86_64 when I
last checked).


Separated assertions can be more readable, sometimes eliminating
parentheses, often making references to the same values line up
on the same columns, which can make range checks more obvious,
and sometimes changing multi-line conditions to separate single
line conditions, which can be recognized separately.
Consider, for example, how columnization in this makes this range
check more recongizable and makes it easier to recognize in a glance
that it is a bounds check and what the bounds are:
         assert(reg.vstride >= 0 && reg.vstride < ARRAY_SIZE(vstride_for_reg));
                 ... vs. ...

         assert(reg.vstride >= 0);
         assert(reg.vstride < ARRAY_SIZE(vstride_for_reg));

A possible counter-argument to this might be that, in a sequence of
assertions, it can be informative to group related assertions together.
That can be true, but it is possible to get this grouping other means,
such as by using blank lines to separate expressly such grouping, and
still have the more informative assertion failure messages from separate
assertion calls.


Thank you for considering this patch submission.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,157,2019-06-20T10:43:49Z,2019-07-10T13:21:28Z,2019-07-10T16:37:52Z,CLOSED,False,8,4,3,https://github.com/adamjrichter,"Split a few ""assert(a && b)"" statements for more precise diagnostics.",1,[],https://github.com/CESNET/libnetconf2/pull/157,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/157#issuecomment-503981368,"Thanks for merging in my previous pull request.  I was thinking of merging this into that pull request if I needed to increase the number of lines covered by test cases by somewhat legitimate means, but, I figured it is easier to evaluate separate pull requests.  Now that I have made the change, I feel like I ought to go ahead and submit it.
I should also warn that I have only compiled the code, not run it.  I tried configuring with cmake with  -DENABLE_BUILD_TESTS=ON, but I did not immediately notice a resultant test program to run.  So, I hope it is OK that I am going forward with this making a pull request for this trivial change.
This change splits ""assert(a && b)"" statements into separate ""assert(a)"" and ""assert(b)""
statements for more precise diagnostics in the three functions which
""egrep -r 'assert.*&&'"" found:
src/io.c: nc_read_msg_io()
src/session.c: nc_difftimespec()
src/session_client.c: nc_ctx_check_and_fill()
Here is a slightly customized boilerplate argument for why I encourage splitting such assert statements (which I only include in the pull request, not the commit message, which is much smaller), but I should also add that keeping developers happy may have a bigger impact on development trajectory, so if you or other just prefer conjunctions in assert statements, I understand.  Anyhow, here goes.


Assertion failures are often sporadic, and users who report them may
not be in a position to efficiently narrow them down further, so it
is important to get as much precision from each assertion failure as
possible.  This may be particularly true for the nc_difftimespec() change
in src/session.c, as it is based on math on subsecond times.


It is a more efficient use of developers time when a bug report
arrives if the problem has been narrowed down that much more.  A
new bug report may initially attract more interest, so, if the
problem has been narrowed down that much more, it may increase the
chance that developers may invest the time to try to resolve the
problem, and also reduce unnecessary traffic on the developer mailing
list about possible causes of the bug that separating the assertion
was able to rule out.


When using a debugger to step over an assertion failure in the
first part of the statement, the second part is still tested.


Providing separate likelihood hints to the compiler in the form
of separate assert statements does not require the compiler to
be quite as smart to recognize that it should optimize both branches,
although I do not know if that makes a difference for any compiler
commonly used to compile libnetconf2 (that is, I suspect that they are
all smart enough to realize is that ""a && b"" is likely true, then ""a""
is likely true and ""b"" is likely true), and, surprisingly, it appears to me
that glibc's assert() does not include a compiler branch hint (although,
for example, BUG_ON() in the Linux kernel did for x86_64 when I
last checked).


Separated assertions can be more readable, sometimes eliminating
parentheses, often making references to the same values line up
on the same columns, which can make range checks more obvious,
and sometimes changing multi-line conditions to separate single
line conditions, which can be recognized separately.
Consider, for example, how columnization in this makes this range
check more recongizable and makes it easier to recognize in a glance
that it is a bounds check and what the bounds are:
         assert(reg.vstride >= 0 && reg.vstride < ARRAY_SIZE(vstride_for_reg));
                 ... vs. ...

         assert(reg.vstride >= 0);
         assert(reg.vstride < ARRAY_SIZE(vstride_for_reg));

A possible counter-argument to this might be that, in a sequence of
assertions, it can be informative to group related assertions together.
That can be true, but it is possible to get this grouping other means,
such as by using blank lines to separate expressly such grouping, and
still have the more informative assertion failure messages from separate
assertion calls.


Thank you for considering this patch submission.","Codecov Report

Merging #157 into devel will increase coverage by 0.02%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##            devel     #157      +/-   ##
==========================================
+ Coverage   38.12%   38.15%   +0.02%     
==========================================
  Files          23       23              
  Lines        9959     9963       +4     
  Branches     1948     1948              
==========================================
+ Hits         3797     3801       +4     
  Misses       5216     5216              
  Partials      946      946



Impacted Files
Coverage Δ





src/io.c
45.55% <100%> (+0.07%)
⬆️


src/session_client.c
24.98% <100%> (+0.05%)
⬆️


src/session.c
40.8% <100%> (+0.16%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8b7101b...c0a7212. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,157,2019-06-20T10:43:49Z,2019-07-10T13:21:28Z,2019-07-10T16:37:52Z,CLOSED,False,8,4,3,https://github.com/adamjrichter,"Split a few ""assert(a && b)"" statements for more precise diagnostics.",1,[],https://github.com/CESNET/libnetconf2/pull/157,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/157#issuecomment-504000377,"Thanks for merging in my previous pull request.  I was thinking of merging this into that pull request if I needed to increase the number of lines covered by test cases by somewhat legitimate means, but, I figured it is easier to evaluate separate pull requests.  Now that I have made the change, I feel like I ought to go ahead and submit it.
I should also warn that I have only compiled the code, not run it.  I tried configuring with cmake with  -DENABLE_BUILD_TESTS=ON, but I did not immediately notice a resultant test program to run.  So, I hope it is OK that I am going forward with this making a pull request for this trivial change.
This change splits ""assert(a && b)"" statements into separate ""assert(a)"" and ""assert(b)""
statements for more precise diagnostics in the three functions which
""egrep -r 'assert.*&&'"" found:
src/io.c: nc_read_msg_io()
src/session.c: nc_difftimespec()
src/session_client.c: nc_ctx_check_and_fill()
Here is a slightly customized boilerplate argument for why I encourage splitting such assert statements (which I only include in the pull request, not the commit message, which is much smaller), but I should also add that keeping developers happy may have a bigger impact on development trajectory, so if you or other just prefer conjunctions in assert statements, I understand.  Anyhow, here goes.


Assertion failures are often sporadic, and users who report them may
not be in a position to efficiently narrow them down further, so it
is important to get as much precision from each assertion failure as
possible.  This may be particularly true for the nc_difftimespec() change
in src/session.c, as it is based on math on subsecond times.


It is a more efficient use of developers time when a bug report
arrives if the problem has been narrowed down that much more.  A
new bug report may initially attract more interest, so, if the
problem has been narrowed down that much more, it may increase the
chance that developers may invest the time to try to resolve the
problem, and also reduce unnecessary traffic on the developer mailing
list about possible causes of the bug that separating the assertion
was able to rule out.


When using a debugger to step over an assertion failure in the
first part of the statement, the second part is still tested.


Providing separate likelihood hints to the compiler in the form
of separate assert statements does not require the compiler to
be quite as smart to recognize that it should optimize both branches,
although I do not know if that makes a difference for any compiler
commonly used to compile libnetconf2 (that is, I suspect that they are
all smart enough to realize is that ""a && b"" is likely true, then ""a""
is likely true and ""b"" is likely true), and, surprisingly, it appears to me
that glibc's assert() does not include a compiler branch hint (although,
for example, BUG_ON() in the Linux kernel did for x86_64 when I
last checked).


Separated assertions can be more readable, sometimes eliminating
parentheses, often making references to the same values line up
on the same columns, which can make range checks more obvious,
and sometimes changing multi-line conditions to separate single
line conditions, which can be recognized separately.
Consider, for example, how columnization in this makes this range
check more recongizable and makes it easier to recognize in a glance
that it is a bounds check and what the bounds are:
         assert(reg.vstride >= 0 && reg.vstride < ARRAY_SIZE(vstride_for_reg));
                 ... vs. ...

         assert(reg.vstride >= 0);
         assert(reg.vstride < ARRAY_SIZE(vstride_for_reg));

A possible counter-argument to this might be that, in a sequence of
assertions, it can be informative to group related assertions together.
That can be true, but it is possible to get this grouping other means,
such as by using blank lines to separate expressly such grouping, and
still have the more informative assertion failure messages from separate
assertion calls.


Thank you for considering this patch submission.","Hi,
firstly, I think you are making a huge deal about a trivial change, it matters very little whether it is together or not. The conditions were put together because they are connected and I think it should stay that way. Asserts are hit only rarely, anyway.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,157,2019-06-20T10:43:49Z,2019-07-10T13:21:28Z,2019-07-10T16:37:52Z,CLOSED,False,8,4,3,https://github.com/adamjrichter,"Split a few ""assert(a && b)"" statements for more precise diagnostics.",1,[],https://github.com/CESNET/libnetconf2/pull/157,https://github.com/adamjrichter,4,https://github.com/CESNET/libnetconf2/pull/157#issuecomment-510137370,"Thanks for merging in my previous pull request.  I was thinking of merging this into that pull request if I needed to increase the number of lines covered by test cases by somewhat legitimate means, but, I figured it is easier to evaluate separate pull requests.  Now that I have made the change, I feel like I ought to go ahead and submit it.
I should also warn that I have only compiled the code, not run it.  I tried configuring with cmake with  -DENABLE_BUILD_TESTS=ON, but I did not immediately notice a resultant test program to run.  So, I hope it is OK that I am going forward with this making a pull request for this trivial change.
This change splits ""assert(a && b)"" statements into separate ""assert(a)"" and ""assert(b)""
statements for more precise diagnostics in the three functions which
""egrep -r 'assert.*&&'"" found:
src/io.c: nc_read_msg_io()
src/session.c: nc_difftimespec()
src/session_client.c: nc_ctx_check_and_fill()
Here is a slightly customized boilerplate argument for why I encourage splitting such assert statements (which I only include in the pull request, not the commit message, which is much smaller), but I should also add that keeping developers happy may have a bigger impact on development trajectory, so if you or other just prefer conjunctions in assert statements, I understand.  Anyhow, here goes.


Assertion failures are often sporadic, and users who report them may
not be in a position to efficiently narrow them down further, so it
is important to get as much precision from each assertion failure as
possible.  This may be particularly true for the nc_difftimespec() change
in src/session.c, as it is based on math on subsecond times.


It is a more efficient use of developers time when a bug report
arrives if the problem has been narrowed down that much more.  A
new bug report may initially attract more interest, so, if the
problem has been narrowed down that much more, it may increase the
chance that developers may invest the time to try to resolve the
problem, and also reduce unnecessary traffic on the developer mailing
list about possible causes of the bug that separating the assertion
was able to rule out.


When using a debugger to step over an assertion failure in the
first part of the statement, the second part is still tested.


Providing separate likelihood hints to the compiler in the form
of separate assert statements does not require the compiler to
be quite as smart to recognize that it should optimize both branches,
although I do not know if that makes a difference for any compiler
commonly used to compile libnetconf2 (that is, I suspect that they are
all smart enough to realize is that ""a && b"" is likely true, then ""a""
is likely true and ""b"" is likely true), and, surprisingly, it appears to me
that glibc's assert() does not include a compiler branch hint (although,
for example, BUG_ON() in the Linux kernel did for x86_64 when I
last checked).


Separated assertions can be more readable, sometimes eliminating
parentheses, often making references to the same values line up
on the same columns, which can make range checks more obvious,
and sometimes changing multi-line conditions to separate single
line conditions, which can be recognized separately.
Consider, for example, how columnization in this makes this range
check more recongizable and makes it easier to recognize in a glance
that it is a bounds check and what the bounds are:
         assert(reg.vstride >= 0 && reg.vstride < ARRAY_SIZE(vstride_for_reg));
                 ... vs. ...

         assert(reg.vstride >= 0);
         assert(reg.vstride < ARRAY_SIZE(vstride_for_reg));

A possible counter-argument to this might be that, in a sequence of
assertions, it can be informative to group related assertions together.
That can be true, but it is possible to get this grouping other means,
such as by using blank lines to separate expressly such grouping, and
still have the more informative assertion failure messages from separate
assertion calls.


Thank you for considering this patch submission.","No problem.  It's not how I'd do it, but I'm fine with your call.  Keeping developers happy with their preferred coding style will probably have a bigger outcome than this patch.  I just had an itch to make the change and then didn't want to drop the change from my side without giving you the chance to integrate it.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,158,2019-06-26T23:11:28Z,2019-06-27T06:22:02Z,2019-06-27T07:20:57Z,MERGED,True,20,12,3,https://github.com/neheb,Remove deprecated OpenSSL APIs,1,[],https://github.com/CESNET/libnetconf2/pull/158,https://github.com/neheb,1,https://github.com/CESNET/libnetconf2/pull/158,Added compatibility defines.,Added compatibility defines.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,158,2019-06-26T23:11:28Z,2019-06-27T06:22:02Z,2019-06-27T07:20:57Z,MERGED,True,20,12,3,https://github.com/neheb,Remove deprecated OpenSSL APIs,1,[],https://github.com/CESNET/libnetconf2/pull/158,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/158#issuecomment-506080265,Added compatibility defines.,"Codecov Report

Merging #158 into master will decrease coverage by 0.03%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##           master     #158      +/-   ##
==========================================
- Coverage   38.14%   38.11%   -0.04%     
==========================================
  Files          23       23              
  Lines        9959     9959              
  Branches     1948     1948              
==========================================
- Hits         3799     3796       -3     
  Misses       5216     5216              
- Partials      944      947       +3



Impacted Files
Coverage Δ





src/session.c
40.49% <ø> (-0.14%)
⬇️


src/session_client_tls.c
28.08% <0%> (ø)
⬆️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8b7101b...4f552d6. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,158,2019-06-26T23:11:28Z,2019-06-27T06:22:02Z,2019-06-27T07:20:57Z,MERGED,True,20,12,3,https://github.com/neheb,Remove deprecated OpenSSL APIs,1,[],https://github.com/CESNET/libnetconf2/pull/158,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/158#issuecomment-506208985,Added compatibility defines.,"Hi,
seems fine, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,159,2019-07-10T13:15:27Z,2019-07-10T13:21:29Z,2019-07-10T13:21:29Z,CLOSED,False,847,745,13,https://github.com/michalvasko,New netopeer2 merge,9,[],https://github.com/CESNET/libnetconf2/pull/159,https://github.com/michalvasko,1,https://github.com/CESNET/libnetconf2/pull/159,Changes for the new netopeer2 implementation.,Changes for the new netopeer2 implementation.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,160,2019-07-16T01:17:35Z,2019-07-16T13:11:25Z,2019-07-16T19:36:30Z,MERGED,True,6,0,3,https://github.com/neheb,Add support for musl libc,1,[],https://github.com/CESNET/libnetconf2/pull/160,https://github.com/neheb,1,https://github.com/CESNET/libnetconf2/pull/160,"musl does not support pthread_rwlockattr_setkind_np. Don't use it if it is
not available.
Based on: https://github.com/openwrt/packages/blob/master/libs/libnetconf2/patches/001-fix-pthread-error","musl does not support pthread_rwlockattr_setkind_np. Don't use it if it is
not available.
Based on: https://github.com/openwrt/packages/blob/master/libs/libnetconf2/patches/001-fix-pthread-error",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,160,2019-07-16T01:17:35Z,2019-07-16T13:11:25Z,2019-07-16T19:36:30Z,MERGED,True,6,0,3,https://github.com/neheb,Add support for musl libc,1,[],https://github.com/CESNET/libnetconf2/pull/160,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/160#issuecomment-511629279,"musl does not support pthread_rwlockattr_setkind_np. Don't use it if it is
not available.
Based on: https://github.com/openwrt/packages/blob/master/libs/libnetconf2/patches/001-fix-pthread-error","Codecov Report

Merging #160 into master will decrease coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #160      +/-   ##
==========================================
- Coverage   38.14%   38.12%   -0.03%     
==========================================
  Files          23       23              
  Lines        9959     9959              
  Branches     1948     1948              
==========================================
- Hits         3799     3797       -2     
  Misses       5216     5216              
- Partials      944      946       +2



Impacted Files
Coverage Δ





src/session_server.c
20.74% <ø> (ø)
⬆️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7879bf3...153fe40. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,160,2019-07-16T01:17:35Z,2019-07-16T13:11:25Z,2019-07-16T19:36:30Z,MERGED,True,6,0,3,https://github.com/neheb,Add support for musl libc,1,[],https://github.com/CESNET/libnetconf2/pull/160,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/160#issuecomment-511809180,"musl does not support pthread_rwlockattr_setkind_np. Don't use it if it is
not available.
Based on: https://github.com/openwrt/packages/blob/master/libs/libnetconf2/patches/001-fix-pthread-error","Hi,
okay, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,161,2019-07-16T01:20:10Z,2019-07-16T13:07:51Z,2019-07-16T19:36:09Z,MERGED,True,1,1,1,https://github.com/neheb,Fix format security warning in newer GCC,1,[],https://github.com/CESNET/libnetconf2/pull/161,https://github.com/neheb,1,https://github.com/CESNET/libnetconf2/pull/161,"In OpenWrt, -Werror=format-string is passed, making this fail compilation.
printf style functions are meant to work with format strings anyway.","In OpenWrt, -Werror=format-string is passed, making this fail compilation.
printf style functions are meant to work with format strings anyway.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,161,2019-07-16T01:20:10Z,2019-07-16T13:07:51Z,2019-07-16T19:36:09Z,MERGED,True,1,1,1,https://github.com/neheb,Fix format security warning in newer GCC,1,[],https://github.com/CESNET/libnetconf2/pull/161,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/161#issuecomment-511631942,"In OpenWrt, -Werror=format-string is passed, making this fail compilation.
printf style functions are meant to work with format strings anyway.","Codecov Report

Merging #161 into master will decrease coverage by 0.02%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##           master     #161      +/-   ##
==========================================
- Coverage   38.14%   38.12%   -0.03%     
==========================================
  Files          23       23              
  Lines        9959     9959              
  Branches     1948     1948              
==========================================
- Hits         3799     3797       -2     
- Misses       5216     5217       +1     
- Partials      944      945       +1



Impacted Files
Coverage Δ





src/io.c
45.47% <0%> (ø)
⬆️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7879bf3...194854b. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,161,2019-07-16T01:20:10Z,2019-07-16T13:07:51Z,2019-07-16T19:36:09Z,MERGED,True,1,1,1,https://github.com/neheb,Fix format security warning in newer GCC,1,[],https://github.com/CESNET/libnetconf2/pull/161,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/161#issuecomment-511807881,"In OpenWrt, -Werror=format-string is passed, making this fail compilation.
printf style functions are meant to work with format strings anyway.","Hi,
okay, no problem.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,165,2019-08-28T18:54:33Z,2019-09-02T10:09:11Z,2019-09-02T10:09:11Z,MERGED,True,18,6,4,https://github.com/kpbarrett,Fix issue where thread specific data is dereferenced inside the key value destructor,1,[],https://github.com/CESNET/libnetconf2/pull/165,https://github.com/kpbarrett,1,https://github.com/CESNET/libnetconf2/pull/165,"The destructor nc_client_context_free() calls out to internals which ultimately call nc_client_context_location(). This function uses pthread_getspecific() to get the thread-specific context data, creating it if it does not exist.
When called by the destructor, pthread_getspecific() returns NULL because the thread-specific data is being destroyed. (see pthread_key_create(3)). This causes a thread-specific context to be allocated while the thread's context is being destroyed, leading to nasty effects including segfaults especially when more than one thread is used.
The change replaces the internal API calls with calls which use a specific context location.","The destructor nc_client_context_free() calls out to internals which ultimately call nc_client_context_location(). This function uses pthread_getspecific() to get the thread-specific context data, creating it if it does not exist.
When called by the destructor, pthread_getspecific() returns NULL because the thread-specific data is being destroyed. (see pthread_key_create(3)). This causes a thread-specific context to be allocated while the thread's context is being destroyed, leading to nasty effects including segfaults especially when more than one thread is used.
The change replaces the internal API calls with calls which use a specific context location.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,165,2019-08-28T18:54:33Z,2019-09-02T10:09:11Z,2019-09-02T10:09:11Z,MERGED,True,18,6,4,https://github.com/kpbarrett,Fix issue where thread specific data is dereferenced inside the key value destructor,1,[],https://github.com/CESNET/libnetconf2/pull/165,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/165#issuecomment-527089884,"The destructor nc_client_context_free() calls out to internals which ultimately call nc_client_context_location(). This function uses pthread_getspecific() to get the thread-specific context data, creating it if it does not exist.
When called by the destructor, pthread_getspecific() returns NULL because the thread-specific data is being destroyed. (see pthread_key_create(3)). This causes a thread-specific context to be allocated while the thread's context is being destroyed, leading to nasty effects including segfaults especially when more than one thread is used.
The change replaces the internal API calls with calls which use a specific context location.","Hi,
seems correct, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,167,2019-09-08T11:37:23Z,2019-09-09T05:43:37Z,2019-09-09T05:43:37Z,MERGED,True,45,0,1,https://github.com/brchiu,Modify for avoid deprecated functions of libssh,1,[],https://github.com/CESNET/libnetconf2/pull/167,https://github.com/brchiu,1,https://github.com/CESNET/libnetconf2/pull/167,"ssh_get_publickey() becomes deprecated function from libssh 0.8.0.
ssh_get_publickey() and ssh_write_knownhost() become deprecated
functions from libssh 0.9.0.","ssh_get_publickey() becomes deprecated function from libssh 0.8.0.
ssh_get_publickey() and ssh_write_knownhost() become deprecated
functions from libssh 0.9.0.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,167,2019-09-08T11:37:23Z,2019-09-09T05:43:37Z,2019-09-09T05:43:37Z,MERGED,True,45,0,1,https://github.com/brchiu,Modify for avoid deprecated functions of libssh,1,[],https://github.com/CESNET/libnetconf2/pull/167,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/167#issuecomment-529195415,"ssh_get_publickey() becomes deprecated function from libssh 0.8.0.
ssh_get_publickey() and ssh_write_knownhost() become deprecated
functions from libssh 0.9.0.","Codecov Report

Merging #167 into master will not change coverage.
The diff coverage is 0%.


@@           Coverage Diff           @@
##           master     #167   +/-   ##
=======================================
  Coverage   38.14%   38.14%           
=======================================
  Files          23       23           
  Lines        9965     9965           
  Branches     1949     1949           
=======================================
  Hits         3801     3801           
  Misses       5217     5217           
  Partials      947      947



Impacted Files
Coverage Δ





src/session_client_ssh.c
26.51% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fa3c5aa...c6f9b33. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,167,2019-09-08T11:37:23Z,2019-09-09T05:43:37Z,2019-09-09T05:43:37Z,MERGED,True,45,0,1,https://github.com/brchiu,Modify for avoid deprecated functions of libssh,1,[],https://github.com/CESNET/libnetconf2/pull/167,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/167#issuecomment-529308441,"ssh_get_publickey() becomes deprecated function from libssh 0.8.0.
ssh_get_publickey() and ssh_write_knownhost() become deprecated
functions from libssh 0.9.0.","Hi,
no problem, merged.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,169,2019-09-09T12:11:24Z,2019-09-09T14:02:44Z,2019-09-09T14:02:44Z,MERGED,True,1,1,1,https://github.com/mekleo,Wrong umask prevents temporary private key access,1,[],https://github.com/CESNET/libnetconf2/pull/169,https://github.com/mekleo,1,https://github.com/CESNET/libnetconf2/pull/169,"Hi,
umask 0600 prevents the user from reading his own temporary private key file.
0177 might be the intended mask.
Kind regards.","Hi,
umask 0600 prevents the user from reading his own temporary private key file.
0177 might be the intended mask.
Kind regards.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,169,2019-09-09T12:11:24Z,2019-09-09T14:02:44Z,2019-09-09T14:02:44Z,MERGED,True,1,1,1,https://github.com/mekleo,Wrong umask prevents temporary private key access,1,[],https://github.com/CESNET/libnetconf2/pull/169,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/169#issuecomment-529449295,"Hi,
umask 0600 prevents the user from reading his own temporary private key file.
0177 might be the intended mask.
Kind regards.","Codecov Report

Merging #169 into master will not change coverage.
The diff coverage is 0%.


@@           Coverage Diff           @@
##           master     #169   +/-   ##
=======================================
  Coverage   38.12%   38.12%           
=======================================
  Files          23       23           
  Lines        9962     9962           
  Branches     1949     1949           
=======================================
  Hits         3798     3798           
  Misses       5217     5217           
  Partials      947      947



Impacted Files
Coverage Δ





src/session_server_ssh.c
24.31% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5147e78...8f8cea7. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,169,2019-09-09T12:11:24Z,2019-09-09T14:02:44Z,2019-09-09T14:02:44Z,MERGED,True,1,1,1,https://github.com/mekleo,Wrong umask prevents temporary private key access,1,[],https://github.com/CESNET/libnetconf2/pull/169,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/169#issuecomment-529489872,"Hi,
umask 0600 prevents the user from reading his own temporary private key file.
0177 might be the intended mask.
Kind regards.","Hi,
you are right, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,171,2019-09-21T12:52:12Z,2019-09-23T06:21:11Z,2019-09-23T06:21:11Z,MERGED,True,30,0,2,https://github.com/brchiu,Add uninstall capability,1,[],https://github.com/CESNET/libnetconf2/pull/171,https://github.com/brchiu,1,https://github.com/CESNET/libnetconf2/pull/171,Mimic libyang's approach to add make uninstall capability.,Mimic libyang's approach to add make uninstall capability.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,171,2019-09-21T12:52:12Z,2019-09-23T06:21:11Z,2019-09-23T06:21:11Z,MERGED,True,30,0,2,https://github.com/brchiu,Add uninstall capability,1,[],https://github.com/CESNET/libnetconf2/pull/171,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/171#issuecomment-533796766,Mimic libyang's approach to add make uninstall capability.,"Codecov Report

Merging #171 into master will decrease coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #171      +/-   ##
==========================================
- Coverage   38.14%   38.12%   -0.03%     
==========================================
  Files          23       23              
  Lines        9962     9962              
  Branches     1949     1949              
==========================================
- Hits         3800     3798       -2     
  Misses       5217     5217              
- Partials      945      947       +2



Impacted Files
Coverage Δ





src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7b310b6...81980a8. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,171,2019-09-21T12:52:12Z,2019-09-23T06:21:11Z,2019-09-23T06:21:11Z,MERGED,True,30,0,2,https://github.com/brchiu,Add uninstall capability,1,[],https://github.com/CESNET/libnetconf2/pull/171,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/171#issuecomment-533972479,Mimic libyang's approach to add make uninstall capability.,"Hi,
fine, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/rjarry,1,https://github.com/CESNET/libnetconf2/pull/175,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542141001,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","Codecov Report

Merging #175 into master will decrease coverage by 0.05%.
The diff coverage is 17.64%.


@@            Coverage Diff             @@
##           master     #175      +/-   ##
==========================================
- Coverage   38.14%   38.09%   -0.06%     
==========================================
  Files          23       23              
  Lines        9962     9976      +14     
  Branches     1949     1952       +3     
==========================================
  Hits         3800     3800              
- Misses       5217     5226       +9     
- Partials      945      950       +5



Impacted Files
Coverage Δ





src/io.c
44.9% <17.64%> (-0.58%)
⬇️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️


src/session_server_tls.c
28.24% <0%> (-0.11%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 287043a...42026ae. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/brchiu,3,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542153557,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","@rjarry
Thanks for addressing this issue. I also encountered a similar one for SSH case with Print error (No such file or directory) error message. Can your approach apply to it ?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542212561,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","Hi,
depending on how we resolve CESNET/libyang#903, resetting errno may not be needed.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/rjarry,5,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542268065,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","@rjarry
Thanks for addressing this issue. I also encountered a similar one for SSH case with Print error (No such file or directory) error message. Can your approach apply to it ?

@brchiu I don't think so, I only handle EAGAIN and EINTR, No such file or directory is ENOENT and is a real error.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/rjarry,6,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542275345,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","depending on how we resolve CESNET/libyang#903, resetting errno may not be needed.

Indeed, I removed the first commit.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/michalvasko,7,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542531639,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903","Hi,
it is fine now, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,175,2019-10-15T09:50:28Z,2019-10-16T05:56:54Z,2019-10-16T07:39:02Z,MERGED,True,16,5,1,https://github.com/rjarry,io fixes on non-blocking FDs,1,[],https://github.com/CESNET/libnetconf2/pull/175,https://github.com/rjarry,8,https://github.com/CESNET/libnetconf2/pull/175#issuecomment-542567327,"These are fixes for problems I encountered with the UNIX transport. Basically, when sending large configurations to netopeer2-server, since the socket fd is non-blocking, we can get EAGAIN errors upon write() if the socket buffer is full and the server does not read fast enough.
These errors are already handled in libnetconf2 but errno is not reset and libyang checks it (since commit CESNET/libyang@609d708). This causes the operation to fail with the following error:
Print error (Resource temporarily unavailable).

Work around the problem by resetting errno to 0 in case of EAGAIN or EINTR.
Also, if the error is EINTR do not wait before trying to read/write again.
I am not sure this is the correct approach, I proposed another (maybe complementary?) solution in CESNET/libyang#903",👍,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,177,2019-10-16T10:12:36Z,2019-10-16T10:30:43Z,2019-10-16T10:38:26Z,MERGED,True,4,4,1,https://github.com/rjarry,session_client: fix segfault on NC_MSG_REPLY_ERR_MSGID,1,[],https://github.com/CESNET/libnetconf2/pull/177,https://github.com/rjarry,1,https://github.com/CESNET/libnetconf2/pull/177,"When retrieve_schema_data_getschema or build_schema_info_yl receive an NC_MSG_REPLY_ERR_MSGID error, they do not call nc_recv_reply again to receive the expected message.
However, when msg == NC_MSG_REPLY_ERR_MSGID, reply is necessarily NULL, which causes a segfault when accessing the reply->type field.
Call nc_recv_reply again if we receive an NC_MSG_REPLY_ERR_MSGID error.
Also, nc_recv_reply may leave reply NULL for other reasons (NC_MSG_ERROR
is not the only case). Return an error if reply is NULL to avoid potential further segfaults.","When retrieve_schema_data_getschema or build_schema_info_yl receive an NC_MSG_REPLY_ERR_MSGID error, they do not call nc_recv_reply again to receive the expected message.
However, when msg == NC_MSG_REPLY_ERR_MSGID, reply is necessarily NULL, which causes a segfault when accessing the reply->type field.
Call nc_recv_reply again if we receive an NC_MSG_REPLY_ERR_MSGID error.
Also, nc_recv_reply may leave reply NULL for other reasons (NC_MSG_ERROR
is not the only case). Return an error if reply is NULL to avoid potential further segfaults.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,177,2019-10-16T10:12:36Z,2019-10-16T10:30:43Z,2019-10-16T10:38:26Z,MERGED,True,4,4,1,https://github.com/rjarry,session_client: fix segfault on NC_MSG_REPLY_ERR_MSGID,1,[],https://github.com/CESNET/libnetconf2/pull/177,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/177#issuecomment-542637017,"When retrieve_schema_data_getschema or build_schema_info_yl receive an NC_MSG_REPLY_ERR_MSGID error, they do not call nc_recv_reply again to receive the expected message.
However, when msg == NC_MSG_REPLY_ERR_MSGID, reply is necessarily NULL, which causes a segfault when accessing the reply->type field.
Call nc_recv_reply again if we receive an NC_MSG_REPLY_ERR_MSGID error.
Also, nc_recv_reply may leave reply NULL for other reasons (NC_MSG_ERROR
is not the only case). Return an error if reply is NULL to avoid potential further segfaults.","Codecov Report

Merging #177 into master will decrease coverage by 0.01%.
The diff coverage is 0%.


@@            Coverage Diff            @@
##           master    #177      +/-   ##
=========================================
- Coverage   38.11%   38.1%   -0.02%     
=========================================
  Files          23      23              
  Lines        9972    9972              
  Branches     1952    1952              
=========================================
- Hits         3801    3800       -1     
  Misses       5222    5222              
- Partials      949     950       +1



Impacted Files
Coverage Δ





src/session_client.c
25.08% <0%> (ø)
⬆️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 373a40a...2c4d9de. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,177,2019-10-16T10:12:36Z,2019-10-16T10:30:43Z,2019-10-16T10:38:26Z,MERGED,True,4,4,1,https://github.com/rjarry,session_client: fix segfault on NC_MSG_REPLY_ERR_MSGID,1,[],https://github.com/CESNET/libnetconf2/pull/177,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/177#issuecomment-542637157,"When retrieve_schema_data_getschema or build_schema_info_yl receive an NC_MSG_REPLY_ERR_MSGID error, they do not call nc_recv_reply again to receive the expected message.
However, when msg == NC_MSG_REPLY_ERR_MSGID, reply is necessarily NULL, which causes a segfault when accessing the reply->type field.
Call nc_recv_reply again if we receive an NC_MSG_REPLY_ERR_MSGID error.
Also, nc_recv_reply may leave reply NULL for other reasons (NC_MSG_ERROR
is not the only case). Return an error if reply is NULL to avoid potential further segfaults.","Hi,
okay, no problem, thanks.
Regards,
Michal",True,{'THUMBS_UP': ['https://github.com/rjarry']}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,178,2019-10-16T10:19:59Z,2019-10-16T10:56:48Z,2019-10-16T10:58:47Z,MERGED,True,6,22,1,https://github.com/rjarry,session_client: fix user searchpath for unix/fd transports,1,[],https://github.com/CESNET/libnetconf2/pull/178,https://github.com/rjarry,1,https://github.com/CESNET/libnetconf2/pull/178,"The nc_session_new_ctx() function creates a fresh libyang context (unless an explicit context has been provided) and initializes the context search dirs with the user search path (if set) and NC_SCHEMAS_DIR.
This function is only called for the SSH and TLS transports. Making the user searchpath ignored when using the UNIX and FD transports. Call it for all transports.
Fixes: fd5b668 (""client CHANGE rewrite loading the schemas into context when connecting to a server"")
Fixes: ac7fa2f (""add support for unix socket transport"")","The nc_session_new_ctx() function creates a fresh libyang context (unless an explicit context has been provided) and initializes the context search dirs with the user search path (if set) and NC_SCHEMAS_DIR.
This function is only called for the SSH and TLS transports. Making the user searchpath ignored when using the UNIX and FD transports. Call it for all transports.
Fixes: fd5b668 (""client CHANGE rewrite loading the schemas into context when connecting to a server"")
Fixes: ac7fa2f (""add support for unix socket transport"")",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,178,2019-10-16T10:19:59Z,2019-10-16T10:56:48Z,2019-10-16T10:58:47Z,MERGED,True,6,22,1,https://github.com/rjarry,session_client: fix user searchpath for unix/fd transports,1,[],https://github.com/CESNET/libnetconf2/pull/178,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/178#issuecomment-542641773,"The nc_session_new_ctx() function creates a fresh libyang context (unless an explicit context has been provided) and initializes the context search dirs with the user search path (if set) and NC_SCHEMAS_DIR.
This function is only called for the SSH and TLS transports. Making the user searchpath ignored when using the UNIX and FD transports. Call it for all transports.
Fixes: fd5b668 (""client CHANGE rewrite loading the schemas into context when connecting to a server"")
Fixes: ac7fa2f (""add support for unix socket transport"")","Codecov Report

Merging #178 into master will increase coverage by 0.02%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##           master     #178      +/-   ##
==========================================
+ Coverage   38.11%   38.13%   +0.02%     
==========================================
  Files          23       23              
  Lines        9972     9966       -6     
  Branches     1952     1950       -2     
==========================================
  Hits         3801     3801              
+ Misses       5222     5216       -6     
  Partials      949      949



Impacted Files
Coverage Δ





src/session_client.c
25.18% <0%> (+0.1%)
⬆️


src/session_server_ssh.c
24.31% <0%> (-0.13%)
⬇️


src/session_server_tls.c
28.35% <0%> (+0.1%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 373a40a...484c112. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,178,2019-10-16T10:19:59Z,2019-10-16T10:56:48Z,2019-10-16T10:58:47Z,MERGED,True,6,22,1,https://github.com/rjarry,session_client: fix user searchpath for unix/fd transports,1,[],https://github.com/CESNET/libnetconf2/pull/178,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/178#issuecomment-542645621,"The nc_session_new_ctx() function creates a fresh libyang context (unless an explicit context has been provided) and initializes the context search dirs with the user search path (if set) and NC_SCHEMAS_DIR.
This function is only called for the SSH and TLS transports. Making the user searchpath ignored when using the UNIX and FD transports. Call it for all transports.
Fixes: fd5b668 (""client CHANGE rewrite loading the schemas into context when connecting to a server"")
Fixes: ac7fa2f (""add support for unix socket transport"")","Hi,
seems fine, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,178,2019-10-16T10:19:59Z,2019-10-16T10:56:48Z,2019-10-16T10:58:47Z,MERGED,True,6,22,1,https://github.com/rjarry,session_client: fix user searchpath for unix/fd transports,1,[],https://github.com/CESNET/libnetconf2/pull/178,https://github.com/rjarry,4,https://github.com/CESNET/libnetconf2/pull/178#issuecomment-542646271,"The nc_session_new_ctx() function creates a fresh libyang context (unless an explicit context has been provided) and initializes the context search dirs with the user search path (if set) and NC_SCHEMAS_DIR.
This function is only called for the SSH and TLS transports. Making the user searchpath ignored when using the UNIX and FD transports. Call it for all transports.
Fixes: fd5b668 (""client CHANGE rewrite loading the schemas into context when connecting to a server"")
Fixes: ac7fa2f (""add support for unix socket transport"")",Thanks @michalvasko !,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,188,2019-12-16T14:02:42Z,2020-01-08T21:00:24Z,2020-01-10T08:11:20Z,CLOSED,False,272,186,22,https://github.com/ClausKlein,Feature/cmake export config,6,[],https://github.com/CESNET/libnetconf2/pull/188,https://github.com/ClausKlein,1,https://github.com/CESNET/libnetconf2/pull/188,"cmakelint all cmake files too
fix errors in cmake modules used.
revent compile errors if libcrypt is not availeable on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.13 is required!
The cmake config files are exported now to be later used:
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","cmakelint all cmake files too
fix errors in cmake modules used.
revent compile errors if libcrypt is not availeable on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.13 is required!
The cmake config files are exported now to be later used:
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,188,2019-12-16T14:02:42Z,2020-01-08T21:00:24Z,2020-01-10T08:11:20Z,CLOSED,False,272,186,22,https://github.com/ClausKlein,Feature/cmake export config,6,[],https://github.com/CESNET/libnetconf2/pull/188,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/188#issuecomment-571992255,"cmakelint all cmake files too
fix errors in cmake modules used.
revent compile errors if libcrypt is not availeable on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.13 is required!
The cmake config files are exported now to be later used:
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,
sorry for not replying sooner but it seemed to me this was not a critical pull request.
Firstly, please change the base branch to devel, we do not accept pull request to master anymore. Now, as you wrote (and that I was afraid of), these changes require cmake 3.13 which we simply cannot yet require for libnetconf2, it is too soon (as seeing that, for example, the very recent CentOS 8 has only cmake 3.11, it is still years away for being available on all the distributions).
However, it seems to me that many of the changes you made do not require the new cmake and are mostly improvements and minor fixes and so if you are willing, you can keep only those and I will be happy to merge them.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,188,2019-12-16T14:02:42Z,2020-01-08T21:00:24Z,2020-01-10T08:11:20Z,CLOSED,False,272,186,22,https://github.com/ClausKlein,Feature/cmake export config,6,[],https://github.com/CESNET/libnetconf2/pull/188,https://github.com/ClausKlein,3,https://github.com/CESNET/libnetconf2/pull/188#issuecomment-572253997,"cmakelint all cmake files too
fix errors in cmake modules used.
revent compile errors if libcrypt is not availeable on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.13 is required!
The cmake config files are exported now to be later used:
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Ok, I will try if it works. fetchcontent was first added in v3.11 (about 3 years old!)
https://cmake.org/cmake/help/latest/release/3.11.html?highlight=fetchcontent#modules",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,188,2019-12-16T14:02:42Z,2020-01-08T21:00:24Z,2020-01-10T08:11:20Z,CLOSED,False,272,186,22,https://github.com/ClausKlein,Feature/cmake export config,6,[],https://github.com/CESNET/libnetconf2/pull/188,https://github.com/ClausKlein,4,https://github.com/CESNET/libnetconf2/pull/188#issuecomment-572737221,"cmakelint all cmake files too
fix errors in cmake modules used.
revent compile errors if libcrypt is not availeable on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.13 is required!
The cmake config files are exported now to be later used:
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","by the way, do you know cmakelint?
Claus-MBP:libnetconf2 clausklein$ find . -name CMakeLists.txt | xargs cmakelint
Total Errors: 0
Claus-MBP:libnetconf2 clausklein$ find . -name '*.cmake' | xargs cmakelint
./CMakeModules/FindCMocka.cmake:0: Find modules should use uppercase names; consider using FindCMOCKA.cmake [convention/filename]
./CMakeModules/FindLibSSH.cmake:0: Find modules should use uppercase names; consider using FindLIBSSH.cmake [convention/filename]
./CMakeModules/FindLibVAL.cmake:0: Find modules should use uppercase names; consider using FindLIBVAL.cmake [convention/filename]
./CMakeModules/FindLibYANG.cmake:0: Find modules should use uppercase names; consider using FindLIBYANG.cmake [convention/filename]
./CMakeModules/FindPackageVersionCheck.cmake:0: Find modules should use uppercase names; consider using FindPACKAGEVERSIONCHECK.cmake [convention/filename]
./CMakeModules/FindPackageVersionCheck.cmake:0: Package should include FindPackageHandleStandardArgs [package/consistency]
./CMakeModules/FindPackageVersionCheck.cmake:0: Package should use FIND_PACKAGE_HANDLE_STANDARD_ARGS [package/consistency]
./CMakeModules/uninstall.cmake:27: Expression repeated inside endforeach; better to use only endforeach() [readability/logic]
./FindLibNETCONF2.cmake:0: Find modules should use uppercase names; consider using FindLIBNETCONF2.cmake [convention/filename]
./FindLibNETCONF2.cmake:39: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:39: Extra spaces between 'if' and its () [whitespace/extra]
./FindLibNETCONF2.cmake:41: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:42: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:42: Extra spaces between 'else' and its () [whitespace/extra]
./FindLibNETCONF2.cmake:42: Expression repeated inside else; better to use only else() [readability/logic]
./FindLibNETCONF2.cmake:44: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:57: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:72: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:72: Extra spaces between 'if' and its () [whitespace/extra]
./FindLibNETCONF2.cmake:73: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:75: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:76: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:77: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:78: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:79: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:79: Extra spaces between 'else' and its () [whitespace/extra]
./FindLibNETCONF2.cmake:79: Expression repeated inside else; better to use only else() [readability/logic]
./FindLibNETCONF2.cmake:80: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:81: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:81: Extra spaces between 'endif' and its () [whitespace/extra]
./FindLibNETCONF2.cmake:81: Expression repeated inside endif; better to use only endif() [readability/logic]
./FindLibNETCONF2.cmake:83: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:84: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:87: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:89: Do not mix upper and lower case commands [readability/mixedcase]
./FindLibNETCONF2.cmake:89: Extra spaces between 'endif' and its () [whitespace/extra]
./FindLibNETCONF2.cmake:89: Expression repeated inside endif; better to use only endif() [readability/logic]
./FindLibNETCONF2.cmake:0: Package should include FindPackageHandleStandardArgs [package/consistency]
./FindLibNETCONF2.cmake:0: Package should use FIND_PACKAGE_HANDLE_STANDARD_ARGS [package/consistency]
Total Errors: 39
Claus-MBP:libnetconf2 clausklein$",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,188,2019-12-16T14:02:42Z,2020-01-08T21:00:24Z,2020-01-10T08:11:20Z,CLOSED,False,272,186,22,https://github.com/ClausKlein,Feature/cmake export config,6,[],https://github.com/CESNET/libnetconf2/pull/188,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/188#issuecomment-572921695,"cmakelint all cmake files too
fix errors in cmake modules used.
revent compile errors if libcrypt is not availeable on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.13 is required!
The cmake config files are exported now to be later used:
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,
no, I don't. But the errors are reasonable and I think I write cmake files without any of these problems now. FindLibNETCONF2.cmake was written in 2015.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,196,2020-01-09T15:26:24Z,2020-01-10T07:28:47Z,2020-01-10T09:54:41Z,MERGED,True,1,1,1,https://github.com/jktjkt,Python: fix installation with non-standard include path target of libyang,1,[],https://github.com/CESNET/libnetconf2/pull/196,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/196,"Python: fix installation with non-standard include path target of libyang
When installed outside of default /usr prefix, the build fails because setup.py does not respect CMake's library locations. I have no idea whether it respects non-standard compilers etc, but this one was an issue that I hit:
x86_64-pc-linux-gnu-gcc -pthread -fPIC -I/home/jkt/temp/py-3.6/include -I/usr/include/python3.6m -c /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.c -o /home/jkt/work/prog/_build/libnetconf2/GCC_8_1_NETCONF-Debug/python/build/temp.linux-x86_64-3.6/home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.o -Wall -I/home/jkt/work/prog/_build/libnetconf2/GCC_8_1_NETCONF-Debug/python-I/opt/nc/include -DNC_ENABLED_SSH -DNC_ENABLED_TLS
In file included from /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.h:25,
                 from /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.c:21:
/home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/../src/session_client.h:22:10: fatal error: libyang/libyang.h: No such file or directory
 #include <libyang/libyang.h>
          ^~~~~~~~~~~~~~~~~~~

The end result requires a LD_LIBRARY_PATH override because RPATH information is getting lost as well, but hey, this is an improvement. It would have been nice if all CMake settings were respected, but that's outside of my experience.","Python: fix installation with non-standard include path target of libyang
When installed outside of default /usr prefix, the build fails because setup.py does not respect CMake's library locations. I have no idea whether it respects non-standard compilers etc, but this one was an issue that I hit:
x86_64-pc-linux-gnu-gcc -pthread -fPIC -I/home/jkt/temp/py-3.6/include -I/usr/include/python3.6m -c /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.c -o /home/jkt/work/prog/_build/libnetconf2/GCC_8_1_NETCONF-Debug/python/build/temp.linux-x86_64-3.6/home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.o -Wall -I/home/jkt/work/prog/_build/libnetconf2/GCC_8_1_NETCONF-Debug/python-I/opt/nc/include -DNC_ENABLED_SSH -DNC_ENABLED_TLS
In file included from /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.h:25,
                 from /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.c:21:
/home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/../src/session_client.h:22:10: fatal error: libyang/libyang.h: No such file or directory
 #include <libyang/libyang.h>
          ^~~~~~~~~~~~~~~~~~~

The end result requires a LD_LIBRARY_PATH override because RPATH information is getting lost as well, but hey, this is an improvement. It would have been nice if all CMake settings were respected, but that's outside of my experience.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,196,2020-01-09T15:26:24Z,2020-01-10T07:28:47Z,2020-01-10T09:54:41Z,MERGED,True,1,1,1,https://github.com/jktjkt,Python: fix installation with non-standard include path target of libyang,1,[],https://github.com/CESNET/libnetconf2/pull/196,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/196#issuecomment-572908722,"Python: fix installation with non-standard include path target of libyang
When installed outside of default /usr prefix, the build fails because setup.py does not respect CMake's library locations. I have no idea whether it respects non-standard compilers etc, but this one was an issue that I hit:
x86_64-pc-linux-gnu-gcc -pthread -fPIC -I/home/jkt/temp/py-3.6/include -I/usr/include/python3.6m -c /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.c -o /home/jkt/work/prog/_build/libnetconf2/GCC_8_1_NETCONF-Debug/python/build/temp.linux-x86_64-3.6/home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.o -Wall -I/home/jkt/work/prog/_build/libnetconf2/GCC_8_1_NETCONF-Debug/python-I/opt/nc/include -DNC_ENABLED_SSH -DNC_ENABLED_TLS
In file included from /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.h:25,
                 from /home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/netconf.c:21:
/home/jkt/work/cesnet/gerrit/CzechLight/cla-sysrepo/submodules/dependencies/libnetconf2/python/../src/session_client.h:22:10: fatal error: libyang/libyang.h: No such file or directory
 #include <libyang/libyang.h>
          ^~~~~~~~~~~~~~~~~~~

The end result requires a LD_LIBRARY_PATH override because RPATH information is getting lost as well, but hey, this is an improvement. It would have been nice if all CMake settings were respected, but that's outside of my experience.","Hi Jan,
based on the rest of the content in the file, I would say this is the right solution. Thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,197,2020-01-09T20:40:18Z,2020-01-10T10:15:29Z,2020-01-10T10:43:03Z,CLOSED,False,354,221,30,https://github.com/ClausKlein,Export cmake config files,5,[],https://github.com/CESNET/libnetconf2/pull/197,https://github.com/ClausKlein,1,https://github.com/CESNET/libnetconf2/pull/197,"cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,197,2020-01-09T20:40:18Z,2020-01-10T10:15:29Z,2020-01-10T10:43:03Z,CLOSED,False,354,221,30,https://github.com/ClausKlein,Export cmake config files,5,[],https://github.com/CESNET/libnetconf2/pull/197,https://github.com/ClausKlein,2,https://github.com/CESNET/libnetconf2/pull/197#issuecomment-572908562,"cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Please check the files under packages, I had problems with git rebase devel; sorry",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,197,2020-01-09T20:40:18Z,2020-01-10T10:15:29Z,2020-01-10T10:43:03Z,CLOSED,False,354,221,30,https://github.com/ClausKlein,Export cmake config files,5,[],https://github.com/CESNET/libnetconf2/pull/197,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/197#issuecomment-572933808,"cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,
okay, I have looked a bit more into the currently supported distributions and it is not looking good. So, unfortunately, I must require that the highest required cmake version to be only 2.8.12. Also, I am not a fan of including some optional statements in case the used cmake is of a higher version and would prefer to add these features once the particular cmake version is strictly required. So, if you can stick to this (which I think would still keep at least half this pull request, which are only fixes and not changes), I will merge it.
Also, you have included (maybe by a mistake) some reverts of changes I have made before (such as using ECDSA keys in tests instead of DSA) so please keep those.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,197,2020-01-09T20:40:18Z,2020-01-10T10:15:29Z,2020-01-10T10:43:03Z,CLOSED,False,354,221,30,https://github.com/ClausKlein,Export cmake config files,5,[],https://github.com/CESNET/libnetconf2/pull/197,https://github.com/ClausKlein,4,https://github.com/CESNET/libnetconf2/pull/197#issuecomment-572973683,"cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,

I understand. I may split the patches ones again. But not this month, sorry, I have no more time.

About cmake v2.8.12: There are to many fixes and improvements at current cmake; and this is v3.16!

I am not willing to work with cmake version less than v3.9.

With Regards,
Caus

„Es ist nicht genug, zu wissen, man muß auch anwenden;
     es ist nicht genug, zu wollen, man muß auch tun.“
Johann Wolfgang von Goethe <http://www.zitate-online.de/autor/goethe-johann-wolfgang-von/> (Werk: Wilhelm Meisters Wanderjahre)
…
 Am 10.01.2020 um 09:47 schrieb Michal Vasko ***@***.***>:

 Hi,
 okay, I have looked a bit more into the currently supported distributions and it is not looking good. So, unfortunately, I must require that the highest required cmake version to be only 2.8.12. Also, I am not a fan of including some optional statements in case the used cmake is of a higher version and would prefer to add these features once the particular cmake version is strictly required. So, if you can stick to this (which I think would still keep at least half this pull request, which are only fixes and not changes), I will merge it.

 Also, you have included (maybe by a mistake) some reverts of changes I have made before (such as using ECDSA keys in tests instead of DSA) so please keep those.

 Regards,
 Michal

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#197?email_source=notifications&email_token=AAN7QWW7Z7LGKGNJFP5NTDTQ5AY2ZA5CNFSM4KE6EMRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEITENMA#issuecomment-572933808>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAN7QWWO4QEQHO4WTLXHKGTQ5AY2ZANCNFSM4KE6EMRA>.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,197,2020-01-09T20:40:18Z,2020-01-10T10:15:29Z,2020-01-10T10:43:03Z,CLOSED,False,354,221,30,https://github.com/ClausKlein,Export cmake config files,5,[],https://github.com/CESNET/libnetconf2/pull/197,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/197#issuecomment-572976339,"cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,

I understand. I may split the patches ones again. But not this month, sorry, I have no more time.

No problem, that is up to you.

I am not willing to work with cmake version less than v3.9.

I understand. Then it will be up to us to gradually improve things and finally move to some newer cmake version once it will be possible.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,197,2020-01-09T20:40:18Z,2020-01-10T10:15:29Z,2020-01-10T10:43:03Z,CLOSED,False,354,221,30,https://github.com/ClausKlein,Export cmake config files,5,[],https://github.com/CESNET/libnetconf2/pull/197,https://github.com/michalvasko,6,https://github.com/CESNET/libnetconf2/pull/197#issuecomment-572983755,"cmakelint all cmake files too
fix errors in cmake modules used.
prevent compile errors if libcrypt is not available on BSD/OSX
see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is required!
The cmake config files are exported now to be used by other cmake projects  with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","I forgot to mention that you do not have to worry about the packaging commands and corresponding files, I will clean and refactor that a bit myself soon.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,198,2020-01-12T14:15:17Z,2020-01-20T12:45:48Z,2020-01-20T12:45:48Z,MERGED,True,185,134,14,https://github.com/ClausKlein,Prevent compile errors on OSX,10,[],https://github.com/CESNET/libnetconf2/pull/198,https://github.com/ClausKlein,1,https://github.com/CESNET/libnetconf2/pull/198,"clangtidy cmake files too
fix possible buffer overflow too","clangtidy cmake files too
fix possible buffer overflow too",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,198,2020-01-12T14:15:17Z,2020-01-20T12:45:48Z,2020-01-20T12:45:48Z,MERGED,True,185,134,14,https://github.com/ClausKlein,Prevent compile errors on OSX,10,[],https://github.com/CESNET/libnetconf2/pull/198,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/198#issuecomment-573428845,"clangtidy cmake files too
fix possible buffer overflow too","Codecov Report

Merging #198 into devel will decrease coverage by <.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel     #198      +/-   ##
==========================================
- Coverage   37.65%   37.64%   -0.01%     
==========================================
  Files          23       23              
  Lines       10133    10133              
  Branches     1984     1984              
==========================================
- Hits         3816     3815       -1     
  Misses       5364     5364              
- Partials      953      954       +1



Impacted Files
Coverage Δ





src/io.c
45.13% <ø> (ø)
⬆️


src/session_server_ssh.c
24.87% <ø> (ø)
⬆️


src/session_server.c
21.09% <ø> (ø)
⬆️


tests/test_server_thread.c
94.07% <ø> (ø)
⬆️


src/session_server_tls.c
29.09% <0%> (-0.12%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c4b3374...357f321. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,198,2020-01-12T14:15:17Z,2020-01-20T12:45:48Z,2020-01-20T12:45:48Z,MERGED,True,185,134,14,https://github.com/ClausKlein,Prevent compile errors on OSX,10,[],https://github.com/CESNET/libnetconf2/pull/198,https://github.com/ClausKlein,3,https://github.com/CESNET/libnetconf2/pull/198#issuecomment-573780439,"clangtidy cmake files too
fix possible buffer overflow too","Next week I’ll fix it

Regards,
Claus


Am Montag, 13. Januar 2020 schrieb Michal Vasko <notifications@github.com>:
…
 ***@***.**** requested changes on this pull request.

 Hi,
 it seems almost fine, just address my comments please.

 Regards,
 Michal
 ------------------------------

 In tests/CMakeLists.txt
 <#198 (comment)>:

 >  foreach(src IN LISTS libsrc)
      list(APPEND test_srcs ""../${src}"")
  endforeach()
  add_library(testobj OBJECT ${test_srcs})
 +########################################
 +
 +#TBD target_link_libraries(testobj netconf2)

 testobj does not need to be linked with libnetconf2, it is libnetconf2.
 ------------------------------

 In tests/CMakeLists.txt
 <#198 (comment)>:

 > +########################################
 +## TODO: what kind of hack is this? CK #

 Not sure what the problem here is.
 ------------------------------

 In CMakeLists.txt
 <#198 (comment)>:

 >      target_link_libraries(netconf2 ${OPENSSL_LIBRARIES})
      include_directories(${OPENSSL_INCLUDE_DIR})
  endif()

  # dependencies - libssh
 -if(ENABLE_SSH)
 +if(ENABLE_SSH AND OPENSSL_FOUND)

 SSH does not use OpenSSL directly to my knowledge, so if you want to have
 only SSH support, you do not need it. Should also probably be fixed in the
 if above.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#198?email_source=notifications&email_token=AAN7QWTH6AURPHBPGVDCQGLQ5R6V7A5CNFSM4KFX4QRKYY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCRQO6CQ#pullrequestreview-341896970>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAN7QWTUJAYPJNXW7YMUKA3Q5R6V7ANCNFSM4KFX4QRA>
 .",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,198,2020-01-12T14:15:17Z,2020-01-20T12:45:48Z,2020-01-20T12:45:48Z,MERGED,True,185,134,14,https://github.com/ClausKlein,Prevent compile errors on OSX,10,[],https://github.com/CESNET/libnetconf2/pull/198,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/198#issuecomment-576258349,"clangtidy cmake files too
fix possible buffer overflow too","Hi,
okay, seems fine now, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,199,2020-01-12T19:42:00Z,2020-01-21T21:02:36Z,2020-01-21T21:03:03Z,CLOSED,False,278,179,18,https://github.com/ClausKlein,Feature/cmake export config,27,[],https://github.com/CESNET/libnetconf2/pull/199,https://github.com/ClausKlein,1,https://github.com/CESNET/libnetconf2/pull/199,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is recommended!
The cmake config files are exported now to be used by other cmake projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is recommended!
The cmake config files are exported now to be used by other cmake projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,199,2020-01-12T19:42:00Z,2020-01-21T21:02:36Z,2020-01-21T21:03:03Z,CLOSED,False,278,179,18,https://github.com/ClausKlein,Feature/cmake export config,27,[],https://github.com/CESNET/libnetconf2/pull/199,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/199#issuecomment-574120263,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is recommended!
The cmake config files are exported now to be used by other cmake projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,
did you really want to create this pull request? Seems to me it is mostly a duplicate of #198 except it still requires cmake 3.9 which I said we will not accept.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,200,2020-01-13T09:51:34Z,2020-01-14T11:12:30Z,2020-04-20T14:03:12Z,MERGED,True,2,2,1,https://github.com/jktjkt,python: do not put generated files into the source tree,1,[],https://github.com/CESNET/libnetconf2/pull/200,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/200,"Untracked content shows up in git submodules, causing stuff to be marked ""dirty"" by various git-level tools.
Tested by temporarily putting the resulting target within ALL. The result is the same as without this change (and it remains unusable with no generated index, at least when building out-of-tree, BTW).","Untracked content shows up in git submodules, causing stuff to be marked ""dirty"" by various git-level tools.
Tested by temporarily putting the resulting target within ALL. The result is the same as without this change (and it remains unusable with no generated index, at least when building out-of-tree, BTW).",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,200,2020-01-13T09:51:34Z,2020-01-14T11:12:30Z,2020-04-20T14:03:12Z,MERGED,True,2,2,1,https://github.com/jktjkt,python: do not put generated files into the source tree,1,[],https://github.com/CESNET/libnetconf2/pull/200,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/200#issuecomment-574125011,"Untracked content shows up in git submodules, causing stuff to be marked ""dirty"" by various git-level tools.
Tested by temporarily putting the resulting target within ALL. The result is the same as without this change (and it remains unusable with no generated index, at least when building out-of-tree, BTW).","Hi,
okay, no problem.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,203,2020-01-21T21:21:59Z,2020-01-22T07:31:41Z,2020-01-22T20:16:43Z,CLOSED,False,98,49,7,https://github.com/ClausKlein,Add feature export cmake config,3,[],https://github.com/CESNET/libnetconf2/pull/203,https://github.com/ClausKlein,1,https://github.com/CESNET/libnetconf2/pull/203,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is recommended!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v3.9 is recommended!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/ClausKlein,1,https://github.com/CESNET/libnetconf2/pull/204,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/ClausKlein,2,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-577088050,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Perhaps you should install https://pypi.org/project/cmake/ on travis:

cmake-python-distributions was initially developed in September 2016 by Jean-Christophe Fillion-Robin to facilitate the distribution of project using scikit-build and depending on cmake",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/ClausKlein,3,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-577592463,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","No, this does not work with older cmake version (i.e. linux build on travis):

target_link_libraries(testobj libnetconf2::netconf2)
…
 Am 23.01.2020 um 10:08 schrieb Michal Vasko ***@***.***>:

 @michalvasko commented on this pull request.

 In tests/CMakeLists.txt <#204 (comment)>:

 > @@ -32,25 +32,20 @@ if(ENABLE_SSH OR ENABLE_TLS)
      endif()
  endif()

 -foreach(src IN LISTS libsrc)
 -    list(APPEND test_srcs ""../${src}"")
 -endforeach()
 -add_library(testobj OBJECT ${test_srcs})
 You mean add_library(<name> OBJECT <sources>)? I found it in the documentation of cmake 2.8.12 so it should work.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#204?email_source=notifications&email_token=AAN7QWUV5CJCLBSTVICZYZLQ7FM75A5CNFSM4KKBCNTKYY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCSYQBOY#discussion_r369999613>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAN7QWXCD32LSCV6K4SJNCDQ7FM75ANCNFSM4KKBCNTA>.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-577595759,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Okay, then please do not use this notation and keep the old one.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/ClausKlein,5,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-577614263,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","That is the problem: We do not longer the global include and defines!

target_link_libraries(testobj libnetconf2::netconf2) # this is needed to import definitions and include path from libnetconf2::netconf2

I do not understand, why the testobj lib is needed?
My understanding is, it contains the same contents than libnetconf2?

But it seems, this is not the case!
…
 Am 23.01.2020 um 10:21 schrieb Michal Vasko ***@***.***>:

 Okay, then please do not use this notation and keep the old one.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#204?email_source=notifications&email_token=AAN7QWU4BTES7OVSRW7O3F3Q7FOSNA5CNFSM4KKBCNTKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEJWWS3Y#issuecomment-577595759>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAN7QWUJBAJOXXEMASZYR7LQ7FOSNANCNFSM4KKBCNTA>.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/michalvasko,6,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-577625732,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,
right, actually testobj should use definitions and include paths from libnetconf2::netconf2 but cannot link it directly because it uses some special test macro definitions. I am starting to think your changes would cause more clutter than there is now.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/codecov-io,7,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-577822057,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Codecov Report

Merging #204 into devel will decrease coverage by 1.51%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel     #204      +/-   ##
==========================================
- Coverage   37.65%   36.13%   -1.52%     
==========================================
  Files          23       23              
  Lines       10133    10133              
  Branches     1984     1984              
==========================================
- Hits         3816     3662     -154     
- Misses       5364     5366       +2     
- Partials      953     1105     +152



Impacted Files
Coverage Δ





src/time.c
50.58% <0%> (-8.24%)
⬇️


src/messages_client.c
46.87% <0%> (-4.25%)
⬇️


src/io.c
41.41% <0%> (-3.73%)
⬇️


src/session_client_ssh.c
23.4% <0%> (-2.98%)
⬇️


src/session_server_tls.c
26.88% <0%> (-2.22%)
⬇️


src/session_server_ssh.c
23.22% <0%> (-1.78%)
⬇️


src/session.c
38.37% <0%> (-1.66%)
⬇️


src/session_server.c
20.33% <0%> (-0.76%)
⬇️


src/session_client.c
23.27% <0%> (-0.64%)
⬇️


src/session_client_tls.c
27.5% <0%> (-0.58%)
⬇️


... and 1 more






Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 2209191...18056e2. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/ClausKlein,8,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-578270612,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Yes, the version before was correct, but I have no idea why some tests fails?
Normally I write a test suite and link it agains the lib under test.

But with your -Wl,—wrap link options, something is strange!
…
 Am 24.01.2020 um 12:13 schrieb Michal Vasko ***@***.***>:

 this does not seem to me is the correct solution.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/ClausKlein,9,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-578273116,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","I would prefer this version:

ClausKlein@f555d61 <ClausKlein@f555d61>

But this does not work with older cmake version as on your travis linux build farm!
…
 Am 24.01.2020 um 12:13 schrieb Michal Vasko ***@***.***>:

 This way all the sources will be compiled again for every test, which may take quite some time and is completely unnecessary. I am sorry, but this does not seem to me is the correct solution.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,204,2020-01-22T07:30:35Z,2021-06-02T09:33:01Z,2021-06-02T09:33:01Z,CLOSED,False,104,147,9,https://github.com/ClausKlein,Feature/cmake export config,7,[],https://github.com/CESNET/libnetconf2/pull/204,https://github.com/michalvasko,10,https://github.com/CESNET/libnetconf2/pull/204#issuecomment-578703817,"see too https://github.com/Bagira80/More-Modern-CMake
NOTE: at least cmake v2.8.12 is required, but not tested with!
The cmake config files are exported now to be used by other cmake
projects with find_package():
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-config-version.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-targets.cmake
-- Installing:
/usr/local/lib/cmake/libnetconf2/libnetconf2-targets-release.cmake
-- Installing: /usr/local/lib/cmake/libnetconf2/libnetconf2-config.cmake","Hi,
yes, we are using special linker options to replace some functions and link our special test versions of the functions. I understand that may be confusing so I think you should just keep test build the way it is now and just fix the rest, if you want.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,210,2020-02-12T17:10:07Z,2020-02-13T08:05:57Z,2020-02-13T08:05:57Z,MERGED,True,10,4,2,https://github.com/mekleo,URL capability MUST contain a scheme,3,[],https://github.com/CESNET/libnetconf2/pull/210,https://github.com/mekleo,1,https://github.com/CESNET/libnetconf2/pull/210,"According to https://tools.ietf.org/html/rfc6241#section-8.8.3, the URL Capability Identifier MUST contain a scheme argument.
Hence, this capability cannot be merely infered from ietf-netconf's features. It has to be explicitly provided using for example
nc_server_set_capability(""urn:ietf:params:netconf:capability:url:1.0?scheme=scp,http,https,ftp,sftp,ftps,file"");
Since add_cpblt() cannot overwrite capabilities, the incomplete one ""urn:ietf:params:netconf:capability:url:1.0"" should not be added in the first place.
This bug prevents yangcli from proposing url leaves, as no protocol can be validated against that incomplete capability identifier.","According to https://tools.ietf.org/html/rfc6241#section-8.8.3, the URL Capability Identifier MUST contain a scheme argument.
Hence, this capability cannot be merely infered from ietf-netconf's features. It has to be explicitly provided using for example
nc_server_set_capability(""urn:ietf:params:netconf:capability:url:1.0?scheme=scp,http,https,ftp,sftp,ftps,file"");
Since add_cpblt() cannot overwrite capabilities, the incomplete one ""urn:ietf:params:netconf:capability:url:1.0"" should not be added in the first place.
This bug prevents yangcli from proposing url leaves, as no protocol can be validated against that incomplete capability identifier.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,210,2020-02-12T17:10:07Z,2020-02-13T08:05:57Z,2020-02-13T08:05:57Z,MERGED,True,10,4,2,https://github.com/mekleo,URL capability MUST contain a scheme,3,[],https://github.com/CESNET/libnetconf2/pull/210,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/210#issuecomment-585315639,"According to https://tools.ietf.org/html/rfc6241#section-8.8.3, the URL Capability Identifier MUST contain a scheme argument.
Hence, this capability cannot be merely infered from ietf-netconf's features. It has to be explicitly provided using for example
nc_server_set_capability(""urn:ietf:params:netconf:capability:url:1.0?scheme=scp,http,https,ftp,sftp,ftps,file"");
Since add_cpblt() cannot overwrite capabilities, the incomplete one ""urn:ietf:params:netconf:capability:url:1.0"" should not be added in the first place.
This bug prevents yangcli from proposing url leaves, as no protocol can be validated against that incomplete capability identifier.","Codecov Report

Merging #210 into devel will decrease coverage by <.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel     #210      +/-   ##
==========================================
- Coverage   37.51%   37.51%   -0.01%     
==========================================
  Files          23       23              
  Lines       10179    10177       -2     
  Branches     1997     1996       -1     
==========================================
- Hits         3819     3818       -1     
+ Misses       5406     5405       -1     
  Partials      954      954



Impacted Files
Coverage Δ





src/session.c
40.13% <ø> (+0.11%)
⬆️


src/session_server_ssh.c
24.87% <0%> (-0.13%)
⬇️


src/io.c
45.13% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 47c8efb...c983b45. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,210,2020-02-12T17:10:07Z,2020-02-13T08:05:57Z,2020-02-13T08:05:57Z,MERGED,True,10,4,2,https://github.com/mekleo,URL capability MUST contain a scheme,3,[],https://github.com/CESNET/libnetconf2/pull/210,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/210#issuecomment-585590524,"According to https://tools.ietf.org/html/rfc6241#section-8.8.3, the URL Capability Identifier MUST contain a scheme argument.
Hence, this capability cannot be merely infered from ietf-netconf's features. It has to be explicitly provided using for example
nc_server_set_capability(""urn:ietf:params:netconf:capability:url:1.0?scheme=scp,http,https,ftp,sftp,ftps,file"");
Since add_cpblt() cannot overwrite capabilities, the incomplete one ""urn:ietf:params:netconf:capability:url:1.0"" should not be added in the first place.
This bug prevents yangcli from proposing url leaves, as no protocol can be validated against that incomplete capability identifier.","Hi,
you are right, both the incorrect and correct capabilities are set but only the first wrong one is sent. Your fix is fine but please change the branch base to devel and just comment the code out with a note explaining that the capability must be set manually because of the need for supported protocols to be included. Thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,210,2020-02-12T17:10:07Z,2020-02-13T08:05:57Z,2020-02-13T08:05:57Z,MERGED,True,10,4,2,https://github.com/mekleo,URL capability MUST contain a scheme,3,[],https://github.com/CESNET/libnetconf2/pull/210,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/210#issuecomment-585601045,"According to https://tools.ietf.org/html/rfc6241#section-8.8.3, the URL Capability Identifier MUST contain a scheme argument.
Hence, this capability cannot be merely infered from ietf-netconf's features. It has to be explicitly provided using for example
nc_server_set_capability(""urn:ietf:params:netconf:capability:url:1.0?scheme=scp,http,https,ftp,sftp,ftps,file"");
Since add_cpblt() cannot overwrite capabilities, the incomplete one ""urn:ietf:params:netconf:capability:url:1.0"" should not be added in the first place.
This bug prevents yangcli from proposing url leaves, as no protocol can be validated against that incomplete capability identifier.","Much better, thanks, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,214,2020-03-24T13:52:57Z,2020-03-31T12:43:06Z,2020-03-31T12:43:06Z,MERGED,True,2,2,1,https://github.com/ravsz,Error log fixed,1,[],https://github.com/CESNET/libnetconf2/pull/214,https://github.com/ravsz,1,https://github.com/CESNET/libnetconf2/pull/214,"Currently error logs looks like: 'Call Home client ""(null)"" is not of periodic connection type.'","Currently error logs looks like: 'Call Home client ""(null)"" is not of periodic connection type.'",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,214,2020-03-24T13:52:57Z,2020-03-31T12:43:06Z,2020-03-31T12:43:06Z,MERGED,True,2,2,1,https://github.com/ravsz,Error log fixed,1,[],https://github.com/CESNET/libnetconf2/pull/214,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/214#issuecomment-606602548,"Currently error logs looks like: 'Call Home client ""(null)"" is not of periodic connection type.'","Right, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,215,2020-03-24T15:47:18Z,2020-03-31T13:53:22Z,2020-03-31T13:53:22Z,MERGED,True,1,1,1,https://github.com/ravsz,nc_server_ch_client_endpt_set_port,1,[],https://github.com/CESNET/libnetconf2/pull/215,https://github.com/ravsz,1,https://github.com/CESNET/libnetconf2/pull/215,invalid return code,invalid return code,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,215,2020-03-24T15:47:18Z,2020-03-31T13:53:22Z,2020-03-31T13:53:22Z,MERGED,True,1,1,1,https://github.com/ravsz,nc_server_ch_client_endpt_set_port,1,[],https://github.com/CESNET/libnetconf2/pull/215,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/215#issuecomment-606641674,invalid return code,"Hi,
right, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,220,2020-04-14T20:46:58Z,2020-04-20T07:06:59Z,2020-04-20T13:54:14Z,MERGED,True,83,19,4,https://github.com/apropp-molex,libnetconf2 CHANGE QNX compatibility,2,[],https://github.com/CESNET/libnetconf2/pull/220,https://github.com/apropp-molex,1,https://github.com/CESNET/libnetconf2/pull/220,"fixes #217
Below is a summary of the compatibility issues this solves:

Links against liblogin for QNX only
Checks if crypt.h, shadow.h exists instead of relying on OS checks
Accommodates different function signature for getspnam_r under QNX
Uses getpeereid for QNX only. This is because -D_XOPEN_SOURCE=500 in CMakeLists.txt caused conflict with -D_POSIX_C_SOURCE=200809L and using #define _XOPEN_SOURCE 500 in session_server.c caused a host of issues with pthread stuff. libpthread is removed from CMAKE_REQUIRED_LIBRARIES as it cmake failed to link while looking for getpeereid. libpthread is replaced by libc on QNX.
Other than those issues, I don't have a BSD/MAC system to test this against, so restricted it to QNX to avoid causing regression issues.","fixes #217
Below is a summary of the compatibility issues this solves:

Links against liblogin for QNX only
Checks if crypt.h, shadow.h exists instead of relying on OS checks
Accommodates different function signature for getspnam_r under QNX
Uses getpeereid for QNX only. This is because -D_XOPEN_SOURCE=500 in CMakeLists.txt caused conflict with -D_POSIX_C_SOURCE=200809L and using #define _XOPEN_SOURCE 500 in session_server.c caused a host of issues with pthread stuff. libpthread is removed from CMAKE_REQUIRED_LIBRARIES as it cmake failed to link while looking for getpeereid. libpthread is replaced by libc on QNX.
Other than those issues, I don't have a BSD/MAC system to test this against, so restricted it to QNX to avoid causing regression issues.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,220,2020-04-14T20:46:58Z,2020-04-20T07:06:59Z,2020-04-20T13:54:14Z,MERGED,True,83,19,4,https://github.com/apropp-molex,libnetconf2 CHANGE QNX compatibility,2,[],https://github.com/CESNET/libnetconf2/pull/220,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/220#issuecomment-616353807,"fixes #217
Below is a summary of the compatibility issues this solves:

Links against liblogin for QNX only
Checks if crypt.h, shadow.h exists instead of relying on OS checks
Accommodates different function signature for getspnam_r under QNX
Uses getpeereid for QNX only. This is because -D_XOPEN_SOURCE=500 in CMakeLists.txt caused conflict with -D_POSIX_C_SOURCE=200809L and using #define _XOPEN_SOURCE 500 in session_server.c caused a host of issues with pthread stuff. libpthread is removed from CMAKE_REQUIRED_LIBRARIES as it cmake failed to link while looking for getpeereid. libpthread is replaced by libc on QNX.
Other than those issues, I don't have a BSD/MAC system to test this against, so restricted it to QNX to avoid causing regression issues.","Hi,
almost, I will add some final minor improvements myself. Merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,222,2020-04-20T13:39:02Z,2020-04-20T13:45:08Z,2020-04-20T14:52:29Z,MERGED,True,4,4,1,https://github.com/jktjkt,cherry-pick DSA -> ECDSA from develop,1,[],https://github.com/CESNET/libnetconf2/pull/222,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/222,"This is required to keep libnetconf2's test suite working on recent distros such as Fedora 31 because they block DSA keys via their /etc/crypto-policies/back-ends/libssh.config:
[ci@f31-metacentrum-0000004457 libnetconf2]$ cat /etc/crypto-policies/back-ends/libssh.config
Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes256-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128-cbc
MACs hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,hmac-sha2-512
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
HostKeyAlgorithms rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com
PubkeyAcceptedKeyTypes rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com

...so the test suite fails there. When I enabled extra debugging, this is what I got:
[INF]: Interactive SSH authentication method was disabled.
[INF]: Password SSH authentication method was disabled.
[INF]: Publickey athentication.
[INF]: Trying to authenticate using pair ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa"" ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa.pub"".
[2020/04/20 09:28:39.601103, 3] ssh_key_algorithm_allowed:  Checking ssh-dss with list <rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com>
[2020/04/20 09:28:39.601168, 1] ssh_userauth_try_publickey:  The key algorithm 'ssh-dss' is not allowed to be used by PUBLICKEY_ACCEPTED_TYPES configuration option
[WRN]: Authentication denied.
[ERR]: Unable to authenticate to the remote server (all attempts via supported authentication methods failed).
[2020/04/20 09:28:39.601351, 3] ssh_socket_unbuffered_write:  Enabling POLLOUT for socket
[2020/04/20 09:28:39.601393, 3] packet_send2:  packet: wrote [type=1, len=32, padding_size=11, comp=20, payload=20]
[ERR]: Communication SSH socket unexpectedly closed.
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:248)
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:70)","This is required to keep libnetconf2's test suite working on recent distros such as Fedora 31 because they block DSA keys via their /etc/crypto-policies/back-ends/libssh.config:
[ci@f31-metacentrum-0000004457 libnetconf2]$ cat /etc/crypto-policies/back-ends/libssh.config
Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes256-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128-cbc
MACs hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,hmac-sha2-512
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
HostKeyAlgorithms rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com
PubkeyAcceptedKeyTypes rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com

...so the test suite fails there. When I enabled extra debugging, this is what I got:
[INF]: Interactive SSH authentication method was disabled.
[INF]: Password SSH authentication method was disabled.
[INF]: Publickey athentication.
[INF]: Trying to authenticate using pair ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa"" ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa.pub"".
[2020/04/20 09:28:39.601103, 3] ssh_key_algorithm_allowed:  Checking ssh-dss with list <rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com>
[2020/04/20 09:28:39.601168, 1] ssh_userauth_try_publickey:  The key algorithm 'ssh-dss' is not allowed to be used by PUBLICKEY_ACCEPTED_TYPES configuration option
[WRN]: Authentication denied.
[ERR]: Unable to authenticate to the remote server (all attempts via supported authentication methods failed).
[2020/04/20 09:28:39.601351, 3] ssh_socket_unbuffered_write:  Enabling POLLOUT for socket
[2020/04/20 09:28:39.601393, 3] packet_send2:  packet: wrote [type=1, len=32, padding_size=11, comp=20, payload=20]
[ERR]: Communication SSH socket unexpectedly closed.
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:248)
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:70)",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,222,2020-04-20T13:39:02Z,2020-04-20T13:45:08Z,2020-04-20T14:52:29Z,MERGED,True,4,4,1,https://github.com/jktjkt,cherry-pick DSA -> ECDSA from develop,1,[],https://github.com/CESNET/libnetconf2/pull/222,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/222#issuecomment-616563340,"This is required to keep libnetconf2's test suite working on recent distros such as Fedora 31 because they block DSA keys via their /etc/crypto-policies/back-ends/libssh.config:
[ci@f31-metacentrum-0000004457 libnetconf2]$ cat /etc/crypto-policies/back-ends/libssh.config
Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes256-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128-cbc
MACs hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,hmac-sha2-512
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
HostKeyAlgorithms rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com
PubkeyAcceptedKeyTypes rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com

...so the test suite fails there. When I enabled extra debugging, this is what I got:
[INF]: Interactive SSH authentication method was disabled.
[INF]: Password SSH authentication method was disabled.
[INF]: Publickey athentication.
[INF]: Trying to authenticate using pair ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa"" ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa.pub"".
[2020/04/20 09:28:39.601103, 3] ssh_key_algorithm_allowed:  Checking ssh-dss with list <rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com>
[2020/04/20 09:28:39.601168, 1] ssh_userauth_try_publickey:  The key algorithm 'ssh-dss' is not allowed to be used by PUBLICKEY_ACCEPTED_TYPES configuration option
[WRN]: Authentication denied.
[ERR]: Unable to authenticate to the remote server (all attempts via supported authentication methods failed).
[2020/04/20 09:28:39.601351, 3] ssh_socket_unbuffered_write:  Enabling POLLOUT for socket
[2020/04/20 09:28:39.601393, 3] packet_send2:  packet: wrote [type=1, len=32, padding_size=11, comp=20, payload=20]
[ERR]: Communication SSH socket unexpectedly closed.
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:248)
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:70)","Hi,
yeah, that was the reason I changed it in the current libnetconf2. I have no problem merging this and any similar pull requests if you think maintaining the legacy branches takes less effort than migrating to the current ones. I am not so sure about that.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,222,2020-04-20T13:39:02Z,2020-04-20T13:45:08Z,2020-04-20T14:52:29Z,MERGED,True,4,4,1,https://github.com/jktjkt,cherry-pick DSA -> ECDSA from develop,1,[],https://github.com/CESNET/libnetconf2/pull/222,https://github.com/jktjkt,3,https://github.com/CESNET/libnetconf2/pull/222#issuecomment-616605197,"This is required to keep libnetconf2's test suite working on recent distros such as Fedora 31 because they block DSA keys via their /etc/crypto-policies/back-ends/libssh.config:
[ci@f31-metacentrum-0000004457 libnetconf2]$ cat /etc/crypto-policies/back-ends/libssh.config
Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes256-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128-cbc
MACs hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,hmac-sha2-512
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
HostKeyAlgorithms rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com
PubkeyAcceptedKeyTypes rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com

...so the test suite fails there. When I enabled extra debugging, this is what I got:
[INF]: Interactive SSH authentication method was disabled.
[INF]: Password SSH authentication method was disabled.
[INF]: Publickey athentication.
[INF]: Trying to authenticate using pair ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa"" ""/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests//data/key_dsa.pub"".
[2020/04/20 09:28:39.601103, 3] ssh_key_algorithm_allowed:  Checking ssh-dss with list <rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com>
[2020/04/20 09:28:39.601168, 1] ssh_userauth_try_publickey:  The key algorithm 'ssh-dss' is not allowed to be used by PUBLICKEY_ACCEPTED_TYPES configuration option
[WRN]: Authentication denied.
[ERR]: Unable to authenticate to the remote server (all attempts via supported authentication methods failed).
[2020/04/20 09:28:39.601351, 3] ssh_socket_unbuffered_write:  Enabling POLLOUT for socket
[2020/04/20 09:28:39.601393, 3] packet_send2:  packet: wrote [type=1, len=32, padding_size=11, comp=20, payload=20]
[ERR]: Communication SSH socket unexpectedly closed.
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:248)
assert failed (/home/ci/src/cesnet-gerrit-public/CzechLight/dependencies/libnetconf2/tests/test_server_thread.c:70)","Thanks. Yes, we will migrate, eventually -- but this refresh of our internal CI VMs came first. Thanks for a quick fix.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,223,2020-04-20T15:14:51Z,2020-04-21T07:41:24Z,2020-04-21T18:39:06Z,MERGED,True,0,9,1,https://github.com/apropp-molex,build CHANGE remove safety check,1,[],https://github.com/CESNET/libnetconf2/pull/223,https://github.com/apropp-molex,1,https://github.com/CESNET/libnetconf2/pull/223,"Refs #217
Removing the check for libcrypt. One reason is that libcrypt is linked later on so any checking should be done there. Second reason is some platforms might implement this functionality in a different library (e.g., QNX with liblogin). Also, the check can be bypassed by setting -DLIBCRYPT.
The failure will be clear enough to indicate to the user what went wrong during compilation. Opted not to use find_library to look for the appropriate library, as couldn't get it to find liblogin.","Refs #217
Removing the check for libcrypt. One reason is that libcrypt is linked later on so any checking should be done there. Second reason is some platforms might implement this functionality in a different library (e.g., QNX with liblogin). Also, the check can be bypassed by setting -DLIBCRYPT.
The failure will be clear enough to indicate to the user what went wrong during compilation. Opted not to use find_library to look for the appropriate library, as couldn't get it to find liblogin.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,223,2020-04-20T15:14:51Z,2020-04-21T07:41:24Z,2020-04-21T18:39:06Z,MERGED,True,0,9,1,https://github.com/apropp-molex,build CHANGE remove safety check,1,[],https://github.com/CESNET/libnetconf2/pull/223,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/223#issuecomment-617010948,"Refs #217
Removing the check for libcrypt. One reason is that libcrypt is linked later on so any checking should be done there. Second reason is some platforms might implement this functionality in a different library (e.g., QNX with liblogin). Also, the check can be bypassed by setting -DLIBCRYPT.
The failure will be clear enough to indicate to the user what went wrong during compilation. Opted not to use find_library to look for the appropriate library, as couldn't get it to find liblogin.","Okay, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,229,2020-05-15T08:23:20Z,2020-05-15T09:18:39Z,2020-05-15T11:20:01Z,MERGED,True,8,6,1,https://github.com/rjarry,io BUGFIX do not fail when there is data left to read,1,[],https://github.com/CESNET/libnetconf2/pull/229,https://github.com/rjarry,1,https://github.com/CESNET/libnetconf2/pull/229,"When using the UNIX transport and depending on the timing between the server and client, the client may read the final reply to the <close-session> rpc after the server has closed the socket. When that occurs, poll() returns POLLHUP in revents meaning the server closed the socket which causes the following error on the client:
ERR: Session 1: communication channel unexpectedly closed.
ERR: Session 1: failed to receive a reply to <close-session>.

When POLLHUP is returned in revents, make sure POLLIN is not present as well (if it is, it means that there is some data left to be read in the socket buffer).
See https://www.greenend.org.uk/rjk/tech/poll.html for more details.","When using the UNIX transport and depending on the timing between the server and client, the client may read the final reply to the <close-session> rpc after the server has closed the socket. When that occurs, poll() returns POLLHUP in revents meaning the server closed the socket which causes the following error on the client:
ERR: Session 1: communication channel unexpectedly closed.
ERR: Session 1: failed to receive a reply to <close-session>.

When POLLHUP is returned in revents, make sure POLLIN is not present as well (if it is, it means that there is some data left to be read in the socket buffer).
See https://www.greenend.org.uk/rjk/tech/poll.html for more details.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,229,2020-05-15T08:23:20Z,2020-05-15T09:18:39Z,2020-05-15T11:20:01Z,MERGED,True,8,6,1,https://github.com/rjarry,io BUGFIX do not fail when there is data left to read,1,[],https://github.com/CESNET/libnetconf2/pull/229,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/229#issuecomment-629128835,"When using the UNIX transport and depending on the timing between the server and client, the client may read the final reply to the <close-session> rpc after the server has closed the socket. When that occurs, poll() returns POLLHUP in revents meaning the server closed the socket which causes the following error on the client:
ERR: Session 1: communication channel unexpectedly closed.
ERR: Session 1: failed to receive a reply to <close-session>.

When POLLHUP is returned in revents, make sure POLLIN is not present as well (if it is, it means that there is some data left to be read in the socket buffer).
See https://www.greenend.org.uk/rjk/tech/poll.html for more details.","Seems good to me and it makes sense, thanks, merging.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,229,2020-05-15T08:23:20Z,2020-05-15T09:18:39Z,2020-05-15T11:20:01Z,MERGED,True,8,6,1,https://github.com/rjarry,io BUGFIX do not fail when there is data left to read,1,[],https://github.com/CESNET/libnetconf2/pull/229,https://github.com/rjarry,3,https://github.com/CESNET/libnetconf2/pull/229#issuecomment-629180168,"When using the UNIX transport and depending on the timing between the server and client, the client may read the final reply to the <close-session> rpc after the server has closed the socket. When that occurs, poll() returns POLLHUP in revents meaning the server closed the socket which causes the following error on the client:
ERR: Session 1: communication channel unexpectedly closed.
ERR: Session 1: failed to receive a reply to <close-session>.

When POLLHUP is returned in revents, make sure POLLIN is not present as well (if it is, it means that there is some data left to be read in the socket buffer).
See https://www.greenend.org.uk/rjk/tech/poll.html for more details.",Thanks Michal 👍,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,233,2020-05-19T15:37:03Z,2020-05-20T06:04:39Z,2020-05-20T06:04:39Z,MERGED,True,1,1,1,https://github.com/jakubman1,Python BUGFIX make install fail when running from path with a space,1,[],https://github.com/CESNET/libnetconf2/pull/233,https://github.com/jakubman1,1,https://github.com/CESNET/libnetconf2/pull/233,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,233,2020-05-19T15:37:03Z,2020-05-20T06:04:39Z,2020-05-20T06:04:39Z,MERGED,True,1,1,1,https://github.com/jakubman1,Python BUGFIX make install fail when running from path with a space,1,[],https://github.com/CESNET/libnetconf2/pull/233,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/233#issuecomment-631256550,,"Right, thanks.
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,236,2020-05-28T09:47:32Z,2021-06-02T09:33:47Z,2021-06-02T09:33:47Z,CLOSED,False,4,0,1,https://github.com/eshang-oran,Get the alarm content when connect_ssh_session is failed,1,[],https://github.com/CESNET/libnetconf2/pull/236,https://github.com/eshang-oran,1,https://github.com/CESNET/libnetconf2/pull/236,"As netconf client, we want to get the alarm content when connect_ssh_session is failed.
We can get the alarm content by call libssh interface.","As netconf client, we want to get the alarm content when connect_ssh_session is failed.
We can get the alarm content by call libssh interface.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,236,2020-05-28T09:47:32Z,2021-06-02T09:33:47Z,2021-06-02T09:33:47Z,CLOSED,False,4,0,1,https://github.com/eshang-oran,Get the alarm content when connect_ssh_session is failed,1,[],https://github.com/CESNET/libnetconf2/pull/236,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/236#issuecomment-635256022,"As netconf client, we want to get the alarm content when connect_ssh_session is failed.
We can get the alarm content by call libssh interface.","Hi,
firstly, please always target devel branch, we will not merge anything directly into master. Secondly, you added the SSH error print into a general fail, which is most often not related to SSH at all. So, please point me to the libssh function that can fail and whose error is not handled and then something can be improved (I have not found any such call in this function and any called functions).
Regards,
Michal",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,254,2020-09-10T12:13:09Z,2020-09-10T12:48:50Z,2020-09-10T12:48:51Z,CLOSED,False,3,1,1,https://github.com/syyyr,Add flag to ignore libssh version,1,[],https://github.com/CESNET/libnetconf2/pull/254,https://github.com/syyyr,1,https://github.com/CESNET/libnetconf2/pull/254,"When building with a new enough libssh version that the issues are
fixed, libnetconf2 still considers these broken. This patch adds an
option to skip this check and use whatever version is available.
For example, Fedora already has patches for the issues that were present in the blacklisted versions.","When building with a new enough libssh version that the issues are
fixed, libnetconf2 still considers these broken. This patch adds an
option to skip this check and use whatever version is available.
For example, Fedora already has patches for the issues that were present in the blacklisted versions.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,254,2020-09-10T12:13:09Z,2020-09-10T12:48:50Z,2020-09-10T12:48:51Z,CLOSED,False,3,1,1,https://github.com/syyyr,Add flag to ignore libssh version,1,[],https://github.com/CESNET/libnetconf2/pull/254,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/254#issuecomment-690248355,"When building with a new enough libssh version that the issues are
fixed, libnetconf2 still considers these broken. This patch adds an
option to skip this check and use whatever version is available.
For example, Fedora already has patches for the issues that were present in the blacklisted versions.","Is this really necessary? Firstly, libssh compiled from master should identify itself as 0.8.90, to my knowledge, unless something got changed. As for some patched versions presenting themselves as 0.9.4, that is where the problem is apparent but I am not sure it is worth cluttering CMakeLists with another option. You can bypass this by, for example, changing the version in the header to 0.9.5 or something (which seems correct to me in some way, it is not 0.9.4). Anyway, I am hoping that another libssh release will come soon and then this problem will be less pressing.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,254,2020-09-10T12:13:09Z,2020-09-10T12:48:50Z,2020-09-10T12:48:51Z,CLOSED,False,3,1,1,https://github.com/syyyr,Add flag to ignore libssh version,1,[],https://github.com/CESNET/libnetconf2/pull/254,https://github.com/codecov-commenter,3,https://github.com/CESNET/libnetconf2/pull/254#issuecomment-690248657,"When building with a new enough libssh version that the issues are
fixed, libnetconf2 still considers these broken. This patch adds an
option to skip this check and use whatever version is available.
For example, Fedora already has patches for the issues that were present in the blacklisted versions.","Codecov Report

Merging #254 into devel will decrease coverage by 0.04%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel     #254      +/-   ##
==========================================
- Coverage   37.57%   37.53%   -0.05%     
==========================================
  Files          23       23              
  Lines        9850     9850              
  Branches     1946     1946              
==========================================
- Hits         3701     3697       -4     
- Misses       5281     5284       +3     
- Partials      868      869       +1     



Impacted Files
Coverage Δ





src/session_server_tls.c
28.87% <0.00%> (-0.34%)
⬇️


src/session_server_ssh.c
24.62% <0.00%> (-0.13%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b639e9c...41a2980. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,254,2020-09-10T12:13:09Z,2020-09-10T12:48:50Z,2020-09-10T12:48:51Z,CLOSED,False,3,1,1,https://github.com/syyyr,Add flag to ignore libssh version,1,[],https://github.com/CESNET/libnetconf2/pull/254,https://github.com/syyyr,4,https://github.com/CESNET/libnetconf2/pull/254#issuecomment-690255555,"When building with a new enough libssh version that the issues are
fixed, libnetconf2 still considers these broken. This patch adds an
option to skip this check and use whatever version is available.
For example, Fedora already has patches for the issues that were present in the blacklisted versions.","Yeah... I guess you're right. I asked the libssh devs on IRC, the 0.9.5 release should come very soon. Until then I'll just use this patch as it is, without merging into libnetconf2.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,254,2020-09-10T12:13:09Z,2020-09-10T12:48:50Z,2020-09-10T12:48:51Z,CLOSED,False,3,1,1,https://github.com/syyyr,Add flag to ignore libssh version,1,[],https://github.com/CESNET/libnetconf2/pull/254,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/254#issuecomment-690261764,"When building with a new enough libssh version that the issues are
fixed, libnetconf2 still considers these broken. This patch adds an
option to skip this check and use whatever version is available.
For example, Fedora already has patches for the issues that were present in the blacklisted versions.","Okay, good.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,269,2020-11-10T13:08:56Z,2020-11-26T13:16:08Z,2020-11-26T13:16:08Z,MERGED,True,14,5,1,https://github.com/jvijtiuk,travis FEATURE add sanitizer test job,1,[],https://github.com/CESNET/libnetconf2/pull/269,https://github.com/jvijtiuk,1,https://github.com/CESNET/libnetconf2/pull/269,"Hello,
this adds a test job that runs unit tests with ASAN and UBSAN enabled. Valgrind tests are disabled in that case, just like in the recent sysrepo and libyang PRs, as valgrind can't run when sanitizer support is compiled in. I've tested that the .travis.yml works on a fork. If there are any comments or changes that should be made please let me know.","Hello,
this adds a test job that runs unit tests with ASAN and UBSAN enabled. Valgrind tests are disabled in that case, just like in the recent sysrepo and libyang PRs, as valgrind can't run when sanitizer support is compiled in. I've tested that the .travis.yml works on a fork. If there are any comments or changes that should be made please let me know.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,269,2020-11-10T13:08:56Z,2020-11-26T13:16:08Z,2020-11-26T13:16:08Z,MERGED,True,14,5,1,https://github.com/jvijtiuk,travis FEATURE add sanitizer test job,1,[],https://github.com/CESNET/libnetconf2/pull/269,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/269#issuecomment-724708826,"Hello,
this adds a test job that runs unit tests with ASAN and UBSAN enabled. Valgrind tests are disabled in that case, just like in the recent sysrepo and libyang PRs, as valgrind can't run when sanitizer support is compiled in. I've tested that the .travis.yml works on a fork. If there are any comments or changes that should be made please let me know.","Codecov Report

Merging #269 (76ade0b) into devel (b647aa1) will decrease coverage by 0.04%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel     #269      +/-   ##
==========================================
- Coverage   37.56%   37.52%   -0.05%     
==========================================
  Files          23       23              
  Lines        9853     9853              
  Branches     1947     1947              
==========================================
- Hits         3701     3697       -4     
- Misses       5284     5287       +3     
- Partials      868      869       +1     



Impacted Files
Coverage Δ





src/session_server_tls.c
28.87% <0.00%> (-0.34%)
⬇️


src/session_server_ssh.c
24.53% <0.00%> (-0.13%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b647aa1...80a1164. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,269,2020-11-10T13:08:56Z,2020-11-26T13:16:08Z,2020-11-26T13:16:08Z,MERGED,True,14,5,1,https://github.com/jvijtiuk,travis FEATURE add sanitizer test job,1,[],https://github.com/CESNET/libnetconf2/pull/269,https://github.com/jvijtiuk,3,https://github.com/CESNET/libnetconf2/pull/269#issuecomment-734153915,"Hello,
this adds a test job that runs unit tests with ASAN and UBSAN enabled. Valgrind tests are disabled in that case, just like in the recent sysrepo and libyang PRs, as valgrind can't run when sanitizer support is compiled in. I've tested that the .travis.yml works on a fork. If there are any comments or changes that should be made please let me know.","I've replaced the outer quotes with single quotes. Everything seems to work, here's a build job where I've printed the CMake flags before building, and the sanitize flags look ok.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,272,2020-12-10T11:55:35Z,2020-12-10T12:17:56Z,2020-12-11T07:53:28Z,CLOSED,False,4,1,1,https://github.com/Rohit2387,Update session.c,1,[],https://github.com/CESNET/libnetconf2/pull/272,https://github.com/Rohit2387,1,https://github.com/CESNET/libnetconf2/pull/272,NULL check,NULL check,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,272,2020-12-10T11:55:35Z,2020-12-10T12:17:56Z,2020-12-11T07:53:28Z,CLOSED,False,4,1,1,https://github.com/Rohit2387,Update session.c,1,[],https://github.com/CESNET/libnetconf2/pull/272,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/272#issuecomment-742486068,NULL check,"This is fixed in devel, please use that until the next release.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,272,2020-12-10T11:55:35Z,2020-12-10T12:17:56Z,2020-12-11T07:53:28Z,CLOSED,False,4,1,1,https://github.com/Rohit2387,Update session.c,1,[],https://github.com/CESNET/libnetconf2/pull/272,https://github.com/Rohit2387,3,https://github.com/CESNET/libnetconf2/pull/272#issuecomment-742961256,NULL check,OK thanks then i can fork devel?,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,272,2020-12-10T11:55:35Z,2020-12-10T12:17:56Z,2020-12-11T07:53:28Z,CLOSED,False,4,1,1,https://github.com/Rohit2387,Update session.c,1,[],https://github.com/CESNET/libnetconf2/pull/272,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/272#issuecomment-743035636,NULL check,"You can fork whatever branch you want. But you should always use either master or devel branches (of libyang, sysrepo, libnetconf2, and netopeer2) to make sure it is compatible.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,273,2020-12-11T08:03:20Z,2020-12-11T08:32:09Z,2020-12-11T08:32:09Z,MERGED,True,94,3,3,https://github.com/fredgan,Cmake enable code coverage,1,[],https://github.com/CESNET/libnetconf2/pull/273,https://github.com/fredgan,1,https://github.com/CESNET/libnetconf2/pull/273,"Hi Michal,
This PR adds code coverage for cmake just like sysrepo.","Hi Michal,
This PR adds code coverage for cmake just like sysrepo.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,276,2020-12-16T11:28:29Z,2021-06-02T09:34:04Z,2021-06-02T09:34:04Z,CLOSED,False,130,1,2,https://github.com/Rohit2387,Sample App usage for libnetconf2 ssh server,3,[],https://github.com/CESNET/libnetconf2/pull/276,https://github.com/Rohit2387,1,https://github.com/CESNET/libnetconf2/pull/276,"Hi,
I have created one sample file , so that some one who are new to libnetconf2, can look this sample code and understand the API usage part.
Br
Rohit","Hi,
I have created one sample file , so that some one who are new to libnetconf2, can look this sample code and understand the API usage part.
Br
Rohit",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,276,2020-12-16T11:28:29Z,2021-06-02T09:34:04Z,2021-06-02T09:34:04Z,CLOSED,False,130,1,2,https://github.com/Rohit2387,Sample App usage for libnetconf2 ssh server,3,[],https://github.com/CESNET/libnetconf2/pull/276,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/276#issuecomment-746339268,"Hi,
I have created one sample file , so that some one who are new to libnetconf2, can look this sample code and understand the API usage part.
Br
Rohit","Thanks for the effort, I am sure you learnt some basics by working on this, but it would need major improvements before it could be merged. So I think you can just use it yourself.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,276,2020-12-16T11:28:29Z,2021-06-02T09:34:04Z,2021-06-02T09:34:04Z,CLOSED,False,130,1,2,https://github.com/Rohit2387,Sample App usage for libnetconf2 ssh server,3,[],https://github.com/CESNET/libnetconf2/pull/276,https://github.com/Rohit2387,3,https://github.com/CESNET/libnetconf2/pull/276#issuecomment-746384720,"Hi,
I have created one sample file , so that some one who are new to libnetconf2, can look this sample code and understand the API usage part.
Br
Rohit","Ok thanks for your comment.
This sample code is very basic according to you  looking this sample code is API usage is proper?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,276,2020-12-16T11:28:29Z,2021-06-02T09:34:04Z,2021-06-02T09:34:04Z,CLOSED,False,130,1,2,https://github.com/Rohit2387,Sample App usage for libnetconf2 ssh server,3,[],https://github.com/CESNET/libnetconf2/pull/276,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/276#issuecomment-746409542,"Hi,
I have created one sample file , so that some one who are new to libnetconf2, can look this sample code and understand the API usage part.
Br
Rohit","Yes, the usage of API functions seems correct to me.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,279,2020-12-28T01:55:27Z,2021-01-12T12:06:38Z,2021-01-12T12:06:38Z,CLOSED,False,1457,1,5,https://github.com/fredgan,Add some testcases,2,[],https://github.com/CESNET/libnetconf2/pull/279,https://github.com/fredgan,1,https://github.com/CESNET/libnetconf2/pull/279,"Hi Michal,
I add some testcases to test_fd_comm.c and test_io.c.
In addition, ietf-netconf-nmda.yin and its dependencies can not be found in the tests/data/module path, so I added them.

  
    
      libnetconf2/src/session_client.c
    
    
        Lines 2363 to 2369
      in
      819598b
    
  
  
    

        
          
           case NC_RPC_EDITDATA: 
        

        
          
               mod = ly_ctx_get_module(session->ctx, ""ietf-netconf-nmda"", NULL, 1); 
        

        
          
               if (!mod) { 
        

        
          
                   ERR(""Session %u: missing \""ietf-netconf-nmda\"" schema in the context."", session->id); 
        

        
          
                   return NC_MSG_ERROR; 
        

        
          
               } 
        

        
          
               break;","Hi Michal,
I add some testcases to test_fd_comm.c and test_io.c.
In addition, ietf-netconf-nmda.yin and its dependencies can not be found in the tests/data/module path, so I added them.

  
    
      libnetconf2/src/session_client.c
    
    
        Lines 2363 to 2369
      in
      819598b
    
  
  
    

        
          
           case NC_RPC_EDITDATA: 
        

        
          
               mod = ly_ctx_get_module(session->ctx, ""ietf-netconf-nmda"", NULL, 1); 
        

        
          
               if (!mod) { 
        

        
          
                   ERR(""Session %u: missing \""ietf-netconf-nmda\"" schema in the context."", session->id); 
        

        
          
                   return NC_MSG_ERROR; 
        

        
          
               } 
        

        
          
               break;",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,279,2020-12-28T01:55:27Z,2021-01-12T12:06:38Z,2021-01-12T12:06:38Z,CLOSED,False,1457,1,5,https://github.com/fredgan,Add some testcases,2,[],https://github.com/CESNET/libnetconf2/pull/279,https://github.com/codecov-io,2,https://github.com/CESNET/libnetconf2/pull/279#issuecomment-751610462,"Hi Michal,
I add some testcases to test_fd_comm.c and test_io.c.
In addition, ietf-netconf-nmda.yin and its dependencies can not be found in the tests/data/module path, so I added them.

  
    
      libnetconf2/src/session_client.c
    
    
        Lines 2363 to 2369
      in
      819598b
    
  
  
    

        
          
           case NC_RPC_EDITDATA: 
        

        
          
               mod = ly_ctx_get_module(session->ctx, ""ietf-netconf-nmda"", NULL, 1); 
        

        
          
               if (!mod) { 
        

        
          
                   ERR(""Session %u: missing \""ietf-netconf-nmda\"" schema in the context."", session->id); 
        

        
          
                   return NC_MSG_ERROR; 
        

        
          
               } 
        

        
          
               break;","Codecov Report

Merging #279 (819598b) into devel (b639e9c) will decrease coverage by 0.00%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##            devel     #279      +/-   ##
==========================================
- Coverage   37.57%   37.57%   -0.01%     
==========================================
  Files          23       23              
  Lines        9850     9840      -10     
  Branches     1946     1944       -2     
==========================================
- Hits         3701     3697       -4     
+ Misses       5281     5275       -6     
  Partials      868      868              



Impacted Files
Coverage Δ





src/session.c
42.34% <0.00%> (-0.09%)
⬇️


src/session_server.c
19.78% <0.00%> (-0.05%)
⬇️


src/session_client.c
24.63% <0.00%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5eda9cb...b706e7d. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,279,2020-12-28T01:55:27Z,2021-01-12T12:06:38Z,2021-01-12T12:06:38Z,CLOSED,False,1457,1,5,https://github.com/fredgan,Add some testcases,2,[],https://github.com/CESNET/libnetconf2/pull/279,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/279#issuecomment-753873699,"Hi Michal,
I add some testcases to test_fd_comm.c and test_io.c.
In addition, ietf-netconf-nmda.yin and its dependencies can not be found in the tests/data/module path, so I added them.

  
    
      libnetconf2/src/session_client.c
    
    
        Lines 2363 to 2369
      in
      819598b
    
  
  
    

        
          
           case NC_RPC_EDITDATA: 
        

        
          
               mod = ly_ctx_get_module(session->ctx, ""ietf-netconf-nmda"", NULL, 1); 
        

        
          
               if (!mod) { 
        

        
          
                   ERR(""Session %u: missing \""ietf-netconf-nmda\"" schema in the context."", session->id); 
        

        
          
                   return NC_MSG_ERROR; 
        

        
          
               } 
        

        
          
               break;","After looking at the current tests, I would say they are not that good in general and your additions are making things even worse (especially test_io where you are overwriting work done in setup). So, thanks for the effort, but I am reluctant to merge this and I would either prefer to keep the limited tests as they are or properly update and fix them. I will most likely get to it when I will be migrating libnetconf2 to libyang version 2.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,280,2020-12-30T07:43:26Z,2021-01-04T09:59:39Z,2021-01-04T09:59:39Z,MERGED,True,166,1,2,https://github.com/fredgan,add some  testcases for client call home,1,[],https://github.com/CESNET/libnetconf2/pull/280,https://github.com/fredgan,1,https://github.com/CESNET/libnetconf2/pull/280,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,280,2020-12-30T07:43:26Z,2021-01-04T09:59:39Z,2021-01-04T09:59:39Z,MERGED,True,166,1,2,https://github.com/fredgan,add some  testcases for client call home,1,[],https://github.com/CESNET/libnetconf2/pull/280,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/280#issuecomment-753878819,,"Okay, I suppose, these tests seem fine. Thanks.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,282,2021-01-12T12:05:50Z,2021-01-13T07:16:23Z,2021-01-13T07:16:23Z,MERGED,True,105,0,1,https://github.com/fredgan,add some testcases for client messages,1,[],https://github.com/CESNET/libnetconf2/pull/282,https://github.com/fredgan,1,https://github.com/CESNET/libnetconf2/pull/282,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,282,2021-01-12T12:05:50Z,2021-01-13T07:16:23Z,2021-01-13T07:16:23Z,MERGED,True,105,0,1,https://github.com/fredgan,add some testcases for client messages,1,[],https://github.com/CESNET/libnetconf2/pull/282,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/282#issuecomment-759255978,,"Okay, thanks, merging.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,283,2021-01-13T03:32:38Z,2021-01-27T15:19:37Z,2021-01-27T15:19:37Z,CLOSED,False,8,6,1,https://github.com/syyyr,Fix libyang error when setting confirmed commit,1,[],https://github.com/CESNET/libnetconf2/pull/283,https://github.com/syyyr,1,https://github.com/CESNET/libnetconf2/pull/283,"When creating a commit RPC, if the ietf-netconf module doesn't have the
""confirmed-commit"" feature enabled, it always prints a libyang error. This
patch adds a check for that.
Reproducer program:
#include <libnetconf2/session_client.h>

int main(int argc, char* argv[])
{
    auto sess = nc_connect_unix(""/opt/cesnet/Netopeer2/netopeer2-server.sock"", nullptr);
    auto rpc = nc_rpc_commit(1, 0, nullptr, nullptr, NC_PARAMTYPE_CONST);
    uint64_t id;
    nc_send_rpc(sess, rpc, 0, &id);
}
When run, it prints:
$ ./a.out 
libyang[0]: Failed to find ""confirmed"" as a sibling to ""ietf-netconf:confirmed"".","When creating a commit RPC, if the ietf-netconf module doesn't have the
""confirmed-commit"" feature enabled, it always prints a libyang error. This
patch adds a check for that.
Reproducer program:
#include <libnetconf2/session_client.h>

int main(int argc, char* argv[])
{
    auto sess = nc_connect_unix(""/opt/cesnet/Netopeer2/netopeer2-server.sock"", nullptr);
    auto rpc = nc_rpc_commit(1, 0, nullptr, nullptr, NC_PARAMTYPE_CONST);
    uint64_t id;
    nc_send_rpc(sess, rpc, 0, &id);
}
When run, it prints:
$ ./a.out 
libyang[0]: Failed to find ""confirmed"" as a sibling to ""ietf-netconf:confirmed"".",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,283,2021-01-13T03:32:38Z,2021-01-27T15:19:37Z,2021-01-27T15:19:37Z,CLOSED,False,8,6,1,https://github.com/syyyr,Fix libyang error when setting confirmed commit,1,[],https://github.com/CESNET/libnetconf2/pull/283,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/283#issuecomment-759253065,"When creating a commit RPC, if the ietf-netconf module doesn't have the
""confirmed-commit"" feature enabled, it always prints a libyang error. This
patch adds a check for that.
Reproducer program:
#include <libnetconf2/session_client.h>

int main(int argc, char* argv[])
{
    auto sess = nc_connect_unix(""/opt/cesnet/Netopeer2/netopeer2-server.sock"", nullptr);
    auto rpc = nc_rpc_commit(1, 0, nullptr, nullptr, NC_PARAMTYPE_CONST);
    uint64_t id;
    nc_send_rpc(sess, rpc, 0, &id);
}
When run, it prints:
$ ./a.out 
libyang[0]: Failed to find ""confirmed"" as a sibling to ""ietf-netconf:confirmed"".","So you want to silently ignore these parameters? I definitely consider printing an error a better solution, it is intentional.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,283,2021-01-13T03:32:38Z,2021-01-27T15:19:37Z,2021-01-27T15:19:37Z,CLOSED,False,8,6,1,https://github.com/syyyr,Fix libyang error when setting confirmed commit,1,[],https://github.com/CESNET/libnetconf2/pull/283,https://github.com/syyyr,3,https://github.com/CESNET/libnetconf2/pull/283#issuecomment-759330679,"When creating a commit RPC, if the ietf-netconf module doesn't have the
""confirmed-commit"" feature enabled, it always prints a libyang error. This
patch adds a check for that.
Reproducer program:
#include <libnetconf2/session_client.h>

int main(int argc, char* argv[])
{
    auto sess = nc_connect_unix(""/opt/cesnet/Netopeer2/netopeer2-server.sock"", nullptr);
    auto rpc = nc_rpc_commit(1, 0, nullptr, nullptr, NC_PARAMTYPE_CONST);
    uint64_t id;
    nc_send_rpc(sess, rpc, 0, &id);
}
When run, it prints:
$ ./a.out 
libyang[0]: Failed to find ""confirmed"" as a sibling to ""ietf-netconf:confirmed"".","Yeah, you are right, this isn't a solution, my bad. So, what if, when the server doesn't support confirmed-commit, the RPC fails to send and libnetconf2 prints a custom error message, something like ""Confirmed commit is enabled on the remote server""? When I first used nc_rpc_commit I didn't realize what ""confirmed"" means, so I just put in ""1"" (which is my mistake, I admit). Right now, if you put in ""1"" and the server doesn't support it, libnetconf2 still ignores it and prints a libyang error, but, to be honest, the libyang error doesn't help too much...",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,283,2021-01-13T03:32:38Z,2021-01-27T15:19:37Z,2021-01-27T15:19:37Z,CLOSED,False,8,6,1,https://github.com/syyyr,Fix libyang error when setting confirmed commit,1,[],https://github.com/CESNET/libnetconf2/pull/283,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/283#issuecomment-759440526,"When creating a commit RPC, if the ietf-netconf module doesn't have the
""confirmed-commit"" feature enabled, it always prints a libyang error. This
patch adds a check for that.
Reproducer program:
#include <libnetconf2/session_client.h>

int main(int argc, char* argv[])
{
    auto sess = nc_connect_unix(""/opt/cesnet/Netopeer2/netopeer2-server.sock"", nullptr);
    auto rpc = nc_rpc_commit(1, 0, nullptr, nullptr, NC_PARAMTYPE_CONST);
    uint64_t id;
    nc_send_rpc(sess, rpc, 0, &id);
}
When run, it prints:
$ ./a.out 
libyang[0]: Failed to find ""confirmed"" as a sibling to ""ietf-netconf:confirmed"".","Right, the return value is not checked for these leaves but it is hard to decide whether it was intentional or not. In any case, I have added the checks. As for the error, I agree it is not really clear, but there is not much to be done about it because it is specified this way (although I am not able to find this right now). Also, libyang version 2 is not even able to determine whether the node does not exist or has only false if-feature so it will not be changed.",True,{'THUMBS_UP': ['https://github.com/syyyr']}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,287,2021-02-12T08:28:37Z,2021-02-12T09:20:44Z,2021-02-12T09:20:44Z,CLOSED,False,56,0,2,https://github.com/lePici,session FEATURE added username duplication func to API,1,[],https://github.com/CESNET/libnetconf2/pull/287,https://github.com/lePici,1,https://github.com/CESNET/libnetconf2/pull/287,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,288,2021-02-12T14:28:43Z,2021-02-18T14:07:42Z,2021-02-18T14:07:42Z,MERGED,True,114,42,1,https://github.com/lePici,session server BUGFIX in nc_sock_accept_binds,3,[],https://github.com/CESNET/libnetconf2/pull/288,https://github.com/lePici,1,https://github.com/CESNET/libnetconf2/pull/288,"After this correction, the correct sun_path is written to the host pointer and not garbage.
Parameter src in function inet_ntop has also changed to a much safer form.","After this correction, the correct sun_path is written to the host pointer and not garbage.
Parameter src in function inet_ntop has also changed to a much safer form.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,288,2021-02-12T14:28:43Z,2021-02-18T14:07:42Z,2021-02-18T14:07:42Z,MERGED,True,114,42,1,https://github.com/lePici,session server BUGFIX in nc_sock_accept_binds,3,[],https://github.com/CESNET/libnetconf2/pull/288,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/288#issuecomment-778836672,"After this correction, the correct sun_path is written to the host pointer and not garbage.
Parameter src in function inet_ntop has also changed to a much safer form.","Keep it in the separated commits. The first one is really the bugfix, but the moving code into separated functions in the fixup commit is refactoring (which is something else). If you join the changes into a single commit, the bugfix is almost invisible in the refactoring changes.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,295,2021-03-09T06:19:36Z,2021-03-09T07:17:23Z,2021-03-09T07:17:23Z,MERGED,True,1,1,1,https://github.com/ddan-io,Fix _nc_connect_libssh port on big endian processors,1,[],https://github.com/CESNET/libnetconf2/pull/295,https://github.com/ddan-io,1,https://github.com/CESNET/libnetconf2/pull/295,"See, gets cast to (unsigned int*):
1561 ssh_options_get_port(ssh_session, (unsigned int *)&port);","See, gets cast to (unsigned int*):
1561 ssh_options_get_port(ssh_session, (unsigned int *)&port);",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,295,2021-03-09T06:19:36Z,2021-03-09T07:17:23Z,2021-03-09T07:17:23Z,MERGED,True,1,1,1,https://github.com/ddan-io,Fix _nc_connect_libssh port on big endian processors,1,[],https://github.com/CESNET/libnetconf2/pull/295,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/295#issuecomment-793475746,"See, gets cast to (unsigned int*):
1561 ssh_options_get_port(ssh_session, (unsigned int *)&port);","Right, definitely a wrong code, merging.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,303,2021-05-21T08:11:51Z,2021-05-21T11:05:38Z,2021-05-21T11:05:38Z,MERGED,True,59,0,4,https://github.com/frimpler,keep track of NC-sessions-SR-session associations,2,[],https://github.com/CESNET/libnetconf2/pull/303,https://github.com/frimpler,1,https://github.com/CESNET/libnetconf2/pull/303,see CESNET/netopeer2#901,see CESNET/netopeer2#901,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,304,2021-05-24T20:31:35Z,2021-05-25T05:24:19Z,2021-05-25T05:24:22Z,MERGED,True,31,8,2,https://github.com/rkrejci,build CHANGE separated build type for building docs without dependencies,2,[],https://github.com/CESNET/libnetconf2/pull/304,https://github.com/rkrejci,1,https://github.com/CESNET/libnetconf2/pull/304,Let the user build doxygen documentation without need of other compile dependencies.,Let the user build doxygen documentation without need of other compile dependencies.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,304,2021-05-24T20:31:35Z,2021-05-25T05:24:19Z,2021-05-25T05:24:22Z,MERGED,True,31,8,2,https://github.com/rkrejci,build CHANGE separated build type for building docs without dependencies,2,[],https://github.com/CESNET/libnetconf2/pull/304,https://github.com/rkrejci,2,https://github.com/CESNET/libnetconf2/pull/304#issuecomment-847320680,Let the user build doxygen documentation without need of other compile dependencies.,same as #305 just for a different target branch,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,305,2021-05-24T20:40:44Z,2021-05-25T05:18:55Z,2021-05-25T05:18:59Z,MERGED,True,31,8,2,https://github.com/rkrejci,build CHANGE separated build type for building docs without dependencies,2,[],https://github.com/CESNET/libnetconf2/pull/305,https://github.com/rkrejci,1,https://github.com/CESNET/libnetconf2/pull/305,Let the user build doxygen documentation without need of other compile dependencies.,Let the user build doxygen documentation without need of other compile dependencies.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,319,2021-07-14T15:56:33Z,2021-07-16T14:49:28Z,2021-07-16T14:49:28Z,MERGED,True,99,0,5,https://github.com/jruzicka-nic,distro FEATURE upstream RPM packaging,1,[],https://github.com/CESNET/libnetconf2/pull/319,https://github.com/jruzicka-nic,1,https://github.com/CESNET/libnetconf2/pull/319,"Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.","Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,319,2021-07-14T15:56:33Z,2021-07-16T14:49:28Z,2021-07-16T14:49:28Z,MERGED,True,99,0,5,https://github.com/jruzicka-nic,distro FEATURE upstream RPM packaging,1,[],https://github.com/CESNET/libnetconf2/pull/319,https://github.com/codecov-commenter,2,https://github.com/CESNET/libnetconf2/pull/319#issuecomment-880434930,"Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.","Codecov Report

Merging #319 (be78a4c) into master (f079832) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #319   +/-   ##
=======================================
  Coverage   44.28%   44.28%           
=======================================
  Files          22       22           
  Lines       10369    10369           
=======================================
  Hits         4592     4592           
  Misses       5777     5777           



Impacted Files
Coverage Δ





src/io.c
54.84% <0.00%> (-1.22%)
⬇️


src/session_server_tls.c
35.59% <0.00%> (-0.12%)
⬇️


src/session_server.c
28.01% <0.00%> (+0.21%)
⬆️


src/session.c
50.57% <0.00%> (+0.28%)
⬆️


tests/test_server_thread.c
94.90% <0.00%> (+1.38%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f079832...be78a4c. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,319,2021-07-14T15:56:33Z,2021-07-16T14:49:28Z,2021-07-16T14:49:28Z,MERGED,True,99,0,5,https://github.com/jruzicka-nic,distro FEATURE upstream RPM packaging,1,[],https://github.com/CESNET/libnetconf2/pull/319,https://github.com/michalvasko,3,https://github.com/CESNET/libnetconf2/pull/319#issuecomment-880759908,"Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.","Should be okay now, is there anything else needed (WiP?) or can be merged? If you want, you can add building this package into .github/workflows/ci.yaml as a new matrix config Package.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,319,2021-07-14T15:56:33Z,2021-07-16T14:49:28Z,2021-07-16T14:49:28Z,MERGED,True,99,0,5,https://github.com/jruzicka-nic,distro FEATURE upstream RPM packaging,1,[],https://github.com/CESNET/libnetconf2/pull/319,https://github.com/jruzicka-nic,4,https://github.com/CESNET/libnetconf2/pull/319#issuecomment-880767628,"Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.","Should be okay now, is there anything else needed (WiP?) or can be merged? If you want, you can add building this package into .github/workflows/ci.yaml as a new matrix config Package.

As this is a new feature that has no chance of breaking existing functionality, I'd merge it.
I'm not overly familiar with GitHub CI but I'll give the Package CI a shot and see what I end up with - but that can be done in a dedicated MR.
Biggest problem there is getting the libyang2 package installed... I guess that could be done during image setup? We'll see ;)",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,319,2021-07-14T15:56:33Z,2021-07-16T14:49:28Z,2021-07-16T14:49:28Z,MERGED,True,99,0,5,https://github.com/jruzicka-nic,distro FEATURE upstream RPM packaging,1,[],https://github.com/CESNET/libnetconf2/pull/319,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/319#issuecomment-881205886,"Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.","Biggest problem there is getting the libyang2 package installed...

Right, in the current CI ""targets"" it is compiled and installed from source, which will not do. And if it is meant to work for devel I think the only possibility is to build the latest package of libyang2 manually and then install it, otherwise you will almost never get the latest one. What about installing the dependencies (only libyang2 in this case) from source without a package like it is now and force apkg to ignore the specific package dependency? It should test building the project package reliably but not require building any other packages.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,319,2021-07-14T15:56:33Z,2021-07-16T14:49:28Z,2021-07-16T14:49:28Z,MERGED,True,99,0,5,https://github.com/jruzicka-nic,distro FEATURE upstream RPM packaging,1,[],https://github.com/CESNET/libnetconf2/pull/319,https://github.com/jruzicka-nic,6,https://github.com/CESNET/libnetconf2/pull/319#issuecomment-881454308,"Initial RPM packaging - might miss some BuildRequires (like libssh-devel ?) but it builds in my Fedora 34 VM against master libyang2 package.
Good enough to start some packaging CI a la libyang2 I reckon.
In related news, latest apkg-0.2.0 features improved apkg install which can be used without parameters to build and install packages from project source in one step - especially useful in containers.","What about installing the dependencies (only libyang2 in this case) from source without a package like it is now and force apkg to ignore the specific package dependency? It should test building the project package reliably but not require building any other packages.

TBH it would be less problematic to simply clone libyang2 source and run apkg install on that to build and install libyang2 packages.
Also depends whether you want to tests against latest available or latest released/packaged libyang2. Simply waiting until libyang2 makes it into Fedora (review in progress) and using that might be a solution too... but that doesn't really cover all platforms and all use cases.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,332,2021-08-25T08:46:20Z,2021-08-25T11:32:25Z,2021-08-25T11:32:30Z,MERGED,True,409,146,8,https://github.com/tadeas-vintrlik,Add locks around critical section in receiving messages,4,[],https://github.com/CESNET/libnetconf2/pull/332,https://github.com/tadeas-vintrlik,1,https://github.com/CESNET/libnetconf2/pull/332,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,332,2021-08-25T08:46:20Z,2021-08-25T11:32:25Z,2021-08-25T11:32:30Z,MERGED,True,409,146,8,https://github.com/tadeas-vintrlik,Add locks around critical section in receiving messages,4,[],https://github.com/CESNET/libnetconf2/pull/332,https://github.com/apps/lgtm-com,2,https://github.com/CESNET/libnetconf2/pull/332#issuecomment-905384060,,"This pull request introduces 8 alerts and fixes 3 when merging 711fbe4 into b3d0ea5 - view on LGTM.com
new alerts:

8 for Expression has no effect

fixed alerts:

3 for Too few arguments to formatting function",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,332,2021-08-25T08:46:20Z,2021-08-25T11:32:25Z,2021-08-25T11:32:30Z,MERGED,True,409,146,8,https://github.com/tadeas-vintrlik,Add locks around critical section in receiving messages,4,[],https://github.com/CESNET/libnetconf2/pull/332,https://github.com/apps/lgtm-com,3,https://github.com/CESNET/libnetconf2/pull/332#issuecomment-905411168,,"This pull request introduces 8 alerts and fixes 3 when merging 8719147 into b3d0ea5 - view on LGTM.com
new alerts:

8 for Expression has no effect

fixed alerts:

3 for Too few arguments to formatting function",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,333,2021-08-26T12:53:04Z,2021-08-26T13:17:07Z,2021-08-26T13:17:07Z,MERGED,True,119,1,7,https://github.com/synther,Fix TLS connection with Subject Alternative Name auth,3,[],https://github.com/CESNET/libnetconf2/pull/333,https://github.com/synther,1,https://github.com/CESNET/libnetconf2/pull/333,Fixes #328,Fixes #328,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,333,2021-08-26T12:53:04Z,2021-08-26T13:17:07Z,2021-08-26T13:17:07Z,MERGED,True,119,1,7,https://github.com/synther,Fix TLS connection with Subject Alternative Name auth,3,[],https://github.com/CESNET/libnetconf2/pull/333,https://github.com/apps/lgtm-com,2,https://github.com/CESNET/libnetconf2/pull/333#issuecomment-906386192,Fixes #328,"This pull request introduces 8 alerts and fixes 4 when merging 0b03910 into 891b73a - view on LGTM.com
new alerts:

8 for Expression has no effect

fixed alerts:

4 for Too few arguments to formatting function",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,333,2021-08-26T12:53:04Z,2021-08-26T13:17:07Z,2021-08-26T13:17:07Z,MERGED,True,119,1,7,https://github.com/synther,Fix TLS connection with Subject Alternative Name auth,3,[],https://github.com/CESNET/libnetconf2/pull/333,https://github.com/codecov-commenter,3,https://github.com/CESNET/libnetconf2/pull/333#issuecomment-906401640,Fixes #328,"Codecov Report

Merging #333 (b620e92) into devel (39a2599) will decrease coverage by 0.08%.
The diff coverage is 0.00%.


❗ Current head b620e92 differs from pull request most recent head 0b03910. Consider uploading reports for the commit 0b03910 to get more accurate results


@@            Coverage Diff             @@
##            devel     #333      +/-   ##
==========================================
- Coverage   44.31%   44.22%   -0.09%     
==========================================
  Files          22       22              
  Lines       10369    10369              
==========================================
- Hits         4595     4586       -9     
- Misses       5774     5783       +9     



Impacted Files
Coverage Δ





src/session_server_tls.c
35.70% <0.00%> (-0.23%)
⬇️


tests/test_server_thread.c
93.51% <0.00%> (-1.39%)
⬇️


src/session_server.c
27.79% <0.00%> (-0.22%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 39a2599...0b03910. Read the comment docs.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,333,2021-08-26T12:53:04Z,2021-08-26T13:17:07Z,2021-08-26T13:17:07Z,MERGED,True,119,1,7,https://github.com/synther,Fix TLS connection with Subject Alternative Name auth,3,[],https://github.com/CESNET/libnetconf2/pull/333,https://github.com/apps/lgtm-com,4,https://github.com/CESNET/libnetconf2/pull/333#issuecomment-906404413,Fixes #328,"This pull request introduces 3 alerts and fixes 8 when merging 0b03910 into 86eb9d6 - view on LGTM.com
new alerts:

3 for Too few arguments to formatting function

fixed alerts:

8 for Expression has no effect",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,333,2021-08-26T12:53:04Z,2021-08-26T13:17:07Z,2021-08-26T13:17:07Z,MERGED,True,119,1,7,https://github.com/synther,Fix TLS connection with Subject Alternative Name auth,3,[],https://github.com/CESNET/libnetconf2/pull/333,https://github.com/michalvasko,5,https://github.com/CESNET/libnetconf2/pull/333#issuecomment-906405172,Fixes #328,"I have changed the base to devel, we do not accept PRs to master, so a few other commits will be merged. Thanks for the fix, anyway.",True,{'ROCKET': ['https://github.com/synther']}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,342,2021-09-30T14:15:10Z,2021-10-01T06:20:54Z,2021-10-01T06:20:54Z,MERGED,True,3,3,1,https://github.com/jktjkt,Fix printf string UB,1,[],https://github.com/CESNET/libnetconf2/pull/342,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/342,"A recent commit introduced a NULL pointer as a format string which gets eventually fed into a function argument marked nonnull. That's something which ASAN+UBSAN complains about in libnetconf2's test suite.
Also log the offending socket address family because of that variadic macro which -- I think -- really wants a value apart from that format string. Either way, it doesn't hurt to log that.
Fixes: 022c120","A recent commit introduced a NULL pointer as a format string which gets eventually fed into a function argument marked nonnull. That's something which ASAN+UBSAN complains about in libnetconf2's test suite.
Also log the offending socket address family because of that variadic macro which -- I think -- really wants a value apart from that format string. Either way, it doesn't hurt to log that.
Fixes: 022c120",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,343,2021-10-08T21:06:11Z,2021-10-11T06:49:22Z,2021-10-11T06:49:22Z,MERGED,True,77,29,9,https://github.com/jktjkt,Thread safety and other fixes,5,[],https://github.com/CESNET/libnetconf2/pull/343,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/343,"Use getpwuid_r() instead of getpwuid()
In the Netopeer2 test suite, two threads were calling getpwuid(), which is not a reentrant function. Here's a trace from TSAN:
WARNING: ThreadSanitizer: data race (pid=3803971)
Write of size 8 at 0x7fc95e073f40 by thread T2:
#0 getpwuid <null> (test_parallel_sessions+0x4367d4)
#1 nc_connect_unix libnetconf2/src/session_client.c:1270:10 (libnetconf2.so.2+0x1ba34)
#2 send_get_rpc Netopeer2/tests/test_parallel_sessions.c:68:15 (test_parallel_sessions+0x4ea807)

Previous write of size 8 at 0x7fc95e073f40 by thread T1:
#0 getpwuid <null> (test_parallel_sessions+0x4367d4)
#1 nc_connect_unix libnetconf2/src/session_client.c:1270:10 (libnetconf2.so.2+0x1ba34)
#2 send_get_rpc Netopeer2/tests/test_parallel_sessions.c:68:15 (test_parallel_sessions+0x4ea807)

Location is global 'resbuf.11357' of size 48 at 0x7fc95e073f40 (libc.so.6+0x1bcf40)

Thread T2 (tid=3807449, running) created by main thread at:
#0 pthread_create <null> (test_parallel_sessions+0x469032)
#1 test_first Netopeer2/tests/test_parallel_sessions.c:115:9 (test_parallel_sessions+0x4ea6c2)
#2 cmocka_run_one_test_or_fixture <null> (libcmocka.so.0+0x630e)

Thread T1 (tid=3807448, running) created by main thread at:
#0 pthread_create <null> (test_parallel_sessions+0x469032)
#1 test_first Netopeer2/tests/test_parallel_sessions.c:115:9 (test_parallel_sessions+0x4ea6ad)
#2 cmocka_run_one_test_or_fixture <null> (libcmocka.so.0+0x630e)

SUMMARY: ThreadSanitizer: data race (Netopeer2/tests/test_parallel_sessions+0x4367d4) in __interceptor_getpwuid

Fix that by switching to getpwuid_r(). The code is very similar to the auth_password_getpwnam() wrapper from session_server_ssh.c. I chose to put this into io.c even though it is not really an IO function, but the existing nc_realloc() is in that file as well.
check getpwnam_r()/getspnam_r()'s return code
Unlike getpwnam(), the reentrant variant is not documented to manipulate errno, but instead it is supposed to return the error code directly. Same for getspnam_r(). Make sure the code handles ERANGE correctly.
tests: fix -Wunused-result
cmake: get rid of CMAKE_C_FLAGS_COVERAGE
...because these are not actually set from anywhere in this repo.
cmake: Allow overriding per-build-type CFLAGS
Unfortunately, CMake's story for providing default flags for debug vs. release builds is not great. There's the CMAKE_C_FLAGS_<type>, but these got appended instead of prepended to user's CFLAGS, and as such they override whatever the user has requested. Not good.","Use getpwuid_r() instead of getpwuid()
In the Netopeer2 test suite, two threads were calling getpwuid(), which is not a reentrant function. Here's a trace from TSAN:
WARNING: ThreadSanitizer: data race (pid=3803971)
Write of size 8 at 0x7fc95e073f40 by thread T2:
#0 getpwuid <null> (test_parallel_sessions+0x4367d4)
#1 nc_connect_unix libnetconf2/src/session_client.c:1270:10 (libnetconf2.so.2+0x1ba34)
#2 send_get_rpc Netopeer2/tests/test_parallel_sessions.c:68:15 (test_parallel_sessions+0x4ea807)

Previous write of size 8 at 0x7fc95e073f40 by thread T1:
#0 getpwuid <null> (test_parallel_sessions+0x4367d4)
#1 nc_connect_unix libnetconf2/src/session_client.c:1270:10 (libnetconf2.so.2+0x1ba34)
#2 send_get_rpc Netopeer2/tests/test_parallel_sessions.c:68:15 (test_parallel_sessions+0x4ea807)

Location is global 'resbuf.11357' of size 48 at 0x7fc95e073f40 (libc.so.6+0x1bcf40)

Thread T2 (tid=3807449, running) created by main thread at:
#0 pthread_create <null> (test_parallel_sessions+0x469032)
#1 test_first Netopeer2/tests/test_parallel_sessions.c:115:9 (test_parallel_sessions+0x4ea6c2)
#2 cmocka_run_one_test_or_fixture <null> (libcmocka.so.0+0x630e)

Thread T1 (tid=3807448, running) created by main thread at:
#0 pthread_create <null> (test_parallel_sessions+0x469032)
#1 test_first Netopeer2/tests/test_parallel_sessions.c:115:9 (test_parallel_sessions+0x4ea6ad)
#2 cmocka_run_one_test_or_fixture <null> (libcmocka.so.0+0x630e)

SUMMARY: ThreadSanitizer: data race (Netopeer2/tests/test_parallel_sessions+0x4367d4) in __interceptor_getpwuid

Fix that by switching to getpwuid_r(). The code is very similar to the auth_password_getpwnam() wrapper from session_server_ssh.c. I chose to put this into io.c even though it is not really an IO function, but the existing nc_realloc() is in that file as well.
check getpwnam_r()/getspnam_r()'s return code
Unlike getpwnam(), the reentrant variant is not documented to manipulate errno, but instead it is supposed to return the error code directly. Same for getspnam_r(). Make sure the code handles ERANGE correctly.
tests: fix -Wunused-result
cmake: get rid of CMAKE_C_FLAGS_COVERAGE
...because these are not actually set from anywhere in this repo.
cmake: Allow overriding per-build-type CFLAGS
Unfortunately, CMake's story for providing default flags for debug vs. release builds is not great. There's the CMAKE_C_FLAGS_<type>, but these got appended instead of prepended to user's CFLAGS, and as such they override whatever the user has requested. Not good.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,343,2021-10-08T21:06:11Z,2021-10-11T06:49:22Z,2021-10-11T06:49:22Z,MERGED,True,77,29,9,https://github.com/jktjkt,Thread safety and other fixes,5,[],https://github.com/CESNET/libnetconf2/pull/343,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/343#issuecomment-939733891,"Use getpwuid_r() instead of getpwuid()
In the Netopeer2 test suite, two threads were calling getpwuid(), which is not a reentrant function. Here's a trace from TSAN:
WARNING: ThreadSanitizer: data race (pid=3803971)
Write of size 8 at 0x7fc95e073f40 by thread T2:
#0 getpwuid <null> (test_parallel_sessions+0x4367d4)
#1 nc_connect_unix libnetconf2/src/session_client.c:1270:10 (libnetconf2.so.2+0x1ba34)
#2 send_get_rpc Netopeer2/tests/test_parallel_sessions.c:68:15 (test_parallel_sessions+0x4ea807)

Previous write of size 8 at 0x7fc95e073f40 by thread T1:
#0 getpwuid <null> (test_parallel_sessions+0x4367d4)
#1 nc_connect_unix libnetconf2/src/session_client.c:1270:10 (libnetconf2.so.2+0x1ba34)
#2 send_get_rpc Netopeer2/tests/test_parallel_sessions.c:68:15 (test_parallel_sessions+0x4ea807)

Location is global 'resbuf.11357' of size 48 at 0x7fc95e073f40 (libc.so.6+0x1bcf40)

Thread T2 (tid=3807449, running) created by main thread at:
#0 pthread_create <null> (test_parallel_sessions+0x469032)
#1 test_first Netopeer2/tests/test_parallel_sessions.c:115:9 (test_parallel_sessions+0x4ea6c2)
#2 cmocka_run_one_test_or_fixture <null> (libcmocka.so.0+0x630e)

Thread T1 (tid=3807448, running) created by main thread at:
#0 pthread_create <null> (test_parallel_sessions+0x469032)
#1 test_first Netopeer2/tests/test_parallel_sessions.c:115:9 (test_parallel_sessions+0x4ea6ad)
#2 cmocka_run_one_test_or_fixture <null> (libcmocka.so.0+0x630e)

SUMMARY: ThreadSanitizer: data race (Netopeer2/tests/test_parallel_sessions+0x4367d4) in __interceptor_getpwuid

Fix that by switching to getpwuid_r(). The code is very similar to the auth_password_getpwnam() wrapper from session_server_ssh.c. I chose to put this into io.c even though it is not really an IO function, but the existing nc_realloc() is in that file as well.
check getpwnam_r()/getspnam_r()'s return code
Unlike getpwnam(), the reentrant variant is not documented to manipulate errno, but instead it is supposed to return the error code directly. Same for getspnam_r(). Make sure the code handles ERANGE correctly.
tests: fix -Wunused-result
cmake: get rid of CMAKE_C_FLAGS_COVERAGE
...because these are not actually set from anywhere in this repo.
cmake: Allow overriding per-build-type CFLAGS
Unfortunately, CMake's story for providing default flags for debug vs. release builds is not great. There's the CMAKE_C_FLAGS_<type>, but these got appended instead of prepended to user's CFLAGS, and as such they override whatever the user has requested. Not good.","Okay, merging.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,344,2021-10-13T13:37:27Z,2021-10-14T06:22:35Z,2021-10-14T06:22:35Z,MERGED,True,11,16,1,https://github.com/jruzicka-nic,distro UPDATE rpm packaging,1,[],https://github.com/CESNET/libnetconf2/pull/344,https://github.com/jruzicka-nic,1,https://github.com/CESNET/libnetconf2/pull/344,"Update libnetconf2.spec with best practices learned during libyang
Fedora review and require libyang >= 2 as opposed to libyang2.","Update libnetconf2.spec with best practices learned during libyang
Fedora review and require libyang >= 2 as opposed to libyang2.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,344,2021-10-13T13:37:27Z,2021-10-14T06:22:35Z,2021-10-14T06:22:35Z,MERGED,True,11,16,1,https://github.com/jruzicka-nic,distro UPDATE rpm packaging,1,[],https://github.com/CESNET/libnetconf2/pull/344,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/344#issuecomment-943005769,"Update libnetconf2.spec with best practices learned during libyang
Fedora review and require libyang >= 2 as opposed to libyang2.","No problem, thanks.",True,{'THUMBS_UP': ['https://github.com/jruzicka-nic']}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,348,2021-11-25T11:38:14Z,2021-11-25T12:27:21Z,2021-11-25T12:27:21Z,CLOSED,False,1,0,1,https://github.com/hthiery,libnetconf2 BUGFIX netopeer2 build fails when building with musl libc,1,[],https://github.com/CESNET/libnetconf2/pull/348,https://github.com/hthiery,1,https://github.com/CESNET/libnetconf2/pull/348,while updating buildroot package this failure was observed during package testing,while updating buildroot package this failure was observed during package testing,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,348,2021-11-25T11:38:14Z,2021-11-25T12:27:21Z,2021-11-25T12:27:21Z,CLOSED,False,1,0,1,https://github.com/hthiery,libnetconf2 BUGFIX netopeer2 build fails when building with musl libc,1,[],https://github.com/CESNET/libnetconf2/pull/348,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/348#issuecomment-979170720,while updating buildroot package this failure was observed during package testing,"Fixed myself, uncrustify complains if the headers are not in alphabetical order.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,350,2021-12-11T13:09:09Z,2021-12-11T13:10:52Z,2021-12-11T13:11:07Z,CLOSED,False,2,2,1,https://github.com/barbarost,session FEATURE fix build error,1,[],https://github.com/CESNET/libnetconf2/pull/350,https://github.com/barbarost,1,https://github.com/CESNET/libnetconf2/pull/350,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,350,2021-12-11T13:09:09Z,2021-12-11T13:10:52Z,2021-12-11T13:11:07Z,CLOSED,False,2,2,1,https://github.com/barbarost,session FEATURE fix build error,1,[],https://github.com/CESNET/libnetconf2/pull/350,https://github.com/barbarost,2,https://github.com/CESNET/libnetconf2/pull/350#issuecomment-991638819,,Closing due to incorrect commit message,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,351,2021-12-11T13:12:37Z,2021-12-13T08:06:54Z,2021-12-13T08:06:54Z,MERGED,True,2,2,1,https://github.com/barbarost,session BUGFIX fix build error,1,[],https://github.com/CESNET/libnetconf2/pull/351,https://github.com/barbarost,1,https://github.com/CESNET/libnetconf2/pull/351,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,351,2021-12-11T13:12:37Z,2021-12-13T08:06:54Z,2021-12-13T08:06:54Z,MERGED,True,2,2,1,https://github.com/barbarost,session BUGFIX fix build error,1,[],https://github.com/CESNET/libnetconf2/pull/351,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/351#issuecomment-992205141,,"Thanks, merged.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,352,2021-12-12T21:07:36Z,,2021-12-13T14:23:36Z,OPEN,False,0,1,1,https://github.com/oerdnj,WIP: Sync the Debian packaging with in-Debian packaging,1,[],https://github.com/CESNET/libnetconf2/pull/352,https://github.com/oerdnj,1,https://github.com/CESNET/libnetconf2/pull/352,The commit message and PR description needs to be updated first.,The commit message and PR description needs to be updated first.,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,352,2021-12-12T21:07:36Z,,2021-12-13T14:23:36Z,OPEN,False,0,1,1,https://github.com/oerdnj,WIP: Sync the Debian packaging with in-Debian packaging,1,[],https://github.com/CESNET/libnetconf2/pull/352,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/352#issuecomment-992210760,The commit message and PR description needs to be updated first.,"So I can change the commit message when merging but I do not know what to write there, why is the compat file no longer needed?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,352,2021-12-12T21:07:36Z,,2021-12-13T14:23:36Z,OPEN,False,0,1,1,https://github.com/oerdnj,WIP: Sync the Debian packaging with in-Debian packaging,1,[],https://github.com/CESNET/libnetconf2/pull/352,https://github.com/oerdnj,3,https://github.com/CESNET/libnetconf2/pull/352#issuecomment-992526494,The commit message and PR description needs to be updated first.,"So I can change the commit message when merging but I do not know what to write there

I'll do that, no worries.

why is the compat file no longer needed?

The first commit sync the current packaging work back-and-forth (I need to tweak sysrepo -> sysrepo-tools and various other little tweaks in current Debian packages) and there will be more commits on top of this. One of them would be to change the compatibility back to . Where  at the moment is I guess Debian stretch (EOL June 2022) and Ubuntu 18.04 (EOL April 2023). Is there anything else that you absolutely must support?",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,352,2021-12-12T21:07:36Z,,2021-12-13T14:23:36Z,OPEN,False,0,1,1,https://github.com/oerdnj,WIP: Sync the Debian packaging with in-Debian packaging,1,[],https://github.com/CESNET/libnetconf2/pull/352,https://github.com/michalvasko,4,https://github.com/CESNET/libnetconf2/pull/352#issuecomment-992530965,The commit message and PR description needs to be updated first.,"No, what you mentioned is as old as we would like to support, thanks.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,355,2021-12-17T06:13:43Z,2021-12-17T09:15:48Z,2021-12-17T09:15:48Z,MERGED,True,1,1,1,https://github.com/jktjkt,build: format-check: invoke `make` in a portable way,1,[],https://github.com/CESNET/libnetconf2/pull/355,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/355,"I've added uncrustify to my build environment, and as a result the build started failing for me because it tried to invoke make format-check. I use the ninja generator for CMake, which means that there's no Makefile generated in my build directory.
Fix this by invoking the relevant target via CMake.","I've added uncrustify to my build environment, and as a result the build started failing for me because it tried to invoke make format-check. I use the ninja generator for CMake, which means that there's no Makefile generated in my build directory.
Fix this by invoking the relevant target via CMake.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,355,2021-12-17T06:13:43Z,2021-12-17T09:15:48Z,2021-12-17T09:15:48Z,MERGED,True,1,1,1,https://github.com/jktjkt,build: format-check: invoke `make` in a portable way,1,[],https://github.com/CESNET/libnetconf2/pull/355,https://github.com/apps/lgtm-com,2,https://github.com/CESNET/libnetconf2/pull/355#issuecomment-996468648,"I've added uncrustify to my build environment, and as a result the build started failing for me because it tried to invoke make format-check. I use the ninja generator for CMake, which means that there's no Makefile generated in my build directory.
Fix this by invoking the relevant target via CMake.","This pull request introduces 8 alerts and fixes 3 when merging 906f9bd into 1901e89 - view on LGTM.com
new alerts:

8 for Expression has no effect

fixed alerts:

3 for Too few arguments to formatting function",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,360,2022-01-17T11:39:07Z,2022-01-17T12:40:36Z,2022-01-17T12:40:36Z,MERGED,True,8,7,2,https://github.com/syyyr,Get rid of volatile in favor of ATOMIC_T,1,[],https://github.com/CESNET/libnetconf2/pull/360,https://github.com/syyyr,1,https://github.com/CESNET/libnetconf2/pull/360,"Hi, these things sometimes caused errors in with ThreadSanitizer:
==================
WARNING: ThreadSanitizer: data race (pid=2220020)
  Write of size 1 at 0x7f4110c70c58 by main thread:
    #0 nc_verbosity /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/log.c:40:19 (libnetconf2.so.3+0x102ac)
    #1 libnetconf::client::setLogLevel(NC_VERB_LEVEL) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:170:5 (libnetconf2-cpp.so+0x6c47)
    #2 DOCTEST_ANON_FUNC_2() /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:183:5 (test_client+0xebb4f)
    #3 doctest::Context::run() /opt/cesnet-t/include/doctest/doctest.h:6510:21 (test_client+0xfc8cf)
    #4 main /opt/cesnet-t/include/doctest/doctest.h:6595:71 (test_client+0xfe1dc)

  Previous read of size 1 at 0x7f4110c70c58 by thread T1 (mutexes: write M94):
    #0 nc_read_msg_io /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/io.c:451:5 (libnetconf2.so.3+0xdbf7)
    #1 nc_read_msg_poll_io /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/io.c:599:12 (libnetconf2.so.3+0xe364)
    #2 recv_msg /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1939:9 (libnetconf2.so.3+0x21500)
    #3 recv_reply /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1997:11 (libnetconf2.so.3+0x1dbe1)
    #4 nc_recv_reply /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:2211:11 (libnetconf2.so.3+0x1d6a1)
    #5 retrieve_schema_data_getschema /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:410:15 (libnetconf2.so.3+0x20e44)
    #6 retrieve_schema_data /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:508:22 (libnetconf2.so.3+0x1b787)
    #7 nc_ctx_load_module /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:691:9 (libnetconf2.so.3+0x1b787)
    #8 nc_ctx_fill /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1036:9 (libnetconf2.so.3+0x1ab4a)
    #9 nc_ctx_check_and_fill /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1230:9 (libnetconf2.so.3+0x1ab4a)
    #10 nc_connect_inout /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1289:9 (libnetconf2.so.3+0x1bb30)
    #11 libnetconf::client::Session::connectFd(int, int) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:243:46 (libnetconf2-cpp.so+0x7922)
    #12 DOCTEST_ANON_FUNC_2()::$_0::operator()() const /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:163:24 (test_client+0xec282)
    #13 void std::__invoke_impl<void, DOCTEST_ANON_FUNC_2()::$_0>(std::__invoke_other, DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:61:14 (test_client+0xec282)
    #14 std::__invoke_result<DOCTEST_ANON_FUNC_2()::$_0>::type std::__invoke<DOCTEST_ANON_FUNC_2()::$_0>(DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:96:14 (test_client+0xec282)
    #15 void std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:253:13 (test_client+0xec282)
    #16 std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::operator()() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:260:11 (test_client+0xec282)
    #17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> > >::_M_run() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:211:13 (test_client+0xec282)
    #18 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)

  Location is global 'verbose_level' of size 1 at 0x7f4110c70c58 (libnetconf2.so.3+0x000000053c58)

  Mutex M94 (0x7b480000ff88) created at:
    #0 pthread_mutex_init <null> (test_client+0x7ba0c)
    #1 nc_new_session /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session.c:199:9 (libnetconf2.so.3+0x15be9)
    #2 nc_connect_inout /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1266:15 (libnetconf2.so.3+0x1bab7)
    #3 libnetconf::client::Session::connectFd(int, int) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:243:46 (libnetconf2-cpp.so+0x7922)
    #4 DOCTEST_ANON_FUNC_2()::$_0::operator()() const /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:163:24 (test_client+0xec282)
    #5 void std::__invoke_impl<void, DOCTEST_ANON_FUNC_2()::$_0>(std::__invoke_other, DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:61:14 (test_client+0xec282)
    #6 std::__invoke_result<DOCTEST_ANON_FUNC_2()::$_0>::type std::__invoke<DOCTEST_ANON_FUNC_2()::$_0>(DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:96:14 (test_client+0xec282)
    #7 void std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:253:13 (test_client+0xec282)
    #8 std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::operator()() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:260:11 (test_client+0xec282)
    #9 std::thread::_State_impl<std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> > >::_M_run() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:211:13 (test_client+0xec282)
    #10 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)

  Thread T1 (tid=2220022, running) created by main thread at:
    #0 pthread_create <null> (test_client+0x97d5a)
    #1 __gthread_create /build/gcc/src/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/x86_64-pc-linux-gnu/bits/gthr-default.h:663:35 (libstdc++.so.6+0xd36aa)
    #2 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:147:37 (libstdc++.so.6+0xd36aa)
    #3 doctest::Context::run() /opt/cesnet-t/include/doctest/doctest.h:6510:21 (test_client+0xfc8cf)
    #4 main /opt/cesnet-t/include/doctest/doctest.h:6595:71 (test_client+0xfe1dc)

SUMMARY: ThreadSanitizer: data race /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/log.c:40:19 in nc_verbosity","Hi, these things sometimes caused errors in with ThreadSanitizer:
==================
WARNING: ThreadSanitizer: data race (pid=2220020)
  Write of size 1 at 0x7f4110c70c58 by main thread:
    #0 nc_verbosity /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/log.c:40:19 (libnetconf2.so.3+0x102ac)
    #1 libnetconf::client::setLogLevel(NC_VERB_LEVEL) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:170:5 (libnetconf2-cpp.so+0x6c47)
    #2 DOCTEST_ANON_FUNC_2() /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:183:5 (test_client+0xebb4f)
    #3 doctest::Context::run() /opt/cesnet-t/include/doctest/doctest.h:6510:21 (test_client+0xfc8cf)
    #4 main /opt/cesnet-t/include/doctest/doctest.h:6595:71 (test_client+0xfe1dc)

  Previous read of size 1 at 0x7f4110c70c58 by thread T1 (mutexes: write M94):
    #0 nc_read_msg_io /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/io.c:451:5 (libnetconf2.so.3+0xdbf7)
    #1 nc_read_msg_poll_io /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/io.c:599:12 (libnetconf2.so.3+0xe364)
    #2 recv_msg /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1939:9 (libnetconf2.so.3+0x21500)
    #3 recv_reply /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1997:11 (libnetconf2.so.3+0x1dbe1)
    #4 nc_recv_reply /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:2211:11 (libnetconf2.so.3+0x1d6a1)
    #5 retrieve_schema_data_getschema /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:410:15 (libnetconf2.so.3+0x20e44)
    #6 retrieve_schema_data /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:508:22 (libnetconf2.so.3+0x1b787)
    #7 nc_ctx_load_module /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:691:9 (libnetconf2.so.3+0x1b787)
    #8 nc_ctx_fill /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1036:9 (libnetconf2.so.3+0x1ab4a)
    #9 nc_ctx_check_and_fill /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1230:9 (libnetconf2.so.3+0x1ab4a)
    #10 nc_connect_inout /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1289:9 (libnetconf2.so.3+0x1bb30)
    #11 libnetconf::client::Session::connectFd(int, int) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:243:46 (libnetconf2-cpp.so+0x7922)
    #12 DOCTEST_ANON_FUNC_2()::$_0::operator()() const /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:163:24 (test_client+0xec282)
    #13 void std::__invoke_impl<void, DOCTEST_ANON_FUNC_2()::$_0>(std::__invoke_other, DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:61:14 (test_client+0xec282)
    #14 std::__invoke_result<DOCTEST_ANON_FUNC_2()::$_0>::type std::__invoke<DOCTEST_ANON_FUNC_2()::$_0>(DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:96:14 (test_client+0xec282)
    #15 void std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:253:13 (test_client+0xec282)
    #16 std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::operator()() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:260:11 (test_client+0xec282)
    #17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> > >::_M_run() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:211:13 (test_client+0xec282)
    #18 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)

  Location is global 'verbose_level' of size 1 at 0x7f4110c70c58 (libnetconf2.so.3+0x000000053c58)

  Mutex M94 (0x7b480000ff88) created at:
    #0 pthread_mutex_init <null> (test_client+0x7ba0c)
    #1 nc_new_session /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session.c:199:9 (libnetconf2.so.3+0x15be9)
    #2 nc_connect_inout /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1266:15 (libnetconf2.so.3+0x1bab7)
    #3 libnetconf::client::Session::connectFd(int, int) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:243:46 (libnetconf2-cpp.so+0x7922)
    #4 DOCTEST_ANON_FUNC_2()::$_0::operator()() const /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:163:24 (test_client+0xec282)
    #5 void std::__invoke_impl<void, DOCTEST_ANON_FUNC_2()::$_0>(std::__invoke_other, DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:61:14 (test_client+0xec282)
    #6 std::__invoke_result<DOCTEST_ANON_FUNC_2()::$_0>::type std::__invoke<DOCTEST_ANON_FUNC_2()::$_0>(DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:96:14 (test_client+0xec282)
    #7 void std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:253:13 (test_client+0xec282)
    #8 std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::operator()() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:260:11 (test_client+0xec282)
    #9 std::thread::_State_impl<std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> > >::_M_run() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:211:13 (test_client+0xec282)
    #10 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)

  Thread T1 (tid=2220022, running) created by main thread at:
    #0 pthread_create <null> (test_client+0x97d5a)
    #1 __gthread_create /build/gcc/src/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/x86_64-pc-linux-gnu/bits/gthr-default.h:663:35 (libstdc++.so.6+0xd36aa)
    #2 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:147:37 (libstdc++.so.6+0xd36aa)
    #3 doctest::Context::run() /opt/cesnet-t/include/doctest/doctest.h:6510:21 (test_client+0xfc8cf)
    #4 main /opt/cesnet-t/include/doctest/doctest.h:6595:71 (test_client+0xfe1dc)

SUMMARY: ThreadSanitizer: data race /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/log.c:40:19 in nc_verbosity",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,360,2022-01-17T11:39:07Z,2022-01-17T12:40:36Z,2022-01-17T12:40:36Z,MERGED,True,8,7,2,https://github.com/syyyr,Get rid of volatile in favor of ATOMIC_T,1,[],https://github.com/CESNET/libnetconf2/pull/360,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/360#issuecomment-1014477846,"Hi, these things sometimes caused errors in with ThreadSanitizer:
==================
WARNING: ThreadSanitizer: data race (pid=2220020)
  Write of size 1 at 0x7f4110c70c58 by main thread:
    #0 nc_verbosity /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/log.c:40:19 (libnetconf2.so.3+0x102ac)
    #1 libnetconf::client::setLogLevel(NC_VERB_LEVEL) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:170:5 (libnetconf2-cpp.so+0x6c47)
    #2 DOCTEST_ANON_FUNC_2() /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:183:5 (test_client+0xebb4f)
    #3 doctest::Context::run() /opt/cesnet-t/include/doctest/doctest.h:6510:21 (test_client+0xfc8cf)
    #4 main /opt/cesnet-t/include/doctest/doctest.h:6595:71 (test_client+0xfe1dc)

  Previous read of size 1 at 0x7f4110c70c58 by thread T1 (mutexes: write M94):
    #0 nc_read_msg_io /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/io.c:451:5 (libnetconf2.so.3+0xdbf7)
    #1 nc_read_msg_poll_io /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/io.c:599:12 (libnetconf2.so.3+0xe364)
    #2 recv_msg /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1939:9 (libnetconf2.so.3+0x21500)
    #3 recv_reply /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1997:11 (libnetconf2.so.3+0x1dbe1)
    #4 nc_recv_reply /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:2211:11 (libnetconf2.so.3+0x1d6a1)
    #5 retrieve_schema_data_getschema /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:410:15 (libnetconf2.so.3+0x20e44)
    #6 retrieve_schema_data /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:508:22 (libnetconf2.so.3+0x1b787)
    #7 nc_ctx_load_module /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:691:9 (libnetconf2.so.3+0x1b787)
    #8 nc_ctx_fill /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1036:9 (libnetconf2.so.3+0x1ab4a)
    #9 nc_ctx_check_and_fill /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1230:9 (libnetconf2.so.3+0x1ab4a)
    #10 nc_connect_inout /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1289:9 (libnetconf2.so.3+0x1bb30)
    #11 libnetconf::client::Session::connectFd(int, int) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:243:46 (libnetconf2-cpp.so+0x7922)
    #12 DOCTEST_ANON_FUNC_2()::$_0::operator()() const /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:163:24 (test_client+0xec282)
    #13 void std::__invoke_impl<void, DOCTEST_ANON_FUNC_2()::$_0>(std::__invoke_other, DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:61:14 (test_client+0xec282)
    #14 std::__invoke_result<DOCTEST_ANON_FUNC_2()::$_0>::type std::__invoke<DOCTEST_ANON_FUNC_2()::$_0>(DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:96:14 (test_client+0xec282)
    #15 void std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:253:13 (test_client+0xec282)
    #16 std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::operator()() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:260:11 (test_client+0xec282)
    #17 std::thread::_State_impl<std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> > >::_M_run() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:211:13 (test_client+0xec282)
    #18 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)

  Location is global 'verbose_level' of size 1 at 0x7f4110c70c58 (libnetconf2.so.3+0x000000053c58)

  Mutex M94 (0x7b480000ff88) created at:
    #0 pthread_mutex_init <null> (test_client+0x7ba0c)
    #1 nc_new_session /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session.c:199:9 (libnetconf2.so.3+0x15be9)
    #2 nc_connect_inout /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/session_client.c:1266:15 (libnetconf2.so.3+0x1bab7)
    #3 libnetconf::client::Session::connectFd(int, int) /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/src/netconf-client.cpp:243:46 (libnetconf2-cpp.so+0x7922)
    #4 DOCTEST_ANON_FUNC_2()::$_0::operator()() const /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2-cpp/tests/client.cpp:163:24 (test_client+0xec282)
    #5 void std::__invoke_impl<void, DOCTEST_ANON_FUNC_2()::$_0>(std::__invoke_other, DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:61:14 (test_client+0xec282)
    #6 std::__invoke_result<DOCTEST_ANON_FUNC_2()::$_0>::type std::__invoke<DOCTEST_ANON_FUNC_2()::$_0>(DOCTEST_ANON_FUNC_2()::$_0&&) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/invoke.h:96:14 (test_client+0xec282)
    #7 void std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:253:13 (test_client+0xec282)
    #8 std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> >::operator()() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:260:11 (test_client+0xec282)
    #9 std::thread::_State_impl<std::thread::_Invoker<std::tuple<DOCTEST_ANON_FUNC_2()::$_0> > >::_M_run() /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/bits/std_thread.h:211:13 (test_client+0xec282)
    #10 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)

  Thread T1 (tid=2220022, running) created by main thread at:
    #0 pthread_create <null> (test_client+0x97d5a)
    #1 __gthread_create /build/gcc/src/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/x86_64-pc-linux-gnu/bits/gthr-default.h:663:35 (libstdc++.so.6+0xd36aa)
    #2 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:147:37 (libstdc++.so.6+0xd36aa)
    #3 doctest::Context::run() /opt/cesnet-t/include/doctest/doctest.h:6510:21 (test_client+0xfc8cf)
    #4 main /opt/cesnet-t/include/doctest/doctest.h:6595:71 (test_client+0xfe1dc)

SUMMARY: ThreadSanitizer: data race /home/vk/git/netconf-cli/submodules/dependencies/libnetconf2/src/log.c:40:19 in nc_verbosity","Okay, no problem.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,363,2022-02-03T13:47:54Z,2022-02-03T13:50:08Z,2022-02-04T12:54:45Z,MERGED,True,1,0,1,https://github.com/wungad,Update libnetconf2-dev.install,1,[],https://github.com/CESNET/libnetconf2/pull/363,https://github.com/wungad,1,https://github.com/CESNET/libnetconf2/pull/363,"This file has to be present for successful CESNET/netopeer2 build (devel).
https://github.com/CESNET/netopeer2/blob/devel/CMakeModules/FindLibNETCONF2.cmake#L74","This file has to be present for successful CESNET/netopeer2 build (devel).
https://github.com/CESNET/netopeer2/blob/devel/CMakeModules/FindLibNETCONF2.cmake#L74",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,363,2022-02-03T13:47:54Z,2022-02-03T13:50:08Z,2022-02-04T12:54:45Z,MERGED,True,1,0,1,https://github.com/wungad,Update libnetconf2-dev.install,1,[],https://github.com/CESNET/libnetconf2/pull/363,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/363#issuecomment-1029009739,"This file has to be present for successful CESNET/netopeer2 build (devel).
https://github.com/CESNET/netopeer2/blob/devel/CMakeModules/FindLibNETCONF2.cmake#L74","Yes, thanks.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,367,2022-03-15T10:40:42Z,2022-03-15T10:45:27Z,2022-03-15T10:45:27Z,MERGED,True,699,484,41,https://github.com/michalvasko,Devel merge,39,[],https://github.com/CESNET/libnetconf2/pull/367,https://github.com/michalvasko,1,https://github.com/CESNET/libnetconf2/pull/367,,,True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,368,2022-03-30T15:07:59Z,2022-03-31T06:02:13Z,2022-03-31T06:02:13Z,MERGED,True,1,1,1,https://github.com/jktjkt,Fix segfault on malformed yang-library data,1,[],https://github.com/CESNET/libnetconf2/pull/368,https://github.com/jktjkt,1,https://github.com/CESNET/libnetconf2/pull/368,"Our internal test suite fed mismatched replies to libnetconf2. The library was trying to request the ietf-yang-library data, and because of some preceding replies which sent garbage instead of that module's YANG source, the library was apparently not able to send a proper request. Instead, the following command was sent:
 libyang[0]: Unexpected module ""ietf-yang-metadata"" parsed instead of ""ietf-origin"").
 libyang[0]: Parsing module ""ietf-yang-metadata"" failed.
 libyang[0]: Loading ""ietf-origin"" module failed.
 libyang[0]: Parsing module ""ietf-netconf-nmda"" failed.
 Session 1 [INF]: Support for <get-data> from ietf-netconf-nmda not found.
 libyang[0]: Failed to resolve prefix ""ietf-yang-library"".
 Session 1 [DBG]: Sending message:

 #165

 Session 1 [DBG]: Sending message:
 <rpc xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0"" message-id=""4""><get xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""><filter type=""xpath"" select=""""/></get></rpc>

That in istelf is an error (libnetconf2 should have died much sooner when the server responds with garbage), but that's not what I am fixing here. Our broken test suite responded with:
 <rpc-reply xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0"" message-id=""4""><data xmlns=""urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"">   module ietf-yang-library {
     yang-version 1.1;
     namespace &quot;urn:ietf:params:xml:ns:yang:ietf-yang-library&quot;;
     prefix yanglib;
 ...

This ended up as a segfault:
 libnetconf2/src/session_client.c:828:71: runtime error: member access within null pointer of type 'const struct lysc_node'

 #0 0x7f4ac54350ae in build_schema_info_yl libnetconf2/src/session_client.c:828:71
 #1 0x7f4ac54350ae in nc_ctx_check_and_fill libnetconf2/src/session_client.c:1218:13
 #2 0x7f4ac54394d9 in nc_connect_inout libnetconf2/src/session_client.c:1289:9
 #3 0x7f4ac5b55201 in libnetconf::client::Session::connectFd(int, int, std::optional<libyang::Context>) libnetconf2-cpp/src/netconf-client.cpp:244:46

The fix prevents the segfault, and libnetconf2 now ""fails cleanly"" even with out broken test suite.
Another problem (libnetconf2 doesn't disconnect quickly enough when the YANG schemas requested from libyang do not match those which were actually requested) remains unfixed -- see this log for a copy of the actual communication.","Our internal test suite fed mismatched replies to libnetconf2. The library was trying to request the ietf-yang-library data, and because of some preceding replies which sent garbage instead of that module's YANG source, the library was apparently not able to send a proper request. Instead, the following command was sent:
 libyang[0]: Unexpected module ""ietf-yang-metadata"" parsed instead of ""ietf-origin"").
 libyang[0]: Parsing module ""ietf-yang-metadata"" failed.
 libyang[0]: Loading ""ietf-origin"" module failed.
 libyang[0]: Parsing module ""ietf-netconf-nmda"" failed.
 Session 1 [INF]: Support for <get-data> from ietf-netconf-nmda not found.
 libyang[0]: Failed to resolve prefix ""ietf-yang-library"".
 Session 1 [DBG]: Sending message:

 #165

 Session 1 [DBG]: Sending message:
 <rpc xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0"" message-id=""4""><get xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""><filter type=""xpath"" select=""""/></get></rpc>

That in istelf is an error (libnetconf2 should have died much sooner when the server responds with garbage), but that's not what I am fixing here. Our broken test suite responded with:
 <rpc-reply xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0"" message-id=""4""><data xmlns=""urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"">   module ietf-yang-library {
     yang-version 1.1;
     namespace &quot;urn:ietf:params:xml:ns:yang:ietf-yang-library&quot;;
     prefix yanglib;
 ...

This ended up as a segfault:
 libnetconf2/src/session_client.c:828:71: runtime error: member access within null pointer of type 'const struct lysc_node'

 #0 0x7f4ac54350ae in build_schema_info_yl libnetconf2/src/session_client.c:828:71
 #1 0x7f4ac54350ae in nc_ctx_check_and_fill libnetconf2/src/session_client.c:1218:13
 #2 0x7f4ac54394d9 in nc_connect_inout libnetconf2/src/session_client.c:1289:9
 #3 0x7f4ac5b55201 in libnetconf::client::Session::connectFd(int, int, std::optional<libyang::Context>) libnetconf2-cpp/src/netconf-client.cpp:244:46

The fix prevents the segfault, and libnetconf2 now ""fails cleanly"" even with out broken test suite.
Another problem (libnetconf2 doesn't disconnect quickly enough when the YANG schemas requested from libyang do not match those which were actually requested) remains unfixed -- see this log for a copy of the actual communication.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,368,2022-03-30T15:07:59Z,2022-03-31T06:02:13Z,2022-03-31T06:02:13Z,MERGED,True,1,1,1,https://github.com/jktjkt,Fix segfault on malformed yang-library data,1,[],https://github.com/CESNET/libnetconf2/pull/368,https://github.com/michalvasko,2,https://github.com/CESNET/libnetconf2/pull/368#issuecomment-1084117917,"Our internal test suite fed mismatched replies to libnetconf2. The library was trying to request the ietf-yang-library data, and because of some preceding replies which sent garbage instead of that module's YANG source, the library was apparently not able to send a proper request. Instead, the following command was sent:
 libyang[0]: Unexpected module ""ietf-yang-metadata"" parsed instead of ""ietf-origin"").
 libyang[0]: Parsing module ""ietf-yang-metadata"" failed.
 libyang[0]: Loading ""ietf-origin"" module failed.
 libyang[0]: Parsing module ""ietf-netconf-nmda"" failed.
 Session 1 [INF]: Support for <get-data> from ietf-netconf-nmda not found.
 libyang[0]: Failed to resolve prefix ""ietf-yang-library"".
 Session 1 [DBG]: Sending message:

 #165

 Session 1 [DBG]: Sending message:
 <rpc xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0"" message-id=""4""><get xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""><filter type=""xpath"" select=""""/></get></rpc>

That in istelf is an error (libnetconf2 should have died much sooner when the server responds with garbage), but that's not what I am fixing here. Our broken test suite responded with:
 <rpc-reply xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0"" message-id=""4""><data xmlns=""urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"">   module ietf-yang-library {
     yang-version 1.1;
     namespace &quot;urn:ietf:params:xml:ns:yang:ietf-yang-library&quot;;
     prefix yanglib;
 ...

This ended up as a segfault:
 libnetconf2/src/session_client.c:828:71: runtime error: member access within null pointer of type 'const struct lysc_node'

 #0 0x7f4ac54350ae in build_schema_info_yl libnetconf2/src/session_client.c:828:71
 #1 0x7f4ac54350ae in nc_ctx_check_and_fill libnetconf2/src/session_client.c:1218:13
 #2 0x7f4ac54394d9 in nc_connect_inout libnetconf2/src/session_client.c:1289:9
 #3 0x7f4ac5b55201 in libnetconf::client::Session::connectFd(int, int, std::optional<libyang::Context>) libnetconf2-cpp/src/netconf-client.cpp:244:46

The fix prevents the segfault, and libnetconf2 now ""fails cleanly"" even with out broken test suite.
Another problem (libnetconf2 doesn't disconnect quickly enough when the YANG schemas requested from libyang do not match those which were actually requested) remains unfixed -- see this log for a copy of the actual communication.","Fine, thanks.",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,370,2022-04-20T12:14:32Z,2022-04-21T13:50:25Z,2022-04-21T13:50:25Z,MERGED,True,11,16,2,https://github.com/jruzicka-nic,rpm UPDATE packaging from Fedora,1,[],https://github.com/CESNET/libnetconf2/pull/370,https://github.com/jruzicka-nic,1,https://github.com/CESNET/libnetconf2/pull/370,"Fedora package sources:
https://src.fedoraproject.org/rpms/libnetconf2","Fedora package sources:
https://src.fedoraproject.org/rpms/libnetconf2",True,{}
CESNET/libnetconf2,https://github.com/CESNET/libnetconf2,376,2022-06-03T11:31:28Z,2022-06-03T12:56:31Z,2022-06-03T12:56:32Z,MERGED,True,893,0,7,https://github.com/Roytak,examples FEATURE example client and server,1,[],https://github.com/CESNET/libnetconf2/pull/376,https://github.com/Roytak,1,https://github.com/CESNET/libnetconf2/pull/376,,,True,{}
