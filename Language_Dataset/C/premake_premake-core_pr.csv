premake/premake-core,https://github.com/premake/premake-core,444,2016-03-07T21:42:17Z,2016-03-08T11:12:28Z,2016-03-08T20:38:29Z,MERGED,True,1,1,1,https://github.com/starkos,Fix mis-cased symbol in clang.getlinks(),1,[],https://github.com/premake/premake-core/pull/444,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/444,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,444,2016-03-07T21:42:17Z,2016-03-08T11:12:28Z,2016-03-08T20:38:29Z,MERGED,True,1,1,1,https://github.com/starkos,Fix mis-cased symbol in clang.getlinks(),1,[],https://github.com/premake/premake-core/pull/444,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/444#issuecomment-193467472,,woops... LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,444,2016-03-07T21:42:17Z,2016-03-08T11:12:28Z,2016-03-08T20:38:29Z,MERGED,True,1,1,1,https://github.com/starkos,Fix mis-cased symbol in clang.getlinks(),1,[],https://github.com/premake/premake-core/pull/444,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/444#issuecomment-193732101,,üëç LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,None,1,https://github.com/premake/premake-core/pull/445,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/445#issuecomment-196228084,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","The module looks nice, but I'm not sure if it should be added to core. This is just more code that needs to be maintained, and there's already enough that needs to be maintained. I think your best bet would be to add it into the list of 3rd party modules for now.
@starkos what are your thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/tritao,3,https://github.com/premake/premake-core/pull/445#issuecomment-196228743,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","Pretty much every .NET project nowadays needs Nuget packages so it would be nice if this could be integrated in the core distribution, at least until we have some better way to distribute / depend on 3rd party modules.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/445#issuecomment-196405186,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","NuGet is a feature of Visual Studio now, and since the VS exporter is still in core, it make sense that this would be as well. But we would need a few changes first‚Ä¶
If we are going to keep this code as a module, the repository needs to be transferred to the Premake team account, and permissions (admin access to Premake team + write access to original author) set accordingly.
BUT, as there isn't too much code involved, and since this is a feature of VS and not an add-on, it might make more sense to submit a PR that integrates the changes directly into the VS exporter, rather than bolting it on top.
Also‚Ä¶should we consider using a more generic API name instead of nuget(), as future-proofing against the addition of a toolset with a different package manager?",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/tritao,5,https://github.com/premake/premake-core/pull/445#issuecomment-196409386,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I don't think so. If/when we add a more generic package management system to Premake, Nuget will still need to be supported somehow, I see them as orthogonal concepts.
In my projects I can see myself both using Premake and Nuget packages in the same project.
By the way, once this gets in, I'd like to figure out a way to support it under the Make backend for C# projects. I think the way to go is to get Premake to drive nuget.exe and get the needed packages, either at runtime or during project generation.
What do you think?",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,None,6,https://github.com/premake/premake-core/pull/445#issuecomment-196410899,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","BUT, as there isn't too much code involved, and since this is a feature of VS and not an add-on, it might make more sense to submit a PR that integrates the changes directly into the VS exporter, rather than bolting it on top.

I agree. I could take a look if this is the way to go.

Also‚Ä¶should we consider using a more generic API name instead of nuget(), as future-proofing against the addition of a toolset with a different package manager?

I'd say go with YAGNI and change it in the future if/when Premake supports an another package manager.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/445#issuecomment-196411240,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","If/when we add a more generic package management system to Premake, Nuget will still need to be supported somehow, I see them as orthogonal concepts.

Sorry for the confusion: I wasn't referring to Premake packages but rather, for example, Eclipse packages.

I'd like to figure out a way to support it under the Make backend for C# projects. I think the way to go is to get Premake to drive nuget.exe and get the needed packages, either at runtime or during project generation.

Premake generated Projects/Makefiles need to be able to stand on their own. I'd suggest adding an install rule to the makefile that handles the call to NuGet directly.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/445#issuecomment-196411490,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I'd say go with YAGNI and change it in the future if/when Premake supports an another package manager.

I'm good with this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/445#issuecomment-196769429,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I'd say go with YAGNI and change it in the future if/when Premake supports an another package manager.

I feel like you've missed the situation where a module developer, like yourself, might create a module for package management, like you did. Why don't we just create the system now? getpackage { ""manager:package:version"" } or getpackage { ""nuget:sdl2:2.0.3"" } seems like a better idea than having every module developer that wants to implement a package manager having to recreate the ""get package"" concept. It also means that modules that extend the getpackage concept, will be easier to merge in, there won't be a discussion, like this one, required to merge it in.
Personally, I don't see the place for YAGNI in premake-core, if that approach was taken from the start, we would never have premake.override. Which is a pretty core component to module development, but not to core development, we have the code and we can just change it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,None,10,https://github.com/premake/premake-core/pull/445#issuecomment-196779206,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I feel like you've missed the situation where a module developer, like yourself, might create a module for package management, like you did. Why don't we just create the system now? getpackage { ""manager:package:version"" } or getpackage { ""nuget:sdl2:2.0.3"" } seems like a better idea than having every module developer that wants to implement a package manager having to recreate the ""get package"" concept. It also means that modules that extend the getpackage concept, will be easier to merge in, there won't be a discussion, like this one, required to merge it in.

I get where you're coming from, but I disagree.
What if we need to support specifying custom package repositories for a package manager? Version ranges? I think it's impossible to try and create a generic interface for package dependencies if your only point of reference is a single package manager.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/tritao,11,https://github.com/premake/premake-core/pull/445#issuecomment-196780402,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I've thought a bit about this overnight and can definitely see some value in abstracting package management functionality in Premake.
My only concerns is that different package systems will have different requirements, so we either design a very simplified system like the syntax suggested by @samsinsane (and end up with a limited system with only the common aspects between them) or end up with a very complex API to support all the use cases that it would have been better going on with different API for each of them.
I seem to remember some libtool support that has been proposed in the past, and from what I recall that would not map very well to systems like NuGet or npm, so a unified syntax might not work too well. I can't seem to find that PR now, so my memory might be foggy..
Anyway, it's been months of waiting just to get this finally ready for merging, we (and I'm sure other people) have had to develop a lot of workarounds for supporting NuGet packages, getting this in core ASAP would be most welcome. Just this week I've had to develop some NuGet related workarounds in one of our projects.
Let's not hold it out for a unified interface that honestly I think we do not yet have a good idea how to design without knowing which kinds of package managers Premake will need to support in the future.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/samsinsane,12,https://github.com/premake/premake-core/pull/445#issuecomment-196806893,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","What if we need to support specifying custom package repositories for a package manager? Version ranges? I think it's impossible to try and create a generic interface for package dependencies if your only point of reference is a single package manager.

getpackage { ""manager:package:version:version"" }? I don't see why we couldn't have a variable number of arguments here. Maybe, instead of a delimited string, we do something similar to vpaths (might require work in the API system)?
getpackages {
  [""manager""] = {
    { package=""package"", version=""version"", repository=""repository"" }, -- custom repositories
    { package=""package"", version=""start:end"" } -- version ranges
  }
}

This might get a bit unwieldy, but if it's extensible and the different implementations can require additional documented parameters, I don't see why this wouldn't work.

Anyway, it's been months of waiting just to get this finally ready for merging, we (and I'm sure other people) have had to develop a lot of workarounds for supporting NuGet packages, getting this in core ASAP would be most welcome. Just this week I've had to develop some NuGet related workarounds in one of our projects.

I'm not quite sure what you're trying to say here, I don't see how having this module in premake-core changes anything? You can already utilize the module, so either your team has decided to not use any premake modules, which shouldn't impact the decisions made in this PR, or the module is broken, which makes me hesitant to see this code come into core in its current state.

I'm really concerned about taking the YAGNI approach with ""pretty much every .NET project"" requiring this feature. If people have been waiting months for this feature, surely we can spend a fraction of that time discussing a better solution that won't cause incompatibilities later?
Ultimately, I don't have that much experience with package managers, so I'm happy to defer to those with the experience. If it's not possible to create a generic solution that allows for different package managers because they're significantly different, that's totally fine, but if we can create a generic solution, we should.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/tvandijck,13,https://github.com/premake/premake-core/pull/445#issuecomment-196956647,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I'm somewhat with the others on the ""maybe there is a more generic approach""...
That said... nuget is quite a system, and I wouldn't mind this as is, but maybe as Jason said make it part of the VS action itself, instead of a bolt on...  although admittedly, when the topic of nuget came up initially, everyone was ""make it a module""... so I guess to reverse course on that is also somewhat unfair...
Either way... Just my two things on package management:

version ranges, are NP complete.
package dependencies, and ""getpackage/import"" are and need to be two separate things.
** for example a package can't claim that it depends on A version 2.0, since that will make that package entirely unusable... the mathematical probability that a set of packages works together is 0 if versioned dependencies are specified in each package. (feel free to email me for a better explanation)
version constraints are OK, but when using ""semver"" that is already explicitly encoded, so those do not have to be encoded using ranges.

Nuget deals with versions very explicitly... the solution specifies the versions used, packages only mention that they depend on another package by name, and a minimum version. The dependency however has nothing to do with the ""getpackage/import"" api.
In my mind the getpackage/import API is something you do on the solution, and nowhere else..
So if that is the case all you really need is a way to 'register a package' with a common system, and the package 'manager' whatever that is can simple do whatever it wants to download that package onto the system.
and that can be:

""nuget.import(""package"", version)""
""git.clone(""package"", revision)""

as long as each of those calls correctly add the resulting information to a table that is shared in premake, all packages, wherever they come from can be depended on through common API.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,https://github.com/starkos,14,https://github.com/premake/premake-core/pull/445#issuecomment-197004762,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","To clarify my previous comment, all I was really looking for was a more generic name for the API than ""nuget"". I think the current call itself is fine and can be easily extended if we need to grow.
If and when we need to support additional package systems (which may or may not ever happen, and who knows how Premake itself will have changed by then), we can implement it with real requirements, rather than trying to design an idealized system in the absence of real use cases.

although admittedly, when the topic of nuget came up initially, everyone was ""make it a module""... so I guess to reverse course on that is also somewhat unfair...

I'm trying to be consistent in what I'm telling people who want to contribute, and I think asking people to develop and share a module for entirely new features is reasonable. @aleksijuvani: If you don't want to prepare a PR to merge directly into the VS exporter, let me know and I'll do it for you.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,None,15,https://github.com/premake/premake-core/pull/445#issuecomment-197010682,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.","I'm trying to be consistent in what I'm telling people who want to contribute, and I think asking people to develop and share a module for entirely new features is reasonable. @aleksijuvani: If you don't want to prepare a PR to merge directly into the VS exporter, let me know and I'll do it for you.

Oh no, it's fine. I can take care of it. I'll try to get it done this week.",True,{}
premake/premake-core,https://github.com/premake/premake-core,445,2016-03-12T19:40:09Z,2016-03-19T19:17:27Z,2016-04-12T08:36:35Z,CLOSED,False,5,0,3,None,Add NuGet submodule,1,[],https://github.com/premake/premake-core/pull/445,None,16,https://github.com/premake/premake-core/pull/445#issuecomment-198772731,"As discussed in issue #197. NuGet is the package manager included in recent versions of Visual¬†Studio. This pull request will add a new function called nuget that can be used to specify these package dependencies for C++ and C# projects.
Syntax is as follows:
nuget { ""package:version"" } -- in project scope
Please review. I've tested this functionality with a personal project of mine, but it wouldn't hurt to have some more eyes on this.",@starkos: I've prepared pull request #453 to merge directly into the VS exporter.,True,{}
premake/premake-core,https://github.com/premake/premake-core,449,2016-03-15T18:50:03Z,2016-03-16T20:34:00Z,2016-03-16T20:34:58Z,MERGED,True,49,79,2,https://github.com/starkos,Roll back PR #440,1,[],https://github.com/premake/premake-core/pull/449,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/449,See the discussion on the original PR.,See the discussion on the original PR.,True,{}
premake/premake-core,https://github.com/premake/premake-core,449,2016-03-15T18:50:03Z,2016-03-16T20:34:00Z,2016-03-16T20:34:58Z,MERGED,True,49,79,2,https://github.com/starkos,Roll back PR #440,1,[],https://github.com/premake/premake-core/pull/449,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/449#issuecomment-197112566,See the discussion on the original PR.,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/450,Fixes #315,Fixes #315,True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/450#issuecomment-197894260,Fixes #315,lgtm,True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/450#issuecomment-197907606,Fixes #315,"We currently use system() to choose the target OS, i.e. system(""Windows""). Would it make sense to change this API to systemversion()?
OS X has a similar-ish concept where you can target min and max version ranges of core SDKs‚ÄîPremake itself uses them via linkoptions() currently. It would be nice to unify the ideas if possible.",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/450#issuecomment-198164935,Fixes #315,"systemversion makes sense, I'll try to push the change when I get a chance.
Unifying the ideas sounds great, but I don't really know how this would work. systemversion(""min:max"")? Could that be confusing when the action or system doesn't support ranges?",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/450#issuecomment-208849822,Fixes #315,"@starkos updated to be systemversion and allows systemversion(""min:max"") for the OSX version system.",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/450#issuecomment-208987569,Fixes #315,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/450#issuecomment-209528236,Fixes #315,"Looks great, thanks! Can you throw together a doc page for the wiki to capture the ""min:max"" parameter format?",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/450#issuecomment-209846509,Fixes #315,Done! Let me know if I need to add more information.,True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/redorav,9,https://github.com/premake/premake-core/pull/450#issuecomment-331299520,Fixes #315,"I have a problem with this API. I've tried to use it as per the docs, but I'm getting a warning and the property doesn't get enabled. I have a simplest case that goes wrong.
workspace ""Workspace""
	configurations { ""Debug"", ""Release"" }
	platforms { ""A"", ""B"" }
	location (""Workspace"")
	
	system(""windows"")
	systemversion(""8.1"")
		
	filter { ""platforms:B"" }		
		systemversion(""10.0.15063.0"")

project (""Project1"")
	kind(""WindowedApp"")
	language(""C++"")

If I try to put that through premake alpha12, it complains that
** Warning: 'systemversion' on config 'Debug|B' differs from project 'Project1'; may be set out of scope
Perhaps I'm doing something wrong? My expectation is that the filter in configuration B would apply to both Debug and Release but somehow it gets confused and only tries to apply it to one of them (in practice it doesn't apply it to either).",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/450#issuecomment-331323075,Fixes #315,"@redorav Unfortunately, Visual Studio only supports one version per project and they don't make that very clear. It's only obvious when you attempt to set it in two different configurations and it doesn't work.",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/redorav,11,https://github.com/premake/premake-core/pull/450#issuecomment-331405965,Fixes #315,@samsinsane I see. I tried to do it manually and it's just like you describe... what a shame. I wanted to be able to have a DX12+Win10 configuration without affecting other configurations that actually compile in previous versions of Windows.,True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/redorav,12,https://github.com/premake/premake-core/pull/450#issuecomment-340220718,Fixes #315,"@samsinsane I tried playing with this a little bit more. From the Visual Studio options menu you can't change this property per project because it goes into the ""Globals"", but it seems that it can be done by tweaking the .vcxproj file. Typically properties go in the ""Configuration"" label, and conditionally setting the WindowsTargetPlatformVersion fixes this issue and allows different configurations to target different Windows SDKs. I tested this in a small example project that included d3d12.h, which compiles when targeting Windows 10 and doesn't when targeting Windows 8 (which is my use case)
I don't know how premake creates the vcxprojs but it looks like it should be relatively easy to add. Here is what I did in the vcxproj to make this work. Should I create a new bug for this? I kind of feel like it's well suited here since it goes hand in hand with the targetplatformversion API
<PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Debug|Win32'"" Label=""Configuration"">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <WindowsTargetPlatformVersion>10.0.16299.0</WindowsTargetPlatformVersion>
</PropertyGroup>",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/samsinsane,13,https://github.com/premake/premake-core/pull/450#issuecomment-340262084,Fixes #315,"@redorav Nice, glad there's an alternative!

Should I create a new bug for this? I kind of feel like it's well suited here since it goes hand in hand with the targetplatformversion API

Creating a new bug would be great! This is actually a merged pull request, so we can't really ""reopen"" it or anything.",True,{}
premake/premake-core,https://github.com/premake/premake-core,450,2016-03-17T13:31:50Z,2016-04-13T16:15:26Z,2017-10-29T13:39:35Z,MERGED,True,87,0,4,https://github.com/samsinsane,Added targetplatformversion API,1,[],https://github.com/premake/premake-core/pull/450,https://github.com/redorav,14,https://github.com/premake/premake-core/pull/450#issuecomment-340263073,Fixes #315,"Ah. you're totally right, I've created #936 for this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,451,2016-03-17T21:24:30Z,2016-03-17T22:16:46Z,2016-03-17T22:18:30Z,MERGED,True,2,1,1,https://github.com/tvandijck,fix path_translate for old compilers.,1,[],https://github.com/premake/premake-core/pull/451,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/451,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,451,2016-03-17T21:24:30Z,2016-03-17T22:16:46Z,2016-03-17T22:18:30Z,MERGED,True,2,1,1,https://github.com/tvandijck,fix path_translate for old compilers.,1,[],https://github.com/premake/premake-core/pull/451,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/451#issuecomment-198106062,,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,452,2016-03-17T21:26:33Z,2016-03-18T18:58:06Z,2016-06-15T01:19:00Z,CLOSED,False,36,13,1,https://github.com/tvandijck,Modified project link dependencies to be recursive. ,1,[],https://github.com/premake/premake-core/pull/452,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/452,"Linking projects will now link the link dependencies of all their link dependencies. To keep this in check, static libs now ignore their link dependencies.
This should make it so libraries can specify their dependencies freely while the generated projects do the right thing and specify them at the linking level.","Linking projects will now link the link dependencies of all their link dependencies. To keep this in check, static libs now ignore their link dependencies.
This should make it so libraries can specify their dependencies freely while the generated projects do the right thing and specify them at the linking level.",True,{}
premake/premake-core,https://github.com/premake/premake-core,452,2016-03-17T21:26:33Z,2016-03-18T18:58:06Z,2016-06-15T01:19:00Z,CLOSED,False,36,13,1,https://github.com/tvandijck,Modified project link dependencies to be recursive. ,1,[],https://github.com/premake/premake-core/pull/452,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/452#issuecomment-198243012,"Linking projects will now link the link dependencies of all their link dependencies. To keep this in check, static libs now ignore their link dependencies.
This should make it so libraries can specify their dependencies freely while the generated projects do the right thing and specify them at the linking level.","LGTM, can you add some tests for this though?",True,{}
premake/premake-core,https://github.com/premake/premake-core,452,2016-03-17T21:26:33Z,2016-03-18T18:58:06Z,2016-06-15T01:19:00Z,CLOSED,False,36,13,1,https://github.com/tvandijck,Modified project link dependencies to be recursive. ,1,[],https://github.com/premake/premake-core/pull/452,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/452#issuecomment-198495163,"Linking projects will now link the link dependencies of all their link dependencies. To keep this in check, static libs now ignore their link dependencies.
This should make it so libraries can specify their dependencies freely while the generated projects do the right thing and specify them at the linking level.","This touched almost every project we have. It removed dependencies which were explicitly set in the project script. It added dependencies that we don't want, with no (easy) way to remove them.
It also increased our project generation time by more than a factor of four.
I'm closing this one. I appreciate the contribution and understand the need, but there needs to be a way to explicitly control which dependencies are propagated‚Äîno ""magic"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,452,2016-03-17T21:26:33Z,2016-03-18T18:58:06Z,2016-06-15T01:19:00Z,CLOSED,False,36,13,1,https://github.com/tvandijck,Modified project link dependencies to be recursive. ,1,[],https://github.com/premake/premake-core/pull/452,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/452#issuecomment-198571735,"Linking projects will now link the link dependencies of all their link dependencies. To keep this in check, static libs now ignore their link dependencies.
This should make it so libraries can specify their dependencies freely while the generated projects do the right thing and specify them at the linking level.","I understand.. that said:

It removed dependencies which were explicitly set in the project script.

but linking a library against a library makes no sense.. even more so, this ends up in the  section of the vcxproj, which is ignored by msbuild for static libs... so it basically removed dead weight...

It added dependencies that we don't want, with no (easy) way to remove them.

arguably, dependencies you don't want, shouldn't have been in the link chain, but instead should have properly used the ""dependson"" construct where build order was intended, using links to setup build order would be kind of 'dirty'.

but there needs to be a way to explicitly control which dependencies are propagated‚Äîno ""magic"".

Our understanding was that that was exactly what ""dependson"" and ""links"" was for.. dependson is for build order dependencies... and links is for link dependencies. The change here is that links now propagate... as in, if a library links against another library, the resulting executable now only has to link against what it actually used, and ""automatically"" gets what that lib used..
Say for example I have:
""graphicsEngine"", which uses DirectX.
and I have an application that uses ""graphicsEngine"", I now no longer need to specify ""DirectX"" as well for the application, and hence the lua file for the ""application"" is now platform independent, since all it has to do it ""links { ""graphicsEngine""}"" and it's done... instead of:
""links { ""graphicsEngine""} filter {windows} links {""DirectX""}""
It basically means the responsibility of correctly ""exporting"" what a library uses is with the library, instead of with the final application script, our script got half the size because of this.
I'm all for making this more explicit, any feedback towards the idea is very welcome, instead of just shutting it down.. obviously the project generation time is certainly a concern, I get it... but on our massive project, it literally had no measurable effect at all.",True,{}
premake/premake-core,https://github.com/premake/premake-core,452,2016-03-17T21:26:33Z,2016-03-18T18:58:06Z,2016-06-15T01:19:00Z,CLOSED,False,36,13,1,https://github.com/tvandijck,Modified project link dependencies to be recursive. ,1,[],https://github.com/premake/premake-core/pull/452,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/452#issuecomment-198584370,"Linking projects will now link the link dependencies of all their link dependencies. To keep this in check, static libs now ignore their link dependencies.
This should make it so libraries can specify their dependencies freely while the generated projects do the right thing and specify them at the linking level.","I'm all for making this more explicit, any feedback towards the idea is very welcome

The uses/usages approach that has been discussed earlier, where a library project can describe what settings are required to use it, has been the best approach I've seen proposed. I'm pretty sure you've been in on some of those discussions, hopefully you know what I'm talking about.
As a whole, that is a big feature to implement, but it could perhaps be started with only linkages?

obviously the project generation time is certainly a concern, I get it... but on our massive project, it literally had no measurable effect at all.

Ours went from ~1.5 min. to over seven.
Sorry to be so terse with the feedback lately‚Ä¶I'm trying very hard to make progress on fixing the Xcode exporter, the new queries, and 5.0 in general, but all of what little time I have is being used up just trying to keep up with the PR changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,None,1,https://github.com/premake/premake-core/pull/453,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,None,2,https://github.com/premake/premake-core/pull/453#issuecomment-199224399,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.",@starkos: Is this better?,True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,None,3,https://github.com/premake/premake-core/pull/453#issuecomment-206877646,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.",@starkos: Is this good?,True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/453#issuecomment-206909330,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","Can you squish those commits down into one? Most of your commits either fix errors or move code around, they don't really need to be separate commits.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/453#issuecomment-206913266,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","FWIW, I prefer several small commits to one big one‚Äîit makes it easier to tie a specific change to the intent. The Files Changed tab does a good job of showing the big picture.
Not everyone agrees with me (hi @TurkeyMan), so I tend to let contributors follow the style that works for them, and try not to overdo it myself.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,None,6,https://github.com/premake/premake-core/pull/453#issuecomment-207369922,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","I would prefer to keep this as several small commits for the reasons listed above, but either way is fine for me. Please let me know if anything else needs to be changed in order to get this merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/453#issuecomment-208100685,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","You both seem to be keen on keeping all those commits, I personally don't see value in most of them. I'll leave it here since I don't think it's worth arguing over, but FWIW, I probably side with @TurkeyMan on this issue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,https://github.com/TurkeyMan,8,https://github.com/premake/premake-core/pull/453#issuecomment-208320641,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","Haha, how come I'm being roped into this? :P
In the interest of sharing ideas, my personal sense of a good PR lies somewhere in the middle; I see that a PR should represent a single context, and then I like the series of patches in the PR to represent significant tasks or meaningful segments of that context (ie, moments to be considered from a communication/reviewing perspective).
I don't find this PR too bad, but I do agree there are a few more patches than necessary, for instance, Alphabetize nuget API definition, which just amends a patch prior in the same PR. In cases like that, I would amend the patch that introduced that code in the first place, rather than introducing incorrect code and then correcting it in a follow-up patch. A trivial rebase (a single squish in the right sequence) would have smoothed it over here. There are other similar cases present here too.
It's all about making your PR easier to review. People often review patch-by-patch from the bottom up, so if you correct errors in future patches, it creates a state that reviewers need to keep in their heads, ie, they may encounter an issue already corrected by a follow-up they haven't gotten to yet; do they comment as soon as they encounter the problem, or remember the complete set of feedback for comment at the end? The former is more convenient for the reviewer, and the latter quickly becomes impractical in larger PR's.
Don't mistake that this was a request to squash the whole thing into one, I don't think that's what @samsinsane was suggesting. Keeping the number of patches that introduce new concepts is fine, but the patches that corrected prior patches could have been amendments instead.
Just my 2c :) .. something you might like to keep in mind. It's definitely subject to personal style. I understand the idea of correcting mistakes at the point of entry is foreign to people who haven't used git too much (I'm not suggesting this is you, but something I see a lot), but I think it's generally agreed to be good juju with many OSS projects on Github.
Ultimately, I feel the same as @starkos, people are responsible for their own PR presentation, and improving on that is a continuous personal learning experience. From my experience on other projects, quality PR presentation does strongly increase your patches chance of being merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,https://github.com/TurkeyMan,9,https://github.com/premake/premake-core/pull/453#issuecomment-208321482,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","Oh yeah, and LGTM :P .. I'm excited for this feature, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,453,2016-03-19T19:14:02Z,2016-04-11T17:30:49Z,2017-04-13T09:49:52Z,MERGED,True,398,6,12,None,Add NuGet support to the Visual Studio exporter,13,[],https://github.com/premake/premake-core/pull/453,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/453#issuecomment-208352190,"As previously discussed in pull request #445 and in issue #197.
How is this? Let me know if anything needs to be changed.","Thanks @TurkeyMan! You pretty much nailed what I was getting at, I just didn't really have the time to explain it like that.
@aleksijuvani thanks for putting the effort in to get this ready for premake-core. I'm always excited by new things in the VS exporter, hopefully I get to try this out when it's merged in.",True,{}
premake/premake-core,https://github.com/premake/premake-core,457,2016-03-29T07:22:06Z,2016-03-29T18:09:48Z,2016-03-29T18:09:48Z,MERGED,True,14,1,2,https://github.com/eyalalonn,Fix getextension to handle paths w/ dot correctly,2,[],https://github.com/premake/premake-core/pull/457,https://github.com/eyalalonn,1,https://github.com/premake/premake-core/pull/457,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,457,2016-03-29T07:22:06Z,2016-03-29T18:09:48Z,2016-03-29T18:09:48Z,MERGED,True,14,1,2,https://github.com/eyalalonn,Fix getextension to handle paths w/ dot correctly,2,[],https://github.com/premake/premake-core/pull/457,https://github.com/eyalalonn,2,https://github.com/premake/premake-core/pull/457#issuecomment-202971604,,"It's nice but I don't know whether it makes sense because when you replace something you generally expect to pass two arguments so maybe we can create a new function for it like clearextension? something like this:
function path.clearextension(p)
    return replaceextension(p, """")
end",True,{}
premake/premake-core,https://github.com/premake/premake-core,457,2016-03-29T07:22:06Z,2016-03-29T18:09:48Z,2016-03-29T18:09:48Z,MERGED,True,14,1,2,https://github.com/eyalalonn,Fix getextension to handle paths w/ dot correctly,2,[],https://github.com/premake/premake-core/pull/457,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/457#issuecomment-202976851,,"FWIW, I think replaceextension(p, """") is sufficient. Thanks for contribution!",True,{}
premake/premake-core,https://github.com/premake/premake-core,457,2016-03-29T07:22:06Z,2016-03-29T18:09:48Z,2016-03-29T18:09:48Z,MERGED,True,14,1,2,https://github.com/eyalalonn,Fix getextension to handle paths w/ dot correctly,2,[],https://github.com/premake/premake-core/pull/457,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/457#issuecomment-202984155,,"Yeah, I can go either way.... although I do think
#newext > 0

is faster then
newext ~= """"

but that is just nitpicking...",True,{}
premake/premake-core,https://github.com/premake/premake-core,457,2016-03-29T07:22:06Z,2016-03-29T18:09:48Z,2016-03-29T18:09:48Z,MERGED,True,14,1,2,https://github.com/eyalalonn,Fix getextension to handle paths w/ dot correctly,2,[],https://github.com/premake/premake-core/pull/457,https://github.com/eyalalonn,5,https://github.com/premake/premake-core/pull/457#issuecomment-202999512,,"@tvandijck you're right, I've changed it. :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,459,2016-03-30T03:38:17Z,2016-03-30T11:54:33Z,2016-03-30T11:54:38Z,MERGED,True,2,2,1,https://github.com/NickCaplinger,Update README to fix broken links,1,[],https://github.com/premake/premake-core/pull/459,https://github.com/NickCaplinger,1,https://github.com/premake/premake-core/pull/459,"Fix ""What Is Premake?"" link and remove the build test link as the page no longer exists. Link to contribution guidelines instead.","Fix ""What Is Premake?"" link and remove the build test link as the page no longer exists. Link to contribution guidelines instead.",True,{}
premake/premake-core,https://github.com/premake/premake-core,459,2016-03-30T03:38:17Z,2016-03-30T11:54:33Z,2016-03-30T11:54:38Z,MERGED,True,2,2,1,https://github.com/NickCaplinger,Update README to fix broken links,1,[],https://github.com/premake/premake-core/pull/459,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/459#issuecomment-203395875,"Fix ""What Is Premake?"" link and remove the build test link as the page no longer exists. Link to contribution guidelines instead.","Merged, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/eyalalonn,1,https://github.com/premake/premake-core/pull/461,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.",True,{}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/461#issuecomment-203980341,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","LGTM, I think this is an nice addition.",True,{'THUMBS_UP': ['https://github.com/eyalalonn']}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/461#issuecomment-204137216,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","So first off, kudos, this is definitely a well-written contribution. Thanks for that!
In general, a little more explanation would be nice. If I'm reading the code right, you are scanning from the current working directory up looking for a folder called "".premake""?
I've made a couple of comments inline, but here are a few more thoughts:

It is nice to have the location strategy broken out like this, but it would also be nice to have all of the module locating logic in one place (see m.moduleLoader() in _premake_main.lua). I'm not sure if this code should go there or that code should go here or something else.
I'm a little uncomfortable about Premake just bopping its way up the file system looking for stuff. I'm not a fan of magic behaviors in general; I like to specify things explicitly. I'm trying to keep an open mind on this, but I would kind of prefer to specify my module search paths myself (using one of the many supported locations we already have). What's your mental model for this (i.e. what are you picturing as your development setup that needs this feature?)
If we do accept this module, I'm not sure that a hidden folder is the best choice for a default? Maybe it should be just ""premake"" or ""modules"" (we already use ""modules"" in the existing loader).",True,{}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/eyalalonn,4,https://github.com/premake/premake-core/pull/461#issuecomment-204158043,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","@starkos thank you very much!

In general, a little more explanation would be nice. If I'm reading the code right, you are scanning from the current working directory up looking for a folder called "".premake""?

Yeah exactly, can you elaborate on the parts where more explanation is needed?

It is nice to have the location strategy broken out like this, but it would also be nice to have all of the module locating logic in one place (see m.moduleLoader() in _premake_main.lua). I'm not sure if this code should go there or that code should go here or something else.

I'd look it up and write my opinion about it later.

I'm a little uncomfortable about Premake just bopping its way up the file system looking for stuff. I'm not a fan of magic behaviors in general; I like to specify things explicitly. I'm trying to keep an open mind on this, but I would kind of prefer to specify my module search paths myself (using one of the many supported locations we already have). What's your mental model for this (i.e. what are you picturing as your development setup that needs this feature?)

I kinda agree with you on the part where it goes all the way up to the root although I don't really think it's much of a big deal, I tend to like convention over configuration and in my opinion module resolution needs to have some predefined behaviour that we agree on out of the box.
We can certainly have an option to provide some stopper mechanism such as premake.moduleBase where the default would be _MAIN_SCRIPT_DIR.
I can update the code to honour premake.path.

If we do accept this module, I'm not sure that a hidden folder is the best choice for a default? Maybe it should be just ""premake"" or ""modules"" (we already use ""modules"" in the existing loader).

Well, I generally prefix directories that 3rd-party tools use with with a period, it also makes these directories stays at the top and prevents conflicts between the application directories and tools directories  although in this case Premake is unique enough so it's probably a non-issue.
I really don't like module because it's too generic, if anything I'd go with _premake or premake as the default but I'm really in favor of .premake or _premake for the reasons I mentioned aboive.",True,{}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/461#issuecomment-204468748,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","Yeah exactly, can you elaborate on the parts where more explanation is needed?

A summary of what the PR was attempting to do. We are all limited on time (you too I'm sure)‚ÄîI'd rather spend it providing feedback, rather than trying to figure out what the heck it does.

I tend to like convention over configuration and in my opinion module resolution needs to have some predefined behaviour that we agree on out of the box.

We already have that, as introduced here.
It would still be helpful to know what kind of project setup you are trying to achieve.",True,{}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/eyalalonn,6,https://github.com/premake/premake-core/pull/461#issuecomment-204486155,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","@starkos

A summary of what the PR was attempting to do. We are all limited on time (you too I'm sure)‚ÄîI'd rather spend it providing feedback, rather than trying to figure out what the heck it does.

You're right but I thought it's clear enough, I guess it wasn't so sorry.

We already have that, as introduced here.

Yeah, the issue is that these paths exist in central places on the system as opposed to being local to the application, not all modules supposed to be shared.
I tend to put all my modules in a specific directory as part of the application itself and having to deal with relative paths or paths at all when all I want is to load a module it can be quite bad experiences, depends on the structure of the application.
So you do have an existing behaviour but it seems like you expect modules to be shared across applications.

It would still be helpful to know what kind of project setup you are trying to achieve.

That's the structure of the project I'm currently working on.
.
|-- .premake
|-- src
|   |-- launcher
|   |-- library
|   |   `-- utils
|   `-- platform
|       |-- abstract
|       `-- win32
`-- tests
    `-- platform
        `-- win32",True,{}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/461#issuecomment-204532130,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","Yeah, the issue is that these paths exist in central places on the system as opposed to being local to the application, not all modules supposed to be shared.

I put my per-project modules into a folder called ""modules"" at the same location as my top-level, solution/workspace script (_MAIN_SCRIPT_DIR).
.
|-- premake5.lua
|-- modules
|-- src

This location is on the existing search path and works out of the box. It sounds like you want to do the same thing, but don't like the name ""modules"".
The ugly way to do this in your solution/project script would be:
premake.path = premake.path + "";"" + path.join(_MAIN_SCRIPT_DIR, "".premake"")
A way to add a new search location more cleanly would be a nice addition, maybe something like (totally off the top of my head):
requirepath("".premake"")

function requirepath(p)
   premake.path = premake.path + "";"" + path.join(os.getcwd(), p)
end
After that, you should be able to require() from any of your scripts and have it resolve to that path.",True,{'HEART': ['https://github.com/eyalalonn']}
premake/premake-core,https://github.com/premake/premake-core,461,2016-03-31T08:59:56Z,2016-04-02T08:15:03Z,2016-04-02T08:15:03Z,CLOSED,False,276,2,5,https://github.com/eyalalonn,Update require to resolve modules that are placed in default location,1,[],https://github.com/premake/premake-core/pull/461,https://github.com/eyalalonn,8,https://github.com/premake/premake-core/pull/461#issuecomment-204537400,"Provides a strategy for module resolution to modules that are placed within the default module's directory that is .premake/<module> or .premake/<module>.lua
The search starts at the current working directory of the running premake script and walks up to the root.","@starkos Nice! so that's how you do it haha... thanks!
requirepath or configpath or something like this would be pretty great in my opinion.",True,{}
premake/premake-core,https://github.com/premake/premake-core,463,2016-04-04T17:04:00Z,2016-04-11T13:49:07Z,2016-04-11T13:53:12Z,MERGED,True,48,48,5,https://github.com/neico,"migrated ""configuration"" to ""filter""",1,[],https://github.com/premake/premake-core/pull/463,https://github.com/neico,1,https://github.com/premake/premake-core/pull/463,"There's the requested PR.
Excuse me for also fixing quote characters (and the few spaces) for consistency, but my OCD ticked off when I opened those files... (not that previous versions of those files were any better...)
Edit: oh wow, travis actually didn't like the escape sequence?... (that's what happens when you rely on editor syntax highlighting...)
Edit2: yay, fixed, after 2 force pushes, poor travis...","There's the requested PR.
Excuse me for also fixing quote characters (and the few spaces) for consistency, but my OCD ticked off when I opened those files... (not that previous versions of those files were any better...)
Edit: oh wow, travis actually didn't like the escape sequence?... (that's what happens when you rely on editor syntax highlighting...)
Edit2: yay, fixed, after 2 force pushes, poor travis...",True,{}
premake/premake-core,https://github.com/premake/premake-core,463,2016-04-04T17:04:00Z,2016-04-11T13:49:07Z,2016-04-11T13:53:12Z,MERGED,True,48,48,5,https://github.com/neico,"migrated ""configuration"" to ""filter""",1,[],https://github.com/premake/premake-core/pull/463,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/463#issuecomment-205440685,"There's the requested PR.
Excuse me for also fixing quote characters (and the few spaces) for consistency, but my OCD ticked off when I opened those files... (not that previous versions of those files were any better...)
Edit: oh wow, travis actually didn't like the escape sequence?... (that's what happens when you rely on editor syntax highlighting...)
Edit2: yay, fixed, after 2 force pushes, poor travis...",LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,463,2016-04-04T17:04:00Z,2016-04-11T13:49:07Z,2016-04-11T13:53:12Z,MERGED,True,48,48,5,https://github.com/neico,"migrated ""configuration"" to ""filter""",1,[],https://github.com/premake/premake-core/pull/463,https://github.com/neico,3,https://github.com/premake/premake-core/pull/463#issuecomment-206783660,"There's the requested PR.
Excuse me for also fixing quote characters (and the few spaces) for consistency, but my OCD ticked off when I opened those files... (not that previous versions of those files were any better...)
Edit: oh wow, travis actually didn't like the escape sequence?... (that's what happens when you rely on editor syntax highlighting...)
Edit2: yay, fixed, after 2 force pushes, poor travis...","Here's an overview of usages of ""not"" and ""configuration"" lines that are left (most are in premake4.lua which is fine, but there's a few on the modules that need adjusting as well):

I was playing with the thought of unifying the single argument lines ex. configuration { ""solaris"" } to configuration ""solaris"" but then thought, if I were to do that I might as well do it in a separate PR (which I probably won't because that's probably taking it too far...)
Sidenote: only one ""not"" in the entire lua code, that's pretty impressive",True,{}
premake/premake-core,https://github.com/premake/premake-core,463,2016-04-04T17:04:00Z,2016-04-11T13:49:07Z,2016-04-11T13:53:12Z,MERGED,True,48,48,5,https://github.com/neico,"migrated ""configuration"" to ""filter""",1,[],https://github.com/premake/premake-core/pull/463,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/463#issuecomment-206803821,"There's the requested PR.
Excuse me for also fixing quote characters (and the few spaces) for consistency, but my OCD ticked off when I opened those files... (not that previous versions of those files were any better...)
Edit: oh wow, travis actually didn't like the escape sequence?... (that's what happens when you rely on editor syntax highlighting...)
Edit2: yay, fixed, after 2 force pushes, poor travis...","I feel like having configuration ""solaris"" instead of configuration { ""solaris"" } would be inconsistent with other uses of configuration. I'm not a fan of things like that, but if I'm the only one, then I'm more than happy to let it go as we do support doing it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,463,2016-04-04T17:04:00Z,2016-04-11T13:49:07Z,2016-04-11T13:53:12Z,MERGED,True,48,48,5,https://github.com/neico,"migrated ""configuration"" to ""filter""",1,[],https://github.com/premake/premake-core/pull/463,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/463#issuecomment-208352593,"There's the requested PR.
Excuse me for also fixing quote characters (and the few spaces) for consistency, but my OCD ticked off when I opened those files... (not that previous versions of those files were any better...)
Edit: oh wow, travis actually didn't like the escape sequence?... (that's what happens when you rely on editor syntax highlighting...)
Edit2: yay, fixed, after 2 force pushes, poor travis...",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/464,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/464#issuecomment-206054771,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","LGTM, I like this new way but would you be able to throw together a quick example of what a module would have to do to add the HLSL file extension without this PR? Just to make it easier to compare the two systems from a usability point of view.",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/464#issuecomment-206419075,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","uhm... without this PR... I don't even know how to do it to be honest....
I think this would do:

you'd have to override m.categorizeFile, match it against the .hlsl extension and return ""Hlsl"", otherwise call base...
then override the m.elements.file function to add your ""hlslFiles"" method.
then implement m.elements.HlslFile, m.elements.HlslFileCfg and hlslFiles.
override the m.elements.importExtensionSettings to add props.
override the m.elements.importExtensionTargets to add the targets.

the in the vs2010_vcxproj_user.lua to correctly add the entries in the filters file.

add your item to m.elements.filterGroups
implement a m.HlslFilters method.

So in code it would probably look something like: (making this up as I'm typing)
premake.override(premake.vstudio.vc2010, ""categorizeFile"", function (base, prj, file)
    if (path.hasextension(file.name, "".hlsl"") then
        return ""Hlsl""
    end
    return base(prj, file)
end)

premake.override(premake.vstudio.vc2010.elements, ""files"", function (base, prj, groups)
    local res = base(prj, groups)
    table.insert(res, hlslFiles)
    return res
end)

premake.override(premake.vstudio.vc2010.elements, ""importExtensionSettings"", function (base, prj)
    local res = base(prj)
    table.insert(res, importHlslSettings)
    return res
end)

premake.override(premake.vstudio.vc2010.elements, ""importExtensionTargets"", function (base, prj)
    local res = base(prj)
    table.insert(res, importHlslTargets)
    return res
end)

function hlslFiles(prj, groups)
    premake.vstudio.vc2010.emitFiles(prj, groups, ""Hlsl"")
end

function importHlslSettings(prj)
    p.w('<Import Project=""hlsl.props"" />')
end

function importHlslTargets(prj)
    p.w('<Import Project=""hlsl.targets"" />')
end

premake.vstudio.vc2010.elements.HlslFile = function(cfg, file)
    return {}
end

premake.vstudio.vc2010.elements.HlslFileCfg = function(fcfg, condition)
    return {
        premake.vstudio.vc2010.excludedFromBuild,
        -- maybe some other elements here to apply settings for HLSL files.
    }
end

table.insert(premake.vstudio.vc2010.elements.filterGroups, ""Hlsl"")

function premake.vstudio.vc2010.HlslFilters(prj, groups)
    premake.vstudio.vc2010.filterGroup(prj, groups, ""Hlsl"")
end",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/464#issuecomment-206523020,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","Nice, I hadn't considered this approach! Again, some tests would be nice, but otherwise LGTM!",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/464#issuecomment-206588903,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","Other then the MASM addition, everything changed is mostly covered by existing tests, lots broke as I was writing this ;)
I'll try to add a test fort the MASM stuff.",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/464#issuecomment-206797150,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","uhm... without this PR... I don't even know how to do it to be honest....

I've done it once or twice and I still don't know how to do it, but I think what you wrote is pretty close (or exactly what is needed). I definitely prefer your way, much easier to follow and replicate for a module developer.
üëç LGTM!",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/464#issuecomment-207064987,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","I added some tests to cover the .asm case... I'll rebase this, since the first two commits have already been merged in separate PR's.",True,{}
premake/premake-core,https://github.com/premake/premake-core,464,2016-04-05T16:57:34Z,2016-04-11T17:29:50Z,2016-04-11T18:16:15Z,MERGED,True,331,243,5,https://github.com/tvandijck,File categories refactor,2,[],https://github.com/premake/premake-core/pull/464,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/464#issuecomment-208095888,"OK, this is a ""big"" one I guess... What this is doing is refactoring the way the vcxproj backend categorizes files... instead of just returning a name in the m.categorizeFile I'm now returning a table with a bit more information... which is then used by the m.files and m.filterGroups to output the appropriate sections...
What this results in, is that 'adding' a new file extension with a particular group (for example HLSL) now becomes as easy as:
premake.vstudio.vc2010.categories.HLSL =
{
        name = ""HLSL"",
        extensions = "".hlsl"",
        priority   = 8,

        emitFiles = function(prj, group)
            premake.vstudio.vc2010.emitFiles(prj, group, ""Hlsl"")
        end,

        emitFilter = function(prj, group)
            premake.vstudio.vc2010.filterGroup(prj, group, ""Hlsl"")
        end,

        emitExtensionSettings = function(prj, group)
            p.w('<Import Project=""hlsl.props"" />')
        end,

        emitExtensionTargets = function(prj, group)
            p.w('<Import Project=""hlsl.targets"" />')
        end
}
instead of having to overload a number of functions.
In the process I added support for .asm files, using the MASM build customization target.","The tests LGTM, is this good to merge? :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/465,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/465#issuecomment-206522069,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","I've wanted something like for a while; we really need to rework the custom build commands to do something similar. I've never liked how it looks in the script though:
schemacompiler {
   path = ""some/path/value"",
   inputs = { ""input1"", ""input2"" }
}
In particular, I don't like have to switch from field(""value"") to field = ""value"". But I've never been able to come up with a better syntax that can reliably group the nested fields together into one object.
Any chance of getting some tests in tests/api? Also, does kind = ""list:nested"" work? We'd want that for the custom build commands (where we really need a way to group together inputs, outputs, and commands to allow for multiple build commands within a configuration).",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/465#issuecomment-206588250,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","In particular, I don't like have to switch from field(""value"") to field = ""value"". But I've never been

I see what you mean, yes... that is unfortunately something you can't get away from, since that is just the limitation of lua syntax. The thing I don't really like is that the content is a hash table, and so you get things in an order that lua sees fit.. between execution those properties are pretty much in a random order, and never consistent...

Also, does kind = ""list:nested"" work?

I think it does, but I haven't tested it at all... I'm trying to get detoken in 'nested' items to actually work first.. Right now it is not detokenizing any of the fields... The path stuff works, so I get correct absolute paths etc...",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/465#issuecomment-206792194,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","Very interesting. Could this be used for something like:
libraries {
  [""SDL2""] = {
    includedirs = { ""3rdParty/SDL2/includes"" }
    libdirs = { ""3rdParty/SDL2/bin"" }
    libs = { ""SDL2.lib"" }
  },
  [""WindowsSockets""] = {
    libs = { ""ws2_32.lib"" }
  }
}

Would that be kind = ""list:keyed:nested""? Which could also be used for that dependencies API people want:
libraries {
  [""MyLibrary""] = {
    includedirs = { ""all"", ""the"", ""dirs"" },
    libs = { ""MyLibrary"" }
  }
}

And then you could have dependencies { ""MyLibrary"", ""SDL2"", ""WindowsSockets"" }. Sorry that got a little off topic, I got excited by the idea of reducing the size of my Premake scripts haha.",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/465#issuecomment-206962884,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","This raises a good point: what happens if one of the nest field names is the same as a non-nested field name? It will probably be necessary to mangle the nested field names like ""schemacompiler.template"".
@samsinsane examples have me wondering if we could introduce another kind of‚Ä¶well, I guess it can't be containers, not for the current implementation anyway, but something like:
library ""SDL""
    includedirs { ""3rdParty/SDL2/includes"" }
    libdirs { ""3rdParty/SDL2/bin"" }
    links { ""SDL2"" }

library ""WindowsSockets""
   links { ""ws2_32"" }
This would probably require reworking the way that values are fetched from the configuration sets which‚Ä¶oh hey, look at that‚Ä¶happens to be what I'm currently working on. I'm not sure how it work with Tom's original example though. Maybe just‚Ä¶
schemacompiler  -- hmm, does Lua allow this? Is really schemacompiler()
   path ""some/path/value""
   input { ""input1"", ""input2"" }",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/465#issuecomment-206996680,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","This raises a good point: what happens if one of the nest field names is the same as a non-nested field name?

Actually, the nested fields are not exposed as API calls... only the top level becomes a ""method""
So nested fields will not collide with top level API's.

-- hmm, does Lua allow this? Is really schemacompiler()

nope, that is not lua... you'll get a compiler error.

@samsinsane examples have me wondering if we could introduce another kind of‚Ä¶well, I guess it can't be containers,

I experimented with custom containers once, but that was really not very successful..
That said though, I really wish we could make these containers, and hence rework the container stuff to support this... I'd like to be able to introduce arbitrary containers, but also have API's allow name collisions if they are not targeting the same container...
For example, in sams example... the ""links"" API inside the ""library"" container, really has a very different meaning, and maybe I would even want it to be a different kind... So I'd like to be able to do this:
maybe not the best example, but you get my drift I hope.
premake.api.register {
    name     = ""links"",
    scope    = ""library"",
    kind     = ""list:string""
}

premake.api.register {    
    name     = ""links"",
    scope    = ""project"",
    kind     = ""list:path""
}
Basically, if the scope is different, it should not lead to a collision.
I think it would even be better if ""containers"" had some form of polymorphism to it, and hence a project and workspace ""inherit"" from a 'config' container, then 90% of the API's that currently have multiple scopes assigned, could simply use the 'config' base...
in which case the API might become more like
container.register(""config"",  {    
    name     = ""links"",
    kind     = ""list:path""
})
anyway, I think this is maybe more a discussion for the google groups thing ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/465#issuecomment-206997369,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","oh hey, look at that‚Ä¶happens to be what I'm currently working on.

Any details on that?? can we see it, or can we provide any early feedback?",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/465#issuecomment-207002605,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","I should be working on something else but I'd rather be working on this.

Actually, the nested fields are not exposed as API calls

I'll add a line comment where I think there might be issue.

anyway, I think this is maybe more a discussion for the google groups thing

Yes, maybe‚Ä¶I'm not really sure what to do with this PR though. Can you hold off a bit until I've had a chance to think about how a more flexible scoping system might work? I'd hate to introduce it only to deprecate it if we can come up with a more consistent syntax.

Any details on that?? can we see it, or can we provide any early feedback?

I was trying to sketch out a prototype module, but then I needed a way to run tests for it and so I got sidetracked pulling the test framework out into a module itself. Hopefully soon (in a relative, open source project sense).
Happy to discuss it more, but perhaps over on the forums as you suggested.",True,{}
premake/premake-core,https://github.com/premake/premake-core,465,2016-04-06T17:38:34Z,2016-09-07T15:17:28Z,2016-09-07T15:17:32Z,CLOSED,False,108,24,4,https://github.com/tvandijck,add 'nested' kind for premake.api.register,1,[],https://github.com/premake/premake-core/pull/465,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/465#issuecomment-207022035,"This allows you to do this:
premake.api.register {
    name     = ""schemacompiler"",
    scope    = ""config"",
    kind     = ""nested"",
    fields   = {
        template = {
            kind     = ""path"",
            tokens   = true,
            pathVars = true
        },
        inputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        },
        outputs = {
            kind     = ""list:path"",
            tokens   = true,
            pathVars = true
        }
    }
}","Can you hold off a bit until I've had a chance to think about how a more flexible scoping system might work?

Sure thing... certainly if this discussion leads to something even better ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,466,2016-04-06T23:23:55Z,2016-04-07T17:09:35Z,2016-04-07T17:10:57Z,MERGED,True,1,0,1,https://github.com/tvandijck,table.deepclone should clone the metatable too.,1,[],https://github.com/premake/premake-core/pull/466,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/466,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,466,2016-04-06T23:23:55Z,2016-04-07T17:09:35Z,2016-04-07T17:10:57Z,MERGED,True,1,0,1,https://github.com/tvandijck,table.deepclone should clone the metatable too.,1,[],https://github.com/premake/premake-core/pull/466,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/466#issuecomment-206798893,,"LGTM, was this explicitly left out or just an oversight along the way?",True,{}
premake/premake-core,https://github.com/premake/premake-core,466,2016-04-06T23:23:55Z,2016-04-07T17:09:35Z,2016-04-07T17:10:57Z,MERGED,True,1,0,1,https://github.com/tvandijck,table.deepclone should clone the metatable too.,1,[],https://github.com/premake/premake-core/pull/466,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/466#issuecomment-206963252,,"LGTM, go for it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,466,2016-04-06T23:23:55Z,2016-04-07T17:09:35Z,2016-04-07T17:10:57Z,MERGED,True,1,0,1,https://github.com/tvandijck,table.deepclone should clone the metatable too.,1,[],https://github.com/premake/premake-core/pull/466,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/466#issuecomment-206997908,,"just an oversight along the way?

probably that... the example in the lua documentation actually has it too, and I just ran into an issue with the detokenizer on the 'nested' type loosing the meta-table in the configset._fetchDirect",True,{}
premake/premake-core,https://github.com/premake/premake-core,467,2016-04-06T23:24:04Z,2016-04-07T17:11:28Z,2016-04-07T17:11:35Z,MERGED,True,9,0,1,https://github.com/tvandijck,table.tostring should displays the metatable.,1,[],https://github.com/premake/premake-core/pull/467,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/467,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,467,2016-04-06T23:24:04Z,2016-04-07T17:11:28Z,2016-04-07T17:11:35Z,MERGED,True,9,0,1,https://github.com/tvandijck,table.tostring should displays the metatable.,1,[],https://github.com/premake/premake-core/pull/467,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/467#issuecomment-206799069,,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,467,2016-04-06T23:24:04Z,2016-04-07T17:11:28Z,2016-04-07T17:11:35Z,MERGED,True,9,0,1,https://github.com/tvandijck,table.tostring should displays the metatable.,1,[],https://github.com/premake/premake-core/pull/467,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/467#issuecomment-206963479,,Like +1,True,{}
premake/premake-core,https://github.com/premake/premake-core,468,2016-04-07T19:20:45Z,2016-04-07T19:33:03Z,2016-04-11T18:16:30Z,MERGED,True,2,2,1,https://github.com/tvandijck,table fixes,1,[],https://github.com/premake/premake-core/pull/468,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/468,allow specifying the max depth at with the table.tostring needs to recurse..,allow specifying the max depth at with the table.tostring needs to recurse..,True,{}
premake/premake-core,https://github.com/premake/premake-core,468,2016-04-07T19:20:45Z,2016-04-07T19:33:03Z,2016-04-11T18:16:30Z,MERGED,True,2,2,1,https://github.com/tvandijck,table fixes,1,[],https://github.com/premake/premake-core/pull/468,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/468#issuecomment-207059481,allow specifying the max depth at with the table.tostring needs to recurse..,"Can you do me a favor going forward and either give a more detailed description of the change in the PR, or add an entry to CHANGES.txt? Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,468,2016-04-07T19:20:45Z,2016-04-07T19:33:03Z,2016-04-11T18:16:30Z,MERGED,True,2,2,1,https://github.com/tvandijck,table fixes,1,[],https://github.com/premake/premake-core/pull/468,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/468#issuecomment-207064711,allow specifying the max depth at with the table.tostring needs to recurse..,"sure thing, I'm sorry... I'm moving really quickly today on some premake stuff I'm experimenting with, so hence the waterfall of small PR's with bugs I ran into...",True,{}
premake/premake-core,https://github.com/premake/premake-core,469,2016-04-07T19:20:57Z,2016-04-07T19:34:15Z,2016-04-11T18:16:38Z,MERGED,True,4,2,1,https://github.com/tvandijck,fix bug when callArray gets called with nil.,1,[],https://github.com/premake/premake-core/pull/469,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/469,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,469,2016-04-07T19:20:57Z,2016-04-07T19:34:15Z,2016-04-11T18:16:38Z,MERGED,True,4,2,1,https://github.com/tvandijck,fix bug when callArray gets called with nil.,1,[],https://github.com/premake/premake-core/pull/469,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/469#issuecomment-207059648,,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,471,2016-04-11T18:55:31Z,2016-04-12T10:25:36Z,2016-06-15T01:18:56Z,MERGED,True,6,16,1,https://github.com/tvandijck,optimize copyFilters/mergeFilters,1,[],https://github.com/premake/premake-core/pull/471,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/471,"As discussed on the forum...
This is the change where it became a deepcopy:
28cfa55#diff-3d9540042f8ef52dc7d1387a1ecbf71bL89
table.arraycopy however does an indexed copy of the table, which is indeed not what we want, since this is a 'keyed' table.. so instead of looping with 'ipairs', we definitely need to loop using 'pairs', but I don't think a deep copy is required.
Our projects seem to function correctly with this change.","As discussed on the forum...
This is the change where it became a deepcopy:
28cfa55#diff-3d9540042f8ef52dc7d1387a1ecbf71bL89
table.arraycopy however does an indexed copy of the table, which is indeed not what we want, since this is a 'keyed' table.. so instead of looping with 'ipairs', we definitely need to loop using 'pairs', but I don't think a deep copy is required.
Our projects seem to function correctly with this change.",True,{}
premake/premake-core,https://github.com/premake/premake-core,471,2016-04-11T18:55:31Z,2016-04-12T10:25:36Z,2016-06-15T01:18:56Z,MERGED,True,6,16,1,https://github.com/tvandijck,optimize copyFilters/mergeFilters,1,[],https://github.com/premake/premake-core/pull/471,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/471#issuecomment-208803107,"As discussed on the forum...
This is the change where it became a deepcopy:
28cfa55#diff-3d9540042f8ef52dc7d1387a1ecbf71bL89
table.arraycopy however does an indexed copy of the table, which is indeed not what we want, since this is a 'keyed' table.. so instead of looping with 'ipairs', we definitely need to loop using 'pairs', but I don't think a deep copy is required.
Our projects seem to function correctly with this change.","LGTM, I'll leave this for @starkos though as his upcoming changes to filters might rely on this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,472,2016-04-11T20:14:24Z,2016-04-11T22:09:59Z,2016-04-12T00:42:54Z,MERGED,True,5,3,1,https://github.com/tvandijck,We want the packages table to be in the order we specified.,1,[],https://github.com/premake/premake-core/pull/472,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/472,"So the ""packages"" table in the current implementation is in whatever order the hashtable sees fit... on newer version of lua, this seems to be a lot more unstable. The fixes below retains the order of the original prj.nuget list, while still achieving the same 'de-duplication' effects.
This made the tests on our buildfarm pass as well.","So the ""packages"" table in the current implementation is in whatever order the hashtable sees fit... on newer version of lua, this seems to be a lot more unstable. The fixes below retains the order of the original prj.nuget list, while still achieving the same 'de-duplication' effects.
This made the tests on our buildfarm pass as well.",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,None,1,https://github.com/premake/premake-core/pull/474,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/474#issuecomment-209558779,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","Yes, I'd submit a PR against CodeLite if you can, that would be great. Mention this PR when you do. We can merge the CodeLite PR first, then update the module version here at the same time we approve this one.",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,None,3,https://github.com/premake/premake-core/pull/474#issuecomment-209565519,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.",@starkos: I've opened premake/premake-codelite#11 to fix the unit tests.,True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/474#issuecomment-210434000,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","@aleksijuvani note, I reverted your PR (above) that I merged because it caused unittests to fail. Premake generates CodeLite projects and unittests assuming GCC is the compiler. CodeLite has no good way to distinguish toolsets in the project files as I can see; configuring toolchain is an environment option.
How were you finding that this PR would cause the codelite test to fail?",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,https://github.com/TurkeyMan,5,https://github.com/premake/premake-core/pull/474#issuecomment-210444683,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","@aleksijuvani Tweak this PR to also update the submodule to the revision of your branch (which I just rebased above master), then it can be merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,None,6,https://github.com/premake/premake-core/pull/474#issuecomment-210444766,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","Sure, give me a second.",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,https://github.com/TurkeyMan,7,https://github.com/premake/premake-core/pull/474#issuecomment-210444892,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","Note, the branch is called clang_optimize",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,https://github.com/TurkeyMan,8,https://github.com/premake/premake-core/pull/474#issuecomment-210445581,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","looks like you weren't on latest premake-core when you did that (Sam just merged my other submodule update a few minutes ago), get latest and try again :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,None,9,https://github.com/premake/premake-core/pull/474#issuecomment-210445830,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","Yeah, I just noticed. Give me a sec and I'll rebase.",True,{}
premake/premake-core,https://github.com/premake/premake-core,474,2016-04-13T15:17:28Z,2016-04-15T12:42:19Z,2016-04-22T09:48:28Z,MERGED,True,28,3,2,None,"Fix optimize ""Debug"" for Clang",2,[],https://github.com/premake/premake-core/pull/474,https://github.com/TurkeyMan,10,https://github.com/premake/premake-core/pull/474#issuecomment-210447042,"See issue #252 on Bitbucket.
When using the ""Debug"" option for optimize, the flag -Og is generated for Clang. This is not a valid option (it is valid and appropriate for GCC). When trying to compile, Clang will throw the following error message:
error: integral value 'g' in '-Og'

Since Clang doesn't have an equivalent for -Og, this pull request will change Clang to use -O0 when optimize ""Debug"" is specified.
This change will break a test in the CodeLite module, which will need to be changed to check for -O0 instead of -Og. Should I also create a pull request there to be merged simultaneously with this one?
Let me know if anything needs to be changed, or if this isn't the way to go about doing this.","Right, got there. LGTM! :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,475,2016-04-13T22:58:47Z,2016-04-14T09:16:41Z,2016-04-21T23:17:28Z,MERGED,True,21,8,2,https://github.com/starkos,Only output NuGet project element if packages were listed by the project,1,[],https://github.com/premake/premake-core/pull/475,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/475,"This makes the project output match Visual Studio's default (for VS 2010-2013); if no NuGet projects have been added, the NuGet Target element is skipped.","This makes the project output match Visual Studio's default (for VS 2010-2013); if no NuGet projects have been added, the NuGet Target element is skipped.",True,{'THUMBS_UP': ['https://github.com/tvandijck']}
premake/premake-core,https://github.com/premake/premake-core,475,2016-04-13T22:58:47Z,2016-04-14T09:16:41Z,2016-04-21T23:17:28Z,MERGED,True,21,8,2,https://github.com/starkos,Only output NuGet project element if packages were listed by the project,1,[],https://github.com/premake/premake-core/pull/475,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/475#issuecomment-209843026,"This makes the project output match Visual Studio's default (for VS 2010-2013); if no NuGet projects have been added, the NuGet Target element is skipped.","Out of curiosity, is VS2015 different or do you only have VS2010-2013?",True,{}
premake/premake-core,https://github.com/premake/premake-core,475,2016-04-13T22:58:47Z,2016-04-14T09:16:41Z,2016-04-21T23:17:28Z,MERGED,True,21,8,2,https://github.com/starkos,Only output NuGet project element if packages were listed by the project,1,[],https://github.com/premake/premake-core/pull/475,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/475#issuecomment-210207072,"This makes the project output match Visual Studio's default (for VS 2010-2013); if no NuGet projects have been added, the NuGet Target element is skipped.",I only tested through 2013‚ÄîVS 2015 borked itself doing an update and I've been avoiding fixing it. I'll try to get to it. Thanks for merging!,True,{}
premake/premake-core,https://github.com/premake/premake-core,475,2016-04-13T22:58:47Z,2016-04-14T09:16:41Z,2016-04-21T23:17:28Z,MERGED,True,21,8,2,https://github.com/starkos,Only output NuGet project element if packages were listed by the project,1,[],https://github.com/premake/premake-core/pull/475,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/475#issuecomment-210307593,"This makes the project output match Visual Studio's default (for VS 2010-2013); if no NuGet projects have been added, the NuGet Target element is skipped.","No worries. That's fair enough, I've also experienced issues with the VS2015 installer. Thankfully, they're working on a new installer though!",True,{}
premake/premake-core,https://github.com/premake/premake-core,478,2016-04-15T11:36:14Z,2016-04-15T11:46:30Z,2016-09-26T10:47:53Z,MERGED,True,1,1,1,https://github.com/TurkeyMan,Fixed CodeLite path separator problem.,1,[],https://github.com/premake/premake-core/pull/478,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/478,"Fixes #418
Fixes #477","Fixes #418
Fixes #477",True,{}
premake/premake-core,https://github.com/premake/premake-core,478,2016-04-15T11:36:14Z,2016-04-15T11:46:30Z,2016-09-26T10:47:53Z,MERGED,True,1,1,1,https://github.com/TurkeyMan,Fixed CodeLite path separator problem.,1,[],https://github.com/premake/premake-core/pull/478,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/478#issuecomment-210428842,"Fixes #418
Fixes #477",Apparently I have no projects where .projects are not in the same place as the .workspace ;),True,{}
premake/premake-core,https://github.com/premake/premake-core,478,2016-04-15T11:36:14Z,2016-04-15T11:46:30Z,2016-09-26T10:47:53Z,MERGED,True,1,1,1,https://github.com/TurkeyMan,Fixed CodeLite path separator problem.,1,[],https://github.com/premake/premake-core/pull/478,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/478#issuecomment-210433314,"Fixes #418
Fixes #477","LGTM, thanks for fixing this @TurkeyMan!",True,{}
premake/premake-core,https://github.com/premake/premake-core,481,2016-04-21T23:17:54Z,2016-04-21T23:27:17Z,2016-05-02T23:34:30Z,MERGED,True,1,1,1,https://github.com/starkos,Update to latest version of the CodeLite module,1,[],https://github.com/premake/premake-core/pull/481,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/481,"Updates to the latest version, fixes failing unit tests.","Updates to the latest version, fixes failing unit tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,481,2016-04-21T23:17:54Z,2016-04-21T23:27:17Z,2016-05-02T23:34:30Z,MERGED,True,1,1,1,https://github.com/starkos,Update to latest version of the CodeLite module,1,[],https://github.com/premake/premake-core/pull/481,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/481#issuecomment-213157503,"Updates to the latest version, fixes failing unit tests.","LGTM, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,482,2016-04-22T22:13:24Z,2017-04-27T21:00:23Z,2017-04-27T21:00:23Z,CLOSED,False,2,8,5,https://github.com/okready,Fix default entry point for Windows console applications,1,[],https://github.com/premake/premake-core/pull/482,https://github.com/okready,1,https://github.com/premake/premake-core/pull/482,"By default, projects created for console applications through Visual Studio don't explicitly specify the entry point symbol; the linker automatically detects whether mainCRTStartup or wmainCRTStartup should be used based on whether main() or the Windows-specific wmain() is defined. The current behavior of Premake is to explicitly use mainCRTStartup in both windowed and console applications if the WinMain flag is not set, preventing the use of wmain() in console applications unless the entry point is explicitly set in the project configuration.
This change makes it so Premake does not explicitly specify the entry point symbol for Windows console applications, allowing wmain() to be used without the need for additional configuration settings.
This doesn't address the use of mainCRTStartup or wmainCRTStartup for windowed applications if the WinMain flag is not set, as that would likely break existing projects (explicitly specifying one or the other forces the use of either main() or wmain(), respectively).","By default, projects created for console applications through Visual Studio don't explicitly specify the entry point symbol; the linker automatically detects whether mainCRTStartup or wmainCRTStartup should be used based on whether main() or the Windows-specific wmain() is defined. The current behavior of Premake is to explicitly use mainCRTStartup in both windowed and console applications if the WinMain flag is not set, preventing the use of wmain() in console applications unless the entry point is explicitly set in the project configuration.
This change makes it so Premake does not explicitly specify the entry point symbol for Windows console applications, allowing wmain() to be used without the need for additional configuration settings.
This doesn't address the use of mainCRTStartup or wmainCRTStartup for windowed applications if the WinMain flag is not set, as that would likely break existing projects (explicitly specifying one or the other forces the use of either main() or wmain(), respectively).",True,{}
premake/premake-core,https://github.com/premake/premake-core,482,2016-04-22T22:13:24Z,2017-04-27T21:00:23Z,2017-04-27T21:00:23Z,CLOSED,False,2,8,5,https://github.com/okready,Fix default entry point for Windows console applications,1,[],https://github.com/premake/premake-core/pull/482,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/482#issuecomment-214576022,"By default, projects created for console applications through Visual Studio don't explicitly specify the entry point symbol; the linker automatically detects whether mainCRTStartup or wmainCRTStartup should be used based on whether main() or the Windows-specific wmain() is defined. The current behavior of Premake is to explicitly use mainCRTStartup in both windowed and console applications if the WinMain flag is not set, preventing the use of wmain() in console applications unless the entry point is explicitly set in the project configuration.
This change makes it so Premake does not explicitly specify the entry point symbol for Windows console applications, allowing wmain() to be used without the need for additional configuration settings.
This doesn't address the use of mainCRTStartup or wmainCRTStartup for windowed applications if the WinMain flag is not set, as that would likely break existing projects (explicitly specifying one or the other forces the use of either main() or wmain(), respectively).",Should these code paths just be replaced by the entrypoint API? I'm not sure that Premake should continue to dictate the entry point if the entrypoint API exists.,True,{}
premake/premake-core,https://github.com/premake/premake-core,482,2016-04-22T22:13:24Z,2017-04-27T21:00:23Z,2017-04-27T21:00:23Z,CLOSED,False,2,8,5,https://github.com/okready,Fix default entry point for Windows console applications,1,[],https://github.com/premake/premake-core/pull/482,https://github.com/okready,3,https://github.com/premake/premake-core/pull/482#issuecomment-214614682,"By default, projects created for console applications through Visual Studio don't explicitly specify the entry point symbol; the linker automatically detects whether mainCRTStartup or wmainCRTStartup should be used based on whether main() or the Windows-specific wmain() is defined. The current behavior of Premake is to explicitly use mainCRTStartup in both windowed and console applications if the WinMain flag is not set, preventing the use of wmain() in console applications unless the entry point is explicitly set in the project configuration.
This change makes it so Premake does not explicitly specify the entry point symbol for Windows console applications, allowing wmain() to be used without the need for additional configuration settings.
This doesn't address the use of mainCRTStartup or wmainCRTStartup for windowed applications if the WinMain flag is not set, as that would likely break existing projects (explicitly specifying one or the other forces the use of either main() or wmain(), respectively).","I agree. I'd imagine most developers would understand if WinMain was the default start function for windowed applications on Windows, with the use of main being an exception (and vice-versa for console applications), since Visual Studio works like that by default anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,482,2016-04-22T22:13:24Z,2017-04-27T21:00:23Z,2017-04-27T21:00:23Z,CLOSED,False,2,8,5,https://github.com/okready,Fix default entry point for Windows console applications,1,[],https://github.com/premake/premake-core/pull/482,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/482#issuecomment-227793524,"By default, projects created for console applications through Visual Studio don't explicitly specify the entry point symbol; the linker automatically detects whether mainCRTStartup or wmainCRTStartup should be used based on whether main() or the Windows-specific wmain() is defined. The current behavior of Premake is to explicitly use mainCRTStartup in both windowed and console applications if the WinMain flag is not set, preventing the use of wmain() in console applications unless the entry point is explicitly set in the project configuration.
This change makes it so Premake does not explicitly specify the entry point symbol for Windows console applications, allowing wmain() to be used without the need for additional configuration settings.
This doesn't address the use of mainCRTStartup or wmainCRTStartup for windowed applications if the WinMain flag is not set, as that would likely break existing projects (explicitly specifying one or the other forces the use of either main() or wmain(), respectively).","Well, if the entrypoint API is set, we already make it override everything... the behavior based on the flag is still there for the cases where the entrypoint API is not set...
I guess the question is, should we just remove that behavior, and only set this property if the entrypoint API is set? if that is the case, this PR probably needs to be reworked to just do that.
We can probably using the deprecation methods to get this 'flag' to just set the entrypoint API as well, so that existing projects using the flag don't just break.",True,{}
premake/premake-core,https://github.com/premake/premake-core,482,2016-04-22T22:13:24Z,2017-04-27T21:00:23Z,2017-04-27T21:00:23Z,CLOSED,False,2,8,5,https://github.com/okready,Fix default entry point for Windows console applications,1,[],https://github.com/premake/premake-core/pull/482,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/482#issuecomment-297837989,"By default, projects created for console applications through Visual Studio don't explicitly specify the entry point symbol; the linker automatically detects whether mainCRTStartup or wmainCRTStartup should be used based on whether main() or the Windows-specific wmain() is defined. The current behavior of Premake is to explicitly use mainCRTStartup in both windowed and console applications if the WinMain flag is not set, preventing the use of wmain() in console applications unless the entry point is explicitly set in the project configuration.
This change makes it so Premake does not explicitly specify the entry point symbol for Windows console applications, allowing wmain() to be used without the need for additional configuration settings.
This doesn't address the use of mainCRTStartup or wmainCRTStartup for windowed applications if the WinMain flag is not set, as that would likely break existing projects (explicitly specifying one or the other forces the use of either main() or wmain(), respectively).",closing this... as this entire API has been removed.,True,{}
premake/premake-core,https://github.com/premake/premake-core,485,2016-04-25T21:40:24Z,2016-04-25T22:04:44Z,2016-05-05T00:15:12Z,MERGED,True,18,0,1,https://github.com/starkos,Fill in a partial list of changes since the previous beta,1,[],https://github.com/premake/premake-core/pull/485,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/485,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,485,2016-04-25T21:40:24Z,2016-04-25T22:04:44Z,2016-05-05T00:15:12Z,MERGED,True,18,0,1,https://github.com/starkos,Fill in a partial list of changes since the previous beta,1,[],https://github.com/premake/premake-core/pull/485,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/485#issuecomment-214543577,,lgtm,True,{}
premake/premake-core,https://github.com/premake/premake-core,486,2016-04-27T09:09:56Z,2016-05-03T15:48:02Z,2016-05-03T15:48:05Z,MERGED,True,7,1,1,https://github.com/ThomasKugler,Set DependsUpon to xsd files.,1,[],https://github.com/premake/premake-core/pull/486,https://github.com/ThomasKugler,1,https://github.com/premake/premake-core/pull/486,Related tp #416.,Related tp #416.,True,{}
premake/premake-core,https://github.com/premake/premake-core,486,2016-04-27T09:09:56Z,2016-05-03T15:48:02Z,2016-05-03T15:48:05Z,MERGED,True,7,1,1,https://github.com/ThomasKugler,Set DependsUpon to xsd files.,1,[],https://github.com/premake/premake-core/pull/486,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/486#issuecomment-216569305,Related tp #416.,"LGTM, @starkos can we merge this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,486,2016-04-27T09:09:56Z,2016-05-03T15:48:02Z,2016-05-03T15:48:05Z,MERGED,True,7,1,1,https://github.com/ThomasKugler,Set DependsUpon to xsd files.,1,[],https://github.com/premake/premake-core/pull/486,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/486#issuecomment-216572628,Related tp #416.,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,487,2016-05-02T20:58:27Z,2016-05-03T08:38:35Z,2016-05-03T15:21:04Z,MERGED,True,20,9,4,https://github.com/tvandijck,Gmake fixes,2,[],https://github.com/premake/premake-core/pull/487,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/487,We ran into a couple of gmake backend issues with defines and precompiled header files.,We ran into a couple of gmake backend issues with defines and precompiled header files.,True,{}
premake/premake-core,https://github.com/premake/premake-core,487,2016-05-02T20:58:27Z,2016-05-03T08:38:35Z,2016-05-03T15:21:04Z,MERGED,True,20,9,4,https://github.com/tvandijck,Gmake fixes,2,[],https://github.com/premake/premake-core/pull/487,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/487#issuecomment-216372144,We ran into a couple of gmake backend issues with defines and precompiled header files.,"One comment inline, otherwise LGTM!",True,{}
premake/premake-core,https://github.com/premake/premake-core,487,2016-05-02T20:58:27Z,2016-05-03T08:38:35Z,2016-05-03T15:21:04Z,MERGED,True,20,9,4,https://github.com/tvandijck,Gmake fixes,2,[],https://github.com/premake/premake-core/pull/487,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/487#issuecomment-216399012,We ran into a couple of gmake backend issues with defines and precompiled header files.,fixed,True,{}
premake/premake-core,https://github.com/premake/premake-core,487,2016-05-02T20:58:27Z,2016-05-03T08:38:35Z,2016-05-03T15:21:04Z,MERGED,True,20,9,4,https://github.com/tvandijck,Gmake fixes,2,[],https://github.com/premake/premake-core/pull/487,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/487#issuecomment-216468883,We ran into a couple of gmake backend issues with defines and precompiled header files.,LGTM.,True,{}
premake/premake-core,https://github.com/premake/premake-core,488,2016-05-02T23:31:45Z,2016-05-03T08:36:45Z,2016-05-18T19:56:41Z,MERGED,True,1,1,1,https://github.com/starkos,Fix casing on Visual Studio rule XML encoding entity,1,[],https://github.com/premake/premake-core/pull/488,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/488,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,488,2016-05-02T23:31:45Z,2016-05-03T08:36:45Z,2016-05-18T19:56:41Z,MERGED,True,1,1,1,https://github.com/starkos,Fix casing on Visual Studio rule XML encoding entity,1,[],https://github.com/premake/premake-core/pull/488,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/488#issuecomment-216468572,,LGTM.,True,{}
premake/premake-core,https://github.com/premake/premake-core,488,2016-05-02T23:31:45Z,2016-05-03T08:36:45Z,2016-05-18T19:56:41Z,MERGED,True,1,1,1,https://github.com/starkos,Fix casing on Visual Studio rule XML encoding entity,1,[],https://github.com/premake/premake-core/pull/488,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/488#issuecomment-216562226,,"I'm not sure I understand this fix, it looks like it just moves a method from the callarray to an explicit call... I don't really see what the difference is... but other then me just not getting it, it LGTM..",True,{}
premake/premake-core,https://github.com/premake/premake-core,488,2016-05-02T23:31:45Z,2016-05-03T08:36:45Z,2016-05-18T19:56:41Z,MERGED,True,1,1,1,https://github.com/starkos,Fix casing on Visual Studio rule XML encoding entity,1,[],https://github.com/premake/premake-core/pull/488,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/488#issuecomment-216564230,,"An argument is passed to the call array, which gets passed to that function and interpreted as a ""uppercase the output "" flag. Moving it out of the call array allows me to call it without any arguments.",True,{}
premake/premake-core,https://github.com/premake/premake-core,488,2016-05-02T23:31:45Z,2016-05-03T08:36:45Z,2016-05-18T19:56:41Z,MERGED,True,1,1,1,https://github.com/starkos,Fix casing on Visual Studio rule XML encoding entity,1,[],https://github.com/premake/premake-core/pull/488,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/488#issuecomment-216564641,,"And also didn't see that when I wrote the code, so its a subtle one :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,488,2016-05-02T23:31:45Z,2016-05-03T08:36:45Z,2016-05-18T19:56:41Z,MERGED,True,1,1,1,https://github.com/starkos,Fix casing on Visual Studio rule XML encoding entity,1,[],https://github.com/premake/premake-core/pull/488,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/488#issuecomment-216568671,,"Ahhh.. ok, yeah that makes sense now... wow, subtle indeed ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,489,2016-05-05T00:14:07Z,2016-05-05T10:40:17Z,2016-06-15T01:18:54Z,MERGED,True,25,0,1,https://github.com/tvandijck,add 'io.writefile' and 'io.readfile' shortcut methods.,1,[],https://github.com/premake/premake-core/pull/489,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/489,These make life a lot easier for my autoconf module.,These make life a lot easier for my autoconf module.,True,{}
premake/premake-core,https://github.com/premake/premake-core,489,2016-05-05T00:14:07Z,2016-05-05T10:40:17Z,2016-06-15T01:18:54Z,MERGED,True,25,0,1,https://github.com/tvandijck,add 'io.writefile' and 'io.readfile' shortcut methods.,1,[],https://github.com/premake/premake-core/pull/489,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/489#issuecomment-217121880,These make life a lot easier for my autoconf module.,üëç LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/g012,1,https://github.com/premake/premake-core/pull/490,PR for #483,PR for #483,True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/490#issuecomment-217488233,PR for #483,Can we get unit tests for the new output values?,True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/g012,3,https://github.com/premake/premake-core/pull/490#issuecomment-217551534,PR for #483,"Sure.
I added a vc2015 folder, I don't know if that's what you want or if you prefer to have two files for symbols in vc2010.",True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/490#issuecomment-217552339,PR for #483,I like it this way... LGTM...,True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/490#issuecomment-224232393,PR for #483,"I don't think having a vc2015 folder is a good idea, it separates the tests for the same function into two files unnecessarily. In my opinion, the tests are for the functions, not for the versions of VS. The test_symbols.lua file should contain all the tests for VS2010-2013 and VS2015. But that's just my opinion on this, I don't know exactly what the plan was for the VS tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/490#issuecomment-224573623,PR for #483,"FWIW, I agree with Sam on this one: it would be good to have all of those tests in the same place.",True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/490#issuecomment-227848967,PR for #483,"#525
might supersede this PR.. Although adding the tests would still be welcome...",True,{}
premake/premake-core,https://github.com/premake/premake-core,490,2016-05-06T09:20:31Z,2016-08-17T16:47:50Z,2016-08-17T16:47:50Z,CLOSED,False,97,1,4,https://github.com/g012,Fix for new value of GenerateDebugInformation in VS2015.,2,[],https://github.com/premake/premake-core/pull/490,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/490#issuecomment-240473452,PR for #483,"I think this was all fixed in 525... I'm closing this one, feel free to reopen if I'm wrong, or missed something. As it stands it has conflicts and can't be merged, so an update would be needed anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,491,2016-05-07T23:39:36Z,2016-05-09T16:12:22Z,2016-05-09T19:02:24Z,MERGED,True,29,1,3,https://github.com/g012,Toolset filter,4,[],https://github.com/premake/premake-core/pull/491,https://github.com/g012,1,https://github.com/premake/premake-core/pull/491,Fixed the tests as suggested for PR #265,Fixed the tests as suggested for PR #265,True,{}
premake/premake-core,https://github.com/premake/premake-core,491,2016-05-07T23:39:36Z,2016-05-09T16:12:22Z,2016-05-09T19:02:24Z,MERGED,True,29,1,3,https://github.com/g012,Toolset filter,4,[],https://github.com/premake/premake-core/pull/491,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/491#issuecomment-217910988,Fixed the tests as suggested for PR #265,LGTM - thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,493,2016-05-09T17:59:26Z,2016-09-07T15:15:48Z,2016-09-07T15:15:51Z,CLOSED,False,21,7,7,https://github.com/tvandijck,Add 'Installer' kind to support external vdproj files.,1,[],https://github.com/premake/premake-core/pull/493,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/493,"This allows you to add .vdproj files as externalprojects.
I would like to fully generate vdproj in the future as well, but that is a whole different project.
And maybe this should really be done in a module instead, but a few of the methods used here are not really made to be extensible, so that will require a few other changes as well.
This is mostly a PR for visibility, not sure if we should merge it.","This allows you to add .vdproj files as externalprojects.
I would like to fully generate vdproj in the future as well, but that is a whole different project.
And maybe this should really be done in a module instead, but a few of the methods used here are not really made to be extensible, so that will require a few other changes as well.
This is mostly a PR for visibility, not sure if we should merge it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,493,2016-05-09T17:59:26Z,2016-09-07T15:15:48Z,2016-09-07T15:15:51Z,CLOSED,False,21,7,7,https://github.com/tvandijck,Add 'Installer' kind to support external vdproj files.,1,[],https://github.com/premake/premake-core/pull/493,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/493#issuecomment-218103813,"This allows you to add .vdproj files as externalprojects.
I would like to fully generate vdproj in the future as well, but that is a whole different project.
And maybe this should really be done in a module instead, but a few of the methods used here are not really made to be extensible, so that will require a few other changes as well.
This is mostly a PR for visibility, not sure if we should merge it.","I like the idea, but maybe, starting by making it easier to add support for other project extensions and GUIDs would be a better MR? As for whether .vdproj should be known to core, I don't see a problem with it, it comes with VS doesn't it?",True,{}
premake/premake-core,https://github.com/premake/premake-core,493,2016-05-09T17:59:26Z,2016-09-07T15:15:48Z,2016-09-07T15:15:51Z,CLOSED,False,21,7,7,https://github.com/tvandijck,Add 'Installer' kind to support external vdproj files.,1,[],https://github.com/premake/premake-core/pull/493,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/493#issuecomment-218190671,"This allows you to add .vdproj files as externalprojects.
I would like to fully generate vdproj in the future as well, but that is a whole different project.
And maybe this should really be done in a module instead, but a few of the methods used here are not really made to be extensible, so that will require a few other changes as well.
This is mostly a PR for visibility, not sure if we should merge it.","It comes with VS doesn't it

nope.. it's an extension you have to install... Which is why I don't think this is the right solution indeed. I think you are right on the money with coming up with something where is would be easier to add other project extensions.
As I said, this PR was mostly for visibility, and to indeed give this some though. In the meantime however I did need this change for one of our internal project to get along. But I really don't think we should merge this as is..",True,{}
premake/premake-core,https://github.com/premake/premake-core,493,2016-05-09T17:59:26Z,2016-09-07T15:15:48Z,2016-09-07T15:15:51Z,CLOSED,False,21,7,7,https://github.com/tvandijck,Add 'Installer' kind to support external vdproj files.,1,[],https://github.com/premake/premake-core/pull/493,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/493#issuecomment-218341592,"This allows you to add .vdproj files as externalprojects.
I would like to fully generate vdproj in the future as well, but that is a whole different project.
And maybe this should really be done in a module instead, but a few of the methods used here are not really made to be extensible, so that will require a few other changes as well.
This is mostly a PR for visibility, not sure if we should merge it.","Ah, I thought it was the bundled installer project. I'm in the same boat, but with Wix, if it was easier to add other project extensions (and their generate functions), modules for VS2015 Android and iOS support will benefit from that. :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,494,2016-05-11T18:18:56Z,2016-05-11T20:52:05Z,2017-06-18T20:49:22Z,CLOSED,False,9471,17,57,https://github.com/tvandijck,submodule merge,147,[],https://github.com/premake/premake-core/pull/494,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/494,"This merges the submodules into the core repository, removing them as submodules, while maintaining their entire history...
One of the questions that came up as I was doing this however... If we're going to make it easier for modules to be 'fetched' from a remote server, or through some other means, wouldn't we want to keep these modules 'separate'... We can live with the sub-modules for now, since we've already lived with it for a while, and actually spend our time on that module registry system instead...
Once that works, we can just transition these modules into the registry and maintain their separate repositories. Or would we extract the history out of these folders again and apply them to their separate repositories when that time comes?","This merges the submodules into the core repository, removing them as submodules, while maintaining their entire history...
One of the questions that came up as I was doing this however... If we're going to make it easier for modules to be 'fetched' from a remote server, or through some other means, wouldn't we want to keep these modules 'separate'... We can live with the sub-modules for now, since we've already lived with it for a while, and actually spend our time on that module registry system instead...
Once that works, we can just transition these modules into the registry and maintain their separate repositories. Or would we extract the history out of these folders again and apply them to their separate repositories when that time comes?",True,{}
premake/premake-core,https://github.com/premake/premake-core,495,2016-05-12T04:00:00Z,2016-05-12T23:58:36Z,2016-05-12T23:58:36Z,MERGED,True,1,0,1,https://github.com/ratzlaff,Updating ignore list for xcode bits,3,[],https://github.com/premake/premake-core/pull/495,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/495,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,495,2016-05-12T04:00:00Z,2016-05-12T23:58:36Z,2016-05-12T23:58:36Z,MERGED,True,1,0,1,https://github.com/ratzlaff,Updating ignore list for xcode bits,3,[],https://github.com/premake/premake-core/pull/495,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/495#issuecomment-218803022,,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,496,2016-05-12T23:58:12Z,2016-05-13T00:41:13Z,2016-05-18T19:56:35Z,MERGED,True,30,44,18,https://github.com/starkos,Catch older unit tests up to the latest standards,1,[],https://github.com/premake/premake-core/pull/496,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/496,"Patch up some outdated stuff in the unit tests, before the new test module lands.","Patch up some outdated stuff in the unit tests, before the new test module lands.",True,{}
premake/premake-core,https://github.com/premake/premake-core,496,2016-05-12T23:58:12Z,2016-05-13T00:41:13Z,2016-05-18T19:56:35Z,MERGED,True,30,44,18,https://github.com/starkos,Catch older unit tests up to the latest standards,1,[],https://github.com/premake/premake-core/pull/496,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/496#issuecomment-218924484,"Patch up some outdated stuff in the unit tests, before the new test module lands.",LGTM.,True,{}
premake/premake-core,https://github.com/premake/premake-core,497,2016-05-15T18:38:15Z,2016-05-16T18:03:24Z,2016-05-16T18:03:24Z,MERGED,True,135,46,5,https://github.com/mversluys,Support for Authenticated http requests,8,[],https://github.com/premake/premake-core/pull/497,https://github.com/mversluys,1,https://github.com/premake/premake-core/pull/497,"http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.","http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.",True,{}
premake/premake-core,https://github.com/premake/premake-core,497,2016-05-15T18:38:15Z,2016-05-16T18:03:24Z,2016-05-16T18:03:24Z,MERGED,True,135,46,5,https://github.com/mversluys,Support for Authenticated http requests,8,[],https://github.com/premake/premake-core/pull/497,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/497#issuecomment-219304953,"http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.","LGTM.
These APIs are starting to get complicated each time we add new features though.
Maybe we could extend the table approach and generalize it for all options.
That way we could get rid of the progress and headers parameters, and replace them with a options table, that could have optional table fields like progress, headers, username and password.",True,{}
premake/premake-core,https://github.com/premake/premake-core,497,2016-05-15T18:38:15Z,2016-05-16T18:03:24Z,2016-05-16T18:03:24Z,MERGED,True,135,46,5,https://github.com/mversluys,Support for Authenticated http requests,8,[],https://github.com/premake/premake-core/pull/497,https://github.com/mversluys,3,https://github.com/premake/premake-core/pull/497#issuecomment-219305564,"http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.","Agree that is at the breaking point and those signatures are desirable:
http.download(source, destination, { options }) 
http.get(source, { options })
I don't have code using headers/progress functions on hand, but will take a look at that approach.",True,{}
premake/premake-core,https://github.com/premake/premake-core,497,2016-05-15T18:38:15Z,2016-05-16T18:03:24Z,2016-05-16T18:03:24Z,MERGED,True,135,46,5,https://github.com/mversluys,Support for Authenticated http requests,8,[],https://github.com/premake/premake-core/pull/497,https://github.com/tritao,4,https://github.com/premake/premake-core/pull/497#issuecomment-219307714,"http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.","If you need a simple example of the progress parameter, you can find it here: https://github.com/mono/CppSharp/blob/f986963a3cef36e78320d418b4bb5eda15424fde/build/scripts/Utils.lua#L82",True,{}
premake/premake-core,https://github.com/premake/premake-core,497,2016-05-15T18:38:15Z,2016-05-16T18:03:24Z,2016-05-16T18:03:24Z,MERGED,True,135,46,5,https://github.com/mversluys,Support for Authenticated http requests,8,[],https://github.com/premake/premake-core/pull/497,https://github.com/mversluys,5,https://github.com/premake/premake-core/pull/497#issuecomment-219352834,"http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.","Updated to support cleaner signatures
http.download(source, destination, { options }) 
http.get(source, { options })
Existing signatures are still supported
http.download(source, destination, progress, headers)
http.get(source, progress, headers)
Verified that progress/headers work with the old and new signatures.
Verified that userpwd works as part of options.
The new signatures should allow simpler addition of any further options in the future.
As far as I can tell, progress would not have worked if headers were supplied as the the call to luaL_ref(L, LUA_REGISTRYINDEX) was just using the top of the stack, and then popping it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,497,2016-05-15T18:38:15Z,2016-05-16T18:03:24Z,2016-05-16T18:03:24Z,MERGED,True,135,46,5,https://github.com/mversluys,Support for Authenticated http requests,8,[],https://github.com/premake/premake-core/pull/497,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/497#issuecomment-219498422,"http.get and http.download have been extended to optionally accept username[:password] which is provided to the underlying curl library.
User agent is now also being specified as ""Premake/"" in the http requests.
This does not interfere with the optional parameter which contains headers which is a table type and the existing code scanned the arguments of the functions looking for that table.
Also added is os_getpass which allows lua scripts to prompt for a password from the user. If accepted the relevant documentation for http and os.getpass will be added to the premake wiki.
The purpose of these changes is to facilitate authentication support in GitHub packages which allows this module to work with private repositories and with GitHub Enterprise. The addition of user agent was required, the GitHub API refuses requests which don't supply it.
The changes have been tested on OS X (10.11.4) with LLVM 7.3, Windows with Visual Studio 2015 and Linux  (Ubuntu 14.04.1) with gcc 4.8.4.",LGTM.,True,{}
premake/premake-core,https://github.com/premake/premake-core,498,2016-05-30T19:20:35Z,2016-05-31T15:11:31Z,2016-06-20T13:00:45Z,MERGED,True,876,569,11,https://github.com/starkos,Integrate testing module into premake-core,6,[],https://github.com/premake/premake-core/pull/498,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/498,"Integrates the unit testing framework (testfx.lua) directly into premake-core as a new module named self-test. This allows module developers to run their module's unit test
suites without having to copy testfx.lua, or otherwise jump through hoops.
While working on Premake itself, nothing changes. You continue to run premake5 test to run the core unit test suites.
While working on external add-on modules, you can now run...
 premake5 self-test

...from any location, and Premake will run any unit test manifests it finds in that folder or any subfolders. On my local workstations I keep a folder named Modules for all of my add-on modules; running self-test from that folder verifies all those modules in one step. Super convenient.
Note that this module isn't enabled by default. I figure that this is an advanced feature that will only be used by people who are writing modules and extending Premake itself, and I didn't want the ""self-test"" option appear in the help text and confuse people. So you first have to turn it on by requiring it somewhere‚ÄîI put it in my premake5-system.lua script like...
 test = require(""self-test"")

...so I can use it on any project.
Give it a try and let me know what you think. If approved, I'll add some text to the (currently empty) Adding Unit Tests page in the module developer section of the wiki.","Integrates the unit testing framework (testfx.lua) directly into premake-core as a new module named self-test. This allows module developers to run their module's unit test
suites without having to copy testfx.lua, or otherwise jump through hoops.
While working on Premake itself, nothing changes. You continue to run premake5 test to run the core unit test suites.
While working on external add-on modules, you can now run...
 premake5 self-test

...from any location, and Premake will run any unit test manifests it finds in that folder or any subfolders. On my local workstations I keep a folder named Modules for all of my add-on modules; running self-test from that folder verifies all those modules in one step. Super convenient.
Note that this module isn't enabled by default. I figure that this is an advanced feature that will only be used by people who are writing modules and extending Premake itself, and I didn't want the ""self-test"" option appear in the help text and confuse people. So you first have to turn it on by requiring it somewhere‚ÄîI put it in my premake5-system.lua script like...
 test = require(""self-test"")

...so I can use it on any project.
Give it a try and let me know what you think. If approved, I'll add some text to the (currently empty) Adding Unit Tests page in the module developer section of the wiki.",True,{}
premake/premake-core,https://github.com/premake/premake-core,498,2016-05-30T19:20:35Z,2016-05-31T15:11:31Z,2016-06-20T13:00:45Z,MERGED,True,876,569,11,https://github.com/starkos,Integrate testing module into premake-core,6,[],https://github.com/premake/premake-core/pull/498,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/498#issuecomment-222647013,"Integrates the unit testing framework (testfx.lua) directly into premake-core as a new module named self-test. This allows module developers to run their module's unit test
suites without having to copy testfx.lua, or otherwise jump through hoops.
While working on Premake itself, nothing changes. You continue to run premake5 test to run the core unit test suites.
While working on external add-on modules, you can now run...
 premake5 self-test

...from any location, and Premake will run any unit test manifests it finds in that folder or any subfolders. On my local workstations I keep a folder named Modules for all of my add-on modules; running self-test from that folder verifies all those modules in one step. Super convenient.
Note that this module isn't enabled by default. I figure that this is an advanced feature that will only be used by people who are writing modules and extending Premake itself, and I didn't want the ""self-test"" option appear in the help text and confuse people. So you first have to turn it on by requiring it somewhere‚ÄîI put it in my premake5-system.lua script like...
 test = require(""self-test"")

...so I can use it on any project.
Give it a try and let me know what you think. If approved, I'll add some text to the (currently empty) Adding Unit Tests page in the module developer section of the wiki.",LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,499,2016-06-02T01:30:33Z,2016-06-06T03:06:19Z,2016-06-06T03:06:19Z,MERGED,True,56,31,1,https://github.com/mversluys,Improvements to http.get and http.download,2,[],https://github.com/premake/premake-core/pull/499,https://github.com/mversluys,1,https://github.com/premake/premake-core/pull/499,"This changes what's being returned from http.get and http.download so that it returns an HTTP result code. There was an undocumented return from http.download where the curl result was being returned. This change breaks the undocumented functionality but makes both functions consistent.
The usage of these functions is now
error_str, response_code = http.download(url, destination, { options })
result, error_str, response_code = http.get(url, { options })
Added a timeout option to http.get and http.download which is the maximum number of seconds before the request will timeout.
http.get(url, { timeout = 5 })
Documentation will be updated if accepted.","This changes what's being returned from http.get and http.download so that it returns an HTTP result code. There was an undocumented return from http.download where the curl result was being returned. This change breaks the undocumented functionality but makes both functions consistent.
The usage of these functions is now
error_str, response_code = http.download(url, destination, { options })
result, error_str, response_code = http.get(url, { options })
Added a timeout option to http.get and http.download which is the maximum number of seconds before the request will timeout.
http.get(url, { timeout = 5 })
Documentation will be updated if accepted.",True,{}
premake/premake-core,https://github.com/premake/premake-core,499,2016-06-02T01:30:33Z,2016-06-06T03:06:19Z,2016-06-06T03:06:19Z,MERGED,True,56,31,1,https://github.com/mversluys,Improvements to http.get and http.download,2,[],https://github.com/premake/premake-core/pull/499,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/499#issuecomment-223335478,"This changes what's being returned from http.get and http.download so that it returns an HTTP result code. There was an undocumented return from http.download where the curl result was being returned. This change breaks the undocumented functionality but makes both functions consistent.
The usage of these functions is now
error_str, response_code = http.download(url, destination, { options })
result, error_str, response_code = http.get(url, { options })
Added a timeout option to http.get and http.download which is the maximum number of seconds before the request will timeout.
http.get(url, { timeout = 5 })
Documentation will be updated if accepted.","It looks good to me, but I'm going to leave it to @samsinsane to merge after review.",True,{}
premake/premake-core,https://github.com/premake/premake-core,499,2016-06-02T01:30:33Z,2016-06-06T03:06:19Z,2016-06-06T03:06:19Z,MERGED,True,56,31,1,https://github.com/mversluys,Improvements to http.get and http.download,2,[],https://github.com/premake/premake-core/pull/499,https://github.com/tritao,3,https://github.com/premake/premake-core/pull/499#issuecomment-223366237,"This changes what's being returned from http.get and http.download so that it returns an HTTP result code. There was an undocumented return from http.download where the curl result was being returned. This change breaks the undocumented functionality but makes both functions consistent.
The usage of these functions is now
error_str, response_code = http.download(url, destination, { options })
result, error_str, response_code = http.get(url, { options })
Added a timeout option to http.get and http.download which is the maximum number of seconds before the request will timeout.
http.get(url, { timeout = 5 })
Documentation will be updated if accepted.",LGTM also,True,{}
premake/premake-core,https://github.com/premake/premake-core,499,2016-06-02T01:30:33Z,2016-06-06T03:06:19Z,2016-06-06T03:06:19Z,MERGED,True,56,31,1,https://github.com/mversluys,Improvements to http.get and http.download,2,[],https://github.com/premake/premake-core/pull/499,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/499#issuecomment-223859767,"This changes what's being returned from http.get and http.download so that it returns an HTTP result code. There was an undocumented return from http.download where the curl result was being returned. This change breaks the undocumented functionality but makes both functions consistent.
The usage of these functions is now
error_str, response_code = http.download(url, destination, { options })
result, error_str, response_code = http.get(url, { options })
Added a timeout option to http.get and http.download which is the maximum number of seconds before the request will timeout.
http.get(url, { timeout = 5 })
Documentation will be updated if accepted.","LGTM, not a fan of breaking functionality but in this particular case, returning the HTTP result code is far better than returning the CURL return code.",True,{}
premake/premake-core,https://github.com/premake/premake-core,501,2016-06-06T15:49:34Z,2016-06-06T16:16:53Z,2016-06-21T16:49:52Z,MERGED,True,19,3,2,https://github.com/tvandijck,Create appveyor.yml,1,[],https://github.com/premake/premake-core/pull/501,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/501,Adding appveyor yaml script to build on appveyor.com for windows.,Adding appveyor yaml script to build on appveyor.com for windows.,True,{}
premake/premake-core,https://github.com/premake/premake-core,501,2016-06-06T15:49:34Z,2016-06-06T16:16:53Z,2016-06-21T16:49:52Z,MERGED,True,19,3,2,https://github.com/tvandijck,Create appveyor.yml,1,[],https://github.com/premake/premake-core/pull/501,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/501#issuecomment-227444772,Adding appveyor yaml script to build on appveyor.com for windows.,"Okay, done‚Äîall members of the Premake Core Developers team have rights to the AppVeyor account now. Let me know if there is anything else I need to do, and thanks for setting this up!",True,{}
premake/premake-core,https://github.com/premake/premake-core,501,2016-06-06T15:49:34Z,2016-06-06T16:16:53Z,2016-06-21T16:49:52Z,MERGED,True,19,3,2,https://github.com/tvandijck,Create appveyor.yml,1,[],https://github.com/premake/premake-core/pull/501,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/501#issuecomment-227501019,Adding appveyor yaml script to build on appveyor.com for windows.,I will move the build over to that...,True,{}
premake/premake-core,https://github.com/premake/premake-core,503,2016-06-08T18:29:35Z,2016-06-10T17:42:03Z,2016-06-10T17:42:09Z,MERGED,True,38,8,4,https://github.com/tvandijck,linkgroups api.,1,[],https://github.com/premake/premake-core/pull/503,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/503,"Turns out linkgroups can also be supported on clang, just not on the xcode version...
So instead of trying to figure it out, I just made turning it on/off a proper API, allowing the user to specify the behavior.
it defaults to disabled.","Turns out linkgroups can also be supported on clang, just not on the xcode version...
So instead of trying to figure it out, I just made turning it on/off a proper API, allowing the user to specify the behavior.
it defaults to disabled.",True,{}
premake/premake-core,https://github.com/premake/premake-core,504,2016-06-08T18:32:43Z,2016-06-10T17:42:43Z,2016-06-10T17:42:46Z,MERGED,True,1,1,1,https://github.com/tvandijck,provide the parent to class.new,1,[],https://github.com/premake/premake-core/pull/504,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/504,"This is just a really minor change that allows an override, or implementation of a new container to actually know it's parent container before construction.
I needed this in a case where I was implementing an override for 'p.project.new'","This is just a really minor change that allows an override, or implementation of a new container to actually know it's parent container before construction.
I needed this in a case where I was implementing an override for 'p.project.new'",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/nmoehrle,1,https://github.com/premake/premake-core/pull/506,Only gmake has been tested - needs tests,Only gmake has been tested - needs tests,True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/506#issuecomment-225473115,Only gmake has been tested - needs tests,"I think you should start off by making this a module, similar to this, work out all the bugs/issues and expand on the supported actions. Additionally, I'm not sure if the scope of Premake-core should include the CUDA compiler, but I guess this depends on how popular your module becomes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/506#issuecomment-239006088,Only gmake has been tested - needs tests,"this commit seems to contain a lot more then just nvcc at this point..
symbols handling, path normalization, and a bunch or other stuff...
probably best to rebase this against master and get rid of the 'odd' merges.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/506#issuecomment-262303929,Only gmake has been tested - needs tests,"This one fell pretty far through the cracks... I'm so sorry.... Unfortunately at this point there is a merge conflict that requires resolution... other then that the changes look pretty clean and simple, so I'd be OK merging it once that happens.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/nmoehrle,5,https://github.com/premake/premake-core/pull/506#issuecomment-262315712,Only gmake has been tested - needs tests,"No worries, I have two more commits related to cuda support: nmoehrle/premake-core@3eeb90c8 nmoehrle/premake-core@04daa8e46 but they change the api so I am reluctant to include them into this pull request.
If you want me to squash the commits or add the others, just tell me - happy to help.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/506#issuecomment-262319793,Only gmake has been tested - needs tests,"Those other two commits don't look too off.. feel free to include them in this PR.
I'll squash on merge...",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/506#issuecomment-262431300,Only gmake has been tested - needs tests,"I still think this should be a module, regardless of whether it's merged in or not. Also, it would be good if this had tests so it doesn't break in the future.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/nmoehrle,8,https://github.com/premake/premake-core/pull/506#issuecomment-262470369,Only gmake has been tested - needs tests,I thought it should be next to gcc since it is so tightly coupled (because of nvccs design). Regarding tests I agree... would anyone be willing to give me a little guidance?,True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/nmoehrle,9,https://github.com/premake/premake-core/pull/506#issuecomment-262492872,Only gmake has been tested - needs tests,"I looked into the existing tests but I found no sensible way to test the functionality of the nvcc toolset without reimplementing large parts of the gcc, clang and msc test suits. Even if I would reimplement these test suits checking the prefixing I wont detect problems like a6e00c8 where multiple flags are given as a space separated string rather than a list and caused wrong prefixing on new flags.
Writing this I recognize that splitting strings on white space might be a way to prevent this...
I am unsure which parts would make sense to test...",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/506#issuecomment-262512568,Only gmake has been tested - needs tests,"I thought it should be next to gcc since it is so tightly coupled (because of nvccs design).

I can see how you reached that conclusion, but it's more about keeping all of the CUDA changes together. Extending Visual Studio to support CUDA would also fall into this modules/cuda folder. As well as the tests. As an example, look at how the D module handled adding toolsets, extending actions and test cases. The D module is more or less how I expect the CUDA module to end up in the future.

Regarding tests I agree... would anyone be willing to give me a little guidance?


I am unsure which parts would make sense to test...

You'll need to test anything you added, basically. Look at the test cases for GCC, Clang, MSC, SNC, DMD, GDC or LDC. I can see similarities between Clang and nvcc here, Clang is just GCC with some minor changes, the same way that nvcc seems to be GCC, Clang or MSC with minor changes. Also, a key thing that @starkos wants Premake to do is to be able to generate the project files on one OS and send them to another OS. So since you have os.is(...) in your code, you'll need to test explicitly setting the OS (I can guarantee this will fail as the os.is is done on script execution which will probably occur before the OS can be overridden, definitely the case in the test suite).
Let me know if you need anymore help, more than happy to help.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/TurkeyMan,11,https://github.com/premake/premake-core/pull/506#issuecomment-341243850,Only gmake has been tested - needs tests,"Incidentally, I also have a CUDA module... if there are any any advantages on either side, they should be merged.
https://github.com/TurkeyMan/premake-cuda",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/tvandijck,12,https://github.com/premake/premake-core/pull/506#issuecomment-341251467,Only gmake has been tested - needs tests,"Well, this commit is not a module right now.... and it should...
but the feature is a great addition obviously.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/starkos,13,https://github.com/premake/premake-core/pull/506#issuecomment-381705123,Only gmake has been tested - needs tests,Hey all‚Äîit sounds like there is consensus that this should be contributed as a module rather than into core. Is it okay to go ahead and close this PR?,True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/tvandijck,14,https://github.com/premake/premake-core/pull/506#issuecomment-381923827,Only gmake has been tested - needs tests,"I doubt it will get updated to a module by the original author... we can close it, but that will just result in the work getting lost.. making a module out of it would be nice, but that would be on us. Combining it with the cuda module from @TurkeyMan may make sense.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/nmoehrle,15,https://github.com/premake/premake-core/pull/506#issuecomment-381967517,Only gmake has been tested - needs tests,"Hey guys, sorry that I haven't found the time to convert this into a module and sadly I doubt that I will find it in the near future.
One thing to consider is that since last year clang supports the compilation of cuda which is a viable alternative to nvcc.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/tvandijck,16,https://github.com/premake/premake-core/pull/506#issuecomment-383280617,Only gmake has been tested - needs tests,"@nmoehrle Hey, could you enable write access to this PR as described here:
https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/
that way I can spend some time rebasing this against latest, and maybe make a module out of it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,506,2016-06-09T20:10:43Z,2019-01-11T02:43:00Z,2019-01-11T02:43:00Z,CLOSED,False,358,5,7,https://github.com/nmoehrle,Add basic support for cuda via nvcc toolset,10,[],https://github.com/premake/premake-core/pull/506,https://github.com/samsinsane,17,https://github.com/premake/premake-core/pull/506#issuecomment-453353444,Only gmake has been tested - needs tests,"I'm going to close this off, please feel free to reopen if you get time to work on the branch again.",True,{}
premake/premake-core,https://github.com/premake/premake-core,507,2016-06-10T01:00:20Z,2016-06-10T17:58:38Z,2016-06-10T18:04:57Z,MERGED,True,23,4,2,https://github.com/tvandijck,Allow rules to generate code that subsequently gets compiled.,1,[],https://github.com/premake/premake-core/pull/507,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/507,"So I made this rule:
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = ""$(IntDir)"",
    }

    buildmessage 'Compiling %(Filename) with example-compiler...'
    buildcommands {
        'package-example-compiler.exe [output_path] ""%(Identity)""'
    }
    buildoutputs {
        '%(output_path)%(Filename).example.cc',
        '%(output_path)%(Filename).example.h'
    }
And wanted to get msbuild to compile the *.example.cc output files, and link them into my projects.
So two things I had to do:

fix another bug in path.isabsolute (it would not recognize the %() tokens, and incorrectly expand)
make the .target file generator recognize compilable files.","So I made this rule:
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = ""$(IntDir)"",
    }

    buildmessage 'Compiling %(Filename) with example-compiler...'
    buildcommands {
        'package-example-compiler.exe [output_path] ""%(Identity)""'
    }
    buildoutputs {
        '%(output_path)%(Filename).example.cc',
        '%(output_path)%(Filename).example.h'
    }
And wanted to get msbuild to compile the *.example.cc output files, and link them into my projects.
So two things I had to do:

fix another bug in path.isabsolute (it would not recognize the %() tokens, and incorrectly expand)
make the .target file generator recognize compilable files.",True,{}
premake/premake-core,https://github.com/premake/premake-core,507,2016-06-10T01:00:20Z,2016-06-10T17:58:38Z,2016-06-10T18:04:57Z,MERGED,True,23,4,2,https://github.com/tvandijck,Allow rules to generate code that subsequently gets compiled.,1,[],https://github.com/premake/premake-core/pull/507,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/507#issuecomment-225252126,"So I made this rule:
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = ""$(IntDir)"",
    }

    buildmessage 'Compiling %(Filename) with example-compiler...'
    buildcommands {
        'package-example-compiler.exe [output_path] ""%(Identity)""'
    }
    buildoutputs {
        '%(output_path)%(Filename).example.cc',
        '%(output_path)%(Filename).example.h'
    }
And wanted to get msbuild to compile the *.example.cc output files, and link them into my projects.
So two things I had to do:

fix another bug in path.isabsolute (it would not recognize the %() tokens, and incorrectly expand)
make the .target file generator recognize compilable files.",LGTM!,True,{}
premake/premake-core,https://github.com/premake/premake-core,508,2016-06-10T01:02:02Z,2016-06-10T17:00:59Z,2016-06-10T17:01:07Z,MERGED,True,13,0,1,https://github.com/tvandijck,Add table.shallowcopy,1,[],https://github.com/premake/premake-core/pull/508,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/508,"We have  table.deepcopy, but not a table.shallowcopy... this adds it.","We have  table.deepcopy, but not a table.shallowcopy... this adds it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,509,2016-06-10T01:12:58Z,2016-06-10T16:10:08Z,2016-06-10T16:10:11Z,MERGED,True,23,2,2,https://github.com/tvandijck,Fix usage of bit32.arshift,1,[],https://github.com/premake/premake-core/pull/509,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/509,"added unit-test

Fixes issue: #502","added unit-test

Fixes issue: #502",True,{}
premake/premake-core,https://github.com/premake/premake-core,510,2016-06-10T18:07:25Z,2016-06-10T18:20:24Z,2016-06-10T18:20:26Z,MERGED,True,3,0,1,https://github.com/tvandijck,fix a zlib compile warning.,1,[],https://github.com/premake/premake-core/pull/510,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/510,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,511,2016-06-10T22:11:46Z,2016-06-13T18:14:31Z,2016-06-13T18:14:35Z,MERGED,True,39,13,1,https://github.com/tvandijck,"We need to actually compile the context of the rule, so we can propely use the ""filter {}"" system.",3,[],https://github.com/premake/premake-core/pull/511,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/511,"I'm implementing the PBXBuildRule in our xcode backend, which is relatively simple, but due to differences in how the buildcommands etc are interpretted, I need the filter {}'s to work.
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = iif(_ACTION == 'xcode', ""$DERIVED_FILE_DIR"", ""$(IntDir)"")
    }

    filter { 'action:vs*' }
        buildmessage 'Compiling %(Filename) with example-compiler...'
        buildcommands {
            'package-example-compiler.exe [output_path] ""%(Identity)""'
        }
        buildoutputs {
            '%(output_path)%(Filename).example.cc',
            '%(output_path)%(Filename).example.h'
        }

    filter { 'action:xcode' }
        buildcommands {
            'package-example-compiler ""$DERIVED_FILE_DIR"" ""$INPUT_FILE_PATH""'
        }
        buildoutputs {
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.cc',
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.h'
        }
This PR allow the above to work.","I'm implementing the PBXBuildRule in our xcode backend, which is relatively simple, but due to differences in how the buildcommands etc are interpretted, I need the filter {}'s to work.
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = iif(_ACTION == 'xcode', ""$DERIVED_FILE_DIR"", ""$(IntDir)"")
    }

    filter { 'action:vs*' }
        buildmessage 'Compiling %(Filename) with example-compiler...'
        buildcommands {
            'package-example-compiler.exe [output_path] ""%(Identity)""'
        }
        buildoutputs {
            '%(output_path)%(Filename).example.cc',
            '%(output_path)%(Filename).example.h'
        }

    filter { 'action:xcode' }
        buildcommands {
            'package-example-compiler ""$DERIVED_FILE_DIR"" ""$INPUT_FILE_PATH""'
        }
        buildoutputs {
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.cc',
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.h'
        }
This PR allow the above to work.",True,{}
premake/premake-core,https://github.com/premake/premake-core,511,2016-06-10T22:11:46Z,2016-06-13T18:14:31Z,2016-06-13T18:14:35Z,MERGED,True,39,13,1,https://github.com/tvandijck,"We need to actually compile the context of the rule, so we can propely use the ""filter {}"" system.",3,[],https://github.com/premake/premake-core/pull/511,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/511#issuecomment-225473676,"I'm implementing the PBXBuildRule in our xcode backend, which is relatively simple, but due to differences in how the buildcommands etc are interpretted, I need the filter {}'s to work.
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = iif(_ACTION == 'xcode', ""$DERIVED_FILE_DIR"", ""$(IntDir)"")
    }

    filter { 'action:vs*' }
        buildmessage 'Compiling %(Filename) with example-compiler...'
        buildcommands {
            'package-example-compiler.exe [output_path] ""%(Identity)""'
        }
        buildoutputs {
            '%(output_path)%(Filename).example.cc',
            '%(output_path)%(Filename).example.h'
        }

    filter { 'action:xcode' }
        buildcommands {
            'package-example-compiler ""$DERIVED_FILE_DIR"" ""$INPUT_FILE_PATH""'
        }
        buildoutputs {
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.cc',
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.h'
        }
This PR allow the above to work.",This looks like it would resolve #500? LGTM.,True,{'THUMBS_UP': ['https://github.com/tvandijck']}
premake/premake-core,https://github.com/premake/premake-core,511,2016-06-10T22:11:46Z,2016-06-13T18:14:31Z,2016-06-13T18:14:35Z,MERGED,True,39,13,1,https://github.com/tvandijck,"We need to actually compile the context of the rule, so we can propely use the ""filter {}"" system.",3,[],https://github.com/premake/premake-core/pull/511,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/511#issuecomment-225556579,"I'm implementing the PBXBuildRule in our xcode backend, which is relatively simple, but due to differences in how the buildcommands etc are interpretted, I need the filter {}'s to work.
rule 'example'
    location(path.join('..', _OPTIONS.to))

    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
        value = iif(_ACTION == 'xcode', ""$DERIVED_FILE_DIR"", ""$(IntDir)"")
    }

    filter { 'action:vs*' }
        buildmessage 'Compiling %(Filename) with example-compiler...'
        buildcommands {
            'package-example-compiler.exe [output_path] ""%(Identity)""'
        }
        buildoutputs {
            '%(output_path)%(Filename).example.cc',
            '%(output_path)%(Filename).example.h'
        }

    filter { 'action:xcode' }
        buildcommands {
            'package-example-compiler ""$DERIVED_FILE_DIR"" ""$INPUT_FILE_PATH""'
        }
        buildoutputs {
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.cc',
            '$DERIVED_FILE_DIR/$(INPUT_FILE_BASE).example.h'
        }
This PR allow the above to work.","This looks good. Only suggestion would be to pull out the common context.addFilter() stuff to its own function so it can be shared with project, in case we need to modify or extend it later.",True,{}
premake/premake-core,https://github.com/premake/premake-core,515,2016-06-15T20:08:31Z,2016-06-15T21:38:47Z,2016-06-17T17:26:29Z,MERGED,True,3,5,1,https://github.com/tvandijck,test_runner failed to correctly count failed tests,1,[],https://github.com/premake/premake-core/pull/515,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/515,#514,#514,True,{}
premake/premake-core,https://github.com/premake/premake-core,515,2016-06-15T20:08:31Z,2016-06-15T21:38:47Z,2016-06-17T17:26:29Z,MERGED,True,3,5,1,https://github.com/tvandijck,test_runner failed to correctly count failed tests,1,[],https://github.com/premake/premake-core/pull/515,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/515#issuecomment-226830381,#514,Thanks for this‚Äîlooks like one of my last fixes broke more than it fixed :[,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/516,"This is a big change, but adds rules support to gmake.","This is a big change, but adds rules support to gmake.",True,"{'THUMBS_UP': ['https://github.com/mindw', 'https://github.com/ActuallyaDeviloper']}"
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/516#issuecomment-226326729,"This is a big change, but adds rules support to gmake.","Honestly, I'm happy for someone to take over this exporter and move it ahead. As long as it passes the tests, feel free to go ahead and merge!",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/516#issuecomment-226327460,"This is a big change, but adds rules support to gmake.","Yeah, this needs a lot of testing internally... I just wanted to post this as I move along with it.
So far I have 'rules' working, and the rest of the tests work in my local branch, but apparently not yet on top of master...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/516#issuecomment-226327968,"This is a big change, but adds rules support to gmake.",my changes apparently break the 'd' module... I'll take a look at that...,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,5,https://github.com/premake/premake-core/pull/516#issuecomment-232550986,"This is a big change, but adds rules support to gmake.",The other big-ticket WRT the gmake writer is support per-file options.,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/516#issuecomment-232735773,"This is a big change, but adds rules support to gmake.","Yeah, I welcome any PR's on my branch towards that... I'm a bit caught up in some other works here at Blizzard that is not related to anything premake.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/516#issuecomment-244442803,"This is a big change, but adds rules support to gmake.","This is in production here at Blizzard now... fixed a few issues with per file configurations, but other then that no major changes... We should merge this sooner then later...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,None,8,https://github.com/premake/premake-core/pull/516#issuecomment-261707288,"This is a big change, but adds rules support to gmake.","What's the status on this? Looks like this adds support for per-file build options, I think? I'd love for this to be merged. Right now I have to resort to an ugly hack to get similar behavior.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/516#issuecomment-262024629,"This is a big change, but adds rules support to gmake.","The status? hmm... well it's in production here at Blizzard.... however.... recently there have been a couple of changes to the existing gmake backend, and those changes are not included in this refactor...
and I think that causes a bunch of tests to fail right now.... I unfortunately don't really have much time to fix them right this second... any help would obviously be much appreciated.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,None,10,https://github.com/premake/premake-core/pull/516#issuecomment-262232765,"This is a big change, but adds rules support to gmake.",I think I could take a look after #628 is merged.,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/516#issuecomment-263340425,"This is a big change, but adds rules support to gmake.","@aleksijuvani K, I merged your changes, and rebased this against latest master... thank you for your help so far.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,None,12,https://github.com/premake/premake-core/pull/516#issuecomment-263362909,"This is a big change, but adds rules support to gmake.","No problem! Although, it looks like the merge conflict fixes got combined with commit 3bc4c43. The original commit looked something like this: 272e280. It doesn't really matter, but it does make the commit look a bit weird... I think it would've made more sense to combine the merge conflict fixes with bbbae21 instead.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,13,https://github.com/premake/premake-core/pull/516#issuecomment-273588871,"This is a big change, but adds rules support to gmake.","As far as I understand, the only problem here is a broken D backend (tests passed after I removed ones related to D). I think a proper solution would be keeping a set of per-file rules that are selected automatically based on language.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,None,14,https://github.com/premake/premake-core/pull/516#issuecomment-273592142,"This is a big change, but adds rules support to gmake.","As far as I understand, the only problem here is a broken D backend (tests passed after I removed ones related to D)

Unless new merge conflicts have appeared since my pull request, then yes, that's right.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,None,15,https://github.com/premake/premake-core/pull/516#issuecomment-273592806,"This is a big change, but adds rules support to gmake.","I've been trying to find some time to work on this, but I'm really uncomfortable tinkering with the D backend. I have no experience with the language and have no projects to test it on. If someone else would like to move this ahead, I would much prefer that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,16,https://github.com/premake/premake-core/pull/516#issuecomment-273593326,"This is a big change, but adds rules support to gmake.","I have no experience with the language

Neither do I, if I ever try to fix this it'll be a Hello World project in D.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,17,https://github.com/premake/premake-core/pull/516#issuecomment-273611175,"This is a big change, but adds rules support to gmake.","neither do we unfortunately... here at Blizzard we deleted the D module entirely, we don't use it, and it just adds maintenance for us.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,18,https://github.com/premake/premake-core/pull/516#issuecomment-273746542,"This is a big change, but adds rules support to gmake.","Upon further investigation, D seems to have its very own build tool (http://code.dlang.org/getting_started) ‚Äî kind of looks like cargo (or vice versa). I wonder how useful D support in premake is. Since premake doesn't implement dependency management or DUB package support maybe it makes sense to drop it completely?",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,19,https://github.com/premake/premake-core/pull/516#issuecomment-273986679,"This is a big change, but adds rules support to gmake.",@starkos could you please weigh in on the D matter?,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/samsinsane,20,https://github.com/premake/premake-core/pull/516#issuecomment-274008830,"This is a big change, but adds rules support to gmake.","There's plenty of reasons to keep the D module in Premake.

DUB doesn't support C, C++ or C# projects. Premake does.
From what @TurkeyMan has told me about DUB, it sounds like it's very much for small projects rather than larger projects. So per-file configurations mightn't be possible.
If the module can't be updated to match the gmake changes, it's a sign that the gmake changes have broken the extensibility of the action. Which means that others will have difficulty adding similar functionality into Premake.

Personally, I'd rather see the D module fixed than have it remove it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/starkos,21,https://github.com/premake/premake-core/pull/516#issuecomment-274048310,"This is a big change, but adds rules support to gmake.","I've attached Manu to this issue; hopefully he can provide a little guidance.
Longer term though, if we don't have someone to maintain it, we'll have to consider moving it out of core. This was always the drawback with embedding modules into core.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,22,https://github.com/premake/premake-core/pull/516#issuecomment-274128571,"This is a big change, but adds rules support to gmake.","If the module can't be updated to match the gmake changes, it's a sign that the gmake changes have broken the extensibility of the action.

I don't think that is the issue with the refactor really, although it certainly could be... I just renamed some methods to use the camel casing standard, and some other functions were simply removed or entirely replaced... The D module will simply have to be adjusted, and maybe the gmake backend as well to accomodate the D-modules requirements.
That said, it's why the refactor is a pull request long before merging and it being ready.. for people to review and make comments, help with exactly these issues, etc...
Here at Blizzard, this back-end is in production for our deepmind project, and SC2/Heroes servers. So it's functional at least, but with the help of the community it can be better...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,23,https://github.com/premake/premake-core/pull/516#issuecomment-274129026,"This is a big change, but adds rules support to gmake.","BTW... if there is anyone with an fitting D example project out there, I'd be happy to give things a shot... I just know very little about D, so as much as I can make the module compile and run, I can't guarantee it'll work unless I have some test cases..",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/samsinsane,24,https://github.com/premake/premake-core/pull/516#issuecomment-274457640,"This is a big change, but adds rules support to gmake.","I don't think that is the issue with the refactor really, although it certainly could be...

I didn't mean to imply there were issues with the refactor. More than if people are unable to recreate the overrides in the D module against the new gmake backend, that it's probably because the changes didn't factor in the D module. Which is pretty much what you've said here:

The D module will simply have to be adjusted, and maybe the gmake backend as well to accomodate the D-modules requirements.

So I think we're on the same page? Overall, these changes are great, the D module just needs the same changes made to it and then a quick look over from @TurkeyMan as to whether the makefile that is generated is correct or not.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/starkos,25,https://github.com/premake/premake-core/pull/516#issuecomment-274568091,"This is a big change, but adds rules support to gmake.","Is it possible to patch D up enough to pass the tests and commit this change, even if it isn't necessarily correct? Once it lands, the folks that are using the D module can submit a fix to patch things back up?",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,26,https://github.com/premake/premake-core/pull/516#issuecomment-274576419,"This is a big change, but adds rules support to gmake.","yes, I'll make an attempt at that.. but there have recently also been a few PR's that made changes to the gmake backend, so we need to make sure to capture those changes in this refactor...
I'll try to make some time this week...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,27,https://github.com/premake/premake-core/pull/516#issuecomment-274687925,"This is a big change, but adds rules support to gmake.","Hey sorry people. I've been way AFK after I was made redundant ;)
Let me catch up...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,28,https://github.com/premake/premake-core/pull/516#issuecomment-274690719,"This is a big change, but adds rules support to gmake.","I'll patch up the D stuff today, I have some other changes I haven't merged (pending a new release of the D tooling, half of which was released just 2 days ago).
Just for the record, I've said many times before, I don't mind modules not being in core, in fact, it would even be more convenient in some cases, but that's not why they're there... the reason I pushed for them to be there in the first place is because we have virtually no real-world tests for when we break core. We need some canaries. The D module in particular touches a fairly large API surface area. The fact that D is a pain to maintain demonstrates why it should be around; every change that breaks core modules almost certainly breaks every other module out there, and breaking all end-users modules with every release of premake is not how you make premake popular and attract new users/developers. Obviously there is a contention with the fact that premake is extremely under-staffed, but that's a guaranteed self-fulfilling prophecy if we're breaking core every few days for all end-users.
For my money, the thought process goes like this:

Change gmake significantly
Breaks D
""Oh, my core changes broke 3rd party modules... I wonder if it's possible to write my core changes in a way that are less likely (or unlikely) to break those users code?""
Consider the situation...
Yes: change solution, break less stuff. No: Break the code with deliberate intent (prefer core dev agreement?), perhaps publish that breaking change in a changelog?

Even if you still commit to the breaking change; you know you did it, you had the opportunity to consider other options, and you should probably take a moment to put it on the record that you broke it in that way, and how other users are supposed to correct their modules against your changes..
Obviously everything's fuzzy to some extent, but I always felt this general idea was sound.
Truefacts; the better we are able to do a good job of this stuff as a (tiny) dev team, the more likely we are to attract users and developers.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,29,https://github.com/premake/premake-core/pull/516#issuecomment-274822074,"This is a big change, but adds rules support to gmake.",I'm just gonna put it out there that fixing this is a massive job! >_<,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,30,https://github.com/premake/premake-core/pull/516#issuecomment-275165752,"This is a big change, but adds rules support to gmake.","To be honest. I'm with @TurkeyMan on this one.... even though I made this pull request, I'm sure there is ways we can make this more backwards compatible. The problem for me however is that I can only do so much as time permits... in the end we got a game to ship, and the pace off releases on Heroes of the Storm is pretty high. So stuff like this when it needs more work, will just lag behind quite a bit, and to be honest ""premake"" as a product has much bigger fish to fry then this refactor.
Maybe we can take some of the ideas, and simply plug it into the existing gmake backend, and more slowly move the gmake backend forward...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,31,https://github.com/premake/premake-core/pull/516#issuecomment-275446026,"This is a big change, but adds rules support to gmake.","Another crazy idea is to create a separate ‚Äústaging‚Äù backend with different name.
@TurkeyMan is it true that DUB isn't intended to be used with large projects? Can we hope to see D fix from you?
@tvandijck please consider merging Blizzard#4 ‚Äî it fixes a file name escaping problem",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,32,https://github.com/premake/premake-core/pull/516#issuecomment-275908057,"This is a big change, but adds rules support to gmake.","@resetnow DUB is not capable of large real-world programs. It's like cargo, it just builds self-contained D projects, and doesn't know how to make working on multi-language projects practical.
The main reason I use D a lot is precisely because I want it in multi-language environments. D is binary compatible with C/C++, so if you're sick and tired of C/C++'s bullshit, you can write parts of your ecosystem in D, and marry it near seamlessly with your existing C/C++ investment.
I come from games, which are gigantic projects with fairly complex build environments. Most game shops use Visual Studio, and D just fits right in. Rebuild works as expected; only necessary parts trigger rebuilds. Plugging DUB into that environment is really clunky by contrast.
Yes, you'll see the gmake support for D rewritten from me. It's in progress... but it's a fairly big job. I'm really just writing it again from scratch after a failed effort trying to adapt the code. Much easier to just rewrite ;)",True,{'THUMBS_UP': ['https://github.com/vlad-ivanov-name']}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,33,https://github.com/premake/premake-core/pull/516#issuecomment-275981943,"This is a big change, but adds rules support to gmake.","Okay, so fixing D as a module against the new gmake has some problems.
The biggest problem is that modules requirements are resolved in postBake()...
This means modules can't affect the oven, which doesn't seem right.
The new gmake action calls rule 'cpp', etc, so logically the D module should call rule 'dc' to create the rule for .d source files, but the rules appear to be digested in the oven, effectively meaning modules can't create rules, since they're already processed before any modules are loaded.
I can't really imagine the full impacts of moving the time that modules are loaded... why are they only loaded in postBake()? Is it that the conditions leading to a module being required are only discovered in the oven? I guess I can see how that's possible, but then we have a chicken/egg situation.
The rule processing could perhaps be moved out of the oven? All seems a bit wonky.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/starkos,34,https://github.com/premake/premake-core/pull/516#issuecomment-276036724,"This is a big change, but adds rules support to gmake.","Modules can define a _preload.lua script that runs at initialization time (that was the intention, at least). The dependency check was a bit of future-proofing intended to avoid loading unused modules. You can install the hooks in _preload, and then just check the configuration state before running your new logic.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/TurkeyMan,35,https://github.com/premake/premake-core/pull/516#issuecomment-276041865,"This is a big change, but adds rules support to gmake.","Yeah okay, I guess that's a reasonable solution. It just means that fragments of the module (the rules it defines) will be available even if the _preload.lua's predicate function says not to load the module.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,36,https://github.com/premake/premake-core/pull/516#issuecomment-276115244,"This is a big change, but adds rules support to gmake.","ultimately the way I hooked up the rules, it just creates a table... there is probably a way to go around that, and simply inject stuff in that table... I think it is perfectly reasonable to make changes to the refactor to refactor it into something usable.... obviously when I first wrote this thing, I had one problem to solve, and I wanted to solve it in the most generic possible way.. that doesn't mean it is the right solution...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,37,https://github.com/premake/premake-core/pull/516#issuecomment-286485209,"This is a big change, but adds rules support to gmake.",Any progress on this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tritao,38,https://github.com/premake/premake-core/pull/516#issuecomment-286486894,"This is a big change, but adds rules support to gmake.","By the way, I tested this PR last week and everything seems to work on our projects.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,39,https://github.com/premake/premake-core/pull/516#issuecomment-286487636,"This is a big change, but adds rules support to gmake.","It works for me too, I was just hoping using upstream software instead of fork would be better. This is mostly about D.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,40,https://github.com/premake/premake-core/pull/516#issuecomment-286500686,"This is a big change, but adds rules support to gmake.","I'll rebase it again, and merge our latest fixes into it as well, which fixes a bunch of PCH related issues, and adds support for ""utility"" projects with buildcommands for specific files and pre/post build steps, courtesy of the World of Warcraft team ;)
I would love to merge it, but I really need sign off from everyone... and the roadblock is still the D backend.",True,"{'THUMBS_UP': ['https://github.com/vlad-ivanov-name', 'https://github.com/tritao']}"
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,41,https://github.com/premake/premake-core/pull/516#issuecomment-286503844,"This is a big change, but adds rules support to gmake.",All squashed and updated...,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,42,https://github.com/premake/premake-core/pull/516#issuecomment-286505543,"This is a big change, but adds rules support to gmake.","@TurkeyMan I added the ""onInitilize"" on the action...
newaction {
        trigger         = ""gmake"",
...
        onInitialize = function()
			p.make.cpp.initialize()
	end
}

which initializes the rules for the cpp backend in this case.. you should be able to add the rule 'dc' in that callback. Actions are typically defined in the _preload.lua stage, otherwise the action would not be visible to premake at any stage.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,43,https://github.com/premake/premake-core/pull/516#issuecomment-286509503,"This is a big change, but adds rules support to gmake.","@TurkeyMan FYI... you can also insert a callback into the cpp.elements.makefile table right after the cpp.createRuleTable, and just manually add the rules for the D related files... during the backend we're really just expecting each rule to have a buildoutput/buildmessage/buildcommand and a fileExtensions property.
The only reason I went with the 'rule' logic, was that is seemed kind of logical to do, since a makefile really is just a set of rules applied in order to some set of extensions. So this new gmake backend is written that way... per file configurations are just treated as per file rules, and all 'global' rules are effectively treated exactly the same way... as per file filters (by extension) and applied and chained equally. For example if you just created a rule that has a cpp file as output, it would just automatically chain to the rule that compiles that cpp file into an .o file....
in a similar way, with this new gmake backend you could do the following:
rule 'myownlanguage'
    fileextension '.mol'
    buildoutputs '$(OBJDIR)/%{file.objname}.llvm'}
    buildcommands { 'mycompiler.exe .....'}

rule 'llvm'
    fileextension '.llvm'
    buildoutputs '$(OBJDIR)/%{file.objname}.o'}
    buildcommands { 'llvm.exe .....'}
And things would automatically chain from rule to rule...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,44,https://github.com/premake/premake-core/pull/516#issuecomment-286510477,"This is a big change, but adds rules support to gmake.","@TurkeyMan last one... if you have any kind of test project for D, I'd be perfectly happy to make it build with this backend and get things going... and if you have any kind of refactored but not entirely done work already for the D module... send it my way and I'll try to help out where I can...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,45,https://github.com/premake/premake-core/pull/516#issuecomment-286975814,"This is a big change, but adds rules support to gmake.",@tvandijck thank you for the update! Please consider merging Blizzard#5,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,46,https://github.com/premake/premake-core/pull/516#issuecomment-287549572,"This is a big change, but adds rules support to gmake.","Blizzard#6 ‚Äî adds more variables to custom rules.
@TurkeyMan could you at least provide an example D project with all the features you'd like to see supported, and we'll start it from there?",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,47,https://github.com/premake/premake-core/pull/516#issuecomment-289282449,"This is a big change, but adds rules support to gmake.",@TurkeyMan D language seems to have 3 compilers ‚Äî which one should be supported? https://wiki.dlang.org/Compilers,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/SirLynix,48,https://github.com/premake/premake-core/pull/516#issuecomment-291626347,"This is a big change, but adds rules support to gmake.",What's missing in order to merge this? How can I help?,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,49,https://github.com/premake/premake-core/pull/516#issuecomment-291630311,"This is a big change, but adds rules support to gmake.","D support is missing, at this point the only way to help is to look what capabilities D backend has in master and adapt it to work with the new gmake backend.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/SirLynix,50,https://github.com/premake/premake-core/pull/516#issuecomment-291630908,"This is a big change, but adds rules support to gmake.","I don't know much about D, but I can compare the current makefile with those generated by this PR to check the difference with a sample D project, would that help?",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,51,https://github.com/premake/premake-core/pull/516#issuecomment-291631857,"This is a big change, but adds rules support to gmake.","Neither do we! (and those who know something choose to be silent, cough). That would help ‚Äî although in this PR, D backend isn't functional at all.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/starkos,52,https://github.com/premake/premake-core/pull/516#issuecomment-291830833,"This is a big change, but adds rules support to gmake.","I think at this point we should seriously consider pulling the D module from core. I totally understand Manu's point about maintaining stability for external modules; it was well intentioned and a good idea. But in this case we want to make a breaking change and we're completely stuck because there is no one here with the domain knowledge to fix it.
Are there any objections? If not, we'll have to figure out how to cleanly pull it back out to its own repository (and who should own that repository, and where it should live).",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,53,https://github.com/premake/premake-core/pull/516#issuecomment-291917926,"This is a big change, but adds rules support to gmake.","I have no objection, although I do also very much understand @TurkeyMan his point.
I also don't think this particular refactor is done, and so having anyone make a new D module that breaks another few times due to the ongoing work is just a waste of valuable ""open source time"" as you call that..
So my proposal... we'll make a premake-dlang repository here in the premake organisation with the current code in it and make it work as a module against premake5-alpha.?? and make that release. Make the readme very clearly indicate that it is supported up until that release, but due to ongoing refactoring in the gmake backend, porting will be required to pull it back up...
The premake org owns that repository, and anyone willing and able to fix it is very welcome to do so..
and if it ever gets fixed, we can pull it back in.... if it never gets fixed, there is no demand, or people choose to go elsewhere, which is a bummer for premake, but ultimately up to those teams. CMake after all has a lot of momentum and support in the open source world, so if they have better support for D then that may be the better choice. There is also other forks of premake out there that are in use.
And in all honesty, I also think the 'clean', 'gmake' and 'vstudio' backends should be refactored into modules.
As for the 'gmake' backend itself... I don't think it's done... I'm not really liking the 'rule' stuff I did, since it makes adding other rules really difficult... I took a stab at the D module myself last week, and basically ran into similar problems, so it makes the current code not very extendable, which was certainly one of my goals. So I'd say, we merge this, so people can test things out, and move on with per file config support etc... but I certainly want to keep churning a bit on some of the architectural changes I made, to make making a 'new' Dlang module much easier, because ultimately dlang is just another file extension, with a different toolset... so that is what the dlang module should be defining, nothing more.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/samsinsane,54,https://github.com/premake/premake-core/pull/516#issuecomment-291951523,"This is a big change, but adds rules support to gmake.","I'm not really sure where I stand on this. I completely agree with @TurkeyMan on keeping it in core, and that it causing issues like this is a sign of what a module developer will have to go through. But having said that, this PR has been going for awhile and it seems as if @TurkeyMan is rather busy. He also appears to be the only one with the knowledge required to point us in the correct direction.
I know this discussion is about the GMake refactor, and potentially removing the D module. But to extend on that, should we replace the D module with mobile platform modules? It might not seem like these things are related at all, but the idea of the D module in core is more as a ""canary"" (as @TurkeyMan puts it) than as a selling feature. I imagine people are more likely to buy into Premake because of Android or iOS support than because we support D, or any other language really.
Android will open the door to Java being added, iOS will open the door further for Swift. This covers the ""adds a new language to Premake"" part of the D module. iOS will also encourage refactors of the XCode back end. Both will encourage refactors of the VS and gmake back ends and the toolset system, which covers the rest of the D module parts.
No offence to the D community, but I would imagine the Android and iOS development communities are significantly larger. Which should, in theory, increase the number of potential Premake users and developers. I believe that these two systems would also make it easier to rope in the Raspberry Pi and Arduino development communities too, since they rely on GCC and Clang to target more than Linux and macOS, and x86 and x86_64.
At the end of the day, I think we will need to remove the D extension of gmake if it's blocking the gmake back end from supporting per-file configurations. But I don't think we should just remove our ""canary"" without any plans for a replacement.
This reply ended up being way more than I planned to write, but I've been meaning to bring up the idea of adding Android and iOS to core for awhile now and it just kind of fit here pretty nicely.",True,{'THUMBS_UP': ['https://github.com/tvandijck']}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,55,https://github.com/premake/premake-core/pull/516#issuecomment-291958826,"This is a big change, but adds rules support to gmake.","I agree with @samsinsane here... but I think in order to get to a place where adding a language like D, Java or Swift is easy, we need to actually think about how we want a module for that to look...
quote honestly, in my opinion, adding another language and compiler should be as easy as:
newlanguage 'D'
    extensions { '.d' }
    compiler ""C:\D\dmd.exe""   -- or whatever..
    <define outputs>
    <define the options and api specific to this language>

right now, adding a language requires someone to write a module, override 50 methods to inject itself into the right places, etc... and it requires so much inside knowledge of premake, that it almost requires you to become a core developer on the premake project to pull it off.
this gmake refactor, is an attempt at going in that direction, but I don't think I'm there yet. Since I tried something like the above for D, and couldn't do it, without injecting functions into tables, overriding some other stuff, and practically rewriting half the gmake backend through overrides.. So naturally any refactor will break modules like that... and adding android support to the visual studio action is a similar experience...
So to become more resilient against refactors like that, we need to define proper public API's to support adding toolsets, compilers and languages.. And then refactor our current actions such that they can support those things without having to inject stuff into them.. Getting there, will require time and dedication by a number of people, I've made a first step towards this with this gmake refactor, but again, it's not good enough yet, and more work will be required to get there.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/samsinsane,56,https://github.com/premake/premake-core/pull/516#issuecomment-292192438,"This is a big change, but adds rules support to gmake.","@tvandijck that sounds like a really good idea. Would actions define their own option functions, or would it be completely fixed? For example, gmake will likely only need a value returned, while vstudio could require the element name to be returned too. Maybe that's as complex as it ever needs to be, but these option functions would need to work with a filtering system, so that you can setup multiple options based on the language/compiler/action/system/platform/architecture/whatever.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,57,https://github.com/premake/premake-core/pull/516#issuecomment-292231054,"This is a big change, but adds rules support to gmake.","@samsinsane yeah, I think different modules/actions whatever should be able to provide API to this API, and to 'check' if said API's are implement/filled-in, and if not give an error that this particular action doesn't have support for that 'language'...
The biggest issue is that this will just be a little bit of trial and error as we're discovering the needs of each action and how we can solve that... callbacks are nice and all, but if we can do it with just data, that be great.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,58,https://github.com/premake/premake-core/pull/516#issuecomment-297445127,"This is a big change, but adds rules support to gmake.","Sorry for bugging all of you again, but what's the status of this refactor now? Did we agree to pull D out of core? If so, can this be rebased and merged? I can help with the tests, if needed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,59,https://github.com/premake/premake-core/pull/516#issuecomment-297449746,"This is a big change, but adds rules support to gmake.","To be honest.... I like this refactor, but trying to port the D module has revealed some glaring mistakes that need to be addressed, so that adding languages in the future isn't so hard. Ultimately bringing back the D module and discovering what we need to do that would really serve us well...
I'm not comfortable merging this refactor in the current state, even if we decided to drop the D module right now... We merge this, people start depending on it, and further refactors are simply going to set us back again, and again... I would like to get it right the first time, or at least close to right..
I want to work towards the api I proposed above:
newlanguage 'D'
    extensions { '.d' }
    compiler ""C:\D\dmd.exe""   -- or whatever..
    <define outputs>
    <define the options and api specific to this language>

And even define C, C++, and C# using that API in core premake, instead of hardcoding them like we've done. Maybe that is a much bigger effort, and we should merge this refactor as is to get us moving ahead, but it would basically be temporary work...",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/samsinsane,60,https://github.com/premake/premake-core/pull/516#issuecomment-297456356,"This is a big change, but adds rules support to gmake.","@tvandijck I was thinking about this yesterday and today. Perhaps we should make a .NET/C# module that contains all the C# based extensions to core, including the .NET toolset. This should provide a similar level of coverage that the D module did, while also being something that numerous users can provide feedback on. Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,61,https://github.com/premake/premake-core/pull/516#issuecomment-297463251,"This is a big change, but adds rules support to gmake.","@samsinsane well, now that we have the module system in place, I actually think that both the gmake and visual studio actions should simply be modules themselves as well... but it's not all that easy... there is a lot of assumptions, mostly for historical reasons I think, about those things existing where they do, and other modules extending them... It all sort of feels like there is something missing from premake that allows these things to be easier to extent...
in the visual studio action I introduced these things:
https://github.com/premake/premake-core/blob/master/src/actions/vstudio/vs2010_vcxproj.lua#L620
which allows you to more easily add other tags... So for example, add 'D' to the vcxproj generator would be simply adding another category in that table, but it's a very different solution then what we need for the gmake module, because it's structured so differently. I don't think they technically have to be so different though.. ""ClInclude"" and ""ClCompile"" are just msbuild rules, just like any other custom defined rule.
this gmake refactor tried to basically use the ""rules"" api to define the default C,C++ languages as rules, which can then be interpreted the same way as any other rule, but it's not complete... the rule api doesn't cover everything we need, which can easily be seen in the m.categories tables in the Visual Studio action as well... where there is callbacks, calling very specific set of functions to generate the right visual studio XML to support a particular option. ClCompile beeing the most complicated one, for obvious reasons.
I'd like to get to a place where you specify a language with a set of file extension, and allows you to define properties and callbacks for each... so that you can say, for the C++ language any cpp file has these properties (optimization, rtti, exceptionhandling, etc).
The problem is, whichever way you go, you end up having to write action specific code in the language definition, or language specific code in the action. I don't know of a generic way to say: exceptionhandling 'on', needs to generate <ExceptionHandling>true</ExceptionHandling> on visual studio, but --exception-handling=on for gmake on the commandline..
Anyway, I'm rambling on... I don't know the right answer, all I know is that adding new languages requires too many overrides and too much knowledge of premake internals, which makes refactors like this almost certainly break a module or two.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/samsinsane,62,https://github.com/premake/premake-core/pull/516#issuecomment-297621801,"This is a big change, but adds rules support to gmake.","@tvandijck I really like the idea of having APIs to extend actions instead of using (in some cases, over using) premake.override. Don't need the ClCompile section, just call action.removeSection(""ClCompile"", conditionalFunction) or something to that effect. I think that would simplify things a bit, it doesn't matter where the code lives, it doesn't matter what the function is called, it has an external name that can be used to find it. I guess this would require some insane documentation about what exists, and it'd be much harder to just arbitrarily rename those external names.
Although, maybe the gmake code has it right? Create a table that's iterated over:
vsAndroid = {
  [""ClCompile""] = { -- Section name, VStudio looks for this, if it doesn't find it, calls default
    [""WarningLevel""] = { -- Element name, Vstudio emits this to the file ""<WarningLevel>""
      [""PremakeVariable""] = ""warnings"", -- This or the ""WarningLevel"" table becomes a function with `wks`, `prj`, `cfg` passed in
      [""On""] = ""..."",  -- The usual value lookup conversion
    }
  }
}

action.registerExtension(""vstudio"", vsAndroid, function (wks, prj) return prj.system == p.ANDROID end)
Haven't fully thought this through, I might be missing something. I guess the first issue is that there's no way to copy the default and modify it, which you'd want to do with VStudio because that's how it works. Perhaps, if you define ClCompile it ignores the default, if you define ClCompileExt it merges the two together, overriding the default values with the ClCompileExt ones. Actually, maybe we want a way to say what this table extends. For example, vsAndroid would want to extend the vstudio table, but if you apply this to make, you might have vsAndroidGCC and you want that to extend gcc, and vsAndroidClang to extend clang.
I don't want to delve too far into the details yet, these ideas mightn't be close to what you're imaging, or they could just be horribly flawed. Also, should we spin this out into an issue? I feel it's relevant to this PR, but also could become extremely noisy.",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/starkos,63,https://github.com/premake/premake-core/pull/516#issuecomment-297675166,"This is a big change, but adds rules support to gmake.",That's an interesting idea‚Ä¶the logical path from there is a template system.,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,64,https://github.com/premake/premake-core/pull/516#issuecomment-297728972,"This is a big change, but adds rules support to gmake.","Also, should we spin this out into an issue?

We're 62 comments deep on this PR now ;) I think making this into an issue sounds about right, or in the github project space there is something more appropriate for this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/vlad-ivanov-name,65,https://github.com/premake/premake-core/pull/516#issuecomment-306848308,"This is a big change, but adds rules support to gmake.",Any progress on agreeing on a solution?,True,{}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,66,https://github.com/premake/premake-core/pull/516#issuecomment-307992092,"This is a big change, but adds rules support to gmake.","No agreement, and I think for the sake of progress I'm going to be moving all this code into a ""gmake2"" module, and make it a separate action. That way we have a cleaner way to update modules like the D module.
I think I'm going to do the same with our XCode module, which is a total rewrite of the xcode action by our dedicated mac team. Right now however that module is a replacement, rather then an addition, just like this ginormous gmake refactor. I think writing them as an addition would have been better in the first place.
I'll leave this PR open for now, but as soon as I got it working as a module, I'm going to close this.",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,516,2016-06-15T21:30:54Z,2017-06-13T16:56:10Z,2017-06-13T16:56:39Z,CLOSED,False,1413,3185,32,https://github.com/tvandijck,Gmake refactor,4,[],https://github.com/premake/premake-core/pull/516,https://github.com/tvandijck,67,https://github.com/premake/premake-core/pull/516#issuecomment-308180785,"This is a big change, but adds rules support to gmake.",superseded by: #803,True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/518,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:","The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:",True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/518#issuecomment-227084185,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:",Why does that screenshot show the same file four times? This seems like a bug?,True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/518#issuecomment-227203802,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:","No a bug.... As you can see 3 out of 4 are 'exclude from build'... this is because in this particular setup we used the 'build/obj/x64/Debug' as the output path, and hence each configuration has it's own output. In this particular sample maybe not the best selection of tokens for the 'buildoutputs', since the output for each configuration is going to be equal. But at the same time, it did correctly test the ability for Visual Studio to setup a project correctly in the case where this is useful...
That said, if you use a tool like incredibuild to batch build multiple configurations at once, incredibuild is unable to figure out that these buildsteps will generate the same file. So you end up with failing builds due to race conditions in the file writing process. That is something that you can fix in the 'protoc.exe' compiler by actually checking for that 'race condition', but not many code generators do that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/518#issuecomment-227378177,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:",LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/518#issuecomment-227430511,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:",This LGTM as well. Is there any logic in there that might make sense to reuse for the other exporters? Or perhaps to put somewhere in the baking step so the exporters just get it for free? I'm not entirely clear from this PR how much of it is VS-specific.,True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/518#issuecomment-227500904,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:","I originally had this as part of the 'p.project.bake' process, indeed in a more generic way... However this seriously messes up xcode and gmake...
In xcode for example, this is already automatically done by the compiler.
In gmake, as I am adding support for rules, I also already automatically do this...
Adding this in the p.project.bake turned out to be making visual studio easier, but all other back-ends considerably harder. So in the end I opted for the VS specific approach.",True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/518#issuecomment-227508854,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:",Thanks for the info!,True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/518#issuecomment-232350174,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:","I originally had this as part of the 'p.project.bake' process, indeed in a more generic way... However this seriously messes up xcode and gmake...

Sorry to suggest rework after the fact, but what about moving it back into baking (got to get my in-progress changes done and pushed, would make this easier) and marking those file cfgs with a generated flag? Then Xcode and Make could ignore them easily, but they would still be available to modules that needs to examine the file lists (i.e. Qt)?",True,{}
premake/premake-core,https://github.com/premake/premake-core,518,2016-06-17T17:28:09Z,2016-06-21T17:17:36Z,2016-07-14T17:19:58Z,MERGED,True,86,3,2,https://github.com/tvandijck,Add generated files to vxcproj file.,1,[],https://github.com/premake/premake-core/pull/518,https://github.com/TurkeyMan,9,https://github.com/premake/premake-core/pull/518#issuecomment-232542959,"The fix we made for 'rules' where a .cpp file gets automatically compiled as part of the rule if the buildoutputs of a rule creates those files, needs to be applied to custom build steps as well.
Say for example in your project you write:
files { '*.example' }
   buildoutputs { '%{ file.basename}.cpp' }
   buildcommands { 'example-compiler %{file.relpath} %{file.basename}.cpp' }
then without this change, the %{file.basename}.cpp would not get compiled automatically.
And you can't do a
files { '**.cpp' } 
on files that don't yet exists
This change add support in Visual Studio for those files to get added, and it makes it look pretty too:","We've reverted this patch: #539
This should be re-opened and further worked.",True,{}
premake/premake-core,https://github.com/premake/premake-core,519,2016-06-20T12:57:22Z,2016-06-21T13:50:05Z,2016-06-21T14:06:11Z,CLOSED,False,1,1,1,https://github.com/starkos,Undefine CURL_CA_BUNDLE on Linux builds,1,[],https://github.com/premake/premake-core/pull/519,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/519,"Not sure if this is the right solution, but I had to undefine this symbol in order to Premake to build on Ubuntu for the 5.0-alpha9 release. Can someone with more Linux smarts confirm or suggest a better fix?","Not sure if this is the right solution, but I had to undefine this symbol in order to Premake to build on Ubuntu for the 5.0-alpha9 release. Can someone with more Linux smarts confirm or suggest a better fix?",True,{}
premake/premake-core,https://github.com/premake/premake-core,519,2016-06-20T12:57:22Z,2016-06-21T13:50:05Z,2016-06-21T14:06:11Z,CLOSED,False,1,1,1,https://github.com/starkos,Undefine CURL_CA_BUNDLE on Linux builds,1,[],https://github.com/premake/premake-core/pull/519,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/519#issuecomment-227161533,"Not sure if this is the right solution, but I had to undefine this symbol in order to Premake to build on Ubuntu for the 5.0-alpha9 release. Can someone with more Linux smarts confirm or suggest a better fix?","I think undefining this will break HTTP SSL support. This define should point to a system path with certificates. See 
  
    
      premake-core/contrib/curl/premake5.lua
    
    
         Line 25
      in
      ef03d2a
    
  
  
    

        
          
           local ca = nil 
        
    
  

 for how we search for this path in Linux.",True,{}
premake/premake-core,https://github.com/premake/premake-core,519,2016-06-20T12:57:22Z,2016-06-21T13:50:05Z,2016-06-21T14:06:11Z,CLOSED,False,1,1,1,https://github.com/starkos,Undefine CURL_CA_BUNDLE on Linux builds,1,[],https://github.com/premake/premake-core/pull/519,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/519#issuecomment-227163684,"Not sure if this is the right solution, but I had to undefine this symbol in order to Premake to build on Ubuntu for the 5.0-alpha9 release. Can someone with more Linux smarts confirm or suggest a better fix?","Curious to know if 5.0-alpha9 works for you, as I did make this change as part of the binary build.
If I can't fix it this way, what would be the right way to get a build working on a stock Ubuntu install?",True,{}
premake/premake-core,https://github.com/premake/premake-core,519,2016-06-20T12:57:22Z,2016-06-21T13:50:05Z,2016-06-21T14:06:11Z,CLOSED,False,1,1,1,https://github.com/starkos,Undefine CURL_CA_BUNDLE on Linux builds,1,[],https://github.com/premake/premake-core/pull/519,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/519#issuecomment-227202880,"Not sure if this is the right solution, but I had to undefine this symbol in order to Premake to build on Ubuntu for the 5.0-alpha9 release. Can someone with more Linux smarts confirm or suggest a better fix?","The right way to fix this is to use the 'autoconf' module I made... Ultimately that 'config-linux.h' was auto generated on a particular Linux box, and will likely not work on other 'BSD/Linux' distributions. Ultimately the lack of autoconf in premake is causing this...
Now, with the way we bootstrap, we could add a './configure' step to the bootstrap and generate those header files for zlib/libzip and curl more correctly, but premake itself will be unable to do this right now, and hence those header files will have to be manually tweaked for each distribution or configuration. For example if you were to compile in 64-bit, a few of the defines such as ""SIZEOF_SIZE_T (4)"" are all wrong.
I wish software creators wouldn't rely on these kind of things for middleware so much... most of these defines are easily discoverable by using the compiler provided defines from the compiler. But that's unfortunately not done very often.",True,{}
premake/premake-core,https://github.com/premake/premake-core,519,2016-06-20T12:57:22Z,2016-06-21T13:50:05Z,2016-06-21T14:06:11Z,CLOSED,False,1,1,1,https://github.com/starkos,Undefine CURL_CA_BUNDLE on Linux builds,1,[],https://github.com/premake/premake-core/pull/519,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/519#issuecomment-227445475,"Not sure if this is the right solution, but I had to undefine this symbol in order to Premake to build on Ubuntu for the 5.0-alpha9 release. Can someone with more Linux smarts confirm or suggest a better fix?","I wish software creators wouldn't rely on these kind of things for middleware so much... most of these defines are easily discoverable by using the compiler provided defines.

This.
I'm going to close this PR then and open an issue instead. (Update: the issue is here)",True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/521,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/521#issuecomment-227615285,,"LGTM, I thought this already occurred though?",True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/521#issuecomment-227618749,,"Well, yeah, I made a pull request for it like ages ago, but that one was declined, and I never had the time to make it the way it was suggested in that PR.
#248",True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/521#issuecomment-227783448,,Apparently the monodevelop module can't handle this though :( anyone have any insight on that?,True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/521#issuecomment-247509897,,"I'm really not fond of how we have these ""heavily used"" modules holding up PRs for months.
This block seems to be the problem, but monodevelop only supports GCC which if explicitly set will cause the exact same problem since clang.getlinks just calls gcc.getlinks.
@TurkeyMan it looks like you're the main contributor (and creator) of this module, are you able to provide some insight into this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/521#issuecomment-257065801,,"Once #607 goes through, you should be able to rebase and we can finally merge this in. :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/521#issuecomment-258326802,,"@tvandijck can you rebase this on master? Once you've done that, and the tests pass, we can merge this into master.",True,{}
premake/premake-core,https://github.com/premake/premake-core,521,2016-06-22T00:47:42Z,2016-11-08T00:55:35Z,2017-02-08T20:46:13Z,MERGED,True,3,0,1,https://github.com/tvandijck,Select clang as default tool on MacOSX.,1,[],https://github.com/premake/premake-core/pull/521,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/521#issuecomment-258888350,,on it.,True,{}
premake/premake-core,https://github.com/premake/premake-core,522,2016-06-22T00:47:57Z,2016-06-22T15:36:14Z,2016-06-22T15:54:59Z,MERGED,True,1,1,1,https://github.com/tvandijck,Print full text in test_assertions,1,[],https://github.com/premake/premake-core/pull/522,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/522,It makes it easier to see what is wrong.,It makes it easier to see what is wrong.,True,{}
premake/premake-core,https://github.com/premake/premake-core,522,2016-06-22T00:47:57Z,2016-06-22T15:36:14Z,2016-06-22T15:54:59Z,MERGED,True,1,1,1,https://github.com/tvandijck,Print full text in test_assertions,1,[],https://github.com/premake/premake-core/pull/522,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/522#issuecomment-227615362,It makes it easier to see what is wrong.,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,523,2016-06-22T01:02:08Z,2016-06-22T15:36:42Z,2016-06-22T15:36:44Z,MERGED,True,33,11,5,https://github.com/tvandijck,Symbols API.,2,[],https://github.com/premake/premake-core/pull/523,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/523,deprecating the 'symbols' flag.,deprecating the 'symbols' flag.,True,{}
premake/premake-core,https://github.com/premake/premake-core,523,2016-06-22T01:02:08Z,2016-06-22T15:36:42Z,2016-06-22T15:36:44Z,MERGED,True,33,11,5,https://github.com/tvandijck,Symbols API.,2,[],https://github.com/premake/premake-core/pull/523,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/523#issuecomment-227616629,deprecating the 'symbols' flag.,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,523,2016-06-22T01:02:08Z,2016-06-22T15:36:42Z,2016-06-22T15:36:44Z,MERGED,True,33,11,5,https://github.com/tvandijck,Symbols API.,2,[],https://github.com/premake/premake-core/pull/523,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/523#issuecomment-227617180,deprecating the 'symbols' flag.,"Oops, gotta run tests and fix this... my bad... will look at this tomorrow.",True,{}
premake/premake-core,https://github.com/premake/premake-core,523,2016-06-22T01:02:08Z,2016-06-22T15:36:42Z,2016-06-22T15:36:44Z,MERGED,True,33,11,5,https://github.com/tvandijck,Symbols API.,2,[],https://github.com/premake/premake-core/pull/523,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/523#issuecomment-227618395,deprecating the 'symbols' flag.,"subtle, but 'not' goes before '==' in lua...",True,{}
premake/premake-core,https://github.com/premake/premake-core,524,2016-06-22T01:11:40Z,2016-06-22T16:18:03Z,2016-06-22T21:09:06Z,MERGED,True,10,2,2,https://github.com/tvandijck,Adding 'symbolspath' API to allow specifying where the pdb file goes.,1,[],https://github.com/premake/premake-core/pull/524,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/524,"This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151","This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151",True,{}
premake/premake-core,https://github.com/premake/premake-core,524,2016-06-22T01:11:40Z,2016-06-22T16:18:03Z,2016-06-22T21:09:06Z,MERGED,True,10,2,2,https://github.com/tvandijck,Adding 'symbolspath' API to allow specifying where the pdb file goes.,1,[],https://github.com/premake/premake-core/pull/524,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/524#issuecomment-227626667,"This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151","LGTM, can you please flag all the issues that this fixes so they're closed on merge? :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,524,2016-06-22T01:11:40Z,2016-06-22T16:18:03Z,2016-06-22T21:09:06Z,MERGED,True,10,2,2,https://github.com/tvandijck,Adding 'symbolspath' API to allow specifying where the pdb file goes.,1,[],https://github.com/premake/premake-core/pull/524,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/524#issuecomment-227785022,"This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151",Rebased and added issue id's.,True,{}
premake/premake-core,https://github.com/premake/premake-core,524,2016-06-22T01:11:40Z,2016-06-22T16:18:03Z,2016-06-22T21:09:06Z,MERGED,True,10,2,2,https://github.com/tvandijck,Adding 'symbolspath' API to allow specifying where the pdb file goes.,1,[],https://github.com/premake/premake-core/pull/524,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/524#issuecomment-227866708,"This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151",Nice one!,True,{}
premake/premake-core,https://github.com/premake/premake-core,524,2016-06-22T01:11:40Z,2016-06-22T16:18:03Z,2016-06-22T21:09:06Z,MERGED,True,10,2,2,https://github.com/tvandijck,Adding 'symbolspath' API to allow specifying where the pdb file goes.,1,[],https://github.com/premake/premake-core/pull/524,https://github.com/tapika,5,https://github.com/premake/premake-core/pull/524#issuecomment-227873249,"This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151","Good, seems to be working.
But is it possible to be able also to specify empty value - according to my post on forum 2 years ago - http://industriousone.com/topic/configuring-pdb-file-project - it should be possible to generate empty <ProgramDataBaseFileName></ProgramDataBaseFileName> xml tag. But currently it's not possible - using symbol path """" will result in <ProgramDataBaseFileName>.</ProgramDataBaseFileName>
which in a turn will result in compiler error:
fatal error C1033: cannot open program database ...
I'm still bit puzzled by myself why to set this path to empty value - but I guess I want to have debugging information for static library, but when integrating further into .exe - static library would not have .pdb path defined at all.
I also suspect that my next direction would be to get rid of separate static library projects in overall - include them as compilable source code / compilable project.",True,{}
premake/premake-core,https://github.com/premake/premake-core,524,2016-06-22T01:11:40Z,2016-06-22T16:18:03Z,2016-06-22T21:09:06Z,MERGED,True,10,2,2,https://github.com/tvandijck,Adding 'symbolspath' API to allow specifying where the pdb file goes.,1,[],https://github.com/premake/premake-core/pull/524,https://github.com/tapika,6,https://github.com/premake/premake-core/pull/524#issuecomment-227877546,"This 'finally' allows us to all eat the cake and have it...
if you specify:
symbolspath '$(OutDir)$(TargetName).pdb'
you get your pdb's right next to your exe/dll/lib with the same name.
if you don't specify it, it maintains the default behavior that we've gone back and forth between.
Fixes:
#319
#314
#151","Btw - that particular linker error ignoring is finally working in vs2015. Some of my projects already reaching vs2015, but mostly vs2010, vs2012, vs2013. vs2015 is a brand new vs which still have some of drawbacks.
-- Works only starting from vs2015.
-- warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib
linkoptions { ""/IGNORE:4099"" }",True,{}
premake/premake-core,https://github.com/premake/premake-core,525,2016-06-22T19:13:32Z,2016-08-17T16:38:52Z,2016-08-17T16:38:55Z,MERGED,True,38,34,6,https://github.com/tvandijck,Adding /Debug:FastLink support for VS2015.,1,[],https://github.com/premake/premake-core/pull/525,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/525,and explicitly handle symbols 'Off',and explicitly handle symbols 'Off',True,{}
premake/premake-core,https://github.com/premake/premake-core,525,2016-06-22T19:13:32Z,2016-08-17T16:38:52Z,2016-08-17T16:38:55Z,MERGED,True,38,34,6,https://github.com/tvandijck,Adding /Debug:FastLink support for VS2015.,1,[],https://github.com/premake/premake-core/pull/525,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/525#issuecomment-236050657,and explicitly handle symbols 'Off',Rebased and updated to just do the FastLink option.,True,{}
premake/premake-core,https://github.com/premake/premake-core,525,2016-06-22T19:13:32Z,2016-08-17T16:38:52Z,2016-08-17T16:38:55Z,MERGED,True,38,34,6,https://github.com/tvandijck,Adding /Debug:FastLink support for VS2015.,1,[],https://github.com/premake/premake-core/pull/525,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/525#issuecomment-236075292,and explicitly handle symbols 'Off',"We should have some tests for this new output, don't want it to get broken. Also, the VS2015 license seems to have expired for AppVeyor? Did you have to provide a license?",True,{}
premake/premake-core,https://github.com/premake/premake-core,525,2016-06-22T19:13:32Z,2016-08-17T16:38:52Z,2016-08-17T16:38:55Z,MERGED,True,38,34,6,https://github.com/tvandijck,Adding /Debug:FastLink support for VS2015.,1,[],https://github.com/premake/premake-core/pull/525,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/525#issuecomment-236221809,and explicitly handle symbols 'Off',"Also, the VS2015 license seems to have expired for AppVeyor? Did you have to provide a license?

I contacted AppVeyor already about that... this is on their end to fix unfortunately...
https://appveyor.tenderapp.com/discussions/problems/5069-the-license-for-visual-studio-has-expired",True,{}
premake/premake-core,https://github.com/premake/premake-core,526,2016-06-30T00:13:24Z,2016-06-30T15:54:34Z,2016-06-30T23:22:26Z,MERGED,True,18,6,1,https://github.com/mendsley,Use cached file attributes during matching,1,[],https://github.com/premake/premake-core/pull/526,https://github.com/mendsley,1,https://github.com/premake/premake-core/pull/526,"When _DIRENT_HAVE_D_TYPE is defined, struct dirent defines a
d_type member that will indicate if the type of the entry. This
saves an expensive syscall for each entry which can really add
up on slow filesystems (such as VirtualBox's shared folder FS).
We use the same logic as do_isfile, and return a 1 when the entry
is not a directory, and a 0 otherwise.
For our large project this reduced the overall stat syscalls from
118,865 to 39,177 and total premake generation time from 59,977ms
to 20,729ms on vboxsf.
See: https://gist.github.com/mendsley/4b56932056d5c231a94d1cdefd15c027","When _DIRENT_HAVE_D_TYPE is defined, struct dirent defines a
d_type member that will indicate if the type of the entry. This
saves an expensive syscall for each entry which can really add
up on slow filesystems (such as VirtualBox's shared folder FS).
We use the same logic as do_isfile, and return a 1 when the entry
is not a directory, and a 0 otherwise.
For our large project this reduced the overall stat syscalls from
118,865 to 39,177 and total premake generation time from 59,977ms
to 20,729ms on vboxsf.
See: https://gist.github.com/mendsley/4b56932056d5c231a94d1cdefd15c027",True,{}
premake/premake-core,https://github.com/premake/premake-core,526,2016-06-30T00:13:24Z,2016-06-30T15:54:34Z,2016-06-30T23:22:26Z,MERGED,True,18,6,1,https://github.com/mendsley,Use cached file attributes during matching,1,[],https://github.com/premake/premake-core/pull/526,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/526#issuecomment-229598633,"When _DIRENT_HAVE_D_TYPE is defined, struct dirent defines a
d_type member that will indicate if the type of the entry. This
saves an expensive syscall for each entry which can really add
up on slow filesystems (such as VirtualBox's shared folder FS).
We use the same logic as do_isfile, and return a 1 when the entry
is not a directory, and a 0 otherwise.
For our large project this reduced the overall stat syscalls from
118,865 to 39,177 and total premake generation time from 59,977ms
to 20,729ms on vboxsf.
See: https://gist.github.com/mendsley/4b56932056d5c231a94d1cdefd15c027",LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,527,2016-06-30T02:41:57Z,2016-06-30T21:54:15Z,2016-06-30T23:22:19Z,MERGED,True,1,1,1,https://github.com/mendsley,Remove extra argument to os.match,1,[],https://github.com/premake/premake-core/pull/527,https://github.com/mendsley,1,https://github.com/premake/premake-core/pull/527,"This value will always be ignored as os.match only takes a single
argument and is not needed to generate correct results.","This value will always be ignored as os.match only takes a single
argument and is not needed to generate correct results.",True,{}
premake/premake-core,https://github.com/premake/premake-core,527,2016-06-30T02:41:57Z,2016-06-30T21:54:15Z,2016-06-30T23:22:19Z,MERGED,True,1,1,1,https://github.com/mendsley,Remove extra argument to os.match,1,[],https://github.com/premake/premake-core/pull/527,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/527#issuecomment-229599228,"This value will always be ignored as os.match only takes a single
argument and is not needed to generate correct results.","LGTM, is this the only place this occurs?",True,{}
premake/premake-core,https://github.com/premake/premake-core,527,2016-06-30T02:41:57Z,2016-06-30T21:54:15Z,2016-06-30T23:22:19Z,MERGED,True,1,1,1,https://github.com/mendsley,Remove extra argument to os.match,1,[],https://github.com/premake/premake-core/pull/527,https://github.com/mendsley,3,https://github.com/premake/premake-core/pull/527#issuecomment-229765538,"This value will always be ignored as os.match only takes a single
argument and is not needed to generate correct results.",It appears to be the only instance. It was discovered while investigating performance of os.match by adding an additional argument to the function.,True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/532,resolve #531,resolve #531,True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/532#issuecomment-231276086,resolve #531,"LGTM, is the nogroups parameter for modules to override the grouping?",True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/532#issuecomment-231329598,resolve #531,"I do remember this logic being in the code‚Äîweird that it get stepped on.
I'm also a bit confused by the purpose of no groups when cfg.linkgroups is already there?",True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/532#issuecomment-231624275,resolve #531,"Well, since I'm removing the function getlinksonly (which was never called incidentally), I figured I should retain that functionality somehow, which is to emit a link line but without the grouping tags in it... maybe that's not useful (I wonder why getlinksonly existed)? I can remove it...?",True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/TurkeyMan,5,https://github.com/premake/premake-core/pull/532#issuecomment-231624802,resolve #531,"is the nogroups parameter for modules to override the grouping?

Sure... sounds good! :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/532#issuecomment-231779887,resolve #531,"Well, since I'm removing the function getlinksonly (which was never called incidentally),

not true.. before this commit we had this code:
function gcc.getlinks(cfg, systemonly)      
        local result = gcc.getlinksonly(cfg, systemonly)
it was introduced in a previous commit to try and reuse as much code as possible between gcc and clang... clang on Mac does not like the linkgroups in xcode 6.0, so we needed it to not be there.
Now, obviously as we moved forward, and found out that it is probably better to allow a user to switch it on/off with a proper API... this kind of got reverted somewhat. I guess when I did make the changes I never really realized that system libs should not be included. Our game builds fine with it, so it never was a problem either...
Your changes however look fine to me, we should probably merge it, as it gets us back closer to the original, while still maintaining the new linkgroups api... so that will be sufficient for our use-cases.",True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/532#issuecomment-232347890,resolve #531,Where are we at with this one? Safe to merge?,True,{}
premake/premake-core,https://github.com/premake/premake-core,532,2016-07-08T04:37:14Z,2016-07-14T15:58:31Z,2016-07-14T15:58:31Z,MERGED,True,8,16,2,https://github.com/TurkeyMan,Rearranged --start-group --end-group to enclose only the user libs.,1,[],https://github.com/premake/premake-core/pull/532,https://github.com/TurkeyMan,8,https://github.com/premake/premake-core/pull/532#issuecomment-232547879,resolve #531,I think that was an LGTM from tom?,True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/536,"Coerced result to a string, as the old behaviour did.
fixes #535","Coerced result to a string, as the old behaviour did.
fixes #535",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/536#issuecomment-231680431,"Coerced result to a string, as the old behaviour did.
fixes #535","LGTM, my only concern is that this functionality might be expected elsewhere? @starkos and @tvandijck should probably look at this before it's merged in, just so we avoid anymore issues with it. :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/536#issuecomment-231777825,"Coerced result to a string, as the old behaviour did.
fixes #535","the problem is... we're going back and forth about these things....
The question is, is this ""broken functionality"" or a ""broken usage pattern""... I think in this particular case the root cause is that %{cfg.platform} returns nil, which is in my opinion correct, since cfg.platform in the table is actually nil if you don't set the platform, just like any other value will be nil if you don't specify it. (It is easy to adjust for without needing this fix by using ""%{cfg.platform or ''}""
This fix in my opinion breaks consistency, since it is returning a value that is not a true representation of what is actually in the configuration... In addition, if an API is a table or list... but is not set, then this fix will return an emtpy string instead of an empty table.. so that too is inconsistent.
just my $0.02 I guess.",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/536#issuecomment-231784102,"Coerced result to a string, as the old behaviour did.
fixes #535","(It is easy to adjust for without needing this fix by using ""%{cfg.platform or ''}""

I think that since the tokens are intended to be used inline within a string, they should return an empty string if not set, a totally reasonable default value. Especially since the alternative is a crash!
Note that the value will still be nil while the token is being evaluated, so you can provide a different default if you like, i.e. this works even with the empty string default:
 ""%{cfg.platform or 'Native'}""


LGTM, my only concern is that this functionality might be expected elsewhere?

If you are accessing cfg.platform directly in code, I think it is reasonable to expect that it might be nil, and to handle it there. I don't think anyone will be surprised by this behavior.",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/536#issuecomment-231786508,"Coerced result to a string, as the old behaviour did.
fixes #535","Especially since the alternative is a crash!

Isn't that desirable though, instead of having phantom values and no error message to figure out where it came from. I know on my end I fixed a ton of incorrect token issues...",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/TurkeyMan,6,https://github.com/premake/premake-core/pull/536#issuecomment-231943808,"Coerced result to a string, as the old behaviour did.
fixes #535","The question is, is this ""broken functionality"" or a ""broken usage pattern""...

I argued on this with Sam too. We could have that discussion, but the problem is, the change in behaviour broke every single one of our in-the-wild scripts. I think a change that subtly crashes end-users scripts needs very strong reason. I don't think %{cfg.platform} is an uncommon pattern, it appears in directory/output names constantly. I'm actually surprised it doesn't appear anywhere within premake-core, but it certainly appears in basically every premake script I've ever written.
The source of this problem came as a big surprise to me. It took me and Sam quite a while to isolate the cause. Most users would not be able to track it down short of trial-and-error.
My 2c is that most premake users probably aren't Lua programmers. Pushing %{cfg.platform or ''} to the end user seems a bit rough to me. Most probably think of it more like looking up an environment variable, I doubt most users realise you can write executable lua expressions in the %{ }.
I've always worked under the assumption that the majority of users don't realise they're writing Lua code at all. Simple Premake scripts look more like some custom declarative language (ie, by omitting parens everywhere), and we recommend indentation patterns that break sensible lua indentation rules.
I agree with @starkos; these are string tokens intended to be embedded in strings. If nil isn't coerced to '', we crash. I don't think writing a string literal should be able to crash.

Isn't that desirable though, instead of having phantom values and no error message to figure out where it came from. I know on my end I fixed a ton of incorrect token issues...

A crash occurring from inside a string literal is not something I think end-users would/should expect.
I'm not sure what you mean by 'phantom' values? Can you give some examples that you fixed where you think this behaviour was a problem?",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/536#issuecomment-232150754,"Coerced result to a string, as the old behaviour did.
fixes #535","I'm not sure what you mean by 'phantom' values? Can you give some examples that you fixed where you think this behaviour was a problem?

I think he means typos in the symbols, i.e. ""%{cfg.pltform}"" would fail silently.
There are pros and cons to each side, FWIW I'm in the default-value-don't-crash camp.",True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/TurkeyMan,8,https://github.com/premake/premake-core/pull/536#issuecomment-232548813,"Coerced result to a string, as the old behaviour did.
fixes #535",So... this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,536,2016-07-11T07:13:54Z,2016-07-14T16:01:32Z,2016-07-14T16:01:32Z,MERGED,True,2,1,1,https://github.com/TurkeyMan,Fix regression in expandtoken,1,[],https://github.com/premake/premake-core/pull/536,https://github.com/starkos,9,https://github.com/premake/premake-core/pull/536#issuecomment-232710266,"Coerced result to a string, as the old behaviour did.
fixes #535","Okay, I merging this to at least get things back to where they were, and not crashing

I know on my end I fixed a ton of incorrect token issues...

I seem to recall adding a flag to treat deprecated API usage as an error, to help someone weed out the old calls. I don't recall if that got merged into core or not. We could do something similar to cause nil tokens to print a warning, so you would at least have a list you scan to help pin down issues like that?",True,{}
premake/premake-core,https://github.com/premake/premake-core,538,2016-07-12T12:48:57Z,2016-08-25T15:09:00Z,2016-08-25T15:09:00Z,CLOSED,False,19,20,2,https://github.com/nmoehrle,Fix path normalization for URLs,1,[],https://github.com/premake/premake-core/pull/538,https://github.com/nmoehrle,1,https://github.com/premake/premake-core/pull/538,This is a possible solution for #537,This is a possible solution for #537,True,{}
premake/premake-core,https://github.com/premake/premake-core,538,2016-07-12T12:48:57Z,2016-08-25T15:09:00Z,2016-08-25T15:09:00Z,CLOSED,False,19,20,2,https://github.com/nmoehrle,Fix path normalization for URLs,1,[],https://github.com/premake/premake-core/pull/538,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/538#issuecomment-232051215,This is a possible solution for #537,"I don't think this is the correct solution to the problem, look into #320 for the preferred solution. It needs some fixes, but it's pretty much good to go.",True,{}
premake/premake-core,https://github.com/premake/premake-core,538,2016-07-12T12:48:57Z,2016-08-25T15:09:00Z,2016-08-25T15:09:00Z,CLOSED,False,19,20,2,https://github.com/nmoehrle,Fix path normalization for URLs,1,[],https://github.com/premake/premake-core/pull/538,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/538#issuecomment-240756845,This is a possible solution for #537,"@samsinsane if this is not the right fix, should we close it?",True,{}
premake/premake-core,https://github.com/premake/premake-core,538,2016-07-12T12:48:57Z,2016-08-25T15:09:00Z,2016-08-25T15:09:00Z,CLOSED,False,19,20,2,https://github.com/nmoehrle,Fix path normalization for URLs,1,[],https://github.com/premake/premake-core/pull/538,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/538#issuecomment-240902025,This is a possible solution for #537,"Potentially, it depends on whether @nmoehrle wants to fix this up or not.",True,{}
premake/premake-core,https://github.com/premake/premake-core,538,2016-07-12T12:48:57Z,2016-08-25T15:09:00Z,2016-08-25T15:09:00Z,CLOSED,False,19,20,2,https://github.com/nmoehrle,Fix path normalization for URLs,1,[],https://github.com/premake/premake-core/pull/538,https://github.com/nmoehrle,5,https://github.com/premake/premake-core/pull/538#issuecomment-242408281,This is a possible solution for #537,Sorry for the mess I am in the process of cleaning it up...,True,{}
premake/premake-core,https://github.com/premake/premake-core,539,2016-07-13T12:58:54Z,2016-07-14T02:46:20Z,2016-07-22T13:54:24Z,MERGED,True,3,86,2,https://github.com/starkos,"Revert ""Add generated files to vxcproj file.""",1,[],https://github.com/premake/premake-core/pull/539,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/539,"This reverts commit a2170a4.
See this discussion here on why we're rolling it back (and why we need more people to help us shake it out and get it merged again).","This reverts commit a2170a4.
See this discussion here on why we're rolling it back (and why we need more people to help us shake it out and get it merged again).",True,{}
premake/premake-core,https://github.com/premake/premake-core,541,2016-07-14T02:30:11Z,2016-07-19T06:41:50Z,2016-07-19T06:41:50Z,CLOSED,False,2,0,1,https://github.com/TurkeyMan,symbols 'off' didn't work,1,[],https://github.com/premake/premake-core/pull/541,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/541,"It turns out that symbols ""off"" just left symbols in the default state, which in VS, is on.","It turns out that symbols ""off"" just left symbols in the default state, which in VS, is on.",True,{}
premake/premake-core,https://github.com/premake/premake-core,541,2016-07-14T02:30:11Z,2016-07-19T06:41:50Z,2016-07-19T06:41:50Z,CLOSED,False,2,0,1,https://github.com/TurkeyMan,symbols 'off' didn't work,1,[],https://github.com/premake/premake-core/pull/541,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/541#issuecomment-233545401,"It turns out that symbols ""off"" just left symbols in the default state, which in VS, is on.",Closed in favour of #544,True,{}
premake/premake-core,https://github.com/premake/premake-core,543,2016-07-17T17:50:58Z,2016-08-18T15:11:21Z,2016-08-18T15:11:21Z,MERGED,True,41,2,2,https://github.com/noresources,do not add architecture-dependent library directories on macOS,2,[],https://github.com/premake/premake-core/pull/543,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/543,fix issues #473 and #303,fix issues #473 and #303,True,"{'THUMBS_UP': ['https://github.com/G07cha', 'https://github.com/tritao']}"
premake/premake-core,https://github.com/premake/premake-core,543,2016-07-17T17:50:58Z,2016-08-18T15:11:21Z,2016-08-18T15:11:21Z,MERGED,True,41,2,2,https://github.com/noresources,do not add architecture-dependent library directories on macOS,2,[],https://github.com/premake/premake-core/pull/543,https://github.com/noresources,2,https://github.com/premake/premake-core/pull/543#issuecomment-234784817,fix issues #473 and #303,@G07cha I just tried your suggestion and it seems that config.mapFlags does not accept functions at this level,True,{}
premake/premake-core,https://github.com/premake/premake-core,543,2016-07-17T17:50:58Z,2016-08-18T15:11:21Z,2016-08-18T15:11:21Z,MERGED,True,41,2,2,https://github.com/noresources,do not add architecture-dependent library directories on macOS,2,[],https://github.com/premake/premake-core/pull/543,https://github.com/G07cha,3,https://github.com/premake/premake-core/pull/543#issuecomment-234786203,fix issues #473 and #303,"@noresources okay then, I'm new to Lua so that was just my guess. Looks good then, can't wait until it's will be merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,543,2016-07-17T17:50:58Z,2016-08-18T15:11:21Z,2016-08-18T15:11:21Z,MERGED,True,41,2,2,https://github.com/noresources,do not add architecture-dependent library directories on macOS,2,[],https://github.com/premake/premake-core/pull/543,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/543#issuecomment-234906810,fix issues #473 and #303,Can you please write some tests to go with this change? It would be good to not break this in the future.,True,{}
premake/premake-core,https://github.com/premake/premake-core,543,2016-07-17T17:50:58Z,2016-08-18T15:11:21Z,2016-08-18T15:11:21Z,MERGED,True,41,2,2,https://github.com/noresources,do not add architecture-dependent library directories on macOS,2,[],https://github.com/premake/premake-core/pull/543,https://github.com/noresources,5,https://github.com/premake/premake-core/pull/543#issuecomment-236010791,fix issues #473 and #303,Tests added.,True,{}
premake/premake-core,https://github.com/premake/premake-core,543,2016-07-17T17:50:58Z,2016-08-18T15:11:21Z,2016-08-18T15:11:21Z,MERGED,True,41,2,2,https://github.com/noresources,do not add architecture-dependent library directories on macOS,2,[],https://github.com/premake/premake-core/pull/543,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/543#issuecomment-240692525,fix issues #473 and #303,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,544,2016-07-19T06:38:14Z,2016-07-19T15:18:48Z,2016-07-19T15:18:49Z,MERGED,True,137,48,23,https://github.com/TurkeyMan,"symbols api introduced and working, with tests.",1,[],https://github.com/premake/premake-core/pull/544,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/544,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,544,2016-07-19T06:38:14Z,2016-07-19T15:18:48Z,2016-07-19T15:18:49Z,MERGED,True,137,48,23,https://github.com/TurkeyMan,"symbols api introduced and working, with tests.",1,[],https://github.com/premake/premake-core/pull/544,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/544#issuecomment-233549755,,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/545,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/545#issuecomment-234663163,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","OK, so I fixed two bugs in this change...

object files or other 'linkable' files are no longer added.
turns out files in the _.files table are absolute paths, so what ended up happening is that in some cases files got added twice, and paths were 'resolved' with 'getrelative' twice... which obviously breaks in all kinds of ways..
also, I now always mark the file as 'generated' and setup the dependency, regardless of whether the file was added by this method, or already added by the normal 'files {....}' keyword.

if anyone that had trouble with this stuff could try things out, give feedback, test it... suggestions.. post them here... be blunt ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/545#issuecomment-234719485,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Thanks, Tom! I have a good project tree to use for testing this, but I need to get it caught up to the latest master branch. I'll be working on that this week and will try to get feedback to you ASAP.
It sounds like I was seeing different issues than Manu & Sam though, so hopefully they will chime in as well.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,4,https://github.com/premake/premake-core/pull/545#issuecomment-234868446,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Hi,
What about introducing a few api commands to control those mechanisms ? As I see it, 2 commands would be perfect : one that defines the output folder for those files. It can be optional, in which case the default one would be used. But I think letting the user choose where he/she wants to put his/her generated files is important.
And the second would be a command to tell Premake to explicitly add the generated files. Without this, at least my addon won't be able to work properly since I need to take over the generated files. And also from my experience, it's always better to be explicit than implicit, even if it adds a bit of verbosity.
Does it seem reasonable ?",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/545#issuecomment-234913094,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","It sounds like I was seeing different issues than Manu & Sam though, so hopefully they will chime in as well.

I don't really know that much about the issue, my project doesn't generate files like Manu's does. I'll give him a nudge to comment on this tomorrow so it doesn't get held up for too long. I think most of his issues are covered by @dcourtois though, but I'll get him to verify this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/545#issuecomment-234995517,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","As I see it, 2 commands would be perfect : one that defines the output folder for those files.

buildoutputs already defines where the outputs go, I don't modify that in any way.

And the second would be a command to tell Premake to explicitly add the generated files.

we can definitely switch this on/off. We actually used to have that here, and that caused quite a discussion here as well... people thought is was confusing, didn't have clear behavior, etc..
if anyone has a good name for this, I can certainly add that...
we had it as ""buildoutputsasinputs"", but this is a flag that would only affect Visual Studio, since in Xcode this is already automatic, and that is very little you can do about that. Hence I opted for similar behavior in Visual Studio.

Without this, at least my addon won't be able to work properly since I need to take over the generated files

With my latest changes, if the generated files already exist in the files table, all I do is set the 'generated' flag and the 'dependson' flag... no other changes to the file tree are made. The ""dependson"" behavior is something we could potentially turn on/off, since that really only has a visual effect in the Solution Explorer, which may not always be desirable. The 'generated' flag has no functional effect on the visual studio solution.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/545#issuecomment-235014743,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","And the second would be a command to tell Premake to explicitly add the generated files.

Couldn't your module just scan the list of files for those marked with the generated flag?",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,8,https://github.com/premake/premake-core/pull/545#issuecomment-235199351,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Edit: I'm stupid, I forgot to uncomment some testing I did on my module (I disabled the part of the module which adds the generated files) thus the Generated files not appearing with the new Premake version. Please see at the end of the message for the updated result.
Hi, I've integrated this pull request in my repository to check how it behaves. Here are a quick result, taken from one of my projects. The project uses my Qt module to handle Qt specific files (*.qrc, and *.h that need to run through the moc precompiler, all of which generating compilable files) It also uses a few custom rules which don't generate compilable files.
Here is how it appears before, and after the PR :


Notice the qmldir file : it's added through the files command, but it doesn't generate any compilable files, it's just copied to the output folder. After the PR, qmldir is duplicated, and the Generated folder is no longer created. Here is a link to the project (rename one of the 2 Premake executables at the root level, or copy you own if you want to test) :
MediaViewer.zip
I will try to see what's happening today, and report back here.
Edit: Here is how the generated solution looks with the PR and my module :

MediaViewerLib project doesn't load because of the following error : The item ""..\..\Output\obj\MediaViewerLib\Debug\x32\moc_MediaViewerLibPlugin.cpp"" already exists under the filter """".
Going back to my tests !",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,9,https://github.com/premake/premake-core/pull/545#issuecomment-235223638,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Ok, I think I know why the generated files get added twice : if I log the files in the original oven.bakeFiles function, all files are using an absolute path with slash path separators. But if I log filename in the addGeneratedFile function (line 65 in vs2010_vcxproj.lua some files (the ones which have buildoutputs) use absolute paths, but with backslashes, and some other (the ones added by my module) use relative paths, with slashes.
This is why the addGeneratedFile is not capable of detecting already generated files correctly. I will investigate further to see why this is happening.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,10,https://github.com/premake/premake-core/pull/545#issuecomment-235256316,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Ok, so I have an almost working solution. A part of the solution is fixing the addGeneratedFile function :
            if not node then
                node = fileconfig.new(filename, cfg.project)
                files[filename] = node
                table.insert(files, node)

                -- use a default vpath if there wasn't a user provided one
                if not node.vpath then
                    node.vpath = path.join(""Generated"", node.name)
                end

                -- add to config.
                fileconfig.addconfig(node, cfg)
            end

            node.dependsOn = source
            node.generated = true

In my case, it was the call to fileconfig.addconfig(node, cfg) that was causing problems. Also, I don't know what dependsOn is, but it feels really close to what the buildinputs api command does. Isn't it redundant ?
The other part of the fix was making my module generate buildoutputs with absolute paths that match the paths used in oven.bakeFiles (e.g. absolute and slash separator) to the test if not node then works correctly.
That leads me to think that it's not the most robust way of doing this test as buildoutputs is entirely up to the users.
Finally, there is one remaining problem with this function : if the output file path contains specials paths (like $(TargetDir), etc.) then the file gets added twice. For instance, I have this rule in my project :
    -- copy the qmldir file to the target dir
    filter ""files:**/qmldir""
        buildmessage ""Deploying %{file.name}""
        -- I need to convert this to the new copy tokens
        buildcommands { ""copy \""%{file.relpath:gsub('/', '\\')}\"" \""%{cfg.buildtarget.directory:gsub('/', '\\')}\\%{file.name}\"""" }
        buildoutputs { ""%{cfg.buildtarget.directory}/%{file.name}"" }

which generates the following output filename : $(TargetDir)/qmldir. Which obviously fails the test in addGeneratedFile, so it's added again.
I don't have any easy fix for this last problem though ...",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,11,https://github.com/premake/premake-core/pull/545#issuecomment-235293609,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","What is the reason for the ""Generated"" vpath again? We normally use the source file's file system location as the default path within the project tree; is there a reason that we can't do the same for generated files?",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,12,https://github.com/premake/premake-core/pull/545#issuecomment-235296896,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","I guess that it was to cleanup the project tree : usually the output of precompilers are sent to some folder outside the source tree to avoid recursive inclusion (if you have files { Sources } and generate other files into Sources, next time you run Premake, you end up with a big problem :p) or various other problems.
And doing so usually result in some pretty uggly filter hierarchy in Visual Studio (XCode too probably)
And since vpaths only works on files added through the use of files, adding one in the default addGeneratedFile is probably the only easy way to do that for generated files.
(that's speculations based on the problems I encountered when writing my modules)",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,13,https://github.com/premake/premake-core/pull/545#issuecomment-235321133,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Thanks for the test case, I'll have a look at it as well....
Anyway, as for the relative paths vs absolute paths in buildoutputs... those are actually required to be absolute paths. this is how it is processed in vs2010_vcxproj.lua... if those paths are relative, then they are going to be 'double' relative after this function.... When your project happens to be generated in exactly the same folder as the lua file, this always ends up being exactly the same answer, but if you specify that the vcxproj goes to a completely different folder, this may completely break.
function m.buildOutputs(fcfg, condition)
    local outputs = project.getrelative(fcfg.project, fcfg.buildoutputs)
    m.element(""Outputs"", condition, '%s', table.concat(outputs, "";""))
end

same is absolutely true for the _.files table in prj... files in that table should all be absolute paths, and using forward slashes.. if not, other things in premake will actually break as well...
buildoutputs containing ""$(somemacro)"" or ""%(somemacro)"", we should probably just exclude those, and just not add those... it can't work, even visual studio doesn't know what to do with it. Ultimately the best way to solve this would be using a custom props/target file, and actually do the processing of the compiled output in msbuild, and not let premake try to figure it out if that pattern is a requirement. Using the ""custom rules"" you can already accomplish that actually..",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,14,https://github.com/premake/premake-core/pull/545#issuecomment-235322678,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","buildoutputs { ""%{cfg.buildtarget.directory}/%{file.name}"" }
which generates the following output filename : $(TargetDir)/qmldir.
that is because we allow the vcxproj action to replace tokens with visual studio tokens..
if you wrote:
buildoutputs { ""%{ cfg.buildtarget.directory}/%{ file.name}"" }
you don't actually get that, and premake will just resolve the path for you.
from a project point of view absolutely no difference, just not as 'pretty' I guess..
Personally I prefer the premake tokens to just resolve, and not use magic visual studio tokens, but that is obviously entirely a personal preference. For the purpose of the 'addGeneratedFiles' however we could just 'resolve' those tokens..",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,15,https://github.com/premake/premake-core/pull/545#issuecomment-235324125,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","The other suggestion that @starkos made was to do the ""addGeneratedFiles"" part in the oven instead of in the action... which might make it easier to resolve the absolute/relative paths a little easier maybe?",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,16,https://github.com/premake/premake-core/pull/545#issuecomment-235341074,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","if you have files { Sources } and generate other files into Sources, next time you run Premake, you end up with a big problem

Premake ought to be able to figure that out though, shouldn't it? It has all the information it needs to do so, anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,17,https://github.com/premake/premake-core/pull/545#issuecomment-235341348,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.",(‚Ä¶this is why I didn't tackle this feature at the time‚Ä¶decidedly non-trivial‚Ä¶many thanks for taking it on!),True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,18,https://github.com/premake/premake-core/pull/545#issuecomment-235509825,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Isn't it possible to modify the buildoutputs command to always store absolute paths using forward slashes, if this is the correct behavior anyways ? That would prevent user from unintentionally using backward slashes, or relative paths, and solve the problem of the tokens.
Maybe moving the addGeneratedFiles logic to the oven could work to, but I have the feeling that it would be harder to ensure it works well with modules that override stuff in the oven. And you still wouldn't guarantee the users won't use backward slashes or relative paths on buildoutputs, and break things.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,19,https://github.com/premake/premake-core/pull/545#issuecomment-235632896,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","api.register {
        name = ""buildoutputs"",
        scope = { ""config"", ""rule"" },
        kind = ""list:path"",
        tokens = true,
        pathVars = true,
    }
it should already be that way, because the kind is ""path""... unless I'm misunderstanding how that works.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,20,https://github.com/premake/premake-core/pull/545#issuecomment-235825392,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","it should already be that way

It is currently resolving tokens, replacing cfg.buildtarget.directory by $(TargetDir), which is what makes thing break.
What I meant was : if we prevent this behavior (replacing tokens by vs macros) and just replace the token by the absolute path, then everything will work. But I realize that it's not a good idea.
Instead, what about checking for those macros in the addGeneratedFile function ? Something along the lines of :
    -- at the beginning of addGeneratedFile
    filename = vstudio.expandMacros(filename)
with vstudio.expandMacros looking something like this :
    function vstudio.expandMacros(str)
        for token, value in pairs(vstudio.pathVars) do
            -- I don't know the detoken part well enough, so I left the parameters empty,
            -- but you get the idea :)
            str = string.gsub(str, value.token, p.detoken.expand(token, ...))
        end
        return str
    end
Edit: noticed the pathVars is used ... in the detoken.expand function, so that my example wouldn't work ... Still trying to find a solution",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,21,https://github.com/premake/premake-core/pull/545#issuecomment-235900217,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Small update : I managed to modify addGeneratedFile so that it will be able to resolve Visual Studio macros such as $(TargetDir), but I then noticed that it doesn't solve my case :

qmldir is included in the project using files { ""**/qmldir"" }, so its path is the absolute path to the source file.
buildoutputs is the result of the copy, so its path is the absolute path of the destination file, which is different from the source one.

addGeneratedFile will add qmldir again :)
So, I see 2 possibilities :

only add ""buildable"" generated files (e.g. compilation units) Potential problem : some projects might need to include non-buildable generated files, for embedding or some other things that I might not be aware of, so I'm not really comfortable with this solution.
make this whole mechanism explicit. Only problem is finding a good name.

I really think the only robust way of handling this would be to have an api command to add generated files explicitly, like @tvandijck had (buildoutputsasinputs it was)",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,22,https://github.com/premake/premake-core/pull/545#issuecomment-235942646,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Yeah, the more I think about this, the more the 'explicit' way appeals to me... the problem is the name. something like ""compilebuildoutputs"" is probably a better name, since it describes what it does. And if we do that, we can easily add this to the oven instead, which would be a lot easier to handle in the xcode/vcxproj/etc backends...",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/dcourtois,23,https://github.com/premake/premake-core/pull/545#issuecomment-236130797,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Tested, and as expected, works fine :) There's just the little concern about the call to fileconfig.addconfig (see my comment) but now everything should behave nicely ! Thanks !",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,24,https://github.com/premake/premake-core/pull/545#issuecomment-242104921,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.",@starkos are you OK merging this one now?? it's now totally optional behavior...,True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,25,https://github.com/premake/premake-core/pull/545#issuecomment-242379100,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Would it be possible to process the object file sequence numbers after the generated files are handled, so we don't have to do it twice? That can be a relative expensive operation in projects with many files.
I think you may have already investigated this, but if compilebuildoutputs is not set at all (nil) would it be possible to look at the outputs of the build rule, and if project.iscpp(prj) and path.iscpp(buildOutput) treat it as if it were set, and add the files to the build? So compilebuildoutput becomes an optional override for the cases where the automatic detection doesn't work?
In the same way, if the build output is linkable, we could add it to the link step.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/tvandijck,26,https://github.com/premake/premake-core/pull/545#issuecomment-242419536,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Would it be possible to process the object file sequence numbers after the generated files are handled, so we don't have to do it twice?

I'll have a look at that... but I believe there was some kind of reason for it... can't remember off the top of my head though.

I think you may have already investigated this, but if compilebuildoutputs is not set at all (nil) would it be possible to look at the outputs of the build rule, and if project.iscpp(prj) and path.iscpp(buildOutput) treat it as if it were set,

certainly an option, although that was mostly what we started with.. Initially I just added any file, and premake will just correctly setup cpp files as ClCompile, and all others as 'None'... I think keeping this behavior explicit is probably wisest at this stage, but I'm open to try other options.

In the same way, if the build output is linkable, we could add it to the link step.

Interestingly, .obj files are already automatically added in visual studio,  it's very inconsistent in my opinion... The behavior of generated files from custom build steps and custom build rules is very inconsistent throughout all the IDE's I've so far encountered (codelite, xcode, vs), the only one that consistently doesn't do anything is make.",True,{}
premake/premake-core,https://github.com/premake/premake-core,545,2016-07-21T21:17:40Z,2016-09-07T15:14:57Z,2016-09-07T15:14:59Z,MERGED,True,101,4,4,https://github.com/tvandijck,Add generated files to vxcproj file.,4,[],https://github.com/premake/premake-core/pull/545,https://github.com/starkos,27,https://github.com/premake/premake-core/pull/545#issuecomment-242422461,"This is the original change list re-applied to HEAD....
Obviously, as per discussion, this thing needs more work before we can merge... but I just wanted to re-open the pull request.","Initially I just added any file, and premake will just correctly setup cpp files as ClCompile, and all others as 'None'... I think keeping this behavior explicit is probably wisest at this stage, but I'm open to try other options.

You're probably right, and I'm probably the one who didn't like the magic behavior in the first place. Disregard my suggestion.",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/546,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/546#issuecomment-242971205,,"This seems like it should be good to merge. Are you able to throw some tests in for HTTPS connections? It doesn't look like we have any, and there have been a number of changes to the HTTP functions which haven't really been verified with any automated tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/546#issuecomment-243174643,,"I will add tests, the problem is that this is still considered behavior we can disable with the --no-http build option... so I got to figure out how to make these tests optional or something, but I will certainly do that this week..",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tritao,4,https://github.com/premake/premake-core/pull/546#issuecomment-243182292,,We could just permanently enable the HTTP support. Is there any one who actually needs Premake builds without HTTP support?,True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/ratzlaff,5,https://github.com/premake/premake-core/pull/546#issuecomment-243226969,,"@tritao Where I work, we can only use the version of premake compiled without http support.",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tritao,6,https://github.com/premake/premake-core/pull/546#issuecomment-243256456,,@ratzlaff I see. Any specific technical reason?,True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/546#issuecomment-243271768,,"I think one of the reasons I've seen posted here before is that on different versions of linux different versions of libssl were linked in, and it would cause load failures saying things like ""unable to load libssl.6.1.so"" or something along those line... For example when you build premake on centos 5, and then try to use it on centos 7, it won't work because of OpenSSL.
This commit would actually fix that, since mbedtls is linked statically..
but there could be other reasons obviously...",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/TurkeyMan,8,https://github.com/premake/premake-core/pull/546#issuecomment-243284456,,That's the reason for us. We just need to change the link to use a less-specific lib though and that should be fine.,True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/ratzlaff,9,https://github.com/premake/premake-core/pull/546#issuecomment-243284822,,"@tritao our IT department is concerned with a number of things relating to approving third-party tools. A couple of items that they check for are:

is there a tool already approved that performs the same function.

has not been an issue. CMake is not widely used here - there are a number of hand crafted makefiles still in use


does it utilize network connections

has not been an issue because of --no-http



If premake were to start requiring the curl (and the associated ssl library), I would have to provide justification that a 'makefile generation tool' needs to make https connections.
For example:
notepad++ is approved because they permanently disabled the 'Update automatically' feature.
They configured a special setup.exe for installing cygwin that only downloads cygwin packages off of the shared network folders.",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tritao,10,https://github.com/premake/premake-core/pull/546#issuecomment-243376648,,"Makes sense, thanks for explanation. Then I guess getting rid of the option is out of question since some folks need it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/starkos,11,https://github.com/premake/premake-core/pull/546#issuecomment-243404396,,"I got to figure out how to make these tests optional or something

Wrap them in a if http.get ~= nil then ‚Ä¶ end block?
Also‚Äîgreat feedback everyone, thanks so much for keeping an eye on these issues, and for speaking up.",True,{}
premake/premake-core,https://github.com/premake/premake-core,546,2016-07-21T21:30:26Z,2016-09-01T00:25:09Z,2016-09-01T00:25:11Z,MERGED,True,173106,6721,924,https://github.com/tvandijck,Update curl and use mbedtls instead of openssl.,3,[],https://github.com/premake/premake-core/pull/546,https://github.com/tvandijck,12,https://github.com/premake/premake-core/pull/546#issuecomment-243546040,,Added tests...,True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/547,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/547#issuecomment-234420404,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"I did not do LUA, because it seems that there is actual local changes specific to premake to lua itself... in particular the lua_pclose method has been modified... I never actually noticed this before, and we have internally upgraded to lua 5.3.2, and just have used it without modification...
Not sure what the purpose of those changes are, and why we need them... a discussion for another day.",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/547#issuecomment-234519082,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"Not sure what the purpose of those changes are, and why we need them

Lua's pclose did not return the command result to the caller previously, with this modification it does. If you don't use that feature, you wouldn't notice.
The biggest changes though are in host/lua_auxlib.c, where we replace luaL_loadfile() and do a bunch of magic to enable the script search paths, running embedded scripts, the _SCRIPT global, and so on. Pretty sure Premake won't run without that stuff.
Update: ‚Ä¶but the way we apply the changes to luaL_loadfile()‚Äîby including the original file and redefining its symbols rather than modifying it‚Äîmeans that it will work just fine with Lua as a submodule. So we would only have to figure out the popen stuff.",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/547#issuecomment-234584048,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"I think we could similarly 'patch' the pclose btw... instead of modifying the code... just let the io.pclose point to our replacement... I think that would also work better in cases where people (like us) do upgrade to a later version of lua...
There where a bunch of other changes however... so to just sum up everything significant I'm seeing against the 5.1.4 tag in the lua/lua repository:

In lauxlib.c on line 86, there is

#ifdef _MANAGED
    #pragma managed(push, off)
#endif
added around luaL_error. I think this is just legacy against an old version of Visual Studio.

In liolib.c on line 108, there is the modified io_pclose.
I think we can accomplish this by overriding it, rather then modifying it.
In luaconf.h there is a bunch of macros that are defined in git, but undefined in premake.

line 336: #undef LUA_COMPAT_VARARG
line 343: #undef LUA_COMPAT_MOD
line 358: #undef LUA_COMPAT_GFIND
line 366: #undef LUA_COMPAT_OPENLIB
Then on line 671, we have a couple of pclose related macros that have been modified.
That's it as far as I can tell...",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/547#issuecomment-234615375,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"I think we could similarly 'patch' the pclose btw... instead of modifying the code

That would be great! But I think we had to modify the code to make it return the command result, because it wasn't available to the Lua environment at all. Note that it is possible that this was changed in Lua 5.2 or 5.3, and might be a reason for an upgrade if it helps maintainability.",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/547#issuecomment-234623229,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"OK, I will investigate once I get this working on linux & mac and this is merged..
is there a unit-test for this behavior of pclose?",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/547#issuecomment-234625457,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"is there a unit-test for this behavior of close?

I didn't see one in a quick search of the code",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/547#issuecomment-234652886,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"OK, latest commit fixes things for linux/mac and win32, should be safe to merge if this is what we want...
Lua, can be done later...",True,{}
premake/premake-core,https://github.com/premake/premake-core,547,2016-07-22T00:04:45Z,2016-08-24T00:54:08Z,2016-08-24T00:54:13Z,CLOSED,False,197,140024,385,https://github.com/tvandijck,Contrib libraries as submodules.,3,[],https://github.com/premake/premake-core/pull/547,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/547#issuecomment-241927386,DO NOT MERGE YET..... I've only tested this on windows... not on linux & mac yet.,"Not liking this change at all.... we should merge the autoconf first, and fix the libzip/curl libraries to correctly use it... then we can revisit this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,549,2016-07-22T14:09:13Z,2016-07-22T16:03:14Z,2016-08-09T12:01:10Z,MERGED,True,5,2,1,https://github.com/starkos,Put back the old Symbols flag in premake5.lua,1,[],https://github.com/premake/premake-core/pull/549,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/549,"Using brand new APIs in the premake5.lua script prevents people from regenerating the project files while running an older version of Premake. We need to give everyone a chance to get caught up before we use these new APIs in the build scripts.
Roll back to the old flags { ""Symbols"" } approach while we let the new symbols() API settle.","Using brand new APIs in the premake5.lua script prevents people from regenerating the project files while running an older version of Premake. We need to give everyone a chance to get caught up before we use these new APIs in the build scripts.
Roll back to the old flags { ""Symbols"" } approach while we let the new symbols() API settle.",True,{}
premake/premake-core,https://github.com/premake/premake-core,549,2016-07-22T14:09:13Z,2016-07-22T16:03:14Z,2016-08-09T12:01:10Z,MERGED,True,5,2,1,https://github.com/starkos,Put back the old Symbols flag in premake5.lua,1,[],https://github.com/premake/premake-core/pull/549,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/549#issuecomment-234584592,"Using brand new APIs in the premake5.lua script prevents people from regenerating the project files while running an older version of Premake. We need to give everyone a chance to get caught up before we use these new APIs in the build scripts.
Roll back to the old flags { ""Symbols"" } approach while we let the new symbols() API settle.","LGTM, makes sense.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/550,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/550#issuecomment-234690067,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","I originally made this as a module, but premake5 itself with the inclusion of curl & libzip should really use this facility to stay portable across multiple platforms, rather then just x86/x86_64 and a super recent version of ubuntu.. Some of the 'hard-coded' configs in curl and libzip are just flat out wrong for many operating systems and platform.. (centos5, arm, iphone, etc).",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/tritao,3,https://github.com/premake/premake-core/pull/550#issuecomment-234711564,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","I've always wished something like this on Premake, it might be the only feature I miss in comparison to other tools like CMake. The only suggestion I have at the moment is that maybe the code could figure out the defines name (ie HAVE_STDIO_H) automatically from the includes and type names (iirc Autotools works like that by default).",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/550#issuecomment-234719312,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","My resistance to this feature has definitely softened, on the condition that is only an available feature, and not a required part of Premake's workflow.
I still hate (not too strong a word here) it when developers default to autoconf-style testing instead of just looking at the perfectly good flags provided by the compiler. Curl and zlib are no exception; pretty much all of those switches could be easily deduced without autoconf, but it would be a lot of work at this point to fix them all. Boo.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/550#issuecomment-234989953,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","Yeah, I'm definitely with you on that @starkos.... in my curl/libzip/zlib -> submodule patch, you see I basically just handcrafted a config.h that does just that.... However, there is a few you can't reliably create defines for... the SIZEOF_SIZE_T for example, you can't really do it with defines, although you can get very far with detecting for 32-bit vs 64-bit and assume that sizeof(size_t) is sizeof(void*), but this is unfortunately on some weird platform not always the case.
And the same is true for checking the existance of a header file... it just can't be done without autoconf... But I agree that in many cases code written that relies on autoconf is just unneeded...
in the case of libzip & curl, I simply don't get why a define like SIZE_OF_SIZET is even needed.. just define your own types like zlib does, and know the sizes...
That said, this PR needs work, I somewhat followed the 'CMake' convention, i.e. not trying to automatically figure out define names, as @tritao suggests... however, I can go in any direction, and I would really like to see suggestions, and maybe even PR's on this pull request for further improvements before we consider merging this into master.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/550#issuecomment-234991461,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","On other thing is that this will just generate a header file with all defines you ever checked for in that configuration... just a flat list of everything... tools like autoconf/cmake actually take an input file and transform it, only outputting those defines that are in a particular ""file.h.in"". I didn't bother with that really, but if something like that is desired, someone else could possibly add that as far as I'm concerned.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/data-man,7,https://github.com/premake/premake-core/pull/550#issuecomment-242880815,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","Very useful PR, thank you!
Just an idea: save/load a cache to/from disk.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/550#issuecomment-381705952,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","Not sure where to go with this one. My instinct would be to push back and say it should be packaged as a external module, at least to start?
I'm not opposed to shipping an autoconf script with Premake to help with bootstrapping, if the current bootstrap makefile isn't sufficient.",True,{}
premake/premake-core,https://github.com/premake/premake-core,550,2016-07-23T01:04:25Z,2018-04-17T09:38:15Z,2018-04-17T09:38:15Z,CLOSED,False,457,0,9,https://github.com/tvandijck,Adding Experimental AutoConfig tools.,1,[],https://github.com/premake/premake-core/pull/550,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/550#issuecomment-381922750,"Allows you to do stuff like:
    autoconfigure {
        ['config.h'] = function (cfg)
            check_include(cfg, 'HAVE_STDIO_H', 'stdio.h')
            check_include(cfg, 'HAVE_FOOBAR_H', 'foobar.h')

            check_type_size(cfg, 'SIZEOF_SIZE_T', 'size_t')
        end
    }
which will generate a 'config.h' file with:
#define HAVE_STDIO_H 1
#define HAVE_SIZEOF_SIZE_T 1
#define SIZEOF_SIZE_T 8
on most 64bit platforms.","I think I already published it as a module at some point.
https://github.com/Blizzard/premake-autoconf",True,{}
premake/premake-core,https://github.com/premake/premake-core,553,2016-07-29T17:37:30Z,2016-08-01T21:40:40Z,2016-08-02T15:27:07Z,MERGED,True,9,4,3,https://github.com/tvandijck,"Add support for kind=""list:path"" in rule properties.",1,[],https://github.com/premake/premake-core/pull/553,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/553,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/554,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/554#issuecomment-236330428,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","With the uncached context, we can modify the rules 'executionDescription' method like this:
        if r.buildmessage then
            -- add this rules properties to the environ.
            local env = {}
            for _, def in ipairs(r.propertydefinition) do
                env[def.name] = '%(' .. def.name .. ')'
            end

            -- create shadow context.
            local ctx = p.context.uncached(r, env)

            -- write out the result.
            p.x('<ExecutionDescription>%s</ExecutionDescription>', ctx.buildmessage)
        end
So what this does, is we create a local environment that we provide to the uncached context, effectively overriding the 'environ' of 'r' in this case... Then we add all the propertydefinitions as 'global' accessible variabled into that environment, and use the uncached context to detokenize the buildmessage...
propertydefinition {
    name = ""StripDebugInfo"",
}
buildmessage '%{StripDebugInfo}'

will now correctly resolve to
<ExecutionDescription>%(StripDebugInfo)</ExecutionDescription>",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/554#issuecomment-236330661,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","Then the detoken changes, pretty cool too... some tokens need to be 'detokened' as paths, rather then just variables... so for that we already have the 'action.pathVars'. This change introduces a 'environ.pathVars' as well, which actually has a higher priority then the one in the action... with this change you can thus write:
if #r.buildoutputs then
            -- add this rules pathVars.
            local pathVars = {}
            for _, def in ipairs(r.propertydefinition) do
                pathVars[def.name] = { absolute = true,  token = '%(' .. def.name .. ')' }
            end

            -- create shadow context.
            local ctx = p.context.uncached(r, { pathVars = pathVars })

            -- now use the uncached property to detoken using the new pathVars.
            local outputs = table.concat(ctx.buildoutputs, "";"")

            -- write out the result.
            p.x('<Outputs>%s</Outputs>', path.translate(outputs))
        end
Which will also correctly resolve the tokens within the scope of this method, but also treats the token as an absolute path, removing everything that comes before it...",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/554#issuecomment-236331056,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","And then the last change updating the Visual STudio backend to use these new features.. which now allows you to write rules like this:
rule 'example'
    display 'Example compiler'
    fileExtension '.example'

    propertydefinition {
        name = ""output_path"",
        kind = ""string"",
        display = ""Output Path"",
        description = """",
    }

    buildmessage 'Compiling %{file.basename} with example-compiler...'
    buildcommands {
        'package-example-compiler.exe %{output_path} ""%{file.relpath}""'
    }
    buildoutputs {
        '%{output_path}%{file.basename}.example.cc',
        '%{output_path}%{file.basename}.example.h'
    }
no more Visual Studio native tokens anywhere.....",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/dcourtois,5,https://github.com/premake/premake-core/pull/554#issuecomment-236566201,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","Just noticed the new Custom Rules thing, so not really familiar with all this, but the patch seems fine. Just found a ""print"" that looks like a debug thing (I commented the commit where it is)",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/554#issuecomment-236593823,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...",Looking at this now. First impressions are that an uncached() function seems useful. There might be a better/more general way to do what you're trying to do with the rules. Thinking‚Ä¶,True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/554#issuecomment-236607064,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","It seems like what you're really doing here is not turning off caching so much as creating a new context that extends an existing context with an extended token expansion environment‚Äîthat is definitely useful. We could then use the same pattern to implement the pathVars feature too.
What if instead of context.uncached() it were called something more like context.extend(baseContext, newEnvVars)? The context it returns would still cache results, but would start out empty so any tokens would be re-expanded into the new environment?
This would allow any exporter to provide their own token replacements, in any context, in a pretty straightforward way.
Separately, maybe it would be useful to have a function under rule that can do the property iteration into an environment for you? Maybe something like rule.prepareEnvironment() that takes an env table and either a list of replacement patterns or function telling it expand vars to ""[var]"" or whatever? Then a Makefile rule exporter could maybe use it to expand to ""$(var) instead, possibly maybe.",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/554#issuecomment-236630363,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","It seems like what you're really doing here is not turning off caching so much as creating a new context.

Yes, this change evolved a little since I first wrote the initial comments...
That said however, due to the different metatable assignment, it is also very much 'uncached'. As in it will not store the result of the configset.fetch inside of this 'extended' context..  I very much like the different name you are giving it... so I'll make that change...

This would allow any exporter to provide their own token replacements, in any context, in a pretty straightforward way.

Yes, that is exactly how I'm using it currently for the rules in the Visual Studio action.
I was planning on doing the same in our xcode and gmake backend, so that I no longer have to write individual rules for each platform. It bothered me, and so I tried to come up with a solution, and this is the best I could come up with, and it looks really neat...

Maybe something like rule.prepareEnvironment() that takes an env table and either a list of replacement patterns or function telling it expand vars to ""[var]"" or whatever?

Yeah, any helpers are going to be useful for this for sure... something like:
rule.prepareEnvironment(env, ""[%s]"") 
would probably be perfect, I'll add something like that..
The issue is that not in all cases you want the rules to expand as 'environment' values, but rather as pathvars. pathVars are special in that they are 'post' processed with a 'isAbsolute' pass. environment variables are not... So sometime you want to do:
rule.preparePathVars(pathVars, ""%%(%s)"")

or maybe just
rule.prepareEnvironment(env, ""%%(%s)"", true)",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/554#issuecomment-236631887,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","We could then use the same pattern to implement the pathVars feature too.

I'm actually using that in m.outputs in the vs2010_rules_props.lua
And in all honesty, I actually find this more expressive then the action.pathVars.
In the new gmake backend I've been working on I completely removed the global action pathVars in favor of this context sensitive version.",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/554#issuecomment-236636753,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...",All updated and squashed.,True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/554#issuecomment-236767165,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","There is some minor issues with the visual studio rule stuff, I got fixes here, but I have to apply them to this change list.... so please don't merge this yet...
while this commit works fine in most cases, there is a few cases I hit that make it go boom boom boom.",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,12,https://github.com/premake/premake-core/pull/554#issuecomment-236977335,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","OK, so these latest changes, fixes a few issues with how the custom rules was outputting the ""Outputs"" property. if it is in the props file, it is only computed when that file is loaded. Since this is a property that generally contains other tokens (since it is based on the ""buildoutputs"") it ends up not beeing recomputed if for example you have a ""%(outputdir)"" token in it that is configurable in your rule.
By moving it into the targets file, it gets recomputed when the target is executed.
Anyway, now we're all good to merge as far as I'm concerned.",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/starkos,13,https://github.com/premake/premake-core/pull/554#issuecomment-237305598,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...","I haven't had an opportunity to try this, but I think it looks pretty good. It would be nice to have some unit tests against the issues you were seeing with the old implementation, to make sure we don't regress any of those cases with future changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,554,2016-07-30T00:13:19Z,2016-08-24T00:51:28Z,2016-08-24T00:51:32Z,MERGED,True,347,24,11,https://github.com/tvandijck,Add an 'uncached' sub-context to the context.,3,[],https://github.com/premake/premake-core/pull/554,https://github.com/tvandijck,14,https://github.com/premake/premake-core/pull/554#issuecomment-241578498,"OK, so this is part one of a 2-part feature I'm working on...
What this does, is it allows you to access any property like normal, but uncached...
normally when you ask for a property, for example
local value = cfg.buildoutputs
The buildoutputs will be expanded, and stored in the table. The next time some piece of code asks for the buildoutputs from the same context (cfg in the above example), it'll just return the previously expanded value, without running the detokenizer again...
This PR, will allow you to write:
local ctx = p.context.uncached(cfg)
local value = ctx.buildoutputs
which will neither ask for the 'potentially' already expanded value, not store the result of the expansion. Essentially forcing a detoken anytime you access it this way.
So why do I want this?
Well, the 2nd part of what I'm working on, will allow you to 'add' custom behavior to the detokenizer. For example, in the Custom Rules feature, 'propertydefinitions' currently have no standard way of being references as tokens, and we can't just say
propertydefinition {
    name = ""StripDebugInfo"",
}
buildcommand 'MyCustomCC.exe -c ""%(FullPath)"" -o ""%(IntDir)/%(Filename).obj"" %{StripDebugInfo}'
Instead we've somewhat made this a Visual Studio only feature and use the [StripDebugInfo] token that is native to how visual studio treats props... I however, want to use the premake token syntax, and in this particular case it is context sensitive, for the '.xml' file of the rules it needs to expand to [StripDebugInfo], but in the '.props' file it needs to expand to %(StripDebugInfo).
This means that the 'action.pathVars' needs to be changed depending on who asks the question.
Anyway, all that is for a 2nd PR after this one gets merged...",Added tests... when those pass I'll merge this.,True,{}
premake/premake-core,https://github.com/premake/premake-core,555,2016-08-01T20:40:26Z,2016-08-01T21:41:25Z,2016-08-01T21:41:27Z,MERGED,True,8,7,3,https://github.com/tvandijck,allow multiple extensions for a custom rule.,1,[],https://github.com/premake/premake-core/pull/555,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/555,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,556,2016-08-01T20:41:31Z,2016-08-01T21:39:51Z,2016-08-01T21:39:54Z,MERGED,True,23,0,2,https://github.com/tvandijck,Allow an action to initialize itself before user scripts run.,2,[],https://github.com/premake/premake-core/pull/556,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/556,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,561,2016-08-07T11:44:41Z,2016-08-08T09:50:47Z,2016-08-08T09:50:47Z,MERGED,True,18,0,3,https://github.com/manxorist,"Add vectorextensions ""IA32"" support for VS>=2012 on x86. (#560)",4,[],https://github.com/premake/premake-core/pull/561,https://github.com/manxorist,1,https://github.com/premake/premake-core/pull/561,Fixes #560 .,Fixes #560 .,True,{}
premake/premake-core,https://github.com/premake/premake-core,561,2016-08-07T11:44:41Z,2016-08-08T09:50:47Z,2016-08-08T09:50:47Z,MERGED,True,18,0,3,https://github.com/manxorist,"Add vectorextensions ""IA32"" support for VS>=2012 on x86. (#560)",4,[],https://github.com/premake/premake-core/pull/561,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/561#issuecomment-238175199,Fixes #560 .,"This needs tests so it isn't broken in the future, and I believe you'll also need to update _premake_init.lua to allow for the IA32 value for vectorextensions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,561,2016-08-07T11:44:41Z,2016-08-08T09:50:47Z,2016-08-08T09:50:47Z,MERGED,True,18,0,3,https://github.com/manxorist,"Add vectorextensions ""IA32"" support for VS>=2012 on x86. (#560)",4,[],https://github.com/premake/premake-core/pull/561,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/561#issuecomment-238184933,Fixes #560 .,"Sorry to be a pain, can you add one more test, VS2010 and IA32, ensuring that nothing is emit.
Other than that, LGTM.",True,{}
premake/premake-core,https://github.com/premake/premake-core,561,2016-08-07T11:44:41Z,2016-08-08T09:50:47Z,2016-08-08T09:50:47Z,MERGED,True,18,0,3,https://github.com/manxorist,"Add vectorextensions ""IA32"" support for VS>=2012 on x86. (#560)",4,[],https://github.com/premake/premake-core/pull/561,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/561#issuecomment-238190898,Fixes #560 .,"Wonderful, thanks for that!",True,{}
premake/premake-core,https://github.com/premake/premake-core,562,2016-08-08T10:11:39Z,2016-08-08T10:38:40Z,2016-08-08T10:38:46Z,MERGED,True,1,0,1,https://github.com/manxorist,Add VS2015 project files to release packaging script.,1,[],https://github.com/premake/premake-core/pull/562,https://github.com/manxorist,1,https://github.com/premake/premake-core/pull/562,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,562,2016-08-08T10:11:39Z,2016-08-08T10:38:40Z,2016-08-08T10:38:46Z,MERGED,True,1,0,1,https://github.com/manxorist,Add VS2015 project files to release packaging script.,1,[],https://github.com/premake/premake-core/pull/562,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/562#issuecomment-238197423,,"LGTM, @starkos is there any issues with accepting this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,562,2016-08-08T10:11:39Z,2016-08-08T10:38:40Z,2016-08-08T10:38:46Z,MERGED,True,1,0,1,https://github.com/manxorist,Add VS2015 project files to release packaging script.,1,[],https://github.com/premake/premake-core/pull/562,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/562#issuecomment-238200762,,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,566,2016-08-11T05:50:45Z,2016-08-11T06:13:22Z,2016-08-11T06:13:22Z,CLOSED,False,2,2,2,https://github.com/GabrielMajeri,Fix CodeLite / GCC project generation,2,[],https://github.com/premake/premake-core/pull/566,https://github.com/GabrielMajeri,1,https://github.com/premake/premake-core/pull/566,"This is a fix for #565. It replaces the use of double quotes in ""-Wl,--implib-"" with single quotes. Also edited the test to reflect this.","This is a fix for #565. It replaces the use of double quotes in ""-Wl,--implib-"" with single quotes. Also edited the test to reflect this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,566,2016-08-11T05:50:45Z,2016-08-11T06:13:22Z,2016-08-11T06:13:22Z,CLOSED,False,2,2,2,https://github.com/GabrielMajeri,Fix CodeLite / GCC project generation,2,[],https://github.com/premake/premake-core/pull/566,https://github.com/GabrielMajeri,2,https://github.com/premake/premake-core/pull/566#issuecomment-239081206,"This is a fix for #565. It replaces the use of double quotes in ""-Wl,--implib-"" with single quotes. Also edited the test to reflect this.","Already fixed in the CodeLite module, but not updated.",True,{}
premake/premake-core,https://github.com/premake/premake-core,568,2016-08-17T15:56:06Z,2016-08-17T16:36:44Z,2016-08-19T10:41:28Z,MERGED,True,115,11,9,https://github.com/tritao,Use rpaths & soname/install_name to link sibling shared libraries on OS X and Linux,1,[],https://github.com/premake/premake-core/pull/568,https://github.com/tritao,1,https://github.com/premake/premake-core/pull/568,Original patch by Renaud Guillard (@noresources) updated to recent Premake.,Original patch by Renaud Guillard (@noresources) updated to recent Premake.,True,{}
premake/premake-core,https://github.com/premake/premake-core,568,2016-08-17T15:56:06Z,2016-08-17T16:36:44Z,2016-08-19T10:41:28Z,MERGED,True,115,11,9,https://github.com/tritao,Use rpaths & soname/install_name to link sibling shared libraries on OS X and Linux,1,[],https://github.com/premake/premake-core/pull/568,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/568#issuecomment-240460774,Original patch by Renaud Guillard (@noresources) updated to recent Premake.,It looks good to me.... should I close the other PR and merge this one then?,True,{}
premake/premake-core,https://github.com/premake/premake-core,568,2016-08-17T15:56:06Z,2016-08-17T16:36:44Z,2016-08-19T10:41:28Z,MERGED,True,115,11,9,https://github.com/tritao,Use rpaths & soname/install_name to link sibling shared libraries on OS X and Linux,1,[],https://github.com/premake/premake-core/pull/568,https://github.com/tritao,3,https://github.com/premake/premake-core/pull/568#issuecomment-240468689,Original patch by Renaud Guillard (@noresources) updated to recent Premake.,Sounds good to me.,True,{}
premake/premake-core,https://github.com/premake/premake-core,570,2016-08-25T15:08:02Z,2016-08-25T18:10:43Z,2016-11-22T20:14:21Z,MERGED,True,19,20,2,https://github.com/nmoehrle,Fix path normalization within os.execute,1,[],https://github.com/premake/premake-core/pull/570,https://github.com/nmoehrle,1,https://github.com/premake/premake-core/pull/570,This is a merge of #320 and #538 which resolves the issues  #316 and #537 by normalizing only arguments that should be file system paths.,This is a merge of #320 and #538 which resolves the issues  #316 and #537 by normalizing only arguments that should be file system paths.,True,{}
premake/premake-core,https://github.com/premake/premake-core,570,2016-08-25T15:08:02Z,2016-08-25T18:10:43Z,2016-11-22T20:14:21Z,MERGED,True,19,20,2,https://github.com/nmoehrle,Fix path normalization within os.execute,1,[],https://github.com/premake/premake-core/pull/570,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/570#issuecomment-242428057,This is a merge of #320 and #538 which resolves the issues  #316 and #537 by normalizing only arguments that should be file system paths.,lgtm,True,{}
premake/premake-core,https://github.com/premake/premake-core,570,2016-08-25T15:08:02Z,2016-08-25T18:10:43Z,2016-11-22T20:14:21Z,MERGED,True,19,20,2,https://github.com/nmoehrle,Fix path normalization within os.execute,1,[],https://github.com/premake/premake-core/pull/570,https://github.com/tritao,3,https://github.com/premake/premake-core/pull/570#issuecomment-242432639,This is a merge of #320 and #538 which resolves the issues  #316 and #537 by normalizing only arguments that should be file system paths.,üëç,True,{}
premake/premake-core,https://github.com/premake/premake-core,571,2016-08-30T14:39:07Z,2016-08-30T14:42:26Z,2016-08-30T16:22:51Z,CLOSED,False,32,0,3,None,Add a way to set the current working directory,1,[],https://github.com/premake/premake-core/pull/571,None,1,https://github.com/premake/premake-core/pull/571,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,571,2016-08-30T14:39:07Z,2016-08-30T14:42:26Z,2016-08-30T16:22:51Z,CLOSED,False,32,0,3,None,Add a way to set the current working directory,1,[],https://github.com/premake/premake-core/pull/571,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/571#issuecomment-243496186,,"I'm guessing you found it already, which is why you closed this.... but just in case there is ""os.chdir"" exposed premake.",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/573,#572,#572,True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/573#issuecomment-244343752,#572,"My concern with this approach is that there are a number of deprecated flags out there now (and I have even more over here). If a project has switched over to the new APIs (which most will have done), this will step on those values:
floatingpoint ""Fast""
removeflags ""*""
-- floatingpoint is now ""Default""",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/573#issuecomment-244417544,#572,"I see your point....
But that means the only way we can figure this out then is to search all blocks for the flags that we set upstream... I'll see if I can figure something else out... All the information is in blocks somewhere, we just need to figure out which ones are ""compatible"" with ""current"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/573#issuecomment-244420517,#572,"Right. In theory, I was thinking it might be possible to do this during baking at the point that the configuration set is compiled, since we're stepping through the blocks there anyway. The catch is the deprecation logic is written using the project APIs (i.e. it calls symbols(""On"")) which means you need to set the active container and point the API code to the right block. Which means that code probably needs to get abstracted out a bit more than it is.
I'm still looking at this as I can, but it is a rabbit hole.",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/573#issuecomment-244429518,#572,OK... so this one works in your case... but the test I added breaks... looking into that.,True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/573#issuecomment-244430468,#572,"Basically what I'm doing now, is going through each block and see if the terms used apply to the block we're currently doing the remove in... That should in theory give me a list of all the flags that were applied for the config we're in... It's not conclusive clearly, given the second test I created.",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/573#issuecomment-244432694,#572,"Turns out... we need to test both ways.... not really fully understanding the theory behind that, but maybe you have an idea??
Anyway, this way it passes both tests... But I think we need to write a couple more tests for a bunch of cases, because I don't think this covers it...",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/573#issuecomment-244793090,#572,"Reversing the criteria tests is a clever approach. This will fall down if the value is set in a parent container (i.e. flags { ""Symbols"" } is in the workspace, and the remove is in the project). It will also fail on any path fields, since getvalues() doesn't consider the path handling logic.
This looks like a promising approach, but it will probably have to go through the configset._fetchMerged code path. I haven't figured out a clean way to make that happen‚Ä¶",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/573#issuecomment-244993212,#572,"but it will probably have to go through the configset._fetchMerged code path.

Yeah, this is obviously more of a proof of concept approach... I did consider the parent container but didn't test for that yet, so that is basically just the next test we need to add to make sure we cover the case, and fix things accordingly...
I think what we can do with the _fetchMerged, is give it a callback argument which does the matching.. instead of hardcoding it to match against the criteria and cset.compiled... That way the normal fetch can default to that... but this particular fetch can provide a different callback that reverses the criteria test.",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/573#issuecomment-245044847,#572,"OK... so one more try.... ;) it now goes through the configset.fetch method, but I changed the way it handles the ""filter"" argument... it now has an optional ""matcher"" callback function, and so in the api.remove we call the configset.fetch with this special callback..
local current = configset.fetch(target, field, {
    matcher = function(cset, block, filter)
        local current = cset.current
        return criteria.matches(current._criteria, block._criteria.terms or {}) or
               criteria.matches(block._criteria, current._criteria.terms or {})
    end
})",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/starkos,11,https://github.com/premake/premake-core/pull/573#issuecomment-245231766,#572,"Thanks for that! I think this looks pretty good now, and ought to cover things well. Nice!
I'm going to be out of commission for the next week or so, starting right about now, so I won't be able to verify this locally, but I think it looks good. I'd like to include it on the alpha10 release branch, as this was the last thing holding up the release. Would it be possible to rebase it there? If not, I can apply it easily enough when I get back.
Thanks again for looking into this!",True,{}
premake/premake-core,https://github.com/premake/premake-core,573,2016-09-01T23:31:12Z,2016-09-07T15:02:09Z,2016-09-07T15:02:11Z,MERGED,True,88,11,5,https://github.com/tvandijck,Workaround for #572,2,[],https://github.com/premake/premake-core/pull/573,https://github.com/tvandijck,12,https://github.com/premake/premake-core/pull/573#issuecomment-245309212,#572,"I'll merge it, and cherry pick the commits over to alpha10, should be easy.",True,{}
premake/premake-core,https://github.com/premake/premake-core,574,2016-09-01T23:42:19Z,2016-09-01T23:43:53Z,2016-09-01T23:43:55Z,MERGED,True,1,1,1,https://github.com/tvandijck,fix bug in deprecation handler.,1,[],https://github.com/premake/premake-core/pull/574,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/574,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/575,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/575#issuecomment-247285848,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","I've been thinking about this quite a bit, I think we should probably merge this in. I think there's value in having a diagnostics mode that allows a developer/user to view the state as a whole.",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/575#issuecomment-247316715,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","If we merge, can we leave it disabled by default, like the test module?",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/575#issuecomment-247320376,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","So to use it, the premake5.lua would need to have require ""raw""? I don't really see a problem with that, out of curiosity why would you prefer it to be disabled by default?",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/575#issuecomment-247352522,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","If we merge, can we leave it disabled by default, like the test module?

I'm all in favor, but how is that done?? just not mentioning it in the _modules.lua ?? would the action still work doing that? or is there other changes involved?",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/575#issuecomment-247426082,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","Sorry‚Ä¶coming back slowly‚Ä¶yes, just don't mention it in _modules.lua. Developers will need to trigger the module to load, either by require(""raw"") in their project script or premake-system.lua. This isn't a huge deal though, this is less likely to cause confusion than the self-test action would have.",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/575#issuecomment-247447291,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","OK, well I can certainly do that... not entirely sure what the benefits are? but I have no real objections either.",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/575#issuecomment-247456010,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","It prevents that action from showing up in the help text unless it has been explicitly enabled (via require). I'm trying to do this for features that are primarily targeted at advanced users or Premake developers, to avoid cluttering things up and making it more complicated for new users who are just trying to figure out how to use Premake to generate some project files for their IDE.
That's the motivation anyway?",True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/575#issuecomment-247457538,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.",that makes perfect sense ;)... I made the change...,True,{}
premake/premake-core,https://github.com/premake/premake-core,575,2016-09-01T23:50:16Z,2016-09-19T11:01:04Z,2016-09-22T15:33:14Z,MERGED,True,4,0,2,https://github.com/tvandijck,Add raw module as a standard module.,2,[],https://github.com/premake/premake-core/pull/575,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/575#issuecomment-247504979,"This is just a really handy module to inspect the raw lua tables...
Not sure if making it a standard module is really needed, but I figured I could at least propose it with the PR.","Yeah, that does make sense. LGTM :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,580,2016-09-20T08:54:52Z,2016-09-20T10:11:56Z,2016-09-20T10:11:57Z,MERGED,True,12,4,2,https://github.com/lailongwei,fix windows platform compile error,1,[],https://github.com/premake/premake-core/pull/580,https://github.com/lailongwei,1,https://github.com/premake/premake-core/pull/580,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,580,2016-09-20T08:54:52Z,2016-09-20T10:11:56Z,2016-09-20T10:11:57Z,MERGED,True,12,4,2,https://github.com/lailongwei,fix windows platform compile error,1,[],https://github.com/premake/premake-core/pull/580,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/580#issuecomment-248251362,,"LGTM. Out of curiosity, what compiler (and version) were you using?",True,{}
premake/premake-core,https://github.com/premake/premake-core,580,2016-09-20T08:54:52Z,2016-09-20T10:11:56Z,2016-09-20T10:11:57Z,MERGED,True,12,4,2,https://github.com/lailongwei,fix windows platform compile error,1,[],https://github.com/premake/premake-core/pull/580,https://github.com/lailongwei,3,https://github.com/premake/premake-core/pull/580#issuecomment-248252155,,"I'm using visual studio 2012:), visual studio 2008 could not be compile too:)",True,{}
premake/premake-core,https://github.com/premake/premake-core,580,2016-09-20T08:54:52Z,2016-09-20T10:11:56Z,2016-09-20T10:11:57Z,MERGED,True,12,4,2,https://github.com/lailongwei,fix windows platform compile error,1,[],https://github.com/premake/premake-core/pull/580,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/580#issuecomment-248259871,,"Interesting, thanks for the information!
@tvandijck @starkos should we add some of these older versions of VS to the AppVeyor builds? Additionally, does AppVeyor support the older versions of VS? It should increase the likelihood of contributors and users if our stuff just works regardless of what they have access to. Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,581,2016-09-20T15:42:37Z,2016-09-22T15:35:56Z,2016-10-20T10:03:12Z,MERGED,True,10,5,2,https://github.com/samsinsane,Fixed bug with path.normalize,1,[],https://github.com/premake/premake-core/pull/581,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/581,"Fixed bug where path.normalize was being overzealous with removing instances of "".."" breaking paths. Fixes #579","Fixed bug where path.normalize was being overzealous with removing instances of "".."" breaking paths. Fixes #579",True,{}
premake/premake-core,https://github.com/premake/premake-core,583,2016-09-22T14:55:50Z,2016-11-03T09:20:47Z,2016-11-03T09:20:51Z,MERGED,True,19,6,3,https://github.com/samsinsane,Added ability for duplicate build commands to be specified,1,[],https://github.com/premake/premake-core/pull/583,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/583,Fixes #540,Fixes #540,True,{}
premake/premake-core,https://github.com/premake/premake-core,587,2016-09-28T14:41:35Z,2016-09-28T15:53:40Z,2016-09-28T15:53:48Z,MERGED,True,1,1,1,https://github.com/SirLynix,Host/Posix: Fix os.copyfile with spaces in argument paths.,1,[],https://github.com/premake/premake-core/pull/587,https://github.com/SirLynix,1,https://github.com/premake/premake-core/pull/587,"Hey,
I just encountered this bug, as Premake calls the cp utility without wrapping its argument by quotes, causing the copy to fail.
This is a simple fix, and my first contribution üòÉ","Hey,
I just encountered this bug, as Premake calls the cp utility without wrapping its argument by quotes, causing the copy to fail.
This is a simple fix, and my first contribution üòÉ",True,{}
premake/premake-core,https://github.com/premake/premake-core,587,2016-09-28T14:41:35Z,2016-09-28T15:53:40Z,2016-09-28T15:53:48Z,MERGED,True,1,1,1,https://github.com/SirLynix,Host/Posix: Fix os.copyfile with spaces in argument paths.,1,[],https://github.com/premake/premake-core/pull/587,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/587#issuecomment-250210306,"Hey,
I just encountered this bug, as Premake calls the cp utility without wrapping its argument by quotes, causing the copy to fail.
This is a simple fix, and my first contribution üòÉ","LGTM, thank you...",True,{}
premake/premake-core,https://github.com/premake/premake-core,597,2016-10-17T20:07:16Z,2016-10-18T16:15:48Z,2017-05-09T19:28:07Z,MERGED,True,1,1,1,https://github.com/akaStiX,Enable Edit and Continue for x64 builds on VS2015,1,[],https://github.com/premake/premake-core/pull/597,https://github.com/akaStiX,1,https://github.com/premake/premake-core/pull/597,VS 2015 supports Edit and Continue for x64 builds! Let's enable it,VS 2015 supports Edit and Continue for x64 builds! Let's enable it,True,{}
premake/premake-core,https://github.com/premake/premake-core,597,2016-10-17T20:07:16Z,2016-10-18T16:15:48Z,2017-05-09T19:28:07Z,MERGED,True,1,1,1,https://github.com/akaStiX,Enable Edit and Continue for x64 builds on VS2015,1,[],https://github.com/premake/premake-core/pull/597,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/597#issuecomment-254559688,VS 2015 supports Edit and Continue for x64 builds! Let's enable it,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/sbx320,1,https://github.com/premake/premake-core/pull/600,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/600#issuecomment-255070172,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","Very interesting, everyone in #524 seems to indicate it works as expected? @tvandijck is it supposed to be the compiler or linker flag?",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/600#issuecomment-255158820,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","Yeah, our game ships with this stuff.... I don't think we have encountered an issue so far... but the linked articles seem to indicate that we're doing something wrong maybe?? I don't know...
I think what we want is the 'resulting' PDB to be in the right spot, I don't really care much for the intermediate one, but I was unaware that there were two separate options for it..",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/sbx320,4,https://github.com/premake/premake-core/pull/600#issuecomment-255165141,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","Are you sure the generated PDBs are non-intermediate PDBs? Also if you're using symbolspath ""$(OutDir)$(TargetName).pdb"" you'll likely not see any impact, due to that being the default if no ProgramDatabaseFile is set. You'd just end up overwriting the debug information all the time.
When I compile Lua into a shared library with the current behavior and symbolspath ""Build/Symbols/$(ProjectName).pdb"" I get two pdbs:

The first one in the intended Build/Symbols/ folder with a name of $(ProjectName).pdb with a size of about 156kb
The second one located alongside the Lua binary with the same name as the binary just with a .pdb file ending and 1164kb in size.

The former is unusable for debugging. The second one is generated as part of the VS defaults.
(This is all on VS2015 Update 3)",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/600#issuecomment-255170081,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","Are you sure the generated PDBs are non-intermediate PDBs?

I'm not... all I know is that when we deploy these pdbs to our symbol server we can debug our live versions of Heroes of the Storm and Starcraft 2...
The settings for heroes are like this:
linker settings:

compiler settings:",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/sbx320,6,https://github.com/premake/premake-core/pull/600#issuecomment-255177143,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","It works in that case due to ProgramDatabaseName being the same as ProgramDataBaseFileName.
This results in the intermediate (compiler) pdb being overwritten by the final (linker) pdb.
If you attempt to adjust symbolspath to something else (e.g. MySymbolsDir/$(TargetName).pdb) you end up with the two pdbs I described above.",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/600#issuecomment-256012158,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","@tvandijck it looks like these changes won't break your projects, but just in case you want to verify that everything continues to work on your end, I'll leave this for you to merge in. üòÑ",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/600#issuecomment-258207571,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","Yeah, I haven't had the time unfortunately... maybe our next ""sprint"" will allow me some ""premake time"".
In the meantime, if we could rebase this change to latest master.. github says it's out of date.",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/600#issuecomment-258208873,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","GitHub seems to say ""This branch is out-of-date with the base branch"" if it's not on the current commit for that branch. I'm not sure if this is a good feature or not, any idea what the ""Update branch"" button does?",True,{}
premake/premake-core,https://github.com/premake/premake-core,600,2016-10-20T05:41:39Z,2016-11-04T02:02:24Z,2016-11-04T02:02:24Z,MERGED,True,3,3,1,https://github.com/sbx320,Fix for #598,2,[],https://github.com/premake/premake-core/pull/600,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/600#issuecomment-258209409,"ProgramDataBaseFileName (Compiler Option) describes the location of the debug information for the intermediate object files (.obj).
ProgramDatabaseFile (Linker Option) instead sets the location of the debug information for the final binary (shared library or executable) which is the documented (and probably also intended) behavior.
Related MSDN Articles:
https://msdn.microsoft.com/en-us/library/9wst99a9.aspx (/Fd (ProgramDataBaseFileName))
https://msdn.microsoft.com/en-us/library/kwx19e36.aspx (/PDB (ProgramDatabaseFile))","Oh I had another PR open, I clicked it on that just incase it breaks anything. Looks like it just rebases the branch for you, cool.
Edit: Apparently, it creates a merge commit from master. I didn't see that happen on my PR until after it happened here >.<",True,{}
premake/premake-core,https://github.com/premake/premake-core,603,2016-10-26T21:12:49Z,2016-11-03T10:06:58Z,2016-11-03T10:06:58Z,MERGED,True,1,1,1,https://github.com/andryblack,allow override AR arguments,1,[],https://github.com/premake/premake-core/pull/603,https://github.com/andryblack,1,https://github.com/premake/premake-core/pull/603,allow override hardcoded 'ar' arguments at Makefile generator. e.g. '-rcu' instead default '-rcs',allow override hardcoded 'ar' arguments at Makefile generator. e.g. '-rcu' instead default '-rcs',True,{}
premake/premake-core,https://github.com/premake/premake-core,605,2016-10-27T15:57:29Z,2016-11-03T09:23:05Z,2016-11-03T09:23:07Z,MERGED,True,28,31,2,https://github.com/samsinsane,Fixed bug with objdirs prefix code '!',1,[],https://github.com/premake/premake-core/pull/605,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/605,"Fixed flawed tests that manipulated the actual result before testing it
Added test to ensure prefix code '!' works","Fixed flawed tests that manipulated the actual result before testing it
Added test to ensure prefix code '!' works",True,{}
premake/premake-core,https://github.com/premake/premake-core,607,2016-10-29T02:27:57Z,2016-11-04T01:24:50Z,2016-11-04T01:24:53Z,MERGED,True,1,6,4,https://github.com/samsinsane,Removed MonoDevelop from core,2,[],https://github.com/premake/premake-core/pull/607,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/607,"The format output is no longer supported by the IDE, instead Visual Studio projects are utilized instead. See issue #604 for more information on deprecation.","The format output is no longer supported by the IDE, instead Visual Studio projects are utilized instead. See issue #604 for more information on deprecation.",True,{}
premake/premake-core,https://github.com/premake/premake-core,607,2016-10-29T02:27:57Z,2016-11-04T01:24:50Z,2016-11-04T01:24:53Z,MERGED,True,1,6,4,https://github.com/samsinsane,Removed MonoDevelop from core,2,[],https://github.com/premake/premake-core/pull/607,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/607#issuecomment-257065761,"The format output is no longer supported by the IDE, instead Visual Studio projects are utilized instead. See issue #604 for more information on deprecation.",Relies on premake/premake-dlang#9,True,{}
premake/premake-core,https://github.com/premake/premake-core,607,2016-10-29T02:27:57Z,2016-11-04T01:24:50Z,2016-11-04T01:24:53Z,MERGED,True,1,6,4,https://github.com/samsinsane,Removed MonoDevelop from core,2,[],https://github.com/premake/premake-core/pull/607,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/607#issuecomment-257774526,"The format output is no longer supported by the IDE, instead Visual Studio projects are utilized instead. See issue #604 for more information on deprecation.",@tvandijck @starkos @TurkeyMan This PR is now ready to go.,True,{}
premake/premake-core,https://github.com/premake/premake-core,607,2016-10-29T02:27:57Z,2016-11-04T01:24:50Z,2016-11-04T01:24:53Z,MERGED,True,1,6,4,https://github.com/samsinsane,Removed MonoDevelop from core,2,[],https://github.com/premake/premake-core/pull/607,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/607#issuecomment-258208908,"The format output is no longer supported by the IDE, instead Visual Studio projects are utilized instead. See issue #604 for more information on deprecation.",branch needs updating...,True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/mikisch81,1,https://github.com/premake/premake-core/pull/608,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/608#issuecomment-263975261,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","Sorry for the late response on this one, but want to point out that this behavior is Visual Studio specific and not portable to other toolsets. In previous discussions (which I seem completely unable to find) it was considered better to fail everywhere, so it could be fixed, then to silently succeeded on one toolset and fail on another.",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/jspohr,3,https://github.com/premake/premake-core/pull/608#issuecomment-282489847,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","@starkos Did you mean this discussion? #627
@mikisch81 This change appears to cause major problems for my static builds. I have a project with a lot of libraries, and I use links between them for dependencies, because I use dynamic libs for development, and static libs for deployment. When building an app, I previously had to put all libraries and their dependencies as links. This is not ideal, however, the new behavior doesn't work for this case, either. Visual Studio's Librarian will now combine all dependent libraries into the output library, which leads to very large file sizes. For example, assume every library on its own is 10mb. For every library it depends on, this adds another 10mb. So I may get to 110mb if my library has 10 dependencies. Now, another library that depends on this 110mb library will get bigger by 110mb. This escalates quickly, and my build fails because I have libraries with more than 2gb in size.
I could create a workaround by implementing my own links() function, or overwrite the VS generator function to get back the old behavior, but I wanted to discuss this first, because this might be a problem for other projects, too.
Appreciate your thoughts on this! Thanks",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/mikisch81,4,https://github.com/premake/premake-core/pull/608#issuecomment-282547533,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","@jspohr @starkos Then there should be a way to implicitly add all the dependencies to the application linking step. I opened this pull requests because we supply a library and not an application and we couldn't just tell the user to add all the nested dependencies by himself when building his application.
Thanks.",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/jspohr,5,https://github.com/premake/premake-core/pull/608#issuecomment-282571656,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","True, this was the general sentiment voiced in the issue I referred to.
I workarounded this using premake.override for my use case, so this has low priority for me right now, but I think that in the long run, premake needs a solution for this scenario that ""just works"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/608#issuecomment-282776443,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","I'm okay with adding this as a feature, but I think it should be something that is switched on explicitly by the project author (e.g. linkstaticdependencies ""true"" maybe), with the existing, more portable behavior left as the default.",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/608#issuecomment-282996629,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","Prior to this PR, didn't links just act like dependson for a static library? I don't really see any benefit in maintaining this functionality, why not just use dependson instead?",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/jspohr,8,https://github.com/premake/premake-core/pull/608#issuecomment-283024373,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","For my specific use case, I need links to work for both static and dynamic libs, because my projects can be one or the other, depending on the configuration. However, I can just wrap that in a filter and use links for the dynamic, and dependson for the static case. This still means that I have to manually add all dependencies to the executable for the static configuration, which this PR tried to solve.",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/608#issuecomment-283102772,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","To me....

if you put a links, I expect it to link...
if you put a dependson, I expect it to add a build dependency. Nothing more, nothing less.


@jspohr : I have a project with a lot of libraries, and I use links between them for dependencies

To me that feels a little like it is exploiting a premake behavior that isn't intended, but clearly causes a lot of discussion... I think we touched on this particular set of API's a few times now. I understand the implication, and your use-case.. but static libs, if you specify links, I expect it to link, since that is what you say you want.. If you expect a dependency you should be using the dependson API... I also understand you have both dynamic and static uses... then:
filter ""kind:staticlib""
   dependson ""a""
filter ""kind:dynamiclib""
   link ""a""

will do the right thing, and you can easily wrap that in a function and do
dynamiclink ""a""

In addition to this entire discussion, I would argue that dependencies between static libs are almost always unnessesairy... unless you do any kind of codegen, there is no need for a lib to link/dependson any other lib. And adding dependencies actually leads to increased build times due to a decrease in the ability of the compiler to parallelize the build, since now every lib needs to wait for the next lib to finish, and so you get all these sync points in your build.. it's just less efficient for often no reason at all.
The only reason for wanting to link one lib to another is for inclusion, so that once an ""app"" links against lib A, it automatically gets opengl, winsock, etc as well, since that is what A is using, rather then having to explicitly call this out in the ""app"" lua script... We've discussed this many times too, and talked about introduction an API that allows you to create links that will propagate down to the app, while keeping the links&dependson in libs clean...
Anyway, no real satisfying answer from me I guess... I'm not against this PR at all, I just think it is clearly a change that breaks people that relying on links to do the ""wrong"" thing (in my opinion)..",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/jspohr,10,https://github.com/premake/premake-core/pull/608#issuecomment-283104877,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","Some more thoughts:
Static libs are obviously not the same thing as dynamic libs. There is no linking involved, just copying object files into large blobs. However, static libs can have dependencies. Resolving those dependencies by just lobbing their contents together is a brute force solution, which wastes disk space and build time, and can even lead to broken builds in case size limits are straddled.
So what do we actually want? When linking a dynamic library or an executable, we want the linker to know all the dependencies (and the dependencies of those dependencies). Premake has that information, the question is how the information is transported to the linker.
@starkos Would it be possible to resolve all dependencies for a project recursively during a Premake run, and putting all of those as inputs to the linker? That's what I'm doing manually now, anyway. If Premake could do this automatically, I hope it would solve the issues at hand.",True,{}
premake/premake-core,https://github.com/premake/premake-core,608,2016-10-30T14:43:14Z,2016-11-03T10:10:10Z,2017-02-28T17:24:21Z,MERGED,True,44,0,2,https://github.com/mikisch81,VStudio: Add additional deps & additional libdirs for static lib,2,[],https://github.com/premake/premake-core/pull/608,https://github.com/jspohr,11,https://github.com/premake/premake-core/pull/608#issuecomment-283106476,"Currently if static library links with another non-sibling library build fails.
For example:

If using the socket() API on windows in a static library, need to link with ws2_32.lib.
In current premake, linking fails due to unresolved external symbol of the socket() symbol. @mindw","@tvandijck Sorry I wrote the above without seeing your post. I agree, links in the context of static libs is not what I should be using. I probably will roll a custom solution for my issue, anyway.
But on the topic of propagating dependencies, it would still be a great feature, although I'm unsure about the implications and complexity of the implementation. I'm usually not a fan of tools being too smart, and having Premake generate dependencies implicitly could maybe lead to surprises that are hard to track down.
However, IMO build tools should prioritize user's productivity, so maybe a semi-smart solution can be found :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,609,2016-10-30T15:52:02Z,2016-10-31T14:27:22Z,2016-10-31T19:02:38Z,CLOSED,False,7,1,3,https://github.com/mikisch81,"Fix bug in premake.filename(obj, ext)",2,[],https://github.com/premake/premake-core/pull/609,https://github.com/mikisch81,1,https://github.com/premake/premake-core/pull/609,"If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw","If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw",True,{}
premake/premake-core,https://github.com/premake/premake-core,609,2016-10-30T15:52:02Z,2016-10-31T14:27:22Z,2016-10-31T19:02:38Z,CLOSED,False,7,1,3,https://github.com/mikisch81,"Fix bug in premake.filename(obj, ext)",2,[],https://github.com/premake/premake-core/pull/609,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/609#issuecomment-257250740,"If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw","I can't really see any use for this, can you please provide an example of why this is required? It seems to me that this would only encourage users to provide the extension which would make it harder to swap between Visual Studio, CodeLite, XCode or Makefiles.",True,{}
premake/premake-core,https://github.com/premake/premake-core,609,2016-10-30T15:52:02Z,2016-10-31T14:27:22Z,2016-10-31T19:02:38Z,CLOSED,False,7,1,3,https://github.com/mikisch81,"Fix bug in premake.filename(obj, ext)",2,[],https://github.com/premake/premake-core/pull/609,https://github.com/alzix,3,https://github.com/premake/premake-core/pull/609#issuecomment-257273810,"If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw","Hi @samsinsane,
I think documentation is misleading regarding this API.
Documentation  states: name is the desired file name for the generated workspace or project file.
Desired project file is my_proj.vcxproj.
Please consider either modifying documentation to explicitly notify that file name should be provided without extension, or sanitizing input value.
thx",True,{}
premake/premake-core,https://github.com/premake/premake-core,609,2016-10-30T15:52:02Z,2016-10-31T14:27:22Z,2016-10-31T19:02:38Z,CLOSED,False,7,1,3,https://github.com/mikisch81,"Fix bug in premake.filename(obj, ext)",2,[],https://github.com/premake/premake-core/pull/609,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/609#issuecomment-257301650,"If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw",@Alex--- I've updated the documentation to explicitly notify users that the filename shouldn't include the extension.,True,{}
premake/premake-core,https://github.com/premake/premake-core,609,2016-10-30T15:52:02Z,2016-10-31T14:27:22Z,2016-10-31T19:02:38Z,CLOSED,False,7,1,3,https://github.com/mikisch81,"Fix bug in premake.filename(obj, ext)",2,[],https://github.com/premake/premake-core/pull/609,https://github.com/mikisch81,5,https://github.com/premake/premake-core/pull/609#issuecomment-257306407,"If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw","@samsinsane @Alex--- Now the description is more precise, the pull request can be closed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,609,2016-10-30T15:52:02Z,2016-10-31T14:27:22Z,2016-10-31T19:02:38Z,CLOSED,False,7,1,3,https://github.com/mikisch81,"Fix bug in premake.filename(obj, ext)",2,[],https://github.com/premake/premake-core/pull/609,https://github.com/alzix,6,https://github.com/premake/premake-core/pull/609#issuecomment-257388353,"If ""ext"" is given and project was configured with filename which ends with ""ext"" than the returned filename will be ""filename.ext.ext"".
It can be relevant in external projects where you want to give the filename of the project file explicitly.
@mindw",Tnx. I saw the change. It is much clearer now,True,{}
premake/premake-core,https://github.com/premake/premake-core,610,2016-11-01T11:28:30Z,2016-11-03T10:15:26Z,2016-11-03T10:15:26Z,MERGED,True,42,0,2,https://github.com/mikisch81,Apply includedirs and defines for makefile projects in Visual Studio,1,[],https://github.com/premake/premake-core/pull/610,https://github.com/mikisch81,1,https://github.com/premake/premake-core/pull/610,"This will help Intellisense when viewing makefile projects on Visual Studio.
For example:
You have a C project with an external makefile to build it.
When you open the project on Visual Studio you would like intellisense to know all the includedirs locations and show ifdefs code parts which their defines were defined in the premake5.lua.
@mindw
@Alex---","This will help Intellisense when viewing makefile projects on Visual Studio.
For example:
You have a C project with an external makefile to build it.
When you open the project on Visual Studio you would like intellisense to know all the includedirs locations and show ifdefs code parts which their defines were defined in the premake5.lua.
@mindw
@Alex---",True,{}
premake/premake-core,https://github.com/premake/premake-core,611,2016-11-02T05:40:34Z,2016-11-03T10:33:01Z,2016-11-03T10:33:02Z,MERGED,True,1,1,1,https://github.com/sbx320,make: Fix forceincludes breaking precompiled headers,1,[],https://github.com/premake/premake-core/pull/611,https://github.com/sbx320,1,https://github.com/premake/premake-core/pull/611,"I just stumbled upon an issue which occurs when using precompiled headers and forceincludes together: The files listed in forceincludes will always be included first, even before the pch .
This usually results in build errors. For example clang (likely gcc as well) ignores precompiled headers which are not the first -include in the compiler options (StdInc.h is my pch here) and therefore breaks the build:
clang: warning: precompiled header 'obj/x64/Release/XML/StdInc.h.gch' was ignored because '-include obj/x64/Release/XML/StdInc.h' is not first '-include'
<built-in>:2:10: fatal error: 'obj/x64/Release/XML/StdInc.h' file not found

This pull request fixes it by always specifying the pch as first include to the FORCE_INCLUDE make variable (if the pch option is used).","I just stumbled upon an issue which occurs when using precompiled headers and forceincludes together: The files listed in forceincludes will always be included first, even before the pch .
This usually results in build errors. For example clang (likely gcc as well) ignores precompiled headers which are not the first -include in the compiler options (StdInc.h is my pch here) and therefore breaks the build:
clang: warning: precompiled header 'obj/x64/Release/XML/StdInc.h.gch' was ignored because '-include obj/x64/Release/XML/StdInc.h' is not first '-include'
<built-in>:2:10: fatal error: 'obj/x64/Release/XML/StdInc.h' file not found

This pull request fixes it by always specifying the pch as first include to the FORCE_INCLUDE make variable (if the pch option is used).",True,{}
premake/premake-core,https://github.com/premake/premake-core,613,2016-11-03T11:24:13Z,2016-11-03T17:07:02Z,2016-11-30T06:23:06Z,MERGED,True,3,2,2,https://github.com/samsinsane,Added a test dot file instead of relying on .gitignore to be shipped,1,[],https://github.com/premake/premake-core/pull/613,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/613,Fixes #595,Fixes #595,True,{}
premake/premake-core,https://github.com/premake/premake-core,617,2016-11-07T17:43:53Z,2017-06-13T21:24:53Z,2017-06-13T21:24:55Z,MERGED,True,143,9,2,https://github.com/tvandijck,fix switch/separator in rules_xml,2,[],https://github.com/premake/premake-core/pull/617,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/617,"This is a workaround for a bug in msbuild, kind of hard to explain without the source for msbuild next to it.","This is a workaround for a bug in msbuild, kind of hard to explain without the source for msbuild next to it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,617,2016-11-07T17:43:53Z,2017-06-13T21:24:53Z,2017-06-13T21:24:55Z,MERGED,True,143,9,2,https://github.com/tvandijck,fix switch/separator in rules_xml,2,[],https://github.com/premake/premake-core/pull/617,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/617#issuecomment-259013051,"This is a workaround for a bug in msbuild, kind of hard to explain without the source for msbuild next to it.",Are you able to add tests for this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,617,2016-11-07T17:43:53Z,2017-06-13T21:24:53Z,2017-06-13T21:24:55Z,MERGED,True,143,9,2,https://github.com/tvandijck,fix switch/separator in rules_xml,2,[],https://github.com/premake/premake-core/pull/617,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/617#issuecomment-259203420,"This is a workaround for a bug in msbuild, kind of hard to explain without the source for msbuild next to it.","not today, but I'll have a look at it, I have to figure out why we needed this again ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,617,2016-11-07T17:43:53Z,2017-06-13T21:24:53Z,2017-06-13T21:24:55Z,MERGED,True,143,9,2,https://github.com/tvandijck,fix switch/separator in rules_xml,2,[],https://github.com/premake/premake-core/pull/617,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/617#issuecomment-308218837,"This is a workaround for a bug in msbuild, kind of hard to explain without the source for msbuild next to it.",Added tests.. will merge once appveyor & travis pass.,True,{}
premake/premake-core,https://github.com/premake/premake-core,618,2016-11-07T17:45:09Z,2016-11-08T01:04:44Z,2017-02-08T20:46:25Z,MERGED,True,18,1,2,https://github.com/tvandijck,Fix for debugInformationFormat handling with FastLink.,1,[],https://github.com/premake/premake-core/pull/618,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/618,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,619,2016-11-07T17:51:06Z,2016-11-23T04:05:38Z,2016-11-28T17:28:53Z,MERGED,True,126,67,4,https://github.com/tvandijck,Add support in csproj backend to add files to certain configurations.,1,[],https://github.com/premake/premake-core/pull/619,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/619,and mark files not in that config as 'exclude from build'.,and mark files not in that config as 'exclude from build'.,True,{}
premake/premake-core,https://github.com/premake/premake-core,619,2016-11-07T17:51:06Z,2016-11-23T04:05:38Z,2016-11-28T17:28:53Z,MERGED,True,126,67,4,https://github.com/tvandijck,Add support in csproj backend to add files to certain configurations.,1,[],https://github.com/premake/premake-core/pull/619,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/619#issuecomment-259143852,and mark files not in that config as 'exclude from build'.,This should probably have some tests to ensure it isn't broken in the future.,True,{'THUMBS_UP': ['https://github.com/tvandijck']}
premake/premake-core,https://github.com/premake/premake-core,619,2016-11-07T17:51:06Z,2016-11-23T04:05:38Z,2016-11-28T17:28:53Z,MERGED,True,126,67,4,https://github.com/tvandijck,Add support in csproj backend to add files to certain configurations.,1,[],https://github.com/premake/premake-core/pull/619,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/619#issuecomment-262311940,and mark files not in that config as 'exclude from build'.,Test added...,True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/620,"Work in progress, (I didn't finish the 'server' part yet)...","Work in progress, (I didn't finish the 'server' part yet)...",True,"{'THUMBS_UP': ['https://github.com/SirLynix', 'https://github.com/tritao']}"
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/620#issuecomment-258964673,"Work in progress, (I didn't finish the 'server' part yet)...","Make a super simple server here:
https://github.com/tvandijck/packagesrv-web
It's live at http://packagesrv.com",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/620#issuecomment-259199763,"Work in progress, (I didn't finish the 'server' part yet)...","A potential problem I can think of is versioning. It looks like the existing code does not deal with that at all.

Actually, the require overload that Jason added deals with versioning... And my commit takes that version to download the version specified (if specified)... The thing that this commit doesn't deal with yet is ""what happens when a new version is specified and the module already exists in the .module folder"".
It's why it's a work in progress... I figured I might as well just post the PR, so people can test and provide feedback as I hobby my way through this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/620#issuecomment-259201095,"Work in progress, (I didn't finish the 'server' part yet)...","Also any thoughts about packages? I think you guys had a pretty well developed package system at one point, I remember checking the workings. Is this related to that?

We still do, and it's still very much in use... more and more teams are leveraging it, not just Heroes and SC2. Is this related? not really... But we've been dancing around the module issue for so long now, I really wanted to contribute to that and figure that one out first.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tritao,5,https://github.com/premake/premake-core/pull/620#issuecomment-259208044,"Work in progress, (I didn't finish the 'server' part yet)...","My bad, I can see now that it can already deal with versioning. I didn't want to be negative, I think whatever edge cases there are can be solved after we get the basics of it working and this is a great start.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tritao,6,https://github.com/premake/premake-core/pull/620#issuecomment-288767968,"Work in progress, (I didn't finish the 'server' part yet)...",Any reason why this has not been merged yet?,True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/620#issuecomment-288782526,"Work in progress, (I didn't finish the 'server' part yet)...","No reason other then that I don't want to merge my own PR's unless they are trivial or actual bugfixes... this is a feature... and I'm going to leave it up to someone else to make a judgement.
On a side note however.... the ""server infrastructure"" is far from finished, and any help in that area would be greatly appreciated...
https://github.com/tvandijck/packagesrv-web
It's live at http://packagesrv.com
Also note, this work is unrelated to any blizzard stuff, so I've been mostly working on this very sporadically at home.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/620#issuecomment-288898527,"Work in progress, (I didn't finish the 'server' part yet)...","I was mostly requesting comments, and people gave those, I made some cleanups and modifcations, but this PR as is, I consider ""done"".. I'm sure it'll evolve over time...
The server... that is a whole different story... I'm fully willing to support it, and keep a public server going on one of my dedicated machines (hosted by delimited.com). But in terms of development, I cannot spend any Blizzard time on that, and so it comes down to the 3-4 hours a month I have at home. Any community involvement would greatly accelerate that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tritao,9,https://github.com/premake/premake-core/pull/620#issuecomment-288912308,"Work in progress, (I didn't finish the 'server' part yet)...","What's needed on the server front?
As an alternative to a stateful server, what do you think about using a Github repository as a stateless index? Libraries could be managed via PRs and a Travis CI job could be setup that automatically recomputes a commits a json/Lua table index file cache on the repository.
Package files could be fetched/uploaded to any S3-compatible file store, or even FTP, curl supports it, so in theory we could add builtin package upload support to Premake.
CC'ing @realvictorprm since he mentioned to me some interest on helping on this area before.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/620#issuecomment-289052428,"Work in progress, (I didn't finish the 'server' part yet)...","What's needed on the server front?

it's a single static webpage right now ;) with one ""module"" as a test module...

As an alternative to a stateful server, what do you think about using a Github repository as a stateless index?

Yeah, whatever we want really... That said, having an intermediate 'server' that serves the content has proven to be the right thing to do... rather then directly talking to the github API, which often is rate limitted and requires authentication.. which I really don't want to add to my code.
One thing I did do, setup oauth authentication with github, with the intent that we could make it setup webhooks etc.... If we're going with a fixed index in a single repository, then I don't think we need any of that, since we could just setup a single API Token to fetch that index when it changes, and process it to serve the new content... But again, the server code is all extremely simple right now, and anyone working on it, can rip it apart as much as they want...
As for storing files on an S3 file store... again, I really don't care much either way... AWS costs money, I'm already paying 200,= a year per dedicated box I own, which I'm offering to the community to keep up, I think they have 500GB of storage each, but I don't have any backup mechanism setup, but that is easily fixed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,620,2016-11-07T19:44:01Z,2017-03-24T15:23:04Z,2017-03-24T15:23:08Z,MERGED,True,144,2,5,https://github.com/tvandijck,"Allow require(""modulename"") from a http server.",2,[],https://github.com/premake/premake-core/pull/620,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/620#issuecomment-289053666,"Work in progress, (I didn't finish the 'server' part yet)...","Anyway, I'm merging this PR then... @starkos & @samsinsane approved it...
Lets take the server discussion to the group.
https://groups.google.com/forum/#!topic/premake-development/U9fLftNY4Vg",True,{'THUMBS_UP': ['https://github.com/realvictorprm']}
premake/premake-core,https://github.com/premake/premake-core,623,2016-11-08T14:55:25Z,2016-11-22T17:12:07Z,2016-11-22T17:12:32Z,MERGED,True,40,21,5,https://github.com/mikisch81,Added C90 and C99 flags to gcc,3,[],https://github.com/premake/premake-core/pull/623,https://github.com/mikisch81,1,https://github.com/premake/premake-core/pull/623,"We needed to build our project for c99.
I saw that C++11 & C++14 was already addded as flags, so why not adding C90 & C99 as well..
Explanation about the other changes:

In make_cpp.lua: make.cxxFlags(cfg, toolset) which generates the ALL_CXXFLAGS makefile variable, $(ALL_CFLAGS) should not be there as these are specific flags for C files only. On the other hand $(ALL_CPPFLAGS) should be there and wasn't. In our case there could be a project with .c and .cpp files and -std=c99 can't co-exist with -std=c++14.
To support this split, in gcc.lua I split gcc.cflags to 2 tables: gcc.shared and gcc.cflags.
gcc.getcflags() will return shared flags, c flags and warnings.
gcc.getcxxflags() will return shared flags, c++ flags and warnings.

Currently only 1 test in the codelite module tests fails, would appreciate if anyone can help with that . :-)
@mindw
@alzix","We needed to build our project for c99.
I saw that C++11 & C++14 was already addded as flags, so why not adding C90 & C99 as well..
Explanation about the other changes:

In make_cpp.lua: make.cxxFlags(cfg, toolset) which generates the ALL_CXXFLAGS makefile variable, $(ALL_CFLAGS) should not be there as these are specific flags for C files only. On the other hand $(ALL_CPPFLAGS) should be there and wasn't. In our case there could be a project with .c and .cpp files and -std=c99 can't co-exist with -std=c++14.
To support this split, in gcc.lua I split gcc.cflags to 2 tables: gcc.shared and gcc.cflags.
gcc.getcflags() will return shared flags, c flags and warnings.
gcc.getcxxflags() will return shared flags, c++ flags and warnings.

Currently only 1 test in the codelite module tests fails, would appreciate if anyone can help with that . :-)
@mindw
@alzix",True,{}
premake/premake-core,https://github.com/premake/premake-core,623,2016-11-08T14:55:25Z,2016-11-22T17:12:07Z,2016-11-22T17:12:32Z,MERGED,True,40,21,5,https://github.com/mikisch81,Added C90 and C99 flags to gcc,3,[],https://github.com/premake/premake-core/pull/623,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/623#issuecomment-259875932,"We needed to build our project for c99.
I saw that C++11 & C++14 was already addded as flags, so why not adding C90 & C99 as well..
Explanation about the other changes:

In make_cpp.lua: make.cxxFlags(cfg, toolset) which generates the ALL_CXXFLAGS makefile variable, $(ALL_CFLAGS) should not be there as these are specific flags for C files only. On the other hand $(ALL_CPPFLAGS) should be there and wasn't. In our case there could be a project with .c and .cpp files and -std=c99 can't co-exist with -std=c++14.
To support this split, in gcc.lua I split gcc.cflags to 2 tables: gcc.shared and gcc.cflags.
gcc.getcflags() will return shared flags, c flags and warnings.
gcc.getcxxflags() will return shared flags, c++ flags and warnings.

Currently only 1 test in the codelite module tests fails, would appreciate if anyone can help with that . :-)
@mindw
@alzix","this would be easier to fix if we merged the submodule PR first...
#625
other then that, the commit looks fine with me..",True,{}
premake/premake-core,https://github.com/premake/premake-core,623,2016-11-08T14:55:25Z,2016-11-22T17:12:07Z,2016-11-22T17:12:32Z,MERGED,True,40,21,5,https://github.com/mikisch81,Added C90 and C99 flags to gcc,3,[],https://github.com/premake/premake-core/pull/623,https://github.com/mikisch81,3,https://github.com/premake/premake-core/pull/623#issuecomment-260361922,"We needed to build our project for c99.
I saw that C++11 & C++14 was already addded as flags, so why not adding C90 & C99 as well..
Explanation about the other changes:

In make_cpp.lua: make.cxxFlags(cfg, toolset) which generates the ALL_CXXFLAGS makefile variable, $(ALL_CFLAGS) should not be there as these are specific flags for C files only. On the other hand $(ALL_CPPFLAGS) should be there and wasn't. In our case there could be a project with .c and .cpp files and -std=c99 can't co-exist with -std=c++14.
To support this split, in gcc.lua I split gcc.cflags to 2 tables: gcc.shared and gcc.cflags.
gcc.getcflags() will return shared flags, c flags and warnings.
gcc.getcxxflags() will return shared flags, c++ flags and warnings.

Currently only 1 test in the codelite module tests fails, would appreciate if anyone can help with that . :-)
@mindw
@alzix","Fixed codelite module failure (after rebasing and got rid of the git submodules).
clang tool was needed some handling..",True,{}
premake/premake-core,https://github.com/premake/premake-core,623,2016-11-08T14:55:25Z,2016-11-22T17:12:07Z,2016-11-22T17:12:32Z,MERGED,True,40,21,5,https://github.com/mikisch81,Added C90 and C99 flags to gcc,3,[],https://github.com/premake/premake-core/pull/623,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/623#issuecomment-262302700,"We needed to build our project for c99.
I saw that C++11 & C++14 was already addded as flags, so why not adding C90 & C99 as well..
Explanation about the other changes:

In make_cpp.lua: make.cxxFlags(cfg, toolset) which generates the ALL_CXXFLAGS makefile variable, $(ALL_CFLAGS) should not be there as these are specific flags for C files only. On the other hand $(ALL_CPPFLAGS) should be there and wasn't. In our case there could be a project with .c and .cpp files and -std=c99 can't co-exist with -std=c++14.
To support this split, in gcc.lua I split gcc.cflags to 2 tables: gcc.shared and gcc.cflags.
gcc.getcflags() will return shared flags, c flags and warnings.
gcc.getcxxflags() will return shared flags, c++ flags and warnings.

Currently only 1 test in the codelite module tests fails, would appreciate if anyone can help with that . :-)
@mindw
@alzix","Can you please document these new flags here:
https://github.com/premake/premake-core/wiki/flags",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/624,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/624#issuecomment-260361108,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","Patched‚Ä¶if the soft require fails due to a version mismatch, the module's load state is left as it was before the call.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/624#issuecomment-260395362,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","I think this OK... my only comment would be that _G is still modified, so if a module did create methods or other tables into the global namespace, those would all be there either way.
That said, fixing that would just be incredibly hard, unless we loaded a specific script in the module first that had just it's version number in it or something.. But then we're making the whole module system so much more complicated..
I think we can always revisit this if this turns out to become an issue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/624#issuecomment-260427361,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.",Give me a chance to think about it a little more before you merge it. Maybe I can come up with something.,True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/624#issuecomment-260989648,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","Okay, I don't have any clever way around the ""must load the module to get the version"" issue. If you're okay with this PR as-is, I will plan to mention it as a caveat in the documentation. Seem reasonable?",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/624#issuecomment-261045145,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","Yeah, no object from my end...",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/624#issuecomment-261974535,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","How do people feel about adding a loaded() call to the Premake module spec? If it exists, it would be called once after the module is first loaded. This would provide a place to put your initialization logic that would only be triggered after the module's version check.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/624#issuecomment-262035021,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","I'd rather see a _metadata.lua spec that MUST return a table...
for example:
return {
  version = '1.2.0',
  author = 'tom van dijck',
  description = 'this is an example module',
}
then the softrequire (and require) can load that first, before trying anything else.
I think we can also run this file in a completely separate context with no access to any other lua functionality, state or anything.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/624#issuecomment-262204578,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","I'd rather see a _metadata.lua spec

Like a table of contents or something? üòú
On a more serious note, I think that's a pretty good idea and definitely something we should look into. Should we just extend the _manifest.lua?
return {
  version = '1.2.0',
  author = 'tom van dijck',
  description = 'this is an example module',
  files = {
    'blizzard.lua',
    'util.lua',
    'package.lua',
    'packageman.lua',
    'cache.lua',
    'consoles.lua',
    'context.lua',
    'prebake.lua',
    'unity.lua',
    'vpaths.lua',
    'json.lua',
    'visualsvn.lua',
    'export.lua',
  },
  -- future things
}
While I'm not a fan of breaking the current functionality (which we could fall back to), I think it's better to keep the module system simple. We don't want to end up having a half dozen mandatory files to create a module. Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/624#issuecomment-262489896,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.",I agree with this. I'll look into it.,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,11,https://github.com/premake/premake-core/pull/624#issuecomment-262630793,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","Is there any value to merging this as is? Or is it too dangerous with the broken version check? I'm indifferent, as I'm not depending on this feature for anything. If someone is this partial implementation might be beneficial.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/samsinsane,12,https://github.com/premake/premake-core/pull/624#issuecomment-262739846,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","Is there any value to merging this as is?

I would say there is value, you've added softrequire which alone is enough.

Or is it too dangerous with the broken version check?

It's probably better to keep the new manifest changes separate to this. It introduces people to the idea of softrequire and then in a few weeks we can release a bit of an ""overhaul"" of the module manifest.
I can't really see a reason why the broken version check would be dangerous though. So I guess if there's an argument against it, then my opinion might change?",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,13,https://github.com/premake/premake-core/pull/624#issuecomment-262823715,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","The problem is that by the time we get the version the module script has already been evaluated. If the module has made changes to the global environment, or installed overrides to other code, those will still be in place even if the version check fails.
This isn't a problem for require() because a version mismatch will hard fail and end everything then and there.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/samsinsane,14,https://github.com/premake/premake-core/pull/624#issuecomment-262832940,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","those will still be in place even if the version check fails.

That's not ideal, but the modules I've dealt with are dormant until some additional conditions are satisfied.
While not a great solution, maybe we should emit a warning that softrequire has failed to load the specified version of the module and currently this feature can result in unintended side effects? That's too long, but we emit warnings for deprecated APIs, why not emit warnings for ""beta"" features with known issues? I'm not overly attached to this idea, it seems like a pretty slippery slope. Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/tvandijck,15,https://github.com/premake/premake-core/pull/624#issuecomment-263330244,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","I'd merge it as is, and indeed just add a warning in both the documentation and the code on a version check failure.... We know this is a potential issue, we have an idea on how to fix it in the future, lets merge this to get the API down, and then work on the fix..",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/TurkeyMan,16,https://github.com/premake/premake-core/pull/624#issuecomment-276292937,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","So, I just had an idea... and then skipped half the coversation ;)
The issue is that (not) loading the module may pollute _G?
It might be possible to create a temporary table, assign it a metatable, and assign _G to the metatable's __index, then assign the temp table to _G. While the module is considering if it should be loaded, any writes to _G will go to the temp table instead.
After it's loaded, you can restore _G and if load was successful, copy all contents of the temp table into _G.
If load failed, then would-be pollution to _G will just disappear.
...?",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,17,https://github.com/premake/premake-core/pull/624#issuecomment-276338403,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","It might be possible to create a temporary table, assign it a metatable, and assign _G

I did consider it (Lua is the dark side, I think). But since our module system is still relatively new, Tom's suggestion of adding a ToC, even if it makes backwards compatibility a little weird, seems like the better long term solution.",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/tvandijck,18,https://github.com/premake/premake-core/pull/624#issuecomment-276427326,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","It might be possible to create a temporary table, assign it a metatable, and assign _G to the metatable's __index, then assign the temp table to _G.

tell me more... I actually want to do this for something else as well...
there is this page on sandboxing lua:
http://lua-users.org/wiki/SandBoxes
but in premake that doesn't seem to actually work, _G is still completely populated with all the public global methods premake exposes. Basically a pure sandbox would have an empty _G, but I think for that we would need an actual C function to create an entirely new context..
I didn't go that route yet..  but if that is useful for other things, like the module loading, then I'm totally in favor of adding such functionality...",True,{}
premake/premake-core,https://github.com/premake/premake-core,624,2016-11-09T19:09:33Z,2019-10-09T14:43:53Z,2019-10-20T19:31:01Z,CLOSED,False,100,6,3,https://github.com/starkos,Add `softrequire()`,3,[],https://github.com/premake/premake-core/pull/624,https://github.com/starkos,19,https://github.com/premake/premake-core/pull/624#issuecomment-540033728,"Behaves just like the existing require() call, but returns nil if the module does not exist instead of raising an error.","So, the problem with this one is that the return value mixes together ""module does not exist"" with ""module does exist but has issues"". We really it to:

Return nil if the module doesn't exist
Return nil if the version requirement isn't met, without actually loading the module
If it does exist and the version checks out, load the module and pass any errors through to the caller, matching the behavior of require().

At the moment we don't have calls to handle (1) or (2). We should probably have a call like locateModule() which returns the path to the module if found (and maybe a moduleExists() too). Then we'd need to break _VERSION out from the rest of the module so we could check it without loading (put it in the manifest maybe?).
Rather than continuing to leave this PR to rot, I opened issue #1344, which link here and to the original issue. If someone wants to tackle this, feel free to revive this PR or create a new one.",True,{}
premake/premake-core,https://github.com/premake/premake-core,625,2016-11-09T19:29:58Z,2016-11-11T04:17:39Z,2016-12-07T18:55:48Z,MERGED,True,8015,16,49,https://github.com/starkos,Move core modules into main repository; drop submodules,1,[],https://github.com/premake/premake-core/pull/625,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/625,"As discussed numerous times, get rid of the submodule approach for core modules and just included the sources directly in the main repository.
I have no idea how this will play with existing working copies. It might be necessary to manually clear out the existing submodules first.","As discussed numerous times, get rid of the submodule approach for core modules and just included the sources directly in the main repository.
I have no idea how this will play with existing working copies. It might be necessary to manually clear out the existing submodules first.",True,{}
premake/premake-core,https://github.com/premake/premake-core,625,2016-11-09T19:29:58Z,2016-11-11T04:17:39Z,2016-12-07T18:55:48Z,MERGED,True,8015,16,49,https://github.com/starkos,Move core modules into main repository; drop submodules,1,[],https://github.com/premake/premake-core/pull/625,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/625#issuecomment-259533125,"As discussed numerous times, get rid of the submodule approach for core modules and just included the sources directly in the main repository.
I have no idea how this will play with existing working copies. It might be necessary to manually clear out the existing submodules first.",We should probably also delete the repositories for these submodules once this is merged...,True,{}
premake/premake-core,https://github.com/premake/premake-core,625,2016-11-09T19:29:58Z,2016-11-11T04:17:39Z,2016-12-07T18:55:48Z,MERGED,True,8015,16,49,https://github.com/starkos,Move core modules into main repository; drop submodules,1,[],https://github.com/premake/premake-core/pull/625,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/625#issuecomment-259952986,"As discussed numerous times, get rid of the submodule approach for core modules and just included the sources directly in the main repository.
I have no idea how this will play with existing working copies. It might be necessary to manually clear out the existing submodules first.",Thanks! I'll take care of other repositories.,True,{}
premake/premake-core,https://github.com/premake/premake-core,625,2016-11-09T19:29:58Z,2016-11-11T04:17:39Z,2016-12-07T18:55:48Z,MERGED,True,8015,16,49,https://github.com/starkos,Move core modules into main repository; drop submodules,1,[],https://github.com/premake/premake-core/pull/625,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/625#issuecomment-265537774,"As discussed numerous times, get rid of the submodule approach for core modules and just included the sources directly in the main repository.
I have no idea how this will play with existing working copies. It might be necessary to manually clear out the existing submodules first.",Fixed with PR #648.,True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,None,1,https://github.com/premake/premake-core/pull/628,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/628#issuecomment-261770974,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","There's an API to stop files generated by the build command system from building, compilebuildoutputs. Does this fix the issue for you?
filter ""**/models/**.obj""

    -- Copy these files into the target directory while preserving the folder
    -- structure.

    buildcommands
    {
        os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
        os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
    }

    buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
    compilebuildoutputs ""Off""",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,None,3,https://github.com/premake/premake-core/pull/628#issuecomment-261771578,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.",It does not. It doesn't even seem to affect the generated project files in any way.,True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/628#issuecomment-261775234,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","Right, the gmake exporter kind of ignores the new compilebuildoutputs API. I guess technically it's not ""compiling"" the build output, but I see no reason why the API should be limited to compiling. I could be wrong, but I think the best solution would be to change the gmake exporter, around where you've edited, to handle the compilebuildoutputs API.
There's a few things that would need to change, this and this should be removed. Then this should become something like this:
-- identify the file type
local kind
local ext
if path.iscppfile(node.abspath) then
  kind = ""objects""
  ext = "".o""
elseif path.isresourcefile(node.abspath) then
  kind = ""resources""
  ext = "".res""
elseif node.generated and path.isobjectfile(node.abspath) then
  kind = ""objects""
elseif node.generated then
  kind = ""customfiles""
end

-- skip files that aren't compiled
if not kind then
  return
end

local objectname
if ext then
  objectname = ""$(OBJDIR)/"" .. node.objname .. ext
else
  objectname = node.relpath
end

-- if this file exists in all configurations, write it to
-- the project's list of files, else add to specific cfgs
if inall then
  table.insert(root[kind], objectname)
else
  for cfg in project.eachconfig(prj) do
    if incfg[cfg] then
      table.insert(configs[cfg][kind], objectname)
    end
  end
end
I'm not 100% sure if this will work, but something like this would be compatible with the compilebuildoutputs API. Using that API makes sense to me, but I could be wrong about this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,None,5,https://github.com/premake/premake-core/pull/628#issuecomment-261780145,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","If we did do this, it would no longer match current behaviour for .obj files, since this API defaults to off. This change could break existing projects, and it would no longer match default behaviour for Visual Studio.",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,None,6,https://github.com/premake/premake-core/pull/628#issuecomment-261782884,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","If we bundled this behaviour into compilebuildoutputs, we could do something weird like adding a default rule that turns this on for .obj files, but I don't think that's a good way to go about doing this.
I would rather keep this as a separate option.
Also, while a purely cosmetic change, it might make sense to change this from a flag to a linkbuildoutputs API, so that it matches how compilebuildoutputs works.
@tvandijck Any thoughts on all this? Looks like you wrote the compilebuildoutputs API in the first place.",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/628#issuecomment-262029524,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","the compilebuildoutputs api was added to compile c/cpp outputs from for example codegen solutions like google protobufs... I think it would be confusing to mix 'object' files into this...
I'm not against a ""linkbuildoutputs"" API. I certainly would prefer it over a flag, as we're mostly shying away from adding more flags...",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/628#issuecomment-262301546,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.","Can you make sure you document this on the wiki here as well?
https://github.com/premake/premake-core/wiki/Project-API",True,{}
premake/premake-core,https://github.com/premake/premake-core,628,2016-11-18T17:01:35Z,2016-11-22T17:08:02Z,2016-11-22T17:54:49Z,MERGED,True,151,4,5,None,Add NoLinkObjects flag,4,[],https://github.com/premake/premake-core/pull/628,None,9,https://github.com/premake/premake-core/pull/628#issuecomment-262314783,"The default behaviour for the Visual Studio and Makefile exporters is to link .obj files if a custom build command outputs them. There are some cases where we don't want this to happen, such as when dealing with Wavefront .obj model files.
I ran into this problem when trying to copy model files around with custom build commands:
filter ""**/models/**.obj""

	-- Copy these files into the target directory while preserving the folder
	-- structure.

	buildcommands
	{
		os.translateCommands ""{mkdir} \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\"""",
		os.translateCommands ""{copy} \""%{ file.relpath }\"" \""%{ path.join(cfg.buildtarget.directory, path.getdirectory(file.relpath)) }\""""
	}

	buildoutputs ""%{ path.join(cfg.buildtarget.directory, file.relpath) }""
The linker would try to link these files, resulting in a build error. This can now be solved by specifying the new NoLinkObjects flag for these files:
filter ""**/models/**.obj""

	flags ""NoLinkObjects""
Please let me know if there's anything that I missed or anything that needs changing.",Done.,True,{}
premake/premake-core,https://github.com/premake/premake-core,633,2016-11-21T16:43:50Z,2016-11-21T19:01:09Z,2016-11-23T19:31:48Z,MERGED,True,3,3,1,https://github.com/starkos,Fix data type conversion warnings in HTTP response handling,1,[],https://github.com/premake/premake-core/pull/633,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/633,"Gets rid of a few outstanding build warnings, which will fail anyone with ""warnings as errors"" enabled (like us).","Gets rid of a few outstanding build warnings, which will fail anyone with ""warnings as errors"" enabled (like us).",True,{}
premake/premake-core,https://github.com/premake/premake-core,634,2016-11-21T18:38:00Z,2016-11-22T17:09:55Z,2016-11-23T19:31:55Z,MERGED,True,63,1,3,https://github.com/starkos,Default rule variables to string when `kind` is not set,1,[],https://github.com/premake/premake-core/pull/634,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/634,"Because this is the most common case, we've been treating variables with no kind as an implicit string value. This maintains the previous behavior with the latest changes.","Because this is the most common case, we've been treating variables with no kind as an implicit string value. This maintains the previous behavior with the latest changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,635,2016-11-22T16:11:09Z,2016-11-22T18:48:03Z,2016-11-22T18:48:03Z,MERGED,True,13,2,1,https://github.com/robertop,Makefile generation - Don't force serial compilation for all projects,1,[],https://github.com/premake/premake-core/pull/635,https://github.com/robertop,1,https://github.com/premake/premake-core/pull/635,"Only restrict parallel compilation when using precompiled
headers. Currently, the generated makefile has a .NOTPARALLEL
target, which means that make will ignore parallel builds, even
for projects which can build in parallel just fine.","Only restrict parallel compilation when using precompiled
headers. Currently, the generated makefile has a .NOTPARALLEL
target, which means that make will ignore parallel builds, even
for projects which can build in parallel just fine.",True,{}
premake/premake-core,https://github.com/premake/premake-core,636,2016-11-23T20:52:00Z,2016-11-24T10:19:13Z,2016-11-29T16:24:34Z,MERGED,True,44,24,2,https://github.com/starkos,Fix MSC flags broken by PR #623,1,[],https://github.com/premake/premake-core/pull/636,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/636,Adjust the MSC tool adapter to behave the same way as the latest GCC and Clang adapters. Now uses a separate table of shared C/C++ command flags.,Adjust the MSC tool adapter to behave the same way as the latest GCC and Clang adapters. Now uses a separate table of shared C/C++ command flags.,True,{}
premake/premake-core,https://github.com/premake/premake-core,637,2016-11-23T21:02:15Z,2016-11-25T08:12:30Z,2016-11-29T16:24:43Z,MERGED,True,49,7,2,https://github.com/starkos,Fix VS'15 <GenerateDebugInformation> to match Update 3,1,[],https://github.com/premake/premake-core/pull/637,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/637,"As of VS'15 Update 3, the correct values for  are ""true"", ""false"", and ""DebugFastLink"". Previous of versions defaulted this element to ""true"", but would change it to ""Debug"" is set via the property page; that's been fixed in Update 3. The use of ""true"" and ""false"" is compatible with the earlier versions of VS'15.","As of VS'15 Update 3, the correct values for  are ""true"", ""false"", and ""DebugFastLink"". Previous of versions defaulted this element to ""true"", but would change it to ""Debug"" is set via the property page; that's been fixed in Update 3. The use of ""true"" and ""false"" is compatible with the earlier versions of VS'15.",True,{}
premake/premake-core,https://github.com/premake/premake-core,637,2016-11-23T21:02:15Z,2016-11-25T08:12:30Z,2016-11-29T16:24:43Z,MERGED,True,49,7,2,https://github.com/starkos,Fix VS'15 <GenerateDebugInformation> to match Update 3,1,[],https://github.com/premake/premake-core/pull/637,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/637#issuecomment-263331132,"As of VS'15 Update 3, the correct values for  are ""true"", ""false"", and ""DebugFastLink"". Previous of versions defaulted this element to ""true"", but would change it to ""Debug"" is set via the property page; that's been fixed in Update 3. The use of ""true"" and ""false"" is compatible with the earlier versions of VS'15.","We need a way to test for compile version.... SC2/Heroes still use Update 1 and for various reasons upgrading is simply not an option... this fix, while correct, breaks our build...
It would be awesome if there is some way we can simply run ""msdev.exe --version"" or whatever and actually know which one we're targeting.. I guess in the meantime I can simply introduce a ""vs2015.1"" action... but stuff like this is annoying...",True,{}
premake/premake-core,https://github.com/premake/premake-core,637,2016-11-23T21:02:15Z,2016-11-25T08:12:30Z,2016-11-29T16:24:43Z,MERGED,True,49,7,2,https://github.com/starkos,Fix VS'15 <GenerateDebugInformation> to match Update 3,1,[],https://github.com/premake/premake-core/pull/637,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/637#issuecomment-263361059,"As of VS'15 Update 3, the correct values for  are ""true"", ""false"", and ""DebugFastLink"". Previous of versions defaulted this element to ""true"", but would change it to ""Debug"" is set via the property page; that's been fixed in Update 3. The use of ""true"" and ""false"" is compatible with the earlier versions of VS'15.","Hmm‚Ä¶I did test with Update 1 before I pushed the PR and it seemed fine. That's unfortunate (and annoying, yes). Can you provide more information on what breaks, if only for future support questions?

It would be awesome if there is some way we can simply run ""msdev.exe --version"" or whatever and actually know which one we're targeting

That might be tricky to do in the public version, since we have so little control over the runtime environment. But if you can count on Visual Studio being on the PATH, you could run devenv /? and parse out the version string from the first line of output, and then override the generateDebugInformation() call if it hits your version range?
Another option might be a compatibility flag, maybe premake --update1 vs2015 or something. That is something we could put in the public version easily enough, though I don't know if it is any better than an entirely new action.",True,{}
premake/premake-core,https://github.com/premake/premake-core,638,2016-11-26T22:42:48Z,2016-12-01T20:44:17Z,2016-12-05T17:42:55Z,CLOSED,False,76,0,3,https://github.com/Remotion,Visual Studio 2017 RC support.,1,[],https://github.com/premake/premake-core/pull/638,https://github.com/Remotion,1,https://github.com/premake/premake-core/pull/638,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,638,2016-11-26T22:42:48Z,2016-12-01T20:44:17Z,2016-12-05T17:42:55Z,CLOSED,False,76,0,3,https://github.com/Remotion,Visual Studio 2017 RC support.,1,[],https://github.com/premake/premake-core/pull/638,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/638#issuecomment-264289215,,Updated with requested changes in #645,True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/nta,1,https://github.com/premake/premake-core/pull/639,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).","As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).",True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/639#issuecomment-263334190,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).","Also, I'm not sure how important it really is to keep VS2008 support... I don't even thing premake would build with VS2008 right now. I can test if anyone is interested..",True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/nta,3,https://github.com/premake/premake-core/pull/639#issuecomment-263370553,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).","Testing this would indeed be appreciated - if VS2008 is broken this could be simplified to always build using MSBuild and use a batch-style if condition (as done for file existence already, so the windows target depended on nmake anyway) to not upgrade if a specific MSDEV variable is specified.
A more decent solution would be checking environment variables to default to the toolset version that has currently had the vcvars*,bat file run, but within the makefile context that might be a problem.",True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/639#issuecomment-263373173,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).",I'll see if I can spin up a VM with VS2008 and give this a shot...,True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/639#issuecomment-265850986,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).","OK, finally had the time to check this in a VM with VS2008...
The current codebase does not build with VS2008..
Neither zlib or mbedtls that is embedded in premake compile at all, and the the bootstrap part itself, does not compile due to string_sha1.c's use of <stdint.h>, zlib and mbedtls suffer the same issues. Disabling that however gives me a successful version of premake without zlib or http support.
Quite honestly, I think it is going to be increasingly difficult to keep supporting an 8 year old version of Visual Studio. Certainly now that Visual Studio for non-commercial use is effectively free through the community editions.
We're going to have to decide at some point.... ""we gotta move on""..",True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/639#issuecomment-266058302,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).","FWIW, I'm okay with ""gotta move on"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,639,2016-11-28T02:50:42Z,2017-01-20T00:45:11Z,2017-01-20T00:45:11Z,MERGED,True,6,1,1,https://github.com/nta,Add MSBuild target to Bootstrap.mak,1,[],https://github.com/premake/premake-core/pull/639,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/639#issuecomment-266058830,"As I mentioned a while ago, Bootstrap.mak will not directly work when no full VS install is present.
This attempts to resolve said issue by adding a separate target (windows-msbuild) to the Makefile.
Another solution would be to handle upgrade behavior based on the MSDEV variable and use msbuild to build in all cases, but this would break (or require conditions, and I'm not too sure how well cross-platform Makefiles like those) for VS2008< which use VCBuild project files rather than the VS2010+ MSBuild .vcxproj w/ toolset configuration, and might potentially cause different behavior for build processes relying on the current windows target.
For VS2010+, there is no functional difference between binaries built by either method (except not specifying an explicit MSDEV argument will default to v110 due to the vs2012 toolchain setting - and these will not be upgraded) as devenv /Build will dispatch to MSBuild for these projects anyway (though handling solution parsing internally, rather than using MSBuild compatibility behavior).","@nta @starkos OK, in that case I guess we can just always use MSBuild to build through the bootstrap.",True,{}
premake/premake-core,https://github.com/premake/premake-core,641,2016-11-29T16:30:11Z,2016-11-29T18:00:40Z,2016-11-30T18:43:16Z,MERGED,True,43,39,3,https://github.com/starkos,Fix bugs introduced by shared compiler flags,1,[],https://github.com/premake/premake-core/pull/641,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/641,"Fix a few spots where the shared compiler flag changes (PR #623) caused things to misbehave.

Fixed duplicate flags in VC 200x external compiler options
Added missing C and CXX flag maps to Clang adapter
Reworked SNC adapter to follow same shared flags approach","Fix a few spots where the shared compiler flag changes (PR #623) caused things to misbehave.

Fixed duplicate flags in VC 200x external compiler options
Added missing C and CXX flag maps to Clang adapter
Reworked SNC adapter to follow same shared flags approach",True,{}
premake/premake-core,https://github.com/premake/premake-core,643,2016-11-30T19:20:10Z,2016-12-08T14:34:02Z,2016-12-12T12:29:44Z,MERGED,True,1,1,1,https://github.com/starkos,Fix VS mapping for `file.path` tokens,1,[],https://github.com/premake/premake-core/pull/643,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/643,"The %{file.path} token is an alias of %{file.relpath}, and should map to the same VS symbol. Specifically, it should be the relative path including the file name, and not just the path.","The %{file.path} token is an alias of %{file.relpath}, and should map to the same VS symbol. Specifically, it should be the relative path including the file name, and not just the path.",True,{}
premake/premake-core,https://github.com/premake/premake-core,643,2016-11-30T19:20:10Z,2016-12-08T14:34:02Z,2016-12-12T12:29:44Z,MERGED,True,1,1,1,https://github.com/starkos,Fix VS mapping for `file.path` tokens,1,[],https://github.com/premake/premake-core/pull/643,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/643#issuecomment-265235061,"The %{file.path} token is an alias of %{file.relpath}, and should map to the same VS symbol. Specifically, it should be the relative path including the file name, and not just the path.","I'm not sure why this one failed, the message is:
 warning: Could not find remote branch fix-vs-file-path-map to clone. 
 fatal: Remote branch fix-vs-file-path-map not found in upstream origin

Safe to ignore? It passes tests on Linux, this is just from macOS.",True,{}
premake/premake-core,https://github.com/premake/premake-core,643,2016-11-30T19:20:10Z,2016-12-08T14:34:02Z,2016-12-12T12:29:44Z,MERGED,True,1,1,1,https://github.com/starkos,Fix VS mapping for `file.path` tokens,1,[],https://github.com/premake/premake-core/pull/643,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/643#issuecomment-265753938,"The %{file.path} token is an alias of %{file.relpath}, and should map to the same VS symbol. Specifically, it should be the relative path including the file name, and not just the path.",Merging this despite the one CI failure; not sure why it couldn't see the branch when the other tests were passing.,True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/macsforme,1,https://github.com/premake/premake-core/pull/644,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.","This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.",True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/macsforme,2,https://github.com/premake/premake-core/pull/644#issuecomment-267262874,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.","Any thoughts? I'm trying to port the BZFlag build system to premake5, but it will be easier for me to sell our other developers on it if our premake scripts don't require workarounds, such as for this bug.",True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/macsforme,3,https://github.com/premake/premake-core/pull/644#issuecomment-267520634,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.","I can rework it to get rid of the double negative wording.

Consider making the internals of the loop a function instead with a simple build/link parameter.

Can you explain more what you mean by this? I'm new to lua, but from what I've read the only way to test whether a value is in a table is by iterating through it. So, as long as we depend on the existing project.getdependencies to distinguish between links and dependson, I don't see any other way except iterating through the list.
I could, however, probably move my call to project.getdependencies(""dependOnly"") outside of the parent loop, since that result doesn't change between dependencies (I just realized that). That should increase efficiency somewhat.",True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/644#issuecomment-267522355,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.","Basically, something like this:
function xcode.addDependency(tr, dep, build)
  -- create a child node for the dependency's xcodeproj
  local xcpath = xcode.getxcodeprojname(dep)
  local xcnode = tree.insert(tr.projects, tree.new(path.getname(xcpath)))
  xcnode.path = xcpath
  xcnode.project = dep
  xcnode.productgroupid = xcode.newid(xcnode.name, ""prodgrp"")
  xcnode.productproxyid = xcode.newid(xcnode.name, ""prodprox"")
  xcnode.targetproxyid  = xcode.newid(xcnode.name, ""targprox"")
  xcnode.targetdependid = xcode.newid(xcnode.name, ""targdep"")

  -- create a grandchild node for the dependency's link target
  local lprj = premake.workspace.findproject(prj.workspace, dep.name)
  local cfg = project.findClosestMatch(lprj, prj.configurations[1])
  node = tree.insert(xcnode, tree.new(cfg.linktarget.name))
  node.path = cfg.linktarget.fullpath
  node.cfg = cfg

  if build == false then
    node.nobuild = true
  end
end

-- Back inside xcode.buildprjtree
for _, dep in ipairs(project.getdependencies(prj, ""linkOnly"")) do
  addDependency(tr, dep, true)
end

for _, dep in ipairs(project.getdependencies(prj, ""dependOnly"")) do
  addDependency(tr, dep, false)
end",True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/macsforme,5,https://github.com/premake/premake-core/pull/644#issuecomment-270051575,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.","I fixed the inefficiency per your suggestion.
I looked at alternatives for the not nobuild line, but because some nodes are created outside of that loop, if there was a build variable which could be true, false, or nil, we would have to include items where build is either true or nil. Otherwise, we could test for build != false as you suggested, and exclude those files, but it seems to me that having a significant distinction between false and nil would be more confusing than the original not nobuild test (and kind of backwards from the conventional if test). If that's what you want I'll change it, but to me it seems less confusing the way it is now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/644#issuecomment-270091736,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.","Maybe renaming nobuild to exclude would be the better solution? It removes the issue of the variable name, and avoids the issue you described above. At this point I feel like I'm being a bit pedantic about this, but I've seen this trip people up before, plus it reads a bit silly ""if not no build then"" as opposed to ""if build then"" or ""if not exclude then"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,644,2016-12-01T04:08:45Z,2017-01-20T00:47:47Z,2017-01-20T05:43:11Z,MERGED,True,31,19,1,https://github.com/macsforme,"Don't treat ""dependson"" libraries as ""links"" libraries in Xcode",3,[],https://github.com/premake/premake-core/pull/644,https://github.com/macsforme,7,https://github.com/premake/premake-core/pull/644#issuecomment-270258462,"This patch corrects an issue with the xcode module where if you list a library you're building under ""dependson,"" Xcode would add it to the target dependencies but also to the link dependencies, which is undesired. With this fix, you can now use ""links"" and ""dependson"" as desired and they both work as intended.
Fixes #631.",Changed nobuild to excludefrombuild (so it's clear what the item is being excluded from).,True,{}
premake/premake-core,https://github.com/premake/premake-core,645,2016-12-01T20:43:50Z,2016-12-13T16:59:14Z,2016-12-13T16:59:16Z,MERGED,True,75,0,2,https://github.com/tvandijck,Add 'vs2017' target.,1,[],https://github.com/premake/premake-core/pull/645,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/645,"I took #638, and modified it slightly to correctly output the versionName.","I took #638, and modified it slightly to correctly output the versionName.",True,{}
premake/premake-core,https://github.com/premake/premake-core,648,2016-12-06T18:52:42Z,2016-12-07T17:47:33Z,2016-12-12T12:29:51Z,MERGED,True,50,4,2,https://github.com/starkos,Fix out-of-date sources in the Xcode module,1,[],https://github.com/premake/premake-core/pull/648,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/648,I must not have been on the latest revision when I merged the Xcode module into core. This catches things back up to the state of the submodule repository.,I must not have been on the latest revision when I merged the Xcode module into core. This catches things back up to the state of the submodule repository.,True,{}
premake/premake-core,https://github.com/premake/premake-core,649,2016-12-14T18:57:11Z,2016-12-15T06:46:05Z,2016-12-15T06:46:23Z,MERGED,True,1,1,1,https://github.com/jstewart-amd,Fix VS2015 sln file icon,1,[],https://github.com/premake/premake-core/pull/649,https://github.com/jstewart-amd,1,https://github.com/premake/premake-core/pull/649,"This is a minor fix to make the correct sln file icon appear in Windows.
The Icon Handler for sln files is apparently quite picky.
VS2015 sln files contain this:
# Visual Studio 14
Not this:
# Visual Studio 2015
Having 2015 instead of 14 does not appear to cause any major issues. But
you get the generic sln file icon in Explorer instead of the
VS2015-specific one.
Test results:
.\bin\release\premake5.exe test
Running action 'test'...
1435 tests passed, 0 failed in 1.76 seconds","This is a minor fix to make the correct sln file icon appear in Windows.
The Icon Handler for sln files is apparently quite picky.
VS2015 sln files contain this:
# Visual Studio 14
Not this:
# Visual Studio 2015
Having 2015 instead of 14 does not appear to cause any major issues. But
you get the generic sln file icon in Explorer instead of the
VS2015-specific one.
Test results:
.\bin\release\premake5.exe test
Running action 'test'...
1435 tests passed, 0 failed in 1.76 seconds",True,{}
premake/premake-core,https://github.com/premake/premake-core,649,2016-12-14T18:57:11Z,2016-12-15T06:46:05Z,2016-12-15T06:46:23Z,MERGED,True,1,1,1,https://github.com/jstewart-amd,Fix VS2015 sln file icon,1,[],https://github.com/premake/premake-core/pull/649,https://github.com/jstewart-amd,2,https://github.com/premake/premake-core/pull/649#issuecomment-267126365,"This is a minor fix to make the correct sln file icon appear in Windows.
The Icon Handler for sln files is apparently quite picky.
VS2015 sln files contain this:
# Visual Studio 14
Not this:
# Visual Studio 2015
Having 2015 instead of 14 does not appear to cause any major issues. But
you get the generic sln file icon in Explorer instead of the
VS2015-specific one.
Test results:
.\bin\release\premake5.exe test
Running action 'test'...
1435 tests passed, 0 failed in 1.76 seconds","Before the change, Explorer shows the generic sln file icon:

After the change, Explorer shows the version-specific file icon:

The version-specific file icons already work for vs2010, vs2012, and vs2013. This change is only for vs2015. (I don't run versions prior to vs2010, and I haven't tried vs2017 RC yet.)
This change was verified on Windows 7 SP1 with the Platform Update and Windows 10 Version 1607. And I've been running this change locally for ages (since alpha6) with no issues, including on previous Windows 10 versions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,649,2016-12-14T18:57:11Z,2016-12-15T06:46:05Z,2016-12-15T06:46:23Z,MERGED,True,1,1,1,https://github.com/jstewart-amd,Fix VS2015 sln file icon,1,[],https://github.com/premake/premake-core/pull/649,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/649#issuecomment-267252144,"This is a minor fix to make the correct sln file icon appear in Windows.
The Icon Handler for sln files is apparently quite picky.
VS2015 sln files contain this:
# Visual Studio 14
Not this:
# Visual Studio 2015
Having 2015 instead of 14 does not appear to cause any major issues. But
you get the generic sln file icon in Explorer instead of the
VS2015-specific one.
Test results:
.\bin\release\premake5.exe test
Running action 'test'...
1435 tests passed, 0 failed in 1.76 seconds",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,650,2016-12-15T16:50:25Z,2016-12-15T16:54:41Z,2016-12-15T16:54:47Z,CLOSED,False,25,14,1,https://github.com/starkos,"Remove defines and include directories ""None"" projects",1,[],https://github.com/premake/premake-core/pull/650,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/650,"Projects with a type of ""None"" do not build anything (are excluded from the build entirely, actually) and should not include these values.
I took the opportunity to also break the NMake elements out into a call array so they can be extended by modules a little more easily.","Projects with a type of ""None"" do not build anything (are excluded from the build entirely, actually) and should not include these values.
I took the opportunity to also break the NMake elements out into a call array so they can be extended by modules a little more easily.",True,{}
premake/premake-core,https://github.com/premake/premake-core,650,2016-12-15T16:50:25Z,2016-12-15T16:54:41Z,2016-12-15T16:54:47Z,CLOSED,False,25,14,1,https://github.com/starkos,"Remove defines and include directories ""None"" projects",1,[],https://github.com/premake/premake-core/pull/650,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/650#issuecomment-267380019,"Projects with a type of ""None"" do not build anything (are excluded from the build entirely, actually) and should not include these values.
I took the opportunity to also break the NMake elements out into a call array so they can be extended by modules a little more easily.",Rejecting‚Äîlet me add a unit test for this.,True,{}
premake/premake-core,https://github.com/premake/premake-core,653,2016-12-17T16:52:39Z,2017-01-04T16:42:32Z,2017-01-04T16:42:32Z,MERGED,True,10,9,1,https://github.com/raedwulf,Fix premake4.lua bootstrap build script,1,[],https://github.com/premake/premake-core/pull/653,https://github.com/raedwulf,1,https://github.com/premake/premake-core/pull/653,Fixes the premake4.lua build script with the new paths so it can be used for bootstrapping.,Fixes the premake4.lua build script with the new paths so it can be used for bootstrapping.,True,{}
premake/premake-core,https://github.com/premake/premake-core,654,2016-12-19T15:10:35Z,2016-12-20T15:26:42Z,2016-12-20T15:26:46Z,MERGED,True,74,28,2,https://github.com/starkos,"Omit NMake defines and include dirs when kind is ""None""",1,[],https://github.com/premake/premake-core/pull/654,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/654,"""None"" projects, by definiton, are never built, so these settings are unnecessary. Omit them so that changes to their value will not cause the generated project to change.
I also took the opportunity to split the NMake settings out into a call array, to make them easier for modules to customize.","""None"" projects, by definiton, are never built, so these settings are unnecessary. Omit them so that changes to their value will not cause the generated project to change.
I also took the opportunity to split the NMake settings out into a call array, to make them easier for modules to customize.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/vlad-ivanov-name,1,https://github.com/premake/premake-core/pull/659,Fixes #642,Fixes #642,True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/659#issuecomment-269091800,Fixes #642,"It would be great to get these moved to an API. Flags are bad enough, but multiple flags that compete with each other are the worst.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/659#issuecomment-270420067,Fixes #642,"Let's merge this right now, and I'll have a look this month (now that I'm back from vacation) at moving these things into a proper API..",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/659#issuecomment-275910881,Fixes #642,"What happened to the discussion about using existing language API to support dialects?
language ""C""
language ""C11""
language ""C++""
language ""C++14""
Etc... ?
(I was actually against this at one point... but I thought it was more-or-less agreed at that time?)",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/659#issuecomment-276010587,Fixes #642,"I don't recall seeing this, may have been before my time, but I do recall seeing this for the toolset API. gcc5.0, clang3.5, etc, is this what you're thinking of?",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/659#issuecomment-276036008,Fixes #642,"I can't find the original discussion. The idea was to merge the language and the standard variant into one token, e.g. language ""C++14"". A few people were against the idea, though I don't recall the exact reasons. I was in favor, since I felt the two were intrinsically connected, e.g. this makes no sense: language ""D""; standard ""C++14"".
As far as I know, no work has been done it so far.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/TurkeyMan,7,https://github.com/premake/premake-core/pull/659#issuecomment-276042311,Fixes #642,@samsinsane It was well before your time ;),True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/659#issuecomment-276047616,Fixes #642,"@TurkeyMan Ahh, the curses of youth. :P
@starkos On the other hand, language ""C++""; standard ""gnu++14"" does make sense, but language ""GNU++14""/language ""C++GNU++14"" wouldn't really. Well, they don't seem to make sense to me, but you might feel differently? :) I imagine this is where the disagreement would come from though.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/starkos,9,https://github.com/premake/premake-core/pull/659#issuecomment-276048046,Fixes #642,"GNU++14 is a C++ language standard, so I would expect language ""gnu++14"" to imply C++.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/659#issuecomment-276122692,Fixes #642,"I'm kind of in favor of the ""language"" modification... but it's a lot harder to keep that backwards compatible with the current flags.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/659#issuecomment-276197992,Fixes #642,"api.register {
		name = ""language"",
		scope = ""project"",
		kind = ""string"",
		allowed = {
			""C"",
			""C++"",
			""C#"",
		},
	}

this is a problem..... that will have to move to the config scope, if we go that route...
Because it will become config specific, and in some cases you'd want to specify the language on a per file basis too... the project scope does not allow that.
project 'a'
    language 'gnu++14'

for example... what is the visual studio backend going to do with that?
so we'd have to write:
project 'a'
    filter { 'toolset:gcc' } 
         language 'gnu++14'
    filter { 'toolset:msc' } 
         language 'c++'

or something like that.
To be honest, the 'language' keyword is going to be extremely hard to modify to include this.
Adding a 'standard' or 'languagestandard' keyword is going to be a lot easier. What is indeed somewhat strange is that that could lead to language 'd', standard 'c++14', which makes no sense..
So I'm proposing to do the following:
	api.register {
		name = ""languagestandard"",
		scope = ""config"",
		kind = ""string"",
                dependencies = { 'language' },
		allowed = function(cfg)
...
                       if (p.project.iscpp(cfg.project) then
                            return { ""c++02"", ""c++11"", ""c++14"" }
                        end
...
                end
		},
	}

that would allow us to validate it based on prior settings...
I added the dependencies field so we can add code to make sure language is set before languagestandard gets called...
all this however, adds quite a bit of complexity to premake as a whole... Although I have in the past ran into similar requirements, so it would be a welcome addition.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/starkos,12,https://github.com/premake/premake-core/pull/659#issuecomment-276211557,Fixes #642,"Only a little time here, but...

this is a problem..... that will have to move to the config scope, if we go that route...

Agreed. You can already specify a mix of C and C++ files within a project.

what is the visual studio backend going to do with that?

Our choice. It can silently fall back to generic C++, raise a warning and fallback to C++, or error. For the sake of this discussion, the problem exists with both approaches (i.e. what would VS do with languagestandard ""gnu++14""? Presumably the same thing it would do with language ""gnu++14"").

So I'm proposing to do the following

There is no way to get a meaningful value for project.iscpp() until after baking is complete. Even if you had a way to fetch the value at the time of the languagestandard() call, it could end up being changed later in the script.",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/tvandijck,13,https://github.com/premake/premake-core/pull/659#issuecomment-276217692,Fixes #642,"There is no way to get a meaningful value for project.iscpp() until after baking is complete.

good point indeed... although at the same time... if I move it to a config scope, it won't ever have a meaning full value... since it is no longer a single value for the project. While it makes no sense from a usefulness point of view, this would now be legal premake:
filter { ""debug"" }
   language ""C++11"" 
   files { '*.cpp' }
filter { ""release"" }
   language ""C#""
   files { '*.cs' }
so what is this code going to do now?
		if premake.project.isdotnet(prj) then
			premake.generate(prj, "".csproj"", vstudio.cs2005.generate)
		elseif premake.project.iscpp(prj) then
			premake.generate(prj, "".vcproj"", vstudio.vc200x.generate)
We need some form of validation that the input is sensible..",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/starkos,14,https://github.com/premake/premake-core/pull/659#issuecomment-276220748,Fixes #642,"We need some form of validation that the input is sensible..

Maybe something like this? :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/tvandijck,15,https://github.com/premake/premake-core/pull/659#issuecomment-276242981,Fixes #642,"yeah, exactly like that ;) I'll experiment a little with that this week then...
seems like a pretty big change, and not easy to keep backwards compatible...",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/starkos,16,https://github.com/premake/premake-core/pull/659#issuecomment-276340738,Fixes #642,"It might not be that bad. I would deprecate the flags, but not try to translate them to the equivalent language. Instead, just test for both language and flag everywhere they are used. So in our GNU configmap, for instance, you might have (very off the top of my head, untested):
flags {
   [""gnu++14""] = ""--gnu++14""
},
language {
  [""gnu++14""] = ""--gnu++14""
}

Probably will also want a table to map these to generic values for iscppproject(), etc.
languageMap = {
  [""gnu++14""] = ""c++""
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,659,2016-12-23T06:49:02Z,2017-01-04T16:46:05Z,2017-01-31T20:12:42Z,MERGED,True,2,0,2,https://github.com/vlad-ivanov-name,Add C11 flag support for GCC,1,[],https://github.com/premake/premake-core/pull/659,https://github.com/tvandijck,17,https://github.com/premake/premake-core/pull/659#issuecomment-276478106,Fixes #642,"I gave this a shot here
#686",True,{}
premake/premake-core,https://github.com/premake/premake-core,660,2016-12-24T05:05:44Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,69,1,2,https://github.com/CodeAnxiety,Prefixed Tokens,3,[],https://github.com/premake/premake-core/pull/660,https://github.com/CodeAnxiety,1,https://github.com/premake/premake-core/pull/660,"With this change I was looking to add some sugar, making it easier to use environmental variables.  I ended with something a little more extensible.
This is my first pull request.  üòÉ  I would greatly appreciate any feedback.","With this change I was looking to add some sugar, making it easier to use environmental variables.  I ended with something a little more extensible.
This is my first pull request.  üòÉ  I would greatly appreciate any feedback.",True,{}
premake/premake-core,https://github.com/premake/premake-core,660,2016-12-24T05:05:44Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,69,1,2,https://github.com/CodeAnxiety,Prefixed Tokens,3,[],https://github.com/premake/premake-core/pull/660,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/660#issuecomment-269073194,"With this change I was looking to add some sugar, making it easier to use environmental variables.  I ended with something a little more extensible.
This is my first pull request.  üòÉ  I would greatly appreciate any feedback.","This is a pretty good attempt, but unfortunately, it kind of breaks things and I think there's a few inefficiencies in there too. It's a bit hard to sum this up in a nice concise way, so I apologise if this gets a bit chaotic.
Firstly, the detoken system is quite complex, I'm not sure if you know this already or not, so I'll just point out that it already allows you to call arbitrary functions. %{os.getenv('path')} is entirely valid and will do the same as your %{env:path}, it will actually be slightly faster too as it doesn't need to escape path like your solution does. This seems insignificant, but if you provide a function instead of a string to detoken.addPrefix, it can be incredibly slow as it would need to escape the entire return value. For something like the path environment variable this is going to be slow, mine is 690 characters and has a bunch of backslashes that would need to be escaped.
Knowing that the detoken system allows for function calls, it allows for things such as %{wks.path:sub('foo', 'bar')}. Which obviously conflicts with your solution, and I think I actually use this somewhere. I think it's very important that we don't break the existing functionality as it's a lot more versatile than your solution. I think having more shortcuts is important though, so I don't think we should abandon what you're attempting here.
Finally, there's some issues with the tests. They don't seem to work in Linux and OSX, but this shouldn't be too hard to fix. In the resolvesEnvVars test, you have foo and bar around the wrong way in test.isequal. Finally, you need to add tests that run through more paths of that esc function, should \a come out as \\a or \\\\a? It currently does the latter.
Just to reiterate, I think the idea of a shortcut for environment variables is a great idea. I'm just not entirely sure how we could achieve that without breaking existing functionality.",True,{}
premake/premake-core,https://github.com/premake/premake-core,660,2016-12-24T05:05:44Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,69,1,2,https://github.com/CodeAnxiety,Prefixed Tokens,3,[],https://github.com/premake/premake-core/pull/660,https://github.com/CodeAnxiety,3,https://github.com/premake/premake-core/pull/660#issuecomment-269073611,"With this change I was looking to add some sugar, making it easier to use environmental variables.  I ended with something a little more extensible.
This is my first pull request.  üòÉ  I would greatly appreciate any feedback.","Thanks for the review.  üòÖ
All tests were passing, so I assumed it had no side effect.  That's probably naive of me.
I'm going to take a look from Linux and see where its going wrong.  I'll also see if I can make a more efficient version.  A lot of it comes from the desire to not touch detoken.expandvalue as much as possible, which meant it going through the loadstring evaluation.",True,{}
premake/premake-core,https://github.com/premake/premake-core,660,2016-12-24T05:05:44Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,69,1,2,https://github.com/CodeAnxiety,Prefixed Tokens,3,[],https://github.com/premake/premake-core/pull/660,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/660#issuecomment-269074802,"With this change I was looking to add some sugar, making it easier to use environmental variables.  I ended with something a little more extensible.
This is my first pull request.  üòÉ  I would greatly appreciate any feedback.","Thanks for the review.

No worries! Thanks for contributing this cool feature.

All tests were passing, so I assumed it had no side effect. That's probably naive of me.

That's a fair assumption, we don't test everything though, so that's our bad. Additionally, the point I made about the side effects is actually wrong, sorry about that. There's only problems when the prefixMap contains a matching string, which will probably quite rare, so you can probably ignore that point.

I'll also see if I can make a more efficient version. A lot of it comes from the desire to not touch detoken.expandvalue as much as possible, which meant it going through the loadstring evaluation.

That makes sense, I think you can use that loadstring a different way though. Have your prefix function return token, argument if token is a function skip the loadstring and do token(argument). You'll probably still want the setfenv call though. Otherwise, you pass token into loadstring like normal, but after the pcall you can check if result is a function, if it is and argument isn't nil, you call result(argument). This should eliminate the need for esc which I find to be pretty expensive, given it will iterate over the input 10 times.",True,{}
premake/premake-core,https://github.com/premake/premake-core,661,2016-12-26T05:28:11Z,2016-12-27T20:23:14Z,2016-12-28T14:29:28Z,CLOSED,False,239,4,9,https://github.com/CodeAnxiety,Windows Registry,4,[],https://github.com/premake/premake-core/pull/661,https://github.com/CodeAnxiety,1,https://github.com/premake/premake-core/pull/661,"Added the ability to access the Windows registry, as well as a few token prefixes for the 3 most common registry base keys.","Added the ability to access the Windows registry, as well as a few token prefixes for the 3 most common registry base keys.",True,{}
premake/premake-core,https://github.com/premake/premake-core,661,2016-12-26T05:28:11Z,2016-12-27T20:23:14Z,2016-12-28T14:29:28Z,CLOSED,False,239,4,9,https://github.com/CodeAnxiety,Windows Registry,4,[],https://github.com/premake/premake-core/pull/661,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/661#issuecomment-269478207,"Added the ability to access the Windows registry, as well as a few token prefixes for the 3 most common registry base keys.","It looks like you inadvertently based these changes on one of your earlier feature branches (see the token prefix commits). Can you redo it on a clean branch, so it only includes the registry changes?
Oops‚Äîdisregard, just noticed that you closed this one!",True,{}
premake/premake-core,https://github.com/premake/premake-core,661,2016-12-26T05:28:11Z,2016-12-27T20:23:14Z,2016-12-28T14:29:28Z,CLOSED,False,239,4,9,https://github.com/CodeAnxiety,Windows Registry,4,[],https://github.com/premake/premake-core/pull/661,https://github.com/CodeAnxiety,3,https://github.com/premake/premake-core/pull/661#issuecomment-269484210,"Added the ability to access the Windows registry, as well as a few token prefixes for the 3 most common registry base keys.","Sure, no problem",True,{}
premake/premake-core,https://github.com/premake/premake-core,662,2016-12-26T10:06:38Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,25,1,3,https://github.com/CodeAnxiety,New Flag: WholeArchive,2,[],https://github.com/premake/premake-core/pull/662,https://github.com/CodeAnxiety,1,https://github.com/premake/premake-core/pull/662,"Adds support for the GCC whole archive linker flags, which forces all symbols in libraries to be exported","Adds support for the GCC whole archive linker flags, which forces all symbols in libraries to be exported",True,{}
premake/premake-core,https://github.com/premake/premake-core,662,2016-12-26T10:06:38Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,25,1,3,https://github.com/CodeAnxiety,New Flag: WholeArchive,2,[],https://github.com/premake/premake-core/pull/662,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/662#issuecomment-269210715,"Adds support for the GCC whole archive linker flags, which forces all symbols in libraries to be exported","We're trying not to add anymore flags, instead you should make this an API like largeaddressaware, of kind boolean.",True,{}
premake/premake-core,https://github.com/premake/premake-core,662,2016-12-26T10:06:38Z,2016-12-27T20:23:14Z,2016-12-27T20:23:14Z,CLOSED,False,25,1,3,https://github.com/CodeAnxiety,New Flag: WholeArchive,2,[],https://github.com/premake/premake-core/pull/662,https://github.com/CodeAnxiety,3,https://github.com/premake/premake-core/pull/662#issuecomment-269222912,"Adds support for the GCC whole archive linker flags, which forces all symbols in libraries to be exported","Thanks, will do.",True,{}
premake/premake-core,https://github.com/premake/premake-core,663,2016-12-28T15:45:17Z,2017-01-31T20:32:42Z,2017-01-31T20:32:42Z,CLOSED,False,194,3,7,https://github.com/CodeAnxiety,Windows Registry,2,[],https://github.com/premake/premake-core/pull/663,https://github.com/CodeAnxiety,1,https://github.com/premake/premake-core/pull/663,Added a new os command getreg which takes a registry path and returns the value or nil,Added a new os command getreg which takes a registry path and returns the value or nil,True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,663,2016-12-28T15:45:17Z,2017-01-31T20:32:42Z,2017-01-31T20:32:42Z,CLOSED,False,194,3,7,https://github.com/CodeAnxiety,Windows Registry,2,[],https://github.com/premake/premake-core/pull/663,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/663#issuecomment-270421448,Added a new os command getreg which takes a registry path and returns the value or nil,"I like this, even though it's pretty windows specific....
that said, if I could make any change, it's the name ""getreg"", while I appreciate concise and short names as anyone else... This is such an OS specific thing, I'd rather be more explicit and call it ""getWin32RegistryValue"" or something like that...",True,"{'THUMBS_UP': ['https://github.com/starkos', 'https://github.com/samsinsane']}"
premake/premake-core,https://github.com/premake/premake-core,663,2016-12-28T15:45:17Z,2017-01-31T20:32:42Z,2017-01-31T20:32:42Z,CLOSED,False,194,3,7,https://github.com/CodeAnxiety,Windows Registry,2,[],https://github.com/premake/premake-core/pull/663,https://github.com/neico,3,https://github.com/premake/premake-core/pull/663#issuecomment-271604273,Added a new os command getreg which takes a registry path and returns the value or nil,"I'd even prefer it more if there were some OS specific namespaces for very specific features.
ex. windows.getregistry( <namespace, ex. ""HKLM"">[, <filter string, supporting regex>] ) (or let it be os.windows.*, doesn't really matter to me)
and maybe let that table have a metatable with a getvalue() function (which allows to add variants for getting different registry type values), this might look verbose and is a bit more work, but might abstract away the clutter that the registry is to a point that it can be used cross-platform.
That being said, some sort of registry could be implemented on other systems by reading in the files in /etc/ (/etc/default/ is a good example) so it might be possible to make a cross-platform solution sometime in the future",True,{}
premake/premake-core,https://github.com/premake/premake-core,663,2016-12-28T15:45:17Z,2017-01-31T20:32:42Z,2017-01-31T20:32:42Z,CLOSED,False,194,3,7,https://github.com/CodeAnxiety,Windows Registry,2,[],https://github.com/premake/premake-core/pull/663,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/663#issuecomment-271609633,Added a new os command getreg which takes a registry path and returns the value or nil,"We've been trying to move to camel-case for API functions, so I would probably use one of:
os.getWindowsRegistry()
os.setWindowsRegistry()

os.windows.getRegistry()
os.windows.setRegistry()

I wouldn't use ""Win32"" personally, even though it is sadly true. :)
Otherwise, this is definitely a nice feature to have.",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,663,2016-12-28T15:45:17Z,2017-01-31T20:32:42Z,2017-01-31T20:32:42Z,CLOSED,False,194,3,7,https://github.com/CodeAnxiety,Windows Registry,2,[],https://github.com/premake/premake-core/pull/663,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/663#issuecomment-276483257,Added a new os command getreg which takes a registry path and returns the value or nil,see: #687,True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/neico,1,https://github.com/premake/premake-core/pull/664,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/neico,2,https://github.com/premake/premake-core/pull/664#issuecomment-273954413,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","I've had those on my radar at first but didn't feel like rewriting half of that code just for them, while there's an easier replacement for the defunct method.
I guess I could rewrite the code to actually do so if there's a consensus about relying on them (which might or might not be discouraged in the future, getting windows versions / features never was reliable thanks to microsoft)",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/664#issuecomment-274005271,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...",@tvandijck I tend to agree that using those APIs should be the way forward. We will need to do this though.,True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/664#issuecomment-274126917,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","Yeah, the weird thing is that the GetVErsionEx is actually broken, unless you provide a manifest resource in your binary... which is just odd.... there is also the GetProductInfo API, which actually returns what GetVersionEx previously returned... but it's a Vista+ API only, so it would crash the binary on XP (which as much as I hate to admit it... we still target for Heroes and SC2).",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/664#issuecomment-274438283,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","so it would crash the binary on XP (which as much as I hate to admit it... we still target for Heroes and SC2).

That's unfortunate, my thoughts are with you and your colleagues!
Technically, we could still try to use GetProductInfo if it exists? There's other code in this file, I think, that checks if an API exists, and if not, it falls back to something else. We could do the same thing here?",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/664#issuecomment-274458881,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...",The code does currently use GetModuleHandle() and GetProcAddress() to check for the existence of the library and symbol before using them. That would be the approach to take to check for XP support (and to future-proof against other changes).,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/neico,7,https://github.com/premake/premake-core/pull/664#issuecomment-274575883,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","Well what action should I take now?

Keep the code as is (in that case merge it in)
Change to IsWindows*OrGreater which also requires a manifest (where IsWindows10OrGreater is only available with Windows 10, meaning it'll probably error on older versions)
Seems you found other functions that could be used, but also seem to have caveats (including the manifest requirement)

But my initial reasoning for using such a low level function was because it's what's windows has been using since the kernel exists (you can even get windows 2000 with it), and is unlikely to change,
while everything microsoft tried and build upon it has some issues depending on your windows version, which is not a good thing... (therefore I still consider my solution the best overall, even I myself don't like it that much, it's just how windows development is...)",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/664#issuecomment-274580479,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","My personal opinion?
Use GetProductInfo if available (through a GetProcAddress on kernel32.dll). This should cover anything Vista+. If not, use GetVersionEx as it is right now, which should cover anything prior to Vista.",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/664#issuecomment-276497172,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...","So I've actually been reading up on this, and this is even more complicated then I though..
Turns out, all methods we've mentioned so far are actually all deprecated, and according to this page:
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724429(v=vs.85).aspx
the only reliable way forward to get the version number of the OS, is by looking at the version of a system dll...
I quote:
To obtain the full version number for the operating system, call the GetFileVersionInfo function on one of the system DLLs, such as Kernel32.dll, then call VerQueryValue to obtain the \\StringFileInfo\\<lang><codepage>\\ProductVersion subblock of the file version information.
pretty crazy... I'll see if I can get that to work...",True,{}
premake/premake-core,https://github.com/premake/premake-core,664,2016-12-28T22:29:20Z,2017-02-01T17:19:44Z,2017-02-01T18:39:25Z,CLOSED,False,33,6,1,https://github.com/neico,bring os.getversion() on par with the present,1,[],https://github.com/premake/premake-core/pull/664,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/664#issuecomment-276720478,"sadly this doesn't include distribution names for linux, as that seems to be a major headache...
the best way would be probably cat /etc/*release and fetch the ID=* line, but I'm not up for writing that file parser...",#688 merged instead.,True,{}
premake/premake-core,https://github.com/premake/premake-core,668,2017-01-05T13:08:25Z,2017-01-20T17:34:21Z,2017-02-21T17:22:51Z,MERGED,True,34,10,4,https://github.com/mikejsavage,Fix sporadic failures when using make -j#,4,[],https://github.com/premake/premake-core/pull/668,https://github.com/mikejsavage,1,https://github.com/premake/premake-core/pull/668,"Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!","Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!",True,{}
premake/premake-core,https://github.com/premake/premake-core,668,2017-01-05T13:08:25Z,2017-01-20T17:34:21Z,2017-02-21T17:22:51Z,MERGED,True,34,10,4,https://github.com/mikejsavage,Fix sporadic failures when using make -j#,4,[],https://github.com/premake/premake-core/pull/668,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/668#issuecomment-270645959,"Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!","You'll need to fix up the failing tests, you can either check the CI build logs or run them locally via bin/release/premake5 test or bin\release\premake5.exe test. This issue is interesting, I've never encountered this at work and we also use -j4, do you know of any other requirements to trigger this issue?",True,{}
premake/premake-core,https://github.com/premake/premake-core,668,2017-01-05T13:08:25Z,2017-01-20T17:34:21Z,2017-02-21T17:22:51Z,MERGED,True,34,10,4,https://github.com/mikejsavage,Fix sporadic failures when using make -j#,4,[],https://github.com/premake/premake-core/pull/668,https://github.com/mikejsavage,3,https://github.com/premake/premake-core/pull/668#issuecomment-270648567,"Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!","I've only seen it happen in our CI environment, which is running on EC2. I imagine the scheduler isn't so friendly on a heavily loaded machine.",True,{}
premake/premake-core,https://github.com/premake/premake-core,668,2017-01-05T13:08:25Z,2017-01-20T17:34:21Z,2017-02-21T17:22:51Z,MERGED,True,34,10,4,https://github.com/mikejsavage,Fix sporadic failures when using make -j#,4,[],https://github.com/premake/premake-core/pull/668,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/668#issuecomment-270650726,"Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!","I've only seen it happen in our CI environment, which is running on EC2. I imagine the scheduler isn't so friendly on a heavily loaded machine.

Ah ok, thanks for that, very interesting!",True,{}
premake/premake-core,https://github.com/premake/premake-core,668,2017-01-05T13:08:25Z,2017-01-20T17:34:21Z,2017-02-21T17:22:51Z,MERGED,True,34,10,4,https://github.com/mikejsavage,Fix sporadic failures when using make -j#,4,[],https://github.com/premake/premake-core/pull/668,https://github.com/jspohr,5,https://github.com/premake/premake-core/pull/668#issuecomment-281273549,"Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!","Hi! Thanks for this fix, it's appreciated!
With latest premake, I still have sporadic failures when using PCHs:
++ make config=debug_x64 -C -j8 -k scape_core
==== Building scape_debug (debug_x64) ====
scapedebugpch.h
error: unable to open output file '../obj/macosx/gmake/x64/debug/scape_debug/scapedebugpch.h.gch': 'No such file or directory'
1 error generated.
make[1]: *** [../obj/macosx/gmake/x64/debug/scape_debug/scapedebugpch.h.gch] Error 1
make[1]: Target `all' not remade because of errors.
make: *** [scape_debug] Error 2
make: Target `scape_core' not remade because of errors.

Apparently, the output directory is not created until the first non-PCH target is compiled. I'm a total make noob (sorry), but I guess I could have a look at your change and try to apply it to the PCH target in the same way.
However, I wanted to check with you first, do you think my assumptions are correct?
Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,668,2017-01-05T13:08:25Z,2017-01-20T17:34:21Z,2017-02-21T17:22:51Z,MERGED,True,34,10,4,https://github.com/mikejsavage,Fix sporadic failures when using make -j#,4,[],https://github.com/premake/premake-core/pull/668,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/668#issuecomment-281413619,"Hi,
We've been running into sporadic failures when running a premake5 Makefile with make -j4. We get errors like: ../../external/uuid/clear.c:42:1: fatal error: opening dependency file ../../intermediates/gmake/common/linux64/Debug/clear.d: No such file or directory
Premake generates a target like all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET), which works fine for single threaded builds because the prerequisites are run left to right, but with -j4 the rule for $(TARGET) can get executed before the rule for $(OBJDIR), causing the error.
Adding $(OBJDIR) as a prerequisite for each object file is not ideal because it causes make; make to build the project twice. The first time make will see that $(OBJDIR) doesn't exist and build everything that depends on it, the second time make will see that $(OBJDIR) has been modified and build everything that depends on it again.
The (slightly unsatisfactory) solution that I know of is to call mkdir -p $(OBJDIR) every time you build an object.
I've attached a patch which implements the unsatisfactory solution for C++ Makefiles. It's possible that there's a similar bug for C# projects too, but I don't have any C# projects and I didn't want to write ""fixes"" that I can't test. Similarly, I'm not familiar with the premake codebase so this patch isn't as clean as it could be, but hopefully it's a start!","@jspohr I think that would be a correct assumption... it should be relatively easy. the gmake backend already has a simple method make.mkdir('$(OBJDIR)') to add conditional mkdir rules to a target, so it might be as easy as just adding that somewhere in the make.pchRules (line 510+) method.",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/671,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/671#issuecomment-272818548,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","This doesn't allow users to do pre-processing on .obj files, which is a pretty important feature to lose. If you're not already aware, .obj files are used for other things.",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/671#issuecomment-273223895,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","Unfortunately this is one of those things where premake just cannot do the right thing no matter what...
for YOU you need it to link as object files..., for OTHERS it needs to include Alias Wavefront files for some reason...
that said... if you do:
links { 'file.obj' } 

premake will add the object file as a link input... So you can work around the issue of premake not automatically interpreting the object file as a link input...
I think this comes down to a fundamental design decision in premake, where we treat things by extension, rather then having independent ""lists""... For example if the API was something like this:
files {
   ['clang']   = { '*.cpp', '*.c' }
   ['protoc'] = {'*.proto' }
   ['none']   = { '*.txt' }
}

it would be a possible to configure custom toolsets for specific sets of files, and in that case you could also do something like
file {
   ['linkable'] = { 'myobj.obj' }
   ['none'] = {'aliaswavefront.obj' }
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/671#issuecomment-273246244,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","I thought we were linking .obj files by default, with an API to turn it off?",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/671#issuecomment-273377951,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","That API only applies to generated files rather than the existing file. I think what @tvandijck has suggested is a decent idea, but I think something like this would be ""better"":
files {
  '**.cpp',
  '**.c',
  '**.h',
  'libs/**.obj',
  { ['none'] = { 'models/**.obj' } },
}

files { '**.cpp', '**.c', '**.h', 'libs/**.obj' }
files { ['none'] = { 'models/**.obj' } }
files would work exactly the same as it currently does, it would just have the extra ability to handle objects. I imagine it would need to handle ""overrides"" though, such as:
files { `**.obj` }
files { ['none'] = { 'models/**.obj' } }",True,{'THUMBS_UP': ['https://github.com/ifarbod']}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/ifarbod,6,https://github.com/premake/premake-core/pull/671#issuecomment-273430244,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","@samsinsane That's a nice idea üëç
However, I'm not sure how could I implement that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/671#issuecomment-273526506,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","Could we leverage buildaction(""None"") for this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,671,2017-01-15T22:39:47Z,2018-04-25T06:15:17Z,2018-04-25T06:15:23Z,CLOSED,False,27,5,1,https://github.com/ifarbod,Add support for MSVC object files,5,[],https://github.com/premake/premake-core/pull/671,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/671#issuecomment-273729033,"MSVC object files previously were detected wrong by premake's parser and the linker wouldn't link them, with this patch .obj files get placed into the right section in .vcxproj projects.
Given:
files
{
    ""file.obj""
}
It would end up like:
<None Include=""file.obj"" />
With this patch it will have the correct behavior:
<Object Include=""file.obj"" />
And ofcourse MSBuild would link them.","@starkos That would probably make more sense in the short term. Long term, maybe we want to have it all in the declaration of files?",True,{}
premake/premake-core,https://github.com/premake/premake-core,672,2017-01-19T18:58:12Z,2017-01-20T17:32:56Z,2017-01-20T17:32:59Z,MERGED,True,18,25,2,https://github.com/tvandijck,Fix issue with msc.getlinks and vstudio.getLinks returning different results when 'explicit' is true.,1,[],https://github.com/premake/premake-core/pull/672,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/672,"We have a project that works, as long as you don't specify a toolset...
So we just added ""toolset 'v140_xp'"" to one of our projects, and the project no longer links against any of our libraries in one of the configurations...","We have a project that works, as long as you don't specify a toolset...
So we just added ""toolset 'v140_xp'"" to one of our projects, and the project no longer links against any of our libraries in one of the configurations...",True,{}
premake/premake-core,https://github.com/premake/premake-core,673,2017-01-19T20:40:37Z,2017-01-20T17:32:21Z,2017-01-23T17:41:06Z,MERGED,True,12,2,2,https://github.com/tvandijck,Add additional tokens to fileconfig and vs2010+.,1,[],https://github.com/premake/premake-core/pull/673,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/673,"This provides us with a workaround for a fix that was made that broke our builds.
#643
we relied on ""path"" being the ""%(RelativeDir)"" token in visual studio... obviously wrong, but we relied on it, so we need another way to get there..","This provides us with a workaround for a fix that was made that broke our builds.
#643
we relied on ""path"" being the ""%(RelativeDir)"" token in visual studio... obviously wrong, but we relied on it, so we need another way to get there..",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/674,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/674#issuecomment-273998371,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","I vaguely recall this having issues unless you were running either Update 2 or 3 of VS2015, I might be remembering this wrong though. This also only applies to VS2015+, while this will actually emit into all VC++ projects.",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/674#issuecomment-274052691,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","Update 1 definitely has different behavior that 2 or 3, and even from the original release version. Not sure why they did it that way. I just ran a quick test on v3 and wasn't able to get the standard library errors Tom mentioned.",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/674#issuecomment-274127320,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","I only got the report from one of our engineers... not getting the errors here either, although we may have simply disabled the warnings/errors before I made this patch... I can certainly make it VS2015 only... Our game is on Update 1, seems to at least do no harm...",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/674#issuecomment-274436135,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","I must be remembering wrong, there were a few issues around the same time that I was dealing with, so the version of VS2015 could be completely unrelated.
We can merge as-is, I'd prefer if it was VS2015+ only but I'm not overly concerned by it. Up to you guys :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/674#issuecomment-274457733,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","I only got the report from one of our engineers... not getting the errors here either, although we may have simply disabled the warnings/errors before I made this patch...

Maybe we should hold off on this one?",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/674#issuecomment-276222616,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","This is a repro case:
_HAS_EXCEPTIONS.zip
On VS2015 you get:
1>C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include\limits(210): warning C4577: 'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/674#issuecomment-276429429,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.",Updated to be for VS2013 and later....,True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/674#issuecomment-276430753,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.",And added a test to specifically test the VS2010 vs VS2013 behavior differences.,True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/674#issuecomment-276545656,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","Updated to be for VS2013 and later....

Oh, I thought it was VS2015 and later, does this occur in VS2013 too?",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/674#issuecomment-276711465,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","Yes, at least with Update 5, and it appears to do no harm with earlier versions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,674,2017-01-20T00:43:05Z,2017-02-03T15:05:24Z,2017-02-03T15:05:28Z,MERGED,True,31,2,3,https://github.com/tvandijck,"Define _HAS_EXCEPTIONS=0 when exceptionhandling is ""off"".",4,[],https://github.com/premake/premake-core/pull/674,https://github.com/samsinsane,12,https://github.com/premake/premake-core/pull/674#issuecomment-276938092,"When exceptionhandling ""Off"" is declared, ""_HAS_EXCEPTIONS=0"" should also be declared to avoid warnings about exception use in the standard library.","Yes

Fair enough, we noticed the issue when we migrated from VS2013 to VS2015. I imagine we just never updated VS2013 beyond the base install. I've kicked off the OSX build, if someone would like to merge this once it's successful (it looks like it could be a while).",True,{}
premake/premake-core,https://github.com/premake/premake-core,675,2017-01-20T19:23:52Z,2017-01-20T22:16:38Z,2017-01-20T22:16:41Z,MERGED,True,4,1,1,https://github.com/tvandijck,update semver.lua,1,[],https://github.com/premake/premake-core/pull/675,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/675,Just latest from https://github.com/kikito/semver.lua,Just latest from https://github.com/kikito/semver.lua,True,{}
premake/premake-core,https://github.com/premake/premake-core,677,2017-01-21T12:10:57Z,2017-01-22T14:58:31Z,2017-01-22T14:58:31Z,CLOSED,False,33,0,1,https://github.com/ndk,set an additional paths for the masm,2,[],https://github.com/premake/premake-core/pull/677,https://github.com/ndk,1,https://github.com/premake/premake-core/pull/677,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,678,2017-01-22T02:14:27Z,2017-01-23T17:42:58Z,2017-01-23T22:33:10Z,MERGED,True,5,1,1,https://github.com/macsforme,Escape string literals passed to defines() for Xcode,1,[],https://github.com/premake/premake-core/pull/678,https://github.com/macsforme,1,https://github.com/premake/premake-core/pull/678,"This corrects an issue with defines() in Xcode. If you make a call such as defines ""MY_LITERAL=\""string literal\"""", you would expect the result to be -DMY_LITERAL=\""string\ literal\"". And indeed, that is the result in a makefile created by the gmake action. Furthermore, in the .xcodeproj, you will even see GCC_PREPROCESSOR_DEFINITIONS = (  ""MY_LITERAL=\""string literal\"""", );. However, when Xcode runs the compile command, it ends up being -DMY_LITERAL=string\ literal and compilation fails. With this change, values passed to defines() are escaped in Xcode and it will work equivalently to how it works in gmake.
It was possible before to pass a string literal to defines() for Xcode, but you had to escape it yourself (e.g., defines ""MY_LITERAL=\\\""value\\\""""). With this change, it eliminates the special platform check and handling you have to do because the behavior will be consistent. All types of arguments (string literals, numeric values, and names only) passed to defines() appear to function as expected after this change.","This corrects an issue with defines() in Xcode. If you make a call such as defines ""MY_LITERAL=\""string literal\"""", you would expect the result to be -DMY_LITERAL=\""string\ literal\"". And indeed, that is the result in a makefile created by the gmake action. Furthermore, in the .xcodeproj, you will even see GCC_PREPROCESSOR_DEFINITIONS = (  ""MY_LITERAL=\""string literal\"""", );. However, when Xcode runs the compile command, it ends up being -DMY_LITERAL=string\ literal and compilation fails. With this change, values passed to defines() are escaped in Xcode and it will work equivalently to how it works in gmake.
It was possible before to pass a string literal to defines() for Xcode, but you had to escape it yourself (e.g., defines ""MY_LITERAL=\\\""value\\\""""). With this change, it eliminates the special platform check and handling you have to do because the behavior will be consistent. All types of arguments (string literals, numeric values, and names only) passed to defines() appear to function as expected after this change.",True,{}
premake/premake-core,https://github.com/premake/premake-core,679,2017-01-24T04:49:18Z,2017-01-27T16:47:13Z,2017-06-16T09:46:37Z,MERGED,True,4,1,1,https://github.com/TurkeyMan,Better detect debug build,1,[],https://github.com/premake/premake-core/pull/679,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/679,"Symbols changes from ages ago have broken this test... I'm not sure how much it's used, but it seems to be wrong.","Symbols changes from ages ago have broken this test... I'm not sure how much it's used, but it seems to be wrong.",True,{}
premake/premake-core,https://github.com/premake/premake-core,680,2017-01-30T23:53:57Z,2017-01-31T00:54:15Z,2017-01-31T00:54:22Z,CLOSED,False,6,7,2,https://github.com/tvandijck,"Detect duplicate ""newoptions"" calls.",2,[],https://github.com/premake/premake-core/pull/680,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/680,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,680,2017-01-30T23:53:57Z,2017-01-31T00:54:15Z,2017-01-31T00:54:22Z,CLOSED,False,6,7,2,https://github.com/tvandijck,"Detect duplicate ""newoptions"" calls.",2,[],https://github.com/premake/premake-core/pull/680,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/680#issuecomment-276240856,,"This breaks more the I want to break, and it seems like defining them multiple times doesn't actually harm anything...",True,{}
premake/premake-core,https://github.com/premake/premake-core,681,2017-01-31T00:15:21Z,2017-02-01T16:57:33Z,2017-02-01T16:57:36Z,MERGED,True,77,1,5,https://github.com/tvandijck,functionlevellinking api.,2,[],https://github.com/premake/premake-core/pull/681,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/681,"adding:
functionlevellinking 'On' or 'Off'","adding:
functionlevellinking 'On' or 'Off'",True,{}
premake/premake-core,https://github.com/premake/premake-core,682,2017-01-31T00:20:54Z,2017-02-01T16:47:50Z,2017-02-01T16:47:54Z,MERGED,True,81,1,6,https://github.com/tvandijck,stringpooling api.,2,[],https://github.com/premake/premake-core/pull/682,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/682,"adding:
stringpooling 'On' or 'Off'","adding:
stringpooling 'On' or 'Off'",True,{}
premake/premake-core,https://github.com/premake/premake-core,682,2017-01-31T00:20:54Z,2017-02-01T16:47:50Z,2017-02-01T16:47:54Z,MERGED,True,81,1,6,https://github.com/tvandijck,stringpooling api.,2,[],https://github.com/premake/premake-core/pull/682,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/682#issuecomment-276338560,"adding:
stringpooling 'On' or 'Off'","I think new API's should emit options to makefiles at least

Not sure I understand this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,682,2017-01-31T00:20:54Z,2017-02-01T16:47:50Z,2017-02-01T16:47:54Z,MERGED,True,81,1,6,https://github.com/tvandijck,stringpooling api.,2,[],https://github.com/premake/premake-core/pull/682,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/682#issuecomment-276425130,"adding:
stringpooling 'On' or 'Off'","Not sure I understand this?

@TurkeyMan wants that all new API's work for all backends... gmake/xcode/vs20xx...
I thought about it... have no way of testing it... so didn't do it because I really don't have the resources available to me to support a gmake or xcode backend we don't use at Blizzard.
I'm happy to accept pull requests on my pull requests if anyone feel passionate about adding support for these flags in xcode and gmake...",True,{}
premake/premake-core,https://github.com/premake/premake-core,682,2017-01-31T00:20:54Z,2017-02-01T16:47:50Z,2017-02-01T16:47:54Z,MERGED,True,81,1,6,https://github.com/tvandijck,stringpooling api.,2,[],https://github.com/premake/premake-core/pull/682,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/682#issuecomment-276485152,"adding:
stringpooling 'On' or 'Off'",@TurkeyMan there is no equivalent setting for string pooling in gcc/clang btw.,True,{}
premake/premake-core,https://github.com/premake/premake-core,683,2017-01-31T00:24:37Z,2017-02-01T17:06:32Z,2017-02-02T12:12:49Z,MERGED,True,65,2,5,https://github.com/tvandijck,intrinsics api.,2,[],https://github.com/premake/premake-core/pull/683,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/683,"adding:
instrinsics 'On' or 'Off'","adding:
instrinsics 'On' or 'Off'",True,{}
premake/premake-core,https://github.com/premake/premake-core,683,2017-01-31T00:24:37Z,2017-02-01T17:06:32Z,2017-02-02T12:12:49Z,MERGED,True,65,2,5,https://github.com/tvandijck,intrinsics api.,2,[],https://github.com/premake/premake-core/pull/683,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/683#issuecomment-276548978,"adding:
instrinsics 'On' or 'Off'",Is it the case that this one doesn't have an off state?,True,{}
premake/premake-core,https://github.com/premake/premake-core,683,2017-01-31T00:24:37Z,2017-02-01T17:06:32Z,2017-02-02T12:12:49Z,MERGED,True,65,2,5,https://github.com/tvandijck,intrinsics api.,2,[],https://github.com/premake/premake-core/pull/683,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/683#issuecomment-276710304,"adding:
instrinsics 'On' or 'Off'","Yeah, I looked for one, but while there is a ""No"" in the Visual Studio IDE, I couldn't find a command line option to make it do the same thing... it didn't accept /Oi-",True,{}
premake/premake-core,https://github.com/premake/premake-core,683,2017-01-31T00:24:37Z,2017-02-01T17:06:32Z,2017-02-02T12:12:49Z,MERGED,True,65,2,5,https://github.com/tvandijck,intrinsics api.,2,[],https://github.com/premake/premake-core/pull/683,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/683#issuecomment-276895725,"adding:
instrinsics 'On' or 'Off'","What does the VS command line look like if you select ""No"" in the property grid?",True,{}
premake/premake-core,https://github.com/premake/premake-core,683,2017-01-31T00:24:37Z,2017-02-01T17:06:32Z,2017-02-02T12:12:49Z,MERGED,True,65,2,5,https://github.com/tvandijck,intrinsics api.,2,[],https://github.com/premake/premake-core/pull/683,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/683#issuecomment-276941794,"adding:
instrinsics 'On' or 'Off'","What does the VS command line look like if you select ""No"" in the property grid?

From the test I just did, nothing is added. This is Premake without it set:
/MP /GS /TC /analyze- /W4 /Zc:wchar_t 
/I""contrib\lua\src"" /I""contrib\zlib"" /I""contrib\libzip"" /I""contrib\curl\include"" /ZI /Gm- 
/Od /Fd""obj\Debug\Premake5\vc140.pdb"" /Zc:inline /fp:precise 
/D ""PREMAKE_COMPRESSION"" /D ""CURL_STATICLIB"" /D ""PREMAKE_CURL"" /D ""_DEBUG"" /D ""_CRT_SECURE_NO_DEPRECATE"" /D ""_CRT_SECURE_NO_WARNINGS"" /D ""_CRT_NONSTDC_NO_WARNINGS"" /D ""_UNICODE"" /D ""UNICODE"" 
/errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd 
/Oy- /MTd /Fa""obj\Debug\Premake5\"" /EHsc /nologo 
/Fo""obj\Debug\Premake5\"" /Fp""obj\Debug\Premake5\premake5.pch""

With it set to Yes:
/MP /GS /TC /analyze- /W4 /Zc:wchar_t 
/I""contrib\lua\src"" /I""contrib\zlib"" /I""contrib\libzip"" /I""contrib\curl\include"" /ZI /Gm- 
/Od /Fd""obj\Debug\Premake5\vc140.pdb"" /Zc:inline /fp:precise 
/D ""PREMAKE_COMPRESSION"" /D ""CURL_STATICLIB"" /D ""PREMAKE_CURL"" /D ""_DEBUG"" /D ""_CRT_SECURE_NO_DEPRECATE"" /D ""_CRT_SECURE_NO_WARNINGS"" /D ""_CRT_NONSTDC_NO_WARNINGS"" /D ""_UNICODE"" /D ""UNICODE"" 
/errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd 
/Oy- /Oi /MTd /Fa""obj\Debug\Premake5\"" /EHsc /nologo 
/Fo""obj\Debug\Premake5\"" /Fp""obj\Debug\Premake5\premake5.pch"" 

With it set to No:
/MP /GS /TC /analyze- /W4 /Zc:wchar_t 
/I""contrib\lua\src"" /I""contrib\zlib"" /I""contrib\libzip"" /I""contrib\curl\include"" /ZI /Gm- 
/Od /Fd""obj\Debug\Premake5\vc140.pdb"" /Zc:inline /fp:precise 
/D ""PREMAKE_COMPRESSION"" /D ""CURL_STATICLIB"" /D ""PREMAKE_CURL"" /D ""_DEBUG"" /D ""_CRT_SECURE_NO_DEPRECATE"" /D ""_CRT_SECURE_NO_WARNINGS"" /D ""_CRT_NONSTDC_NO_WARNINGS"" /D ""_UNICODE"" /D ""UNICODE"" 
/errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd 
/Oy- /MTd /Fa""obj\Debug\Premake5\"" /EHsc /nologo 
/Fo""obj\Debug\Premake5\"" /Fp""obj\Debug\Premake5\premake5.pch"" 

The second last line is where it appears to slot in.",True,{}
premake/premake-core,https://github.com/premake/premake-core,684,2017-01-31T00:35:03Z,2017-02-01T16:53:49Z,2017-02-01T16:53:52Z,MERGED,True,81,1,5,https://github.com/tvandijck,floatingpointexceptions api.,2,[],https://github.com/premake/premake-core/pull/684,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/684,"Adding:
floatingpointexceptions 'On' or 'Off'","Adding:
floatingpointexceptions 'On' or 'Off'",True,{}
premake/premake-core,https://github.com/premake/premake-core,685,2017-01-31T06:59:15Z,2017-06-20T20:10:23Z,2017-06-20T20:10:23Z,MERGED,True,35,6,2,https://github.com/TurkeyMan,Detect native source files.,1,[],https://github.com/premake/premake-core/pull/685,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/685,"Separated the concept of 'native' languages from language detection.
There is code that assumes native code == c/c++ code.
I also feel it's weird to conflate asm and obj-c... I can imagine myself writing code to detect those languages with the intent to do something language-specific that's probably not applicable to asm or whatever.","Separated the concept of 'native' languages from language detection.
There is code that assumes native code == c/c++ code.
I also feel it's weird to conflate asm and obj-c... I can imagine myself writing code to detect those languages with the intent to do something language-specific that's probably not applicable to asm or whatever.",True,{}
premake/premake-core,https://github.com/premake/premake-core,685,2017-01-31T06:59:15Z,2017-06-20T20:10:23Z,2017-06-20T20:10:23Z,MERGED,True,35,6,2,https://github.com/TurkeyMan,Detect native source files.,1,[],https://github.com/premake/premake-core/pull/685,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/685#issuecomment-276289527,"Separated the concept of 'native' languages from language detection.
There is code that assumes native code == c/c++ code.
I also feel it's weird to conflate asm and obj-c... I can imagine myself writing code to detect those languages with the intent to do something language-specific that's probably not applicable to asm or whatever.",My gmake fixes depend on this...,True,{}
premake/premake-core,https://github.com/premake/premake-core,685,2017-01-31T06:59:15Z,2017-06-20T20:10:23Z,2017-06-20T20:10:23Z,MERGED,True,35,6,2,https://github.com/TurkeyMan,Detect native source files.,1,[],https://github.com/premake/premake-core/pull/685,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/685#issuecomment-276337630,"Separated the concept of 'native' languages from language detection.
There is code that assumes native code == c/c++ code.
I also feel it's weird to conflate asm and obj-c... I can imagine myself writing code to detect those languages with the intent to do something language-specific that's probably not applicable to asm or whatever.","A good idea. A couple of thoughts, if you don't mind considering them while you're in the code:


If we move the file extension lists out of the functions themselves, people and modules would be able to add/remove new entries to suit.


Perhaps this would be better as a toolset function i.e. isbuildablefile()? Clang can build Objective C, for instance, but MSC cannot.",True,"{'THUMBS_UP': ['https://github.com/tvandijck', 'https://github.com/neico']}"
premake/premake-core,https://github.com/premake/premake-core,685,2017-01-31T06:59:15Z,2017-06-20T20:10:23Z,2017-06-20T20:10:23Z,MERGED,True,35,6,2,https://github.com/TurkeyMan,Detect native source files.,1,[],https://github.com/premake/premake-core/pull/685,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/685#issuecomment-309876826,"Separated the concept of 'native' languages from language detection.
There is code that assumes native code == c/c++ code.
I also feel it's weird to conflate asm and obj-c... I can imagine myself writing code to detect those languages with the intent to do something language-specific that's probably not applicable to asm or whatever.","I'm going to merge this, it's better then what we currently have, even though I still think some of this behavior should move to toolset.",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/686,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/686#issuecomment-278738853,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'",Can we merge this? or is there more work left?,True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/686#issuecomment-278848725,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","@tvandijck There's a few places where you remove checks for iscpp, these should probably stay. In some cases, there's more code in the function and by removing the check you're causing module developers to copy code from core. vs2010.generateProject is a good example of this, the D module will end up generating a .vcxproj and .visualdproj if you select any VS action for a D project.",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/686#issuecomment-279003563,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","by removing the check you're causing module developers to copy code from core.

not sure I understand this...

the D module will end up generating a .vcxproj and .visualdproj if you select any VS action for a D project.

I see that one, but the check was wrong... vcxproj is for both C and C++ projects.
I guess I can add a check to check for either.. I'm just wondering where this is needed exactly.
In that same boat, I then also think the ""project.isnative"" method is confusing, because there really isn't such a thing...",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/686#issuecomment-279289561,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","Well, ideally, we'd change the functions so that generic and specific code don't exist in the same function. Maybe for now, the best move would be to check for C and C++ and then, eventually, we can move the generic code out. Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/neico,6,https://github.com/premake/premake-core/pull/686#issuecomment-284302968,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","While you're at it, add the new switches for Visual Studio as well?
See: https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/
[""C++""] = ""/std:c++latest"",
[""C++14""] = ""/std:c++14""
imo it's a horrible thing that MS did there, especially since ""some"" of the standards aren't locked behind the switches, I really hope they'll sort this out in the future and maybe add switches for the older standards as well...
/permissive- will also need a place somewhere, but I'm not sure where that'd be (see https://blogs.msdn.microsoft.com/vcblog/2016/11/16/permissive-switch/)",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/686#issuecomment-292280107,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'",@samsinsane what changes do we still need here? other then what @neico suggests to add?,True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/686#issuecomment-293379087,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","I rebased this, and made some more modifications to solve some of the comments @samsinsane made about me removing some of the required ""iscpp"" calls... I think I got them all correct now, but please review.",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/686#issuecomment-293379913,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'",@neico this commit just modifies the flag/api.... I've not actually implemented usage of it inside of the Visual Studio action at all... Feel free to submit further PR's on top of this change for that once this is merged (or even against this PR).,True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/686#issuecomment-293669449,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","Are we good to merge? I think it looks pretty good, major props to @tvandijck for putting it together!",True,"{'THUMBS_UP': ['https://github.com/neico', 'https://github.com/samsinsane']}"
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,None,11,https://github.com/premake/premake-core/pull/686#issuecomment-293866237,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","Looks like the line endings in  src/actions/vstudio/vs2010_vcxproj.lua have changed, so I'm getting a huge merge conflict with #734. I feel like we should revert this and fix the line endings here.",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/samsinsane,12,https://github.com/premake/premake-core/pull/686#issuecomment-293867923,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","I've noticed that line ending issue, I'm fairly certain it was already in master from somewhere else. My apologies, I was talking about the line ending issue that existed prior to these changes. Technically, this PR is actually fixing the line endings, they were actually broken in #732. For some weird reason git won't show that anything changed, even though I'm looking at a diff between 4670158 and f3dae94 and it couldn't be more obvious that the line endings are different.",True,{}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,None,13,https://github.com/premake/premake-core/pull/686#issuecomment-294135886,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","I fixed this in my branch by running git rebase master -s recursive -X ignore-space-change and then manually fixing up line endings in every commit that touches src/actions/vstudio/vs2010_vcxproj.lua.
I think git provides facilities to automatically normalize line endings on push with a .gitattributes file, so we might want to look into that at some point.",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,686,2017-01-31T20:11:14Z,2017-04-13T11:21:49Z,2017-04-24T21:04:19Z,MERGED,True,2446,2316,22,https://github.com/tvandijck,Refactor language flags to go through the language API.,1,[],https://github.com/premake/premake-core/pull/686,https://github.com/neico,14,https://github.com/premake/premake-core/pull/686#issuecomment-294210236,"So you can use 'language ""C++11""' instead of 'flags { ""C++11"" }'","@aleksijuvani .gitattributes and .editorconfig together can avoid any of those.
if you throw in .clang-format you get even actual style guidelines enforced.
So yeah, imo any git project should at least use the first 2 mentioned files.",True,{}
premake/premake-core,https://github.com/premake/premake-core,687,2017-01-31T20:31:48Z,2017-01-31T21:11:22Z,2017-06-18T20:49:14Z,MERGED,True,194,3,7,https://github.com/tvandijck,Windows Registry,2,[],https://github.com/premake/premake-core/pull/687,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/687,"This is an update to #663
with the requested renames.","This is an update to #663
with the requested renames.",True,{}
premake/premake-core,https://github.com/premake/premake-core,687,2017-01-31T20:31:48Z,2017-01-31T21:11:22Z,2017-06-18T20:49:14Z,MERGED,True,194,3,7,https://github.com/tvandijck,Windows Registry,2,[],https://github.com/premake/premake-core/pull/687,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/687#issuecomment-276493489,"This is an update to #663
with the requested renames.","This was previously reviewed, and accepted...",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,687,2017-01-31T20:31:48Z,2017-01-31T21:11:22Z,2017-06-18T20:49:14Z,MERGED,True,194,3,7,https://github.com/tvandijck,Windows Registry,2,[],https://github.com/premake/premake-core/pull/687,https://github.com/neico,3,https://github.com/premake/premake-core/pull/687#issuecomment-285007022,"This is an update to #663
with the requested renames.","Shouldn't there be a test for non-windows as well that running the command doesn't negatively impact those? (missing function, corrupting data)
The current code certainly doesn't do anything harmful, but it might in the future due to a regression...
Just something that came to mind when looking for the call case (as the wiki doesn't provide this yet)",True,{}
premake/premake-core,https://github.com/premake/premake-core,688,2017-01-31T23:02:09Z,2017-02-01T17:19:14Z,2017-02-01T17:19:17Z,MERGED,True,82,121,2,https://github.com/tvandijck,bring os.getversion() on par with the present,3,[],https://github.com/premake/premake-core/pull/688,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/688,"@neico, this is your change, rebased against head + some additional changes...
see #664 for further discussion.","@neico, this is your change, rebased against head + some additional changes...
see #664 for further discussion.",True,"{'THUMBS_UP': ['https://github.com/neico'], 'HOORAY': ['https://github.com/neico'], 'HEART': ['https://github.com/neico']}"
premake/premake-core,https://github.com/premake/premake-core,688,2017-01-31T23:02:09Z,2017-02-01T17:19:14Z,2017-02-01T17:19:17Z,MERGED,True,82,121,2,https://github.com/tvandijck,bring os.getversion() on par with the present,3,[],https://github.com/premake/premake-core/pull/688,https://github.com/neico,2,https://github.com/premake/premake-core/pull/688#issuecomment-276568539,"@neico, this is your change, rebased against head + some additional changes...
see #664 for further discussion.","Something I just noticed is that the mac part isn't accounting for MacOS Server.
As I don't have mac or it's server I couldn't even start guessing how to detect it, so I'd probably leave it for a followup PR, unless you're able to integrate it yourself.
PS: here's also thinking that we maybe should respect apple's name changes (removing Mac infront, and later entirely renaming to macOS), notably

OS X Mountain Lion
OS X Mavericks
OS X Yosemite
OS X El Capitan
macOS Sierra

users shouldn't try to parse this kind of text anyway so it should be fine to adjust those",True,{}
premake/premake-core,https://github.com/premake/premake-core,688,2017-01-31T23:02:09Z,2017-02-01T17:19:14Z,2017-02-01T17:19:17Z,MERGED,True,82,121,2,https://github.com/tvandijck,bring os.getversion() on par with the present,3,[],https://github.com/premake/premake-core/pull/688,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/688#issuecomment-276710918,"@neico, this is your change, rebased against head + some additional changes...
see #664 for further discussion.","I'll take care of the MacOS names, and merge it after....
travis-ci's mac builds are down, so that's why they are failing.... I tested all these branches locally here on our own buildfarm, so we should be all good.",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,689,2017-01-31T23:26:23Z,2017-02-01T16:49:39Z,2017-02-01T16:49:42Z,MERGED,True,1,1,1,https://github.com/tvandijck,Fix for issue https://github.com/premake/premake-core/issues/669,1,[],https://github.com/premake/premake-core/pull/689,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/689,"when toolset is set through toolset (""clang""), the filter ""toolset:clang"" works, but when it's set through command line premake5 --cc=clang, it doesn't.","when toolset is set through toolset (""clang""), the filter ""toolset:clang"" works, but when it's set through command line premake5 --cc=clang, it doesn't.",True,{}
premake/premake-core,https://github.com/premake/premake-core,690,2017-02-09T18:48:54Z,2017-02-10T12:17:09Z,2017-04-24T21:06:01Z,MERGED,True,57,20,2,https://github.com/tvandijck,make buffered_io available for c code too.,1,[],https://github.com/premake/premake-core/pull/690,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/690,"I'm working on something that requires access to these functions, since they are really convenient to create large strings and xml/json text files.","I'm working on something that requires access to these functions, since they are really convenient to create large strings and xml/json text files.",True,{}
premake/premake-core,https://github.com/premake/premake-core,691,2017-02-09T18:52:39Z,2017-02-10T17:03:27Z,2017-02-10T17:03:30Z,MERGED,True,7,4,4,https://github.com/tvandijck,Fix a bunch of compile warnings.,2,[],https://github.com/premake/premake-core/pull/691,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/691,"This just takes care of some compiler warnings when compiling premake in 64-bit.
I think we should support and test both 32-bit and 64-bit versions of premake.","This just takes care of some compiler warnings when compiling premake in 64-bit.
I think we should support and test both 32-bit and 64-bit versions of premake.",True,{}
premake/premake-core,https://github.com/premake/premake-core,691,2017-02-09T18:52:39Z,2017-02-10T17:03:27Z,2017-02-10T17:03:30Z,MERGED,True,7,4,4,https://github.com/tvandijck,Fix a bunch of compile warnings.,2,[],https://github.com/premake/premake-core/pull/691,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/691#issuecomment-278846895,"This just takes care of some compiler warnings when compiling premake in 64-bit.
I think we should support and test both 32-bit and 64-bit versions of premake.",Sounds like a good idea to me.,True,{}
premake/premake-core,https://github.com/premake/premake-core,691,2017-02-09T18:52:39Z,2017-02-10T17:03:27Z,2017-02-10T17:03:30Z,MERGED,True,7,4,4,https://github.com/tvandijck,Fix a bunch of compile warnings.,2,[],https://github.com/premake/premake-core/pull/691,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/691#issuecomment-278929498,"This just takes care of some compiler warnings when compiling premake in 64-bit.
I think we should support and test both 32-bit and 64-bit versions of premake.","Updated to latest master branch, waiting for tests to pass‚Ä¶",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/rorydriscoll,1,https://github.com/premake/premake-core/pull/694,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/694#issuecomment-279248726,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true",This looks good‚Äîthanks for the tests! Giving Tom a chance to look before merging‚Ä¶,True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/jspohr,3,https://github.com/premake/premake-core/pull/694#issuecomment-461806442,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","Hello, I apologize for digging this up, but I'm confused regarding the ""FastLink"" behavior on VS2015.
When I use symbols ""FastLink"", Premake emits an element FullProgramDatabaseFile into the vcxproj, which causes a full PDB to be created. Might this be a workaround because there was no /DEBUG:FULL before VS2017?
Maybe this line:

  
    
      premake-core/modules/vstudio/vs2010_vcxproj.lua
    
    
         Line 1772
      in
      cda4f94
    
  
  
    

        
          
           if _ACTION >= ""vs2015"" and cfg.symbols == ""FastLink"" then 
        
    
  


just needs to be changed to
		if _ACTION == ""vs2015"" and cfg.symbols == ""FastLink"" then
instead?
Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/694#issuecomment-462138296,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","I'm not sure I'm following, are you using VS2015 or VS2017?",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/jspohr,5,https://github.com/premake/premake-core/pull/694#issuecomment-462299272,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","I'm using VS2015 mainly, but the issue is present on VS2017 as well. I don't really understand the implementation myself, that's why I'm failing to explain my issue with it properly. I assumed that I would benefit from FastLink even on VS2015, which I think I could if it wasn't for the FullProgramDatabaseFile element. I omitted the element using premake.override, and it seems to work fine, I get partial PDBs and faster link times with VS2015. But perhaps I'm missing something?
Additionally, I found it curious that even on VS2017 it appears FastLink's benefit is limited by emitting FullProgramDatabaseFile.",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/WorldofBay,6,https://github.com/premake/premake-core/pull/694#issuecomment-462319429,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","from blogs.msdn.com:

Developers can opt-out of this behavior by adding the ‚Äò/debug:full‚Äô linker switch to linker command line or by enabling the ‚ÄòGenerate Full Program Database File‚Äô

so premake does an opt-out of the fastlink option. that looks weird, especially weird sind it's already the case in #525
looks wrong to me, did you look if any test fails on your override? if not, file a PR and it should be safe to accept.",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/jspohr,7,https://github.com/premake/premake-core/pull/694#issuecomment-462330019,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","I added the override inside my project, I have little experience running tests or modifying premake itself. I was hoping that someone could provide some background on why the opt-out was added. AFAICT, the linker option was there since the feature was initially added to the vcxproj generator, maybe there was a reason to use it back then?
If this is really unintended behavior, creating a pull request to fix it would be easy, just remove the function vstudio.vc2010.fullProgramDatabaseFile altogether.",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/694#issuecomment-462351386,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","I would say it was unintended from @tvandijck, it's likely someone at Blizzard chose to opt out of FastLink and it was just brought across to here. If a PR is opened for this I'd be more than happy to review and accept it :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/WorldofBay,9,https://github.com/premake/premake-core/pull/694#issuecomment-462354865,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","the PR should be bigger than that an cover more of the vs2015 symbols handling. i've found some old test outputs:

  
    
      premake-core/modules/vstudio/tests/vc2010/test_link.lua
    
    
         Line 187
      in
      cda4f94
    
  
  
    

        
          
           	<GenerateDebugInformation>true</GenerateDebugInformation> 
        
    
  


since vs2015 this value is an enum instead of a boolean, so all of the tests refering to boolean output are likely wrong
i might look at it tomorrow if i find time",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/rorydriscoll,10,https://github.com/premake/premake-core/pull/694#issuecomment-462368337,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","To be clear, this PR didn't add the fast-link support. In VS2015, 'on' would produce a full PDB so fast-link was opt-in. In VS2017, 'on' would use fast-link by default so there was no way to get a full PDB anymore. This change just added back in a way to get a full PDB in VS2017.",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/WorldofBay,11,https://github.com/premake/premake-core/pull/694#issuecomment-462660005,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","@rorydriscoll your PR is not responsible for the strange behaviour, that has been in the code ever since tvandijk added support for the fastlink option for vs2015. the discussion just happens to be here.",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/WorldofBay,12,https://github.com/premake/premake-core/pull/694#issuecomment-462738041,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","digging into it i saw that vs2017 still puts a true and false in the vcxproj files even though it's an enum, so it's better to keep it. i'll keep the change simple then.",True,{}
premake/premake-core,https://github.com/premake/premake-core,694,2017-02-11T22:23:57Z,2017-02-13T17:02:03Z,2019-02-18T09:37:04Z,MERGED,True,41,1,3,https://github.com/rorydriscoll,Add support Visual Studio 2017 DebugFull option,1,[],https://github.com/premake/premake-core/pull/694,https://github.com/WorldofBay,13,https://github.com/premake/premake-core/pull/694#issuecomment-464657271,"In Visual Studio 2017, Microsoft changed the behavior of the default debug info flag to use fastlink rather than emitting a full PDB file. There is a new debug info flag /DEBUG:FULL that will work that same way that /DEBUG worked in Visual Studio 2015.
This change adds a new flag for symbols that will produce a full PDB. I think that this is the correct thing to do since symbols on should probably do whatever the current version of Visual Studio thinks is the default.
There's now the following logic for what to place in the GenerateDebugInformation attribute:




vs2017
vs2015
vs20XX




On
true
true
true


Off
false
false
false


FastLink
DebugFastLink
DebugFastLink
true


Full
DebugFull
true
true","bumping this again:
i tested it with an internal project with lots of dependencies and strangely it built faster with the fullprogramdatabase enabled (VS2017). the difference wasn't even that small, about 10%.
so i need someone to do a ""mini-benchmark"" on VS2015 and maybe a confirmation on VS2017.
won't add a PR if it's actually making our builds slower, i think you understand.",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/rorydriscoll,1,https://github.com/premake/premake-core/pull/695,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/695#issuecomment-279903151,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","VS2005 and VS2008 aren't required, they don't use the vcxproj code path.
@tvandijck is this correct move forward? Any additional symbol values will need to be added in five different locations, maybe more if the next release of VS adds the new value. This could have been done in the function with four lines instead:
lookup[p.ON] = ""true""
lookup[p.OFF] = ""false""
lookup[""FastLink""] = iif(_ACTION >= ""vs2015"", ""DebugFastLink"", ""true"")
lookup[""Full""] = iif(_ACTION >= ""vs2017"", ""DebugFull"", ""true"")",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/695#issuecomment-280070175,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","@samsinsane I asked for this change... so in my opinion it is the right move yes....
We already merged the change that made it do things locally in the function as you suggested.
I think that the VS2017 backend is going to diverge much more then just this simple change... for example VS2017 supports:  rather then specifying each file individually like what all previous versions of the IDE required...
In addition, I really don't like all those ""if _ACTION >= ""vs2015"""" etc if statements... for one it's a string compare that really only works because MS keeps giving it a name that coincides with the year of release, but if they ever changed it, that may no longer holds up.
So yes, in general I think this is a cleaner approach, despite it requiring slightly more code, and in my opinion we should rely on the action a lot more for storing ""action"" specific code or tables. Although the Visual Studio ""action"" is somewhat unique in that it shares one action's code to many actions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/695#issuecomment-280586667,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","I think that the VS2017 backend is going to diverge much more then just this simple change... for example VS2017 supports: rather then specifying each file individually like what all previous versions of the IDE required...

I don't have VS2017 but I've seen VS pick up new files in folders, I think this is part of VS2015 too. Anyway, that doesn't really matter. I would have expected VS2015 to diverge too given how much cross-platform support it gained, but core still assumes it's Windows-only and the above change kind of reiterates that assumption too.

In addition, I really don't like all those ""if _ACTION >= ""vs2015"""" etc if statements... for one it's a string compare that really only works because MS keeps giving it a name that coincides with the year of release, but if they ever changed it, that may no longer holds up.

We should definitely make helper functions for this that take the action name and then do a comparison internally against the version numbers defined in the action table. I'm not overly fond of the existing comparisons either, they're quite prone to errors without any warnings at all. Which helper functions could help with, e.g. ""vs2014 is not a valid action."".

So yes, in general I think this is a cleaner approach, despite it requiring slightly more code, and in my opinion we should rely on the action a lot more for storing ""action"" specific code or tables. Although the Visual Studio ""action"" is somewhat unique in that it shares one action's code to many actions.

I agree, for core, this is a cleaner approach. I disagree with this being cleaner for module developers though. How do you override a table under certain conditions, that may include the version of VS? Furthermore, any functions stored in the VS actions, would mean modules would require updates to add support for new versions of VS. Maybe this is a good thing though, I'm not sure.
I think this might require more discussion, or fleshing out, before we head down this path. I'm all for progress, but we seem to frequently ignore module development and that isn't good for the users that write or use modules. I am biased though, I've written two modules and I've extended a third, and I'd really like the modules to work for everyone, not just me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/695#issuecomment-280734750,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","I'm all for progress, but we seem to frequently ignore module development and that isn't good for the users that write or use modules. I am biased though, I've written two modules and I've extended a third, and I'd really like the modules to work for everyone, not just me.

I'm guilty of this for sure. Please do raise a ruckus if you see something that can be improved for module development, your bias is appreciated!",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/695#issuecomment-282058662,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","As it turns out however... as much as I love this change and think this is better then the hardcoded approach... it's apparently not even correct...
I just opened up #699 which is a clear indication that this table shouldn't live in the action, but in the toolset.. Along with a bunch of other tables.",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/695#issuecomment-282695469,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","@tvandijck the more I think about it, the less I think tables will work. Clang is a pretty good example, there will be a VS table for Linux, Android, iOS, Emscripten, Native Client and others. Within Android, there will be a table for the Microsoft implementation, the vs-android implementation and the NVidia implementation. Furthermore, there will be tables for the different versions of Clang supported by these systems and implementations. Also, there's currently two versions of the Microsoft implementation, which could also have incompatibilities.
Setting the language standard wasn't supported until VS2015 Update 3, a number of these VS extensions supported setting the language standard before that update was released. I'm not sure if any of the them changed to support the ""official"" element name and values, but this creates another discrepancy that can't be represented with a simple table.
I think lookup tables are definitely needed, floatingpoint ""default"" doesn't work in VS2010+ (#701). But I think using a global lookup table is a bad idea, floatingpoint ""strict"" causes Clang builds to fail with unknown flag errors (#700).
Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/695#issuecomment-282782743,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","@samsinsane Yeah, that is kind of what I mentioned in my previous comment.. I don't think putting this table in the action is going to be sufficient, and rather putting things in the toolset is going to be a better approach...
But even there, we currently have a single toolset for ""clang"" rather then clang3.7, clang3.8, etc... and the same for VS2015, we don't have a VS2015.1, VS2015.3, etc. And you mentioned a bunch of other combinations as well.... clang3.7 on android vs clang3.7 on windows apparently is also different... It's kind of messy to deal with, but we should probably think of a way to do that...",True,{}
premake/premake-core,https://github.com/premake/premake-core,695,2017-02-13T18:32:47Z,2017-04-06T19:03:34Z,2017-04-06T19:03:34Z,CLOSED,False,123,22,10,https://github.com/rorydriscoll,Move the Visual Studio symbols lookup table into the respective action files,3,[],https://github.com/premake/premake-core/pull/695,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/695#issuecomment-292279431,"I extracted the table information for the mapping between premake symbol flags and the various Visual Studio version flags.
I duplicated the tables for vs2005-vs2013 since I wasn't sure if I should rather define them somewhere in the vs2005 file and then have each action reference them or not. It looks like some of the functions do this already, but I didn't find an example of a table doing this.
Also, I wasn't sure whether to put the new symbol lookup table inside the vstudio table that's part of the action. I decided not to in the end since that table looks more like it's for the general visual studio version configuration.
I added a few more tests just to verify that every current version of visual studio generates the correct value for symbols on.","Closing this... we need to come up with a more general way of dealing with things as per the above discussion. Until that time what we currently do seems to be sufficient... I'm sorry I wasted your time with my request to do this work. It seemed a good idea to me, but is clearly contentious, and created some good questions and discussion.",True,{}
premake/premake-core,https://github.com/premake/premake-core,697,2017-02-20T15:17:43Z,2017-02-21T17:16:23Z,2017-02-21T17:16:25Z,MERGED,True,4,4,1,https://github.com/nsprljan,UTs fix: Use Windows registry locations that exist for built-in users,1,[],https://github.com/premake/premake-core/pull/697,https://github.com/nsprljan,1,https://github.com/premake/premake-core/pull/697,I have some Jenkins jobs that run premake UTs and fail because the registry keys used to test os.getWindowsRegistry do not exist for the SYSTEM user (which Jenkins runs under). So I've tried to find the keys that are always present on the system. Tested only on Win7.,I have some Jenkins jobs that run premake UTs and fail because the registry keys used to test os.getWindowsRegistry do not exist for the SYSTEM user (which Jenkins runs under). So I've tried to find the keys that are always present on the system. Tested only on Win7.,True,{}
premake/premake-core,https://github.com/premake/premake-core,697,2017-02-20T15:17:43Z,2017-02-21T17:16:23Z,2017-02-21T17:16:25Z,MERGED,True,4,4,1,https://github.com/nsprljan,UTs fix: Use Windows registry locations that exist for built-in users,1,[],https://github.com/premake/premake-core/pull/697,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/697#issuecomment-281411598,I have some Jenkins jobs that run premake UTs and fail because the registry keys used to test os.getWindowsRegistry do not exist for the SYSTEM user (which Jenkins runs under). So I've tried to find the keys that are always present on the system. Tested only on Win7.,Our jenkins seems to agree....,True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/jushar,1,https://github.com/premake/premake-core/pull/707,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)",True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/707#issuecomment-285417881,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","I'm OK with this change, but then I think we also want to only build/include/link against mbedtls on linux only... so more changes to the premake5.lua script would be needed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/707#issuecomment-285418547,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","FWIW, the only reasons I initially made the change from using OpenSSL to mbedtls, was that I could link against it statically, and don't get a premake binary on linux that only works on one specific distribution of linux.
On Mac & Windows that isn't really an issue, so using their internal 'tls' libraries is perfectly fine with me.",True,{'THUMBS_UP': ['https://github.com/jushar']}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/jushar,4,https://github.com/premake/premake-core/pull/707#issuecomment-285502991,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","It apparently doesn't skip the project anymore now. I guess it's caused by building the entire solution instead of only the Premake5 project.
Shall I revert the revert or do we keep it like this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/707#issuecomment-285507440,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","No that is fine....
the alternative would be to not include the library script at all on mac and windows... which is on this line: https://github.com/premake/premake-core/blob/master/premake5.lua#L195
an if not (os.is(""windows"") or os.is(""macosx"")) then around it would do it I think.",True,{'THUMBS_UP': ['https://github.com/jushar']}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/ddobrev,6,https://github.com/premake/premake-core/pull/707#issuecomment-285900735,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","Hello, is there anything to fix in this pull before merging it? This bug prevents https://github.com/mono/CppSharp from gaining support for VS 2017 because we're forced to update premake to get its support of VS 2017 but at the same time premake now has this bug which prevents us from downloading some dependencies.",True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/707#issuecomment-285977284,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)",Thanks everyone!,True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/ddobrev,8,https://github.com/premake/premake-core/pull/707#issuecomment-286057743,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)",Thank you for merging this. When will there be a new release of premake 5 with this fix?,True,{}
premake/premake-core,https://github.com/premake/premake-core,707,2017-03-08T21:57:19Z,2017-03-12T21:15:08Z,2017-03-13T10:28:26Z,MERGED,True,30,4,4,https://github.com/jushar,Fix missing CA certs on Windows,4,[],https://github.com/premake/premake-core/pull/707,https://github.com/starkos,9,https://github.com/premake/premake-core/pull/707#issuecomment-286069256,"This pull request fixes #706 (http.* with SSL doesn't work on Windows) and partially reverts the mbedtls transition.
The main reason for using Microsoft's own TLS implementation (Schannel) is that it doesn't explicitly require us to bundle the CA certs, but uses the the OS' built-in certs instead (see the last section for details: https://curl.haxx.se/docs/sslcerts.html)","Yes, it will be included in the next alpha release.",True,{}
premake/premake-core,https://github.com/premake/premake-core,710,2017-03-11T19:53:48Z,2017-03-13T16:10:34Z,2017-03-13T16:13:22Z,MERGED,True,1,1,1,https://github.com/Zeenobit,Treat *.inl files as headers,1,[],https://github.com/premake/premake-core/pull/710,https://github.com/Zeenobit,1,https://github.com/premake/premake-core/pull/710,"This addresses issues with Visual Studio and Intellisense when using *.inl files. If they're not treated as headers or source files, Intellisense fails to parse them correctly.
I can't see this having undesirable side effects for existing projects. Ideally, the user should be able to specify how different files should be treated.","This addresses issues with Visual Studio and Intellisense when using *.inl files. If they're not treated as headers or source files, Intellisense fails to parse them correctly.
I can't see this having undesirable side effects for existing projects. Ideally, the user should be able to specify how different files should be treated.",True,{}
premake/premake-core,https://github.com/premake/premake-core,710,2017-03-11T19:53:48Z,2017-03-13T16:10:34Z,2017-03-13T16:13:22Z,MERGED,True,1,1,1,https://github.com/Zeenobit,Treat *.inl files as headers,1,[],https://github.com/premake/premake-core/pull/710,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/710#issuecomment-286116427,"This addresses issues with Visual Studio and Intellisense when using *.inl files. If they're not treated as headers or source files, Intellisense fails to parse them correctly.
I can't see this having undesirable side effects for existing projects. Ideally, the user should be able to specify how different files should be treated.","I think this is reasonable. Ideally, buildaction would be able to override the default behavior.",True,{}
premake/premake-core,https://github.com/premake/premake-core,710,2017-03-11T19:53:48Z,2017-03-13T16:10:34Z,2017-03-13T16:13:22Z,MERGED,True,1,1,1,https://github.com/Zeenobit,Treat *.inl files as headers,1,[],https://github.com/premake/premake-core/pull/710,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/710#issuecomment-286156845,"This addresses issues with Visual Studio and Intellisense when using *.inl files. If they're not treated as headers or source files, Intellisense fails to parse them correctly.
I can't see this having undesirable side effects for existing projects. Ideally, the user should be able to specify how different files should be treated.","FWIW: this behavior is already entirely 'overridable'...
premake.vstudio.vc2010.categories.ClInclude.extensions

is just a table that can be accessed by anyone at all times...
sure, it's a little bit of 'internal' knowledge, and maybe some sort of API can be invented to do this in a more elegant way... but... you could technically do:
table.insert(premake.vstudio.vc2010.categories.ClInclude.extensions, "".inl"")",True,{}
premake/premake-core,https://github.com/premake/premake-core,712,2017-03-16T14:51:23Z,2017-03-17T15:34:04Z,2017-03-18T09:28:21Z,MERGED,True,5,4,2,https://github.com/dcourtois,fixed debugargs to allow duplicated arguments,1,[],https://github.com/premake/premake-core/pull/712,https://github.com/dcourtois,1,https://github.com/premake/premake-core/pull/712,"the pull request following this post : https://groups.google.com/forum/#!topic/premake-development/llEvfFwCaPs
The title and the posts are pretty self explanatory :)
Oh by the way, I also updated the unit test to ensure that duplicated arguments are allowed.","the pull request following this post : https://groups.google.com/forum/#!topic/premake-development/llEvfFwCaPs
The title and the posts are pretty self explanatory :)
Oh by the way, I also updated the unit test to ensure that duplicated arguments are allowed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,712,2017-03-16T14:51:23Z,2017-03-17T15:34:04Z,2017-03-18T09:28:21Z,MERGED,True,5,4,2,https://github.com/dcourtois,fixed debugargs to allow duplicated arguments,1,[],https://github.com/premake/premake-core/pull/712,https://github.com/dcourtois,2,https://github.com/premake/premake-core/pull/712#issuecomment-287384089,"the pull request following this post : https://groups.google.com/forum/#!topic/premake-development/llEvfFwCaPs
The title and the posts are pretty self explanatory :)
Oh by the way, I also updated the unit test to ensure that duplicated arguments are allowed.","Hi, don't know why the AppVeyor build failed ... would someone care to give this pull request a small review and merge it ? It's a really short and simple one :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,712,2017-03-16T14:51:23Z,2017-03-17T15:34:04Z,2017-03-18T09:28:21Z,MERGED,True,5,4,2,https://github.com/dcourtois,fixed debugargs to allow duplicated arguments,1,[],https://github.com/premake/premake-core/pull/712,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/712#issuecomment-287386830,"the pull request following this post : https://groups.google.com/forum/#!topic/premake-development/llEvfFwCaPs
The title and the posts are pretty self explanatory :)
Oh by the way, I also updated the unit test to ensure that duplicated arguments are allowed.",i gave appveyor a kick...,True,{}
premake/premake-core,https://github.com/premake/premake-core,712,2017-03-16T14:51:23Z,2017-03-17T15:34:04Z,2017-03-18T09:28:21Z,MERGED,True,5,4,2,https://github.com/dcourtois,fixed debugargs to allow duplicated arguments,1,[],https://github.com/premake/premake-core/pull/712,https://github.com/dcourtois,4,https://github.com/premake/premake-core/pull/712#issuecomment-287529310,"the pull request following this post : https://groups.google.com/forum/#!topic/premake-development/llEvfFwCaPs
The title and the posts are pretty self explanatory :)
Oh by the way, I also updated the unit test to ensure that duplicated arguments are allowed.",thanks a lot !,True,{}
premake/premake-core,https://github.com/premake/premake-core,713,2017-03-18T11:06:01Z,2017-03-18T11:11:33Z,2017-03-18T11:11:33Z,CLOSED,False,1470,586,18,https://github.com/vlad-ivanov-name,[not for merge] Add os.dirname to support more env vars in gmake rules ,3,[],https://github.com/premake/premake-core/pull/713,https://github.com/vlad-ivanov-name,1,https://github.com/premake/premake-core/pull/713,"This PR is intended for Blizzard fork, I just want to run AppVeyor before opening PR there.","This PR is intended for Blizzard fork, I just want to run AppVeyor before opening PR there.",True,{}
premake/premake-core,https://github.com/premake/premake-core,716,2017-03-24T18:54:48Z,2017-03-26T17:25:44Z,2017-03-26T17:25:48Z,MERGED,True,415,394,6,https://github.com/tvandijck,"Refactor curl code a bit, to be more in line with all the other code.",1,[],https://github.com/premake/premake-core/pull/716,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/716,"It splits the code up a little, and allows other files to reuse the curl wrappers.","It splits the code up a little, and allows other files to reuse the curl wrappers.",True,{}
premake/premake-core,https://github.com/premake/premake-core,716,2017-03-24T18:54:48Z,2017-03-26T17:25:44Z,2017-03-26T17:25:48Z,MERGED,True,415,394,6,https://github.com/tvandijck,"Refactor curl code a bit, to be more in line with all the other code.",1,[],https://github.com/premake/premake-core/pull/716,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/716#issuecomment-289178838,"It splits the code up a little, and allows other files to reuse the curl wrappers.",lgtm,True,{}
premake/premake-core,https://github.com/premake/premake-core,717,2017-03-24T18:58:46Z,2017-03-27T15:45:37Z,2017-03-27T15:45:40Z,MERGED,True,63,13,3,https://github.com/tvandijck,A few C# fixes,2,[],https://github.com/premake/premake-core/pull/717,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/717,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,717,2017-03-24T18:58:46Z,2017-03-27T15:45:37Z,2017-03-27T15:45:40Z,MERGED,True,63,13,3,https://github.com/tvandijck,A few C# fixes,2,[],https://github.com/premake/premake-core/pull/717,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/717#issuecomment-289493003,,I'll fix the whitespace @samsinsane thanx for noticing...,True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/718,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/718#issuecomment-289287898,,"I don't fully understand this API. Default is actually Unicode? I thought Default was always nothing, thus defaulting the value to whatever the action/toolset dictates? Also, just out of curiosity what does NotSet mean in VS? I thought it was just swapping between the A and W functions?",True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/718#issuecomment-289300186,,Apparently there is more to is then just A vs W.... @jrepp might be able to explain,True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/718#issuecomment-289418047,,"Default is actually Unicode? I thought Default was always nothing

This one has a bit of history, see this post to the developer forums. I have no objection to revisiting it though.",True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/718#issuecomment-289492217,,"FYI, Not Set is an actual setting, other then not specified, empty, which is what our ""Default"" does.",True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/718#issuecomment-289846391,,"If you create a new C++ project via the VS project wizard (do we still call them ""wizards""? why did we ever call them ""wizards""?) in the IDE, it sets CharacterSet to Unicode. So technically our default value is right, from that perspective.
Best I can tell ""NotSet"" equates to an ASCII or Single-Byte Character Set. Perhaps we could use one of those, more informative names instead? That would make it easier to translate them to the other toolsets as well. What do you think?",True,{}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/718#issuecomment-289870325,,"@starkos That sounds like an acceptable alternative yes, I'll adjust the PR, using ""ASCII""",True,{'THUMBS_UP': ['https://github.com/AccelMR']}
premake/premake-core,https://github.com/premake/premake-core,718,2017-03-24T19:01:26Z,2017-06-13T21:25:14Z,2017-06-13T21:25:16Z,MERGED,True,24,1,5,https://github.com/tvandijck,Adding support for NotSet characterset in VS2010+ (#79),2,[],https://github.com/premake/premake-core/pull/718,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/718#issuecomment-308211887,,"changed, and added some tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,719,2017-03-24T19:05:37Z,2017-03-27T15:39:17Z,2017-03-27T15:39:19Z,MERGED,True,34,4,2,https://github.com/tvandijck,"Sort categories in --help,",1,[],https://github.com/premake/premake-core/pull/719,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/719,"better align options when they get longer then 15 characters.
Compact options if no 'allowed' table is there.","better align options when they get longer then 15 characters.
Compact options if no 'allowed' table is there.",True,{}
premake/premake-core,https://github.com/premake/premake-core,721,2017-03-27T15:55:32Z,2017-03-28T17:20:02Z,2017-04-24T21:07:14Z,MERGED,True,8,23,2,https://github.com/tvandijck,Fixes to codelite module.,1,[],https://github.com/premake/premake-core/pull/721,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/721,"We ran into a problem where libs were not beeing linked in, if using the Library tag...
not sure if we're doing something wrong or not, but we've had this change in our repository for a while now, which resolved a lot of our issues.","We ran into a problem where libs were not beeing linked in, if using the Library tag...
not sure if we're doing something wrong or not, but we've had this change in our repository for a while now, which resolved a lot of our issues.",True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/SirLynix,1,https://github.com/premake/premake-core/pull/728,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ","Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ",True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/728#issuecomment-291192989,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ","Other then the use after free, I have no real objections... I think API wise relying less on lua and more on just C would be nice, but it's no breaking point for me.. we can always refactor that further if we wish for that..",True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/SirLynix,3,https://github.com/premake/premake-core/pull/728#issuecomment-291231283,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ","I'll try to think of something that will not impact performances much then,
especially there.

I'll use the stack wherever I can and remove those two functions then, I
hope I can make it in a not-so-dirty way, despite the Win32 calls.

Le 3 avr. 2017 8:24 PM, ""Tom van Dijck"" <notifications@github.com> a √©crit :
‚Ä¶
 ***@***.**** commented on this pull request.
 ------------------------------

 In src/host/utf8handling.c
 <#728 (comment)>:

 > @@ -0,0 +1,33 @@
 +/**
 + * \file   utf8handking.c
 + * \brief  Handles conversions between Unicode (UTF-8) and system native encoding (wide chars on Windows)
 + * \author Copyright (c) 2017 J√©r√¥me Leclercq and the Premake project
 + */
 +
 +#include ""premake.h""
 +#include ""stdlib.h""
 +
 +#ifdef PLATFORM_WINDOWS
 +const char* utf8_fromwide(lua_State* L, const wchar_t* wstr)

 I agree that that is not preferable... In general I was just hoping that a
 malloc for this isn't something we need... mostly because these match
 functions are used ALOT, and so have quite a bit of performance impact...
 on our project we're already hitting 2GB of memory use.

 if that removes the need for this method entirely, then I'm OK with just
 calling it in place to be entirely honest, and simply use stack for this...

 ‚Äî
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#728 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AC3QXXZ5ZGwbTQqZrj32mBKwtbFqfRQAks5rsTldgaJpZM4Mw07h>
 .",True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/fun4jimmy,4,https://github.com/premake/premake-core/pull/728#issuecomment-291232581,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ",Some of this stuff was discussed as part of #629. I never got round to doing anything that was proposed but I think this might fix that issue as well.,True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/SirLynix,5,https://github.com/premake/premake-core/pull/728#issuecomment-291413566,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ","I remade this using only stack memory (and I'm wondering why I didn't do that in the first place..).
In case any conversion fails, it will trigger a Lua error, as discussed in #629.
I'm wondering, should I apply the same changes to the integrated Lua library to support unicode operations? (Talking about io library)",True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/728#issuecomment-291545982,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ","Thank you very much, that looks pretty clean to me... ready to merge as far as I'm concerned.

I'm wondering, should I apply the same changes to the integrated Lua library to support unicode operations? (Talking about io library)

We could, but lets make that a separate pull request.. I'm not too fond of actually changing lua itself to be honest, since that makes moving between versions of Lua really cumbersome.. So I'd rather see extensions to the io library to support this... like an io.open_utf8(...) or something of that kind, I don't know how that would look really.. so I don't really have a very well thought out opinion on this, but it should be fairly straightforward to 'override' the standard io library with methods that support utf8 instead.
I would imagine that really all you need to override is the io.open method? all the other methods work on stream handles (FILE*, etc), so those should not be affected.",True,{}
premake/premake-core,https://github.com/premake/premake-core,728,2017-04-02T15:03:53Z,2017-04-04T18:00:54Z,2017-04-04T18:00:54Z,MERGED,True,99,22,13,https://github.com/SirLynix,Add support of UTF-8 for Windows,6,[],https://github.com/premake/premake-core/pull/728,https://github.com/SirLynix,7,https://github.com/premake/premake-core/pull/728#issuecomment-291563100,"Hi there,
We're using Premake at my job and we had some troubles when trying to copy files from/to locations containing unicode characters, the reason for this is that Premake uses the ASCII version of the Windows API.
I made a fix by adding two helper functions (utf8_fromwide and utf8_towide) and using them with the Unicode Windows API everywhere I could (I just didn't do it for the os.getpass function, making the Windows console working with unicode is not an easy thing to do).
Anyway, tell me if I need to fix some stuff, as I'm not sure I did everything in the ""right"" (premake-team) way üòÑ","No problem with making another pull request.
I can override the files functions of io without touching the Lua library, but I think I'll have to override more than one function (since Windows Unicode stuff doesn't work with FILE* handles AFAIK, I'll check that).
I don't think making a separate Unicode open function will work in this case because of the io metatable (for calls like handle:read()), so I'll probably override, except if I find a way to make Unicode works with FILE* handles.",True,{}
premake/premake-core,https://github.com/premake/premake-core,729,2017-04-02T17:07:45Z,2017-04-04T16:02:59Z,2017-04-04T16:02:59Z,MERGED,True,1629,0,5,None,Add JSON API,3,[],https://github.com/premake/premake-core/pull/729,None,1,https://github.com/premake/premake-core/pull/729,"In order to fix some issues with the NuGet support, we need to be able to parse JSON responses from the NuGet API. See #569 (comment).
So, to that end, this pull request adds two new functions, json.encode and json.decode. I believe these functions will also be useful to other people in cases where they need to interact with web APIs.
Internally, these functions use Jeffrey Friedl's JSON library, so they should be relatively field-tested.
I ran some of the NuGet API responses through this, and from what I can tell, they're indeed getting decoded correctly.","In order to fix some issues with the NuGet support, we need to be able to parse JSON responses from the NuGet API. See #569 (comment).
So, to that end, this pull request adds two new functions, json.encode and json.decode. I believe these functions will also be useful to other people in cases where they need to interact with web APIs.
Internally, these functions use Jeffrey Friedl's JSON library, so they should be relatively field-tested.
I ran some of the NuGet API responses through this, and from what I can tell, they're indeed getting decoded correctly.",True,{}
premake/premake-core,https://github.com/premake/premake-core,729,2017-04-02T17:07:45Z,2017-04-04T16:02:59Z,2017-04-04T16:02:59Z,MERGED,True,1629,0,5,None,Add JSON API,3,[],https://github.com/premake/premake-core/pull/729,None,2,https://github.com/premake/premake-core/pull/729#issuecomment-291000199,"In order to fix some issues with the NuGet support, we need to be able to parse JSON responses from the NuGet API. See #569 (comment).
So, to that end, this pull request adds two new functions, json.encode and json.decode. I believe these functions will also be useful to other people in cases where they need to interact with web APIs.
Internally, these functions use Jeffrey Friedl's JSON library, so they should be relatively field-tested.
I ran some of the NuGet API responses through this, and from what I can tell, they're indeed getting decoded correctly.","As a side note, the json.decode function throws an error if parsing fails. Do we want to go with that, or maybe return nil and an error message like http.get does?",True,{}
premake/premake-core,https://github.com/premake/premake-core,729,2017-04-02T17:07:45Z,2017-04-04T16:02:59Z,2017-04-04T16:02:59Z,MERGED,True,1629,0,5,None,Add JSON API,3,[],https://github.com/premake/premake-core/pull/729,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/729#issuecomment-291190361,"In order to fix some issues with the NuGet support, we need to be able to parse JSON responses from the NuGet API. See #569 (comment).
So, to that end, this pull request adds two new functions, json.encode and json.decode. I believe these functions will also be useful to other people in cases where they need to interact with web APIs.
Internally, these functions use Jeffrey Friedl's JSON library, so they should be relatively field-tested.
I ran some of the NuGet API responses through this, and from what I can tell, they're indeed getting decoded correctly.","Do we want to go with that, or maybe return nil and an error message like http.get does?

good question... I don't really have an opinion one way or the other... the nil+error might be more convenient in the long run, but it hasn't really been an issue for us here with that same json plugin... We've just not wrapped it in our code right now, but I'm somewhat liking that idea.",True,{}
premake/premake-core,https://github.com/premake/premake-core,729,2017-04-02T17:07:45Z,2017-04-04T16:02:59Z,2017-04-04T16:02:59Z,MERGED,True,1629,0,5,None,Add JSON API,3,[],https://github.com/premake/premake-core/pull/729,None,4,https://github.com/premake/premake-core/pull/729#issuecomment-291478709,"In order to fix some issues with the NuGet support, we need to be able to parse JSON responses from the NuGet API. See #569 (comment).
So, to that end, this pull request adds two new functions, json.encode and json.decode. I believe these functions will also be useful to other people in cases where they need to interact with web APIs.
Internally, these functions use Jeffrey Friedl's JSON library, so they should be relatively field-tested.
I ran some of the NuGet API responses through this, and from what I can tell, they're indeed getting decoded correctly.","I did the nil and error message thing for json.decode. If we don't want that, just revert the commit.
I tried doing the same thing for json.encode, but turns out that the library is wildly inconsistent with encoding errors. Sometimes it would raise a Lua error and sometimes it would set the error message. I guess we could get around this with pcall, but I decided to leave it as it is ‚Äì raise errors if encoding fails.",True,{}
premake/premake-core,https://github.com/premake/premake-core,729,2017-04-02T17:07:45Z,2017-04-04T16:02:59Z,2017-04-04T16:02:59Z,MERGED,True,1629,0,5,None,Add JSON API,3,[],https://github.com/premake/premake-core/pull/729,None,5,https://github.com/premake/premake-core/pull/729#issuecomment-291494059,"In order to fix some issues with the NuGet support, we need to be able to parse JSON responses from the NuGet API. See #569 (comment).
So, to that end, this pull request adds two new functions, json.encode and json.decode. I believe these functions will also be useful to other people in cases where they need to interact with web APIs.
Internally, these functions use Jeffrey Friedl's JSON library, so they should be relatively field-tested.
I ran some of the NuGet API responses through this, and from what I can tell, they're indeed getting decoded correctly.","Apparently the library expects us to abort in the encode error handler (but unintuitively, it's not required in the decode error handler). If we abort in the error handler, we get proper error messages. I've made both json.encode and json.decode now return nil + error message on error.",True,{}
premake/premake-core,https://github.com/premake/premake-core,730,2017-04-04T15:23:08Z,2017-04-04T16:04:58Z,2017-04-04T16:04:58Z,MERGED,True,2,0,1,None,Update .gitignore,1,[],https://github.com/premake/premake-core/pull/730,None,1,https://github.com/premake/premake-core/pull/730,I noticed these Visual Studio specific files showing up as untracked changes while working on the JSON pull request.,I noticed these Visual Studio specific files showing up as untracked changes while working on the JSON pull request.,True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/jstewart-amd,1,https://github.com/premake/premake-core/pull/732,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.","‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/jstewart-amd,2,https://github.com/premake/premake-core/pull/732#issuecomment-292151510,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.","I added a new test, so now there are separate tests for pre-VS2015 (leave the field blank) and VS2015 and later (using None works as expected).",True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/jstewart-amd,3,https://github.com/premake/premake-core/pull/732#issuecomment-292151795,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.","More information about the underlying issue in Visual Studio can be found here:
Project with debug information disabled always rebuilds
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
""The issue you are seeing is because the specific code incorrectly doesn't check for None. It looks for OldStyle and Empty.""
""You can workaround it by blanking out the property field. It will be passed to the build as an empty string and correctly by pass the 'Forcing recompile'.""",True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/jstewart-amd,4,https://github.com/premake/premake-core/pull/732#issuecomment-292152024,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.",".\bin\release\premake5.exe test
Running action 'test'...
1475 tests passed, 0 failed in 1.97 seconds",True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/732#issuecomment-292160126,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.","I kind of feel like this was recently changed to be the way it is. Are all the files that are generated by the various versions of visual studio, exactly the same with and without this PR? I'm a little hesitant to approve a PR that could just be reverted in a few weeks/months because something is different.

.\bin\release\premake5.exe test
Running action 'test'...
1475 tests passed, 0 failed in 1.97 seconds

Thanks for this, but it's not necessary as the build scripts perform these checks when you create your PR. üòÉ",True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/732#issuecomment-292278508,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.",LGTM too... won't affect us...,True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/jstewart-amd,7,https://github.com/premake/premake-core/pull/732#issuecomment-292291533,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.","Thanks, everybody. I wasn't ignoring @samsinsane. Rather, I was doing more testing.
To clarify, Premake without this fix is not producing incorrect output for VS2012 and VS2013. But it is running into a Visual Studio bug. The bug manifests when explicitly setting debug symbols to ""Off"". The symptom is that Visual Studio always thinks the project is out of date and so always does a full recompile (for the build configs where you have explicitly disabled symbols).
The issue showed up in the switch from flags { ""Symbols"" } to the new symbols function. Prior to the
symbols function, there was no notion of explicitly disabling symbols. You either had flags { ""Symbols"" } or you didn't. Absence of flags { ""Symbols"" } was an implicit disable.
This PR is a workaround for the Visual Studio bug, following the suggestion from Microsoft in the connect.microsoft.com link mentioned in a previous comment.
For VS2010, Premake actually is producing incorrect output when symbols are explicitly disabled. VS2010's DebugInformationFormat does not have a None setting. The result is this error:
error : Element <DebugInformationFormat> has an invalid value of ""None"".
This PR also fixes the VS2010 issue.
Summary:

VS2010 - Does not support DebugInformationFormat None. Leave field blank to get the behavior of None.
VS2012/VS2013 - Supposedly supports DebugInformationFormat None, but it doesn't work. Leave field blank to get the behavior of None.
VS2015 and newer - DebugInformationFormat None actually works.

I have tested on VS2010, VS2012, VS2013, and VS2015. I still don't have VS2017 installed anywhere, but output produced for VS2015 and newer is unchanged by this PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/732#issuecomment-292300256,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.",I verified correct behavior in VS2017....,True,{}
premake/premake-core,https://github.com/premake/premake-core,732,2017-04-06T11:55:19Z,2017-04-06T20:06:11Z,2017-04-07T02:21:16Z,MERGED,True,28,2,2,https://github.com/jstewart-amd,Fix VS2013 and older always rebuilding when debug symbols explicitly ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/732,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/732#issuecomment-292403575,"‚Ä¶disabled
Visual Studio versions 2013 and older have an issue with
DebugInformationFormat set to None. The project will always be out of
date and thus always rebuild. The workaround is to leave the
DebugInformationFormat field blank.
https://connect.microsoft.com/VisualStudio/feedback/details/833494/project-with-debug-information-disabled-always-rebuilds
VS2015 and newer do not have this issue.","Sounds good to me, thanks for the fixes!",True,{}
premake/premake-core,https://github.com/premake/premake-core,733,2017-04-06T14:13:36Z,2017-04-06T16:30:32Z,2017-04-07T02:02:34Z,MERGED,True,1,1,1,https://github.com/samsinsane,Generated project files are now correctly located beside script,1,[],https://github.com/premake/premake-core/pull/733,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/733,Fixes #371,Fixes #371,True,{}
premake/premake-core,https://github.com/premake/premake-core,733,2017-04-06T14:13:36Z,2017-04-06T16:30:32Z,2017-04-07T02:02:34Z,MERGED,True,1,1,1,https://github.com/samsinsane,Generated project files are now correctly located beside script,1,[],https://github.com/premake/premake-core/pull/733,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/733#issuecomment-292189195,Fixes #371,"I'm trying to remember the conversations that we had around this. I think the behavior we were trying to implement is that if location were set on the workspace, this value would be inherited by the projects, like any other configuration value. I'm not 100% sure if we have a test for that or not?
workspace ""MyWorkspace""
  location ""build""

project ""MyProject""
  -- implicit location is ""build"", inherited from MyWorkspace
So if a location is set on the workspace, it should be inherited by the project. But if no location is set, then project should use its basedir.",True,{}
premake/premake-core,https://github.com/premake/premake-core,733,2017-04-06T14:13:36Z,2017-04-06T16:30:32Z,2017-04-07T02:02:34Z,MERGED,True,1,1,1,https://github.com/samsinsane,Generated project files are now correctly located beside script,1,[],https://github.com/premake/premake-core/pull/733,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/733#issuecomment-292197805,Fixes #371,"This PR appears to do that.
Using Premake as the test.
Without this PR:
Premake5.sln
Premake5.vcxproj
lua-lib.vcxproj

With this PR:
Premake5.sln
Premake5.vcxproj
contrib/lua/lua-lib.vcxproj

With this PR and --to=testing: (which only applies to the workspace)
testing/Premake5.sln
testing/Premake5.vcxproj
testing/lua-lib.vcxproj

I'm happy to add tests in for this kind of thing, but I'm not sure exactly how to test it?
wks = test.createWorkspace()
origin = os.getcwd()
os.setcwd(origin + ""/folder"")
prj = test.createproject(wks)
os.setcwd(origin)

test.issame(origin, wks.location)
test.issame(origin + ""/folder"", prj.location)
This seems like too much of a hack?",True,{}
premake/premake-core,https://github.com/premake/premake-core,733,2017-04-06T14:13:36Z,2017-04-06T16:30:32Z,2017-04-07T02:02:34Z,MERGED,True,1,1,1,https://github.com/samsinsane,Generated project files are now correctly located beside script,1,[],https://github.com/premake/premake-core/pull/733,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/733#issuecomment-292203452,Fixes #371,"I'm happy to add tests in for this kind of thing, but I'm not sure exactly how to test it?

I'm probably wasn't either, which is probably why there aren't tests for it :) What about‚Ä¶?
wks = test.createWorkspace()
wks.basedir = os.getcwd()

prj = test.createproject(wks)
prj.basedir = path.join(os.getcwd(), ""folder"")
Going to approve this anyway, since you've confirmed we're getting the behavior we want for both cases.",True,{}
premake/premake-core,https://github.com/premake/premake-core,733,2017-04-06T14:13:36Z,2017-04-06T16:30:32Z,2017-04-07T02:02:34Z,MERGED,True,1,1,1,https://github.com/samsinsane,Generated project files are now correctly located beside script,1,[],https://github.com/premake/premake-core/pull/733,https://github.com/tritao,5,https://github.com/premake/premake-core/pull/733#issuecomment-292252918,Fixes #371,Just had to workaround this issue today... thanks for the fix @samsinsane.,True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,None,1,https://github.com/premake/premake-core/pull/734,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.","This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.",True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/734#issuecomment-292576174,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.","Sounds great, I'll test it out during the weekend.",True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,None,3,https://github.com/premake/premake-core/pull/734#issuecomment-293020642,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.",How's this?,True,{'THUMBS_UP': ['https://github.com/tvandijck']}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,None,4,https://github.com/premake/premake-core/pull/734#issuecomment-293021194,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.","I did run into something else when testing this. Some packages, such as MySQL.Data depend on other packages, but this doesn't currently handle those dependencies. So that's going to need some fixing. Should we fix it before merging, or should we do it in a separate PR?",True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/734#issuecomment-293023361,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.","I'd say, separate PR... I'm sure there will be many more nuget improvements over time...",True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,None,6,https://github.com/premake/premake-core/pull/734#issuecomment-293024048,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.",Sure.,True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,https://github.com/SoleilLapierre,7,https://github.com/premake/premake-core/pull/734#issuecomment-293104959,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.","I just tried from c5bf4b9 but I get errors when creating a NuGet dependency on NUnit. If I use:
    nuget { ""NUnit:3.6.0"" }
then I get:
Running action 'vs2015'...
Examining NuGet package source 'https://api.nuget.org/v3/index.json'...
Error: ** Error: NuGet API error (0)
SSL connect error
schannel: failed to retrieve ALPN result

If  leave out the :3.6.0 version number, the error becomes:
Running action 'vs2015'...
Generated Zaber.Plugins.sln...
Generated Zaber.Plugins/Zaber.Plugins.csproj...
Error: [string ""src/actions/vstudio/vs2010_nuget.lua""]:9: attempt to perform arithmetic on a nil value

I was following the instructions in BUILD.txt to build Premake on Windows using VS2015. ""premake5 test"" fails with this build.",True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,None,8,https://github.com/premake/premake-core/pull/734#issuecomment-293221437,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.","I think we're hitting a libcurl bug here (curl/curl#840), solution would be to update libcurl.",True,{}
premake/premake-core,https://github.com/premake/premake-core,734,2017-04-07T15:42:39Z,2017-04-24T20:43:42Z,2017-04-24T20:43:42Z,MERGED,True,642,143,14,None,NuGet fixes,17,[],https://github.com/premake/premake-core/pull/734,None,9,https://github.com/premake/premake-core/pull/734#issuecomment-293242212,"This pull request should fix everything mentioned #569, except for nuget.config customization. Premake now uses api.nuget.org to fetch required information about the packages.
I've tested this against the following NuGet packages:
C++:

boost
boost_filesystem-vc140
boost_system-vc140
sdl2.v140
sdl2.v140.redist
glew.v140
harfbuzz
physfs.v140
freetype2
assimp.v140
assimp.v140.redist
pugixml

C#:

Newtonsoft.Json
NUnit
SSH.NET

There is one problem where older C# packages (published before 2016 or sometime 2016?) might not work because the API response for them doesn't always contain a file listing. There isn't really anything that we can do about this, other than to inform the user and abort.
One thing to also note is that this will increase generation times for projects with NuGet packages. With 12 packages, I was getting generation times of around 20 seconds (api.nuget.org is slow).
We might want to consider caching the API requests to a file. If we had an asynchronous HTTP API, that could also help because then we could run requests in parallel. Any thoughts?
Anyway, I'd appreciate it if people with C# projects could try out this branch before it was merged, preferably with more and different packages (@tritao, @SoleilLapierre, @tvandijck?). I don't have any personal C# projects, so I only have a dummy project to test this with.",I've opened pull request #738 to update libcurl.,True,{}
premake/premake-core,https://github.com/premake/premake-core,735,2017-04-09T15:43:47Z,2017-04-11T12:09:42Z,2017-04-11T12:09:45Z,MERGED,True,3,1,1,https://github.com/samsinsane,Fixed issue with Clang not actually supporting floatingpoint 'strict',1,[],https://github.com/premake/premake-core/pull/735,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/735,Fixes #700,Fixes #700,True,{}
premake/premake-core,https://github.com/premake/premake-core,736,2017-04-09T15:53:45Z,2017-04-11T12:02:44Z,2017-04-11T12:02:48Z,MERGED,True,8,5,2,https://github.com/samsinsane,Fixed issue where VS2010+ projects didn't support floatingpoint 'Default',1,[],https://github.com/premake/premake-core/pull/736,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/736,Fixes #701,Fixes #701,True,{}
premake/premake-core,https://github.com/premake/premake-core,737,2017-04-10T10:54:11Z,2017-04-10T17:53:46Z,2017-04-10T17:53:46Z,MERGED,True,38,0,2,None,Add string.escapepattern function,2,[],https://github.com/premake/premake-core/pull/737,None,1,https://github.com/premake/premake-core/pull/737,"Using filenames with string.match and string.find, etc. is problematic because they take Lua patterns as an argument where ( ) . % + - * ? [ ] ^ $ are special characters.
This pull request adds a string.escapepattern function that escapes strings to be used with patterns.","Using filenames with string.match and string.find, etc. is problematic because they take Lua patterns as an argument where ( ) . % + - * ? [ ] ^ $ are special characters.
This pull request adds a string.escapepattern function that escapes strings to be used with patterns.",True,{}
premake/premake-core,https://github.com/premake/premake-core,738,2017-04-11T11:48:00Z,2017-04-24T19:58:35Z,2017-04-24T19:58:35Z,MERGED,True,8813,6370,205,None,Update curl to 7.53.1,2,[],https://github.com/premake/premake-core/pull/738,None,1,https://github.com/premake/premake-core/pull/738,"Should fix an issue where all HTTPS requests on Windows versions older than Windows 8.1 or Windows Server 2012 R2 were failing with the error message ""schannel: failed to retrieve ALPN result"" (curl/curl#840). Doesn't look like there are any breaking changes as far as I can tell.","Should fix an issue where all HTTPS requests on Windows versions older than Windows 8.1 or Windows Server 2012 R2 were failing with the error message ""schannel: failed to retrieve ALPN result"" (curl/curl#840). Doesn't look like there are any breaking changes as far as I can tell.",True,{}
premake/premake-core,https://github.com/premake/premake-core,738,2017-04-11T11:48:00Z,2017-04-24T19:58:35Z,2017-04-24T19:58:35Z,MERGED,True,8813,6370,205,None,Update curl to 7.53.1,2,[],https://github.com/premake/premake-core/pull/738,None,2,https://github.com/premake/premake-core/pull/738#issuecomment-293233838,"Should fix an issue where all HTTPS requests on Windows versions older than Windows 8.1 or Windows Server 2012 R2 were failing with the error message ""schannel: failed to retrieve ALPN result"" (curl/curl#840). Doesn't look like there are any breaking changes as far as I can tell.",Looks like Linux and macOS builds are failing. I'll take a look.,True,{}
premake/premake-core,https://github.com/premake/premake-core,738,2017-04-11T11:48:00Z,2017-04-24T19:58:35Z,2017-04-24T19:58:35Z,MERGED,True,8813,6370,205,None,Update curl to 7.53.1,2,[],https://github.com/premake/premake-core/pull/738,None,3,https://github.com/premake/premake-core/pull/738#issuecomment-293241472,"Should fix an issue where all HTTPS requests on Windows versions older than Windows 8.1 or Windows Server 2012 R2 were failing with the error message ""schannel: failed to retrieve ALPN result"" (curl/curl#840). Doesn't look like there are any breaking changes as far as I can tell.",There we go.,True,{}
premake/premake-core,https://github.com/premake/premake-core,738,2017-04-11T11:48:00Z,2017-04-24T19:58:35Z,2017-04-24T19:58:35Z,MERGED,True,8813,6370,205,None,Update curl to 7.53.1,2,[],https://github.com/premake/premake-core/pull/738,https://github.com/tritao,4,https://github.com/premake/premake-core/pull/738#issuecomment-293246612,"Should fix an issue where all HTTPS requests on Windows versions older than Windows 8.1 or Windows Server 2012 R2 were failing with the error message ""schannel: failed to retrieve ALPN result"" (curl/curl#840). Doesn't look like there are any breaking changes as far as I can tell.","lgtm
PS: We might want to consider submodule'ing curl in the future.",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,738,2017-04-11T11:48:00Z,2017-04-24T19:58:35Z,2017-04-24T19:58:35Z,MERGED,True,8813,6370,205,None,Update curl to 7.53.1,2,[],https://github.com/premake/premake-core/pull/738,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/738#issuecomment-293366455,"Should fix an issue where all HTTPS requests on Windows versions older than Windows 8.1 or Windows Server 2012 R2 were failing with the error message ""schannel: failed to retrieve ALPN result"" (curl/curl#840). Doesn't look like there are any breaking changes as far as I can tell.","@tritao I wish we could, but we hand-crafted our curl_config.h to work for the platforms we currently sort of support.... curl itself when build through ./configure, or cmake generates that file through autoconf like tools... Basically we have 'local' changes to curl that have to be integrated into any updates.",True,{}
premake/premake-core,https://github.com/premake/premake-core,739,2017-04-11T20:40:44Z,2017-04-24T20:43:19Z,2017-04-24T20:43:22Z,MERGED,True,121,61,28,https://github.com/tvandijck,"Refactor _OS, os.get() & os.is()",2,[],https://github.com/premake/premake-core/pull/739,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/739,"This fixes: #722
replaced:
os.get() -> os.target()
os.is() -> os.istarget()
_OS -> _TARGET_OS
action.os -> action.targetos

added:
os.host()
os.ishost()","This fixes: #722
replaced:
os.get() -> os.target()
os.is() -> os.istarget()
_OS -> _TARGET_OS
action.os -> action.targetos

added:
os.host()
os.ishost()",True,{}
premake/premake-core,https://github.com/premake/premake-core,739,2017-04-11T20:40:44Z,2017-04-24T20:43:19Z,2017-04-24T20:43:22Z,MERGED,True,121,61,28,https://github.com/tvandijck,"Refactor _OS, os.get() & os.is()",2,[],https://github.com/premake/premake-core/pull/739,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/739#issuecomment-293401909,"This fixes: #722
replaced:
os.get() -> os.target()
os.is() -> os.istarget()
_OS -> _TARGET_OS
action.os -> action.targetos

added:
os.host()
os.ishost()","This is a much needed clarification! üëç
I wonder if instead of ""current"" we should use ""host"" OS term instead, but might be just be my bias showing due to dealing a lot with that terminology with cross compilers.",True,{}
premake/premake-core,https://github.com/premake/premake-core,739,2017-04-11T20:40:44Z,2017-04-24T20:43:19Z,2017-04-24T20:43:22Z,MERGED,True,121,61,28,https://github.com/tvandijck,"Refactor _OS, os.get() & os.is()",2,[],https://github.com/premake/premake-core/pull/739,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/739#issuecomment-293407785,"This fixes: #722
replaced:
os.get() -> os.target()
os.is() -> os.istarget()
_OS -> _TARGET_OS
action.os -> action.targetos

added:
os.host()
os.ishost()",I like host it does seem a little more explicit..,True,{}
premake/premake-core,https://github.com/premake/premake-core,740,2017-04-13T13:28:12Z,2017-04-14T14:36:06Z,2017-04-15T02:46:11Z,MERGED,True,16,14,3,https://github.com/samsinsane,Properly deprecate WinMain flag,1,[],https://github.com/premake/premake-core/pull/740,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/740,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,740,2017-04-13T13:28:12Z,2017-04-14T14:36:06Z,2017-04-15T02:46:11Z,MERGED,True,16,14,3,https://github.com/samsinsane,Properly deprecate WinMain flag,1,[],https://github.com/premake/premake-core/pull/740,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/740#issuecomment-294075063,,@starkos I've rebased this on top of master with #743 merged in.,True,{}
premake/premake-core,https://github.com/premake/premake-core,740,2017-04-13T13:28:12Z,2017-04-14T14:36:06Z,2017-04-15T02:46:11Z,MERGED,True,16,14,3,https://github.com/samsinsane,Properly deprecate WinMain flag,1,[],https://github.com/premake/premake-core/pull/740,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/740#issuecomment-294164554,,"Excellent, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/741,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.","Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.",True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/741#issuecomment-293983697,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.","Instead of wholesale removal of the deprecated values in src/_premake_init.lua, could I perhaps entice you to create a 'deprecated' module that people such as myself could 'require' in my premake5.lua that puts them back into the environment?
We have scripts that work, even with the deprecation warnings. There has been no real incentive to ""move over"" to new words because there is no new functionality along with the new words. This will completely break my company's scripts (some which I have no control over).
For someone who is not developing premake, it was not readily apparent that things like
flags { ""EnableSSE"" }
needed to be changed to
vectorextensions ""SSE""
Digging through the docs did not tell me immediately and I had to read the premake code around the symbols I knew were generated to figure out what to set in my script to replicate the deprecated behavior.
I see now that the deprecation message for that flag is 'nil' which would have helped quite a bit in updating my scripts. But for someone who only has the executable and not the sources or know-how, this would be a show-stopper for them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/741#issuecomment-293990875,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.","We have scripts that work, even with the deprecation warnings. There has been no real incentive to ""move over"" to new words because there is no new functionality along with the new words.

Actually, there is an incentive: deprecated stuff gets removed eventually. I'm with Sam: two years is plenty of time.
If you are interested in contributing a compatibility module, that would be very cool, but you will still want to put a limit on how long you support things.

For someone who is not developing premake, it was not readily apparent that things like
flags { ""EnableSSE"" } needed to be changed to vectorextensions ""SSE""

Hmm‚Ä¶the newer deprecations point you to the new APIs, e.g. flags ""Symbols"" outputs:
** Warning: the flags value Symbols has been deprecated.
   Use `symbols ""On""` instead

I'm not sure why the older deprecations aren't doing that as well. And in fact, I just tried a test with flags ""EnableSSE"" and it doesn't even print a deprecation warning at all!
Ugh.
@samsinsane‚Ä¶what about modifying this PR to remove only the ones that have deprecation messages associated with them (nil for the third argument). I will submit a PR to add messages the rest and to change the deprecation date to today.
Is that reasonable to everyone?",True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/741#issuecomment-294002413,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.","I created PR #743 which adds the missing messages and removes deprecated APIs that had a warning message that are older than one year. I also strengthened the deprecation warning message from ""xxx is deprecated"" to ""xxx is deprecated and will be removed.""
I suggest we close this one and merge that instead. What do you think?",True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/ratzlaff,5,https://github.com/premake/premake-core/pull/741#issuecomment-294005049,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.",That seems reasonable to me,True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/741#issuecomment-294074372,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.","Sorry about that, I didn't notice the messages weren't there. I noticed the nil but it didn't click that it was the messages, it was pretty late when I started that. I've merged #743 and will close this one off.",True,{}
premake/premake-core,https://github.com/premake/premake-core,741,2017-04-13T13:40:39Z,2017-04-14T03:00:47Z,2017-04-14T13:11:17Z,CLOSED,False,22,187,8,https://github.com/samsinsane,Removed deprecated APIs and flags older than two years,1,[],https://github.com/premake/premake-core/pull/741,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/741#issuecomment-294151118,"Not sure if this is wanted or not, but I think two years is more than enough time to stop using those deprecated APIs and flags.","No worries! I assume that I am the one who left the messages off in the first place, though I've no idea why‚Ä¶",True,{}
premake/premake-core,https://github.com/premake/premake-core,742,2017-04-13T17:15:38Z,2017-04-15T02:45:02Z,2017-04-15T02:45:08Z,MERGED,True,30,3,5,https://github.com/samsinsane,Added BSD support,2,[],https://github.com/premake/premake-core/pull/742,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/742,Resolves #309 - only tested against FreeBSD 11 (all tests pass),Resolves #309 - only tested against FreeBSD 11 (all tests pass),True,{}
premake/premake-core,https://github.com/premake/premake-core,742,2017-04-13T17:15:38Z,2017-04-15T02:45:02Z,2017-04-15T02:45:08Z,MERGED,True,30,3,5,https://github.com/samsinsane,Added BSD support,2,[],https://github.com/premake/premake-core/pull/742,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/742#issuecomment-294267239,Resolves #309 - only tested against FreeBSD 11 (all tests pass),"The tests were passing, including the HTTP tests, which is why the CA bundle location was added. Travis supports using Docker, so we might be able to add BSD to our list, I don't really understand the Travis documentation, it seems to assume you already know how it works. I'll try some things out and see how it goes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,743,2017-04-13T19:40:08Z,2017-04-14T02:59:26Z,2017-08-02T21:36:39Z,MERGED,True,61,73,5,https://github.com/starkos,Clean up the deprecated APIs,1,[],https://github.com/premake/premake-core/pull/743,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/743,"Add ""Use ‚Ä¶ instead."" messages to any deprecations that did not have one
Change deprecation date on APIs without a message to current date
Remove APIs that have been deprecated for more than a year

h/t to @samsinsane for original PR on which this is based (#741)","Add ""Use ‚Ä¶ instead."" messages to any deprecations that did not have one
Change deprecation date on APIs without a message to current date
Remove APIs that have been deprecated for more than a year

h/t to @samsinsane for original PR on which this is based (#741)",True,{}
premake/premake-core,https://github.com/premake/premake-core,745,2017-04-17T14:43:17Z,2017-04-25T05:09:21Z,2017-04-25T05:09:24Z,MERGED,True,26,2,2,https://github.com/samsinsane,Fixed issue with using startproject API in CodeLite,2,[],https://github.com/premake/premake-core/pull/745,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/745,"Added test to ensure this doesn't break again

Resolves #744","Added test to ensure this doesn't break again

Resolves #744",True,{'HOORAY': ['https://github.com/RicoP']}
premake/premake-core,https://github.com/premake/premake-core,746,2017-04-17T15:17:20Z,2017-04-24T19:52:20Z,2017-04-25T04:46:09Z,MERGED,True,36,5,3,https://github.com/samsinsane,Fixed erroneous escape usages in VS2010+,3,[],https://github.com/premake/premake-core/pull/746,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/746,"Added tests for sensible escape usage locations (defines, not undefines or warnings)

Resolves #725","Added tests for sensible escape usage locations (defines, not undefines or warnings)

Resolves #725",True,{}
premake/premake-core,https://github.com/premake/premake-core,746,2017-04-17T15:17:20Z,2017-04-24T19:52:20Z,2017-04-25T04:46:09Z,MERGED,True,36,5,3,https://github.com/samsinsane,Fixed erroneous escape usages in VS2010+,3,[],https://github.com/premake/premake-core/pull/746,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/746#issuecomment-296721327,"Added tests for sensible escape usage locations (defines, not undefines or warnings)

Resolves #725",not sure I understand why the p.esc call is removed? why is that wrong? is m.element already escaping everything?,True,{}
premake/premake-core,https://github.com/premake/premake-core,746,2017-04-17T15:17:20Z,2017-04-24T19:52:20Z,2017-04-25T04:46:09Z,MERGED,True,36,5,3,https://github.com/samsinsane,Fixed erroneous escape usages in VS2010+,3,[],https://github.com/premake/premake-core/pull/746,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/746#issuecomment-296723384,"Added tests for sensible escape usage locations (defines, not undefines or warnings)

Resolves #725","Yeah, m.element calls p.esc on the third parameter if there are only three parameters.",True,{}
premake/premake-core,https://github.com/premake/premake-core,746,2017-04-17T15:17:20Z,2017-04-24T19:52:20Z,2017-04-25T04:46:09Z,MERGED,True,36,5,3,https://github.com/samsinsane,Fixed erroneous escape usages in VS2010+,3,[],https://github.com/premake/premake-core/pull/746,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/746#issuecomment-296733039,"Added tests for sensible escape usage locations (defines, not undefines or warnings)

Resolves #725",thanks for adding tests too... good to merge.,True,{}
premake/premake-core,https://github.com/premake/premake-core,747,2017-04-19T15:20:52Z,2017-04-19T17:58:36Z,2017-04-20T09:36:08Z,MERGED,True,15,0,1,https://github.com/samsinsane,Bootstrap makefile now cleans up previous builds before building,1,[],https://github.com/premake/premake-core/pull/747,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/747,"Tested with ""windows"", ""windows-msbuild"", ""linux"" and ""bsd"", assuming it works for ""osx"" and ""mingw"".
Resolves #334","Tested with ""windows"", ""windows-msbuild"", ""linux"" and ""bsd"", assuming it works for ""osx"" and ""mingw"".
Resolves #334",True,{}
premake/premake-core,https://github.com/premake/premake-core,747,2017-04-19T15:20:52Z,2017-04-19T17:58:36Z,2017-04-20T09:36:08Z,MERGED,True,15,0,1,https://github.com/samsinsane,Bootstrap makefile now cleans up previous builds before building,1,[],https://github.com/premake/premake-core/pull/747,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/747#issuecomment-295368087,"Tested with ""windows"", ""windows-msbuild"", ""linux"" and ""bsd"", assuming it works for ""osx"" and ""mingw"".
Resolves #334","Nice change, thanks",True,{}
premake/premake-core,https://github.com/premake/premake-core,748,2017-04-19T16:08:01Z,2017-04-19T18:05:31Z,2017-04-20T09:36:03Z,MERGED,True,24,8,2,https://github.com/samsinsane,os.translateCommands now supports multiple tokens,2,[],https://github.com/premake/premake-core/pull/748,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/748,Resolves #280,Resolves #280,True,{}
premake/premake-core,https://github.com/premake/premake-core,749,2017-04-20T16:38:53Z,2017-04-20T19:12:56Z,2017-04-21T02:13:46Z,MERGED,True,8,8,1,https://github.com/samsinsane,Updated packaging script,1,[],https://github.com/premake/premake-core/pull/749,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/749,"Find all occurrences of files wanting to be deleted rather than assuming locations
Added vs2017 and bsd to project file generation

Resolves #693","Find all occurrences of files wanting to be deleted rather than assuming locations
Added vs2017 and bsd to project file generation

Resolves #693",True,{}
premake/premake-core,https://github.com/premake/premake-core,751,2017-04-23T14:43:58Z,2017-04-24T18:41:54Z,2017-04-25T04:45:29Z,MERGED,True,40,0,2,https://github.com/samsinsane,CompileAs element handles C++ now,1,[],https://github.com/premake/premake-core/pull/751,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/751,"Added tests

Resolves #142","Added tests

Resolves #142",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,752,2017-04-24T15:45:21Z,2017-04-24T19:51:53Z,2017-04-25T04:46:02Z,MERGED,True,17,12,6,https://github.com/samsinsane,Fixed various issues with compiling with VS2012,1,[],https://github.com/premake/premake-core/pull/752,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/752,"I was able to somehow target v110 with VS2015, but it wasn't able to do the full build, so I may have missed things.
Resolves #696","I was able to somehow target v110 with VS2015, but it wasn't able to do the full build, so I may have missed things.
Resolves #696",True,{}
premake/premake-core,https://github.com/premake/premake-core,752,2017-04-24T15:45:21Z,2017-04-24T19:51:53Z,2017-04-25T04:46:02Z,MERGED,True,17,12,6,https://github.com/samsinsane,Fixed various issues with compiling with VS2012,1,[],https://github.com/premake/premake-core/pull/752,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/752#issuecomment-296717250,"I was able to somehow target v110 with VS2015, but it wasn't able to do the full build, so I may have missed things.
Resolves #696","Approved, but I think further changes/cleanups are possible.",True,{}
premake/premake-core,https://github.com/premake/premake-core,753,2017-04-24T15:52:10Z,2017-04-24T19:50:08Z,2017-04-25T05:01:43Z,MERGED,True,4,0,1,https://github.com/samsinsane,Added proxy URL to http options,1,[],https://github.com/premake/premake-core/pull/753,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/753,Resolves #711,Resolves #711,True,{}
premake/premake-core,https://github.com/premake/premake-core,753,2017-04-24T15:52:10Z,2017-04-24T19:50:08Z,2017-04-25T05:01:43Z,MERGED,True,4,0,1,https://github.com/samsinsane,Added proxy URL to http options,1,[],https://github.com/premake/premake-core/pull/753,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/753#issuecomment-296803147,Resolves #711,"Can you document that here:
https://github.com/premake/premake-core/wiki/http-options-table",True,{}
premake/premake-core,https://github.com/premake/premake-core,753,2017-04-24T15:52:10Z,2017-04-24T19:50:08Z,2017-04-25T05:01:43Z,MERGED,True,4,0,1,https://github.com/samsinsane,Added proxy URL to http options,1,[],https://github.com/premake/premake-core/pull/753,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/753#issuecomment-296907738,Resolves #711,Done.,True,{}
premake/premake-core,https://github.com/premake/premake-core,754,2017-04-24T16:35:09Z,2017-04-24T19:49:52Z,2017-04-25T04:45:39Z,MERGED,True,1,1,1,https://github.com/samsinsane,Fixed issue with the OBJDIR value not being escaped,1,[],https://github.com/premake/premake-core/pull/754,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/754,Resolves #705,Resolves #705,True,{}
premake/premake-core,https://github.com/premake/premake-core,755,2017-04-24T20:38:25Z,2017-04-24T20:54:54Z,2017-04-25T04:59:17Z,MERGED,True,69,26,14,https://github.com/tvandijck,Add 'supports_language' callback to action,1,[],https://github.com/premake/premake-core/pull/755,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/755,"to validate languages now that we have multiple dialects
fixes #750","to validate languages now that we have multiple dialects
fixes #750",True,{}
premake/premake-core,https://github.com/premake/premake-core,756,2017-04-24T20:54:17Z,2017-04-24T20:54:31Z,2017-04-24T20:54:33Z,MERGED,True,1,1,1,https://github.com/tvandijck,Fix a call to deprecated os.get(),1,[],https://github.com/premake/premake-core/pull/756,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/756,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,757,2017-04-25T06:49:35Z,2017-04-25T16:32:30Z,2017-04-25T16:40:40Z,MERGED,True,866,733,191,https://github.com/samsinsane,Increased consistency of p. usage,1,[],https://github.com/premake/premake-core/pull/757,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/757,"This is a pretty large change, but we went from ~900 usages of premake. to ~175. I probably went a bit overboard, and I'm happy to remove the ones where I added local p = premake.","This is a pretty large change, but we went from ~900 usages of premake. to ~175. I probably went a bit overboard, and I'm happy to remove the ones where I added local p = premake.",True,{}
premake/premake-core,https://github.com/premake/premake-core,757,2017-04-25T06:49:35Z,2017-04-25T16:32:30Z,2017-04-25T16:40:40Z,MERGED,True,866,733,191,https://github.com/samsinsane,Increased consistency of p. usage,1,[],https://github.com/premake/premake-core/pull/757,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/757#issuecomment-297087909,"This is a pretty large change, but we went from ~900 usages of premake. to ~175. I probably went a bit overboard, and I'm happy to remove the ones where I added local p = premake.",Change looks harmless to me too... merge it ;),True,{}
premake/premake-core,https://github.com/premake/premake-core,757,2017-04-25T06:49:35Z,2017-04-25T16:32:30Z,2017-04-25T16:40:40Z,MERGED,True,866,733,191,https://github.com/samsinsane,Increased consistency of p. usage,1,[],https://github.com/premake/premake-core/pull/757,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/757#issuecomment-297088556,"This is a pretty large change, but we went from ~900 usages of premake. to ~175. I probably went a bit overboard, and I'm happy to remove the ones where I added local p = premake.","BTW... I'm pretty thankful you are willing to go through monkey work like this, so thank you very much.",True,{}
premake/premake-core,https://github.com/premake/premake-core,757,2017-04-25T06:49:35Z,2017-04-25T16:32:30Z,2017-04-25T16:40:40Z,MERGED,True,866,733,191,https://github.com/samsinsane,Increased consistency of p. usage,1,[],https://github.com/premake/premake-core/pull/757,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/757#issuecomment-297090284,"This is a pretty large change, but we went from ~900 usages of premake. to ~175. I probably went a bit overboard, and I'm happy to remove the ones where I added local p = premake.","Haha, no worries! :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,758,2017-04-25T17:41:54Z,2017-04-25T18:54:43Z,2017-04-26T01:45:05Z,MERGED,True,239,239,36,https://github.com/samsinsane,Cleaned up inconsistencies in whitespace,1,[],https://github.com/premake/premake-core/pull/758,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/758,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/760,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/760#issuecomment-297673890,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"Was thinking about this a bit more, ARM isn't all that descriptive and could mean anything really. For the Android extension of VS, ARM translates to ARMv7-a (I think this would suffice as ARMv7), I think we should probably attempt to support the proper names, rather than the simplification that MS has introduced here.",True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/760#issuecomment-297726411,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"Yeah, I don't know... I got a request from a collegue to add this, and this is how I got Visual Studio's native ARM compiler to work... so I totally get that this is an over simplification maybe, but I don't know anything about ARM in the realm of android or ios and all the 5 million different architectures...",True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/760#issuecomment-297726542,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"ARM64 isn't out yet from Microsoft, so I have no way to test that in VS2017 really... couple more months apparently...",True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/760#issuecomment-297748761,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"I got a request from a collegue to add this

Interesting. Does this require any sort of VS extension or is part of the base VS2017 install?

I don't know anything about ARM in the realm of android or ios and all the 5 million different architectures

That's totally fair enough, is your colleague able to shed any light on the ""proper"" architecture? I don't really have an issue with this going in as is, but in the future it would be nice to deprecate this correctly.

ARM64 isn't out yet from Microsoft, so I have no way to test that in VS2017 really... couple more months apparently...

Ah ok, I know that VS2015 Update 3 has ARM64 for Android, which would require the same changes you've made here (excluding the SDK thing), except ""ARM64"". But given that this is for something else, and MS have previously created differing elements/values, not adding ARM64 is probably for the best.",True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/760#issuecomment-297769285,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"Does this require any sort of VS extension or is part of the base VS2017 install?

In both VS2015 and VS2017 it's just a checkbox in the installation... not an extension or anything.
In VS2017's installer it's here:",True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/760#issuecomment-297769894,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"I think it allows you to write native applications for Windows 8 and later that runs on ARM tablets/phones, and has nothing to do with Android/iOS support at all.",True,{}
premake/premake-core,https://github.com/premake/premake-core,760,2017-04-26T23:01:49Z,2017-04-27T20:55:44Z,2017-04-27T20:55:46Z,MERGED,True,11,0,4,https://github.com/tvandijck,Adding ARM support for Visual Studio.,1,[],https://github.com/premake/premake-core/pull/760,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/760#issuecomment-297777694,This just adds the ARM architecture to Visual Studio projects using the Microsoft provided ARM compiler.,"Hmm, maybe we should support the generic ARM and ARM64 (eventually). An end user that's trying to target what you've linked above mightn't know what the actual architecture is. It could also be a multi-architecture binary, similar to UWP (I think?).
Sorry for flip-flopping on this, feel free to merge. I think what you've got is 100% correct, even if we add all the ARM versions that Android and whatever else supports.",True,{}
premake/premake-core,https://github.com/premake/premake-core,761,2017-04-27T10:48:57Z,2017-04-27T15:22:31Z,2017-04-27T15:33:10Z,MERGED,True,2,3,2,https://github.com/samsinsane,Removed echo off in VS rules prop generator,1,[],https://github.com/premake/premake-core/pull/761,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/761,Resolves #698,Resolves #698,True,{}
premake/premake-core,https://github.com/premake/premake-core,761,2017-04-27T10:48:57Z,2017-04-27T15:22:31Z,2017-04-27T15:33:10Z,MERGED,True,2,3,2,https://github.com/samsinsane,Removed echo off in VS rules prop generator,1,[],https://github.com/premake/premake-core/pull/761,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/761#issuecomment-297729421,Resolves #698,tests fail though...,True,{}
premake/premake-core,https://github.com/premake/premake-core,761,2017-04-27T10:48:57Z,2017-04-27T15:22:31Z,2017-04-27T15:33:10Z,MERGED,True,2,3,2,https://github.com/samsinsane,Removed echo off in VS rules prop generator,1,[],https://github.com/premake/premake-core/pull/761,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/761#issuecomment-297745243,Resolves #698,"All fixed, my bad.",True,{}
premake/premake-core,https://github.com/premake/premake-core,763,2017-04-27T23:21:47Z,2017-05-01T17:46:46Z,2017-05-01T17:46:49Z,MERGED,True,95,0,6,https://github.com/tvandijck,[core] Print warnings in purple,2,[],https://github.com/premake/premake-core/pull/763,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/763,"Jeej, fancy colors on Windows... anyone know how to do this on linux/macosx/posix??","Jeej, fancy colors on Windows... anyone know how to do this on linux/macosx/posix??",True,{}
premake/premake-core,https://github.com/premake/premake-core,764,2017-04-27T23:23:46Z,2017-05-01T15:54:30Z,2017-05-01T15:54:32Z,MERGED,True,33,9,3,https://github.com/tvandijck,[core] get file/line information on deprecated API's.,1,[],https://github.com/premake/premake-core/pull/764,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/764,This gives you an indication where you are using a deprecated API...,This gives you an indication where you are using a deprecated API...,True,{}
premake/premake-core,https://github.com/premake/premake-core,768,2017-05-01T19:04:31Z,2017-05-02T16:35:56Z,2017-05-02T16:56:55Z,MERGED,True,40,0,2,https://github.com/tvandijck,[core] Fix Visual Studio ExecutablePath settings.,2,[],https://github.com/premake/premake-core/pull/768,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/768,"Turns out, the command line %PATH% variable is only resolved when you search for something, not at startup... so having relative paths in %PATH% breaks, as soon as you do a ""cd "" in your {pre/post}buildcommands..
This puts that %(ProjectDir) in front of all relative paths, so that the %PATH% variable only gets absolute paths during execution of the buildcommands.","Turns out, the command line %PATH% variable is only resolved when you search for something, not at startup... so having relative paths in %PATH% breaks, as soon as you do a ""cd "" in your {pre/post}buildcommands..
This puts that %(ProjectDir) in front of all relative paths, so that the %PATH% variable only gets absolute paths during execution of the buildcommands.",True,{}
premake/premake-core,https://github.com/premake/premake-core,769,2017-05-01T19:21:26Z,2017-05-04T17:28:19Z,2017-05-04T17:28:22Z,MERGED,True,72,12,8,https://github.com/tvandijck,[core] new cmd path decorations with %[] syntax,2,[],https://github.com/premake/premake-core/pull/769,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/769,"this is for marking cmd options as paths relative to the projects base dir. decorated paths can use tokens / macros decorated paths are wrapped with """".  Final slashes are honored. Slashes are platform specific.
You can use '%[path]' in any kind of buildcommands API, to decorate an option as a path that needs to be resolved...  Currently there is no reliable way to identify parts of a string as a path, which is what this adds, writing buildcommands is quite a bit easier because of that.","this is for marking cmd options as paths relative to the projects base dir. decorated paths can use tokens / macros decorated paths are wrapped with """".  Final slashes are honored. Slashes are platform specific.
You can use '%[path]' in any kind of buildcommands API, to decorate an option as a path that needs to be resolved...  Currently there is no reliable way to identify parts of a string as a path, which is what this adds, writing buildcommands is quite a bit easier because of that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/771,Fix for: #766,Fix for: #766,True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/771#issuecomment-298669833,Fix for: #766,"What else is there to determine project type? The only alternative we have is kind.
But I see what you are kind of hinting at?
""what if we just didn't set language at all, and only set it to be explicit when needed...""
I think that is a good idea, but indeed we'd need something else to determine the project type, and then I think we're falling in the same trap as what we tried to avoid with 'language' vs 'dialect'... say for example we did:
project 'foo'
    projecttype 'NativeProject'
    language 'C#'

it wouldn't work, because for C# you need a csproj, not a vcxproj...
So just like
project 'foo'
    language 'C++'
    dialect 'C++14'

the options are related, and need to be validated for correct combinations..
Basically, I'm coming around on the language determines both ""language"" and ""dialect"" like we have implemented right now, and it turns out the side effects of the change are quite substantial, and I don't really know how to correctly fix them without introducing API's like this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/771#issuecomment-298684763,Fix for: #766,"I hear what you're saying, the inability to link APIs together does create a bit of an issue when things like this occur. But at the same time, there's really not much difference between the above and:
project 'foo'
  language 'C#'
  compileas 'C++'

Regardless of which direction we go, we're creating an API that is only valid based on another API. We've kind of already got these anyway, frameworkdirs isn't really valid outside of macOS, similarly, the dotnetframework isn't really valid outside of C# (and perhaps C++/CLI? I really don't know). Well, of the things we support, those two APIs are only valid in the cases I mentioned.
I think the tight coupling we've created between ""project type"" and ""language""/""dialect"" is a problem, but perhaps compileas is the shortest path forward. I was pondering on the idea that maybe we shift the <CompileAs> element to only emit at the file level when prj.language ~= cfg.language. This could still allow for the original behaviour (C only) to occur at the project level though, but that creates some strange logic and I'm sure someone will eventually make the same change I did and break everything.
I'm happy for this to go through, I did just notice you've called it compileAs though, and it should probably be compileas for consistency and whatnot.",True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/771#issuecomment-298694490,Fix for: #766,"I think the tight coupling we've created between ""project type"" and ""language""/""dialect"" is a problem, but perhaps compileas is the shortest path forward.

It think the compileas is more of a bandaid to the bigger issue. It solves one particular issue, but not the issue I mentioned here: #770
We can merge this in the intermediate time, but I rather think about solving this the right way for the final 5.0 release that @starkos is working towards.
I rather refactor to a language & dialect API, basically reverting the language refactor I recently did going back to a simpler approach, and simply add validation of dialect/language pairs..",True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/771#issuecomment-298762070,Fix for: #766,made it lowercase as requested.,True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/771#issuecomment-298762574,Fix for: #766,"I rather refactor to a language & dialect API...

so, that wouldn't solve a thing either.... for example this would blow up if we added validation:
workspace ‚Äòfoo‚Äô
  language ‚ÄòC++‚Äô
  dialect ‚ÄòC++11‚Äô

project ‚Äòbar‚Äô
  language ‚ÄòC‚Äô

which is not an unthinkable situation (we have tons of those cases already with the ""flags {C++11}"".
right or wrong, the flags only applied to the C++ language features...",True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/771#issuecomment-298876932,Fix for: #766,"The complieas() call was added because‚Ä¶well, because I didn't think things through all the way, clearly. There is no reason for that to exist, you should be able to use language() in its place.",True,{}
premake/premake-core,https://github.com/premake/premake-core,771,2017-05-01T20:39:57Z,2017-05-25T15:43:36Z,2017-05-25T15:43:38Z,MERGED,True,42,10,3,https://github.com/tvandijck,[core] Use 'compileAs' API,1,[],https://github.com/premake/premake-core/pull/771,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/771#issuecomment-298950185,Fix for: #766,"@starkos not sure I understand... using language for this in its place is not working, it emits this  property at all times, because there is no way to not set language.
language(nil) doens't work, since then the project no longer validates, and premake errors out. You are required to set language, which makes this particular vcxproj feature always emit something, which is undesirable, we want the ability to not emit anything. Hence this PR, but again, it feels like a bandaid, specifically for the VS* actions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,772,2017-05-01T21:26:12Z,2017-05-02T15:20:20Z,2017-05-02T15:20:23Z,MERGED,True,16,11,4,https://github.com/tvandijck,"[core] Don't set default entrypoint, rely on visual studio default.",1,[],https://github.com/premake/premake-core/pull/772,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/772,"We shouldn't set this default, since it's wrong and not setting the entrypoint API, will result in the wrong default for WindowedApps. While the Visual Studio default will just work...","We shouldn't set this default, since it's wrong and not setting the entrypoint API, will result in the wrong default for WindowedApps. While the Visual Studio default will just work...",True,{}
premake/premake-core,https://github.com/premake/premake-core,774,2017-05-02T17:24:13Z,2017-06-20T18:34:27Z,2017-06-20T18:34:30Z,MERGED,True,55,27,15,https://github.com/tvandijck,Assure a default toolset is always set.,2,[],https://github.com/premake/premake-core/pull/774,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/774,"We're running into the issue where:
filter { 'toolset:msc-v140' }

doesn't work, because the majority of time, the toolset is not actually set. This change assures the filter always has a valid value in it, and not just 'nil' in the majority of cases.
We also normalize the toolset, so when you do
toolset 'v140'

it normalizes to msc-v140, as well as the other rules implemented in the p.tool.canonical function.
We should realy deprecate the v140 naming however, and require explicit msc-v140 usage, so I added a p.warnOnce in there too.","We're running into the issue where:
filter { 'toolset:msc-v140' }

doesn't work, because the majority of time, the toolset is not actually set. This change assures the filter always has a valid value in it, and not just 'nil' in the majority of cases.
We also normalize the toolset, so when you do
toolset 'v140'

it normalizes to msc-v140, as well as the other rules implemented in the p.tool.canonical function.
We should realy deprecate the v140 naming however, and require explicit msc-v140 usage, so I added a p.warnOnce in there too.",True,{}
premake/premake-core,https://github.com/premake/premake-core,774,2017-05-02T17:24:13Z,2017-06-20T18:34:27Z,2017-06-20T18:34:30Z,MERGED,True,55,27,15,https://github.com/tvandijck,Assure a default toolset is always set.,2,[],https://github.com/premake/premake-core/pull/774,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/774#issuecomment-300542427,"We're running into the issue where:
filter { 'toolset:msc-v140' }

doesn't work, because the majority of time, the toolset is not actually set. This change assures the filter always has a valid value in it, and not just 'nil' in the majority of cases.
We also normalize the toolset, so when you do
toolset 'v140'

it normalizes to msc-v140, as well as the other rules implemented in the p.tool.canonical function.
We should realy deprecate the v140 naming however, and require explicit msc-v140 usage, so I added a p.warnOnce in there too.","Removed the deprecation warning, but it still normalizes to ""msc-v140"", we could potentially remove that...
but in that case you can no longer reliably filter for it... since you would essentially have to write:
filter ""toolset:v140 or msc-v140"" 

since both are the same.
The alternative would be to normalize to 'v140', which is OK with me too. Either way, I think the normalization is key whichever way you go, so that filtering is stable.",True,{}
premake/premake-core,https://github.com/premake/premake-core,774,2017-05-02T17:24:13Z,2017-06-20T18:34:27Z,2017-06-20T18:34:30Z,MERGED,True,55,27,15,https://github.com/tvandijck,Assure a default toolset is always set.,2,[],https://github.com/premake/premake-core/pull/774,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/774#issuecomment-308212762,"We're running into the issue where:
filter { 'toolset:msc-v140' }

doesn't work, because the majority of time, the toolset is not actually set. This change assures the filter always has a valid value in it, and not just 'nil' in the majority of cases.
We also normalize the toolset, so when you do
toolset 'v140'

it normalizes to msc-v140, as well as the other rules implemented in the p.tool.canonical function.
We should realy deprecate the v140 naming however, and require explicit msc-v140 usage, so I added a p.warnOnce in there too.",Removed the deprecation warning a while ago... need more feedback however on what direction we want to go for the normalization?,True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/775,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/775#issuecomment-298757180,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","FYI, this goes the route of C++ does not override C++11 when set, but C++11 would override C++14. Basically, if you are not specific, then it won't set it if something more specific is set. If you set a different language entirely, it will set it regardless of whether you are specific or not.",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/775#issuecomment-298947325,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","but as I said in #770, I think there should always be a way to tell Premake to not emit anything.

@samsinsane which is currently not possible at all... there is no ""removelanguage"" API, and premake sets language to ""C++"" at startup...
https://github.com/premake/premake-core/blob/master/src/_premake_init.lua#L1503
Unless you set it to something else, it will be ""C++"".
We can remove the default, for sure... but then this will fail:
https://github.com/premake/premake-core/blob/master/src/base/validation.lua#L206
which we could remove... but then this will no longer work:
https://github.com/premake/premake-core/blob/master/src/actions/vstudio/vs2010.lua#L52
which we could fix, by not using language as the project type, as you suggested, but then you basically just end up with: language & dialect api's, maybe with different names projecttype & language, same difference, with same problems...
So... as it stands, there is currently no way to have premake NOT emit 'language', this PR does not change that... The ""compileas"" PR fixes the ""CompileAs"" emit issue separately, which would still be needed with this PR.
If we wanted to remove language default, then we need to figure out a different way to emit language and project types, which is a much bigger change. But... I'm open to suggestions obviously..",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/775#issuecomment-298955727,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","which is currently not possible at all... there is no ""removelanguage"" API, and premake sets language to ""C++"" at startup...

This PR is designed to stop C++ from overriding C++11. What standard was it emitting to the command line? I was under the assumption that it was not emitting any standard? Which is exactly what I think should happen, or at least be an option.",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/775#issuecomment-298957643,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","@samsinsane correct... it assumes that if a higher power sets a standard, then that higher power wins... just like with the flag...
workspace 'foo'
    language 'C++11'
    project 'x'
        language 'C++'
project 'x' gets C++11, because the workspace says so... just like
workspace 'foo'
    flags { 'C++11'}
    project 'x'
        language 'C++'
would have...
Which isn't to say we can't do anything else... but we have a ton of projects that relied on the behavior of the flag that way... The only way to basically not get this behavior without this PR, is to not set language anywhere, and assume someone else higher up (workspace?) sets it, and you only overload it if you want something different....",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/775#issuecomment-298959305,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","Correct, but how would you now do removeflags { ""C++11"" } at the project level?",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/775#issuecomment-298962502,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","That is a valid question indeed...
You could write:
language 'C99'
language 'C++'

switch it to a different language, and then back, which would override it... but that is probably the dirtiest workaround I've ever posted here ;)
we could do something like:
language 'force:C++'

I'm not sure... it seems we're a little bit in a bind though... we want this behavior:
workspace 'foo'
    flags { 'C++11'}
    project 'x'
        language 'C++'

but we also want:
workspace 'foo'
    flags { 'C++11'}
    project 'x'
        language 'C++'
        removeflags { 'C++11' }

with this PR, the first is working:
workspace 'foo'
    language 'C++11'
    project 'x'
        language 'C++'

but the second is no longer available without a dirty.
without this PR, the first isn't working, but the second case is.",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/775#issuecomment-298968041,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","Yeah, that's my only concern really, that we don't support both. I am not against your changes, I'm just against trading one for the other.
Perhaps, the force prefix could be used for your use case? You're forcing the dialect/standard to hold, though, I'm forcing the dialect/standard to drop. Though, your use case would require force to be stored, and then later removed in the oven. Hmm, either way I'm happy with the idea of the prefix, there could be a better solution, I can't think of anything right now though.
Anyone got ideas on how to achieve both cases relatively cleanly?",True,{}
premake/premake-core,https://github.com/premake/premake-core,775,2017-05-02T20:48:17Z,2017-05-04T00:07:14Z,2017-06-19T16:26:47Z,CLOSED,False,216,6,8,https://github.com/tvandijck,Languages fixes,4,"['bug', 'enhancement', 'help wanted']",https://github.com/premake/premake-core/pull/775,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/775#issuecomment-299069115,"So this is just one possible solution to the language issues explained here:
#770
Basically it's a set of changes that allows fields to decide how they get stored or merged when accessed. The tests test just a few use-cases that I could think of, more might be needed to fully cover everything, help appreciated.","closing this, I don't think this is the answer, although I think the ""processed"" field kind is kinda cool...",True,{}
premake/premake-core,https://github.com/premake/premake-core,776,2017-05-04T00:02:02Z,2017-05-25T15:43:53Z,2017-05-25T15:43:56Z,MERGED,True,243,162,21,https://github.com/tvandijck,[core] Use 'cdialect' and 'cppdialect' instead of 'language'.,1,[],https://github.com/premake/premake-core/pull/776,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/776,,,True,"{'THUMBS_UP': ['https://github.com/qaisjp', 'https://github.com/jushar']}"
premake/premake-core,https://github.com/premake/premake-core,778,2017-05-04T16:22:15Z,2017-05-04T17:14:01Z,2017-08-17T11:46:18Z,MERGED,True,26,0,2,https://github.com/samsinsane,Added support at the file level for the NoPCH flag in VS200x projects,1,[],https://github.com/premake/premake-core/pull/778,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/778,Resolves #777,Resolves #777,True,{}
premake/premake-core,https://github.com/premake/premake-core,779,2017-05-05T22:11:18Z,2017-05-25T15:46:15Z,2020-05-24T09:27:47Z,MERGED,True,68,13,2,https://github.com/noresources,add os.findheader(),2,[],https://github.com/premake/premake-core/pull/779,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/779,os.findheader use the same directories than os.findlib but replace /lib* by /include,os.findheader use the same directories than os.findlib but replace /lib* by /include,True,{}
premake/premake-core,https://github.com/premake/premake-core,781,2017-05-10T16:23:30Z,2017-06-13T18:48:28Z,2017-06-13T18:48:31Z,MERGED,True,68,1,2,https://github.com/tvandijck,Allow filters to be written as tables:,1,[],https://github.com/premake/premake-core/pull/781,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/781,"filter {
    files  = { ""**.c"" },
    system = ""windows""
}","filter {
    files  = { ""**.c"" },
    system = ""windows""
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,781,2017-05-10T16:23:30Z,2017-06-13T18:48:28Z,2017-06-13T18:48:31Z,MERGED,True,68,1,2,https://github.com/tvandijck,Allow filters to be written as tables:,1,[],https://github.com/premake/premake-core/pull/781,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/781#issuecomment-300536755,"filter {
    files  = { ""**.c"" },
    system = ""windows""
}","as discussed at the bottom of this thread:
#243",True,{}
premake/premake-core,https://github.com/premake/premake-core,781,2017-05-10T16:23:30Z,2017-06-13T18:48:28Z,2017-06-13T18:48:31Z,MERGED,True,68,1,2,https://github.com/tvandijck,Allow filters to be written as tables:,1,[],https://github.com/premake/premake-core/pull/781,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/781#issuecomment-308159702,"filter {
    files  = { ""**.c"" },
    system = ""windows""
}",Added tests... will merge when travis and appveyor approve.,True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/SirLynix,1,https://github.com/premake/premake-core/pull/785,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.","Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.",True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/SirLynix,2,https://github.com/premake/premake-core/pull/785#issuecomment-301316420,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.",I have no idea why AppVeyor is failing,True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/785#issuecomment-301531084,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.",I gave it a kick to try again... but 0xc0000005 is typically a memory access violation...,True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/785#issuecomment-301540306,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.","Tried it two times, but it's consistently failing with the same error... I'm assuming some kind of null pointer exception... I unfortunately don't have the time today to try and repro this locally...",True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/SirLynix,5,https://github.com/premake/premake-core/pull/785#issuecomment-301725403,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.","I have troubles to run Premake (output exec) on Windows, I'll try to fix this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/SirLynix,6,https://github.com/premake/premake-core/pull/785#issuecomment-302225103,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.","Finally managed to build and run premake on my computer and it works like a charm.. :/
Edit: Well it worked because I didn't close those files (see below).",True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/SirLynix,7,https://github.com/premake/premake-core/pull/785#issuecomment-302495011,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.","I found the problem, it's because of that weird environnement which defines a close function for file handles (causing the null pointer crash when an unicode file tries to close as it has no close function).
I tried many things, but there are a lot of problem involved with the override post-init of io functions (which seems to be fixed in Lua 5.2! Why is Premake still in Lua 5.1? üòÑ ).
I have no choice right now than to override liolib.c in Lua library... Hopefully it's a small change.",True,{}
premake/premake-core,https://github.com/premake/premake-core,785,2017-05-14T13:27:10Z,2017-05-25T15:44:19Z,2017-05-25T15:44:20Z,MERGED,True,191,10,8,https://github.com/SirLynix,Unicode file functions for Windows,5,[],https://github.com/premake/premake-core/pull/785,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/785#issuecomment-302511389,"Hello,
As we discussed in my last PR (#728) I'm now proposing unicode override for Lua base functions (io.open, os.remove and os.rename).
I tried to respect the Lua API but this made me duplicate some code unfortunatly.","We've talked about upgrading Lua a few times, not sure what the general opinion is by now. At Blizzard we're on 5.3.4, but I think there is a few local changes that premake made to Lua that we didn't integrate. I don't think we're noticing it however... so not sure what the deal is...
That aside, these changes look fine to me. I think it would be awesome if lua itself got these changes committed however. Would help lua itself too, and 5.3 actually has utf8 functionality.",True,{}
premake/premake-core,https://github.com/premake/premake-core,786,2017-05-17T21:22:34Z,2017-05-17T22:04:08Z,2017-05-17T22:04:08Z,MERGED,True,1,1,1,https://github.com/SirLynix,Fix typo in embed.lua,3,[],https://github.com/premake/premake-core/pull/786,https://github.com/SirLynix,1,https://github.com/premake/premake-core/pull/786,Quick fix for a typo I saw today in embed.lua (when minifying scripts),Quick fix for a typo I saw today in embed.lua (when minifying scripts),True,{}
premake/premake-core,https://github.com/premake/premake-core,786,2017-05-17T21:22:34Z,2017-05-17T22:04:08Z,2017-05-17T22:04:08Z,MERGED,True,1,1,1,https://github.com/SirLynix,Fix typo in embed.lua,3,[],https://github.com/premake/premake-core/pull/786,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/786#issuecomment-302244517,Quick fix for a typo I saw today in embed.lua (when minifying scripts),good catch.,True,{}
premake/premake-core,https://github.com/premake/premake-core,787,2017-05-18T19:20:27Z,2017-05-25T15:47:15Z,2017-05-25T15:47:15Z,MERGED,True,134,0,3,https://github.com/SirLynix,os.comparefiles function,3,[],https://github.com/premake/premake-core/pull/787,https://github.com/SirLynix,1,https://github.com/premake/premake-core/pull/787,"Hi again,
Here's a function I had to write two times at my job in Lua: os.comparefiles, returns true if two files are identical by content.
My main use of this is to synchronize big files from one directory (build output) to the other (thirdparty repository).
Of course, it is unicode-aware on Windows.","Hi again,
Here's a function I had to write two times at my job in Lua: os.comparefiles, returns true if two files are identical by content.
My main use of this is to synchronize big files from one directory (build output) to the other (thirdparty repository).
Of course, it is unicode-aware on Windows.",True,{}
premake/premake-core,https://github.com/premake/premake-core,788,2017-05-19T21:51:51Z,2017-06-13T15:32:43Z,2017-06-13T15:32:46Z,MERGED,True,46,3,3,https://github.com/tvandijck,"Provide a way to 'tag' systems, and filter on those tags.",1,['enhancement'],https://github.com/premake/premake-core/pull/788,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/788,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,789,2017-05-19T21:54:45Z,2017-05-25T15:41:56Z,2017-05-25T15:41:59Z,MERGED,True,11,0,3,https://github.com/tvandijck,Add 'tags' filter api.,1,['enhancement'],https://github.com/premake/premake-core/pull/789,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/789,"This is just an API that can contain a arbitrary set of values, which you can then filter on.
for example:
workspace 'foobar'
    configurations { 'release-std', 'debug-std', 'release-blz', 'debug-blz' }

   filter { 'configuration:*-std' }
        tags { 'use-std' }
   filter { 'configuration:*-blz' }
        tags { 'use-blz' }

   project 'test'
        filter { 'tags:use-blz' }
            includedependencies { 'blz' }
            defines { 'USE_BLZ' }

        filter { 'tags:use-std' }
            defines { 'USE_STD' }
It allows authors to expose features in libraries through tags, and users to enable/disable said features.","This is just an API that can contain a arbitrary set of values, which you can then filter on.
for example:
workspace 'foobar'
    configurations { 'release-std', 'debug-std', 'release-blz', 'debug-blz' }

   filter { 'configuration:*-std' }
        tags { 'use-std' }
   filter { 'configuration:*-blz' }
        tags { 'use-blz' }

   project 'test'
        filter { 'tags:use-blz' }
            includedependencies { 'blz' }
            defines { 'USE_BLZ' }

        filter { 'tags:use-std' }
            defines { 'USE_STD' }
It allows authors to expose features in libraries through tags, and users to enable/disable said features.",True,{}
premake/premake-core,https://github.com/premake/premake-core,790,2017-05-19T21:56:50Z,2017-05-23T21:06:14Z,2017-05-23T21:06:16Z,MERGED,True,1,1,1,https://github.com/tvandijck,[self-test] fix nil dereference crash in test.isequal,1,['bug'],https://github.com/premake/premake-core/pull/790,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/790,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,793,2017-05-25T03:20:15Z,2017-05-25T03:21:34Z,2017-05-25T03:21:34Z,CLOSED,False,0,0,0,https://github.com/albertclass,Merge pull request #1 from premake/master,1,[],https://github.com/premake/premake-core/pull/793,https://github.com/albertclass,1,https://github.com/premake/premake-core/pull/793,update from origin,update from origin,True,{}
premake/premake-core,https://github.com/premake/premake-core,798,2017-06-01T17:08:39Z,2017-06-13T15:31:42Z,2020-05-24T09:28:33Z,MERGED,True,11,0,2,https://github.com/noresources,create object directory before generating precompiled header,2,[],https://github.com/premake/premake-core/pull/798,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/798,"Fix precompiled header generation in gmake action with gcc/clang toolsets
The object directory where the gch file is generated was not created before compiler invocation","Fix precompiled header generation in gmake action with gcc/clang toolsets
The object directory where the gch file is generated was not created before compiler invocation",True,"{'THUMBS_UP': ['https://github.com/jushar', 'https://github.com/qaisjp']}"
premake/premake-core,https://github.com/premake/premake-core,798,2017-06-01T17:08:39Z,2017-06-13T15:31:42Z,2020-05-24T09:28:33Z,MERGED,True,11,0,2,https://github.com/noresources,create object directory before generating precompiled header,2,[],https://github.com/premake/premake-core/pull/798,https://github.com/noresources,2,https://github.com/premake/premake-core/pull/798#issuecomment-307183172,"Fix precompiled header generation in gmake action with gcc/clang toolsets
The object directory where the gch file is generated was not created before compiler invocation",I added a new commit to the pull request to update the test suite but the appveyor tool failed weirdly.,True,{}
premake/premake-core,https://github.com/premake/premake-core,798,2017-06-01T17:08:39Z,2017-06-13T15:31:42Z,2020-05-24T09:28:33Z,MERGED,True,11,0,2,https://github.com/noresources,create object directory before generating precompiled header,2,[],https://github.com/premake/premake-core/pull/798,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/798#issuecomment-308154120,"Fix precompiled header generation in gmake action with gcc/clang toolsets
The object directory where the gch file is generated was not created before compiler invocation",kicked of a new appveyor build.,True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/bmwiedemann,1,https://github.com/premake/premake-core/pull/799,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.","because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.",True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/799#issuecomment-306150389,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.",Are you sure about this? I thought Premake already sorted all lists under the hood.,True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/799#issuecomment-306220827,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.",@starkos it does: https://github.com/premake/premake-core/blob/master/src/base/oven.lua#L671,True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/799#issuecomment-306271996,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.","Okay, closing this as unnecessary then. Feel free to reopen if there is something I've not considered!",True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/bmwiedemann,5,https://github.com/premake/premake-core/pull/799#issuecomment-306384969,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.",OK. then maybe 0ad is bundling an older version of premake.,True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/799#issuecomment-306530631,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.","https://trac.wildfiregames.com/wiki/premake
Note: Currently we bundle a modified version of the Premake 4.3 release, located in build/premake/premake4. The modifications fix a number of bugs and missing features in the 4.3 release.",True,{}
premake/premake-core,https://github.com/premake/premake-core,799,2017-06-02T16:11:34Z,2017-06-05T18:51:10Z,2017-06-06T15:58:23Z,CLOSED,False,14,9,1,https://github.com/bmwiedemann,sort file lists,1,[],https://github.com/premake/premake-core/pull/799,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/799#issuecomment-306532733,"because filesystems return files in random order
and linkers order functions depending on order of .o files
This helps enable reproducible builds in software built with premake
like 0ad
See https://reproducible-builds.org/ for why that matters.",Also looks like there is an effort to upgrade to Premake5 here: https://trac.wildfiregames.com/ticket/3729,True,{}
premake/premake-core,https://github.com/premake/premake-core,800,2017-06-03T09:54:26Z,2017-06-03T10:04:22Z,2017-06-03T10:04:22Z,CLOSED,False,11,0,2,https://github.com/jushar,Fix #794 (PCH creation fails),2,[],https://github.com/premake/premake-core/pull/800,https://github.com/jushar,1,https://github.com/premake/premake-core/pull/800,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,800,2017-06-03T09:54:26Z,2017-06-03T10:04:22Z,2017-06-03T10:04:22Z,CLOSED,False,11,0,2,https://github.com/jushar,Fix #794 (PCH creation fails),2,[],https://github.com/premake/premake-core/pull/800,https://github.com/jushar,2,https://github.com/premake/premake-core/pull/800#issuecomment-305965420,,"Ooops, just noticed my PR is equivalent to #798",True,{}
premake/premake-core,https://github.com/premake/premake-core,801,2017-06-07T07:16:34Z,2017-06-18T22:12:35Z,2017-06-18T22:12:35Z,MERGED,True,52,12,3,https://github.com/ricka-github,Groups in XCode workspace working.,2,[],https://github.com/premake/premake-core/pull/801,https://github.com/ricka-github,1,https://github.com/premake/premake-core/pull/801,"I noticed the 'group' directive doesn't do anything for XCode, even though XCode workspaces do support groups.
A nice and simple change to get my feet wet in the codebase.","I noticed the 'group' directive doesn't do anything for XCode, even though XCode workspaces do support groups.
A nice and simple change to get my feet wet in the codebase.",True,{}
premake/premake-core,https://github.com/premake/premake-core,801,2017-06-07T07:16:34Z,2017-06-18T22:12:35Z,2017-06-18T22:12:35Z,MERGED,True,52,12,3,https://github.com/ricka-github,Groups in XCode workspace working.,2,[],https://github.com/premake/premake-core/pull/801,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/801#issuecomment-306881604,"I noticed the 'group' directive doesn't do anything for XCode, even though XCode workspaces do support groups.
A nice and simple change to get my feet wet in the codebase.",Looks reasonable to me. Can you add a unit test for it?,True,{}
premake/premake-core,https://github.com/premake/premake-core,801,2017-06-07T07:16:34Z,2017-06-18T22:12:35Z,2017-06-18T22:12:35Z,MERGED,True,52,12,3,https://github.com/ricka-github,Groups in XCode workspace working.,2,[],https://github.com/premake/premake-core/pull/801,https://github.com/ricka-github,3,https://github.com/premake/premake-core/pull/801#issuecomment-307081026,"I noticed the 'group' directive doesn't do anything for XCode, even though XCode workspaces do support groups.
A nice and simple change to get my feet wet in the codebase.","I had to extend the test helper to be able to create a group. It seems to work, but I'm not sure this is the way you want it to be.",True,{}
premake/premake-core,https://github.com/premake/premake-core,801,2017-06-07T07:16:34Z,2017-06-18T22:12:35Z,2017-06-18T22:12:35Z,MERGED,True,52,12,3,https://github.com/ricka-github,Groups in XCode workspace working.,2,[],https://github.com/premake/premake-core/pull/801,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/801#issuecomment-308153559,"I noticed the 'group' directive doesn't do anything for XCode, even though XCode workspaces do support groups.
A nice and simple change to get my feet wet in the codebase.","Looks good to me... can be merged as is, although I did mark it as 'request changes', it's such a minor thing, that we don't have to hold up the merge for that...",True,{}
premake/premake-core,https://github.com/premake/premake-core,802,2017-06-13T14:51:10Z,2017-06-13T18:20:10Z,2017-06-13T18:20:10Z,MERGED,True,2,1,1,None,Suppress mkdir warning on Windows if the folder already exists,1,[],https://github.com/premake/premake-core/pull/802,None,1,https://github.com/premake/premake-core/pull/802,"Adds a check to see if the folder already exists to prevent the ""A subdirectory or file X already exists"" warning. I think this matches the behaviour on other platforms.","Adds a check to see if the folder already exists to prevent the ""A subdirectory or file X already exists"" warning. I think this matches the behaviour on other platforms.",True,{}
premake/premake-core,https://github.com/premake/premake-core,803,2017-06-13T16:55:18Z,2017-06-14T20:18:36Z,2017-06-14T20:18:38Z,MERGED,True,3402,0,21,https://github.com/tvandijck,Gmake2 module,3,[],https://github.com/premake/premake-core/pull/803,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/803,"This is the previous gmake-refactor PR ""#516"" as a gmake2 module instead.
I'm closing: #516 in favor of this PR.","This is the previous gmake-refactor PR ""#516"" as a gmake2 module instead.
I'm closing: #516 in favor of this PR.",True,"{'THUMBS_UP': ['https://github.com/vlad-ivanov-name', 'https://github.com/ActuallyaDeviloper']}"
premake/premake-core,https://github.com/premake/premake-core,803,2017-06-13T16:55:18Z,2017-06-14T20:18:36Z,2017-06-14T20:18:38Z,MERGED,True,3402,0,21,https://github.com/tvandijck,Gmake2 module,3,[],https://github.com/premake/premake-core/pull/803,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/803#issuecomment-308304375,"This is the previous gmake-refactor PR ""#516"" as a gmake2 module instead.
I'm closing: #516 in favor of this PR.","There's quite a bit to read through, but I think we should just merge this and get feedback on it. Perhaps, if not already, clearly mark it as ""experimental"".",True,{'THUMBS_UP': ['https://github.com/ActuallyaDeviloper']}
premake/premake-core,https://github.com/premake/premake-core,803,2017-06-13T16:55:18Z,2017-06-14T20:18:36Z,2017-06-14T20:18:38Z,MERGED,True,3402,0,21,https://github.com/tvandijck,Gmake2 module,3,[],https://github.com/premake/premake-core/pull/803,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/803#issuecomment-308492461,"This is the previous gmake-refactor PR ""#516"" as a gmake2 module instead.
I'm closing: #516 in favor of this PR.","Perhaps, if not already, clearly mark it as ""experimental"".

Well, it's way past the 'experimental' stage at this point... I got about 4 games using this in production ;)
But I'm sure there is bugs and I'm open to any feedback.
And as we discussed prior in the gmake-refactor PR here (#516) there is a lot more ideas floating around to making adding languages easier and more flexible.",True,{}
premake/premake-core,https://github.com/premake/premake-core,804,2017-06-13T17:37:25Z,2017-06-19T19:12:49Z,2017-06-19T19:12:52Z,MERGED,True,21332,12910,126,https://github.com/tvandijck,Update to Lua 5.3.4,5,[],https://github.com/premake/premake-core/pull/804,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/804,,,True,"{'THUMBS_UP': ['https://github.com/neico', 'https://github.com/starwing'], 'HOORAY': ['https://github.com/neico']}"
premake/premake-core,https://github.com/premake/premake-core,805,2017-06-13T20:38:50Z,2017-06-19T20:06:51Z,2017-06-21T14:08:22Z,MERGED,True,20,1,3,https://github.com/tvandijck,Add --insecure option for SSL curl requests.,1,[],https://github.com/premake/premake-core/pull/805,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/805,"We run into a lot of ssl errors when communicating with the outside world due to proxy settings.
This allows us to run some of the nuget tests without having to locally modify the code.","We run into a lot of ssl errors when communicating with the outside world due to proxy settings.
This allows us to run some of the nuget tests without having to locally modify the code.",True,{}
premake/premake-core,https://github.com/premake/premake-core,805,2017-06-13T20:38:50Z,2017-06-19T20:06:51Z,2017-06-21T14:08:22Z,MERGED,True,20,1,3,https://github.com/tvandijck,Add --insecure option for SSL curl requests.,1,[],https://github.com/premake/premake-core/pull/805,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/805#issuecomment-308491600,"We run into a lot of ssl errors when communicating with the outside world due to proxy settings.
This allows us to run some of the nuget tests without having to locally modify the code.","I feel like this is something you never want to actually use.

I agree, that in general you do never want to use it... However, there is cases where a company for all kinds of reasons I don't agree with, puts in a proxy server that rewrites all certificates, it's basically an IT endorsed man in the middle attack. For example to monitor employees leaking sensitive data, or for whatever other reason...  The two options I'm disabling here:
		curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);
 		curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);

All nuget unit-tests here fail when executed on my desktop without this option.",True,{}
premake/premake-core,https://github.com/premake/premake-core,805,2017-06-13T20:38:50Z,2017-06-19T20:06:51Z,2017-06-21T14:08:22Z,MERGED,True,20,1,3,https://github.com/tvandijck,Add --insecure option for SSL curl requests.,1,[],https://github.com/premake/premake-core/pull/805,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/805#issuecomment-308941576,"We run into a lot of ssl errors when communicating with the outside world due to proxy settings.
This allows us to run some of the nuget tests without having to locally modify the code.","My understanding of proxies for HTTPS is rather limited, but what about options such as CURLOPT_PROXY_SSLCERT? I'm happy for this to go through, I'm just hoping that curl supports security, even if it's by allowing a specific MitM attack rather than all of them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,805,2017-06-13T20:38:50Z,2017-06-19T20:06:51Z,2017-06-21T14:08:22Z,MERGED,True,20,1,3,https://github.com/tvandijck,Add --insecure option for SSL curl requests.,1,[],https://github.com/premake/premake-core/pull/805,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/805#issuecomment-309558850,"We run into a lot of ssl errors when communicating with the outside world due to proxy settings.
This allows us to run some of the nuget tests without having to locally modify the code.","@samsinsane I looked into that, didn't get much results... it's weird too though, I only get this on my desktop machine, but not on our jenkins boxes...
I'm merging it, but will put this on my todo list to investigate further.",True,{}
premake/premake-core,https://github.com/premake/premake-core,805,2017-06-13T20:38:50Z,2017-06-19T20:06:51Z,2017-06-21T14:08:22Z,MERGED,True,20,1,3,https://github.com/tvandijck,Add --insecure option for SSL curl requests.,1,[],https://github.com/premake/premake-core/pull/805,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/805#issuecomment-310089942,"We run into a lot of ssl errors when communicating with the outside world due to proxy settings.
This allows us to run some of the nuget tests without having to locally modify the code.","@tvandijck That's fair enough, I noticed those options when I added the proxy URL and just figured that this might be what they're for? Ah well, if it's what you need to get through your proxy server, then I imagine others will need it too.",True,{}
premake/premake-core,https://github.com/premake/premake-core,806,2017-06-14T19:53:26Z,2017-06-18T22:11:33Z,2017-06-18T22:11:36Z,MERGED,True,18,0,1,https://github.com/tvandijck,Add premake.isSemVer function,2,[],https://github.com/premake/premake-core/pull/806,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/806,Also check in require if we can actually do the compare..,Also check in require if we can actually do the compare..,True,{}
premake/premake-core,https://github.com/premake/premake-core,807,2017-06-14T19:55:15Z,2017-06-18T22:11:05Z,2017-06-18T22:11:08Z,MERGED,True,32,1,2,https://github.com/tvandijck,Added visual studio support for dot net .tt files,2,[],https://github.com/premake/premake-core/pull/807,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/807,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,808,2017-06-14T19:56:35Z,2017-06-18T22:12:59Z,2017-06-18T22:13:02Z,MERGED,True,34,4,2,https://github.com/tvandijck,Added per file rtti generation for Visual Studio,2,[],https://github.com/premake/premake-core/pull/808,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/808,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,809,2017-06-14T19:57:37Z,2017-06-20T17:54:00Z,2017-06-20T17:54:03Z,MERGED,True,151,4,5,https://github.com/tvandijck,Added os touchfile and a workaround for vs2010 reloading,3,[],https://github.com/premake/premake-core/pull/809,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/809,"vs2010 (and above) has an issue where if the vcxproj file
isn't modified but the.vcxproj.filters is modified during
premake, then VS doesn't notify the user that the project has
changed.  This can occur if the only change to a project is
with the vpaths.  Before this fix, the user would be need to
manually unload and reload the project to pick up the change.
This VS workaround checks for the case where the vcxproj.filters
file is modified but the .vcxproj file is not. At which point
premake preforms a touch on the .vcxproj file to trigger the IDE.","vs2010 (and above) has an issue where if the vcxproj file
isn't modified but the.vcxproj.filters is modified during
premake, then VS doesn't notify the user that the project has
changed.  This can occur if the only change to a project is
with the vpaths.  Before this fix, the user would be need to
manually unload and reload the project to pick up the change.
This VS workaround checks for the case where the vcxproj.filters
file is modified but the .vcxproj file is not. At which point
premake preforms a touch on the .vcxproj file to trigger the IDE.",True,{}
premake/premake-core,https://github.com/premake/premake-core,810,2017-06-14T19:59:47Z,2017-06-18T21:42:27Z,2017-06-18T21:42:31Z,MERGED,True,44,7,2,https://github.com/tvandijck,Added masm handling of seh exception handling for VS2010 and above,3,[],https://github.com/premake/premake-core/pull/810,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/810,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,811,2017-06-14T20:01:16Z,2017-06-20T19:46:20Z,2017-06-21T14:19:04Z,MERGED,True,27,0,2,https://github.com/tvandijck,Add 'preferredtoolarchitecture' API,2,[],https://github.com/premake/premake-core/pull/811,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/811,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,811,2017-06-14T20:01:16Z,2017-06-20T19:46:20Z,2017-06-21T14:19:04Z,MERGED,True,27,0,2,https://github.com/tvandijck,Add 'preferredtoolarchitecture' API,2,[],https://github.com/premake/premake-core/pull/811,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/811#issuecomment-309276266,,Not overly sure what this is for? Is this a VS2017 thing?,True,{}
premake/premake-core,https://github.com/premake/premake-core,811,2017-06-14T20:01:16Z,2017-06-20T19:46:20Z,2017-06-21T14:19:04Z,MERGED,True,27,0,2,https://github.com/tvandijck,Add 'preferredtoolarchitecture' API,2,[],https://github.com/premake/premake-core/pull/811,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/811#issuecomment-309298994,,"actually this is a VS2010 and later thing ;)
It makes msbuild use the 64-bit version of cl.exe, link.exe and mspdbsrv.exe.
Which is particularly useful when you are using incredibuild to build. We had instances where the pdb service ran out of memory while linking..
it has pretty minimal documentation, but there is something here:
https://msdn.microsoft.com/en-us/library/ee662426.aspx
and here:
https://stackoverflow.com/questions/19820718/how-to-make-visual-studio-use-the-native-amd64-toolchain",True,{}
premake/premake-core,https://github.com/premake/premake-core,811,2017-06-14T20:01:16Z,2017-06-20T19:46:20Z,2017-06-21T14:19:04Z,MERGED,True,27,0,2,https://github.com/tvandijck,Add 'preferredtoolarchitecture' API,2,[],https://github.com/premake/premake-core/pull/811,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/811#issuecomment-310093198,,"Haha, yeah I've seen that before, I wonder why I didn't think of that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,812,2017-06-14T20:05:43Z,2017-06-18T19:49:52Z,2017-06-18T19:49:58Z,MERGED,True,111,2,2,https://github.com/tvandijck,Add support for cppdialect in VS2015 & VS2017 actions.,1,[],https://github.com/premake/premake-core/pull/812,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/812,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,813,2017-06-14T20:06:38Z,2017-06-18T19:49:30Z,2017-06-18T19:49:34Z,MERGED,True,12,0,1,https://github.com/tvandijck,Add json.encode_pretty wrapper.,1,[],https://github.com/premake/premake-core/pull/813,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/813,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,814,2017-06-14T20:09:13Z,2017-06-18T19:49:11Z,2017-06-18T19:49:14Z,MERGED,True,18,0,2,https://github.com/tvandijck,Add premake.info message function.,1,[],https://github.com/premake/premake-core/pull/814,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/814,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,815,2017-06-14T20:13:20Z,2017-06-18T21:41:54Z,2017-06-18T21:41:58Z,MERGED,True,47,13,4,https://github.com/tvandijck,Errors in red.,3,[],https://github.com/premake/premake-core/pull/815,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/815,"I hard-coded the color to red here, otherwise we have to get it using all kinds of lua functions...
I just didn't think it was worth the effort...
this would work I think though:
lua_getglobal(L, ""term"");
lua_pushstring(L, ""errorColor"");
lua_gettable(L, -2);
int color = luaL_checknumber(L, -1);
lua_pop(L, 2);","I hard-coded the color to red here, otherwise we have to get it using all kinds of lua functions...
I just didn't think it was worth the effort...
this would work I think though:
lua_getglobal(L, ""term"");
lua_pushstring(L, ""errorColor"");
lua_gettable(L, -2);
int color = luaL_checknumber(L, -1);
lua_pop(L, 2);",True,{}
premake/premake-core,https://github.com/premake/premake-core,815,2017-06-14T20:13:20Z,2017-06-18T21:41:54Z,2017-06-18T21:41:58Z,MERGED,True,47,13,4,https://github.com/tvandijck,Errors in red.,3,[],https://github.com/premake/premake-core/pull/815,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/815#issuecomment-309060023,"I hard-coded the color to red here, otherwise we have to get it using all kinds of lua functions...
I just didn't think it was worth the effort...
this would work I think though:
lua_getglobal(L, ""term"");
lua_pushstring(L, ""errorColor"");
lua_gettable(L, -2);
int color = luaL_checknumber(L, -1);
lua_pop(L, 2);","well, we exposed the ""infoColor"" and ""warningColor"" in lua, so people can make their own picks..  I don't know if anyone ever will, but it's there because someone asked for that... so ""errorColor"" is there in lua, but since the error handling in C, it's currently not using it... I guess we could query it, just didn't seem worth the effort to me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,816,2017-06-14T20:15:28Z,2017-06-19T20:09:59Z,2017-06-19T20:10:02Z,MERGED,True,4,4,2,https://github.com/tvandijck,Fixed C++17 flag to work with current versions of Clang.,1,[],https://github.com/premake/premake-core/pull/816,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/816,"17 isn't official yet, both gcc and clang still refer to it as '1z'","17 isn't official yet, both gcc and clang still refer to it as '1z'",True,{}
premake/premake-core,https://github.com/premake/premake-core,816,2017-06-14T20:15:28Z,2017-06-19T20:09:59Z,2017-06-19T20:10:02Z,MERGED,True,4,4,2,https://github.com/tvandijck,Fixed C++17 flag to work with current versions of Clang.,1,[],https://github.com/premake/premake-core/pull/816,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/816#issuecomment-309059536,"17 isn't official yet, both gcc and clang still refer to it as '1z'","I think premake, just like cmake should 'detect' what version is currently 'installed' and being used, and decide based on that... until such time flags like this will always be in flux...
We have similar problems with VS2015 Update 1 vs Update 3.... Update 3 has /std:c++14 support, Update 1 does not and gives a warning that it is an unrecognized option. Premake doesn't know, it just generates what we tell it to generate for ""vs2015""... Sure we can make actions like vs2015.1, and vs2015.2, etc... but are we really then also going to make things like:
clang38, clang381, clang39, clang391, and for gcc, oh my.... if you go back to 2010 (4.4.3+) we're talking about 41 releases...
it's a huge matrix of x translates to y for any of these compilers, and premake isn't really that good at doing the right thing for any of them, except those that someone actively uses is targetting. So with blizzard as a really active user, fixes like this essentially just target the compilers we use, but we would really like to see a better more sustainable option.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,817,2017-06-14T22:47:58Z,2017-06-14T23:39:41Z,2017-06-14T23:39:43Z,MERGED,True,3,1,1,https://github.com/tvandijck,A few gmake2 fixes due to it moving into a module.,1,[],https://github.com/premake/premake-core/pull/817,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/817,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,818,2017-06-14T23:39:28Z,2017-06-19T19:18:31Z,2017-06-19T19:18:33Z,MERGED,True,128,93,35,https://github.com/tvandijck,Make module of 'gmake' action.,1,[],https://github.com/premake/premake-core/pull/818,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/818,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,821,2017-06-19T17:01:20Z,2017-06-19T20:08:40Z,2017-06-19T20:09:07Z,MERGED,True,42,15,3,https://github.com/tvandijck,Attempt at colors on linux,1,[],https://github.com/premake/premake-core/pull/821,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/821,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,821,2017-06-19T17:01:20Z,2017-06-19T20:08:40Z,2017-06-19T20:09:07Z,MERGED,True,42,15,3,https://github.com/tvandijck,Attempt at colors on linux,1,[],https://github.com/premake/premake-core/pull/821,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/821#issuecomment-309559119,,Tested on ubuntu and macOS.,True,{}
premake/premake-core,https://github.com/premake/premake-core,822,2017-06-19T20:00:00Z,2017-06-19T20:16:09Z,2017-06-19T20:16:12Z,MERGED,True,7956,7911,103,https://github.com/tvandijck,Move VStudio action into a module.,1,[],https://github.com/premake/premake-core/pull/822,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/822,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,824,2017-06-20T20:09:15Z,2017-08-09T16:23:35Z,2017-08-09T16:23:37Z,MERGED,True,5,2,4,https://github.com/tvandijck,Set default toolsets for vs2005 and vs2008.,2,[],https://github.com/premake/premake-core/pull/824,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/824,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,824,2017-06-20T20:09:15Z,2017-08-09T16:23:35Z,2017-08-09T16:23:37Z,MERGED,True,5,2,4,https://github.com/tvandijck,Set default toolsets for vs2005 and vs2008.,2,[],https://github.com/premake/premake-core/pull/824,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/824#issuecomment-309887973,,"hmmm, interesting side effect üëé",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,824,2017-06-20T20:09:15Z,2017-08-09T16:23:35Z,2017-08-09T16:23:37Z,MERGED,True,5,2,4,https://github.com/tvandijck,Set default toolsets for vs2005 and vs2008.,2,[],https://github.com/premake/premake-core/pull/824,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/824#issuecomment-320717394,,Question @starkos & @samsinsane do we wish to maintain the vs2005 and vs2008 backends? I no longer have access to it.. it's going to be increasingly difficult to do the right thing for these.,True,{}
premake/premake-core,https://github.com/premake/premake-core,824,2017-06-20T20:09:15Z,2017-08-09T16:23:35Z,2017-08-09T16:23:37Z,MERGED,True,5,2,4,https://github.com/tvandijck,Set default toolsets for vs2005 and vs2008.,2,[],https://github.com/premake/premake-core/pull/824,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/824#issuecomment-321180317,,"I, personally, don't care either way, though I don't think VS2008 is EoL yet, so perhaps the removal should wait until then?",True,{}
premake/premake-core,https://github.com/premake/premake-core,824,2017-06-20T20:09:15Z,2017-08-09T16:23:35Z,2017-08-09T16:23:37Z,MERGED,True,5,2,4,https://github.com/tvandijck,Set default toolsets for vs2005 and vs2008.,2,[],https://github.com/premake/premake-core/pull/824,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/824#issuecomment-321307093,,"https://blogs.msdn.microsoft.com/visualstudio/2017/04/10/end-of-support-for-visual-studio-2008-in-one-year/
April 10, 2018 apparently... We can wait...",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,825,2017-06-20T21:45:11Z,2017-06-21T16:29:25Z,2017-06-21T16:29:28Z,MERGED,True,15,12,7,https://github.com/tvandijck,Use workspace everywhere,2,[],https://github.com/premake/premake-core/pull/825,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/825,Just some harmless cleanup.,Just some harmless cleanup.,True,{}
premake/premake-core,https://github.com/premake/premake-core,826,2017-06-20T21:51:41Z,2017-06-20T22:18:36Z,2017-06-20T22:18:36Z,MERGED,True,1,0,1,https://github.com/Mikhael-Danilov,Escape '&' -> '&amp;',1,[],https://github.com/premake/premake-core/pull/826,https://github.com/Mikhael-Danilov,1,https://github.com/premake/premake-core/pull/826,Patch for #823,Patch for #823,True,{}
premake/premake-core,https://github.com/premake/premake-core,827,2017-06-20T22:02:53Z,2017-06-21T19:02:27Z,2017-06-21T19:02:29Z,MERGED,True,53,3,4,https://github.com/tvandijck,Added option to create bundle and frameworks on macOS.,1,[],https://github.com/premake/premake-core/pull/827,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/827,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,828,2017-06-20T22:07:51Z,2017-06-21T16:36:15Z,2017-06-21T16:36:18Z,MERGED,True,2,1,1,https://github.com/tvandijck,Normalize path in 'getfileinfo' for local host.,1,[],https://github.com/premake/premake-core/pull/828,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/828,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,829,2017-06-20T22:09:35Z,2017-06-25T22:52:43Z,2017-06-25T22:52:46Z,MERGED,True,173,84,2,https://github.com/tvandijck,Reduced vs2010+ file sizes by removing redundant config settings,1,[],https://github.com/premake/premake-core/pull/829,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/829,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,829,2017-06-20T22:09:35Z,2017-06-25T22:52:43Z,2017-06-25T22:52:46Z,MERGED,True,173,84,2,https://github.com/tvandijck,Reduced vs2010+ file sizes by removing redundant config settings,1,[],https://github.com/premake/premake-core/pull/829,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/829#issuecomment-310912168,,"@samsinsane there is a number of tests in test_files.lua that still exhibit the ""per config"" behavior, so I feel this is still covered.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,830,2017-06-20T22:16:50Z,2017-06-21T16:36:30Z,2017-06-21T16:36:32Z,MERGED,True,38,1,3,https://github.com/tvandijck,Resource generator access,2,[],https://github.com/premake/premake-core/pull/830,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/830,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,831,2017-06-20T22:18:25Z,2017-06-21T16:36:44Z,2017-06-21T16:36:46Z,MERGED,True,1,1,1,https://github.com/tvandijck,"Fix in oven, for options that are not strings.",1,[],https://github.com/premake/premake-core/pull/831,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/831,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,832,2017-06-20T22:21:56Z,2017-06-21T16:36:58Z,2017-06-21T16:37:00Z,MERGED,True,7,6,4,https://github.com/tvandijck,Fix a few compiler warnings,2,[],https://github.com/premake/premake-core/pull/832,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/832,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,833,2017-06-20T22:24:25Z,2017-06-21T16:37:18Z,2017-06-21T16:37:20Z,MERGED,True,21,5,1,https://github.com/tvandijck,Fix empty rules.,1,[],https://github.com/premake/premake-core/pull/833,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/833,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,834,2017-06-21T00:32:14Z,2017-06-23T21:25:15Z,2017-06-23T21:25:17Z,MERGED,True,35,4,4,https://github.com/tvandijck,Allow modules to register C code too.,1,[],https://github.com/premake/premake-core/pull/834,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/834,"This allows a module to include 'c' code as part of the module, although this only works for modules that are embedded at compile time through the _modules.lua file, and not for modules loaded at runtime.
The way you do this is to add a ""modulename.c"" file in the native folder... like so,

and then have a function in there that is called void register<ModuleName>(lua_State* L); where ModuleName is the name of the module starting with a capital... so for gmake2, it becomes registerGmake2.","This allows a module to include 'c' code as part of the module, although this only works for modules that are embedded at compile time through the _modules.lua file, and not for modules loaded at runtime.
The way you do this is to add a ""modulename.c"" file in the native folder... like so,

and then have a function in there that is called void register<ModuleName>(lua_State* L); where ModuleName is the name of the module starting with a capital... so for gmake2, it becomes registerGmake2.",True,{}
premake/premake-core,https://github.com/premake/premake-core,836,2017-06-21T16:53:01Z,2017-06-21T19:02:12Z,2017-06-21T19:02:15Z,MERGED,True,7,0,1,https://github.com/tvandijck,"Hook setTextColor in tests, so on linux/mac we don't get random color‚Ä¶",1,[],https://github.com/premake/premake-core/pull/836,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/836,‚Ä¶ changes but no output.,‚Ä¶ changes but no output.,True,{}
premake/premake-core,https://github.com/premake/premake-core,837,2017-06-21T20:26:25Z,2017-06-21T22:32:21Z,2017-06-21T22:32:23Z,MERGED,True,1,1,1,https://github.com/tvandijck,"Removed ""installer"" kinds from vs2017.",1,[],https://github.com/premake/premake-core/pull/837,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/837,"Copy-Paste error from Blizzard, this is an internal extension we made to visual studio.","Copy-Paste error from Blizzard, this is an internal extension we made to visual studio.",True,{}
premake/premake-core,https://github.com/premake/premake-core,838,2017-06-22T00:36:17Z,2017-06-22T20:34:08Z,2017-06-22T20:34:10Z,MERGED,True,1,1,1,https://github.com/tvandijck,Fix bug in 'action.isConfigurable' not checking for onWorkspace.,1,[],https://github.com/premake/premake-core/pull/838,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/838,"subtle, but pretty deadly :)","subtle, but pretty deadly :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,839,2017-06-22T20:29:00Z,2017-06-23T21:23:11Z,2017-06-23T21:23:11Z,MERGED,True,8,5,2,https://github.com/Mikhael-Danilov,Expand {...} macros in pre|post build commands for codelite,3,[],https://github.com/premake/premake-core/pull/839,https://github.com/Mikhael-Danilov,1,https://github.com/premake/premake-core/pull/839,fixes #835,fixes #835,True,{}
premake/premake-core,https://github.com/premake/premake-core,839,2017-06-22T20:29:00Z,2017-06-23T21:23:11Z,2017-06-23T21:23:11Z,MERGED,True,8,5,2,https://github.com/Mikhael-Danilov,Expand {...} macros in pre|post build commands for codelite,3,[],https://github.com/premake/premake-core/pull/839,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/839#issuecomment-310494768,fixes #835,"Other then the test failures, the changes looks fine to me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,839,2017-06-22T20:29:00Z,2017-06-23T21:23:11Z,2017-06-23T21:23:11Z,MERGED,True,8,5,2,https://github.com/Mikhael-Danilov,Expand {...} macros in pre|post build commands for codelite,3,[],https://github.com/premake/premake-core/pull/839,https://github.com/Mikhael-Danilov,3,https://github.com/premake/premake-core/pull/839#issuecomment-310647644,fixes #835,Looks like test fail because of partial test environment setup. I will fix it and update PR a bit later.,True,{}
premake/premake-core,https://github.com/premake/premake-core,839,2017-06-22T20:29:00Z,2017-06-23T21:23:11Z,2017-06-23T21:23:11Z,MERGED,True,8,5,2,https://github.com/Mikhael-Danilov,Expand {...} macros in pre|post build commands for codelite,3,[],https://github.com/premake/premake-core/pull/839,https://github.com/Mikhael-Danilov,4,https://github.com/premake/premake-core/pull/839#issuecomment-310772865,fixes #835,Now it passes tests.,True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/840,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.",True,{'THUMBS_UP': ['https://github.com/ratzlaff']}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/840#issuecomment-310933483,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","I only tested this on Windows for the moment, so linux/mac are going to fail this build.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/840#issuecomment-311072383,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","Interesting idea. I don't have a particular use for this right now, but I would be curious to hear from people that do.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/840#issuecomment-311092391,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","Just some examples of options:


This change allows us to integrate LuaRocks if we wanted to, as long as the rock has a .src or a .all spec, we can provide the facilities to build those rocks locally specifically for premake.


I currently have a commit in my history that adds a profiler using a lua hook. It's super hardcoded.. could easily be done using a require(""profiler"")


Embedding lua source inside the module. It would allow for modules to just be distributed as .dll's.


Anyway, I think this is pretty neat, but I don't really have a real use for it either ;) ha...  I just had this idea at 2am saturday night, and had to just implement it, otherwise I'd just keep mulling on it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/ratzlaff,5,https://github.com/premake/premake-core/pull/840#issuecomment-311804708,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","First thing that comes to my mind is extending premake with commands that utilize third party libraries - like curl/ssl. If you were to move those contribs out of the main premake executable and into these binary modules, that would give you a good feel for the system's ease of use.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tritao,6,https://github.com/premake/premake-core/pull/840#issuecomment-311808286,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","For what it's worth I've wanted something like this before. Don't really have any use for it right now though, but still think it might be worth to consider adding it to core, especially as it doesn't seem to add too much complexity to the codebase.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/840#issuecomment-311821901,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","I think indeed like @ratzlaff says... we could basically pull out the zip and http libraries, and just make modules for them... It would get rid of a bunch of command line options to turn these features on/off
curl:
https://github.com/premake/premake-core/blob/master/premake5.lua#L67
zip:
https://github.com/premake/premake-core/blob/master/premake5.lua#L73
just an idea...",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/840#issuecomment-312947170,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","these changes actually make it work on linux, except for that fact that I have to manually rename and move the file...
on windows I get ""example.dll"" in the same folder as the exe, and windows automatically looks there when loading a DLL... on linux this isn't that case... I get libexample.so, also next to the exe, but that is not included in the searchpath.. so I have to move the file into the root of the project, and rename it to example.so for it to work...
gotta figure out a way to make that more consistent.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/840#issuecomment-312949880,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.",So now only macOS is failng.... linux + windows are good.,True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/840#issuecomment-312983304,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.",and... it's green ;) whoop whoop...,True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tritao,11,https://github.com/premake/premake-core/pull/840#issuecomment-319469630,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","Hey @tvandijck, I'm seeing this locally on macOS:
==== Building example (debug) ====
main.c
Linking example
Undefined symbols for architecture x86_64:
  ""_findNode"", referenced from:
      _shimInitialize in libluashim-lib.a(luashim.o)
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

I've tried cleaning and rebuilding but it persists, Release builds works though... I assume it's related to this PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,840,2017-06-25T22:42:47Z,2017-08-01T17:14:26Z,2017-08-02T00:30:55Z,MERGED,True,1419,11,13,https://github.com/tvandijck,Proof of concept for binary modules.,1,[],https://github.com/premake/premake-core/pull/840,https://github.com/tvandijck,12,https://github.com/premake/premake-core/pull/840#issuecomment-319534062,"This change allows you to create .dll (.so on linux/mac?) modules.
I made an example module that shows the setup you have to apply, and a test that calls the example.test function it registers.
I wrapped the entire public Lua API, so in theory any lua code that exists and builds against Lua 5.3.4 can be rebuild against the 'luashim' library, and premake would be able to use it as a shared library. The only requirement is that you call the 'shimInitialize(L);' method as the first thing in your luaopen_ function.","I don't currently have access to a mac, but will look at this tomorrow. Although our builds here are all passing ;(
Any particular repro steps? Or just generally debug fails?",True,{}
premake/premake-core,https://github.com/premake/premake-core,842,2017-07-03T10:55:57Z,2017-07-03T11:07:54Z,2017-07-03T11:07:54Z,MERGED,True,1,1,1,https://github.com/ejb1123,Add bsd to the output of possible platforms,1,[],https://github.com/premake/premake-core/pull/842,https://github.com/ejb1123,1,https://github.com/premake/premake-core/pull/842,Adds bsd to the default output as a possible platform,Adds bsd to the default output as a possible platform,True,{}
premake/premake-core,https://github.com/premake/premake-core,843,2017-07-05T01:44:15Z,2017-07-05T02:18:46Z,2017-07-05T02:18:49Z,MERGED,True,2,0,1,https://github.com/tvandijck,fix bug in testing framework leaving tests in random working folders.,1,[],https://github.com/premake/premake-core/pull/843,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/843,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,844,2017-07-05T01:44:31Z,2017-07-05T02:18:30Z,2017-07-05T02:18:33Z,MERGED,True,1,0,1,https://github.com/tvandijck,fix unreferenced argument warning.,1,[],https://github.com/premake/premake-core/pull/844,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/844,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,849,2017-07-25T20:56:04Z,2017-07-31T20:27:52Z,2017-07-31T20:27:52Z,MERGED,True,17,0,2,https://github.com/mendsley,Write out build log element for VS utility projects,1,[],https://github.com/premake/premake-core/pull/849,https://github.com/mendsley,1,https://github.com/premake/premake-core/pull/849,"In vs2017, utility projects were ignoring the value of buildlog
and defaulting the output to $(IntDir)$(MSBuildProjectName).log","In vs2017, utility projects were ignoring the value of buildlog
and defaulting the output to $(IntDir)$(MSBuildProjectName).log",True,{}
premake/premake-core,https://github.com/premake/premake-core,851,2017-07-31T13:09:46Z,2017-07-31T20:27:13Z,2017-07-31T20:27:13Z,MERGED,True,119,31,4,None,Fix handling of unconventional NuGet .NET Framework folders,1,[],https://github.com/premake/premake-core/pull/851,None,1,https://github.com/premake/premake-core/pull/851,Fixes #796.,Fixes #796.,True,{}
premake/premake-core,https://github.com/premake/premake-core,854,2017-08-01T16:57:26Z,2017-08-01T18:09:41Z,2017-08-02T15:26:20Z,MERGED,True,23,2,6,https://github.com/tvandijck,[core] Add High as a new warning level,2,[],https://github.com/premake/premake-core/pull/854,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/854,Maps to /W4 on VS and -Wall for gcc/clang removing -Wextra,Maps to /W4 on VS and -Wall for gcc/clang removing -Wextra,True,{}
premake/premake-core,https://github.com/premake/premake-core,855,2017-08-01T16:58:30Z,2017-08-01T18:01:58Z,2017-08-01T18:02:01Z,MERGED,True,34,0,2,https://github.com/tvandijck,Add filter for <Image> files (#135),1,[],https://github.com/premake/premake-core/pull/855,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/855,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,856,2017-08-01T16:59:31Z,2017-08-01T18:02:32Z,2017-08-01T18:02:35Z,MERGED,True,11,0,1,https://github.com/tvandijck,Fix path_getrelative for Windows,1,[],https://github.com/premake/premake-core/pull/856,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/856,Windows now performs case insensitive comparison for strings.,Windows now performs case insensitive comparison for strings.,True,{}
premake/premake-core,https://github.com/premake/premake-core,857,2017-08-01T17:02:03Z,2017-08-01T18:03:18Z,2017-08-01T18:03:20Z,MERGED,True,31,21,18,https://github.com/tvandijck,Fix action override targetos,3,[],https://github.com/premake/premake-core/pull/857,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/857,"Without this change, if the action has a targetos the ""--os="" commandline option would be completely ignored, which is obviously a bug.","Without this change, if the action has a targetos the ""--os="" commandline option would be completely ignored, which is obviously a bug.",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,https://github.com/tritao,1,https://github.com/premake/premake-core/pull/858,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani","Fixes Nuget package handling to work on OSX.
cc @aleksijuvani",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,None,2,https://github.com/premake/premake-core/pull/858#issuecomment-319492426,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani","LGTM, except that the current NuGet tests are in test_assembly_refs.lua so we should either move those tests to this new file or move this new test to that file.",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,None,3,https://github.com/premake/premake-core/pull/858#issuecomment-319492933,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani","Also, just to note ‚Äì this is matching the filenames returned by the NuGet API so the host system shouldn't matter.. the packager just used a Unix system so that's why the slashes are different for this package.",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,https://github.com/tritao,4,https://github.com/premake/premake-core/pull/858#issuecomment-319500667,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani","I thought so too, but actually the issue is some path.translate call that is done before this function is called, only realized this after the fix, what do you think? Should we hardcode a separator in the translate call instead?",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,None,5,https://github.com/premake/premake-core/pull/858#issuecomment-319504067,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani","You're right, it looks like the API always returns paths with forward slashes, so it is a local issue after all. I'm not sure if it matters which way we solve it. I guess you'll just have to test it if it breaks anything.",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/858#issuecomment-319707687,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani",I'm a little confused with the conclusion of the above discussion? are we good to merge? it looks fine to me.,True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,None,7,https://github.com/premake/premake-core/pull/858#issuecomment-319708834,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani","Should be good to merge, I just got a bit confused.",True,{}
premake/premake-core,https://github.com/premake/premake-core,858,2017-08-01T20:36:24Z,2017-08-02T18:00:46Z,2017-08-02T18:00:46Z,MERGED,True,41,1,3,https://github.com/tritao,Fix Nuget package handling to support Unix-style paths,1,[],https://github.com/premake/premake-core/pull/858,https://github.com/tritao,8,https://github.com/premake/premake-core/pull/858#issuecomment-319710243,"Fixes Nuget package handling to work on OSX.
cc @aleksijuvani",üëç,True,{}
premake/premake-core,https://github.com/premake/premake-core,859,2017-08-02T10:33:55Z,2017-08-02T18:01:11Z,2017-08-02T18:01:11Z,MERGED,True,203,112,2,None,Use NuGet package cache instead of the API if possible,3,[],https://github.com/premake/premake-core/pull/859,None,1,https://github.com/premake/premake-core/pull/859,"This cuts down premake5 time from around 20 seconds to around 1 second on a project with 12 NuGet packages, provided that the packages are in the local NuGet cache.","This cuts down premake5 time from around 20 seconds to around 1 second on a project with 12 NuGet packages, provided that the packages are in the local NuGet cache.",True,{}
premake/premake-core,https://github.com/premake/premake-core,860,2017-08-02T15:50:14Z,2017-08-02T18:01:24Z,2017-08-02T18:01:27Z,MERGED,True,3,2,2,https://github.com/tvandijck,fix for build failure on macOS in debug.,1,[],https://github.com/premake/premake-core/pull/860,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/860,Fixes issue reported here: #840,Fixes issue reported here: #840,True,{}
premake/premake-core,https://github.com/premake/premake-core,860,2017-08-02T15:50:14Z,2017-08-02T18:01:24Z,2017-08-02T18:01:27Z,MERGED,True,3,2,2,https://github.com/tvandijck,fix for build failure on macOS in debug.,1,[],https://github.com/premake/premake-core/pull/860,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/860#issuecomment-319714530,Fixes issue reported here: #840,"I also updated the travis-ci script to make a debug build, so this doesn't happen again.",True,{}
premake/premake-core,https://github.com/premake/premake-core,861,2017-08-04T16:23:31Z,2017-08-07T16:26:32Z,2017-08-07T16:26:35Z,MERGED,True,28,6,4,https://github.com/tvandijck,Allow embedding of binary resources.,2,[],https://github.com/premake/premake-core/pull/861,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/861,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,862,2017-08-04T16:24:58Z,2017-08-07T15:49:50Z,2017-08-07T15:49:53Z,MERGED,True,4,5,1,https://github.com/tvandijck,small optimization in oven.,1,[],https://github.com/premake/premake-core/pull/862,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/862,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,863,2017-08-04T16:26:02Z,2017-08-07T15:48:37Z,2017-08-07T15:49:32Z,MERGED,True,4,2,1,https://github.com/tvandijck,fix for duplicate 'allowed'.,1,[],https://github.com/premake/premake-core/pull/863,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/863,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,864,2017-08-04T16:27:34Z,2017-08-07T15:48:17Z,2017-08-07T15:48:20Z,MERGED,True,12,11,1,https://github.com/tvandijck,"move tags into globally accessible table, so we don't have to overload‚Ä¶",1,[],https://github.com/premake/premake-core/pull/864,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/864,‚Ä¶ the getSystemTags method all over the place.,‚Ä¶ the getSystemTags method all over the place.,True,{}
premake/premake-core,https://github.com/premake/premake-core,865,2017-08-07T16:26:53Z,2017-08-09T16:21:02Z,2017-08-09T16:21:05Z,MERGED,True,11,11,2,https://github.com/tvandijck,"Remove ""test.print"" calls.",1,[],https://github.com/premake/premake-core/pull/865,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/865,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,865,2017-08-07T16:26:53Z,2017-08-09T16:21:02Z,2017-08-09T16:21:05Z,MERGED,True,11,11,2,https://github.com/tvandijck,"Remove ""test.print"" calls.",1,[],https://github.com/premake/premake-core/pull/865,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/865#issuecomment-320712352,,"Still have no idea what is going on with the two tests that sporadically fail... but we have output from one of the failures, and it looks like sometimes the returned tables from the fetch are entirely empty rather then containing the values we test for. I added extra asserts to test if the store succeeded, but other then that we have no additional information yet.",True,{}
premake/premake-core,https://github.com/premake/premake-core,866,2017-08-07T17:21:35Z,2017-08-10T15:25:33Z,2017-08-10T15:25:38Z,MERGED,True,5,3,1,https://github.com/tvandijck,fix os.istarget and os.ishost to use the systemTags table as well.,1,[],https://github.com/premake/premake-core/pull/866,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/866,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,867,2017-08-07T23:37:42Z,2017-08-10T15:25:12Z,2017-08-10T15:25:15Z,MERGED,True,14,13,2,https://github.com/tvandijck,Fix path translate,1,[],https://github.com/premake/premake-core/pull/867,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/867,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,868,2017-08-08T00:54:38Z,2017-08-10T15:24:46Z,2017-08-10T15:24:50Z,MERGED,True,2,2,1,https://github.com/tvandijck,Filters always have to use \ regardless of target platform.,1,[],https://github.com/premake/premake-core/pull/868,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/868,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,870,2017-08-08T19:50:28Z,2017-08-10T15:24:24Z,2017-08-10T15:24:27Z,MERGED,True,4,0,1,https://github.com/tvandijck,Fix prj.system bug in oven.,1,[],https://github.com/premake/premake-core/pull/870,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/870,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,872,2017-08-10T18:43:27Z,2017-08-11T02:48:35Z,2017-08-11T13:28:00Z,MERGED,True,5,4,2,https://github.com/starkos,Rework binmodule example to silence unit test console output,1,[],https://github.com/premake/premake-core/pull/872,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/872,"Trying to return from the dead‚Ä¶small fix to remove some spurious console output from Premake's own unit tests. Reworks the binmodule example function to concatenate two strings and return the result, rather than write to the console. Adjusts the corresponding unit test to verify the result.","Trying to return from the dead‚Ä¶small fix to remove some spurious console output from Premake's own unit tests. Reworks the binmodule example function to concatenate two strings and return the result, rather than write to the console. Adjusts the corresponding unit test to verify the result.",True,{}
premake/premake-core,https://github.com/premake/premake-core,872,2017-08-10T18:43:27Z,2017-08-11T02:48:35Z,2017-08-11T13:28:00Z,MERGED,True,5,4,2,https://github.com/starkos,Rework binmodule example to silence unit test console output,1,[],https://github.com/premake/premake-core/pull/872,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/872#issuecomment-321641986,"Trying to return from the dead‚Ä¶small fix to remove some spurious console output from Premake's own unit tests. Reworks the binmodule example function to concatenate two strings and return the result, rather than write to the console. Adjusts the corresponding unit test to verify the result.","welcome back ;) and yes, this was on my bucket list... thank you...",True,{}
premake/premake-core,https://github.com/premake/premake-core,874,2017-08-10T18:56:19Z,2017-08-11T02:48:18Z,2017-08-11T13:27:54Z,MERGED,True,4,4,1,https://github.com/starkos,Disable failing `os.findheader()` unit test on macOS,1,[],https://github.com/premake/premake-core/pull/874,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/874,"This test currently fails on macOS, see issue #873 for the details.","This test currently fails on macOS, see issue #873 for the details.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,1,https://github.com/premake/premake-core/pull/875,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,2,https://github.com/premake/premake-core/pull/875#issuecomment-323072207,,"With the current implementation, if something went wrong in the lua progress callback, we wouldn't get any notification about it. The download will finish regardless of the callback failing or not, but an error message would be useful for debugging.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/875#issuecomment-323101465,,"I think this is OK, but I would indeed prefer a pcall to premake.error as sam suggests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,4,https://github.com/premake/premake-core/pull/875#issuecomment-323289985,,"Pcalling premake.error is redundant and it wouldn't print any error message.
function premake.error(message, ...)
    error(string.format(""** Error: "" .. message, ...), 0)
end
It calls the lua standard error function, so a lua_pcall would return with LUA_ERRRUN, leaving the message printing to the C side.
Instead, forwarding errors to the site where _premake_main is called (premake.c/premake_execute) would basically have the same behaviour as calling premake.error from the script.
/* retrieve the lua progress callback we saved before */
lua_rawgeti(L, LUA_REGISTRYINDEX, state->RefIndex);
lua_pushnumber(L, (lua_Number)dltotal);
lua_pushnumber(L, (lua_Number)dlnow);
int ret = lua_pcall(L, 2, LUA_MULTRET, 0);
if (ret != LUA_OK) {
    // leave error handling to premake_execute
    // unlike in the original commit, this is now terminates script execution
    lua_error(L);
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/875#issuecomment-323297752,,"I don't really have the time to look at how this all works right now. Just write a test for this, if the error message appears during test execution, the implementation is wrong - it's that simple.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,6,https://github.com/premake/premake-core/pull/875#issuecomment-323330925,,Displaying the error message is the intention. I don't know how exactly should I write a test for this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/875#issuecomment-323413765,,"I see what you mean now indeed.... we could display it as a warning instead, since its not fatal... which would be accomplished through premake.warn... other then that, I understand calling premake.error is indeed not solving anything...
I think what this comes down to for me personally, is the hardcoded 12, where a term.errorColor exists.
That said, this pull request: #876 that @starkos made kind of simplified it a bit, so maybe that PR and this one can be combined, and the printLastError can be used. (it's static now, but we can easily just make that a public function).",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/data-man,8,https://github.com/premake/premake-core/pull/875#issuecomment-323425683,,General question: why not use the excellent Lua-cURLv3 library?,True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/875#issuecomment-323440142,,"@data-man we could... but it's a LuaRock. Premake doesn't really support luaRocks out of the box, because ""Lua"" itself is embedded in Premake, and not as a dll. That said, the new binary module system I made would allow for any LuaRock to be compiled against Premake, and should work... nobody tried yet though.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/data-man,10,https://github.com/premake/premake-core/pull/875#issuecomment-323444491,,"@tvandijck

but it's a LuaRock

Not necessarily. See luaopen_lcurl and luaopen_lcurl_safe.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/875#issuecomment-323447019,,"@data-man yeah, that's what I said... it should be possible to compile it against premake, using the new binary module stuff... it will however require use to copy the code, modify the build settings/scripts/whatever.... So my point is... it won't just work out of the box. it will require some engineering to get it to work.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,12,https://github.com/premake/premake-core/pull/875#issuecomment-323521693,,"premake.warn wont work either as it also calls the builtin lua error function if the --fatal command line flag is used. I've updated the PR, I think it is more acceptable now. Let me know if any modifications needed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,13,https://github.com/premake/premake-core/pull/875#issuecomment-323769969,,looks good to me...,True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,14,https://github.com/premake/premake-core/pull/875#issuecomment-324390210,,@starkos why closing it?,True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/starkos,15,https://github.com/premake/premake-core/pull/875#issuecomment-324401246,,"I didn't close it, but I did remove the alpha12 release branch, which this appears to have been forked from? I've restored the branch for now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/starkos,16,https://github.com/premake/premake-core/pull/875#issuecomment-324401454,,"‚Ä¶but note: the release is done now, so if you merge this request, you should force it over to the master branch, and not leave it on the release branch.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/tvandijck,17,https://github.com/premake/premake-core/pull/875#issuecomment-324403307,,"@starkos, ah I see, I guess github closed it for you then...
@Adamkay can you maybe move this to merge against master? or just open a new pull request on master with these changes? I think the changes are good now, so we can merge this as soon as that is done.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,18,https://github.com/premake/premake-core/pull/875#issuecomment-324407872,,"For sure,",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,19,https://github.com/premake/premake-core/pull/875#issuecomment-325159145,,"So yeah, did a rebase against master. Still, github tells me merging is blocked. Is there something I should do to fix it, or you can merge it? Sorry I'm new to this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/samsinsane,20,https://github.com/premake/premake-core/pull/875#issuecomment-325197483,,"github tells me merging is blocked

You've done everything correctly, it's blocked due to my requested changes. @tvandijck seems to understand this much better than I do, so I'll dismiss my review and leave it for him to approve and merge. Thanks for the changes!",True,{}
premake/premake-core,https://github.com/premake/premake-core,875,2017-08-17T07:52:28Z,2017-08-28T15:31:50Z,2017-08-28T16:18:18Z,MERGED,True,39,20,4,https://github.com/fsm256,Add lua error handling to curlProgressCallback,6,[],https://github.com/premake/premake-core/pull/875,https://github.com/fsm256,21,https://github.com/premake/premake-core/pull/875#issuecomment-325203397,,Thank you!,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,876,2017-08-17T19:43:05Z,2017-08-18T17:48:12Z,2017-08-19T20:16:12Z,MERGED,True,37,26,2,https://github.com/starkos,Fix error reporting for missing core scripts,1,[],https://github.com/premake/premake-core/pull/876,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/876,"If a core script (something listed in the root _manifest.lua), execution fails with the very unhelpful message:
PANIC: unprotected error in call to Lua API (bad argument #-1 (number expected, got nil))
Abort trap: 6

This PR fixes the return value from premake_load_embedded_script() (was LUA_YIELD, not LUA_ERRFILE). It also adds a nil check to the _premake_main error handling for the case where an error color has not yet been set.","If a core script (something listed in the root _manifest.lua), execution fails with the very unhelpful message:
PANIC: unprotected error in call to Lua API (bad argument #-1 (number expected, got nil))
Abort trap: 6

This PR fixes the return value from premake_load_embedded_script() (was LUA_YIELD, not LUA_ERRFILE). It also adds a nil check to the _premake_main error handling for the case where an error color has not yet been set.",True,{}
premake/premake-core,https://github.com/premake/premake-core,876,2017-08-17T19:43:05Z,2017-08-18T17:48:12Z,2017-08-19T20:16:12Z,MERGED,True,37,26,2,https://github.com/starkos,Fix error reporting for missing core scripts,1,[],https://github.com/premake/premake-core/pull/876,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/876#issuecomment-323418336,"If a core script (something listed in the root _manifest.lua), execution fails with the very unhelpful message:
PANIC: unprotected error in call to Lua API (bad argument #-1 (number expected, got nil))
Abort trap: 6

This PR fixes the return value from premake_load_embedded_script() (was LUA_YIELD, not LUA_ERRFILE). It also adds a nil check to the _premake_main error handling for the case where an error color has not yet been set.",not holding up a merge for a 1 character typo... i'll fix it in place.,True,{}
premake/premake-core,https://github.com/premake/premake-core,878,2017-08-27T17:51:13Z,2019-01-11T02:50:19Z,2019-01-11T02:50:19Z,CLOSED,False,37,9,5,https://github.com/SE2Dev,Add Support for Headless Actions,2,[],https://github.com/premake/premake-core/pull/878,https://github.com/SE2Dev,1,https://github.com/premake/premake-core/pull/878,"Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}","Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,878,2017-08-27T17:51:13Z,2019-01-11T02:50:19Z,2019-01-11T02:50:19Z,CLOSED,False,37,9,5,https://github.com/SE2Dev,Add Support for Headless Actions,2,[],https://github.com/premake/premake-core/pull/878,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/878#issuecomment-325447212,"Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}","FWIW, I'm not a huge fan of this approach. I am good with rethinking what we output by default, I just don't think you should have to define a special kind of action to do it. Perhaps we move some of the default output over to verbose, and add a --quiet flag to suppress stdout?",True,{}
premake/premake-core,https://github.com/premake/premake-core,878,2017-08-27T17:51:13Z,2019-01-11T02:50:19Z,2019-01-11T02:50:19Z,CLOSED,False,37,9,5,https://github.com/SE2Dev,Add Support for Headless Actions,2,[],https://github.com/premake/premake-core/pull/878,https://github.com/SE2Dev,3,https://github.com/premake/premake-core/pull/878#issuecomment-325460529,"Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}","@starkos Yes, that would also be potentially viable solution, provided users can still write to stdout / stderr through user defined actions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,878,2017-08-27T17:51:13Z,2019-01-11T02:50:19Z,2019-01-11T02:50:19Z,CLOSED,False,37,9,5,https://github.com/SE2Dev,Add Support for Headless Actions,2,[],https://github.com/premake/premake-core/pull/878,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/878#issuecomment-325643716,"Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}","I tend to agree with @starkos here, this isn't a great solution. It's prone to failure as it's assuming that all future usages of print/printf will be wrapped in a check for headless. I'll admit that I'm probably going to forget about this thing in less than a month, and will likely approve and merge PRs that will break your expected functionality.
I highly recommend that you just emit a file to disk and pipe that into your VSCode extension. Alternatively, have your action override all of the output functions and have a copy of the originals for your action to call.",True,{}
premake/premake-core,https://github.com/premake/premake-core,878,2017-08-27T17:51:13Z,2019-01-11T02:50:19Z,2019-01-11T02:50:19Z,CLOSED,False,37,9,5,https://github.com/SE2Dev,Add Support for Headless Actions,2,[],https://github.com/premake/premake-core/pull/878,https://github.com/SE2Dev,5,https://github.com/premake/premake-core/pull/878#issuecomment-325668626,"Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}","@samsinsane I did have an alternative version of newaction() that overrides various print functions until onStart() is called on the action and then disabled the print functions again after onEnd() completes, but I wasn't terribly fond of this method as if any new print functions were added, (e.g. eprint()) the hook would need to be manually updated.
The benefit to using this method is that it can easily be added to Premake by requiring whichever file you put the code in in premake5.lua.
-- Locals to keep track of the original functions
local _print = print
local _printf = printf
local _io_write = io.write

local _newaction = newaction

-- Enables support for headless actions
function newaction(a)
    if a.headless ~= true then
        return _newaction(a)
    end

    function io_initHooks()
        local _dummyFunc = function(...)
        end

        print = _dummyFunc
        printf = _dummyFunc
        io.write = _dummyFunc
    end

    function io_freeHooks()
        print = _print
        printf = _printf
        io.write = _io_write
    end

    -- Prevent any info from printing before the action starts
    if (a.trigger == _ACTION) then
        io_initHooks()
    end

    -- Re-enable printing and start the action
    local _onStart = a.onStart
    a.onStart = function()
        io_freeHooks()
        if (_onStart ~= nil) then
            _onStart()
        end
    end

    -- Disable any summary info from printing
    local _onEnd = a.onEnd
    a.onEnd = function()
        if (_onEnd ~= nil) then
            _onEnd()
        end
        io_initHooks()
    end

    return _newaction(a)
end",True,{}
premake/premake-core,https://github.com/premake/premake-core,878,2017-08-27T17:51:13Z,2019-01-11T02:50:19Z,2019-01-11T02:50:19Z,CLOSED,False,37,9,5,https://github.com/SE2Dev,Add Support for Headless Actions,2,[],https://github.com/premake/premake-core/pull/878,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/878#issuecomment-453355381,"Added eprintf() - a variant of printf() that writes to stderr instead of stdout.
Added support for ""headless"" actions which, when run, prevent Premake from printing various information (such as the ""Building configurations..."" notification, or the execution time summary). This can be used to allow Premake to function as a standalone Lua engine, as well as allows these ""headless"" actions to be used to pipe output to other programs.

An action can be made headless by setting the headless field of the action to true when calling newaction, if this field is not present or is not set to true, the action is not considered headless.
Example of a headless action:
newaction {
    trigger = ""myaction"",
    description = ""Describe your action!"",
    headless = true, -- Make this action headless
    onStart = function()
        print(""START"")
    end,
    onWorkspace = function(wks)
        printf(""WORKSPACE:\t%s"", wks.name)
    end,
    onProject = function(prj)
        printf(""PROJECT:\t%s"", prj.name)
    end,
    onRule = function(rule)
        print(""RULE"")
    end,
    execute = function()
        print(""EXECUTE"")
    end,
    onEnd = function()
        print(""END"")
    end
}","I'm going to close this off, please feel free to reopen.",True,{}
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/879,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.","The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.",True,"{'HOORAY': ['https://github.com/realvictorprm'], 'HEART': ['https://github.com/realvictorprm'], 'THUMBS_UP': ['https://github.com/realvictorprm', 'https://github.com/cartermp', 'https://github.com/matthid']}"
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/879#issuecomment-325409911,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.","Interesting, we also started adding more F# code to one of our Premake projects.
For now we just reference the .fsproj in the solution file directly, but this could come handy :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/879#issuecomment-325412143,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.","The one gotcha in F# is that files or order dependent, so using:
files { '*.fs' } 

is most of the time not working, so for F# projects you have to explicitly say:
files { 'a.fs', 'b.fs', etc }

other then that, this change works like a charm for us.",True,{}
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/879#issuecomment-325448229,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.",Nice! I've only dabbled in F# myself so I'm not likely to be much help here.,True,{}
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/realvictorprm,5,https://github.com/premake/premake-core/pull/879#issuecomment-325452531,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.","Super awesome. If you need some help, I'm sure the  F# community and or me would happily help!",True,{}
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/879#issuecomment-325719363,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.","@samsinsane thnx for the review, I'll see if I can ""fix"" things up today.",True,{}
premake/premake-core,https://github.com/premake/premake-core,879,2017-08-28T16:29:36Z,2017-08-30T18:35:43Z,2017-08-30T18:35:47Z,MERGED,True,1415,781,47,https://github.com/tvandijck,Fsharp support,4,[],https://github.com/premake/premake-core/pull/879,https://github.com/realvictorprm,7,https://github.com/premake/premake-core/pull/879#issuecomment-326021763,"The Overwatch team has been working on adding FSharp Support to premake. This set of changes covers most of our usecases, but other changes may be required to get full coverage. Thanks to Mike Aversa for these changes.",I'll take a look into this now too.,True,{}
premake/premake-core,https://github.com/premake/premake-core,880,2017-08-28T23:05:31Z,2017-08-29T12:16:30Z,2017-10-02T18:45:33Z,MERGED,True,50,27,2,https://github.com/tvandijck,Allow tokens to start with a ! to disable making paths relative.,1,[],https://github.com/premake/premake-core/pull/880,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/880,"Allows you to write
%{!file.abspath} in a buildcommand, and prevent it from getting turned into a relative path.","Allows you to write
%{!file.abspath} in a buildcommand, and prevent it from getting turned into a relative path.",True,{}
premake/premake-core,https://github.com/premake/premake-core,881,2017-08-28T23:14:50Z,2017-08-29T16:26:24Z,2017-08-29T16:26:34Z,CLOSED,False,37,5,2,https://github.com/tvandijck,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/881,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/881,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,881,2017-08-28T23:14:50Z,2017-08-29T16:26:24Z,2017-08-29T16:26:34Z,CLOSED,False,37,5,2,https://github.com/tvandijck,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/881,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/881#issuecomment-325509262,,"This is a duplicate of: #671
I'm not sure why we never merged that, I need to re-read that discussion. That said, I finally did run into the problem myself as well...",True,{}
premake/premake-core,https://github.com/premake/premake-core,881,2017-08-28T23:14:50Z,2017-08-29T16:26:24Z,2017-08-29T16:26:34Z,CLOSED,False,37,5,2,https://github.com/tvandijck,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/881,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/881#issuecomment-325648514,,"What benefits does this have over using links as you suggested in the other PR? I'm not 100% against this, but I think a project at work does have obj models in their project and I'd like to avoid issues if I can.",True,{}
premake/premake-core,https://github.com/premake/premake-core,881,2017-08-28T23:14:50Z,2017-08-29T16:26:24Z,2017-08-29T16:26:34Z,CLOSED,False,37,5,2,https://github.com/tvandijck,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/881,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/881#issuecomment-325718723,,"What benefits does this have over using links as you suggested in the other PR?
The files actually show up in the explorer... other then that, nothing.

After reading the other PR again, I think the original conclusion was to use the buildaction API for this, which I think would be a good solution.
I think what we can do is if it's not set assume ""none"", so it doesn't change current behavior, and if you actually wanted them as ""Object"" in the project you can mark them with ""buildaction(""Object"")"". That way we all get cake and rainbows.
That said, I can indeed just 'link' these files... seems to work as well. So I don't really see this as high priority... let's just close all of these, and if I ever get to add the buildaction thing, I'll reopen.",True,"{'THUMBS_UP': ['https://github.com/samsinsane'], 'LAUGH': ['https://github.com/samsinsane']}"
premake/premake-core,https://github.com/premake/premake-core,882,2017-08-28T23:58:47Z,2017-08-29T12:31:31Z,2017-10-02T18:45:34Z,MERGED,True,4,0,2,https://github.com/tvandijck,Allow filtering on host.,1,[],https://github.com/premake/premake-core/pull/882,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/882,"for example:
filter { 'host:windows' }
   postbuildcommand { 'robocopy *.dll c:\dlls' }","for example:
filter { 'host:windows' }
   postbuildcommand { 'robocopy *.dll c:\dlls' }",True,{}
premake/premake-core,https://github.com/premake/premake-core,883,2017-08-30T16:58:58Z,2017-09-05T17:18:07Z,2017-09-06T00:42:08Z,MERGED,True,161,1,9,https://github.com/samsinsane,Added basic iOS support to XCode4,2,[],https://github.com/premake/premake-core/pull/883,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/883,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,883,2017-08-30T16:58:58Z,2017-09-05T17:18:07Z,2017-09-06T00:42:08Z,MERGED,True,161,1,9,https://github.com/samsinsane,Added basic iOS support to XCode4,2,[],https://github.com/premake/premake-core/pull/883,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/883#issuecomment-326080790,,LGTM,True,{}
premake/premake-core,https://github.com/premake/premake-core,883,2017-08-30T16:58:58Z,2017-09-05T17:18:07Z,2017-09-06T00:42:08Z,MERGED,True,161,1,9,https://github.com/samsinsane,Added basic iOS support to XCode4,2,[],https://github.com/premake/premake-core/pull/883,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/883#issuecomment-327244741,,Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,887,2017-09-01T13:59:36Z,2017-09-03T15:51:50Z,2017-09-09T13:32:00Z,MERGED,True,2,1,2,https://github.com/realvictorprm,Fix F# project generation,2,[],https://github.com/premake/premake-core/pull/887,https://github.com/realvictorprm,1,https://github.com/premake/premake-core/pull/887,Adds the missing project import which solves #886,Adds the missing project import which solves #886,True,{'THUMBS_UP': ['https://github.com/mateuszlewko']}
premake/premake-core,https://github.com/premake/premake-core,887,2017-09-01T13:59:36Z,2017-09-03T15:51:50Z,2017-09-09T13:32:00Z,MERGED,True,2,1,2,https://github.com/realvictorprm,Fix F# project generation,2,[],https://github.com/premake/premake-core/pull/887,https://github.com/realvictorprm,2,https://github.com/premake/premake-core/pull/887#issuecomment-326603072,Adds the missing project import which solves #886,found another critical bug,True,{}
premake/premake-core,https://github.com/premake/premake-core,887,2017-09-01T13:59:36Z,2017-09-03T15:51:50Z,2017-09-09T13:32:00Z,MERGED,True,2,1,2,https://github.com/realvictorprm,Fix F# project generation,2,[],https://github.com/premake/premake-core/pull/887,https://github.com/realvictorprm,3,https://github.com/premake/premake-core/pull/887#issuecomment-326605993,Adds the missing project import which solves #886,@tvandijck requesting a review.,True,{}
premake/premake-core,https://github.com/premake/premake-core,887,2017-09-01T13:59:36Z,2017-09-03T15:51:50Z,2017-09-09T13:32:00Z,MERGED,True,2,1,2,https://github.com/realvictorprm,Fix F# project generation,2,[],https://github.com/premake/premake-core/pull/887,https://github.com/realvictorprm,4,https://github.com/premake/premake-core/pull/887#issuecomment-326998961,Adds the missing project import which solves #886,thanks,True,{}
premake/premake-core,https://github.com/premake/premake-core,889,2017-09-06T12:59:35Z,2018-04-14T07:53:36Z,2018-04-16T13:08:10Z,MERGED,True,44,2,2,https://github.com/tdesveaux,Fix context.mergeFilters,5,[],https://github.com/premake/premake-core/pull/889,https://github.com/tdesveaux,1,https://github.com/premake/premake-core/pull/889,"Fix related to #884.
This lead to a 10-15% performance drop for me.","Fix related to #884.
This lead to a 10-15% performance drop for me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,889,2017-09-06T12:59:35Z,2018-04-14T07:53:36Z,2018-04-16T13:08:10Z,MERGED,True,44,2,2,https://github.com/tdesveaux,Fix context.mergeFilters,5,[],https://github.com/premake/premake-core/pull/889,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/889#issuecomment-380907791,"Fix related to #884.
This lead to a 10-15% performance drop for me.","As much as I agree that this fixes #884, the performance implications are a little too severe... we should really look at ways to do this more conditionally, so the impact is minimized.. So I'm going to mark this as ""request changes""...",True,{}
premake/premake-core,https://github.com/premake/premake-core,889,2017-09-06T12:59:35Z,2018-04-14T07:53:36Z,2018-04-16T13:08:10Z,MERGED,True,44,2,2,https://github.com/tdesveaux,Fix context.mergeFilters,5,[],https://github.com/premake/premake-core/pull/889,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/889#issuecomment-380931136,"Fix related to #884.
This lead to a 10-15% performance drop for me.","@tvandijck I agree with this.
However, if someone can test on another project that would be good.
I tested this in our projects at work that were setup with a highly customized premake4 build and that I ""adapted"" to work in premake5.
I will still take a look to see what I can do to improve this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,889,2017-09-06T12:59:35Z,2018-04-14T07:53:36Z,2018-04-16T13:08:10Z,MERGED,True,44,2,2,https://github.com/tdesveaux,Fix context.mergeFilters,5,[],https://github.com/premake/premake-core/pull/889,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/889#issuecomment-380953467,"Fix related to #884.
This lead to a 10-15% performance drop for me.","With this, performance is no longer an issue, difference with the current implementation in master is marginal.
However, this works only for tags and not other terms that are tables.
As far as I know, this is not an issue for now but it might become one in the future.
Would implementing mergeFilters in c improve performances?",True,{}
premake/premake-core,https://github.com/premake/premake-core,889,2017-09-06T12:59:35Z,2018-04-14T07:53:36Z,2018-04-16T13:08:10Z,MERGED,True,44,2,2,https://github.com/tdesveaux,Fix context.mergeFilters,5,[],https://github.com/premake/premake-core/pull/889,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/889#issuecomment-381131371,"Fix related to #884.
This lead to a 10-15% performance drop for me.","I don't know if it would be effective to do it in C... considering you then have to enumerate the table in C, you just end up with a whole lot of calls into lua api's anyway... I think the conditional approach is acceptable, and can always be extended.. I think it's really only the tags that suffer.",True,{}
premake/premake-core,https://github.com/premake/premake-core,889,2017-09-06T12:59:35Z,2018-04-14T07:53:36Z,2018-04-16T13:08:10Z,MERGED,True,44,2,2,https://github.com/tdesveaux,Fix context.mergeFilters,5,[],https://github.com/premake/premake-core/pull/889,https://github.com/tdesveauxPKFX,6,https://github.com/premake/premake-core/pull/889#issuecomment-381135799,"Fix related to #884.
This lead to a 10-15% performance drop for me.","I forgot to mention, I also removed the call to table.joinunique as we don't care about duplicate and it takes more time to check duplicates than just copy the whole thing.
I did not remove the table.joinunique function though, I should remove it before merging this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,896,2017-09-19T13:06:00Z,2017-09-19T16:13:10Z,2017-09-19T16:13:10Z,MERGED,True,62,1,5,https://github.com/rNaire,fix disablewarnings,1,[],https://github.com/premake/premake-core/pull/896,https://github.com/rNaire,1,https://github.com/premake/premake-core/pull/896,Fixes disablewarnings for C# and F#.  This resolves #795.,Fixes disablewarnings for C# and F#.  This resolves #795.,True,{}
premake/premake-core,https://github.com/premake/premake-core,896,2017-09-19T13:06:00Z,2017-09-19T16:13:10Z,2017-09-19T16:13:10Z,MERGED,True,62,1,5,https://github.com/rNaire,fix disablewarnings,1,[],https://github.com/premake/premake-core/pull/896,https://github.com/rNaire,2,https://github.com/premake/premake-core/pull/896#issuecomment-330542825,Fixes disablewarnings for C# and F#.  This resolves #795.,Didn't add F# tests as there were none similar.  Would be happy to do so if wanted though.,True,{}
premake/premake-core,https://github.com/premake/premake-core,897,2017-09-20T20:59:51Z,2017-10-02T18:46:05Z,2017-10-02T18:46:05Z,MERGED,True,510,38,3,https://github.com/hsandt,"Fix c(pp)dialect generating uppercase C(++)xx for Xcode, replace gnu99 with compiler-default",3,[],https://github.com/premake/premake-core/pull/897,https://github.com/hsandt,1,https://github.com/premake/premake-core/pull/897,"As mentioned in #895, when using cdialect ""C98"", ""C90"", etc. (resp. cppdialect ""C++98"", ""C++11"", etc.), the build configuration for Xcode uses GCC_C_LANGUAGE_STANDARD = C98, C90, etc. (resp. CLANG_CXX_LANGUAGE_STANDARD = ""C++98"", ""C++11"", etc.) with uppercase, which produces in turn a command line option ""std=C98"", ""std=C90"", etc. which are considered invalid values by clang.
The pull request contains 2 parts:

Fixes the problem above by associating an explicit string for each dialect (compiler-default, c++ and gnu). Note that the behavior for gnu should not have changed.
Not using cdialect now doesn't set GCC_C_LANGUAGE_STANDARD (Xcode will use an implicit compiler-default), while using cdialect ""Default"" will explicitly set GCC_C_LANGUAGE_STANDARD to ""compiler-default"" (which correspond to gnu11 today). Previously, gnu99 was used with cdialect ""Default"" or no cdialect at all.

I also added the corresponding unit tests for Xcode. For the 2nd part, I had to modify existing tests by removing lines with gnu99.
Since the 2nd part actually changes the previous behavior and may break configuration on existing projects, I would like you to discuss whether I should keep it or not. If you only want the 1st part, I will add gnu99 as a fallback when cdialect is not used. However, I still think that it makes sense to use ""compiler-default"" when cdialect or cppdialect is explicitly used with ""Default"".","As mentioned in #895, when using cdialect ""C98"", ""C90"", etc. (resp. cppdialect ""C++98"", ""C++11"", etc.), the build configuration for Xcode uses GCC_C_LANGUAGE_STANDARD = C98, C90, etc. (resp. CLANG_CXX_LANGUAGE_STANDARD = ""C++98"", ""C++11"", etc.) with uppercase, which produces in turn a command line option ""std=C98"", ""std=C90"", etc. which are considered invalid values by clang.
The pull request contains 2 parts:

Fixes the problem above by associating an explicit string for each dialect (compiler-default, c++ and gnu). Note that the behavior for gnu should not have changed.
Not using cdialect now doesn't set GCC_C_LANGUAGE_STANDARD (Xcode will use an implicit compiler-default), while using cdialect ""Default"" will explicitly set GCC_C_LANGUAGE_STANDARD to ""compiler-default"" (which correspond to gnu11 today). Previously, gnu99 was used with cdialect ""Default"" or no cdialect at all.

I also added the corresponding unit tests for Xcode. For the 2nd part, I had to modify existing tests by removing lines with gnu99.
Since the 2nd part actually changes the previous behavior and may break configuration on existing projects, I would like you to discuss whether I should keep it or not. If you only want the 1st part, I will add gnu99 as a fallback when cdialect is not used. However, I still think that it makes sense to use ""compiler-default"" when cdialect or cppdialect is explicitly used with ""Default"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,897,2017-09-20T20:59:51Z,2017-10-02T18:46:05Z,2017-10-02T18:46:05Z,MERGED,True,510,38,3,https://github.com/hsandt,"Fix c(pp)dialect generating uppercase C(++)xx for Xcode, replace gnu99 with compiler-default",3,[],https://github.com/premake/premake-core/pull/897,https://github.com/hsandt,2,https://github.com/premake/premake-core/pull/897#issuecomment-331529138,"As mentioned in #895, when using cdialect ""C98"", ""C90"", etc. (resp. cppdialect ""C++98"", ""C++11"", etc.), the build configuration for Xcode uses GCC_C_LANGUAGE_STANDARD = C98, C90, etc. (resp. CLANG_CXX_LANGUAGE_STANDARD = ""C++98"", ""C++11"", etc.) with uppercase, which produces in turn a command line option ""std=C98"", ""std=C90"", etc. which are considered invalid values by clang.
The pull request contains 2 parts:

Fixes the problem above by associating an explicit string for each dialect (compiler-default, c++ and gnu). Note that the behavior for gnu should not have changed.
Not using cdialect now doesn't set GCC_C_LANGUAGE_STANDARD (Xcode will use an implicit compiler-default), while using cdialect ""Default"" will explicitly set GCC_C_LANGUAGE_STANDARD to ""compiler-default"" (which correspond to gnu11 today). Previously, gnu99 was used with cdialect ""Default"" or no cdialect at all.

I also added the corresponding unit tests for Xcode. For the 2nd part, I had to modify existing tests by removing lines with gnu99.
Since the 2nd part actually changes the previous behavior and may break configuration on existing projects, I would like you to discuss whether I should keep it or not. If you only want the 1st part, I will add gnu99 as a fallback when cdialect is not used. However, I still think that it makes sense to use ""compiler-default"" when cdialect or cppdialect is explicitly used with ""Default"".","All right, I'll try it. Separating data from functions seems good practice to me, and it would also solve the issue of having repeated heap allocations (although that's probably a minor issue, considering our purpose).",True,{}
premake/premake-core,https://github.com/premake/premake-core,897,2017-09-20T20:59:51Z,2017-10-02T18:46:05Z,2017-10-02T18:46:05Z,MERGED,True,510,38,3,https://github.com/hsandt,"Fix c(pp)dialect generating uppercase C(++)xx for Xcode, replace gnu99 with compiler-default",3,[],https://github.com/premake/premake-core/pull/897,https://github.com/hsandt,3,https://github.com/premake/premake-core/pull/897#issuecomment-331537793,"As mentioned in #895, when using cdialect ""C98"", ""C90"", etc. (resp. cppdialect ""C++98"", ""C++11"", etc.), the build configuration for Xcode uses GCC_C_LANGUAGE_STANDARD = C98, C90, etc. (resp. CLANG_CXX_LANGUAGE_STANDARD = ""C++98"", ""C++11"", etc.) with uppercase, which produces in turn a command line option ""std=C98"", ""std=C90"", etc. which are considered invalid values by clang.
The pull request contains 2 parts:

Fixes the problem above by associating an explicit string for each dialect (compiler-default, c++ and gnu). Note that the behavior for gnu should not have changed.
Not using cdialect now doesn't set GCC_C_LANGUAGE_STANDARD (Xcode will use an implicit compiler-default), while using cdialect ""Default"" will explicitly set GCC_C_LANGUAGE_STANDARD to ""compiler-default"" (which correspond to gnu11 today). Previously, gnu99 was used with cdialect ""Default"" or no cdialect at all.

I also added the corresponding unit tests for Xcode. For the 2nd part, I had to modify existing tests by removing lines with gnu99.
Since the 2nd part actually changes the previous behavior and may break configuration on existing projects, I would like you to discuss whether I should keep it or not. If you only want the 1st part, I will add gnu99 as a fallback when cdialect is not used. However, I still think that it makes sense to use ""compiler-default"" when cdialect or cppdialect is explicitly used with ""Default"".","I've done it. I also made the functions local since we do not access them from outside. Note that if we want to test them later, we'll have to make them part of the xcode module again. For now, the tests on XCBuildConfiguration_Target cover what setCLanguageStandard and setCppLanguageStandard do, so I don't think that's necessary. That said, in pure unit test practice, testing the functions independently would normally be the best.",True,{}
premake/premake-core,https://github.com/premake/premake-core,897,2017-09-20T20:59:51Z,2017-10-02T18:46:05Z,2017-10-02T18:46:05Z,MERGED,True,510,38,3,https://github.com/hsandt,"Fix c(pp)dialect generating uppercase C(++)xx for Xcode, replace gnu99 with compiler-default",3,[],https://github.com/premake/premake-core/pull/897,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/897#issuecomment-331690348,"As mentioned in #895, when using cdialect ""C98"", ""C90"", etc. (resp. cppdialect ""C++98"", ""C++11"", etc.), the build configuration for Xcode uses GCC_C_LANGUAGE_STANDARD = C98, C90, etc. (resp. CLANG_CXX_LANGUAGE_STANDARD = ""C++98"", ""C++11"", etc.) with uppercase, which produces in turn a command line option ""std=C98"", ""std=C90"", etc. which are considered invalid values by clang.
The pull request contains 2 parts:

Fixes the problem above by associating an explicit string for each dialect (compiler-default, c++ and gnu). Note that the behavior for gnu should not have changed.
Not using cdialect now doesn't set GCC_C_LANGUAGE_STANDARD (Xcode will use an implicit compiler-default), while using cdialect ""Default"" will explicitly set GCC_C_LANGUAGE_STANDARD to ""compiler-default"" (which correspond to gnu11 today). Previously, gnu99 was used with cdialect ""Default"" or no cdialect at all.

I also added the corresponding unit tests for Xcode. For the 2nd part, I had to modify existing tests by removing lines with gnu99.
Since the 2nd part actually changes the previous behavior and may break configuration on existing projects, I would like you to discuss whether I should keep it or not. If you only want the 1st part, I will add gnu99 as a fallback when cdialect is not used. However, I still think that it makes sense to use ""compiler-default"" when cdialect or cppdialect is explicitly used with ""Default"".","I'm not a fan of local functions, this module is hard enough to override without having to copy even more functions to make it even remotely possible to override properly.",True,{}
premake/premake-core,https://github.com/premake/premake-core,901,2017-10-02T18:14:23Z,2017-10-04T15:49:09Z,2017-10-05T11:40:44Z,MERGED,True,30,2,2,https://github.com/tvandijck,Per file warning levels,1,[],https://github.com/premake/premake-core/pull/901,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/901,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,901,2017-10-02T18:14:23Z,2017-10-04T15:49:09Z,2017-10-05T11:40:44Z,MERGED,True,30,2,2,https://github.com/tvandijck,Per file warning levels,1,[],https://github.com/premake/premake-core/pull/901,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/901#issuecomment-333910912,,"Perhaps this PR should include support for gmake2, xcode4 and .NET, assuming they don't already support per file warnings.


gmake2 already does the right thing with per file settings.
xcode4 is not a thing here at blizzard.
.NET doesn't support per file settings in the IDE.",True,{}
premake/premake-core,https://github.com/premake/premake-core,901,2017-10-02T18:14:23Z,2017-10-04T15:49:09Z,2017-10-05T11:40:44Z,MERGED,True,30,2,2,https://github.com/tvandijck,Per file warning levels,1,[],https://github.com/premake/premake-core/pull/901,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/901#issuecomment-334064735,,"xcode4 is not a thing here at blizzard.

This is a little bit off topic, but:
You guys still have your own xcode module right? Perhaps that could be worked into core in the same way that gmake2 was? Although, the xcode in your public repo appears to be for xcode6, so perhaps it will be more like the VS actions? Coexisting rather than as a future replacement, ultimately both will need to be reworked to share more of a common base, to enable xcode5, xcode7, and xcode8 files to be generated too.",True,{}
premake/premake-core,https://github.com/premake/premake-core,901,2017-10-02T18:14:23Z,2017-10-04T15:49:09Z,2017-10-05T11:40:44Z,MERGED,True,30,2,2,https://github.com/tvandijck,Per file warning levels,1,[],https://github.com/premake/premake-core/pull/901,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/901#issuecomment-334200236,,"You guys still have your own xcode module right?

Yes we do, and while the current ""xcode"" module in premake is called xcode4, it's really more about the format of the file, then the version of xcode. Which applies to ""our"" module as well. The format hasn't changed, some settings have come and gone, but most are essentially just environment variables, with little side effect if they are there. So ultimately the xcode4 as well as our xcode module just support xcode*, and not specifically xcode6, 7 or 8... it started out when xcode6 was latest, hence the name in our public repo... but we have since dropped the version, and have just moved along with whatever version of xcode our games ship with.. which is 8 right now I believe, but the projects still open in 6 and 7 as well, and so far work fine in the betas of 9.

Coexisting rather than as a future replacement,

Yeah, I guess we can do that.. I don't really mind either way, the least I can do is update our public module repository with the latest of what we got, so people can download it and use it if they so please.
And just to give a little bit of history... When we started moving SC2 to use Premake, the Mac Team was really unhappy with the structure of what premake generated at the time. The xcode4 module created 200 xcodeproj folders, and a workspace. It took minutes to load that up, and compilation was taking hours.
Our manually created project, was a single xcodeproj with multiple targets, which was just faster to load, easier to deal with in xcode itself, and while buildtimes are still not great, it was somewhere close to an hour orso.
So the mac team decided to write a new xcode module that basically just replicated the project that was until that time managed manually... a single xcodeproj file and nothing else. Our module as a result does not have a ""OnProject"" callback in the action... just a ""OnWorkspace"" callback, where it writes the entire thing in a single pass..
After that was working, the additional work that went into our module was to correctly use the override ability in xcode... in xcode you can have settings that are set on the project level, on the target level and on the configuration level.. So there is this somewhat complicated piece of code in our module to basically go around the premake configsets to fetch values only in available in the local configset, and not traverse down. So for example if you ask for ""cfg.warnings"" while in the premake script it was set at the project level, you'd get nil, while asking for ""prj.warnings"" would get you the setup values, and so in the xcode project it gets set at the right level.  Which reduced the size of the xcodeproj file by a lot, since it's actually rather rare that a setting is setup for a particular config specifically.
In addition it supports Custom Rules, and per file configuration.",True,{}
premake/premake-core,https://github.com/premake/premake-core,901,2017-10-02T18:14:23Z,2017-10-04T15:49:09Z,2017-10-05T11:40:44Z,MERGED,True,30,2,2,https://github.com/tvandijck,Per file warning levels,1,[],https://github.com/premake/premake-core/pull/901,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/901#issuecomment-334438623,,"@tvandijck Thanks for that, very interesting read! It sounds like these XCode modules might be situational (or perhaps everyone will always prefer to use targets instead), but maybe there's a way to bring the two modules together to give the end user more power over how projects are created for XCode? I don't know much about XCode, so I'm just assuming there are cases where users would want projects and targets in the same workspace.",True,{}
premake/premake-core,https://github.com/premake/premake-core,901,2017-10-02T18:14:23Z,2017-10-04T15:49:09Z,2017-10-05T11:40:44Z,MERGED,True,30,2,2,https://github.com/tvandijck,Per file warning levels,1,[],https://github.com/premake/premake-core/pull/901,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/901#issuecomment-334439685,,"FWIW, I took the multiple projects approach because of this Xcode bug. Also, I don't believe workspaces existed at that time.",True,{}
premake/premake-core,https://github.com/premake/premake-core,902,2017-10-02T18:16:34Z,2017-10-03T08:13:36Z,2017-10-03T08:13:37Z,MERGED,True,2,2,2,https://github.com/tvandijck,VS fix for projects with multiple manifest files,1,[],https://github.com/premake/premake-core/pull/902,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/902,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/903,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/903#issuecomment-333772283,,How has this issue been resolved in gmake2? Could it be applied to gmake too?,True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/903#issuecomment-333909668,,"Could it be applied to gmake too?

Maybe, we don't use the gmake action (it's removed from our internal fork), and I don't know what exactly was fixed in the gmake2 action that makes this no longer a requirement... That said, a lot of the gmake2 code is very similar to the gmake code, so someone could figure things out probably. I think the race condition had to do with the creation of folders...",True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/903#issuecomment-334060758,,"(it's removed from our internal fork)

May I ask why? I'm assuming that the names overlap? Doesn't this make modifying Premake painful?

I don't know what exactly was fixed in the gmake2 action that makes this no longer a requirement

I kind of expected that to be the case, just thought I'd check so we could reduce the discrepancies between the two actions to assist with the transition from gmake -> gmake2.",True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/903#issuecomment-334203337,,"May I ask why?

mostly because people are used to typing ""premake gmake"" on linux, all our build farms are setup that way, I guess I could have just renamed the gmake trigger to 'gmake-old' or something, but instead I choose to remove the code entirely, and just rename the gmake2 trigger to gmake. I'll think about this a little more.

I don't know what exactly was fixed in the gmake2 action that makes this no longer a requirement

@bwhittle would know... he made the fixes, and maybe he can at least explain what is needed to fix it for the standard gmake action.",True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/903#issuecomment-334208205,,It sounds like most of the good stuff is going into gmake2 at this point‚Ä¶is it possible to switch over?,True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/903#issuecomment-334208848,,"it is, but not without deleting the ""D"" module in the process... it was why we went this path, since the ""D"" module overrides a bunch of functionality in the gmake module, and with the big refactor I did in the gmake2 module a lot of that broke.",True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/bwhittle,8,https://github.com/premake/premake-core/pull/903#issuecomment-334217598,,"samsinsane thank you for pointing this out.  Since I work off of the Bliz fork, I didn't realize gmake itself was forked so I can't speak to the reasons why the fork occurred.
I looked at the gmake generation and it does NOT have my prior pch race condition fixes.  As such, I don't think its appropriate to remove the .NOTPARALLEL.  However to be fair, I don't think the current .NOTPARALLEL in the gmake module prevents possible pch race conditions as the .NOTPARALLEL is only emiteds at the workspace level, which just means only one project can run at a time, however each project allows parallel execution.
Prior to an internal roll out of premake for our linux builds, Tom did warn me about possible issues with pch and using make with more than one job thread.  For us this was a big deal as we make heavy use of pch.
My fixes (which all appear to be in gmake2) were rather simple and made use of the pipe operator
https://www.gnu.org/software/make/manual/html_node/Prerequisite-Types.html
For example here an example of the code gen in make
ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o ""$@"" -MF ""$(@:%.gch=%.d)"" -c ""$<""
endif

and here it is gmake2
ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH) | $(OBJDIR) $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | $(OBJDIR)
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o ""$@"" -MF ""$(@:%.gch=%.d)"" -c ""$<""
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
	$(SILENT) touch ""$@""
else
$(OBJECTS): | $(OBJDIR)
endif

I can't promise the above fixes all possible race conditions (it does address the ordering of directory creation and pch creation).   I can report that we've done a bit of testing and have yet to hit a race condition after the removal of the .NOTPARALLEL (which was limiting our build performance.)",True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/903#issuecomment-334441518,,"I'll think about this a little more.

@tvandijck It was mostly for my curiosity, you've mentioned that a few of the modules aren't built internally (could just be my perception and maybe it was just D and now gmake) but you make so many core changes that I've often wondered how you avoid breaking these modules. Perhaps we should just drop D and gmake, and rename gmake2 to gmake?
@bwhittle Thank you for taking the time to explain this! Based on the discussion above, making this change in gmake mightn't be required, and just making the jump to gmake2 would be the best option.",True,{}
premake/premake-core,https://github.com/premake/premake-core,903,2017-10-02T18:17:45Z,2017-10-04T15:56:43Z,2017-10-05T12:09:40Z,MERGED,True,0,16,1,https://github.com/tvandijck,removed a no longer needed make pch race condition fix in gmake2 action,1,[],https://github.com/premake/premake-core/pull/903,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/903#issuecomment-334445557,,"Perhaps we should just drop D and gmake, and rename gmake2 to gmake?

FWIW, I'm not opposed to this. Another option would be to remove or comment out the D module's makefile integration, and leave the rest intact.",True,{}
premake/premake-core,https://github.com/premake/premake-core,904,2017-10-02T18:20:37Z,2017-10-03T16:53:15Z,2017-10-04T06:17:01Z,MERGED,True,1,1,1,https://github.com/tvandijck,Fix makefile/utility project toolset under vs2015 and vs2017,1,[],https://github.com/premake/premake-core/pull/904,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/904,See: #480,See: #480,True,{}
premake/premake-core,https://github.com/premake/premake-core,904,2017-10-02T18:20:37Z,2017-10-03T16:53:15Z,2017-10-04T06:17:01Z,MERGED,True,1,1,1,https://github.com/tvandijck,Fix makefile/utility project toolset under vs2015 and vs2017,1,[],https://github.com/premake/premake-core/pull/904,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/904#issuecomment-333908524,See: #480,"@samsinsane I don't know, we no longer use that.. if anyone can test that, I gladly modify the if statement.",True,{}
premake/premake-core,https://github.com/premake/premake-core,904,2017-10-02T18:20:37Z,2017-10-03T16:53:15Z,2017-10-04T06:17:01Z,MERGED,True,1,1,1,https://github.com/tvandijck,Fix makefile/utility project toolset under vs2015 and vs2017,1,[],https://github.com/premake/premake-core/pull/904,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/904#issuecomment-334059856,See: #480,"@tvandijck Same, sounds good to me!",True,{}
premake/premake-core,https://github.com/premake/premake-core,905,2017-10-02T18:23:06Z,2017-10-03T16:53:55Z,2017-10-03T16:53:57Z,MERGED,True,6,0,2,https://github.com/tvandijck,Fix for build failure in interop projects (/mt with /clr not supported),1,[],https://github.com/premake/premake-core/pull/905,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/905,"Fix for this compile error:
cl : Command line error D8016: '/clr' and '/MT' command-line options are incompatible [d:\p4\Prometheus\ReleaseBranches\1_13_0_0_Build\Projects\PC\DataBuildConverterInterop.vcxproj]
https://msdn.microsoft.com/en-us/library/ffkc918h.aspx
The combination of the _STATIC_CPPLIB preprocessor definition (/D_STATIC_CPPLIB) and the /clr or /clr:pure compiler option is not supported. This is so because the definition would cause your application to link with the static multithreaded Standard C++ Library, which is not supported. For more information, see the /MD, /MT, /LD (Use Run-Time Library) topic.","Fix for this compile error:
cl : Command line error D8016: '/clr' and '/MT' command-line options are incompatible [d:\p4\Prometheus\ReleaseBranches\1_13_0_0_Build\Projects\PC\DataBuildConverterInterop.vcxproj]
https://msdn.microsoft.com/en-us/library/ffkc918h.aspx
The combination of the _STATIC_CPPLIB preprocessor definition (/D_STATIC_CPPLIB) and the /clr or /clr:pure compiler option is not supported. This is so because the definition would cause your application to link with the static multithreaded Standard C++ Library, which is not supported. For more information, see the /MD, /MT, /LD (Use Run-Time Library) topic.",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/906,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/906#issuecomment-334204041,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","@aleksijuvani since most of the nuget stuff came from you, would you be able to review this change?",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,None,3,https://github.com/premake/premake-core/pull/906#issuecomment-334212190,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","Nice. I've been meaning to do this for a while but I haven't had time. I can take a look later, maybe during the weekend?",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/906#issuecomment-334212440,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","awesome, thank you ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/bwhittle,5,https://github.com/premake/premake-core/pull/906#issuecomment-334222586,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","btw, i don't know whats up with the diff in modules/vstudio/tests/vc2010/test_nuget_package_references.lua
However there should only be a handful of changes.

adding a call to packageReferences around line 45
adding a and _ACTION < ""vs2017"" to the if clause at the start of nuGetReferences
the function impl of packageReferences",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/bwhittle,6,https://github.com/premake/premake-core/pull/906#issuecomment-334222868,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.",oh it looks like some tab spacing issue :(,True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,None,7,https://github.com/premake/premake-core/pull/906#issuecomment-334403875,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","It might be a good idea to create a function that does the _ACTION < ""vs2017"" or p.project.iscpp(prj) check so that we can update it easily once/if they start supporting PackageReference for C++ projects. Call the function supportsNewPackageReferences or something like that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/906#issuecomment-334846983,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","K that should all be taken care of... in addition I moved the nuget validation code to inside the visual studio module, since most of the nuget code lives the validation code is pretty specific to how Visual Studio expects those values. Any other backend could deal with nuget in a different way, and require different validation.",True,{}
premake/premake-core,https://github.com/premake/premake-core,906,2017-10-02T18:25:21Z,2017-10-09T17:38:02Z,2017-10-09T17:38:05Z,MERGED,True,647,517,10,https://github.com/tvandijck,for vs2017 and up nuget is now handled by msbuild instead of premake,2,[],https://github.com/premake/premake-core/pull/906,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/906#issuecomment-334850052,"via the new PackageReference nodes.
The upsides here are

the MS package downloading and validation is much faster than the premake version
since the config is in the project file instead of packages.config which means
multiple nuget projects can sit in the same folder.","@aleksijuvani ready for final review, whenever you have time...",True,{}
premake/premake-core,https://github.com/premake/premake-core,907,2017-10-02T18:33:12Z,2017-10-03T16:53:35Z,2017-10-03T16:53:37Z,MERGED,True,12,5,1,https://github.com/tvandijck,small refactor of translateCommandsAndPaths to make it easier,1,[],https://github.com/premake/premake-core/pull/907,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/907,to change behavor of single paths via premake.override,to change behavor of single paths via premake.override,True,{}
premake/premake-core,https://github.com/premake/premake-core,908,2017-10-02T18:39:41Z,2017-10-04T16:53:01Z,2017-10-04T16:53:07Z,MERGED,True,463,84,12,https://github.com/tvandijck,[core] path:join can now be deferred for those paths that execute lua,3,[],https://github.com/premake/premake-core/pull/908,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/908,"prior to this change, paths that begin with ${ } were sometimes assumed to
be either absolute or relative.  new functions have been added in order
to reduce the number of systems that can break.
new functions are:

path:absolutetype -> similair to isabsolute but can return an unknown or maybe result
path:deferredjoin -> similair to path:join but creates a string for unknown absolute
paths which we except to be generated at bake time
path:hasdeferredjoin -> predicate to determine if a path needs to be evaled for
a deferred join
path:resolvedeferredjoin -> resolves a deferredjoin path to an actual path
this is to be called after any %{} replacements occur.

right now all api path types use the deferredjoin code path and
detoken, solution:makerelative and project:makerelative have been updated
to use resolvedeferredjoin.
unit tests have been created to test the four new path functions.","prior to this change, paths that begin with ${ } were sometimes assumed to
be either absolute or relative.  new functions have been added in order
to reduce the number of systems that can break.
new functions are:

path:absolutetype -> similair to isabsolute but can return an unknown or maybe result
path:deferredjoin -> similair to path:join but creates a string for unknown absolute
paths which we except to be generated at bake time
path:hasdeferredjoin -> predicate to determine if a path needs to be evaled for
a deferred join
path:resolvedeferredjoin -> resolves a deferredjoin path to an actual path
this is to be called after any %{} replacements occur.

right now all api path types use the deferredjoin code path and
detoken, solution:makerelative and project:makerelative have been updated
to use resolvedeferredjoin.
unit tests have been created to test the four new path functions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,908,2017-10-02T18:39:41Z,2017-10-04T16:53:01Z,2017-10-04T16:53:07Z,MERGED,True,463,84,12,https://github.com/tvandijck,[core] path:join can now be deferred for those paths that execute lua,3,[],https://github.com/premake/premake-core/pull/908,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/908#issuecomment-333626286,"prior to this change, paths that begin with ${ } were sometimes assumed to
be either absolute or relative.  new functions have been added in order
to reduce the number of systems that can break.
new functions are:

path:absolutetype -> similair to isabsolute but can return an unknown or maybe result
path:deferredjoin -> similair to path:join but creates a string for unknown absolute
paths which we except to be generated at bake time
path:hasdeferredjoin -> predicate to determine if a path needs to be evaled for
a deferred join
path:resolvedeferredjoin -> resolves a deferredjoin path to an actual path
this is to be called after any %{} replacements occur.

right now all api path types use the deferredjoin code path and
detoken, solution:makerelative and project:makerelative have been updated
to use resolvedeferredjoin.
unit tests have been created to test the four new path functions.","This is a pretty big change, and I'm not 100% capable of explaining it as it was introduced by the World of Warcraft team... I'll let @bwhittle explain things further to get the discussion started...",True,{}
premake/premake-core,https://github.com/premake/premake-core,908,2017-10-02T18:39:41Z,2017-10-04T16:53:01Z,2017-10-04T16:53:07Z,MERGED,True,463,84,12,https://github.com/tvandijck,[core] path:join can now be deferred for those paths that execute lua,3,[],https://github.com/premake/premake-core/pull/908,https://github.com/bwhittle,3,https://github.com/premake/premake-core/pull/908#issuecomment-333673961,"prior to this change, paths that begin with ${ } were sometimes assumed to
be either absolute or relative.  new functions have been added in order
to reduce the number of systems that can break.
new functions are:

path:absolutetype -> similair to isabsolute but can return an unknown or maybe result
path:deferredjoin -> similair to path:join but creates a string for unknown absolute
paths which we except to be generated at bake time
path:hasdeferredjoin -> predicate to determine if a path needs to be evaled for
a deferred join
path:resolvedeferredjoin -> resolves a deferredjoin path to an actual path
this is to be called after any %{} replacements occur.

right now all api path types use the deferredjoin code path and
detoken, solution:makerelative and project:makerelative have been updated
to use resolvedeferredjoin.
unit tests have been created to test the four new path functions.","This change came after observing inconsistent with odd behavior when specific tokens were used in paths (sometimes a specific token worked fine in one context but not another.)
At one point I realized that the issue was that a specific premake token I was using (file.basename, I believe) was being treated by premake as an absolute path.  At first I tried changing the behavior of path_isabsolute to treat tokens as relative paths and this approach caused issues since most of the premake tokens expand to full paths.
I realized the source of the issue is that false positives or false negatives with path_isabsolute can lead to several problems.
The core of the issue is if a path is joined with another path which starts off with a premake token, path_join can‚Äôt correctly form the correct path since token expansion occurs later in the process.
One solution (which is implemented in this change) is to extend path_isabsolute to return a ""maybe"" if a premake token is at the start of the path (either '&{' or '%[' .)  When joining paths, if the 2nd path has a ‚Äúmaybe‚Äù result then both parameters are concatenated with a delimiter (currently the pipe character.)   Multiple ‚Äúmaybe absolute‚Äù paths can be concatenated together with essentially treats it as a path stack.
Finally, after token expansion, we then double check to see if the path is a deferred join (quick scan for the delimiter) and if the path is a deferred join then we break the strings apart and perform a normal path_join.
I‚Äôve added a number of unit tests to handle all of the deferred join cases I can think.  Additionally, we've been using this using this code in production for several months now.
I still need to create a couple unit tests to highlight the original path_join problem in context of a full premake project with tokens and token expansion.  Such unit tests would result in unit test failures without a fix (either this fix or another.)
Potential issues with this commit are
The implementation could likely be cleaner.
For example, it may make more sense to have a single code path in path_join to always create the deferred join path if need be, however I added a parameter to path_join (allowDeferredJoin) to make it explicit which type of behavior is desired.
However, the only time allowDeferredJoin should not be desirable are when paths are joined AFTER token expansion AND the second path has a token (in which case I‚Äôd argue the path is incorrect either way and is the result of a premake script bug.)  So given that, it may make more sense to have a single code path for path_join instead of two for the sake of simplicity.
This commit does change behavior (as most bug fixes do).  This means it‚Äôs possible that some premake projects are currently working around the path_join + token bug via string concatentation or other methods.  If so, then it‚Äôs possible this fix could change the final paths in their generated project files than compared to what they are getting now (in which case the original work around likely needs to be removed.)
There is special handling for paths with tokens spread throughout the code base.  I‚Äôve fixed one of the case (in api.lua.)  Likely other code can be simplified to no longer inspect if a given path has a token or not (i.e. just join any two paths to be resolved after token expansion.)",True,{}
premake/premake-core,https://github.com/premake/premake-core,908,2017-10-02T18:39:41Z,2017-10-04T16:53:01Z,2017-10-04T16:53:07Z,MERGED,True,463,84,12,https://github.com/tvandijck,[core] path:join can now be deferred for those paths that execute lua,3,[],https://github.com/premake/premake-core/pull/908,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/908#issuecomment-333911186,"prior to this change, paths that begin with ${ } were sometimes assumed to
be either absolute or relative.  new functions have been added in order
to reduce the number of systems that can break.
new functions are:

path:absolutetype -> similair to isabsolute but can return an unknown or maybe result
path:deferredjoin -> similair to path:join but creates a string for unknown absolute
paths which we except to be generated at bake time
path:hasdeferredjoin -> predicate to determine if a path needs to be evaled for
a deferred join
path:resolvedeferredjoin -> resolves a deferredjoin path to an actual path
this is to be called after any %{} replacements occur.

right now all api path types use the deferredjoin code path and
detoken, solution:makerelative and project:makerelative have been updated
to use resolvedeferredjoin.
unit tests have been created to test the four new path functions.",we'll clean up those style issues.,True,{}
premake/premake-core,https://github.com/premake/premake-core,908,2017-10-02T18:39:41Z,2017-10-04T16:53:01Z,2017-10-04T16:53:07Z,MERGED,True,463,84,12,https://github.com/tvandijck,[core] path:join can now be deferred for those paths that execute lua,3,[],https://github.com/premake/premake-core/pull/908,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/908#issuecomment-334219862,"prior to this change, paths that begin with ${ } were sometimes assumed to
be either absolute or relative.  new functions have been added in order
to reduce the number of systems that can break.
new functions are:

path:absolutetype -> similair to isabsolute but can return an unknown or maybe result
path:deferredjoin -> similair to path:join but creates a string for unknown absolute
paths which we except to be generated at bake time
path:hasdeferredjoin -> predicate to determine if a path needs to be evaled for
a deferred join
path:resolvedeferredjoin -> resolves a deferredjoin path to an actual path
this is to be called after any %{} replacements occur.

right now all api path types use the deferredjoin code path and
detoken, solution:makerelative and project:makerelative have been updated
to use resolvedeferredjoin.
unit tests have been created to test the four new path functions.",Failure is only due to http test timing out... merging since Mac and Windows builds passed.,True,{}
premake/premake-core,https://github.com/premake/premake-core,913,2017-10-09T17:39:12Z,2017-10-10T13:33:36Z,2017-10-10T16:03:51Z,MERGED,True,3,3,1,https://github.com/tvandijck,Fix subtle bug in table.translate,1,[],https://github.com/premake/premake-core/pull/913,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/913,"ipairs stops enumerating as soon as it cannot find the next index.
If you make a the following table:
	{'a', nil, 'b', 'c'}

ipairs will stop enumerating after 'a',
while #tbl will tell you there is 4 elements.","ipairs stops enumerating as soon as it cannot find the next index.
If you make a the following table:
	{'a', nil, 'b', 'c'}

ipairs will stop enumerating after 'a',
while #tbl will tell you there is 4 elements.",True,{}
premake/premake-core,https://github.com/premake/premake-core,916,2017-10-11T07:24:58Z,2017-10-11T08:07:24Z,2017-10-11T08:07:55Z,CLOSED,False,23,2,2,https://github.com/hatcat,Added asmoptions [BUT WHY DOESN'T IT WORK???],3,[],https://github.com/premake/premake-core/pull/916,https://github.com/hatcat,1,https://github.com/premake/premake-core/pull/916,"Just as you can add additional build options to the compile tool through buildoptions, so I want to be able to add additional options to the assembler tool. I registered an API called asmoptions added a function to vs2010_vcxproj.lua called m.additionalASMOptions and added it to the Masm category.
Now, when I make an asmoptions declaration at workspace scope, those declarations aren't forwarded through to the assembly files. I think I'[m missing something, and as I'm writing this I'm getting an idea that I may have missed the distinction between file specific and non-file specific declarations.
Any ideas from anyone?","Just as you can add additional build options to the compile tool through buildoptions, so I want to be able to add additional options to the assembler tool. I registered an API called asmoptions added a function to vs2010_vcxproj.lua called m.additionalASMOptions and added it to the Masm category.
Now, when I make an asmoptions declaration at workspace scope, those declarations aren't forwarded through to the assembly files. I think I'[m missing something, and as I'm writing this I'm getting an idea that I may have missed the distinction between file specific and non-file specific declarations.
Any ideas from anyone?",True,{}
premake/premake-core,https://github.com/premake/premake-core,916,2017-10-11T07:24:58Z,2017-10-11T08:07:24Z,2017-10-11T08:07:55Z,CLOSED,False,23,2,2,https://github.com/hatcat,Added asmoptions [BUT WHY DOESN'T IT WORK???],3,[],https://github.com/premake/premake-core/pull/916,https://github.com/hatcat,2,https://github.com/premake/premake-core/pull/916#issuecomment-335723808,"Just as you can add additional build options to the compile tool through buildoptions, so I want to be able to add additional options to the assembler tool. I registered an API called asmoptions added a function to vs2010_vcxproj.lua called m.additionalASMOptions and added it to the Masm category.
Now, when I make an asmoptions declaration at workspace scope, those declarations aren't forwarded through to the assembly files. I think I'[m missing something, and as I'm writing this I'm getting an idea that I may have missed the distinction between file specific and non-file specific declarations.
Any ideas from anyone?",False assumption: compile is a built in tool while masm is a custom tool. I'll come up with another solution.,True,{}
premake/premake-core,https://github.com/premake/premake-core,917,2017-10-11T09:31:07Z,2017-10-13T16:06:58Z,2017-10-13T16:06:58Z,MERGED,True,10,2,1,https://github.com/hatcat,MASM preprocessor definitions,5,[],https://github.com/premake/premake-core/pull/917,https://github.com/hatcat,1,https://github.com/premake/premake-core/pull/917,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,917,2017-10-11T09:31:07Z,2017-10-13T16:06:58Z,2017-10-13T16:06:58Z,MERGED,True,10,2,1,https://github.com/hatcat,MASM preprocessor definitions,5,[],https://github.com/premake/premake-core/pull/917,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/917#issuecomment-335852390,,"So, it seems you reverted the asmoptions in this PR, but instead added defines...
Either way, looking at the individual changes, and including the asmoptions, you are indeed correct that this change only added them to the per-file config settings. So unless you set the asmoptions in a filter { 'files:*.asm' } they would indeed not apply...
To make it work for the ""workspace/project"" you have to also emit the  element in a  group where the ClCompile group is emitted. It seems that when I made the categories I didn't really think about this one to be honest... but the insertion point is here:
https://github.com/premake/premake-core/blob/master/modules/vstudio/vs2010_vcxproj.lua#L277
you can look at the m.clCompile function as an example, or m.resourceCompile is an easier example.",True,{}
premake/premake-core,https://github.com/premake/premake-core,917,2017-10-11T09:31:07Z,2017-10-13T16:06:58Z,2017-10-13T16:06:58Z,MERGED,True,10,2,1,https://github.com/hatcat,MASM preprocessor definitions,5,[],https://github.com/premake/premake-core/pull/917,https://github.com/hatcat,3,https://github.com/premake/premake-core/pull/917#issuecomment-335911507,,"I realised that what I particularly wanted to do was set preprocessor definitions for particular assembly files, so that's what I've enabled in this pull request. The asmoptions is not necessary for us right now so I decided against adding it to our fork. I have yet to get the hang of the github mechanisms, so pardon the extraneous portions.
Should we need to set additional Masm options, I'll revisit this part of the code.",True,{}
premake/premake-core,https://github.com/premake/premake-core,919,2017-10-12T23:11:34Z,2017-10-13T16:07:46Z,2017-10-13T16:07:48Z,MERGED,True,78,1,3,https://github.com/tvandijck,Add perfile flags test for gmake backend.,1,[],https://github.com/premake/premake-core/pull/919,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/919,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,920,2017-10-12T23:11:42Z,2017-10-13T16:08:01Z,2017-10-13T16:08:03Z,MERGED,True,10,8,1,https://github.com/tvandijck,small fix in self-test module.,1,[],https://github.com/premake/premake-core/pull/920,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/920,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,921,2017-10-12T23:11:50Z,2017-10-13T16:08:35Z,2017-10-13T16:08:40Z,MERGED,True,2,1,2,https://github.com/tvandijck,Compiler warnings,2,[],https://github.com/premake/premake-core/pull/921,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/921,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,922,2017-10-13T16:12:28Z,2017-10-16T18:28:33Z,2017-10-16T18:28:35Z,MERGED,True,15,3,2,https://github.com/tvandijck,gmake2 bug fix.  When generating gmake file with pch headers,1,[],https://github.com/premake/premake-core/pull/922,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/922,"for either gcc or clang, the generated
make files assumed the system had the touch command.
Which isn't true by default on windows.","for either gcc or clang, the generated
make files assumed the system had the touch command.
Which isn't true by default on windows.",True,{}
premake/premake-core,https://github.com/premake/premake-core,923,2017-10-13T16:14:32Z,2017-10-16T18:25:10Z,2017-10-16T18:28:19Z,MERGED,True,6,0,4,https://github.com/tvandijck,Add Visual Studio ARM64 support. ,1,[],https://github.com/premake/premake-core/pull/923,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/923,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,923,2017-10-13T16:14:32Z,2017-10-16T18:25:10Z,2017-10-16T18:28:19Z,MERGED,True,6,0,4,https://github.com/tvandijck,Add Visual Studio ARM64 support. ,1,[],https://github.com/premake/premake-core/pull/923,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/923#issuecomment-336984866,,"We might indeed yes... this really only applies if the target is windows, but I don't think we've really encountered any issues with this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,925,2017-10-16T10:02:51Z,2017-10-17T11:28:03Z,2017-10-17T11:28:03Z,CLOSED,False,8,1,2,https://github.com/hatcat,Exception handling completed for vcxproj,8,[],https://github.com/premake/premake-core/pull/925,https://github.com/hatcat,1,https://github.com/premake/premake-core/pull/925,Added synchronous and C-throw exceptions to complete the set.,Added synchronous and C-throw exceptions to complete the set.,True,{}
premake/premake-core,https://github.com/premake/premake-core,925,2017-10-16T10:02:51Z,2017-10-17T11:28:03Z,2017-10-17T11:28:03Z,CLOSED,False,8,1,2,https://github.com/hatcat,Exception handling completed for vcxproj,8,[],https://github.com/premake/premake-core/pull/925,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/925#issuecomment-337195080,Added synchronous and C-throw exceptions to complete the set.,Would it be possible to clean up the branch so it contains only the commit(s) related to this change? It looks like some extra baggage got pulled in.,True,{}
premake/premake-core,https://github.com/premake/premake-core,925,2017-10-16T10:02:51Z,2017-10-17T11:28:03Z,2017-10-17T11:28:03Z,CLOSED,False,8,1,2,https://github.com/hatcat,Exception handling completed for vcxproj,8,[],https://github.com/premake/premake-core/pull/925,https://github.com/hatcat,3,https://github.com/premake/premake-core/pull/925#issuecomment-337195786,Added synchronous and C-throw exceptions to complete the set.,"I would love to, but I'm not sure I would know how. I'm rather new to the finer details of git and GitHub.
I guess I could delete my fork and repeat the changes... One moment...",True,{}
premake/premake-core,https://github.com/premake/premake-core,925,2017-10-16T10:02:51Z,2017-10-17T11:28:03Z,2017-10-17T11:28:03Z,CLOSED,False,8,1,2,https://github.com/hatcat,Exception handling completed for vcxproj,8,[],https://github.com/premake/premake-core/pull/925,https://github.com/hatcat,4,https://github.com/premake/premake-core/pull/925#issuecomment-337201705,Added synchronous and C-throw exceptions to complete the set.,"Right, new PR in the queue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,926,2017-10-16T18:24:48Z,2017-11-30T17:25:59Z,2017-11-30T17:26:02Z,MERGED,True,7,6,3,https://github.com/tvandijck,"Fixes translateCommandsAndPaths, and debugargs.",1,[],https://github.com/premake/premake-core/pull/926,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/926,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,927,2017-10-16T23:37:16Z,2017-10-17T15:38:14Z,2017-10-17T15:38:16Z,MERGED,True,88,28,3,https://github.com/tvandijck,bug fix for recursive token expansion,1,[],https://github.com/premake/premake-core/pull/927,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/927,added test in gmake2.,added test in gmake2.,True,{}
premake/premake-core,https://github.com/premake/premake-core,927,2017-10-16T23:37:16Z,2017-10-17T15:38:14Z,2017-10-17T15:38:16Z,MERGED,True,88,28,3,https://github.com/tvandijck,bug fix for recursive token expansion,1,[],https://github.com/premake/premake-core/pull/927,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/927#issuecomment-337194785,added test in gmake2.,Would it be possible to get a test that shows the recursive expansion? The gmake tests on this PR don't seem to show it?,True,{}
premake/premake-core,https://github.com/premake/premake-core,927,2017-10-16T23:37:16Z,2017-10-17T15:38:14Z,2017-10-17T15:38:16Z,MERGED,True,88,28,3,https://github.com/tvandijck,bug fix for recursive token expansion,1,[],https://github.com/premake/premake-core/pull/927,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/927#issuecomment-337262229,added test in gmake2.,"Actually the test was a proof of failure, the title of the PR may be a little off.. but it was a bug in the ""recurse"" function that is inside of the detoken function.
https://github.com/premake/premake-core/pull/927/files#diff-99f714b3251ec87d2c34c37944ca560cR172
At first iteration the 'field' could be nil, while in consecutive iterations it would become the right value. I have no idea if that is a lua bug, or whatever it is, but passing field down as an argument fixed it. The caching added in that function is just a performance improvement.
So the result of the test before the fix would be that the first item in the postbuildcommands was expanded correctly, while the second item would be treated like an absolute path, and chop of everything before the token expansion.",True,{}
premake/premake-core,https://github.com/premake/premake-core,928,2017-10-16T23:43:45Z,2017-10-17T15:00:47Z,2017-10-17T15:00:50Z,MERGED,True,1,0,1,https://github.com/tvandijck,"sometimes due to ordering of test, we're in a rule scope.",1,[],https://github.com/premake/premake-core/pull/928,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/928,"which makes settings some of the values into configsets illegal.
So we must force ourselves into a project scope.","which makes settings some of the values into configsets illegal.
So we must force ourselves into a project scope.",True,{}
premake/premake-core,https://github.com/premake/premake-core,930,2017-10-17T11:27:30Z,2017-10-17T15:27:43Z,2017-10-17T15:27:43Z,CLOSED,False,8,1,2,https://github.com/hatcat,Completed exception handling,1,[],https://github.com/premake/premake-core/pull/930,https://github.com/hatcat,1,https://github.com/premake/premake-core/pull/930,Added synchronous and C-Throw to VS projects.,Added synchronous and C-Throw to VS projects.,True,{}
premake/premake-core,https://github.com/premake/premake-core,931,2017-10-17T15:28:18Z,2017-10-19T15:44:12Z,2017-10-19T15:44:12Z,MERGED,True,6,1,2,https://github.com/hatcat,Added synchronous and C-Throw to VS projects.,3,[],https://github.com/premake/premake-core/pull/931,https://github.com/hatcat,1,https://github.com/premake/premake-core/pull/931,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,931,2017-10-17T15:28:18Z,2017-10-19T15:44:12Z,2017-10-19T15:44:12Z,MERGED,True,6,1,2,https://github.com/hatcat,Added synchronous and C-Throw to VS projects.,3,[],https://github.com/premake/premake-core/pull/931,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/931#issuecomment-337275648,,"Awesome.. thank you.... For what it is worth... you don't have to close and make a new pull request. When you push your updated branch to the same branch as the existing pull request (master in your case), the pull request will automatically update. That way it also keeps prior discussions and reviews in the same context.",True,{}
premake/premake-core,https://github.com/premake/premake-core,931,2017-10-17T15:28:18Z,2017-10-19T15:44:12Z,2017-10-19T15:44:12Z,MERGED,True,6,1,2,https://github.com/hatcat,Added synchronous and C-Throw to VS projects.,3,[],https://github.com/premake/premake-core/pull/931,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/931#issuecomment-337276372,,"An on another note, it is often easier to make pull requests from side branches...
that way it is easier to keep your master in sync with the official master. It's obviously up to you to pick your workflow, but I found that making a clean branch from the official master, and then 'cherry-pick' the changes I want to commit as a pull request into that new branch, it is easier to update those branches and fix things in isolation. It also allows you to make multiple pull requests at once.
there is some good info here btw:
https://guides.github.com/",True,{}
premake/premake-core,https://github.com/premake/premake-core,931,2017-10-17T15:28:18Z,2017-10-19T15:44:12Z,2017-10-19T15:44:12Z,MERGED,True,6,1,2,https://github.com/hatcat,Added synchronous and C-Throw to VS projects.,3,[],https://github.com/premake/premake-core/pull/931,https://github.com/hatcat,4,https://github.com/premake/premake-core/pull/931#issuecomment-337482147,,"Yes, I really need to bite the bullet and RTFM for git and github. BRB...",True,{}
premake/premake-core,https://github.com/premake/premake-core,932,2017-10-18T21:33:03Z,2017-10-19T15:02:40Z,2017-10-19T15:02:40Z,MERGED,True,11,0,1,https://github.com/pjohalloran,Added extra information for Windows platform when copyfile fails.,1,[],https://github.com/premake/premake-core/pull/932,https://github.com/pjohalloran,1,https://github.com/premake/premake-core/pull/932,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,937,2017-10-30T14:31:16Z,2019-01-11T02:52:17Z,2019-01-11T02:52:17Z,CLOSED,False,19,0,1,https://github.com/SE2Dev,Add table.combine(),1,[],https://github.com/premake/premake-core/pull/937,https://github.com/SE2Dev,1,https://github.com/premake/premake-core/pull/937,"Add table.combine(), a function which combines the behaviors of table.merge() and table.join() to combine multiple tables, but append indexed elements rather than overwrite them.","Add table.combine(), a function which combines the behaviors of table.merge() and table.join() to combine multiple tables, but append indexed elements rather than overwrite them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,937,2017-10-30T14:31:16Z,2019-01-11T02:52:17Z,2019-01-11T02:52:17Z,CLOSED,False,19,0,1,https://github.com/SE2Dev,Add table.combine(),1,[],https://github.com/premake/premake-core/pull/937,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/937#issuecomment-340496361,"Add table.combine(), a function which combines the behaviors of table.merge() and table.join() to combine multiple tables, but append indexed elements rather than overwrite them.","I think I would be inclined to add this to one of the other functions, instead of having three. @tvandijck and @samsinsane, any thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,937,2017-10-30T14:31:16Z,2019-01-11T02:52:17Z,2019-01-11T02:52:17Z,CLOSED,False,19,0,1,https://github.com/SE2Dev,Add table.combine(),1,[],https://github.com/premake/premake-core/pull/937,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/937#issuecomment-340502943,"Add table.combine(), a function which combines the behaviors of table.merge() and table.join() to combine multiple tables, but append indexed elements rather than overwrite them.","My only hesitance is that table is getting big and hard to follow with function that have somewhat 'clear' names, but not very self-documenting...
both join, merge and combine all by name to me do the same thing, but none of them actually do, and are slightly different. It's already bad that join and merge exist, adding a third just makes it worse...
Looking at the implementation of all:

join should be table.concat, or something like that.
merge is actually doing a  join in the 'mathematical' sense.
combine is somewhat hard to describe to be honest, I'm not exactly sure.

if we take a step further, I think some table operations are 'array' operations, and some are 'map/table' operations. table.join is currently an array operation, so it could maybe even be array.concat.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,937,2017-10-30T14:31:16Z,2019-01-11T02:52:17Z,2019-01-11T02:52:17Z,CLOSED,False,19,0,1,https://github.com/SE2Dev,Add table.combine(),1,[],https://github.com/premake/premake-core/pull/937,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/937#issuecomment-341138624,"Add table.combine(), a function which combines the behaviors of table.merge() and table.join() to combine multiple tables, but append indexed elements rather than overwrite them.","I would like to create more ""strict"" collection classes/namespaces at some point. Array is definitely one; I think there may be opportunities to optimize performance for array operations. I'd also like to formalize a ""set"", which we use quite a lot (an array that can only have one of each unique value).
So it sounds like this would be better just dropped right into table.merge() then?",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,937,2017-10-30T14:31:16Z,2019-01-11T02:52:17Z,2019-01-11T02:52:17Z,CLOSED,False,19,0,1,https://github.com/SE2Dev,Add table.combine(),1,[],https://github.com/premake/premake-core/pull/937,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/937#issuecomment-453355855,"Add table.combine(), a function which combines the behaviors of table.merge() and table.join() to combine multiple tables, but append indexed elements rather than overwrite them.","I'm going to close this off, please feel free to reopen.",True,{}
premake/premake-core,https://github.com/premake/premake-core,938,2017-11-01T20:59:02Z,2017-11-29T20:13:08Z,2017-11-29T20:13:11Z,MERGED,True,120,27,8,https://github.com/TurkeyMan,Added `staticruntime` API. (#163),1,[],https://github.com/premake/premake-core/pull/938,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/938,Couple of awkward moments.,Couple of awkward moments.,True,{}
premake/premake-core,https://github.com/premake/premake-core,939,2017-11-01T20:59:48Z,2017-11-29T20:12:28Z,2017-11-29T20:12:31Z,MERGED,True,105,51,4,https://github.com/TurkeyMan,Resolve the rule properties for gmake (#162),1,[],https://github.com/premake/premake-core/pull/939,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/939,Using make variables for prop flags didn't work for file-specific settings.,Using make variables for prop flags didn't work for file-specific settings.,True,{}
premake/premake-core,https://github.com/premake/premake-core,941,2017-11-07T02:02:21Z,2017-11-29T20:11:58Z,2017-11-29T20:12:01Z,MERGED,True,15,15,2,https://github.com/TurkeyMan,Fix makefile PCH tab problem,1,[],https://github.com/premake/premake-core/pull/941,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/941,"The tab is significant in this context, and it makes ifeq (...) look like a shell command to execute, which emits errors from make.","The tab is significant in this context, and it makes ifeq (...) look like a shell command to execute, which emits errors from make.",True,{}
premake/premake-core,https://github.com/premake/premake-core,944,2017-11-09T21:47:40Z,2017-11-30T16:54:32Z,2017-11-30T16:54:35Z,MERGED,True,18,6,4,https://github.com/TurkeyMan,C++0x dialect support,1,[],https://github.com/premake/premake-core/pull/944,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/944,Useful on machines with old compilers,Useful on machines with old compilers,True,{}
premake/premake-core,https://github.com/premake/premake-core,945,2017-11-09T22:45:31Z,2017-11-10T03:56:33Z,2017-11-13T18:36:27Z,MERGED,True,21,0,1,https://github.com/TurkeyMan,Natvis files have an item group.,1,[],https://github.com/premake/premake-core/pull/945,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/945,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,947,2017-11-12T16:39:02Z,2018-04-07T12:49:51Z,2018-04-07T12:49:51Z,CLOSED,False,1,1,1,https://github.com/Gereld,Fixed a bug with gmake2 not generating compiler macros when using gcc.,1,[],https://github.com/premake/premake-core/pull/947,https://github.com/Gereld,1,https://github.com/premake/premake-core/pull/947,"gcc.gettoolname returns nil for gcc toolset. As a result gmake2 doesn't generate compiler macros (CC=gcc, CXX=g++, etc...).","gcc.gettoolname returns nil for gcc toolset. As a result gmake2 doesn't generate compiler macros (CC=gcc, CXX=g++, etc...).",True,{}
premake/premake-core,https://github.com/premake/premake-core,947,2017-11-12T16:39:02Z,2018-04-07T12:49:51Z,2018-04-07T12:49:51Z,CLOSED,False,1,1,1,https://github.com/Gereld,Fixed a bug with gmake2 not generating compiler macros when using gcc.,1,[],https://github.com/premake/premake-core/pull/947,https://github.com/Gereld,2,https://github.com/premake/premake-core/pull/947#issuecomment-343757766,"gcc.gettoolname returns nil for gcc toolset. As a result gmake2 doesn't generate compiler macros (CC=gcc, CXX=g++, etc...).","On a second thought, I think not defining CC, CXX and AR in the makefile is done by design. It makes sense on Linux where those environement variables are usually set. But on Windows, they are not. As a result, invoking ""premake5 gmake2"" or ""premake5 gmake2 --cc=gcc"" will still leave them unset. Thus you can't use the generated makefile on Windows.
In my opinion, the solution is to sort this out in the makefile by testing, for example, if CC is set, if not output the ""CC=gcc"" statement.",True,{}
premake/premake-core,https://github.com/premake/premake-core,947,2017-11-12T16:39:02Z,2018-04-07T12:49:51Z,2018-04-07T12:49:51Z,CLOSED,False,1,1,1,https://github.com/Gereld,Fixed a bug with gmake2 not generating compiler macros when using gcc.,1,[],https://github.com/premake/premake-core/pull/947,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/947#issuecomment-344671862,"gcc.gettoolname returns nil for gcc toolset. As a result gmake2 doesn't generate compiler macros (CC=gcc, CXX=g++, etc...).","Tests are failing, so until that time we can't merge this... other then that, I don't really have an opinion about whether this is a good change or not... I have no issues with it personally.",True,{}
premake/premake-core,https://github.com/premake/premake-core,948,2017-11-12T20:01:36Z,2017-11-29T20:11:41Z,2017-11-29T20:11:41Z,MERGED,True,1,1,1,https://github.com/Gereld,Fixed a bug in gmake2 with clang and pch.,1,[],https://github.com/premake/premake-core/pull/948,https://github.com/Gereld,1,https://github.com/premake/premake-core/pull/948,Clang requires the pch file to be the first force-included item. This fix doesn't break pch usage in gcc.,Clang requires the pch file to be the first force-included item. This fix doesn't break pch usage in gcc.,True,{}
premake/premake-core,https://github.com/premake/premake-core,949,2017-11-23T13:01:27Z,2017-11-28T17:23:27Z,2018-02-05T11:57:58Z,MERGED,True,91,12,3,https://github.com/samsinsane,Added DPI awareness support to VS2010+ projects,1,[],https://github.com/premake/premake-core/pull/949,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/949,Resolves #783,Resolves #783,True,{}
premake/premake-core,https://github.com/premake/premake-core,949,2017-11-23T13:01:27Z,2017-11-28T17:23:27Z,2018-02-05T11:57:58Z,MERGED,True,91,12,3,https://github.com/samsinsane,Added DPI awareness support to VS2010+ projects,1,[],https://github.com/premake/premake-core/pull/949,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/949#issuecomment-347466672,Resolves #783,"@tvandijck Not overly sure to be honest, it was a feature request. However, it looks like it enables various functions to respond differently based on the setting. (I skimmed this page, so I could be incredibly wrong)",True,{}
premake/premake-core,https://github.com/premake/premake-core,949,2017-11-23T13:01:27Z,2017-11-28T17:23:27Z,2018-02-05T11:57:58Z,MERGED,True,91,12,3,https://github.com/samsinsane,Added DPI awareness support to VS2010+ projects,1,[],https://github.com/premake/premake-core/pull/949,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/949#issuecomment-347472707,Resolves #783,"Added documentation, is the availability right? Are we drilling down into the alpha releases? I feel like I saw that the other day, but I'm not sure what it was on.",True,{}
premake/premake-core,https://github.com/premake/premake-core,949,2017-11-23T13:01:27Z,2017-11-28T17:23:27Z,2018-02-05T11:57:58Z,MERGED,True,91,12,3,https://github.com/samsinsane,Added DPI awareness support to VS2010+ projects,1,[],https://github.com/premake/premake-core/pull/949,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/949#issuecomment-347602903,Resolves #783,"Availability should be alright...
In my opinion our next release should just be 5.0, or preferably 5.1 (see below), we've been in alpha for 3 years now, things seem pretty stable overall.
All the ideas @starkos has for the query system seem a rather large refactor and deviation from what we have currently that I'd almost argue that that is a 5.5 or even a 6.0. We are internally experimenting with that too btw, based on his ideas and test branches.
The other thing I really think we should be doing is automate the release number.
We use this modification:

Blizzard@f93c769

which basically just takes the tag number from git, and embeds that into the source code. I proposed it once as a PR, but I think at the time there was some argument about the dependency on git, which I feel is somewhat moot since we're on github, and it's just the embed script for automation, we can easily extent it to support other source control systems, or use a command line argument to use the git system, and default to the current behavior..
We could start at 5.0.0, although it'll screw us up a little bit, as we by now are at 5.0.41, but we'll figure that part out here then. We could also just start at 5.1.0, which would help us out.",True,{}
premake/premake-core,https://github.com/premake/premake-core,949,2017-11-23T13:01:27Z,2017-11-28T17:23:27Z,2018-02-05T11:57:58Z,MERGED,True,91,12,3,https://github.com/samsinsane,Added DPI awareness support to VS2010+ projects,1,[],https://github.com/premake/premake-core/pull/949,https://github.com/pdoane,5,https://github.com/premake/premake-core/pull/949#issuecomment-347629031,Resolves #783,"The Windows 10 Creators Update made additional changes to DPI awareness.  There are now 4 values that are interesting:

Unaware
System Aware
Per Monitor Aware V1
Per Monitor Aware V2

For PerMonitorV2, the manifest should generate:
<dpiAware>True/PM</dpiAware>
<dpiAwareness>PerMonitorV2, PerMonitor</dpiAwareness>

I don't think PerMonitorV2 has been reflected into .vcxproj yet.
It might be a good idea to change the enumeration names as ""High"" isn't really clear as to whether it should map to V1 or V2 rules.
More details here: https://blogs.windows.com/buildingapps/2017/04/04/high-dpi-scaling-improvements-desktop-applications-windows-10-creators-update/",True,{}
premake/premake-core,https://github.com/premake/premake-core,950,2017-11-23T14:09:04Z,2017-11-29T20:14:30Z,2017-12-01T05:03:40Z,MERGED,True,52,8,3,https://github.com/samsinsane,Added defaultplatform support to gmake and gmake2 actions,2,[],https://github.com/premake/premake-core/pull/950,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/950,Resolves #943,Resolves #943,True,{}
premake/premake-core,https://github.com/premake/premake-core,951,2017-11-28T14:38:43Z,2017-11-28T14:56:33Z,2017-11-29T14:29:43Z,CLOSED,False,16,8,4,https://github.com/tempura-sukiyaki,Add support for `targetextension` in xcode4,1,[],https://github.com/premake/premake-core/pull/951,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/951,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,952,2017-11-28T16:14:11Z,2018-03-24T06:29:48Z,2018-07-27T09:52:35Z,MERGED,True,14,9,4,https://github.com/tempura-sukiyaki,Add support for `targetextension` in xcode4,1,[],https://github.com/premake/premake-core/pull/952,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/952,"I'm sorry I closed the last pull request, even though you commented.

Is there any particular reason why a ConsoleApp can't specify a targetextension? app.out for example?

There is no way to add extensions to ConsoleApp in Xcode.
Even if you put values in WRAPPER_EXTENSION or EXECUTABLE_EXTENSION, the product has no extension.

Could this also apply to system:ios?

I did not specifically think about system:ios.
This can also apply to system:ios.","I'm sorry I closed the last pull request, even though you commented.

Is there any particular reason why a ConsoleApp can't specify a targetextension? app.out for example?

There is no way to add extensions to ConsoleApp in Xcode.
Even if you put values in WRAPPER_EXTENSION or EXECUTABLE_EXTENSION, the product has no extension.

Could this also apply to system:ios?

I did not specifically think about system:ios.
This can also apply to system:ios.",True,{}
premake/premake-core,https://github.com/premake/premake-core,952,2017-11-28T16:14:11Z,2018-03-24T06:29:48Z,2018-07-27T09:52:35Z,MERGED,True,14,9,4,https://github.com/tempura-sukiyaki,Add support for `targetextension` in xcode4,1,[],https://github.com/premake/premake-core/pull/952,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/952#issuecomment-375850667,"I'm sorry I closed the last pull request, even though you commented.

Is there any particular reason why a ConsoleApp can't specify a targetextension? app.out for example?

There is no way to add extensions to ConsoleApp in Xcode.
Even if you put values in WRAPPER_EXTENSION or EXECUTABLE_EXTENSION, the product has no extension.

Could this also apply to system:ios?

I did not specifically think about system:ios.
This can also apply to system:ios.",Why didn't I merge this...,True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/955,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/955#issuecomment-348341522,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","So... this seems fine, except that it deviates from VS default project output. These paths are nothing like VS would ever emit by default.
I think we need everyone's buy-in to make this change...",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/955#issuecomment-348342818,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","oh I agree, it's somewhat controversial for sure... it just fixes a bunch of issues we've been seeing, and overall we've been using this particular 'schema' for the last 3 years with great success...",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/ratzlaff,4,https://github.com/premake/premake-core/pull/955#issuecomment-348352527,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","Here at the company I work for, we specify non-default output locations for every platform as well (for different reasons), the configuration to do so is just not baked into the premake5 executable.
I am not a fan of those directory names as default, but that is just a personal opinion. As long as I can still override the defaults, I would not expect my current premake5 configuration to be any different.",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/955#issuecomment-348409980,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","Yeah, I'm not sure about this for defaults. For example, our SDK emits to Lib and Lib/Debug, then the files themselves are named based on things, udSDK.vc$(PlatformToolsetVersion).dll, or something like this. So, there's people out there who don't put things in folders and instead have 20 binaries for all the different platforms in a single folder.
Personally, I prefer the properly named approach. However, I feel like your solution is great for a package server, but in the event you've just dump the SDK into your repo, specifying a single libdirs entry isn't really possible? Windows has the toolset specified, Linux doesn't. I'd prefer to just specify a single entry, %{os}-%{toolset}-%{platform}-%{configuration} is nice and simple. (Assume each of those is the correct token.)
Also, would be nice to have a way to know what Linux distro the binary is built for, but that's probably outside the scope of this PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/955#issuecomment-348480893,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","I agree that the change is needed, but also don't like these defaults.
For object directories, I'd be happy enough if you changed obj/windows-clang-debug to obj/Debug/Windows/Clang to better match Visual Studio's defaults. Most people bootstrapping a new project aren't going to care too much about the obj folder tree, and those that have a standard will need to configure it themselves anyway.
For binary directories, I think the Premake default should really be doing the minimum necessary. Per the other comments, most people will already have opinions on how to configure this anyway.
Perhaps, for the binary directories, there is a way to better support company-wide settings? So someone could create a script like (untested):
-- Defaults for project binary outputs
targetdir 'bin/%{cfg.platform}-%{cfg.toolset}-%{cfg.configuration}'
‚Ä¶and place it somewhere in the environment and have it picked up by all developers, so it doesn't need to be manually added to every project? We have a system script and search paths now, but maybe there is a better solution?",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/955#issuecomment-381707421,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.","There seems to be consensus that better defaults would be good, but something other than proposed by this PR. Can this be closed, or would someone like to run with it?",True,{}
premake/premake-core,https://github.com/premake/premake-core,955,2017-11-29T20:10:11Z,2018-04-21T09:09:48Z,2018-04-21T09:10:20Z,CLOSED,False,400,287,41,https://github.com/tvandijck,change objdir to use more unique variant,2,[],https://github.com/premake/premake-core/pull/955,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/955#issuecomment-383279923,"This change the objdir for each configuration to use a more consistent and more descriptive value.
It allows for multiple platforms, architectures, toolsets and configurations to all build concurrently.
We've ran into issues where two machines building to the same network share clobbered each others folders with .o & .obj files, because when running premake on linux it no longer considers the windows configurations, and so generates the same output folders.
By creating a more 'unique' variant name, we fixed that issue.",@TurkeyMan can you delete this branch from the Blizzard repo (Blizzard:variants),True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/956,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/956#issuecomment-348359662,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Instead of
includedirs ({""public""}, ""public"")

What do you think of instead something like:
configuration {""usage:public""}
    includedirs (""public"")

Or just
configuration {""public""}
includedirs (""public"")
Reason being is that using configuration {...} now looks like any other scope-limited thing and the existing functions wont have to change.
Then I can do something like
configuration {""windows"", ""public""}
    includedirs (""public_win"")
configuration {""linux"", ""public""}
    includedirs (""public_linux"")

And it wont look too out of place in my configuraiton",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/956#issuecomment-348361405,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","configuration is a deprecated API...
filter should be used instead..
I guess, we could indeed do something like:
filter({ 'system:windows'}, 'public')
To mark a block as a public vs private block, which I think would be a little more memory efficient then my current implementation.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/956#issuecomment-348369401,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","On first impression, I felt like this was a cool improvement, although logically awkward... since I don't really think this usage has anything to do with 'filter'-ing.
Thinking on it more though, I think given a typical filter block, the properties won't all have matching exposure, and that will result in breaking typical filter blocks into multiple filter blocks, possibly leading to a torrent of filter blocks each with very few properties.
I suspect scripts would get very ""filter"" and indentation heavy... not sure that's a good thing.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/956#issuecomment-348376530,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Just as an example, with this PR you can now write:
project ""MyProject1""
    kind 'StaticLib'
    includedirs {""private""}
    public.includedirs {""public""}

project ""MyProject2""
    kind 'ConsoleApp'
   using { ""MyProject1"" }
The result for MyProject2 is that it links against MyProject1, as well as takes the includedirs from MyProject1 that are marked as 'public'.
It becomes more interesting with deeper hierarchies, since things propagate, although again, using is just another API, so in order for a using to propagate to whoever uses that library, you'd write
public.using { 'MyProject1' }

etc...",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,6,https://github.com/premake/premake-core/pull/956#issuecomment-348377352,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","This is definitely superior to the original patch, and this improvement has taken wind out of the suggested ""use filter"" sails..",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/956#issuecomment-348410670,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Out of curiosity, why using { ""MyProject1"" } and not have links { ""MyProject1"" } perform the same action? It's how most things are currently linked anyway, or is that the reason? To ensure that people are aware of the change?",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/956#issuecomment-348478592,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","FWIW, I personally prefer splitting out the ""how to build"" from ""how to use"". Tossing this out there as a discussion point.
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'private' }

usage 'MyProject1'
    includedirs { 'public' }

project 'MyProject2'
    kind 'ConsoleApp'
   using { 'MyProject1' }  -- or `links { 'MyProject1' }`, per @samsinsane
A usage of this style can be written for a library that you use but don't build.
usage 'ThirdPartyLibrary'
   includedirs { '../vendor/thirdPartyLib/include' }
   libsdirs { '../vendor/thirdPartyLib/lib' } 
   links { 'thirdParty1"", ""thirdParty2' }

project 'MyProject2'
    kind 'ConsoleApp'
   links { 'ThirdPartyLibrary' }
Selfishly, this also lines up a little better with my own mental model of the configuration system, but I'm MIA so much these days I don't know if that's worth any consideration.
Thanks @tvandijck for putting this together and getting things going!",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/956#issuecomment-348558939,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@starkos Yeah, the problem I'm having with the usage container is that containers need to be named. They effectively have no relation at all to projects whatsoever. So you can't have a single property that applies to both the project itself, as well as to anyone who uses it.
In this implementation, there is three options... private, interface and public. Where public is effectively private+interface... all settings applied, apply to both the project itself, as well as anyone who uses the project.
To accomplish something similar with the 'usage' pattern, you would have to make two usage containers, where one uses the other, and then use the private one in the project itself. like so
usage 'myproject_private'
   includedirs { 'private' }

project 'myproject'
    uses 'myproject_private'

usage 'myproject'
   uses 'myproject_private'
   includedirs { 'public' }
it's not an improvement..
All that aside, the concept introduced in this PR, is the same concept as CMake, so for those transitioning between the two, or trying to convince people that premake > Cmake, this is a familiar concept that is easy to explain.. ""it's the same as cmake""... the Usage/Use pattern is quite a bit more complex.
All that said, I like the fact that you can make completely unrelated usage containers, and use those. particularly helpful for shared settings, but this PR does not prevent that from being added in addition. I think both have value. I just dislike that I have to make a usage container that has the same name as my project to get anything exported. It's also quite a bit more lines of code to export 1 setting, which is what ends up beeing the case 9 our of 10 times. My solution is 1 line of code, the usage pattern is at least 2, and probably 3 because of the separation syndrome, which needs an extra empty line.
ie
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'private' }

usage 'MyProject1'
    includedirs { 'public' }
vs
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'private' }
    public.includedirs { 'public' }",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,10,https://github.com/premake/premake-core/pull/956#issuecomment-348597221,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Conceptually, I prefer the clear separation between ""how to build"" and ""how to use"". Given the two examples by @tvandijck I would use the first one. I (personally) think it is easier to read and understand at a glance. It is clear that usage is opt-in. Gazing into my crystal ball, I think I will be able to debug other people's usage scenarios faster with the ability to grep for every instance of usage in their configuration.
This PR however, seems much more flexible than the usage system we have implemented here at my company. I am really looking forward to having something like this properly supported.
The convention we use is to declare the import/export symbols for dll linkage on windows explicitly, so we have filter blocks inside of using functions like so:
someProject = {
  configurations = {
    windows = {
      exports = {""PROJECT_DLL=__declspec(dllexport)""	}
    ,  imports = {""PROJECT_DLL=__declspec(dllimport)""	}
    }
  }
, using = function (inProject)
    configuration ""windows""
      defines(inProject.configurations.windows.imports)
    configuration {}
  end
}

How would I configure a usage unique to windows with this PR?",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,11,https://github.com/premake/premake-core/pull/956#issuecomment-348598309,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","that example would collapse down to:
project 'someproject'
...
filter { 'system:windows' }
    defines {  ""PROJECT_DLL=__declspec(dllexport)"" }
    interface.defines {""PROJECT_DLL=__declspec(dllimport)""}",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,12,https://github.com/premake/premake-core/pull/956#issuecomment-348599763,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Conceptually, I prefer the clear separation between ""how to build"" and ""how to use"".

I don't disagree. but I don't like the ""say everything twice"" result of the 'usage' containers.
Also, 'conceptually' I like everything that concerns my project to be in my project.
They are basically two competing opinions/concepts.
Again however, I think the 'usage' container stuff, is certainly something we could do in addition. It's not hard to imagine a world where both could work together to allow for even more flexibility. I think both patterns have their uses, and I can certainly imagine a case where a usage container makes more sense. I just don't see it for the general case.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,13,https://github.com/premake/premake-core/pull/956#issuecomment-348639893,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","that example would collapse down to:

Nice! It was not obvious to me that the filter would play nice with interfaces

They are basically two competing opinions/concepts

Totally valid, I do believe that good features come out of constructive discussion (like this) where you are able to effectively defend your position. With your API I can certainly see how one would go about using it to implement the more verbose case in my own scripts.
It appears that your PR now takes over the 'public', 'interface' and 'private' tables. What about putting those somewhere under the premake table?",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,14,https://github.com/premake/premake-core/pull/956#issuecomment-348642561,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@ratzlaff we could indeed, you'd have to write premake.public.*** everywhere, where you currently don't have to use the premake prefix for everything, because everything goes simply into _G...
I can go either way, but I do agree that taking ownership of 'public' and 'interface', may cause issues. I'm open to suggestions..",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,15,https://github.com/premake/premake-core/pull/956#issuecomment-348645116,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I'm open to suggestions..

Let the end-user name it whatever they want, they should know if  public is used for something else in their configuration
local public = premake.public
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'private' }
    public.includedirs { 'public' }",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/echopoint,16,https://github.com/premake/premake-core/pull/956#issuecomment-348646608,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Curious, why not just reverse it by making it look like an includedirs extension then?
i.e.
includedirs.public { 'public' }
vs
public.includedirs { 'public' }
or
includedirs {  'private', [""exports""] = 'public'  }",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,17,https://github.com/premake/premake-core/pull/956#issuecomment-348710022,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","One more try, then :) What about:
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'build-only' }  -- i.e. ""private"", is the default

   filter { stage = 'build or link' }
      includedirs { 'build-or-link' } -- i.e. ""interface""‚Ä¶or is that ""public""?

   filter { stage = 'link' }
      includedirs { 'link-only' } -- i.e. ‚Ä¶whatever the other one is
So yes, you still need the extra line for the filter. But build and usage are clearly separated, it handles the use cases of ""interface"" and ""public"", easily expands to new values, and it doesn't introduce any new syntax variations. I think that's the best I've got.
If you decide to take the field prefix/postfix approach, my poor brain would appreciate different names. I just looked at the code last night and I've already forgotten which is ""private-public"" and which is ""public-public"", plus the confusion of overloading existing programming language terms with very different meanings.
The term ""build"" makes sense to me. I'm not sure what word to use for ""use"" other than ""link"", even though you might not necessarily be linking?
build.includedirs { ‚Ä¶ }
buildAndLink.includedirs { ‚Ä¶ }
link.includedirs { ‚Ä¶ }
Anything worthwhile there?",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,18,https://github.com/premake/premake-core/pull/956#issuecomment-348763008,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Should have mentioned: using filter would let you use the existing baking/context stuff to pull out the different settings for builds and usages, by setting ‚Äústage‚Äù to ‚Äúbuild‚Äù or ‚Äúlink‚Äù (or whatever) when you do the fetch.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,19,https://github.com/premake/premake-core/pull/956#issuecomment-348795136,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","The ""private"" and ""public"" prefixes look really janky. I like the syntax @starkos proposed above, but I'm not sure if calling them ""stages"" is very intuitive.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,20,https://github.com/premake/premake-core/pull/956#issuecomment-348974228,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@aleksijuvani: That's cool; can you suggest any alternatives? Maybe ""phase""? (This is assuming @tvandijck agrees with you‚Ä¶)",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,21,https://github.com/premake/premake-core/pull/956#issuecomment-349008664,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I feel like ""stage"" or ""phase"" suggest like these relate to a build stage, which is not the case..
Instead these are a bunch of settings that will have to be used (or not used) when building projects that ""use"" this project. Perhaps something like this would make more sense:
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'build-only' }  -- i.e. ""private"", is the default

   filter ""building or linking""
      includedirs { 'build-or-link' } -- i.e. ""interface""‚Ä¶or is that ""public""?

   filter ""linking""
      includedirs { 'link-only' } -- i.e. ‚Ä¶whatever the other one is
Or perhaps something like this would be more consistent with the other filters?
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'build-only' }  -- i.e. ""private"", is the default

filter ""building:MyProject1 or links:MyProject1""
  includedirs { 'build-or-link' } -- i.e. ""interface""‚Ä¶or is that ""public""?

filter ""links:MyProject1""
  includedirs { 'link-only' } -- i.e. ‚Ä¶whatever the other one is",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,22,https://github.com/premake/premake-core/pull/956#issuecomment-349009851,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Actually the latter could have
filter ""project:MyProject1 or links:MyProject1""
instead of
filter ""building:MyProject1 or links:MyProject1""",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,23,https://github.com/premake/premake-core/pull/956#issuecomment-349032193,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Both @TurkeyMan and my argument is that we're not filtering... we're exporting data... it's very unnatural and confusing to abuse filter for this...
besides, when your new query system makes the cut..
filter { 'project:foobar' }

would already allow filtering based on project..
Then the other confusing part to me is... ""build"", ""link"", are all stages... premake does not have a concept a phases, and it seems somewhat adhoc to add it now. besides, it's a concept that only C/C++ has... many other languages just don't have these or even similar stages... C# for example, the compiler gets the full list of .cs files, and simply spits out an executable.. not linking, nothing... just one stage.
Then, while I am totally open to alternative naming, ""public"", ""interface"" and ""private"" are concepts used in many many languages to express exported fields, properties, etc.. I mean, C#, C++, Python, you name it... In addition, it's a concept used in CMake. While we have as premake no chance at beating their momentum and becoming the thing CMake currently is to the C++ community, I feel that adding concepts that are completely different from CMake will just increase the barrier to entry.
Anyway, then as my final point, which is no argument for or against any of this.. December 15, is my last day at Blizzard. I'll be leaving to move me and my family closer to the rest of my family, and will be starting a new adventure in Sweden. As a result, it is likely that my involvement with Premake will also come to an end, or at least in a much reduced capacity, since it goes from work to hobby, and well, I have 200 hobbies, so Premake will have to timeshare.
I'm not trying to push things through or anything, but these last 2 work weeks I won't be able to make additional commits to the PR's I've made so far. If further adjustments are needed/required, others will have to branch these off, and make those changes, as between December 15 and January 15 I'll be completely out of reach.
Anyway, it's been a fun ride these last 3 years. I'm totally convinced the premake > CMake in many aspects, but it also still needs a lot of work. I hope Blizzard stays involved, @TurkeyMan is now working for Blizzard, so he may have some time here and there to keep merging things upstream like I have in the past few years.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,24,https://github.com/premake/premake-core/pull/956#issuecomment-349054763,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.",Thanks for all your contributions to premake @tvandijck Dont be a stranger!,True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,25,https://github.com/premake/premake-core/pull/956#issuecomment-349059570,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I don't like the weird object-oriented analogy. It's unnecessary, and it's not very intuitive to me that specifying that project A links against project B would cause A to ""inherit"" B. The prefix/suffix syntax isn't particularly pretty either, but I guess that's subjective.
The concept of filters already exists in Premake and it'd be trivial to extend them to support two new fields.
In any case, if you do decide to go this way, I think ""interface"" should be called ""protected"" instead. ""interface"" doesn't make sense in this context (at least in the C++ and C# land). nevermind
Good luck in your future endeavors, @tvandijck!",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,26,https://github.com/premake/premake-core/pull/956#issuecomment-349067517,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","and it's not very intuitive to me that specifying that project A links against project B would cause A to ""inherit"" B

That's why it's not done through ""links"", but through another API. I don't like the conflated use of links either.

The concept of filters already exists in Premake and it'd be trivial to extend them to support two new fields.

it does... to filter for stuff... not to export properties.. I never has had that ability, and in my opinion neither should it be extended for that purpose. The underlying block storage, certainly could be extended to provide this ability. It's a pretty natural extension, but at the same time, it would increase the number of blocks per project quite a bit, and hence have an impact on the compile performance of the blocks, but that is all besides the point.
filter is to filter for stuff, not for creating an export block.
containers have been used for this purpose in the past (see this module). But containers require a name, which again makes no sense at all for this use-case.

The prefix/suffix syntax isn't particularly pretty either, but I guess that's subjective.

I welcome any alternatives. We've tried two different things in this PR, the prefix is defintely better then what we tried first includedirs( {'...'}, ""public"")
The suffix syntax isn't easy to accomplish, you can't make a table and a function in the same spot in _G, so you would have to do some funky trickery through a metatable. It wouldn't make things any faster.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,27,https://github.com/premake/premake-core/pull/956#issuecomment-349068283,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Also, here is some documentation on what private/public/interface means in the CMake world.
https://cmake.org/pipermail/cmake/2016-May/063400.html
https://cmake.org/cmake/help/v3.0/command/target_link_libraries.html",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,28,https://github.com/premake/premake-core/pull/956#issuecomment-349071825,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.",I see.,True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,29,https://github.com/premake/premake-core/pull/956#issuecomment-349083309,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","So one of the alternatives to look at, and maybe experiment with, is still the container approach. but require the name of the container to be fixed...
To stick with my previous examples, and naming:
project ""MyProject1""
    kind 'StaticLib'
    includedirs {""private""}
    export 'public'
        includedirs {""public""}

project ""MyProject2""
    kind 'ConsoleApp'
   using { ""MyProject1"" }
the downside beeing that a new container resets filters, so if you wanted to make things specific to platforms, you'd have to do:
project ""MyProject1""
    kind 'StaticLib'
    includedirs {""private""}

    export 'public'
        filter { 'system:windows' }
             includedirs {""public/windows""}
        filter { 'system:linux' }
             includedirs {""public/linux""}
we can simply assert for the name of an export container to be either private,public,interface, or whatever other names are agreed upon. It's not that much of a diversion from the export module I linked to before. It's just that we assign semantics to the name of an export block, which I think is really the important part.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,30,https://github.com/premake/premake-core/pull/956#issuecomment-349106980,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","December 15, is my last day at Blizzard. I'll be leaving to move me and my family closer to the rest of my family, and will be starting a new adventure in Sweden.

Congrats, and best of luck on your adventure! we'll certainly miss your contributions and your insights! I certainly understand the bit about the hobby projects, but we'll leave your account turned on‚Ä¶just in case, you know. :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,31,https://github.com/premake/premake-core/pull/956#issuecomment-349153952,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I'm way late to this party, but I just wanted to drop my thoughts :)
There was some discussion above about concepts like ""build or link""; I don't think that's the right way to think about this feature. This is about projects that depend on other projects inheriting state from the dependencies. 'building'/'linking'/etc are C/C++/compiled-language concepts. Lots of languages aren't like that, and also/rather, lots of projects don't express a conventional build environment. It's common for things like utility projects to do something that's not part of a traditional 'build' process, and for that reason, I think it's important to make this inheritance of general state not expressed in those terms.
I think the proper conceptual structure here is ""importing 'state' from dependent projects"", or ""exporting state to consumer projects"", whichever way around makes more sense.
From that perspective, I like Tom's original proposal, that allows general state to be marked 'public' or 'interface' and then it will be available to consumers.
I personally like the 'public'/'interface' terminology. I find it intuitive, although I understand this is subjective, but I also support Tom's argument that it's established by cmake, and I think that's a strong argument to stick with established nomenclature.
We discussed this pattern:
project ""MyProject1""
    kind 'StaticLib'
    includedirs {""private""}

    export 'public'
        filter { 'system:windows' }
             includedirs {""public/windows""}
        filter { 'system:linux' }
             includedirs {""public/linux""}
Other than leading to very deep nesting, I'm concerned that stateful api's kinda suck, and filter is already problematic in that way. filter { ... } must be followed by filter {} to reset to un-filtered... this state retention pattern will also exist for some other API that sets the visibility mode, and the cadence of filter changes and visibility changes will not match. This will either lead to very noisy code, or very difficult to understand code.
project ""MyProject1""
    includedirs {""private""}

    visibility 'public'
        filter { 'system:windows' }
             includedirs {""public/windows""}
        filter { 'system:linux' }
             includedirs {""public/linux""}
        filter {} -- !!! be careful to reset !!!

    visibility 'interface'
        includedirs { 'public/api' } -- otherwise this line will still be filtered by linux, even though it doesn't look like it!
        filter { 'system:windows' }
             includedirs {""public/windows-api""}
        filter { 'system:linux' }
             includedirs {""public/linux-api""}
        filter {}
The indentation looks like python scoping, but remember, it's NOT, and it's a big gotcha for premake users that don't really think that they're writing a Lua program, which is a concept premake strongly tries to encourage.
The above, for contrast, according to the current PR:
project ""MyProject1""
    includedirs {""private""}
    interface.includedirs { 'public/api' }

    filter { 'system:windows' }
         public.includedirs {""public/windows""}
         interface.includedirs {""public/windows-api""}

    filter { 'system:linux' }
         public.includedirs {""public/linux""}
         interface.includedirs {""public/linux-api""}
I know which one I find more readable...",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,32,https://github.com/premake/premake-core/pull/956#issuecomment-349168579,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Also, we had a discussion about making separate containers for the public stuff... which seems cool, but we quickly realised that in practise, it would lead to a very high number of basically-empty containers, with maybe 1 or 2 options. The container count is a good heuristic to estimate our performance, which is a serious problem. So we concluded that adding heaps of superfluous containers might not be the best idea.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,33,https://github.com/premake/premake-core/pull/956#issuecomment-349286963,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@tvandijck Sad to see you go! I agree with @starkos, definitely going to miss your contributions and insight, not to mention gleaning random bits of knowledge off you, like I have over the last couple of years. Best of luck in Sweden!",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,34,https://github.com/premake/premake-core/pull/956#issuecomment-349313516,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Wow, lots to process here! I'll respond to a few of the points that were batted my way, then I'll follow up with another post to refocus the discussion a bit.

Both @TurkeyMan and my argument is that we're not filtering... we're exporting data... it's very unnatural and confusing to abuse filter for this...

For reference, here is what I proposed, with improved (?) naming:
project 'MyProject1'
   includedirs { 'private/include' }
   
   filter { when = 'building or using' }
      includedirs { 'private-and-public/include' }
      
   filter { when = 'using' }
      includedirs { 'public/include' }
Whether or not it is the best approach, it is a stretch to call it ""abuse"". Filters say ""apply these settings when these conditions are met"", and that's what we're doing: apply these settings when this project is built; apply these settings when it is referenced/used/linked/whatever.

@tvandijck: Then the other confusing part to me is... ""build"", ""link"", are all stages... premake does not have a concept a phases, and it seems somewhat adhoc to add it now.


@TurkeyMan: There was some discussion above about concepts like ""build or link""; I don't think that's the right way to think about this feature.

That was me, and I made it clear that I didn't like the term ""link"" for ""use"" but needed something for the sake of example. I never suggested tying it to a toolset's compile/link stages. I've cleaned up my example to make that more clear.

@tvandijck: while I am totally open to alternative naming, ""public"", ""interface"" and ""private"" are concepts used in many many languages to express exported fields, properties, etc.. I mean, C#, C++, Python, you name it...

I'll be more specific then: ""public"" belongs to the set of public, private, protected, internal/package. ""interface"" belongs to the set of interface, class, enum, struct. They are orthogonal concepts, and both of them could be construed to mean ""public"".
If you didn't know Premake, but knew software development, you could read this and pretty much know what it is doing:
project 'MyProject1'
    kind 'StaticLib'
    includedirs { 'include', 'build/include', 'vendor/include' }
    files { '**.h', '**.cpp' }
If you didn't know Premake, but knew software development, you couldn't interpret this without external documentation:
project 'MyProject1'
    kind 'StaticLib'    
    includedirs { 'vendor/include' }
    public.includedirs { 'build/include' }
    interface.includedirs { 'include' }
    files { '**.h', '**.cpp' }
We're trying to distinguish between ""use these settings while building this project"", and ""apply these settings when some project tries to use/reference/link me"". Whatever approach gets chosen, I'd like terms that make that clear without having to dig up the docs (and I'll admit my own first proposals weren't great).

@tvandijck: In addition, it's a concept used in CMake


@TurkeyMan: I also support Tom's argument that it's established by cmake, and I think that's a strong argument to stick with established nomenclature.

This keeps being brought up, so I guess it needs to be addressed. I personally find it a very weak argument. The right approach should stand on its own merits and not because someone else is doing it. That doesn't mean it is a bad approach or the wrong approach, and it is fair to point out the prior art, but this shouldn't be considered the compelling argument.
And now I have to point out: the people I've talked with who have switched away from CMake to Premake (and if you're listening, feel free to chime in) all did so because they they preferred Premake's syntax. Let's be honest: that is really Premake's biggest (and perhaps only) selling point against a project with as much momentum as CMake.
I do think you've both made your point, and now I'd really love to let that particular thread rest.

@aleksijuvani : I don't like the weird object-oriented analogy. It's unnecessary, and it's not very intuitive to me that specifying that project A links against project B would cause A to ""inherit"" B.

FWIW, I agree with this, it should be possible to link or reference a project without pulling in whatever settings it decided to ""export"". But I think we can make that work with any of these approaches, we just need a separate call for uses/imports. An example purely to demonstrate what I mean for discussion:
project 'MyProject'
   links { 'SomeLibrary' }  -- just links
   imports { 'OtherLibrary' } -- links and imports settings

@TurkeyMan: we had a discussion about making separate containers for the public stuff... which seems cool, but we quickly realised that in practise, it would lead to a very high number of basically-empty containers, with maybe 1 or 2 options. The container count is a good heuristic to estimate our performance, which is a serious problem.

A valid point. I don't think we should choose one approach over another on performance alone (I'm actively trying to reduce the per-block cost in another effort), but it shouldn't be discounted.
Okay, one last thing:

@TurkeyMan: Other than leading to very deep nesting, I'm concerned that stateful api's kinda suck, and filter is already problematic in that way. filter { ... } must be followed by filter {} to reset to un-filtered... this state retention pattern will also exist for some other API that sets the visibility mode, and the cadence of filter changes and visibility changes will not match.

His example, note the comments:
project ""MyProject1""
    includedirs {""private""}

    visibility 'public'
        filter { 'system:windows' }
             includedirs {""public/windows""}
        filter { 'system:linux' }
             includedirs {""public/linux""}
        filter {} -- !!! be careful to reset !!!

    visibility 'interface'
        includedirs { 'public/api' } -- otherwise this line will still be filtered by linux, even though it doesn't look like it!
        filter { 'system:windows' }
             includedirs {""public/windows-api""}
        filter { 'system:linux' }
             includedirs {""public/linux-api""}
        filter {}
So first: umm...Premake makes pretty heavy use of stateful, declarative APIs, yeah? But putting that aside, the ""fix"" for this is trivial: visibility should reset the filter, just like any other container (whether it is a container or not). Then you no longer need the filter {} call.
FWIW, I don't think approach offers anythig over the prefix or filter-based approaches, but I'll get to that in a follow-up.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,35,https://github.com/premake/premake-core/pull/956#issuecomment-349317295,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","The story so far. Please use your imagination to scale these minimal examples up to meaningful project sizes, with additional filters for platforms and all of the stuff you would normally need to script.
Please keep in mind that the names of things can be changed.
When expressing a preference, it would be helpful if you could provide some explanation. And if you don't like these names, please try to provide some alternatives you do like.
Option A: Prefixes
project ""MyProject1""
    includedirs {""private""}
    public.includedirs {""public-and-private""}
    interface.includedirs { ""public"" }
Option B: Filters
project ""MyProject1""
    includedirs {""private""}

    filter { ""when:building or using"" }
      includedirs { ""public-and-private"" }

   filter { ""when:using"" }
      includedirs { ""public"" }
Option C: Exports
project ""MyProject1""
    includedirs {""private""}

   export ""public""
      includedirs { ""public-and-private"" }

   export ""interface""
      includedirs { ""public"" }
In all cases, we'll assume the values are ""used"" with a syntax like:
project ""MyProject2""
   using { ""MyProject1"" }
Discuss! If I missed an option, respond in the comments and I'll add it here.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,36,https://github.com/premake/premake-core/pull/956#issuecomment-349324392,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","At this point, I'm still in favor of the filters (option B).

I like that it follows the existing ""apply these settings when‚Ä¶"" model and doesn't require any new concepts.
I like that you can say ""building or using"" and don't need a synthetic term to describe settings that are used for both.
I think the implementation will end up being cleaner under the hood, since it can use the existing filtering code to separate out ""building"" from ""using"", rather than requiring an additional code path to figure out which is which.
I think the performance hit of the additional settings blocks can be easily mitigated with an early out test against the when clause, skipping any further criteria checking.

My second choice is prefixes (option A):

I do like the brevity of it.
I really dislike the names ""public"" and ""interface"", which I find almost impossibly unintuitive, but I'm really struggling to come up with meaningful alternatives. With better names I would like this approach more (but probably still less than Option B).

Exports (option C) feel like a half-measure. It is more verbose than prefixes, but less flexible than the filters. I'd rather see one of the other options chosen.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,37,https://github.com/premake/premake-core/pull/956#issuecomment-349346312,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","You put into words my thoughts exactly.
My problem with the names in the prefix approach is that they try to take well-established object-oriented concepts, but then change their meaning so that they don't make sense without referring to the documentation first. On the other hand, I don't have any better suggestions on what to call them. At first I thought about renaming ""interface"" to ""protected"", but that doesn't make sense either..
I prefer the ""filters"" or ""exports"" approach over prefixes (although the ""filter"" approach seems less problematic from a user experience standpoint, due to the scoping problem pointed out by @TurkeyMan). If there is a serious performance issue with using filters for this purpose, I can understand taking the prefix approach, but I'm not familiar with the implementation details.
My scripts already have a ton of filters (in fact, they're mostly filters), so the issue someone pointed out of ""scripts becoming filter heavy"" is already the case and it's a non-issue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,38,https://github.com/premake/premake-core/pull/956#issuecomment-349348458,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","The big thing for me about this change is about how much 'new' stuff I'll have to learn, read documentation on and teach others about when they have questions here locally.
Like: Option B

No new keywords, extends filter with more options
Reads nicely

Dislike: Option C

New keyword export would probably be deprecated in favor of filter
Otherwise the same as B

Dislike: Option A

I really don't like having two competing ways of using a premake function. I could be wrong, but I expect this Option to require far more documentation than Option B.
Premake scripts are not written in the style of table.function

prj = project ""MyProject1""
prj.includedirs {""private""}
prj.public.includedirs {""public-and-private""}
prj.interface.includedirs { ""public"" }
I am in the same boat as @aleksijuvani. My scripts have a lot of filters in them currently. Putting more in there is a non-issue for me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,39,https://github.com/premake/premake-core/pull/956#issuecomment-349353962,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Oh boy, this PR is out of control haha! Thanks for compiling (heh) the list of options @starkos!
Option A:

I vote against this
I feel introducing ""namespaced"" APIs will result in more being added, ""we have them for this, why not for this?"" and before we know it we have dotnet.framework and macosx.frameworks. While there's some benefits to making it obvious that some APIs are just very specific to one thing, if we overhaul things (i.e. csharp -> dotnet for C# and F#) we can end up destroying most projects that are targeting/using this one thing. Having said that, the example that @ratzlaff presented for prj actually looks pretty sweet but I'm sure there are caveats to that system that wouldn't be overly desirable. However, it would allow for something like prj.filters[""windows""] = filter { ""system:windows"" } and then you could add sub filters prj.filters[""windows""].filters[""debug""] = filter { ""configuration:debug"" }. I think that's kind of cool, but it's definitely a totally different direction from where we are now.
I find it weird that there's three concepts ""private"", ""public"" and ""both"", and that public is ""both"" and interface is ""public"". No idea what would be ""better"", avoiding needing a third term is my ""better idea"".

Option B:

I like this for the simplicity and consistency
I dislike this for the verbosity that will likely end up being generated. filter { ""when:*"" } is better than some ""both"" terminology that doesn't quite make sense. However, if you have platforms specific, configurations specific or system specific settings, or a combination of these, for ""public"", ""private"" and ""both"", you end up with a mess of filters. #platforms * #configurations * #system * 3 - worst case, but most of our projects end up with a filter for each system at the very least.

Option C:

I dislike that there's a new API
I dislike the ""public"", ""private"" and ""both"" terminology - see point in A.
Do I filter and then export or do I export and then filter? Is there a way to achieve both depending on how the user wishes to do this? Being forced to duplicate something because it only works one way is kind of lame, but achieving both ways is probably ""impossible"".

Overall, I think Option B could do well and I vote for it. I think our filter system needs a bit of an overhaul, complex filter queries having to be duplicated for ""private"", ""public"" and ""both"" will be annoying. Sub-filters could assist with reducing this, but that kind of leads into Option C with a new kind of API or just a complete rewrite of how filter works - both require learning which is not overly desirable.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,40,https://github.com/premake/premake-core/pull/956#issuecomment-349389326,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I guess I'll add my pros/cons vote myself...
Option A:

I clearly like the simplicity of the approach,
I'm not a fan of the prefix/suffix, but am open to suggestions.
I'm totally open to better names... while I agree that ""because CMake"" is not a major argument, I choose these names because rather then inventing new ones, I went with something established.

Option B:

I have no objections, and it's a super tiny change to the current PR. ""when"" has to be dealt with a little special, and not be included in the final criteria I think, but it's pretty easy to get that to work.
I don't like the name ""building"", it's not what we're doing, the concept of building is an unknown concept to premake... we're just generating a makefile/project after all. An alternative could be ""internal"" or ""local""..
Besides, ""local"" is really only there to help you from repeating yourself:

project ""MyProject1""
    includedirs {""private""}

    filter { ""when:building or using"" }
      includedirs { ""public-and-private"" }
vs
project ""MyProject1""
    includedirs {""private"", ""public-and-private""}

    filter { ""when:using"" }
      includedirs { ""public-and-private"" }
I have no objection to just dropping ""local/building/private"" entirely.
Option C:
is not that far off from Option B, it just puts a container in the middle except for a filter.
I see it as basically the same as Option B, since in both Option B and C you have to repeat all your filters for the different platforms/configs/etc. Which in Options A isn't the case.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,41,https://github.com/premake/premake-core/pull/956#issuecomment-349398391,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I feel introducing ""namespaced"" APIs will result in more being added, ""we have them for this, why not for this?"" and before we know it we have dotnet.framework and macosx.frameworks

@samsinsane If only I could do api.register(""namespace.name"")... I mean, I've been wanting that so badly for a long time...
For example, just in the above discussions, we seen the use of import, use, usage, using... If any of those would be used by premake core... at least 5 modules that we currently list would break, because of reuse of the same api keywords. It's a flaw in the extensibility of premake. Api's should be registered in the module's namespace... and only core premake API's should be in _G.
It's an entirely different discussion, way off topic... but since you brought it up...",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,42,https://github.com/premake/premake-core/pull/956#issuecomment-349425712,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","visibility should reset the filter, just like any other container (whether it is a container or not). Then you no longer need the filter {} call.

This seems obvious, but then this is impossible:
    filter { ""system:linux"" }
        visibility ""private""
            api ""blah""
        visibility ""interface""
            includedirs { ""whatever"" }
I guess I just presumed you would also be allowed to specify a filter, and then nominate visibilities within the applied filter.
Resetting the filter when visibility changes will lead to noisier scripts, and I suspect most users would presume this should be possible.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,43,https://github.com/premake/premake-core/pull/956#issuecomment-349428398,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Responding to @starkos 3 possibilities.
A - I like it because of it's brevity, and that it doesn't lead to indentation spam. I don't personally find it unintuitive.
B - My issue is that filters are already used for filtering. Your example is over-simple, this is what I predict will happen in reality:
project ""MyProject1""
    includedirs {""private""}

    filter { ""system:linux"" }
        includedirs {""sys/linux""}
    filter { ""system:windows"" }
        includedirs {""sys/win""}

    filter { ""when:building or using"" }
      includedirs { ""public-and-private"" }
    filter { ""when:building or using"", ""system:linux"" }
      includedirs { ""sys/linux/public-and-private"" }
    filter { ""when:building or using"", ""system:windows"" }
      includedirs { ""sys/win/public-and-private"" }

   filter { ""when:using"" }
      includedirs { ""public"" }
   filter { ""when:using"", ""system:linux"" }
      includedirs { ""sys/linux/public"" }
   filter { ""when:using"", ""system:windows"" }
      includedirs { ""sys/win/public"" }
My point is, there are some sets of filter criteria that already lead to a kind of combinatorial explosion. I argue that conflating 'visibility' into filtering will almost always lead to combinatorial filter statement explosion, in an additional dimension to what is already common.
C - I just don't like it at all; I don't really feel it's superior to either A or B, and introduces additional issues, like visibility resets filter, meaning you can't nest changes of visibility beneath an active filter, which will lead to unnecessarily noisy scripts.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,44,https://github.com/premake/premake-core/pull/956#issuecomment-349446256,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@TurkeyMan I'm with you, but I think your example is also a bit of an exacuration.
It's an example that is not happening very often in practice... If we look at the 'packages' we have in Blizzard I'd say the majority only export src/include, because the header files are generally fairly platform independent.... I think the only exception I can find of the top of my head is curl, because it uses some stupid autoconf to generate headers specifically for windows/linux/mac. But even that one if properly engineered could just be merged with a couple of #ifdefs to select the right file for the right platform.
So while I agree that in a few cases there is certainly a possibility for filter explosions, the reality is that we're exporting very few things and rarely do we have a need to export based on platform/system. We almost never export based on configuration, since those are defined at the workspace level, and are rarely consistent between all projects.
The majority of exported items at least in our cases are going to be looking like this:
project 'foobar'
    kind 'staticlib'
    includedirs { '../include' }
    files { '**.cpp', '../include/**.h' }

    filter {'when:using'}
       includedirs { '../include' }
       links { 'foobar' }
I could be wrong obviously... but I think we certainly need to prioritize this discussion on the practical and stay away from hypothetical. I think internally we have a lot of practical examples we can look at.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,45,https://github.com/premake/premake-core/pull/956#issuecomment-349454657,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Regarding A; recall that a prior incarnation of this PR went with this:
   includedirs({ ""include"", ""dirs"" }, ""interface"")
As an alternative to interface.includedirs(). I don't think that's superior, but just to remind that the approach does have some flexibility in the API design, and maybe further alternatives that people don't hate are possible...?",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,46,https://github.com/premake/premake-core/pull/956#issuecomment-349538771,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@TurkeyMan I'm with you, but I think your example is also a bit of an exacuration.

@tvandijck I would have to disagree here. We don't use a package server and what Manu has suggested is pretty close to what I'm expecting to see for some of our projects. Curl and SDL2 are wild, Linux uses the standard apt/yum packages, macOS uses a framework, Windows builds curl and has the SDL2 binaries, iOS does something, and the particular project I'm thinking of doesn't hit Android yet. I'd love to move to a package server when I get time to look into one (yours looks nice, it's a custom one isn't it?).
Similarly, our SDK has a unique targetname for each system, platform and toolset combination, it also will dump debug builds into the ""debug"" folder beside the release binaries. This project was setup and configured long before Manu introduced Premake into the company, changing everything to be ""Premake compatible"" might not be possible as we ship this to our customers.
I don't know much about how your packaging system works, but I'm going to assume that it eliminates most of the system/platform specific magic. For example, our SDK could be libudSDK.a for Android x86 and ARM, Linux x64 (CentOS) and Linux x64 (Ubuntu), this can't really be configured without filters, again because it was setup and configured prior to Premake, so those concepts didn't exist. This might be unique to our usage, and I'm happy to have our stuff be ugly because of this, but it seems like it would exist elsewhere if it exists here.

@samsinsane If only I could do api.register(""namespace.name"")... I mean, I've been wanting that so badly for a long time...

@tvandijck I see what you mean, having the modules not polluting the global namespace would be nice. However, when things move from specific to global, there's dramas to deal with there. For example, VS2015+ are getting more and more concepts that would originally be considered part of the xcode or gmake modules. Specifically, VS2015+ targeting iOS requires an xcode project/workspace (because reasons) and the frameworks concept would likely end up being required for VS2015+. Having said that, I'm sort of coming around to the idea, but I still have reservations about diving into it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,47,https://github.com/premake/premake-core/pull/956#issuecomment-349708996,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@samsinsane the majority of our ""packages"" just build from source... we don't really do much binary distributions, and while I agree that for binary distributions the filters might be somewhat heavier, in all of SC2/WoW & Overwatch I think we use about 6 of them... and not because they need to be binary, but just because things like OpenSSL are just stupidly complicated buildscripts, DirectX, PS4SDK, etc are just not supplied in source form, or in cases like the chromium SDK, where it would take about an hour to build where it's just not practicle...
curl, I get what you are saying, but like I said, we just build it from source, it takes about 10 seconds, and once it's build it generally doesn't build again locally, so it's not a big deal compile time wise, and because it builds from source, there is no differences in targetnames, etc... those are just not important settings, premake resolves all those automatically anyway when you are talking about project to project dependencies.
In you case, the libudSDK.a if it was a package that just build from source, why do you care where it is, and what it is called... you just do 'links { 'SDK' } and let premake figure out what to link, where it is, and what to call it. We generally don't care, as long as the final executable is in the right spot.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,48,https://github.com/premake/premake-core/pull/956#issuecomment-349710534,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@samsinsane

(yours looks nice, it's a custom one isn't it?).

it is, but it's the simplest ASP.NET thing in the world... it looks fancy and all, but in the end it just has a few http endpoints that premake talks to, and that is it...
you can see it all here:
https://github.com/blizzard/premake-packagemanager
and what we're hoping is that with this PR, that entire system just goes away mostly, except for that part where we download a zip file and unpack it, and load it's premake scripts. Right now the whole meta-data system is effectively a system to accomplish the same as what this PR provides natively to projects. It would simplify our stuff a lot.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,49,https://github.com/premake/premake-core/pull/956#issuecomment-349741021,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I would also add that I don't think I'm exaggerating; we have large solutions here with a lot of projects, but we don't support many platforms, and we tend to use the same build config across all projects in the solution (at least on Overwatch).
Scripts tend to get noisy with lots of platforms, or where the build has more platform-specific details than we have, and I've worked on a lot of projects like that in the past.
As I've said in person though, I think a good solution to that problem in general is introducing a filter stack with push/pop-filter support. But that's totally separate development/debate ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,50,https://github.com/premake/premake-core/pull/956#issuecomment-349852888,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","the majority of our ""packages"" just build from source...

Oh ok, that's interesting.

In you case, the libudSDK.a if it was a package that just build from source, why do you care where it is, and what it is called...

Long story, but source access to the renderer (basically the SDK) isn't generally available within the company. Perhaps this is unique to my company, and I'm already looking into binary package servers for all the things, so it won't be a huge issue for us.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,51,https://github.com/premake/premake-core/pull/956#issuecomment-350015966,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.",If binary distribution is your default... https://www.conan.io/ is the shizzle ;),True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,52,https://github.com/premake/premake-core/pull/956#issuecomment-350018331,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","rebased against master, no additional changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/noresources,53,https://github.com/premake/premake-core/pull/956#issuecomment-357706095,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I am very interested to see that implemented in premake. It's the missing feature I am waiting to continue my work on writing build recipes for some common libraries I am using.
As many, I like the filter approach because it doesn't add new API and respect the general writing style of premake files.
@tvandijck I hope your new adventure in Sweden is going well and you will find some time to continue your great work on premake.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,54,https://github.com/premake/premake-core/pull/956#issuecomment-358232045,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","As this PR is based out of the Blizzard org branches, I have to pull these over to my own fork, close this PR and make a new one. Here at DICE we're not using premake, so this will have to become a hobby kind of thing. My computer at home is in a container somewhere on the ocean right now, so I won't have access to that until mid february... so please have a little patience.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,55,https://github.com/premake/premake-core/pull/956#issuecomment-358300213,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@tvandijck glad to see you resurface! Hope everything has been going well, and you're settling in at DICE. That's a shame about your computer, hope it all goes well! I'm sure you'll have convinced DICE to use Premake before mid February though, so you'll probably be working on this again much sooner. üòõ",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/TurkeyMan,56,https://github.com/premake/premake-core/pull/956#issuecomment-382094444,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","It's disappointing this has stalled... let's revisit with fresh feelings on the matter.
Tom presented a few API options; there appears to be no consensus. Have anyone's opinions changed in the meantime? Maybe we can agree on a path forwards?
Perhaps some creative alternative options?",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/ratzlaff,57,https://github.com/premake/premake-core/pull/956#issuecomment-383406954,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Just throwing ideas out there. No idea what it takes to implement something like this:
project ""MyProject1""
    includedirs { ""src/include"",
                  [""using""] = {""include"" },
    }

-- again for `links`, `defines`, and other commands as appropriate
-- idea here is that items that are keyed with 'using' are going to be part of the 'how to use' interface

project ""MyProject2""
  using ""MyProject1""
  -- adds 'include' from MyProject1 to includedirs",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/noresources,58,https://github.com/premake/premake-core/pull/956#issuecomment-383489231,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Not a new idea but another thought about the already presented approaches.
To me, it is important to stick to the premake ""look and feel"" and avoid multiple way of doing things. My coding style will naturally go in favor of option A, but in the premake world, the filter way (option B) seems more accurate.
@TurkeyMan, when you said

My point is, there are some sets of filter criteria that already lead to a kind of comabinatorial explosion.

Don't you think a part of this combinatorial could be solved with some sort of dedicated functions. Even if a premake script is purely declarative, Lua can still be used for specific/complex tasks.
In addition, I think the usage API is mainly dedicated to people who write libraries and want to provide a build script to other. The final purpose is to ease the library integration task for the ""end user"". I have nothing against something complex under the hood if I can use it simply. (I say that as both a ""library writer"" and a ""end user"")",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,59,https://github.com/premake/premake-core/pull/956#issuecomment-384347779,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Re-reading through (what an adventure), it seems like the general consensus is toward option B. Am I reading it correctly? That's still my preferred choice as well.
I've been at it for so long (in calendar time) that I'm embarrassed to mention it, but I am working on a replacement for configset/context that is coming well, when I can make time for it. Since (B.) is my mental model of how configuration is stored and retrieved, it happens to play nicely with this new system:
local q = query.filter(prj, { when='building' })
local dirs = q.includedirs",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/samsinsane,60,https://github.com/premake/premake-core/pull/956#issuecomment-384574397,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","@starkos I think option B is good, but as @TurkeyMan points out, the filter system gets out of control once you hit platform, system and configuration specific requirements for the different values of when.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/tvandijck,61,https://github.com/premake/premake-core/pull/956#issuecomment-384607392,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I think the filter system itself can be improved to alleviate that issue as well...
just a few example options:
Idea 1.
while it's not scoping, we could at least allow adding to the current filter scope. It's not hard to amend the terms of a preexisting filter.. we could even just store it as a tree.
-- add something to the current filter.
filter { '*', 'system:windows' }

-- override the filter as usual.
filter { 'system:windows' }

Idea 2.
push/pop - we can assert, or just pop all when we switch to another container.
beginfilter { 'system:windows' }
endfilter()

Idea 3.
lua callback
filter { ""system:linux"", function ()
    includedirs { 'private' }
    filter { ""when:building or using"", function ()
            includedirs { ""public-and-private"", ""sys/linux/public-and-private"" }
    end }
end }

it's ugly as hell, and depends very much on it beeing lua, but it scopes correctly.
Either way, while I agree that filter is currently somewhat of a nightmare, there certainly is ways to improve that issue on it's own, completely separate from the usage ideas. Maybe we should open a new ""issue"" about this one in particular.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,None,62,https://github.com/premake/premake-core/pull/956#issuecomment-384609201,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","I initially commented here about starting to prefer option C (exports) over option B (filters), but after hitting ""send"" I realized that you'd still have to repeat the export for every filter you have.
I agree that the filter system could be improved, but I also feel like this is a separate issue and shouldn't necessarily be what's holding back this PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,63,https://github.com/premake/premake-core/pull/956#issuecomment-384692875,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","In agreement that improving the filters would be a good thing regardless of what's decided here. FWIW, I've tinkered with an approach like:
filter ({ ""configurations:Debug"" }, function()
	-- do some stuff
end)",True,{'THUMBS_UP': ['https://github.com/noresources']}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/WorldofBay,64,https://github.com/premake/premake-core/pull/956#issuecomment-431110767,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Reading this PR and seeing how long it's been without a final decision and without an approach I as user like I'll add my opinion.
From those three options provided I prefer option A because the other two don't feel right while A is just overly verbose for a lot of things in the same ""visibility"" which doesn't happen that often.
Option B which seems to be the most popular amongst you fell down for me right away. The reason is the way I see filters as a user:
When project A has a filter, that filter affects project A.
In option B project A has a filter that can't affect project A at all, because project A can't import itself.
At the same time a filter in project A is enclosed by the project and doesn't affect other projects.
In option B the filter in project A affects every project linking to A.
I also dislike opening another scope as in option C, mainly because that scope has to end somewhere. I fell into that hole when adopting rules where i have to call ""solution()"" after every rule to ensure the rule scope is left and I'm not in the void afterwards.
I don't want to have to add a ""project()"" whenever i want to ensure I'm clear of visibilities.
I liked starkos' approach of the interface pattern: splitting public interface from implementation. Imo it would fit imports but that pattern has downsides as mentioned. One downside is that you have to say things twice, another downside is the reusability: say you have two base projects using the same stuff, needing to export the same stuff but being disjunct.
The solution would be my suggestion: do the interface pattern but complete and fully included in premake syntax:
interface ""public_base""
  includedirs ""public""

project ""base1""
  interfaces ""public_base""
  includedirs ""private1""

project ""base2""
  interfaces ""public_base""
  includedirs ""private2""
This option would take a syntax already established in premake (see rules), it would not need things said twice as any of the other suggestions used, it could work both with filters inside the interface block and inside the project offering the interface and if anyone comes up with a name suited better than 'interface' it could as well be self-explanatory.
If i get that right, ""public"" in the original suggestion meant ""me and all that use me"", ""interface"" meant ""only those that use me"" and private ""only me"".
With my option the ""private"" would stay as-is, any existing code would be just equally valid and would not need any assumption of a ""default"" or count as outdated. ""public"" would be everything in the 'interface' block, again without any further pollution of existing code (you can simply drag&drop your old code into the interface and it works).
The third value ""interface"" is possible with a syntax like
project ""base1""
  interfaces { extern = ""public_base"" }
, which could also be extended to use the fields 'intern' for private reuse and 'export' for public use
or
project ""base1""
  interfaces ""public_base:extern""
or
project ""base1""
  externalinterfaces ""public_base""
etc
I don't know how this would work out internal but from the user point of view I think it is a great way of doing it.
Again, the name ""interface"" for that is suboptimal, it works in the declaration of the ""interface"" as many people will recognize it as a shared information but it would not do so in the project as it doesn't look like an export.
Thinking about that the ""interfaces"" call in the project could also be ""export_interfaces"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/WorldofBay,65,https://github.com/premake/premake-core/pull/956#issuecomment-431121008,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","The ""interface"" keyword works in workspace scope, the ""interfaces"" statement works in interface and configuration scope.",True,{}
premake/premake-core,https://github.com/premake/premake-core,956,2017-11-29T23:10:14Z,2019-10-10T15:44:54Z,2019-10-10T15:44:54Z,CLOSED,False,142,6,6,https://github.com/tvandijck,Usage proof-of-concept.,5,[],https://github.com/premake/premake-core/pull/956,https://github.com/starkos,66,https://github.com/premake/premake-core/pull/956#issuecomment-540648546,"This new 'using' API, and a slight addition to the storage of all properties, allows us to mark settings as either public, private or interface.
using then allows you to use import public & interface properties from other projects, effectively creating a way for a project to say... ""if you use me, you need these settings"".
This is currently in a proof of concept stage, and any feedback or additional unit-tests would be extremely helpful.","Getting back to this, much belatedly. I've given it a good think and written up a new proposal that I think solves all the pain points of the approaches presented here (including mine).
I'm going to go ahead and close this PR for now, and see if the discussion brings us back. Many thanks to @tvandijck for taking the time to put this together, and for spurring the best discussion on the topic so far. üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,957,2017-11-30T17:16:00Z,2017-11-30T20:00:40Z,2017-11-30T20:00:43Z,MERGED,True,9,0,1,https://github.com/tvandijck,fix gmake2 utility ,1,[],https://github.com/premake/premake-core/pull/957,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/957,The utility project forgot to output an entire set of elements.,The utility project forgot to output an entire set of elements.,True,{}
premake/premake-core,https://github.com/premake/premake-core,958,2017-11-30T17:32:05Z,2017-11-30T22:32:18Z,2017-11-30T22:32:21Z,MERGED,True,3,3,1,https://github.com/tvandijck,fix context.addFilter,1,[],https://github.com/premake/premake-core/pull/958,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/958,"this prevent 'non-strings' from entering the filter/criteria code, which actually crashes the C code.","this prevent 'non-strings' from entering the filter/criteria code, which actually crashes the C code.",True,{}
premake/premake-core,https://github.com/premake/premake-core,959,2017-11-30T17:35:13Z,2017-11-30T23:58:23Z,2017-12-01T00:34:44Z,MERGED,True,114,24,8,https://github.com/tvandijck,Multiple gmake2 fixes,4,[],https://github.com/premake/premake-core/pull/959,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/959,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,960,2017-11-30T17:39:40Z,2017-11-30T23:50:42Z,2017-11-30T23:50:45Z,MERGED,True,10,5,3,https://github.com/tvandijck,Improve determinism in sln output.,1,[],https://github.com/premake/premake-core/pull/960,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/960,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,961,2017-11-30T17:53:53Z,2017-11-30T23:49:06Z,2017-12-01T00:35:28Z,MERGED,True,4,5,1,https://github.com/tvandijck,add 64-bit support on windows,1,[],https://github.com/premake/premake-core/pull/961,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/961,"on other platforms we already just get what is native to that platform.
also removed some useless other settings.","on other platforms we already just get what is native to that platform.
also removed some useless other settings.",True,{}
premake/premake-core,https://github.com/premake/premake-core,962,2017-11-30T18:05:22Z,2017-11-30T19:09:08Z,2017-11-30T19:09:10Z,MERGED,True,7,1,1,https://github.com/tvandijck,fix table.insertkeyed,1,[],https://github.com/premake/premake-core/pull/962,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/962,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,964,2017-12-04T23:00:44Z,2017-12-05T16:39:48Z,2018-06-02T01:02:36Z,MERGED,True,2,1,1,https://github.com/tvandijck,Add support for wildcards in mapconfig.,1,[],https://github.com/premake/premake-core/pull/964,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/964,"allows you to write
workspace ""MyWorkspace""
	configurations { ""Debug"", ""DebugSlow"", ""Profile"", ""Release"" }

project ""MyProject""
	kind 'StaticLib'

	removeconfigurations { '*' }
	configurations { 'Codegen' }
	configmap { 
		[""*""] = ""Codegen"",
	}

project ""MyProject2""
	kind 'StaticLib'","allows you to write
workspace ""MyWorkspace""
	configurations { ""Debug"", ""DebugSlow"", ""Profile"", ""Release"" }

project ""MyProject""
	kind 'StaticLib'

	removeconfigurations { '*' }
	configurations { 'Codegen' }
	configmap { 
		[""*""] = ""Codegen"",
	}

project ""MyProject2""
	kind 'StaticLib'",True,{}
premake/premake-core,https://github.com/premake/premake-core,964,2017-12-04T23:00:44Z,2017-12-05T16:39:48Z,2018-06-02T01:02:36Z,MERGED,True,2,1,1,https://github.com/tvandijck,Add support for wildcards in mapconfig.,1,[],https://github.com/premake/premake-core/pull/964,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/964#issuecomment-383280051,"allows you to write
workspace ""MyWorkspace""
	configurations { ""Debug"", ""DebugSlow"", ""Profile"", ""Release"" }

project ""MyProject""
	kind 'StaticLib'

	removeconfigurations { '*' }
	configurations { 'Codegen' }
	configmap { 
		[""*""] = ""Codegen"",
	}

project ""MyProject2""
	kind 'StaticLib'","@TurkeyMan this branch was merged, and can be deleted in the Blizzard repo (Blizzard:wildcard-configmap)",True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/965,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?","@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?",True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/965#issuecomment-349711703,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?","So parts of the bakeFiles, I want to refactor (or I already did here) to do the compilebuildoutputs flag in place, rather then as a step after the p.workspace.bake. And as part of that refactor I want to add the ability for those generated files to go into another project. This would be easy if configmap wasn't a thing, but it is, and so I need to map from project config to the others project config, and the only way to do that is by mapping both from the workspace config... Unfortunately without this change, the workspace configs don't exist yet when baking the projects.
So moving this up, bakes the workspace configs first, allowing you to enumerate them during the project bake..
I may not make much sense, PR incoming..",True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/965#issuecomment-349715593,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?","This loop in particular wouldn't work without this change:
4da400e#diff-47294235a21ef45b5104ae2328145578R615",True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/965#issuecomment-349725720,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?","Again, I think this looks fine. I'm hitting ""Update branch"" to catch it up to master, but feel free to merge when it's ready (if I don't do it first).",True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/965#issuecomment-349775336,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?",mac is always so far behind... linux + windows are good.,True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/965#issuecomment-349836935,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?","mac is always so far behind...

I know right! There's only a couple of hours a day where there isn't a backlog of macOS builds - they also love performing maintenance on those things all the time.",True,{}
premake/premake-core,https://github.com/premake/premake-core,965,2017-12-05T21:52:50Z,2017-12-06T21:08:56Z,2017-12-07T16:12:34Z,MERGED,True,7,7,1,https://github.com/tvandijck,Move part of the workspace baking up,2,[],https://github.com/premake/premake-core/pull/965,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/965#issuecomment-350015413,"@starkos, can you think of any reason why this wouldn't be correct.
I don't see any code in the oven.bakeConfigs that actually depends on any output from projects or the bakeChildren.
I might be wrong, but I'd like to make this change if at all possible?","Yeah, I wonder if there is an alternative, or a way to provide them with hardware for specific jobs... I don't mind setting up a mac here specifically for those builds, so we get somewhat quicker turn around...
AppVeyor is always super quick, and the Travis Linux builds are generally OK too, but I guess iOS development is just super popular, and hence always extremely backlogged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,966,2017-12-05T22:34:27Z,2017-12-06T17:23:44Z,2017-12-06T17:23:48Z,MERGED,True,1,0,1,https://github.com/tvandijck,utility projects also allow configuration of the executable path.,2,[],https://github.com/premake/premake-core/pull/966,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/966,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,967,2017-12-05T22:35:39Z,2017-12-06T17:22:47Z,2017-12-06T17:22:50Z,MERGED,True,1,2,1,https://github.com/tvandijck,return generated fileconfig.,2,[],https://github.com/premake/premake-core/pull/967,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/967,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/968,depends on: #965,depends on: #965,True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/968#issuecomment-349716075,depends on: #965,"all this, to get this to work properly:
project 'tag_edit_codegen'
    kind 'Utility'

    -- remove all configs and just map everything to a single codegen config.
    removeconfigurations { '*' }
    configurations { 'Codegen' }
    configmap {
        [""*""] = ""Codegen"",
    }

    -- add all tag files.
    files { '../include/**.tag' }

    -- setup compile steps for all tag files.
    bindirdependencies { 'tagc' }
    filter { 'files:../include/**.tag' }
        buildmessage 'Compiling %{file.abspath}'
        buildcommands {
            'tagc --cpp --types --schema --out=%{sln.location}/generated_tag/tag_edit %{file.abspath}'
        }
        buildoutputs {
            '%{sln.location}/generated_tag/tag_edit/%{file.basename}.h',
            '%{sln.location}/generated_tag/tag_edit/%{file.basename}.cpp',
        }
        compilebuildoutputs 'true'
        compilebuildoutputstarget 'tag_edit'


project 'tag_edit'
    kind 'StaticLib'

    dependson 'tag_edit_codegen'
    includedependencies { 'tag', 'blz', 'bc' }
    includedirs {
        '../include',
        '%{sln.location}/generated_tag'
    }

    files { '*.h', '*.cpp', '../include/**' }

    vpaths {
        ['include/*'] = { '../include/**' },
        ['src/*']     = { '**' }
    }",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/968#issuecomment-350017888,depends on: #965,"I think this somehow also depended on #969, I just don't see how...
it seems to build and run the tests successfully here at blizzard, but fails here....
I will look at it if it fails again..",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/968#issuecomment-358231995,depends on: #965,"As this PR is based out of the Blizzard org branches, I have to pull these over to my own fork, close this PR and make a new one. Here at DICE we're not using premake, so this will have to become a hobby kind of thing. My computer at home is in a container somewhere on the ocean right now, so I won't have access to that until mid february... so please have a little patience.",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/968#issuecomment-381706623,depends on: #965,"#969 is merged now‚Ä¶is this still a valid PR, or should it be closed as mentioned in the comments?",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/968#issuecomment-381923102,depends on: #965,"No please leave open, I'll get to fixing this somewhere maybe this week/weekend.",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/968#issuecomment-382062933,depends on: #965,"Sounds good‚Ä¶didn't mean to rush, just trying to tidy up a bit.",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/968#issuecomment-383280955,depends on: #965,"This works now, and actually fixes a long standing issue where you could never reliably use cfg.objdir in file filters.",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/968#issuecomment-386079057,depends on: #965,@starkos this is ready for review and merge.,True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/968#issuecomment-387091797,depends on: #965,"what the code is trying to do, is automatically add files that would be generated by the buildcommand, to another project, with possibly mapped configurations.
compilebuildoutputs 'true'
compilebuildoutputstarget 'tag_edit'",True,{}
premake/premake-core,https://github.com/premake/premake-core,968,2017-12-06T17:30:59Z,2019-10-14T14:30:23Z,2019-10-14T14:30:24Z,CLOSED,False,194,90,5,https://github.com/tvandijck,Refactor generated files,5,[],https://github.com/premake/premake-core/pull/968,https://github.com/starkos,11,https://github.com/premake/premake-core/pull/968#issuecomment-541713056,depends on: #965,"See as @tvandijck has moved on, I'm going to go ahead and close this one. It needs a meaningful description of what it does, and unit tests to show that it does it. If someone wants to take this one on, this comment might be helpful: ""automatically add files that would be generated by the buildcommand, to another project, with possibly mapped configurations"". Sounds useful (but not at all what is suggested by the original title of ""Refactor generated files"")?",True,{}
premake/premake-core,https://github.com/premake/premake-core,969,2017-12-06T17:47:48Z,2017-12-07T16:16:09Z,2017-12-07T16:16:12Z,MERGED,True,9,8,4,https://github.com/tvandijck,Fix buildoutput pathvars,2,[],https://github.com/premake/premake-core/pull/969,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/969,"It turns out, that Visual Studio really don't like having most of the pathVars in the <Outputs> property of a custom build command....
this just doesn't work. The command does the right thing, but the tracking of the outputs goes wrong, and visual studio manages to actually create a $(SolutionDir) folder on disk too.
    <CustomBuild Include=""..\..\..\packages\tag_edit\include\tag_edit\tag_edit.tag"">
      <FileType>Document</FileType>
      <Command>tagc --cpp --types --schema --out=$(SolutionDir)/generated_tag/tag_edit %(FullPath)</Command>
      <Outputs>$(SolutionDir)/generated_tag/tag_edit/tag_edit.h;$(SolutionDir)/generated_tag/tag_edit/tag_edit.cpp</Outputs>
      <Message>Compiling %(FullPath)</Message>
    </CustomBuild>
So instead of making pathVars the default for buildoutputs and buildinputs, we turn it off, and only turn it on through an override in the environment where appropriate.","It turns out, that Visual Studio really don't like having most of the pathVars in the <Outputs> property of a custom build command....
this just doesn't work. The command does the right thing, but the tracking of the outputs goes wrong, and visual studio manages to actually create a $(SolutionDir) folder on disk too.
    <CustomBuild Include=""..\..\..\packages\tag_edit\include\tag_edit\tag_edit.tag"">
      <FileType>Document</FileType>
      <Command>tagc --cpp --types --schema --out=$(SolutionDir)/generated_tag/tag_edit %(FullPath)</Command>
      <Outputs>$(SolutionDir)/generated_tag/tag_edit/tag_edit.h;$(SolutionDir)/generated_tag/tag_edit/tag_edit.cpp</Outputs>
      <Message>Compiling %(FullPath)</Message>
    </CustomBuild>
So instead of making pathVars the default for buildoutputs and buildinputs, we turn it off, and only turn it on through an override in the environment where appropriate.",True,{}
premake/premake-core,https://github.com/premake/premake-core,970,2017-12-11T17:09:55Z,2017-12-12T18:05:06Z,2017-12-12T18:05:08Z,MERGED,True,16,3,2,https://github.com/tvandijck,Table fix indexof,1,[],https://github.com/premake/premake-core/pull/970,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/970,"Subtle, and this loop works as long as the table is a pure array...
but once you use the table.insertkeyed, or a mix of hashmap/array this can potentially return just a key of any type, not just the index to an element in the array part.","Subtle, and this loop works as long as the table is a pure array...
but once you use the table.insertkeyed, or a mix of hashmap/array this can potentially return just a key of any type, not just the index to an element in the array part.",True,{}
premake/premake-core,https://github.com/premake/premake-core,979,2017-12-19T14:15:41Z,2017-12-21T10:07:17Z,2018-01-09T14:16:23Z,MERGED,True,2,16,2,https://github.com/tdesveauxPKFX,Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off,2,[],https://github.com/premake/premake-core/pull/979,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/979,"Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef","Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef",True,{}
premake/premake-core,https://github.com/premake/premake-core,979,2017-12-19T14:15:41Z,2017-12-21T10:07:17Z,2018-01-09T14:16:23Z,MERGED,True,2,16,2,https://github.com/tdesveauxPKFX,Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off,2,[],https://github.com/premake/premake-core/pull/979,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/979#issuecomment-352769722,"Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef",Thanks for this! You will also need to run the unit tests (premake5 test) and fix the ones that are failing because of the new flag.,True,{}
premake/premake-core,https://github.com/premake/premake-core,979,2017-12-19T14:15:41Z,2017-12-21T10:07:17Z,2018-01-09T14:16:23Z,MERGED,True,2,16,2,https://github.com/tdesveauxPKFX,Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off,2,[],https://github.com/premake/premake-core/pull/979,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/979#issuecomment-352780476,"Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef","My bad, totally forgot. Should be good now.
Also I took the time to track the commit that added the vs2013 condition.
5a4ad51
It was made by @tvandijck , we may want to have his opinion on this?",True,{}
premake/premake-core,https://github.com/premake/premake-core,979,2017-12-19T14:15:41Z,2017-12-21T10:07:17Z,2018-01-09T14:16:23Z,MERGED,True,2,16,2,https://github.com/tdesveauxPKFX,Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off,2,[],https://github.com/premake/premake-core/pull/979,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/979#issuecomment-352792980,"Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef","@tdesveauxPKFX He's currently unavailable for the next month(?) perhaps longer.
@TurkeyMan do any of your projects build with VS2010 still? Additionally, do you guys disable the warning 4530? That number looks really familiar, and I'm assuming that's because it was disabled here (probably by you).
Just to provide a little more insight into the reason this was attached to VS2013+, for those that don't already know. VS2013 had an issue that resulted in warnings regarding throw/noexcept in various C/C++/STL headers, and if I recall correctly, these warnings couldn't be disabled - or it just failed to disable them. So using this was much easier, I only came across this issue after upgrading to VS2013, our VS2010 builds didn't suffer from the 4530 warning (probably because it was disabled). I'm going to assume everyone just disabled that warning and moved on, and then VS2013 reared it's head.",True,{}
premake/premake-core,https://github.com/premake/premake-core,979,2017-12-19T14:15:41Z,2017-12-21T10:07:17Z,2018-01-09T14:16:23Z,MERGED,True,2,16,2,https://github.com/tdesveauxPKFX,Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off,2,[],https://github.com/premake/premake-core/pull/979,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/979#issuecomment-353146323,"Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef","I'm not at all familiar with this issue, I'll leave it up to @samsinsane and @TurkeyMan to make the call on this one.",True,{}
premake/premake-core,https://github.com/premake/premake-core,979,2017-12-19T14:15:41Z,2017-12-21T10:07:17Z,2018-01-09T14:16:23Z,MERGED,True,2,16,2,https://github.com/tdesveauxPKFX,Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off,2,[],https://github.com/premake/premake-core/pull/979,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/979#issuecomment-353311249,"Not defining _HAS_EXCEPTIONS=0 when ExceptionHandling is off cause warning.
warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
Ref: (VSINTALL)\VC\include\xstddef","Let's merge it! It resolves an issue, and makes the code less ""condition-y"" and that's just perfect üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,980,2017-12-19T18:56:29Z,2017-12-20T18:41:34Z,2017-12-20T18:41:34Z,MERGED,True,3,3,3,https://github.com/catb0t,src/base and modules: change links to industriousone.com to working HTTPS github links,1,[],https://github.com/premake/premake-core/pull/980,https://github.com/catb0t,1,https://github.com/premake/premake-core/pull/980,fixes #973,fixes #973,True,{}
premake/premake-core,https://github.com/premake/premake-core,988,2018-01-07T17:23:18Z,2018-02-05T11:56:04Z,2018-02-05T11:56:07Z,MERGED,True,11,1,2,https://github.com/samsinsane,Fixed a bug with normalizing paths that contain dot folders,2,[],https://github.com/premake/premake-core/pull/988,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/988,"Added additional tests

Resolves #987","Added additional tests

Resolves #987",True,{'THUMBS_UP': ['https://github.com/SirLynix']}
premake/premake-core,https://github.com/premake/premake-core,988,2018-01-07T17:23:18Z,2018-02-05T11:56:04Z,2018-02-05T11:56:07Z,MERGED,True,11,1,2,https://github.com/samsinsane,Fixed a bug with normalizing paths that contain dot folders,2,[],https://github.com/premake/premake-core/pull/988,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/988#issuecomment-358231389,"Added additional tests

Resolves #987",thank you for the added test coverage.,True,{}
premake/premake-core,https://github.com/premake/premake-core,990,2018-01-09T15:10:26Z,2018-01-10T16:55:04Z,2018-01-10T21:12:06Z,MERGED,True,114,0,4,https://github.com/tdesveauxPKFX,Extended Instructions sets,3,[],https://github.com/premake/premake-core/pull/990,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/990,ref: #986,ref: #986,True,{}
premake/premake-core,https://github.com/premake/premake-core,990,2018-01-09T15:10:26Z,2018-01-10T16:55:04Z,2018-01-10T21:12:06Z,MERGED,True,114,0,4,https://github.com/tdesveauxPKFX,Extended Instructions sets,3,[],https://github.com/premake/premake-core/pull/990,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/990#issuecomment-356664818,ref: #986,"Looks great, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,993,2018-01-10T10:21:34Z,2018-01-11T14:43:42Z,2018-01-11T17:34:33Z,MERGED,True,4,1,1,https://github.com/alexandre-janniaux,Fix /usr/lib64 being used as search dir before project's libdir,2,[],https://github.com/premake/premake-core/pull/993,https://github.com/alexandre-janniaux,1,https://github.com/premake/premake-core/pull/993,"Move the /usr/lib64 added by the compiler script (src/tools/gcc.lua) after every other -L
declaration.
The other fix is to completely remove the -L /usr/lib64 entry. See issue #992 for details.
fixes #992","Move the /usr/lib64 added by the compiler script (src/tools/gcc.lua) after every other -L
declaration.
The other fix is to completely remove the -L /usr/lib64 entry. See issue #992 for details.
fixes #992",True,{}
premake/premake-core,https://github.com/premake/premake-core,993,2018-01-10T10:21:34Z,2018-01-11T14:43:42Z,2018-01-11T17:34:33Z,MERGED,True,4,1,1,https://github.com/alexandre-janniaux,Fix /usr/lib64 being used as search dir before project's libdir,2,[],https://github.com/premake/premake-core/pull/993,https://github.com/alexandre-janniaux,2,https://github.com/premake/premake-core/pull/993#issuecomment-356742143,"Move the /usr/lib64 added by the compiler script (src/tools/gcc.lua) after every other -L
declaration.
The other fix is to completely remove the -L /usr/lib64 entry. See issue #992 for details.
fixes #992","It might be possible to write a test to assert this behaviour doesn't happen by, for example, writing a libm mock, compiling it into a library, compile an executable and link against libm and finally check that the function in the program runs the mock behaviour and not the libm behaviour.",True,{}
premake/premake-core,https://github.com/premake/premake-core,993,2018-01-10T10:21:34Z,2018-01-11T14:43:42Z,2018-01-11T17:34:33Z,MERGED,True,4,1,1,https://github.com/alexandre-janniaux,Fix /usr/lib64 being used as search dir before project's libdir,2,[],https://github.com/premake/premake-core/pull/993,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/993#issuecomment-356940032,"Move the /usr/lib64 added by the compiler script (src/tools/gcc.lua) after every other -L
declaration.
The other fix is to completely remove the -L /usr/lib64 entry. See issue #992 for details.
fixes #992","Updated to latest master branch, just waiting for the checks to pass‚Ä¶",True,{'THUMBS_UP': ['https://github.com/alexandre-janniaux']}
premake/premake-core,https://github.com/premake/premake-core,993,2018-01-10T10:21:34Z,2018-01-11T14:43:42Z,2018-01-11T17:34:33Z,MERGED,True,4,1,1,https://github.com/alexandre-janniaux,Fix /usr/lib64 being used as search dir before project's libdir,2,[],https://github.com/premake/premake-core/pull/993,https://github.com/alexandre-janniaux,4,https://github.com/premake/premake-core/pull/993#issuecomment-357002645,"Move the /usr/lib64 added by the compiler script (src/tools/gcc.lua) after every other -L
declaration.
The other fix is to completely remove the -L /usr/lib64 entry. See issue #992 for details.
fixes #992",Thank you for the quick integration of this fix!,True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/dcourtois,1,https://github.com/premake/premake-core/pull/994,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.",True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/994#issuecomment-358230081,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.",I'm with @samsinsane here...,True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/994#issuecomment-358231105,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","Yeah, I ran into similar issues with some of the http test failures... it's kind of why I added the --insecure option.... I run my tests locally with that option, so the ssl tests pass... it's often because of some firewall stuff in corporate organizations...",True,{'THUMBS_UP': ['https://github.com/dcourtois']}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/dcourtois,4,https://github.com/premake/premake-core/pull/994#issuecomment-358235002,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","Ok I could run the tests, and I have a problem: I need to override os.getWindowsRegistry and restore to be able to return a testable version number, but the code I'm using is not working. I'm a bit rusty in Lua, do you have any idea why it's not working ? And any way to achieve this ?",True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/994#issuecomment-358296546,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","Hi, like I said in the first comment

Woops, sorry about that, I completely forgot that you mentioned the tests failing in your original comment. I was referring to the failed builds with appveyor and travis, in my head it made sense at the time, sorry for the confusion!

do you have any idea why it's not working ? And any way to achieve this ?

I've added a comment for this, that should fix it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/dcourtois,6,https://github.com/premake/premake-core/pull/994#issuecomment-358581291,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","@samsinsane thanks, that was it ! some other tests still fail on my machine, but at least appveyor seems to be happy now :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/994#issuecomment-358584612,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","@dcourtois No worries, glad it sorted it out, just noticed another issue when I checked the Travis builds. I've added a comment for that, hopefully that's the last thing! I'm sure you're just as keen to merge this as I am at this point. üòÑ Thanks for doing this!",True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/dcourtois,8,https://github.com/premake/premake-core/pull/994#issuecomment-358607568,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","My worst PR ever, thanks for the help :D Fingers crossed ...",True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/994#issuecomment-358611675,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.",Everything looks good now! We'll merge this when the mac build finally runs - seems like it's time for TravisCI to buy some more macs haha.,True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/tvandijck,10,https://github.com/premake/premake-core/pull/994#issuecomment-358612236,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","That could be days ;) Their mac builds are so overloaded all the time, it often takes 4-5 hours for that queue to clear... I wouldn't wait... if linux is passing, bsd/mac will pass too on this one, there is no difference in codepath for this particular test between the two...",True,"{'THUMBS_UP': ['https://github.com/samsinsane'], 'HEART': ['https://github.com/samsinsane']}"
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/samsinsane,11,https://github.com/premake/premake-core/pull/994#issuecomment-358612941,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.",@tvandijck you raise some good points. Merging.,True,{}
premake/premake-core,https://github.com/premake/premake-core,994,2018-01-16T16:01:39Z,2018-01-18T11:01:21Z,2018-01-18T11:03:27Z,MERGED,True,65,3,2,https://github.com/dcourtois,added a 'latest' systemversion for vs2017,4,[],https://github.com/premake/premake-core/pull/994,https://github.com/dcourtois,12,https://github.com/premake/premake-core/pull/994#issuecomment-358613475,"Sorry for the delay, but here is the pull request for issue #935 and the other related ones.
You can now specify systemversion ""latest"". If the action is vs2017, it will query the registry to retrieve the latest SDK 10 version number. If anything's wrong (action less than vs2017, the registry does not exist, etc.) no system version will be written in the vcxproj.
There are 2 basic unit tests, but I couldn't run them, tests currently fail on test_http.lua on my setup...
I tested this on my personal project, and also to build Premake itself using vs2017, and it works fine (just needed to add systemversion ""latest"" on the various Premake scripts for the Windows config.","Now I can suggest to update the Premake and modules' scripts to use systemversion ""latest"" to finally be able to bootstrap Premake using vs2017 :p",True,{}
premake/premake-core,https://github.com/premake/premake-core,1003,2018-02-12T22:08:22Z,2019-10-14T14:38:15Z,2019-10-14T14:38:15Z,CLOSED,False,6,1,1,https://github.com/joeriedel,"Xcode 9.2 -std=c++17, MACOSX_DEPLOYMENT_TARGET",2,[],https://github.com/premake/premake-core/pull/1003,https://github.com/joeriedel,1,https://github.com/premake/premake-core/pull/1003,Xcode 9.2 doesn't work correctly with premake5 generated projects when settings c++17. Also premake wasn't using systemversion() on macosx targets.,Xcode 9.2 doesn't work correctly with premake5 generated projects when settings c++17. Also premake wasn't using systemversion() on macosx targets.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1003,2018-02-12T22:08:22Z,2019-10-14T14:38:15Z,2019-10-14T14:38:15Z,CLOSED,False,6,1,1,https://github.com/joeriedel,"Xcode 9.2 -std=c++17, MACOSX_DEPLOYMENT_TARGET",2,[],https://github.com/premake/premake-core/pull/1003,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1003#issuecomment-365144307,Xcode 9.2 doesn't work correctly with premake5 generated projects when settings c++17. Also premake wasn't using systemversion() on macosx targets.,"Hmm, this is a tricky change. Firstly, given that c++11 isn't supported in earlier versions of XCode but c++0x is, I have a feeling that this is a very similar situation - perhaps it's time to start making new actions for XCode for these breaking changes? Secondly, you'll need to update the unit tests and add unit tests for systemversion. In the future, it would be better if these unrelated changes were split into their own PRs, while your C++17 changes are potentially contentious, your systemversion changes are not and are just going to be held up while we discuss what to do with C++ support in XCode.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1003,2018-02-12T22:08:22Z,2019-10-14T14:38:15Z,2019-10-14T14:38:15Z,CLOSED,False,6,1,1,https://github.com/joeriedel,"Xcode 9.2 -std=c++17, MACOSX_DEPLOYMENT_TARGET",2,[],https://github.com/premake/premake-core/pull/1003,https://github.com/pdoane,3,https://github.com/premake/premake-core/pull/1003#issuecomment-365150622,Xcode 9.2 doesn't work correctly with premake5 generated projects when settings c++17. Also premake wasn't using systemversion() on macosx targets.,"There are similar discussions going on for the Visual Studio side.  I think the best answer here is that 'c++11' only maps to a compiler that claims full compliance and not to 'c++0x', so this seems like a change in the right direction but it needs to be done universally.  Additional options for 'c++0x' would make sense as well.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1003,2018-02-12T22:08:22Z,2019-10-14T14:38:15Z,2019-10-14T14:38:15Z,CLOSED,False,6,1,1,https://github.com/joeriedel,"Xcode 9.2 -std=c++17, MACOSX_DEPLOYMENT_TARGET",2,[],https://github.com/premake/premake-core/pull/1003,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1003#issuecomment-541717875,Xcode 9.2 doesn't work correctly with premake5 generated projects when settings c++17. Also premake wasn't using systemversion() on macosx targets.,"Seeing as the systemversion() change has already been merged by #1337, I'm going to go ahead and close this one. I agree with @pdoane that this fits into the large discussion for handing the ""fluid"" toolset releases we're seeing these days.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1005,2018-02-16T02:04:39Z,2018-03-22T18:59:47Z,2018-04-26T04:32:18Z,MERGED,True,33,30,6,https://github.com/TurkeyMan,Fix gmake dependencies,3,[],https://github.com/premake/premake-core/pull/1005,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1005,"Attempt to fix #981
Note, this patch doesn't implement any logic to prevent execution of the prebuild step if the project is not dirty... it will ALWAYS run prebuild, just like gmake output always has, but the deps should now be structured that parallel builds work.","Attempt to fix #981
Note, this patch doesn't implement any logic to prevent execution of the prebuild step if the project is not dirty... it will ALWAYS run prebuild, just like gmake output always has, but the deps should now be structured that parallel builds work.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1005,2018-02-16T02:04:39Z,2018-03-22T18:59:47Z,2018-04-26T04:32:18Z,MERGED,True,33,30,6,https://github.com/TurkeyMan,Fix gmake dependencies,3,[],https://github.com/premake/premake-core/pull/1005,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/1005#issuecomment-366191835,"Attempt to fix #981
Note, this patch doesn't implement any logic to prevent execution of the prebuild step if the project is not dirty... it will ALWAYS run prebuild, just like gmake output always has, but the deps should now be structured that parallel builds work.","Make sure you discuss this change with @bwhittle (at World of Warcraft).
He did most of the PCH related fixes earlier last year.
Other then the test failures, the change looks fine to me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1005,2018-02-16T02:04:39Z,2018-03-22T18:59:47Z,2018-04-26T04:32:18Z,MERGED,True,33,30,6,https://github.com/TurkeyMan,Fix gmake dependencies,3,[],https://github.com/premake/premake-core/pull/1005,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1005#issuecomment-375132204,"Attempt to fix #981
Note, this patch doesn't implement any logic to prevent execution of the prebuild step if the project is not dirty... it will ALWAYS run prebuild, just like gmake output always has, but the deps should now be structured that parallel builds work.",This has been tested now on a large project.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1005,2018-02-16T02:04:39Z,2018-03-22T18:59:47Z,2018-04-26T04:32:18Z,MERGED,True,33,30,6,https://github.com/TurkeyMan,Fix gmake dependencies,3,[],https://github.com/premake/premake-core/pull/1005,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/1005#issuecomment-375133249,"Attempt to fix #981
Note, this patch doesn't implement any logic to prevent execution of the prebuild step if the project is not dirty... it will ALWAYS run prebuild, just like gmake output always has, but the deps should now be structured that parallel builds work.","If someone wants to bless, this makes parallel builds work with make.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1005,2018-02-16T02:04:39Z,2018-03-22T18:59:47Z,2018-04-26T04:32:18Z,MERGED,True,33,30,6,https://github.com/TurkeyMan,Fix gmake dependencies,3,[],https://github.com/premake/premake-core/pull/1005,https://github.com/TurkeyMan,5,https://github.com/premake/premake-core/pull/1005#issuecomment-375428251,"Attempt to fix #981
Note, this patch doesn't implement any logic to prevent execution of the prebuild step if the project is not dirty... it will ALWAYS run prebuild, just like gmake output always has, but the deps should now be structured that parallel builds work.","Sure, I can approve til the cows come home (I created this github account!) :P
But I totally wanted someone else to give this one a good once-over, since it feels pretty dangerous to me.",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/Enhex,1,https://github.com/premake/premake-core/pull/1009,More correct than staying with latest.,More correct than staying with latest.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/catb0t,2,https://github.com/premake/premake-core/pull/1009#issuecomment-367001349,More correct than staying with latest.,"You'll need to update the tests or add more tests. Travis and AppVeyor fail because
Running action 'test'...
vstudio_vs2010_compile_settings.onLanguage_Cpp17_VS2017: ...e/modules/vstudio/tests/vc2010/test_compile_settings.lua:1193: (5) expected:
	<LanguageStandard>stdcpplatest</LanguageStandard>
...but was:
	<LanguageStandard>stdcpp17</LanguageStandard>
fulltext:
<ClCompile>
	<PrecompiledHeader>NotUsing</PrecompiledHeader>
	<WarningLevel>Level3</WarningLevel>
	<Optimization>Disabled</Optimization>
	<LanguageStandard>stdcpp17</LanguageStandard>
</ClCompile>
stack traceback:
	...e/modules/vstudio/tests/vc2010/test_compile_settings.lua:1193: in function <...e/modules/vstudio/tests/vc2010/test_compile_settings.lua:1188>
vstudio_vs2010_compile_settings.onLanguage_Cpp17_VS2015: ...e/modules/vstudio/tests/vc2010/test_compile_settings.lua:1178: (5) expected:
	<AdditionalOptions>/std:c++latest %(AdditionalOptions)</AdditionalOptions>
...but was:
	<AdditionalOptions>/std:c++17 %(AdditionalOptions)</AdditionalOptions>
fulltext:
<ClCompile>
	<PrecompiledHeader>NotUsing</PrecompiledHeader>
	<WarningLevel>Level3</WarningLevel>
	<Optimization>Disabled</Optimization>
	<AdditionalOptions>/std:c++17 %(AdditionalOptions)</AdditionalOptions>
</ClCompile>
stack traceback:
	...e/modules/vstudio/tests/vc2010/test_compile_settings.lua:1178: in function <...e/modules/vstudio/tests/vc2010/test_compile_settings.lua:1173>
1694 tests passed, 2 failed in 5.06 seconds",True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/catb0t,3,https://github.com/premake/premake-core/pull/1009#issuecomment-367164448,More correct than staying with latest.,I think you have to change it one more place since the builds are still failing. I recommend you run the tests on your own machine too!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/pdoane,4,https://github.com/premake/premake-core/pull/1009#issuecomment-367164887,More correct than staying with latest.,We still need a way to be able to generate stdcpplatest for VS2017 versions before stdcpp17 is recognized.  It's fine to call that C++latest though.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/Enhex,5,https://github.com/premake/premake-core/pull/1009#issuecomment-367186605,More correct than staying with latest.,"The error is for VS2015 and I don't have it installed currently. I'll find time for that later on.
@pdoane C++latest isn't good enough for all cases. For example if you want to explicitly restrict your project to C++17 for compatibility reasons, making sure nothing that's not supported by C++17 but does by C++latest doesn't make it in.
For older VS minor versions Premake will have to provide a way to select them. Right now you can only select the major releases.
In the meanwhile if you stick with an old version of VS, you can also stick with an old version of Premake that matches it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/pdoane,6,https://github.com/premake/premake-core/pull/1009#issuecomment-367222385,More correct than staying with latest.,"C++latest isn't good enough for all cases.

I didn't say that it was.  I'm in support of having ""C++17"" map to /std:c++-17.  I said we still need a way to generate /std:c++-latest.  That is the only way to enable post C++17 functionality with the recent versions and the only way to enable C++17 draft functionality in the older versions.
Adding another option as I suggested makes the mapping very sensible:
cppdialect ""C++latest"" -> /std:c++-latest
cppdialect ""C++17"" -> /std:c++-17
It's kind of similar to the ""C++0x"" variations for gcc/clang.

In the meanwhile if you stick with an old version of VS, you can also stick with an old version of Premake that matches it.

That isn't a viable option for us.",True,"{'THUMBS_UP': ['https://github.com/samsinsane', 'https://github.com/Dandielo']}"
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/Enhex,7,https://github.com/premake/premake-core/pull/1009#issuecomment-367415478,More correct than staying with latest.,"@pdoane adding ""C++latest"" cppdialect is a much simpler solution, I'm in favor of it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/tvandijck,8,https://github.com/premake/premake-core/pull/1009#issuecomment-385436551,More correct than staying with latest.,Do we close this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1009,2018-02-20T14:34:10Z,2018-05-01T13:57:30Z,2018-05-01T13:57:30Z,CLOSED,False,3,3,2,https://github.com/Enhex,Visual Studio added explicit C++17 option,3,[],https://github.com/premake/premake-core/pull/1009,https://github.com/starkos,9,https://github.com/premake/premake-core/pull/1009#issuecomment-385676640,More correct than staying with latest.,This looks like it is good to close. Feel free to reopen with changes as appropriate.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1011,2018-02-27T13:04:18Z,2018-04-12T18:48:03Z,2018-04-12T18:48:03Z,MERGED,True,2,2,1,https://github.com/Dandielo,Fixes an issue with custom rules tracking files.,2,[],https://github.com/premake/premake-core/pull/1011,https://github.com/Dandielo,1,https://github.com/premake/premake-core/pull/1011,"Using 'Build Rules' would sometimes cause the tracker ignore changes in a source file, because of the tracker file being in the wrong directory.","Using 'Build Rules' would sometimes cause the tracker ignore changes in a source file, because of the tracker file being in the wrong directory.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1011,2018-02-27T13:04:18Z,2018-04-12T18:48:03Z,2018-04-12T18:48:03Z,MERGED,True,2,2,1,https://github.com/Dandielo,Fixes an issue with custom rules tracking files.,2,[],https://github.com/premake/premake-core/pull/1011,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/1011#issuecomment-378894364,"Using 'Build Rules' would sometimes cause the tracker ignore changes in a source file, because of the tracker file being in the wrong directory.",Seems like a good change to me.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1018,,,True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/neico,2,https://github.com/premake/premake-core/pull/1018#issuecomment-374080522,,"@starkos you might want to visit https://shields.io/ to see how the ""API"" works,
in other words, most of it is grabbed and probably cached for a sane amount of time from the repo directly.
The only thing that might need adjustments for each release is the actual ""commits since last tag release"", unless you opt to tag the latest release with a special tag that'll get moved (remove & add) with every tag. (as changing tags shouldn't affect git history)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1018#issuecomment-374683623,,"The only thing that might need adjustments for each release is the actual ""commits since last tag release"", unless you opt to tag the latest release with a special tag

If that is something that needs to be done, can you add it to scripts/RELEASE.txt?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/neico,4,https://github.com/premake/premake-core/pull/1018#issuecomment-374694248,,"I assume @samsinsane can include this in this PR, as it's a rather minimal change as well (in case you were talking to me and not him)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1018#issuecomment-375611579,,"Hey, sorry, was AFK for a couple weeks. As @neico has already indicated, the Shields.io API does everything for us except for the ""commits since"" shield. We can alternatively use latest instead of v5.0.0-alpha12 or whatever it is, but to my understanding latest only works with proper releases and not pre-releases like we're doing. The repo they use for the example latest doesn't have a tag ""latest"" and it seems to only be GitHub keeping track of which release is ""latest"", so it looks like it's entirely dependent on GitHub-isms.
FWIW this is what the latest shield looks like: 
I'll update the RELEASE.txt with this information when I get a chance!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1018#issuecomment-375627431,,"I don't mind setting a ""latest"" tag (in addition to the version tag) if that helps?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1018#issuecomment-375634527,,"I don't think it's a ""latest"" tag, I think it has to be a release where you don't tick the ""pre-release"" box. No idea to be honest, you can try pushing a git tag ""latest"" and see if that badge I commented updates?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1018,2018-03-10T16:42:55Z,2018-03-26T16:34:22Z,2018-03-27T09:56:52Z,MERGED,True,7,0,2,https://github.com/samsinsane,Added release info badges to the readme,2,[],https://github.com/premake/premake-core/pull/1018,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/1018#issuecomment-375850606,,"@starkos RELEASE.txt changes are ready for you to look over, I'm more than happy to change it if you want.",True,{'THUMBS_UP': ['https://github.com/neico']}
premake/premake-core,https://github.com/premake/premake-core,1019,2018-03-16T01:37:45Z,2018-03-17T14:41:43Z,2018-03-23T10:42:20Z,MERGED,True,0,4,2,https://github.com/Passw,Remove git submodule commands,1,[],https://github.com/premake/premake-core/pull/1019,https://github.com/Passw,1,https://github.com/premake/premake-core/pull/1019,It seems that there is no git submodule any more,It seems that there is no git submodule any more,True,{}
premake/premake-core,https://github.com/premake/premake-core,1019,2018-03-16T01:37:45Z,2018-03-17T14:41:43Z,2018-03-23T10:42:20Z,MERGED,True,0,4,2,https://github.com/Passw,Remove git submodule commands,1,[],https://github.com/premake/premake-core/pull/1019,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1019#issuecomment-373925090,It seems that there is no git submodule any more,"Good catch, thanks for this!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1019,2018-03-16T01:37:45Z,2018-03-17T14:41:43Z,2018-03-23T10:42:20Z,MERGED,True,0,4,2,https://github.com/Passw,Remove git submodule commands,1,[],https://github.com/premake/premake-core/pull/1019,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1019#issuecomment-375619286,It seems that there is no git submodule any more,"This is a fair enough change, personally I would have left them in. I'd like to see some of the external things become submodules instead, given that our premake5.lua for ""contribs"" can exist anywhere and modify which files are included, we could have working examples of how you ""premake-ify"" external projects you don't control. We might have modifications to some config file, but we can just exclude the provided ones and include our required ones. We would probably need GitHub to eventually fix the Releases source package to pull in submodule source code too, since it's pretty useless without it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/redorav,1,https://github.com/premake/premake-core/pull/1020,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/redorav,2,https://github.com/premake/premake-core/pull/1020#issuecomment-374702539,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","There's just one thing I wasn't sure of which is putting mobdebug.lua at the root of the premake folder. I couldn't get it to work any other way, but that's just my inexperience with lua I guess. I can spend a bit more time trying to figure it out. How does updating branches work? If I update the luasocket branch does the PR 'reset' waiting for approval again?
Regarding the commit messages I can try summarizing a bit more :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1020#issuecomment-375684000,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","There's just one thing I wasn't sure of which is putting mobdebug.lua at the root of the premake folder.

I figured that was an issue with the debugger itself. I don't have any objection to this myself, and it can always be moved later if there is a need/way.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/1020#issuecomment-375688670,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","This might be a bit more complicated, and extra work at this point, but I did create the ""lua shim"" for this purpose, so that LuaRocks can easily be ported for the premake lua interpreter.
Quite honestly, I would prefer it if the ""lua socket"" library was compiled as a ""binary module"", you'll find an example of that here:

https://github.com/premake/premake-core/tree/master/binmodules/example

it would make loading the .dll more optional, and not impact the premake5.exe with the added embedded code, and you wouldn't have to rename those buffer methods either.
Anyway, since I'm a little out of the loop, I'm not going to request changes here, but I figured I'd at least give you all my preferred approach.... and it's always something that can be changed later on as well.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1020#issuecomment-376227419,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","What do you think of @tvandijck's suggestions, @redorav? Could you take a crack at splitting it out into a module?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/redorav,6,https://github.com/premake/premake-core/pull/1020#issuecomment-376229905,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","@starkos @tvandijck Sorry for not replying earlier, it's being a busy week and weekend, I can take a look at the suggested solution of adding it as binary module, I'll first have to understand what they are and how they work. I thought defining it out would be optional enough for people who don't want to add the library, but I can certainly understand wanting to integrate it differently.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/redorav,7,https://github.com/premake/premake-core/pull/1020#issuecomment-377504150,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","@tvandijck I've managed to build luasocket as a dll and exported the main function called luaopen_socket_core, but when it comes to calling require(), I can't figure out how to do the equivalent of
luaL_requiref(L, ""socket"", luaopen_socket_core, 1)
that I used when building as a static library. It seems like it will look for a dll of the same name and tries to match the function somehow but all variations of the name always return an error. I have been able to call require('example') with the example.dll in the same directory, so I must be almost there.
EDIT: Ah, never mind, I just realized I have to load the luashim before loading any libs, which means creating my own luaopen_luasocket function instead of using luaopen_socket_core directly from the luasocket code. It's all working now :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/redorav,8,https://github.com/premake/premake-core/pull/1020#issuecomment-377937268,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging","@starkos Feel free to review this when you have a bit of time. I managed to get it working and didn't spend too much time on it. The solution ends up being pretty much the same except with a dll instead of a binary, which is fine. I'll have to update the wiki steps I've written to make it clear but should be ok.
One thing I didn't manage was outputting a good error message when luasocket isn't found. When calling require(""luasocket"") if the call fails I can't retrieve the return value to output something with it. Is there any multiplatform functionality in premake I can use to determine whether a given dynamic library exists alongside premake?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1020,2018-03-17T14:51:22Z,2018-04-07T12:46:12Z,2018-04-17T23:37:19Z,MERGED,True,30325,1,187,https://github.com/redorav,"Embed luasocket, add mobdebug and --debugger command line option",12,[],https://github.com/premake/premake-core/pull/1020,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/1020#issuecomment-378261565,"Embed luasocket as a static library
Add mobdebug lua script to allow debugging premake with ZeroBrane Studio
Add --debugger command line option to enable debugging",I like it this way for sure... thank you for taking the time to make this change.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1021,2018-03-19T14:11:35Z,2018-03-23T17:59:31Z,2018-03-23T17:59:35Z,MERGED,True,13,0,1,https://github.com/starkos,Clear additional global state between unit test runs,2,[],https://github.com/premake/premake-core/pull/1021,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1021,"Clears out some global state that was being left over between unit tests runs, causing indeterminate results when running multiple tests against data at the global scope.","Clears out some global state that was being left over between unit tests runs, causing indeterminate results when running multiple tests against data at the global scope.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1021,2018-03-19T14:11:35Z,2018-03-23T17:59:31Z,2018-03-23T17:59:35Z,MERGED,True,13,0,1,https://github.com/starkos,Clear additional global state between unit test runs,2,[],https://github.com/premake/premake-core/pull/1021,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1021#issuecomment-374720179,"Clears out some global state that was being left over between unit tests runs, causing indeterminate results when running multiple tests against data at the global scope.","FWIW, I have no idea why the Travis macOS test has failed‚Ä¶I'm unable to reproduce the problem here on my macOS machine. Re-ran the job, worked this time.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1021,2018-03-19T14:11:35Z,2018-03-23T17:59:31Z,2018-03-23T17:59:35Z,MERGED,True,13,0,1,https://github.com/starkos,Clear additional global state between unit test runs,2,[],https://github.com/premake/premake-core/pull/1021,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/1021#issuecomment-375683693,"Clears out some global state that was being left over between unit tests runs, causing indeterminate results when running multiple tests against data at the global scope.","The macOS test failed because of one other 'order' dependency... so this commit is a step in the right direction, but I think there is some other global state that has a somewhat rare effect on that particular macOS test.
either way... LGTM... merge it...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1023,2018-03-26T13:47:15Z,2018-04-22T12:43:24Z,2018-04-22T22:19:48Z,MERGED,True,5,0,2,https://github.com/Gaztin,Include library directories in Codelite projects,7,[],https://github.com/premake/premake-core/pull/1023,https://github.com/Gaztin,1,https://github.com/premake/premake-core/pull/1023,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1023,2018-03-26T13:47:15Z,2018-04-22T12:43:24Z,2018-04-22T22:19:48Z,MERGED,True,5,0,2,https://github.com/Gaztin,Include library directories in Codelite projects,7,[],https://github.com/premake/premake-core/pull/1023,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1023#issuecomment-376469603,,"@tvandijck you removed this here, are you able to recall why?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1023,2018-03-26T13:47:15Z,2018-04-22T12:43:24Z,2018-04-22T22:19:48Z,MERGED,True,5,0,2,https://github.com/Gaztin,Include library directories in Codelite projects,7,[],https://github.com/premake/premake-core/pull/1023,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/1023#issuecomment-378894051,,"I tried to get Starcraft 2 working in CodeLite on Linux for Deepmind, so the changes I made are based on that attempt.
@TurkeyMan would have to confirm if Blizzard is still using this and object to these changes or not.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1023,2018-03-26T13:47:15Z,2018-04-22T12:43:24Z,2018-04-22T22:19:48Z,MERGED,True,5,0,2,https://github.com/Gaztin,Include library directories in Codelite projects,7,[],https://github.com/premake/premake-core/pull/1023,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1023#issuecomment-381706923,,Assigned @TurkeyMan as a reviewer.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1023,2018-03-26T13:47:15Z,2018-04-22T12:43:24Z,2018-04-22T22:19:48Z,MERGED,True,5,0,2,https://github.com/Gaztin,Include library directories in Codelite projects,7,[],https://github.com/premake/premake-core/pull/1023,https://github.com/TurkeyMan,5,https://github.com/premake/premake-core/pull/1023#issuecomment-382093639,,"Blizzard are still using it (not actively) as far as I can tell, but assuming this change is right (it looks right!), then I can't object to it!
There must be some reason why it was removed in the first place though?
Can the author of this PR give confidence that this is correct? If someone who's actively using it is satisfied, then I'm satisfied :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1023,2018-03-26T13:47:15Z,2018-04-22T12:43:24Z,2018-04-22T22:19:48Z,MERGED,True,5,0,2,https://github.com/Gaztin,Include library directories in Codelite projects,7,[],https://github.com/premake/premake-core/pull/1023,https://github.com/Gaztin,6,https://github.com/premake/premake-core/pull/1023#issuecomment-383121870,,"Yeah it's correct in my use case, which is just a typical C++ workspace with one application project and a couple of static library projects that the application uses.
It wasn't finding the library files, so I overrode the linker function and added the same changes as in this PR. Afterwards, it worked fine!
Edit: Here's the code",True,{}
premake/premake-core,https://github.com/premake/premake-core,1029,2018-04-02T14:00:58Z,2018-04-03T10:39:39Z,2018-04-03T10:39:44Z,MERGED,True,3,1,1,https://github.com/starkos,Replace last global state block in api.reset,1,[],https://github.com/premake/premake-core/pull/1029,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1029,"Follow up to #1021: I removed the state blocks added by the tests, but neglected to put back a new, empty global state block for the next run.","Follow up to #1021: I removed the state blocks added by the tests, but neglected to put back a new, empty global state block for the next run.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1030,2018-04-02T17:51:56Z,2018-04-03T10:39:23Z,2018-04-03T17:34:10Z,MERGED,True,110,1,2,https://github.com/tdesveauxPKFX,Fix vstudio symbolspath,2,[],https://github.com/premake/premake-core/pull/1030,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1030,Fix issue #1006,Fix issue #1006,True,{}
premake/premake-core,https://github.com/premake/premake-core,1031,2018-04-02T19:19:55Z,2018-04-05T10:38:19Z,2018-04-07T15:34:34Z,MERGED,True,105,3,3,https://github.com/tdesveauxPKFX,Fix gmake2 Makefile projects callArray,4,[],https://github.com/premake/premake-core/pull/1031,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1031,Fix #974,Fix #974,True,{}
premake/premake-core,https://github.com/premake/premake-core,1033,2018-04-03T18:24:18Z,2018-04-07T12:30:38Z,2018-04-07T15:35:21Z,MERGED,True,101,10,3,https://github.com/tdesveauxPKFX,vstudio staticlib symbolspath,7,[],https://github.com/premake/premake-core/pull/1033,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1033,"ref: #1032
Also fixed names from tests I added in #1030","ref: #1032
Also fixed names from tests I added in #1030",True,{}
premake/premake-core,https://github.com/premake/premake-core,1033,2018-04-03T18:24:18Z,2018-04-07T12:30:38Z,2018-04-07T15:35:21Z,MERGED,True,101,10,3,https://github.com/tdesveauxPKFX,vstudio staticlib symbolspath,7,[],https://github.com/premake/premake-core/pull/1033,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/1033#issuecomment-378893127,"ref: #1032
Also fixed names from tests I added in #1030","Thank you for all the added tests, much appreciated.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1033,2018-04-03T18:24:18Z,2018-04-07T12:30:38Z,2018-04-07T15:35:21Z,MERGED,True,101,10,3,https://github.com/tdesveauxPKFX,vstudio staticlib symbolspath,7,[],https://github.com/premake/premake-core/pull/1033,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/1033#issuecomment-379243109,"ref: #1032
Also fixed names from tests I added in #1030","Thanx.... if maintenance is a concern, then I guess you could make a local function for it, and we both have our way ;)
local function dothatthing(name, cfg)
....
end

function m.programDatabaseFile(cfg)
   dothatthing(""ProgramDatabaseFile"", cfg)
end

function m.programDatabaseFileName(cfg)
   dothatthing(""ProgramDataBaseFileName"", cfg)
end
Up to you if that's a change you would prefer to make, otherwise I'm happy with these changes, and someone can merge this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1033,2018-04-03T18:24:18Z,2018-04-07T12:30:38Z,2018-04-07T15:35:21Z,MERGED,True,101,10,3,https://github.com/tdesveauxPKFX,vstudio staticlib symbolspath,7,[],https://github.com/premake/premake-core/pull/1033,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1033#issuecomment-379253383,"ref: #1032
Also fixed names from tests I added in #1030","This solution sounds good to me, I will implement it later today when I have some time.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1034,2018-04-05T11:01:52Z,2018-04-06T16:24:51Z,2018-04-09T10:54:47Z,MERGED,True,1157,0,12,https://github.com/samsinsane,Add 'modules/android/' from premake-android,35,[],https://github.com/premake/premake-core/pull/1034,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1034,,,True,{'THUMBS_UP': ['https://github.com/redorav']}
premake/premake-core,https://github.com/premake/premake-core,1037,2018-04-07T17:24:15Z,2018-04-09T16:03:48Z,2018-04-12T17:33:19Z,MERGED,True,492,8,5,https://github.com/tdesveauxPKFX,HLSL Shader compilation in Visual Studio,2,[],https://github.com/premake/premake-core/pull/1037,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1037,"Visual Studio can compile HLSL shaders with the FxCompile block.
As far as I know, this is available at least from vs2012. I did not test for earlier versions.
There is one thing bothering me with this implementation, I had to create shaderdefines and shaderoptions even though the resulting tag is the same as ClCompile.
This is to avoid doing something like
filter { ""files:**.hlsl"" }
   defines { ""SOME_DEFINE"" }

as it would be treated as a per-file config instead of a block one.
If you have any idea to improve this, I'm up to implement it.","Visual Studio can compile HLSL shaders with the FxCompile block.
As far as I know, this is available at least from vs2012. I did not test for earlier versions.
There is one thing bothering me with this implementation, I had to create shaderdefines and shaderoptions even though the resulting tag is the same as ClCompile.
This is to avoid doing something like
filter { ""files:**.hlsl"" }
   defines { ""SOME_DEFINE"" }

as it would be treated as a per-file config instead of a block one.
If you have any idea to improve this, I'm up to implement it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1039,2018-04-08T16:33:50Z,2018-04-09T09:05:06Z,2018-04-12T17:31:54Z,CLOSED,False,198,17,7,https://github.com/tdesveauxPKFX,Various new API,6,[],https://github.com/premake/premake-core/pull/1039,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1039,"This is what we added to Premake where I work and I found that these have merits to be merged.
These might not be implemented across all possible tools/actions.","This is what we added to Premake where I work and I found that these have merits to be merged.
These might not be implemented across all possible tools/actions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1039,2018-04-08T16:33:50Z,2018-04-09T09:05:06Z,2018-04-12T17:31:54Z,CLOSED,False,198,17,7,https://github.com/tdesveauxPKFX,Various new API,6,[],https://github.com/premake/premake-core/pull/1039,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1039#issuecomment-379684978,"This is what we added to Premake where I work and I found that these have merits to be merged.
These might not be implemented across all possible tools/actions.","Sure, I won't be able to do this today but I will take care of this later this week.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1039,2018-04-08T16:33:50Z,2018-04-09T09:05:06Z,2018-04-12T17:31:54Z,CLOSED,False,198,17,7,https://github.com/tdesveauxPKFX,Various new API,6,[],https://github.com/premake/premake-core/pull/1039,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1039#issuecomment-379694145,"This is what we added to Premake where I work and I found that these have merits to be merged.
These might not be implemented across all possible tools/actions.","Sounds good, I look forward to going over them!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1040,2018-04-09T04:35:32Z,2018-05-29T01:16:10Z,2018-06-08T22:47:39Z,MERGED,True,356,36,9,https://github.com/ratzlaff,"Get 'compileas' working when using a 'filter ""files: ...""' scope.",1,[],https://github.com/premake/premake-core/pull/1040,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1040,"Extends compileas to be used in file filters
  project ""main""
      language ""C++""

      files  { ""src/file.c"" }
      filter { ""files:src/file.c"" }
          compileas ""C++""","Extends compileas to be used in file filters
  project ""main""
      language ""C++""

      files  { ""src/file.c"" }
      filter { ""files:src/file.c"" }
          compileas ""C++""",True,{}
premake/premake-core,https://github.com/premake/premake-core,1040,2018-04-09T04:35:32Z,2018-05-29T01:16:10Z,2018-06-08T22:47:39Z,MERGED,True,356,36,9,https://github.com/ratzlaff,"Get 'compileas' working when using a 'filter ""files: ...""' scope.",1,[],https://github.com/premake/premake-core/pull/1040,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/1040#issuecomment-380044097,"Extends compileas to be used in file filters
  project ""main""
      language ""C++""

      files  { ""src/file.c"" }
      filter { ""files:src/file.c"" }
          compileas ""C++""","LGTM, I'm deferring to someone else to review/test this however.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1040,2018-04-09T04:35:32Z,2018-05-29T01:16:10Z,2018-06-08T22:47:39Z,MERGED,True,356,36,9,https://github.com/ratzlaff,"Get 'compileas' working when using a 'filter ""files: ...""' scope.",1,[],https://github.com/premake/premake-core/pull/1040,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1040#issuecomment-380046045,"Extends compileas to be used in file filters
  project ""main""
      language ""C++""

      files  { ""src/file.c"" }
      filter { ""files:src/file.c"" }
          compileas ""C++""","To be honest, everything except for the gmake changes LGTM. I don't understand enough about the gmake generator to know if something will break - I'll mark this as approved, but hopefully @starkos or @TurkeyMan can chime in on the gmake changes. (For what it's worth, the gmake2 changes make sense!)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1040,2018-04-09T04:35:32Z,2018-05-29T01:16:10Z,2018-06-08T22:47:39Z,MERGED,True,356,36,9,https://github.com/ratzlaff,"Get 'compileas' working when using a 'filter ""files: ...""' scope.",1,[],https://github.com/premake/premake-core/pull/1040,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1040#issuecomment-392597821,"Extends compileas to be used in file filters
  project ""main""
      language ""C++""

      files  { ""src/file.c"" }
      filter { ""files:src/file.c"" }
          compileas ""C++""","Everyone seems to be ok with this and I have nothing to say either.
Once you rebase on master, I (or someone else) will merge.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1040,2018-04-09T04:35:32Z,2018-05-29T01:16:10Z,2018-06-08T22:47:39Z,MERGED,True,356,36,9,https://github.com/ratzlaff,"Get 'compileas' working when using a 'filter ""files: ...""' scope.",1,[],https://github.com/premake/premake-core/pull/1040,https://github.com/ratzlaff,5,https://github.com/premake/premake-core/pull/1040#issuecomment-392611957,"Extends compileas to be used in file filters
  project ""main""
      language ""C++""

      files  { ""src/file.c"" }
      filter { ""files:src/file.c"" }
          compileas ""C++""",@tdesveauxPKFX rebased as requested!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1041,2018-04-09T12:03:58Z,2018-04-10T09:48:59Z,2018-04-10T09:59:12Z,MERGED,True,44,16,3,https://github.com/samsinsane,Fleshed out CI builds,1,[],https://github.com/premake/premake-core/pull/1041,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1041,Extended Bootstrap.mak to allow users to specify platform and configuration,Extended Bootstrap.mak to allow users to specify platform and configuration,True,{}
premake/premake-core,https://github.com/premake/premake-core,1042,2018-04-09T15:12:41Z,2018-04-10T23:43:51Z,2018-04-12T17:32:55Z,MERGED,True,172,1,11,https://github.com/tdesveauxPKFX,Add UnsignedChar API,7,[],https://github.com/premake/premake-core/pull/1042,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1042,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1042,2018-04-09T15:12:41Z,2018-04-10T23:43:51Z,2018-04-12T17:32:55Z,MERGED,True,172,1,11,https://github.com/tdesveauxPKFX,Add UnsignedChar API,7,[],https://github.com/premake/premake-core/pull/1042,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1042#issuecomment-380037697,,"Could Clang, MSC, VS, XCode and CodeLite support this too?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1042,2018-04-09T15:12:41Z,2018-04-10T23:43:51Z,2018-04-12T17:32:55Z,MERGED,True,172,1,11,https://github.com/tdesveauxPKFX,Add UnsignedChar API,7,[],https://github.com/premake/premake-core/pull/1042,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1042#issuecomment-380041286,,"I thought clang used shared flags from gcc but while it does it's not as I though so yeah I will implement it.
I will have to look for the others.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1042,2018-04-09T15:12:41Z,2018-04-10T23:43:51Z,2018-04-12T17:32:55Z,MERGED,True,172,1,11,https://github.com/tdesveauxPKFX,Add UnsignedChar API,7,[],https://github.com/premake/premake-core/pull/1042,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1042#issuecomment-380044582,,"@tdesveauxPKFX yeah it's a tricky one, some things aren't supported on Clang. Best example is floatingpoint ""Strict"", but floatingpoint ""Fast"" is, which was super annoying when we didn't have a Default option for it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1042,2018-04-09T15:12:41Z,2018-04-10T23:43:51Z,2018-04-12T17:32:55Z,MERGED,True,172,1,11,https://github.com/tdesveauxPKFX,Add UnsignedChar API,7,[],https://github.com/premake/premake-core/pull/1042,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1042#issuecomment-380281560,,Amazing stuff! Thanks for adding in support for all of the other actions and toolsets!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1043,2018-04-09T15:13:17Z,2018-04-17T10:19:37Z,2018-04-17T11:50:53Z,MERGED,True,191,21,11,https://github.com/tdesveauxPKFX,Add omitframepointer API,12,[],https://github.com/premake/premake-core/pull/1043,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1043,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1043,2018-04-09T15:13:17Z,2018-04-17T10:19:37Z,2018-04-17T11:50:53Z,MERGED,True,191,21,11,https://github.com/tdesveauxPKFX,Add omitframepointer API,12,[],https://github.com/premake/premake-core/pull/1043,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1043#issuecomment-380890866,,"I added a test for ""Default"" and will open an issue to discuss what to do for un-setting values.
I think this can be merged for now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1043,2018-04-09T15:13:17Z,2018-04-17T10:19:37Z,2018-04-17T11:50:53Z,MERGED,True,191,21,11,https://github.com/tdesveauxPKFX,Add omitframepointer API,12,[],https://github.com/premake/premake-core/pull/1043,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1043#issuecomment-381418396,,"I replaced the references to NoFramePointer flag with the new API. I think that's all to do here.
I will wait for this to be merged before resolving the conflicts on my other PRs as it would result with more of the same conflicts.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1043,2018-04-09T15:13:17Z,2018-04-17T10:19:37Z,2018-04-17T11:50:53Z,MERGED,True,191,21,11,https://github.com/tdesveauxPKFX,Add omitframepointer API,12,[],https://github.com/premake/premake-core/pull/1043,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1043#issuecomment-381755173,,The linux fail doesn't seem to be from this PR and I can't reproduce it on my linux. Any idea?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1044,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1044#issuecomment-380190547,,"It seems that Clang copy all cxx flags from gcc here.
I also added the other possible values from what running gcc -fvisibility=x displayed.
And I'm wondering about removing -fvisibility-inlines-hidden from this. It could be misleading in the present state.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1044#issuecomment-380277306,,"Thanks for making those changes! I did some basic reading of what -fvisibility-inlines-hidden does, does it add anything to -fvisibility=hidden? It didn't look like it, but I just skimmed the GCC wiki. I'm happy for this to get merged in, but I'll leave it for someone else to review and add their opinion on -fvisibility-inlines-hidden. Thanks again!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1044#issuecomment-380362611,,"From what I read, it seems indeed that visibility-inlines-hidden can be useful on it's own only.
I will setup an other API for it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1044#issuecomment-380376727,,Sounds good!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tdesveauxPKFX,6,https://github.com/premake/premake-core/pull/1044#issuecomment-380889374,,Inlines visibility moved to another PR (#1049),True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tdesveauxPKFX,7,https://github.com/premake/premake-core/pull/1044#issuecomment-380928885,,"@tvandijck why did you close this?
Although I move inlines visibility to another PR, the visibility API is still useful.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/1044#issuecomment-380967777,,I'm going to assume this was an accident.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tvandijck,9,https://github.com/premake/premake-core/pull/1044#issuecomment-381130157,,"No, not an accident, just confused..  It said ""Inlines visibility moved to another PR (#1049)"", so I assumed this one was no longer needed...
At the very least the PR should be renamed to describe what it is now doing though, considering it no longer ""Adds VisibilityHidden to flags""...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1044,2018-04-09T15:15:17Z,2018-04-17T16:44:37Z,2018-04-17T18:15:03Z,MERGED,True,50,1,3,https://github.com/tdesveauxPKFX,Add Visibility API for gcc/clang toolsets,7,[],https://github.com/premake/premake-core/pull/1044,https://github.com/tdesveauxPKFX,10,https://github.com/premake/premake-core/pull/1044#issuecomment-381133675,,"Indeed, I should have updated the title with the changes I made. My bad.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1045,2018-04-09T15:21:17Z,2018-04-11T08:48:04Z,2018-04-12T17:32:35Z,MERGED,True,41,1,3,https://github.com/tdesveauxPKFX,Add debuggerflavor API,3,[],https://github.com/premake/premake-core/pull/1045,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1045,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1046,2018-04-09T15:32:13Z,2018-04-12T18:45:55Z,2018-04-15T16:22:21Z,MERGED,True,45,0,3,https://github.com/tdesveauxPKFX,Add structmemberalign API,4,[],https://github.com/premake/premake-core/pull/1046,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1046,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1046,2018-04-09T15:32:13Z,2018-04-12T18:45:55Z,2018-04-15T16:22:21Z,MERGED,True,45,0,3,https://github.com/tdesveauxPKFX,Add structmemberalign API,4,[],https://github.com/premake/premake-core/pull/1046,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1046#issuecomment-380420795,,"Hey @tdesveauxPKFX‚Äîat your convenience, can you contact me (starkos@industriousone.com or @starkos on Twitter)? Thanks!",True,"{'HOORAY': ['https://github.com/samsinsane'], 'THUMBS_UP': ['https://github.com/samsinsane'], 'LAUGH': ['https://github.com/samsinsane'], 'HEART': ['https://github.com/samsinsane']}"
premake/premake-core,https://github.com/premake/premake-core,1046,2018-04-09T15:32:13Z,2018-04-12T18:45:55Z,2018-04-15T16:22:21Z,MERGED,True,45,0,3,https://github.com/tdesveauxPKFX,Add structmemberalign API,4,[],https://github.com/premake/premake-core/pull/1046,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1046#issuecomment-381418769,,@starkos  just checking you received my mail last week as I did not heard back from you.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/redorav,1,https://github.com/premake/premake-core/pull/1048,The UI can't do this but setting it manually actually works. Fixes #936,The UI can't do this but setting it manually actually works. Fixes #936,True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/redorav,2,https://github.com/premake/premake-core/pull/1048#issuecomment-380410792,The UI can't do this but setting it manually actually works. Fixes #936,"Sure, I'm all for having a discussion about it. To me it doesn't sound so much ""unsupported"" as ""not exposed"" in the sense that there seem to be many things the .vcxproj can do that aren't in the UI. I totally see your point that there's a kind of risk in exposing these kinds of things, but my feeling is it looks more like a limitation of the UI than a limitation of the xml system they have in place. Perhaps it would be worthwhile to see what cmake does or try to find some better documentation coming from MS.
Regarding the changes, I'll make it more flexible so it can go in Globals or Config depending on settings.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/redorav,3,https://github.com/premake/premake-core/pull/1048#issuecomment-380582442,The UI can't do this but setting it manually actually works. Fixes #936,"Thanks for the feedback @starkos and @samsinsane , I'm currently investigating how to expand the Globals section to include conditionals as needed. The interesting thing about these modifications is that they are actually tweakable via the UI provided the platform/configuration condition was present there to begin with, so it's not like we're taking anything away from the user.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/redorav,4,https://github.com/premake/premake-core/pull/1048#issuecomment-380930022,The UI can't do this but setting it manually actually works. Fixes #936,"I've moved systemversion back to Globals, and also create conditional global entries in the vcxproj. One thing I've not found a straightforward way of doing is to not create the property groups if no entries are going to be populated, i.e. the general case ends up as:
<PropertyGroup Label=""Globals"">
	<ProjectGuid>{42B5DBC6-AE1F-903D-F75D-41E363076E92}</ProjectGuid>
	<IgnoreWarnCompileDuplicatedFilename>true</IgnoreWarnCompileDuplicatedFilename>
	<Keyword>Win32Proj</Keyword>
	<RootNamespace>MyProject</RootNamespace>
</PropertyGroup>
<PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Debug|Win32'"" Label=""Globals"">
</PropertyGroup>
<PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Release|Win32'"" Label=""Globals"">
</PropertyGroup>
I think the assumption is that there's always something that's going to populate it. Any suggestions? I've added an example test, but I mean to expand it once we agree on a final implementation.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1048#issuecomment-380942234,The UI can't do this but setting it manually actually works. Fixes #936,"One thing I've not found a straightforward way of doing is to not create the property groups if no entries are going to be populated

If you search the source for ""io.capture"" you can find some places where we do that. You run the code and capture the output, and then check to see if the output is empty before writing it out. Let me know you need help with it and I'll throw together a proper example.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/redorav,6,https://github.com/premake/premake-core/pull/1048#issuecomment-380976428,The UI can't do this but setting it manually actually works. Fixes #936,I think I managed to do it via premake.capture() which I guess was renamed at some point from io.capture. This opens up the avenue for the Android bug #1038 so we can set it conditionally.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/redorav,7,https://github.com/premake/premake-core/pull/1048#issuecomment-381345927,The UI can't do this but setting it manually actually works. Fixes #936,"As soon as you're happy with the changes I've also fixed #1038 locally which relies on this PR to work, since this one allows setting conditions on globals and the other fix extends the function via premake.override.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1048,2018-04-10T19:40:29Z,2018-04-17T10:00:42Z,2018-04-17T23:36:34Z,MERGED,True,107,10,4,https://github.com/redorav,"Add conditional behavior to global variables, add systemversion as first implementation",8,[],https://github.com/premake/premake-core/pull/1048,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/1048#issuecomment-381704742,The UI can't do this but setting it manually actually works. Fixes #936,"@samsinsane, are you okay with this one? If so, feel free to merge.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1049,2018-04-12T17:46:34Z,2018-05-07T08:19:28Z,2018-06-01T20:07:13Z,MERGED,True,31,0,3,https://github.com/tdesveauxPKFX,Add InlinesVisibility API,1,[],https://github.com/premake/premake-core/pull/1049,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1049,"As said in #1044, inlines visibility should have it's own API.","As said in #1044, inlines visibility should have it's own API.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1049,2018-04-12T17:46:34Z,2018-05-07T08:19:28Z,2018-06-01T20:07:13Z,MERGED,True,31,0,3,https://github.com/tdesveauxPKFX,Add InlinesVisibility API,1,[],https://github.com/premake/premake-core/pull/1049,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1049#issuecomment-382086343,"As said in #1044, inlines visibility should have it's own API.","Why does this need its own API? Why can't this be expressed with visibility?
It feels very unlikely that you would ever supply -fvisibility-inlines-hidden without also supplying -fvisibility=hidden.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1049,2018-04-12T17:46:34Z,2018-05-07T08:19:28Z,2018-06-01T20:07:13Z,MERGED,True,31,0,3,https://github.com/tdesveauxPKFX,Add InlinesVisibility API,1,[],https://github.com/premake/premake-core/pull/1049,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1049#issuecomment-382093549,"As said in #1044, inlines visibility should have it's own API.","We looked into it when I submitted #1044 and it seems -fvisibility=hidden ""includes"" the behavior of -fvisibility-inlines-hidden as far as I know. If you know more about it, I'd be interested.
Otherwise, I opted for a new API as you may want to set -fvisibility-inlines-hidden and let's say -fvisibility=internal.
From gcc documentation

Lastly, there's one other new command line switch: -fvisibility-inlines-hidden. This causes all inlined class member functions to have hidden visibility, causing significant export symbol table size & binary size reductions though not as much as using -fvisibility=hidden. However, -fvisibility-inlines-hidden can be used with no source alterations, unless you need to override it for inlines where address identity is important either for the function itself or any function local static data.

Again, this is not an option I'm that much knowledgeable about so if you have further information about it, I am open to improve this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1049,2018-04-12T17:46:34Z,2018-05-07T08:19:28Z,2018-06-01T20:07:13Z,MERGED,True,31,0,3,https://github.com/tdesveauxPKFX,Add InlinesVisibility API,1,[],https://github.com/premake/premake-core/pull/1049,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/1049#issuecomment-384401240,"As said in #1044, inlines visibility should have it's own API.","@TurkeyMan do you still have objections? otherwise go ahead and merge this one, LGTM.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1053,2018-04-15T12:40:41Z,2018-04-16T16:21:50Z,2018-04-17T09:58:45Z,MERGED,True,0,4,2,https://github.com/samsinsane,"Fixed issue with floatingpoint ""Strict"" causing errors in XCode",1,[],https://github.com/premake/premake-core/pull/1053,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1053,Resolves #1035,Resolves #1035,True,{}
premake/premake-core,https://github.com/premake/premake-core,1054,2018-04-16T12:59:36Z,2019-10-14T14:47:41Z,2019-10-14T14:47:42Z,CLOSED,False,51,6,3,https://github.com/robinwatts,Fixes for various VS2005,5,[],https://github.com/premake/premake-core/pull/1054,https://github.com/robinwatts,1,https://github.com/premake/premake-core/pull/1054,"We are wanting to adopt premake5 within the mupdf project, but we've hit some problems with the VS2005 generation.
I have fixes (well, workarounds at least) implemented in the referenced commits. If the fixes can't be taken as-is, hopefully they'll a) illustrate the issues, and b) allow someone to point the way to fixing them properly.
The problems that this works around:


Normal generation of VS2005 C projects includes a 'ProgramDataBaseFileName=""""' entry. This has the effect of confusing VS2005 into thinking that everything is always out of date. Any builds of the solution do a complete rebuild. Simply omitting this line solves it.


The standard debug information format these days (certainly for us) is to use /Zi, not /Z7. Also (if I'm reading the lua right), it is output at one point using the index within the list. Accordingly, I've introduced an empty 'Off' value.


DebugInformationFormat appears to always be being set to 0 (because toolset is never non-NULL in any of the cases in which I've hit the code that outputs it. This is the wrong value, so I've just disabled the code.


Finally, the approach taken by the code appears to be to just bung the flags for the different options in an ""AdditionalOptions"" entry.


The solution doesn't parse these flags, just passes them on, after setting the flags that it thinks should be used.
So, for instance, if you output a project that is to be a debug project, with the ""/Od"" option in the AdditionalOptions field, and load that into VS, the properties window will show the Optimisation field as being the default (which IIRC is ""/Ot""). When built, both flags are passed to the compiler. The right one is used, but a warning is given. It's also very confusing for people to not see their options reflected in the project settings.
Accordingly, I've added code that spots the flags in the AdditionalOptions field, removes them and outputs the proper flags as appropriate.
It is quite possible that there is a neater solution to all of this, but I am not a lua speaker, so this is the best I could come up with on short notice.","We are wanting to adopt premake5 within the mupdf project, but we've hit some problems with the VS2005 generation.
I have fixes (well, workarounds at least) implemented in the referenced commits. If the fixes can't be taken as-is, hopefully they'll a) illustrate the issues, and b) allow someone to point the way to fixing them properly.
The problems that this works around:


Normal generation of VS2005 C projects includes a 'ProgramDataBaseFileName=""""' entry. This has the effect of confusing VS2005 into thinking that everything is always out of date. Any builds of the solution do a complete rebuild. Simply omitting this line solves it.


The standard debug information format these days (certainly for us) is to use /Zi, not /Z7. Also (if I'm reading the lua right), it is output at one point using the index within the list. Accordingly, I've introduced an empty 'Off' value.


DebugInformationFormat appears to always be being set to 0 (because toolset is never non-NULL in any of the cases in which I've hit the code that outputs it. This is the wrong value, so I've just disabled the code.


Finally, the approach taken by the code appears to be to just bung the flags for the different options in an ""AdditionalOptions"" entry.


The solution doesn't parse these flags, just passes them on, after setting the flags that it thinks should be used.
So, for instance, if you output a project that is to be a debug project, with the ""/Od"" option in the AdditionalOptions field, and load that into VS, the properties window will show the Optimisation field as being the default (which IIRC is ""/Ot""). When built, both flags are passed to the compiler. The right one is used, but a warning is given. It's also very confusing for people to not see their options reflected in the project settings.
Accordingly, I've added code that spots the flags in the AdditionalOptions field, removes them and outputs the proper flags as appropriate.
It is quite possible that there is a neater solution to all of this, but I am not a lua speaker, so this is the best I could come up with on short notice.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1054,2018-04-16T12:59:36Z,2019-10-14T14:47:41Z,2019-10-14T14:47:42Z,CLOSED,False,51,6,3,https://github.com/robinwatts,Fixes for various VS2005,5,[],https://github.com/premake/premake-core/pull/1054,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1054#issuecomment-381594878,"We are wanting to adopt premake5 within the mupdf project, but we've hit some problems with the VS2005 generation.
I have fixes (well, workarounds at least) implemented in the referenced commits. If the fixes can't be taken as-is, hopefully they'll a) illustrate the issues, and b) allow someone to point the way to fixing them properly.
The problems that this works around:


Normal generation of VS2005 C projects includes a 'ProgramDataBaseFileName=""""' entry. This has the effect of confusing VS2005 into thinking that everything is always out of date. Any builds of the solution do a complete rebuild. Simply omitting this line solves it.


The standard debug information format these days (certainly for us) is to use /Zi, not /Z7. Also (if I'm reading the lua right), it is output at one point using the index within the list. Accordingly, I've introduced an empty 'Off' value.


DebugInformationFormat appears to always be being set to 0 (because toolset is never non-NULL in any of the cases in which I've hit the code that outputs it. This is the wrong value, so I've just disabled the code.


Finally, the approach taken by the code appears to be to just bung the flags for the different options in an ""AdditionalOptions"" entry.


The solution doesn't parse these flags, just passes them on, after setting the flags that it thinks should be used.
So, for instance, if you output a project that is to be a debug project, with the ""/Od"" option in the AdditionalOptions field, and load that into VS, the properties window will show the Optimisation field as being the default (which IIRC is ""/Ot""). When built, both flags are passed to the compiler. The right one is used, but a warning is given. It's also very confusing for people to not see their options reflected in the project settings.
Accordingly, I've added code that spots the flags in the AdditionalOptions field, removes them and outputs the proper flags as appropriate.
It is quite possible that there is a neater solution to all of this, but I am not a lua speaker, so this is the best I could come up with on short notice.","You should check out #1051, I've got a little hack in there to resolve the toolset related issues. It's not the best solution, but there's a lot of code that makes the assumption that the toolset isn't set and this is a pretty quick way to get it back into that state.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1054,2018-04-16T12:59:36Z,2019-10-14T14:47:41Z,2019-10-14T14:47:42Z,CLOSED,False,51,6,3,https://github.com/robinwatts,Fixes for various VS2005,5,[],https://github.com/premake/premake-core/pull/1054,https://github.com/robinwatts,3,https://github.com/premake/premake-core/pull/1054#issuecomment-381613486,"We are wanting to adopt premake5 within the mupdf project, but we've hit some problems with the VS2005 generation.
I have fixes (well, workarounds at least) implemented in the referenced commits. If the fixes can't be taken as-is, hopefully they'll a) illustrate the issues, and b) allow someone to point the way to fixing them properly.
The problems that this works around:


Normal generation of VS2005 C projects includes a 'ProgramDataBaseFileName=""""' entry. This has the effect of confusing VS2005 into thinking that everything is always out of date. Any builds of the solution do a complete rebuild. Simply omitting this line solves it.


The standard debug information format these days (certainly for us) is to use /Zi, not /Z7. Also (if I'm reading the lua right), it is output at one point using the index within the list. Accordingly, I've introduced an empty 'Off' value.


DebugInformationFormat appears to always be being set to 0 (because toolset is never non-NULL in any of the cases in which I've hit the code that outputs it. This is the wrong value, so I've just disabled the code.


Finally, the approach taken by the code appears to be to just bung the flags for the different options in an ""AdditionalOptions"" entry.


The solution doesn't parse these flags, just passes them on, after setting the flags that it thinks should be used.
So, for instance, if you output a project that is to be a debug project, with the ""/Od"" option in the AdditionalOptions field, and load that into VS, the properties window will show the Optimisation field as being the default (which IIRC is ""/Ot""). When built, both flags are passed to the compiler. The right one is used, but a warning is given. It's also very confusing for people to not see their options reflected in the project settings.
Accordingly, I've added code that spots the flags in the AdditionalOptions field, removes them and outputs the proper flags as appropriate.
It is quite possible that there is a neater solution to all of this, but I am not a lua speaker, so this is the best I could come up with on short notice.","And in the latest commit


a fix for a quoting issue with predefinitions.
We have a project file that needs to set a symbol to include quoted
strings. For instance:
defines {
  'FT_CONFIG_OPTIONS_H=""slimftoptions.h""'
}

The source .c file then does:
#include FT_CONFIG_OPTIONS_H

With the definition like this, gnu make can accept the generated
files and does the wrong thing. VS project files have the quotes
appear in them as "" but these disappear on being passed to
the actual compiler.
Having modified premake5 to output \quot; we get exactly the
results we need.
An alternative workaround we tried was to use:
defines {
  'FT_CONFIG_OPTIONS_H=\\""slimftoptions.h\\""'
}

which produced working VS2005 files, but broken gnu make files.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1054,2018-04-16T12:59:36Z,2019-10-14T14:47:41Z,2019-10-14T14:47:42Z,CLOSED,False,51,6,3,https://github.com/robinwatts,Fixes for various VS2005,5,[],https://github.com/premake/premake-core/pull/1054,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1054#issuecomment-541723289,"We are wanting to adopt premake5 within the mupdf project, but we've hit some problems with the VS2005 generation.
I have fixes (well, workarounds at least) implemented in the referenced commits. If the fixes can't be taken as-is, hopefully they'll a) illustrate the issues, and b) allow someone to point the way to fixing them properly.
The problems that this works around:


Normal generation of VS2005 C projects includes a 'ProgramDataBaseFileName=""""' entry. This has the effect of confusing VS2005 into thinking that everything is always out of date. Any builds of the solution do a complete rebuild. Simply omitting this line solves it.


The standard debug information format these days (certainly for us) is to use /Zi, not /Z7. Also (if I'm reading the lua right), it is output at one point using the index within the list. Accordingly, I've introduced an empty 'Off' value.


DebugInformationFormat appears to always be being set to 0 (because toolset is never non-NULL in any of the cases in which I've hit the code that outputs it. This is the wrong value, so I've just disabled the code.


Finally, the approach taken by the code appears to be to just bung the flags for the different options in an ""AdditionalOptions"" entry.


The solution doesn't parse these flags, just passes them on, after setting the flags that it thinks should be used.
So, for instance, if you output a project that is to be a debug project, with the ""/Od"" option in the AdditionalOptions field, and load that into VS, the properties window will show the Optimisation field as being the default (which IIRC is ""/Ot""). When built, both flags are passed to the compiler. The right one is used, but a warning is given. It's also very confusing for people to not see their options reflected in the project settings.
Accordingly, I've added code that spots the flags in the AdditionalOptions field, removes them and outputs the proper flags as appropriate.
It is quite possible that there is a neater solution to all of this, but I am not a lua speaker, so this is the best I could come up with on short notice.","This one hasn't moved in a long time, I'm going to go ahead and close it. If someone wants to take it on:

It's always better to break multiple fixes out into multiple PRs
It needs unit tests to show that it is doing what it says
The tablefindandremove-related logic should be reworked to use a config.mapFlags() approach similar to the VS201x actions",True,{}
premake/premake-core,https://github.com/premake/premake-core,1062,2018-04-17T23:56:51Z,2018-05-07T20:56:30Z,2018-05-08T09:27:57Z,MERGED,True,12,0,1,https://github.com/redorav,"Allow system(""android"") per configuration",1,[],https://github.com/premake/premake-core/pull/1062,https://github.com/redorav,1,https://github.com/premake/premake-core/pull/1062,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1062,2018-04-17T23:56:51Z,2018-05-07T20:56:30Z,2018-05-08T09:27:57Z,MERGED,True,12,0,1,https://github.com/redorav,"Allow system(""android"") per configuration",1,[],https://github.com/premake/premake-core/pull/1062,https://github.com/redorav,2,https://github.com/premake/premake-core/pull/1062#issuecomment-386801868,,"Are there any objections to this, am I missing anything? I'm hesitant to press the ""Update branch"" button since @TurkeyMan has complained about how it pollutes the history. When I did this PR it wasn't behind master but now it's many commits behind. Does one need to rebase and resubmit PR every time it goes out of sync with master?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1062,2018-04-17T23:56:51Z,2018-05-07T20:56:30Z,2018-05-08T09:27:57Z,MERGED,True,12,0,1,https://github.com/redorav,"Allow system(""android"") per configuration",1,[],https://github.com/premake/premake-core/pull/1062,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1062#issuecomment-387203785,,"Yeah, I'm not sure what the right process is anymore. That ""Update branch"" button is the spawn of satan... but to avoid it, you need admin privileges!
I can't believe Github thought this was okay :/
I hope Github are aware they're idiots, and making options to configure this flow for projects.",True,{'THUMBS_UP': ['https://github.com/redorav']}
premake/premake-core,https://github.com/premake/premake-core,1062,2018-04-17T23:56:51Z,2018-05-07T20:56:30Z,2018-05-08T09:27:57Z,MERGED,True,12,0,1,https://github.com/redorav,"Allow system(""android"") per configuration",1,[],https://github.com/premake/premake-core/pull/1062,https://github.com/pdoane,4,https://github.com/premake/premake-core/pull/1062#issuecomment-387213043,,"Yeah, I'm not sure what the right process is anymore. That ""Update branch"" button is the spawn of satan... but to avoid it, you need admin privileges!

It's a part of the branch protection settings so it can be controlled per-branch/per-repository as to whether code needs to be up to date.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1063,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.","Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1063#issuecomment-384398884,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.","I'm still not sure I'm into this... it feels like we've confused 2 concepts now. Busy ATM, let me get back to this...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1063#issuecomment-384565861,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.","Yeah, I was too quick in making this. I'm pretty busy as well but should be able to look into it this week end.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1063#issuecomment-394188483,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.","I somewhat forgot about this.
Just updated the branch and the only notable change was to rename Local to VisualStudioLocal (same for the others).
I think this PR can be merged. If there is further concerns about how to handle DebuggerFlavor for Visual Studio, there should be another issue/PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1063#issuecomment-394413365,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.","I defer to @TurkeyMan, who had some concerns about the previous versions. Will add as a reviewer.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1063#issuecomment-411982648,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.",@TurkeyMan Do you have any objections to merging this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1063,2018-04-18T17:29:55Z,2019-10-21T15:57:22Z,2019-10-21T15:57:22Z,CLOSED,False,40,22,3,https://github.com/tdesveauxPKFX,Replace debuggerflavor with debugger,1,[],https://github.com/premake/premake-core/pull/1063,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1063#issuecomment-544581606,"Ref: #1060
Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.","Closing this one in favor of #1357, which deprecates rather than removes debuggerflavor().",True,{}
premake/premake-core,https://github.com/premake/premake-core,1064,2018-04-21T09:18:08Z,2018-04-21T10:00:27Z,2018-04-21T10:00:30Z,MERGED,True,2,2,2,https://github.com/tvandijck,Tiny gcc fix from PR #506.,1,[],https://github.com/premake/premake-core/pull/1064,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/1064,"This seemed a somewhat isolated gcc fix from PR #506, worth pulling over.","This seemed a somewhat isolated gcc fix from PR #506, worth pulling over.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1065,2018-04-21T10:18:14Z,2018-04-22T13:58:18Z,2018-04-22T13:58:22Z,MERGED,True,5,4,4,https://github.com/tvandijck,Fixes a few luasocket compile warnings.,1,[],https://github.com/premake/premake-core/pull/1065,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/1065,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1066,2018-04-21T10:22:15Z,2018-04-22T13:57:53Z,2018-04-22T13:57:57Z,MERGED,True,7,7,4,https://github.com/tvandijck,fix a few compiler warnings.,1,[],https://github.com/premake/premake-core/pull/1066,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/1066,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1067,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/1067#issuecomment-384394042,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","I was not familiar with the debug formats that gcc handles, which is the only reason I did not put them in _premake_init.lua. I thought this would be better encapsulation for the module-specific parameters.
After looking over the debug options for gcc though, it makes sense to emit -gdwarf  when present. I'll update my PR when I can later.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1067#issuecomment-384688232,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","Xcode uses Clang under the hood, so Clang must support them at least?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,4,https://github.com/premake/premake-core/pull/1067#issuecomment-384868871,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)",rebased onto master,True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1067#issuecomment-385060196,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","Another option is to make ""dwarf-with-dsym"" an alias of ""split-dwarf"", or vice versa.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,6,https://github.com/premake/premake-core/pull/1067#issuecomment-385062332,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)",@starkos I just squashed some commits just now to do that. Updating my copy of the documentation now...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/TurkeyMan,7,https://github.com/premake/premake-core/pull/1067#issuecomment-386776670,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","I feel like there probably needs to be a Default value allowed here too, and all the allowed values have a weird lower-case convention. This is unlike any other API in premake, especially with the - separator, which may cause inconveniences with lua syntax when indexing explicitly.
I think there should probably be Default, C7, Dwarf, SplitDwarf, and map them to proper values in the function (ignoring C7 for GCC)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,8,https://github.com/premake/premake-core/pull/1067#issuecomment-386962114,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","Added 'Default', changed capitalization of values, added more tests for 'Default'.
Did not change c7 to C7 - should be a separate PR to properly deprecate the flag.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/TurkeyMan,9,https://github.com/premake/premake-core/pull/1067#issuecomment-387202995,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","Sorry to push back on this again, but symbols is such a fundamental API ;)
I recognise that the code was already stale (only On was present in the code before you modified it), but this is a good opportunity to de-stale it ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,10,https://github.com/premake/premake-core/pull/1067#issuecomment-387579875,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)",@TurkeyMan Next iteration ready to go!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/samsinsane,11,https://github.com/premake/premake-core/pull/1067#issuecomment-411982356,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)",@TurkeyMan are you happy with the latest changes?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/tdesveauxPKFX,12,https://github.com/premake/premake-core/pull/1067#issuecomment-437988161,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","I think all concerns @TurkeyMan had were addressed and this was not updated in a while.
I think this is a nice addition and looking through the changes feels fine with merging.
Should we override the pending requested changes?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/samsinsane,13,https://github.com/premake/premake-core/pull/1067#issuecomment-438172106,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","@tdesveauxPKFX I'm happy for this to go in, I think we've let this PR stagnate for long enough. If there's problems, we can just address them as they pop up.",True,"{'THUMBS_UP': ['https://github.com/tdesveauxPKFX', 'https://github.com/ratzlaff']}"
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/samsinsane,14,https://github.com/premake/premake-core/pull/1067#issuecomment-453357755,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)","I'm just going to merge this now, thanks for fixing it up multiple times! Sorry it's taken so long to get this through.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1067,2018-04-25T05:54:33Z,2019-01-11T02:59:40Z,2019-01-11T14:31:53Z,MERGED,True,319,4,7,https://github.com/ratzlaff,"Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat'",2,[],https://github.com/premake/premake-core/pull/1067,https://github.com/ratzlaff,15,https://github.com/premake/premake-core/pull/1067#issuecomment-453534897,"Adds 'Default', 'Dwarf' and 'SplitDwarf' options to 'debugformat' when using the xcode, gmake or gmake2 modules.
Wiki updates are at: https://github.com/ratzlaff/premake-core/wiki/debugformat
wiki repo URL: https://github.com/ratzlaff/premake-core.wiki.git (branch: xcode_debugformat)",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1068,2018-04-25T20:14:53Z,2018-04-26T11:51:09Z,2018-04-26T11:51:09Z,MERGED,True,5,2,1,https://github.com/lanurmi,Fix constructing executable path from argv[0],2,[],https://github.com/premake/premake-core/pull/1068,https://github.com/lanurmi,1,https://github.com/premake/premake-core/pull/1068,"The fallback code for constructing executable path from argv[0] does not work at all currently. (And possibly never worked?)
How to test:
Comment out e.g. the #if PLATFORM_LINUX block in premake_locate_executable in premake.c and witness the fallback code failing with the error:
PANIC: unprotected error in call to Lua API (attemt to call a string value)","The fallback code for constructing executable path from argv[0] does not work at all currently. (And possibly never worked?)
How to test:
Comment out e.g. the #if PLATFORM_LINUX block in premake_locate_executable in premake.c and witness the fallback code failing with the error:
PANIC: unprotected error in call to Lua API (attemt to call a string value)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1069,2018-04-26T06:43:32Z,2018-04-26T16:00:47Z,2018-04-26T16:00:47Z,MERGED,True,21,5,7,https://github.com/lanurmi,Support successfully bootstrapping on Solaris (OpenIndiana).,1,[],https://github.com/premake/premake-core/pull/1069,https://github.com/lanurmi,1,https://github.com/premake/premake-core/pull/1069,"Some support already existed, but not enough. Also the ""linkoptions"" provided was incompatible with the Solaris ld.","Some support already existed, but not enough. Also the ""linkoptions"" provided was incompatible with the Solaris ld.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1069,2018-04-26T06:43:32Z,2018-04-26T16:00:47Z,2018-04-26T16:00:47Z,MERGED,True,21,5,7,https://github.com/lanurmi,Support successfully bootstrapping on Solaris (OpenIndiana).,1,[],https://github.com/premake/premake-core/pull/1069,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1069#issuecomment-384587923,"Some support already existed, but not enough. Also the ""linkoptions"" provided was incompatible with the Solaris ld.","Does this fix Solaris, or just OpenIndiana? I wouldn't want to approve a PR that breaks the official OS so that an open source derivative works instead. Are you able to provide any additional context to this for my peace of mind?
@starkos You appear to be the one who originally added Solaris support, but on behalf of someone else? Do you have access to a Solaris box?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1069,2018-04-26T06:43:32Z,2018-04-26T16:00:47Z,2018-04-26T16:00:47Z,MERGED,True,21,5,7,https://github.com/lanurmi,Support successfully bootstrapping on Solaris (OpenIndiana).,1,[],https://github.com/premake/premake-core/pull/1069,https://github.com/lanurmi,3,https://github.com/premake/premake-core/pull/1069#issuecomment-384598391,"Some support already existed, but not enough. Also the ""linkoptions"" provided was incompatible with the Solaris ld.","Does this fix Solaris, or just OpenIndiana?

I hope both, but I don't currently have access to a genuine Solaris to verify that.

I wouldn't want to approve a PR that breaks the official OS so that an open source derivative works instead. Are you able to provide any additional context to this for my peace of mind?

The two linkoptions lines were the only explicit reference to solaris within the bootstrap configuration, so I suspect that current master would not build on a genuine Solaris either. The rest of the configuration would treat Solaris as either Linux or BSD.
As for the linkoptions, this post suggests that --export-dynamic is a feature of GNU ld only. (GNU ld may be available on a Solaris system, but it is not the default ld.)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1069,2018-04-26T06:43:32Z,2018-04-26T16:00:47Z,2018-04-26T16:00:47Z,MERGED,True,21,5,7,https://github.com/lanurmi,Support successfully bootstrapping on Solaris (OpenIndiana).,1,[],https://github.com/premake/premake-core/pull/1069,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1069#issuecomment-384603551,"Some support already existed, but not enough. Also the ""linkoptions"" provided was incompatible with the Solaris ld.","@lanurmi True, sorry about that! I didn't go back over your changes again after reading up on Solaris and OpenIndiana, I should have since you haven't made any changes that look like they would cause issues.
I'll wait for Jason to respond to see if he's got access to a genuine Solaris machine, otherwise, we can probably just merge this. Thanks for changes!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1069,2018-04-26T06:43:32Z,2018-04-26T16:00:47Z,2018-04-26T16:00:47Z,MERGED,True,21,5,7,https://github.com/lanurmi,Support successfully bootstrapping on Solaris (OpenIndiana).,1,[],https://github.com/premake/premake-core/pull/1069,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1069#issuecomment-384691214,"Some support already existed, but not enough. Also the ""linkoptions"" provided was incompatible with the Solaris ld.","@starkos You appear to be the one who originally added Solaris support, but on behalf of someone else? Do you have access to a Solaris box?

Umm‚Ä¶wow, no. I haven't even seen a Solaris box this century, I'm pretty sure. The original Solaris support was contributed by someone else, back in the dark days before GitHub :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1070,2018-04-26T06:59:27Z,2018-04-26T14:12:53Z,2018-04-26T14:12:53Z,MERGED,True,2,2,2,https://github.com/lanurmi,Support successfully bootstrapping on OpenBSD.,1,[],https://github.com/premake/premake-core/pull/1070,https://github.com/lanurmi,1,https://github.com/premake/premake-core/pull/1070,"This PR depends on PR #1068, which should be applied first.","This PR depends on PR #1068, which should be applied first.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1070,2018-04-26T06:59:27Z,2018-04-26T14:12:53Z,2018-04-26T14:12:53Z,MERGED,True,2,2,2,https://github.com/lanurmi,Support successfully bootstrapping on OpenBSD.,1,[],https://github.com/premake/premake-core/pull/1070,https://github.com/lanurmi,2,https://github.com/premake/premake-core/pull/1070#issuecomment-384592135,"This PR depends on PR #1068, which should be applied first.","I tried compiling also on NetBSD, but encountered way more fundamental errors (such as compiler not supporting long long -- not sure if there's something badly wrong with my installation, or is it supposed to be like that). In any case, I haven't tested other BSD variants besides OpenBSD and FreeBSD, but of course supporting all of them would be preferable.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/manxorist,1,https://github.com/premake/premake-core/pull/1071,"This also adds support for 'cppdialect ""C++latest""'.","This also adds support for 'cppdialect ""C++latest""'.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/manxorist,2,https://github.com/premake/premake-core/pull/1071#issuecomment-384727599,"This also adds support for 'cppdialect ""C++latest""'.",This pull request is based on discussion in #1009.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/manxorist,3,https://github.com/premake/premake-core/pull/1071#issuecomment-384867529,"This also adds support for 'cppdialect ""C++latest""'.","I do not think mapping `C--latest' to anything would make sense for GCC or clang. They do not provide an option to explicitly select the latest C++ standard, thus selecting the actually latest supported C++ version for those would require actually detecting which compiler version we are dealing with (which is not necessarily known at the time premake runs).
The opposite would be possible though: Do not provide a C++latest option at all, and instead use the version for the upcoming/in-progress standard version (C++2a) and map it to stdcpplatest for VS2017.
I think having an explicit C++latest option makes sense in any case, though (just like a Default makes sense, which does already exist).
I do not have a strong opinion either way. I only need the explicit C++17 for VS2017 right now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1071#issuecomment-384876416,"This also adds support for 'cppdialect ""C++latest""'.","The more I think about this, the less I think we should have support for cppdialect ""C++Latest"" and instead we should have more information about the VS version to determine when C++17 and C++20 should be output as stdcpplatest and when they should be the explicit versions.
I'll leave this for others to comment on before merging.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/manxorist,5,https://github.com/premake/premake-core/pull/1071#issuecomment-384887839,"This also adds support for 'cppdialect ""C++latest""'.","Depending on how long Microsoft maintains VS2017, it might happen that the meaning of stdcpplatest actually changes from meaning C++2a/C++20 to meaning C++2b/C++23.
This actually happened already in an update to VS2017, changing from C++17 to C++2a and adding the explicit C++17 flag (happened in VS2017 15.3, see https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version ).
If a user wants to explicitly track the latest C++ version supported by Microsoft, they would have to change the premake configuration when a cppdialect ""C++latest"" is not available. Thus, I think it makes sense to add cppdialect ""C++latest"".
Adding explicit support for and knowledge about Visual Studio minor versions is somewhat out of scope for this issue, and I honestly do not want to see C++17 support be delayed again for this discussion.
Also note, that in the past this has not been done, as for VS2015, the option /std: only ever appeared in Update 3 at all (see link above), and premake does not make any effort to try to support other than the latest version of VS2015 (which makes sense, I think).
It might make sense to add sense to add an additional mapping of cppdialect ""C++2a"" to stdcpplatest for VS2017 though, in order to keep things consistent with how GCC and clang handle the C++ version, in case the user wants to support other toolsets in addition to VS.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/pdoane,6,https://github.com/premake/premake-core/pull/1071#issuecomment-384983288,"This also adds support for 'cppdialect ""C++latest""'.","There are two directions that can work here:

Use the specific Visual Studio version (e.g. 15.6) in the action.  VS2017 is no longer enough information to figure out how to map some options and only supporting the latest release isn't practical for how VS2017 is being developed.
Use options that directly map to Visual Studio usage (in this case C++latest).

More details of this were discussed on #1009.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/manxorist,7,https://github.com/premake/premake-core/pull/1071#issuecomment-384997516,"This also adds support for 'cppdialect ""C++latest""'.","Use the specific Visual Studio version (e.g. 15.6) in the action. VS2017 is no longer enough information to figure out how to map some options and only supporting the latest release isn't practical for how VS2017 is being developed.

It never was. As already mentioned, minor versions of Visual Studio did add features also in earlier versions.

Use options that directly map to Visual Studio usage (in this case C++latest).

Which is precisely what I have implemented in this pull request.

More details of this were discussed on #1009.

I just need C++17 support, and I will happily change the pull request to whatever minimal solution is desired. In #1009 it was requested to add ""C++latest"" (which I think totally makes sense to have), which I did.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/1071#issuecomment-385003968,"This also adds support for 'cppdialect ""C++latest""'.","Use the specific Visual Studio version (e.g. 15.6) in the action

My opinion, FWIW‚Ä¶I don't think we can try to track all the VS 2017 minor versions. If we start letting people specify which minor version they want, that implies that we can actual target that specific version. Which means we have to keep installs of those minor versions around to verify things, fix deltas with past versions‚Ä¶that's a can of worms that we just do not have the resources to maintain.
I think we should just try to match whatever the current version of VS'17 emits by default. If you want a specific dialect, you can then use the API to specify that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1071,2018-04-26T17:41:17Z,2018-04-30T15:35:03Z,2018-04-30T15:35:03Z,MERGED,True,47,0,3,https://github.com/manxorist,Add C++17 support for Visual Studio 2017.,1,[],https://github.com/premake/premake-core/pull/1071,https://github.com/pdoane,9,https://github.com/premake/premake-core/pull/1071#issuecomment-385426927,"This also adds support for 'cppdialect ""C++latest""'.",Is there anything left to go over here? We talked through this a bit on the previous PR and this is implementing the decision made there.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1072,2018-04-27T17:22:45Z,2018-04-30T15:32:41Z,2018-05-02T05:17:53Z,MERGED,True,6,3,2,https://github.com/ratzlaff,Add color to failing test output,3,[],https://github.com/premake/premake-core/pull/1072,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1072,"use fptus in the implementation of term.setTextColor to have better newline control
change the color of the test name when tests fail so that they are easier to visually parse","use fptus in the implementation of term.setTextColor to have better newline control
change the color of the test name when tests fail so that they are easier to visually parse",True,{}
premake/premake-core,https://github.com/premake/premake-core,1072,2018-04-27T17:22:45Z,2018-04-30T15:32:41Z,2018-05-02T05:17:53Z,MERGED,True,6,3,2,https://github.com/ratzlaff,Add color to failing test output,3,[],https://github.com/premake/premake-core/pull/1072,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/1072#issuecomment-385321154,"use fptus in the implementation of term.setTextColor to have better newline control
change the color of the test name when tests fail so that they are easier to visually parse","test failures are unrelated to this change.. sometimes the http server for the http tests is rate limiting us, and starts timing out.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1074,2018-04-30T13:58:19Z,2018-04-30T15:01:21Z,2018-04-30T15:09:28Z,MERGED,True,56,66,18,https://github.com/samsinsane,Fixed issues with duplicate tests,1,[],https://github.com/premake/premake-core/pull/1074,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1074,"Test suite will now fail when test names are reused
Fixed several unit tests that reused test names","Test suite will now fail when test names are reused
Fixed several unit tests that reused test names",True,{'HOORAY': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1074,2018-04-30T13:58:19Z,2018-04-30T15:01:21Z,2018-04-30T15:09:28Z,MERGED,True,56,66,18,https://github.com/samsinsane,Fixed issues with duplicate tests,1,[],https://github.com/premake/premake-core/pull/1074,https://github.com/tvandijck,2,https://github.com/premake/premake-core/pull/1074#issuecomment-385416564,"Test suite will now fail when test names are reused
Fixed several unit tests that reused test names",could this be the dreaded random fail with just next() in the log ?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1074,2018-04-30T13:58:19Z,2018-04-30T15:01:21Z,2018-04-30T15:09:28Z,MERGED,True,56,66,18,https://github.com/samsinsane,Fixed issues with duplicate tests,1,[],https://github.com/premake/premake-core/pull/1074,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1074#issuecomment-385423424,"Test suite will now fail when test names are reused
Fixed several unit tests that reused test names","could this be the dreaded random fail with just next() in the log ?

I've never seen this error before, I kind of doubt that it's related to this though. The duplicate tests just override the previous test, it's all in order so they always replace the same function. I would imagine that error is probably much more likely to be part of the alias fixes I made, there were 1-3 extra ""tests"" and 2 of them are set to nil. If, a big if here, for testName, testFunction in pairs(test.suite) do has an internal iterator, it's likely that the next() function fails because the table entry was removed when it was set to nil. No idea how the pairs function works, but that's my guess - that's assuming that either of my PRs resolves that next() issue.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1074,2018-04-30T13:58:19Z,2018-04-30T15:01:21Z,2018-04-30T15:09:28Z,MERGED,True,56,66,18,https://github.com/samsinsane,Fixed issues with duplicate tests,1,[],https://github.com/premake/premake-core/pull/1074,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/1074#issuecomment-385424672,"Test suite will now fail when test names are reused
Fixed several unit tests that reused test names","oh, yeah, that is a good point... you might be right about that indeed...
we've sporadically seen it on some of the xcode builds here on TravisCI... but it's extremely rare, so yeah it could totally be related to memory realloc on those added tests....
Either way, this, and that alias test thing, are pretty darn good catches...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1074,2018-04-30T13:58:19Z,2018-04-30T15:01:21Z,2018-04-30T15:09:28Z,MERGED,True,56,66,18,https://github.com/samsinsane,Fixed issues with duplicate tests,1,[],https://github.com/premake/premake-core/pull/1074,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1074#issuecomment-385428214,"Test suite will now fail when test names are reused
Fixed several unit tests that reused test names","Either way, this, and that alias test thing, are pretty darn good catches...

Yeah, I was trying to improve the output of the test runner and my numbers weren't lining up, so I sort of just stumbled across these two bugs. Potentially fixing that random fail sounds like a nice bonus! üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,1075,2018-04-30T14:17:47Z,2018-04-30T14:33:31Z,2018-04-30T14:34:46Z,MERGED,True,18,17,1,https://github.com/samsinsane,Fixed bug with alias tests that caused one to three extra tests to be run,1,[],https://github.com/premake/premake-core/pull/1075,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1075,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1076,2018-05-01T04:31:11Z,2018-05-04T02:03:47Z,2018-05-04T02:03:48Z,CLOSED,False,0,0,0,https://github.com/EmmeKappaErre,Add support for mixed C++/D project,0,[],https://github.com/premake/premake-core/pull/1076,https://github.com/EmmeKappaErre,1,https://github.com/premake/premake-core/pull/1076,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1076,2018-05-01T04:31:11Z,2018-05-04T02:03:47Z,2018-05-04T02:03:48Z,CLOSED,False,0,0,0,https://github.com/EmmeKappaErre,Add support for mixed C++/D project,0,[],https://github.com/premake/premake-core/pull/1076,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1076#issuecomment-385601790,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,"Personally, I think one of two things should happen here:

Squash all of these commits, rebase onto master, and then we review it and merge it.
Split this up into smaller logical PRs that can be easily digested. Ideally, each only containing a single commit, but if multiple commits are required, they should be logical ones.

I'd prefer the second option, there's just way too much happening in here for me. Also, there's no tests for all the new functionality, you'll need to add this with these smaller logical PRs.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1076,2018-05-01T04:31:11Z,2018-05-04T02:03:47Z,2018-05-04T02:03:48Z,CLOSED,False,0,0,0,https://github.com/EmmeKappaErre,Add support for mixed C++/D project,0,[],https://github.com/premake/premake-core/pull/1076,https://github.com/EmmeKappaErre,3,https://github.com/premake/premake-core/pull/1076#issuecomment-385834410,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,"Hi Samuel,
Thanks for your feedback. I will try to rearrange the change and make it easier to read.
I am not entirely sure how to do the tests, any recommendation on which other test I could use as a template?
Thanks,
Marco",True,{}
premake/premake-core,https://github.com/premake/premake-core,1076,2018-05-01T04:31:11Z,2018-05-04T02:03:47Z,2018-05-04T02:03:48Z,CLOSED,False,0,0,0,https://github.com/EmmeKappaErre,Add support for mixed C++/D project,0,[],https://github.com/premake/premake-core/pull/1076,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1076#issuecomment-385837347,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,"You could probably use this one as a bit of a template: 
  
    
      premake-core/modules/d/tests/test_visualstudio.lua
    
    
        Lines 58 to 64
      in
      2e7ca5f
    
  
  
    

        
          
           	function suite.OnProject_header() 
        

        
          
           		prepare() 
        

        
          
           		m.visuald.header(prj) 
        

        
          
           		test.capture [[ 
        

        
          
           <DProject> 
        

        
          
           		]] 
        

        
          
           	end 
        
    
  


Otherwise, check out either the vstudio or android module tests. The Android module is similar to the D module, they both extend Visual Studio and test their extensions, so it can be a good one to see how it's done in other modules.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1077,2018-05-02T12:52:53Z,2018-05-08T10:19:57Z,2018-05-08T10:19:57Z,MERGED,True,30,1,1,https://github.com/lanurmi,"Do not output colors e.g. into a pipe, unless forced.",2,[],https://github.com/premake/premake-core/pull/1077,https://github.com/lanurmi,1,https://github.com/premake/premake-core/pull/1077,Use the de-factoish environment variables CLICOLOR(_FORCE) to override default color behavior.,Use the de-factoish environment variables CLICOLOR(_FORCE) to override default color behavior.,True,{'THUMBS_UP': ['https://github.com/jhasse']}
premake/premake-core,https://github.com/premake/premake-core,1077,2018-05-02T12:52:53Z,2018-05-08T10:19:57Z,2018-05-08T10:19:57Z,MERGED,True,30,1,1,https://github.com/lanurmi,"Do not output colors e.g. into a pipe, unless forced.",2,[],https://github.com/premake/premake-core/pull/1077,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/1077#issuecomment-386013256,Use the de-factoish environment variables CLICOLOR(_FORCE) to override default color behavior.,No windows option?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1077,2018-05-02T12:52:53Z,2018-05-08T10:19:57Z,2018-05-08T10:19:57Z,MERGED,True,30,1,1,https://github.com/lanurmi,"Do not output colors e.g. into a pipe, unless forced.",2,[],https://github.com/premake/premake-core/pull/1077,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/1077#issuecomment-386077998,Use the de-factoish environment variables CLICOLOR(_FORCE) to override default color behavior.,"windows already does not put color information into the I/O stream, it has this special API to put the console in a certain color mode. It just works very differently.. So I don't think this really needs a windows option..",True,{}
premake/premake-core,https://github.com/premake/premake-core,1077,2018-05-02T12:52:53Z,2018-05-08T10:19:57Z,2018-05-08T10:19:57Z,MERGED,True,30,1,1,https://github.com/lanurmi,"Do not output colors e.g. into a pipe, unless forced.",2,[],https://github.com/premake/premake-core/pull/1077,https://github.com/ratzlaff,4,https://github.com/premake/premake-core/pull/1077#issuecomment-386101854,Use the de-factoish environment variables CLICOLOR(_FORCE) to override default color behavior.,"Yea, I understand that part (about putting color information in the stream). I was just thinking more about keeping things consistent between platforms.
If I have CLICOLOR=0 in my linux environment, I would like to see the same thing happen (interactively) when I set the environment variable in windows.
The functions for retrieving environment variables and testing for tty are available on windows too.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1077,2018-05-02T12:52:53Z,2018-05-08T10:19:57Z,2018-05-08T10:19:57Z,MERGED,True,30,1,1,https://github.com/lanurmi,"Do not output colors e.g. into a pipe, unless forced.",2,[],https://github.com/premake/premake-core/pull/1077,https://github.com/lanurmi,5,https://github.com/premake/premake-core/pull/1077#issuecomment-386572771,Use the de-factoish environment variables CLICOLOR(_FORCE) to override default color behavior.,"I added support for Windows too, as much as it can be supported due to the different way it works. I can squash the two commits into one, if desired.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1078,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1078#issuecomment-386777005,,"I like it... but I'm not sure if that's the practical part of me, or the ""ooh, shiny thing"" part of me ;)
Like, I'm not actually sure it's objectively superior to emit 200 lines of text when running the tests...
Anyway, I'm not saying don't merge this... it's cute. Just that there's a part of me that wonders if it's sensible :P",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/tvandijck,3,https://github.com/premake/premake-core/pull/1078#issuecomment-386989682,,"Well, I certainly like it because it's shiny, but there is more in this commit then just shiny output, it also does 'duplicate name detection', which already caught a few issues, and it's sorting the tests for a more deterministic run order. So for that reason I think we can take the shiny too ;)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1078#issuecomment-387052304,,"I hear what you're saying, it's very much shiny. However, there is a benefit to this; you can see the timings. This allows us to look into unit tests that are ""taking too long"", or for users like me, you can see that the HTTP and Nuget tests take ~20 seconds to run and that you haven't broken anything. Other than that, all other fixes and changes could be done separately.
I do agree that emitting two lines for each of the 1783 unit tests, as well as three lines (one empty) for the 177 test suites, and then another 3 lines for the test action itself is a bit intense. An extra 4100 lines isn't something we should ignore, and I'm absolutely happy to discuss changes. Though, it seems like you two like the shiny enough to accept the extra 4100 lines of logging and it does only happen when testing, end users will never see it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/tvandijck,5,https://github.com/premake/premake-core/pull/1078#issuecomment-387065075,,"4100 lines is nothing... I'm looking through logs at least 100x that size at the moment..
What I do care about however, is that if a test fails, that I don't have to scroll up 4000 lines, because it was the first one that failed, and the rest all succeeded..
So it would be preferable to have a summary at the end of all failed tests (with callstack etc).
whether you simply rerun the failed tests at the end, or save the output from those tests, I don't really care... I just don't want to have to search for fails.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1078#issuecomment-387067115,,"So it would be preferable to have a summary at the end of all failed tests (with callstack etc).
whether you simply rerun the failed tests at the end, or save the output from those tests, I don't really care... I just don't want to have to search for fails.

It does list the failed tests at the end, it doesn't emit the error message but that should be an easy fix. Would you like me to do that?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/tvandijck,7,https://github.com/premake/premake-core/pull/1078#issuecomment-387067364,,"if you could, and then also rebase the thing so we can merge it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1078,2018-05-03T11:43:46Z,2018-05-07T14:10:55Z,2018-05-07T14:39:19Z,MERGED,True,92,45,3,https://github.com/samsinsane,Added GoogleTest style output for unit tests,1,[],https://github.com/premake/premake-core/pull/1078,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/1078#issuecomment-387071980,,"if you could, and then also rebase the thing so we can merge it.

Done. This is what the output looks like with errors: (the HTTP tests decided now was the time to break and take ages)
[==========] 1783 tests from 177 test suites ran. (210610 ms total)
[  PASSED  ] 1781 tests.
[  FAILED  ] 2 tests, listed below:
[  FAILED  ] premake_http.http_get
HTTP response code said error
The requested URL returned error: 503 Service Unavailable

stack traceback:
[  FAILED  ] vstudio_vs2010_project_refs.referencesAreRelative_onDifferentProjectLocationWithCLR
...-core/modules/vstudio/tests/vc2010/test_project_refs.lua:87: (2) expected:
        <ProjectReference Include=""MyProject.vcxprojs"">
...but was:
        <ProjectReference Include=""MyProject.vcxproj"">
fulltext:
<ItemGroup>
        <ProjectReference Include=""MyProject.vcxproj"">
                <Project>{00112233-4455-6677-8888-99AABBCCDDEE}</Project>
                <Private>true</Private>
                <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
                <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>
                <LinkLibraryDependencies>true</LinkLibraryDependencies>
                <UseLibraryDependencyInputs>false</UseLibraryDependencyInputs>
        </ProjectReference>
</ItemGroup>

stack traceback:
        ...-core/modules/vstudio/tests/vc2010/test_project_refs.lua:87: in function 'testFunction'

 2 FAILED TESTS",True,{}
premake/premake-core,https://github.com/premake/premake-core,1079,2018-05-04T02:09:30Z,2018-05-07T08:14:17Z,2018-12-02T18:08:16Z,MERGED,True,728,100,15,https://github.com/EmmeKappaErre,Add support for mixed C++/D project,4,[],https://github.com/premake/premake-core/pull/1079,https://github.com/EmmeKappaErre,1,https://github.com/premake/premake-core/pull/1079,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1079,2018-05-04T02:09:30Z,2018-05-07T08:14:17Z,2018-12-02T18:08:16Z,MERGED,True,728,100,15,https://github.com/EmmeKappaErre,Add support for mixed C++/D project,4,[],https://github.com/premake/premake-core/pull/1079,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1079#issuecomment-386777058,Modified the D module to support the C++/D mixed mode. This allows to have D files in a C++ project and provide means to set the compiler options.,Thanks guy! I've been meaning to get around to this for ages! :P,True,{}
premake/premake-core,https://github.com/premake/premake-core,1080,2018-05-04T13:46:25Z,2018-05-05T03:34:11Z,2018-05-07T13:35:37Z,MERGED,True,2,2,1,https://github.com/lanurmi,Fix curl compilation on Debian PowerPC.,1,[],https://github.com/premake/premake-core/pull/1080,https://github.com/lanurmi,1,https://github.com/premake/premake-core/pull/1080,"For some reason, ppc is not defined by GCC, but PPC is.","For some reason, ppc is not defined by GCC, but PPC is.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1080,2018-05-04T13:46:25Z,2018-05-05T03:34:11Z,2018-05-07T13:35:37Z,MERGED,True,2,2,1,https://github.com/lanurmi,Fix curl compilation on Debian PowerPC.,1,[],https://github.com/premake/premake-core/pull/1080,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1080#issuecomment-386775973,"For some reason, ppc is not defined by GCC, but PPC is.",I feel like this patch should probably be submit against CURL...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1080,2018-05-04T13:46:25Z,2018-05-05T03:34:11Z,2018-05-07T13:35:37Z,MERGED,True,2,2,1,https://github.com/lanurmi,Fix curl compilation on Debian PowerPC.,1,[],https://github.com/premake/premake-core/pull/1080,https://github.com/lanurmi,3,https://github.com/premake/premake-core/pull/1080#issuecomment-386989322,"For some reason, ppc is not defined by GCC, but PPC is.","CURL upstream seems to check for __powerpc__ now, which solves the same problem.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1080,2018-05-04T13:46:25Z,2018-05-05T03:34:11Z,2018-05-07T13:35:37Z,MERGED,True,2,2,1,https://github.com/lanurmi,Fix curl compilation on Debian PowerPC.,1,[],https://github.com/premake/premake-core/pull/1080,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/1080#issuecomment-387063838,"For some reason, ppc is not defined by GCC, but PPC is.",can we just take the fix from curl then?,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1080,2018-05-04T13:46:25Z,2018-05-05T03:34:11Z,2018-05-07T13:35:37Z,MERGED,True,2,2,1,https://github.com/lanurmi,Fix curl compilation on Debian PowerPC.,1,[],https://github.com/premake/premake-core/pull/1080,https://github.com/lanurmi,5,https://github.com/premake/premake-core/pull/1080#issuecomment-387066641,"For some reason, ppc is not defined by GCC, but PPC is.","I guess, but if you do, please pay attention that the PR I linked to caused a regression, so their correct fix is actually two commits. Also my fix includes a blind fix for PPC64, and theirs doesn't.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1081,2018-05-08T10:35:53Z,2018-05-08T10:56:20Z,2018-05-08T11:07:08Z,MERGED,True,21,14,1,https://github.com/tvandijck,cache results of shouldUseColors(),1,[],https://github.com/premake/premake-core/pull/1081,https://github.com/tvandijck,1,https://github.com/premake/premake-core/pull/1081,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1084,2018-05-11T09:00:48Z,2018-05-11T18:55:38Z,2018-05-11T18:55:38Z,MERGED,True,3,3,1,https://github.com/BernhardtD,Fix httpbin useragent response format.,1,[],https://github.com/premake/premake-core/pull/1084,https://github.com/BernhardtD,1,https://github.com/premake/premake-core/pull/1084,"Currently, the user-agent tests are failing. My assumption is that the httpbin response format of an user-agent request has been changed.
I adjusted the format in the test to get it working again. The change fixes #1083.","Currently, the user-agent tests are failing. My assumption is that the httpbin response format of an user-agent request has been changed.
I adjusted the format in the test to get it working again. The change fixes #1083.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1086,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/1086#issuecomment-388998386,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","I remember seeing this language file config back when I was making compileas work (.c compiled as .cpp). I dismissed it as stale since I did not find any other references to 'language' as a file configuration parameter outside the xcode module and figured it was leftover cruft from the transition from premake-xcode to premake-core.
This seems like it is doing the same kind of deal as my PR, just with .cpp compiled as .mm. Is 'language' the preferred keyword (over 'compileas') for doing this kind of configuration? I am only asking in case I need to update my PR, which I will happily do.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1086#issuecomment-389009898,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","I'm more than happy to change it to use compileas, I think compileas makes more sense. I found two places that used language and only one that used compileas, I wasn't sure why a new API was created and figured sticking to the ""majority"" was better. Again, I think compileas makes more sense, so I would actually prefer to use it over language. ""Compile these files as X"" makes more sense than ""These files are this language"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/mihaisebea,4,https://github.com/premake/premake-core/pull/1086#issuecomment-425666001,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085",@samsinsane I would say that compileas is redundant (maybe it should be just an alias for language?) Ideally we shouldn't have two ways of doing the same thing as it's confusing.,True,{'THUMBS_UP': ['https://github.com/tdesveauxPKFX']}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1086#issuecomment-425692819,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","There's been a few other discussions around language and it seems like it might be phased out. I believe that compileas is definitely the correct API to use for this particular PR. A file with the extension cpp is still a C++ file, but we're instructing the IDE/compiler/tool to treat it like a C, Objective-C or Objective-C++ file. I feel that using language instead of compileas would make it kind of confusing to read the Premake scripts, it would appear more like a typo than an intentional action.
I'm not sure when I'll get a chance to update this PR, but if there aren't any objections to using compileas I'll update it to use that instead.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1086#issuecomment-542236061,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085",@starkos unfortunately I won't be able to test it properly as I don't get a chance to work on a Mac very often. It might be better for someone else to pick it up? Or I can pick it back up when I get a chance to work on a Mac again.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/ratzlaff,7,https://github.com/premake/premake-core/pull/1086#issuecomment-542291167,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085",We are getting our macs here refreshed so I may be able to test this out,True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/1086#issuecomment-606246918,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","@samsinsane - How would you like to proceed with this? I'm inclined to rebase it and merge as is, but I'm not set up to test the resulting builds. What say you?
If you're against merging it, I'd like to close it as stale. It is linked to the related issues so it wouldn't be hard to resurrect if someone finds the need.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/1086#issuecomment-606473308,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","@starkos I updated the PR to use compileas instead of language, however, I still wasn't able to try to use it on a mac. I'm happy for this to be merged as-is if it helps people out.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/1086#issuecomment-606854125,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085","I'm working up to a new release. Since we can't test this thoroughly ourselves let's hold off until the release branch is cut, and then I'll approve it.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1086,2018-05-14T10:27:10Z,2020-04-06T21:38:16Z,2020-04-07T02:11:59Z,MERGED,True,39,6,8,https://github.com/samsinsane,Added support for Objective-C and Objective-C++ in xcode and gmake2,1,[],https://github.com/premake/premake-core/pull/1086,https://github.com/starkos,11,https://github.com/premake/premake-core/pull/1086#issuecomment-610051011,"Added unit tests for Objective-C and Objective-C++
Resolves #845
Resolves #1085",Changed my mind; there will time enough to review before the release actually gets cut. Merged.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1087,2018-05-15T05:12:53Z,2018-05-15T08:49:17Z,2018-05-15T14:25:56Z,MERGED,True,1,1,1,https://github.com/rorydriscoll,Fix missing DebugInformationFormat when symbols are set to full,1,[],https://github.com/premake/premake-core/pull/1087,https://github.com/rorydriscoll,1,https://github.com/premake/premake-core/pull/1087,"When symbols are set to ""full"" then the DebugInformationFormat attribute is not emitted no matter what the other settings are. For me, this manifested itself as the editandcontinue function appearing not to work.","When symbols are set to ""full"" then the DebugInformationFormat attribute is not emitted no matter what the other settings are. For me, this manifested itself as the editandcontinue function appearing not to work.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1087,2018-05-15T05:12:53Z,2018-05-15T08:49:17Z,2018-05-15T14:25:56Z,MERGED,True,1,1,1,https://github.com/rorydriscoll,Fix missing DebugInformationFormat when symbols are set to full,1,[],https://github.com/premake/premake-core/pull/1087,https://github.com/rorydriscoll,2,https://github.com/premake/premake-core/pull/1087#issuecomment-389186398,"When symbols are set to ""full"" then the DebugInformationFormat attribute is not emitted no matter what the other settings are. For me, this manifested itself as the editandcontinue function appearing not to work.",It would be less error prone to explicitly list out the default case too and make the final else emit an error. That would have saved me a couple of hours. In another language this would be a switch statement with an error in the default case.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1089,2018-05-19T19:43:21Z,2018-05-19T20:28:31Z,2018-05-19T20:28:31Z,MERGED,True,17,9,3,https://github.com/TurkeyMan,Import paths weren't translated properly,1,[],https://github.com/premake/premake-core/pull/1089,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1089,Fixed an oversight in the recent refactor!,Fixed an oversight in the recent refactor!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/Apjue,1,https://github.com/premake/premake-core/pull/1091,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1091#issuecomment-392597554,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","I can't reproduce the issue on my side.
MINGW is identified as a posix and handle -p.
MSDOS command line go through the else which already does a mkdir without -p.
Seeing your PR, is the fact that the command fail if the directory already exists an issue to you?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/Apjue,3,https://github.com/premake/premake-core/pull/1091#issuecomment-392837817,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","I can't reproduce the issue on my side.

To reproduce it, I just had to launch mingw32-make.exe version in a cmd windows terminal

MINGW is identified as a posix and handle -p.

How can MinGW handle -p ? It doesn't provide binaries for mkdir

MSDOS command line go through the else which already does a mkdir without -p.

Looks like it doesn't, when checking the error's line, I'm getting on a mkdir -p <...>

Seeing your PR, is the fact that the command fail if the directory already exists an issue to you?

When building an app with MinGW I got some errors and I thought this issue might be one of the problems.
Even if it still builds, it's still better to have no useless logs at all",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1091#issuecomment-392862978,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","My bad, I was executing it with git-bash which is identified as a posix.
I tried with the windows command prompt using mingw32-make.exe on one of my makefiles and SHELLTYPE is indeed msdos.
However, I do not encounter any issue with the directory creation step as it uses the else part of the if you changed and execute mkdir without -p.

Looks like it doesn't, when checking the error's line, I'm getting on a mkdir -p <...>

As the code generate makefiles like this:
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

I think the issue might be elsewhere.
Can you do a full clean then running your makefile with -n? It will print the command lines without executing them.
You can also add echo $(SHELLTYPE) to one of your rules to check if it has an expected value.
If you still can't find the issue, could you try to send a small Makefile that reproduce the issue as well as the steps to reproduce?
On another note, _p() works the same way as printf(), meaning it will format %s in the first argument with the following arguments. The modification you made don't work as the first argument contains 2 %s but no arguments to substitute them. You can look at the lines above and below for a correct example.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/Apjue,5,https://github.com/premake/premake-core/pull/1091#issuecomment-393269055,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","When running that @echo $(SHELLTYPE) rule, I get... nothing
I ran make with that -n argument, and now things get weird
I'm not using default windows cmd, I'm using Cmder, and running mingw into it makes make think that SHELLTYPE equals posix (even if the echo $(SHELLTYPE) I ran did nothing). When running in a standard cmd prompt, I don't have any mkdir -p, just mkdirs.
But still, It would make useless logs without that -p if the folder doesn't exist, so the PR stays useful

On another note, _p() works the same way as printf(), meaning it will format %s in the first argument with the following arguments. The modification you made don't work as the first argument contains 2 %s but no arguments to substitute them. You can look at the lines above and below for a correct example.

Whoops. Committing the fix ASAP",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,6,https://github.com/premake/premake-core/pull/1091#issuecomment-393275543,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","When running that @echo $(SHELLTYPE) rule, I get... nothing

Just to check, where did you add it?
I added it in the prebuild rule after the project gen like this:
prebuild: | $(OBJDIR)
	@echo $(SHELLTYPE)
	$(PREBUILDCMDS)

SHELLTYPE should never be empty.

I ran make with that -n argument, and now things get weird

Not sure what you mean by things get weird.

I'm not using default windows cmd, I'm using Cmder, and running mingw into it makes make think that SHELLTYPE equals posix (even if the echo $(SHELLTYPE) I ran did nothing). When running in a standard cmd prompt, I don't have any mkdir -p, just mkdirs.

I will try with Cmder. To be sure, the issue happen when running the mingw32-make bin from Cmder or from mingw?
Sorry to be such a pain, I'm trying to find the correct cause of the issue to have the best fix possible.
Thanks for taking the time!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,7,https://github.com/premake/premake-core/pull/1091#issuecomment-393334037,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","So I tried with Cmder and the issue is that it is detected as a posix shell but use Windows mkdir.
I don't see how your PR would solve the issue though.
This should be fixed here for gmake2:

  
    
      premake-core/modules/gmake2/gmake2.lua
    
    
        Lines 275 to 284
      in
      ff732af
    
  
  
    

        
          
           function gmake2.shellType() 
        

        
          
           	_p('SHELLTYPE := msdos') 
        

        
          
           	_p('ifeq (,$(ComSpec)$(COMSPEC))') 
        

        
          
           	_p('  SHELLTYPE := posix') 
        

        
          
           	_p('endif') 
        

        
          
           	_p('ifeq (/bin,$(findstring /bin,$(SHELL)))') 
        

        
          
           	_p('  SHELLTYPE := posix') 
        

        
          
           	_p('endif') 
        

        
          
           	_p('') 
        

        
          
           end 
        
    
  


EDIT: Never mind, will open an issue.
I'm closing this PR as won't fix the problem. Feel free to re-open if you disagree.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/Apjue,8,https://github.com/premake/premake-core/pull/1091#issuecomment-393608039,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","Wait wait wait! The PR isn't about Cmder not detected as msdos, but msdos code not verifying folders for mkdir

Just to check, where did you add it?
I added it in the prebuild rule after the project gen like this:

I added it in the .PHONY thing, then made a rule with the same name. I know the problem isn't from the makefile code since at first I didn't put the @ before the echo, so I had echo , with SHELLTYPE empty
I'm fixing the extra parenthesis, didn't see that too.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,9,https://github.com/premake/premake-core/pull/1091#issuecomment-393617289,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","Wow, I don't know why I though it was about that.
The reason why there is no check is that Makefile will take care of this for us.
The rule $(OBJDIR) is interpreted to the path to the directory and Makefile will check if it needs to execute the rule or not.
I can't see a reason for Makefile to execute the rule if the directory exists.
Could you provide a Makefile that cause the issue?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,10,https://github.com/premake/premake-core/pull/1091#issuecomment-393823201,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","Wow, I don't know why I though it was about that.
The reason why there is no check is that Makefile will take care of this for us.
The rule $(OBJDIR) is interpreted to the path to the directory and Makefile will check if it needs to execute the rule or not.
I can't see a reason for Makefile to execute the rule if the directory exists.
By chance, does the logs not appears the first time you run make on a clean directory but appear only if you run it, run clean then run it again?
If not, could you provide a Makefile that cause the issue? Your Makefile might contains something that mine don't that cause the issue.
Also, you can run the unit-tests locally with the test action so that you can fix them before pushing your modifications.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/Apjue,11,https://github.com/premake/premake-core/pull/1091#issuecomment-393955948,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","By chance, does the logs not appears the first time you run make on a clean directory but appear only if you run it, run clean then run it again?

These are the steps I do:

Generate makefile with gmake action, on windows
Run normal make => no logs appear
Run make clean
Run normal make again => no logs appear
Run normal make a last time => obviously, ""folder already exists""


If not, could you provide a Makefile that cause the issue? Your Makefile might contains something that mine don't that cause the issue.

Sure, but first, I have to say there's something else really weird
I ran make after doing a make clean:
> C:\PortablePrograms\mingw-w64_x64-7.3.0-seh\mingw64\bin\mingw32-make
""==== Building efgh (debug_x64) ====""
main.cpp
g++: error: CreateProcess: No such file or directory
mingw32-make[1]: *** [efgh.make:177: obj/x64/Debug/main.o] Error 1
mingw32-make: *** [Makefile:33: efgh] Error 2

I got that CreateProcess error too on a real project. I thought it was the project's premake's fault. Looks like it's not. And this is a serious thing, since it breaks build
And, for the makefile/project: https://transfer.sh/N08g0/premakefile.zip

Also, you can run the unit-tests locally with the test action so that you can fix them before pushing your modifications.

I was editing from GitHub and hoping everything would work correctly, I'll try to clone this time",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,12,https://github.com/premake/premake-core/pull/1091#issuecomment-393958007,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","Thanks for the Makefile, I will look into it.

I got that CreateProcess error too on a real project. I thought it was the project's premake's fault. Looks like it's not. And this is a serious thing, since it breaks build

Indeed that's worrying. I think I got the same error once or twice when testing but did not look into it yet.
Can you try this PR #1103 and tell me if that fixes your issues?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,13,https://github.com/premake/premake-core/pull/1091#issuecomment-393981215,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","Just tested your Makefile and indeed I see the same issue with gmake but not with gmake2.
Following are the rule for TARGETDIR and how Makefile will interpret them.
gmake:
$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking efgh
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

gmake2:
$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(TARGET): $(GCH) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	@echo Linking efgh

As you can see, gmake2 has a standalone rule for TARGETDIR to be created. This way, once it has been create, Makefile doesn't try to create it again.
However, gmake will try to create TARGETDIR each time it execute TARGET even if the directory already exists.
I am (really this time) closing this PR as the changes are not necessary nor make sense regarding the issue.
I invite you to use the gmake2 generator as we are moving away form gmake.
I will still submit a PR to fix the issue as it does not require that much efforts.
I invite you to open an issue / PR regarding the CreateProcess error if you find this is due to Premake.
Anyway, thanks again for the time you spent to help me track down the cause!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/Apjue,14,https://github.com/premake/premake-core/pull/1091#issuecomment-393994659,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","Indeed that's worrying. I think I got the same error once or twice when testing but did not look into it yet.
Can you try this PR #1103 and tell me if that fixes your issues?

I would like to build #1103 but can't, because of that CreateProcess error.
I tried to build Bootstrap.mak, and use a binary of premake5 to generate a gmake2 makefile with the premake5.lua, failed in both cases",True,{}
premake/premake-core,https://github.com/premake/premake-core,1091,2018-05-20T13:57:25Z,2018-06-01T19:09:28Z,2018-06-01T20:16:18Z,CLOSED,False,20,0,3,https://github.com/Apjue,Fix mkdir command on msdos if directory already exists,8,[],https://github.com/premake/premake-core/pull/1091,https://github.com/tdesveauxPKFX,15,https://github.com/premake/premake-core/pull/1091#issuecomment-393997264,"On windows mkdir -p foo creates two folders: -p and foo. When using mkdir to create a folder already existing, useless logs appear in the shell (even with the @ before the command)","#1103 does fix an issue but the PR you will want to try is #1105 instead.
I don't mind helping you further but as it seems unrelated to Premake for now, please contact me through my email (you can find it on my GitHub profile).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1092,2018-05-21T23:01:52Z,2018-05-24T09:59:48Z,2018-05-24T09:59:49Z,MERGED,True,55,13,2,https://github.com/Gaztin,CodeLite workspace folders (groups),2,[],https://github.com/premake/premake-core/pull/1092,https://github.com/Gaztin,1,https://github.com/premake/premake-core/pull/1092,"Didn't notice until today that groups for codelite wasn't working. The change was very small, but I had to update from the manual indenting ( _x(1, ...) ) to pushing/popping. Wrote a test as well. Feedback is much appreciated.
Example:
workspace ""groups""
...

group ""my/nested/samples""
project ""nested_grouped_sample""
...
group """"
project ""sample""
...
group ""samples""
project ""grouped_sample""
...
Result:","Didn't notice until today that groups for codelite wasn't working. The change was very small, but I had to update from the manual indenting ( _x(1, ...) ) to pushing/popping. Wrote a test as well. Feedback is much appreciated.
Example:
workspace ""groups""
...

group ""my/nested/samples""
project ""nested_grouped_sample""
...
group """"
project ""sample""
...
group ""samples""
project ""grouped_sample""
...
Result:",True,{}
premake/premake-core,https://github.com/premake/premake-core,1093,2018-05-23T19:55:30Z,2018-05-24T09:59:22Z,2018-05-24T09:59:23Z,MERGED,True,6,3,2,https://github.com/Gaztin,Implemented 'debugenvs' for CodeLite,2,[],https://github.com/premake/premake-core/pull/1093,https://github.com/Gaztin,1,https://github.com/premake/premake-core/pull/1093,"Here I go again. Another codelite patch. I'm suspecting that there was a good reason for this to not be implemented, but looking through the commits I couldn't find anything on it. I guess it must've fallen through the cracks. If not, let me know.","Here I go again. Another codelite patch. I'm suspecting that there was a good reason for this to not be implemented, but looking through the commits I couldn't find anything on it. I guess it must've fallen through the cracks. If not, let me know.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1096,2018-05-28T20:44:28Z,2018-05-29T01:16:25Z,2018-05-29T08:14:57Z,MERGED,True,1,4,1,https://github.com/tdesveauxPKFX,gmake2: Fix dependency for pch,1,[],https://github.com/premake/premake-core/pull/1096,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1096,"PCH:
#include ""myheader.h""

If myheader.h was changed but not the pch itself, Make would not detect it and cause gcc to fail.","PCH:
#include ""myheader.h""

If myheader.h was changed but not the pch itself, Make would not detect it and cause gcc to fail.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1098,2018-05-29T17:28:02Z,2018-05-29T18:58:33Z,2018-05-29T18:58:36Z,MERGED,True,5,3,1,https://github.com/tdesveauxPKFX,Prevent D module from adding D block in unrelated projects,1,[],https://github.com/premake/premake-core/pull/1098,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1098,ref: #1097,ref: #1097,True,{}
premake/premake-core,https://github.com/premake/premake-core,1098,2018-05-29T17:28:02Z,2018-05-29T18:58:33Z,2018-05-29T18:58:36Z,MERGED,True,5,3,1,https://github.com/tdesveauxPKFX,Prevent D module from adding D block in unrelated projects,1,[],https://github.com/premake/premake-core/pull/1098,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1098#issuecomment-392873015,ref: #1097,"Hum, failed on nugget tests due to a timeout. Is there a way to make appveyor re-launch the tests?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1098,2018-05-29T17:28:02Z,2018-05-29T18:58:33Z,2018-05-29T18:58:36Z,MERGED,True,5,3,1,https://github.com/tdesveauxPKFX,Prevent D module from adding D block in unrelated projects,1,[],https://github.com/premake/premake-core/pull/1098,https://github.com/ratzlaff,3,https://github.com/premake/premake-core/pull/1098#issuecomment-392888193,ref: #1097,I would do a git commit --amend followed by a git push -f to create a new commit id to my local repo to do a rebuild.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1098,2018-05-29T17:28:02Z,2018-05-29T18:58:33Z,2018-05-29T18:58:36Z,MERGED,True,5,3,1,https://github.com/tdesveauxPKFX,Prevent D module from adding D block in unrelated projects,1,[],https://github.com/premake/premake-core/pull/1098,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1098#issuecomment-392892623,ref: #1097,I was able to trigger one through the appveyor website.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1100,2018-05-30T16:00:19Z,2018-06-03T13:23:07Z,2018-06-03T14:44:56Z,MERGED,True,84,19,2,https://github.com/tdesveauxPKFX,gmake2: Remove pch from FORCE_INCLUDE to allow NoPCH per-file,2,[],https://github.com/premake/premake-core/pull/1100,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1100,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1100,2018-05-30T16:00:19Z,2018-06-03T13:23:07Z,2018-06-03T14:44:56Z,MERGED,True,84,19,2,https://github.com/tdesveauxPKFX,gmake2: Remove pch from FORCE_INCLUDE to allow NoPCH per-file,2,[],https://github.com/premake/premake-core/pull/1100,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1100#issuecomment-393467992,,"Yeah, completely forgot unit tests. I will implement some later today.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1101,2018-05-30T20:02:14Z,2018-06-08T21:29:49Z,2018-06-08T21:29:49Z,CLOSED,False,243,484,32,https://github.com/redorav,xbox360 module,34,[],https://github.com/premake/premake-core/pull/1101,https://github.com/redorav,1,https://github.com/premake/premake-core/pull/1101,"I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.","I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1101,2018-05-30T20:02:14Z,2018-06-08T21:29:49Z,2018-06-08T21:29:49Z,CLOSED,False,243,484,32,https://github.com/redorav,xbox360 module,34,[],https://github.com/premake/premake-core/pull/1101,https://github.com/redorav,2,https://github.com/premake/premake-core/pull/1101#issuecomment-393328713,"I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.","I have an issue with the last test that is failing, I don't know how to properly set it up. If I create a configuration + platform combination like Win32 + Xbox 360 Debug and Release, I get the expected output in the resulting vcxproj. However through the test it always fails to generate one of the configurations. If you have any suggestions they would be appreciated.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1101,2018-05-30T20:02:14Z,2018-06-08T21:29:49Z,2018-06-08T21:29:49Z,CLOSED,False,243,484,32,https://github.com/redorav,xbox360 module,34,[],https://github.com/premake/premake-core/pull/1101,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1101#issuecomment-394009330,"I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.","From what I saw, the issue is that suite.setup use test.createWorkspace which create a workspace and a project. Then, you start your test function in the project space.
That mean that the project does have Win32 and Xbox 360 but the workspace (here the visual solution) only has Win32 (because no platforms were added so that default to x32)
Here is how to implement a working test:
		local testWorkspace = workspace(""MyWorkspace"")

		configurations { ""Debug"", ""Release"" }
		platforms { ""Win32"", ""Xbox 360"" }

		filter {""platforms:Xbox 360""}
			system(""xbox360"")
		filter{}

		project ""MyProject""
			uuid ""C9135098-6047-8142-B10E-D27E7F73FCB3""
		testWorkspace = test.getWorkspace(testWorkspace)
		sln2005.configurationPlatforms(testWorkspace)

I don't know if this is the best way / best practice here but this produce the intended result.",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1101,2018-05-30T20:02:14Z,2018-06-08T21:29:49Z,2018-06-08T21:29:49Z,CLOSED,False,243,484,32,https://github.com/redorav,xbox360 module,34,[],https://github.com/premake/premake-core/pull/1101,https://github.com/redorav,4,https://github.com/premake/premake-core/pull/1101#issuecomment-394097981,"I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.","Thanks, @tdesveauxPKFX that did the trick",True,{}
premake/premake-core,https://github.com/premake/premake-core,1101,2018-05-30T20:02:14Z,2018-06-08T21:29:49Z,2018-06-08T21:29:49Z,CLOSED,False,243,484,32,https://github.com/redorav,xbox360 module,34,[],https://github.com/premake/premake-core/pull/1101,https://github.com/tdesveauxPKFX,5,https://github.com/premake/premake-core/pull/1101#issuecomment-394118038,"I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.",@redorav Just waiting for you to update to master. If you could rebase and skip the merge commit that would be perfect.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1101,2018-05-30T20:02:14Z,2018-06-08T21:29:49Z,2018-06-08T21:29:49Z,CLOSED,False,243,484,32,https://github.com/redorav,xbox360 module,34,[],https://github.com/premake/premake-core/pull/1101,https://github.com/redorav,6,https://github.com/premake/premake-core/pull/1101#issuecomment-395894643,"I have migrated all of the xbox 360 code from premake core into this module, plus extended it with new apis with everything I could find publicly. Some things I originally added I have removed since I couldn't find any public references to it. It mostly had to do with Kinect and other flags that I don't think are too important anyway. There is a references.txt file with links. I have verified it works locally.",I think I have made a gigantic mess of this trying to rebase into master... Maybe I'm better off redoing this from a clean fork?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1103,2018-05-31T22:38:48Z,2018-06-03T15:37:36Z,2018-06-03T15:37:39Z,MERGED,True,6,12,2,https://github.com/tdesveauxPKFX,gmake*: fix shell type identification,1,[],https://github.com/premake/premake-core/pull/1103,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1103,"I want to test it on Win7 and Osx before merging (should be able to do it tomorrow evening Western europe time).
So far, it works on cmd.exe, powershell, mingw (including git bash) and Cmder on Win10 + Debian.","I want to test it on Win7 and Osx before merging (should be able to do it tomorrow evening Western europe time).
So far, it works on cmd.exe, powershell, mingw (including git bash) and Cmder on Win10 + Debian.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1103,2018-05-31T22:38:48Z,2018-06-03T15:37:36Z,2018-06-03T15:37:39Z,MERGED,True,6,12,2,https://github.com/tdesveauxPKFX,gmake*: fix shell type identification,1,[],https://github.com/premake/premake-core/pull/1103,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1103#issuecomment-393994271,"I want to test it on Win7 and Osx before merging (should be able to do it tomorrow evening Western europe time).
So far, it works on cmd.exe, powershell, mingw (including git bash) and Cmder on Win10 + Debian.","Tested and working fine on both Win7 and Osx, can be merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1104,2018-06-01T04:08:10Z,2018-06-05T01:41:10Z,2018-06-05T01:41:10Z,MERGED,True,11,11,8,https://github.com/erincatto,Xcode Fixes,4,[],https://github.com/premake/premake-core/pull/1104,https://github.com/erincatto,1,https://github.com/premake/premake-core/pull/1104,"Fix cppdialect=C++11 (Xcode 9.3.1 does not like c++0x)
Fix angle bracket include complaints for building Premake in Xcode.","Fix cppdialect=C++11 (Xcode 9.3.1 does not like c++0x)
Fix angle bracket include complaints for building Premake in Xcode.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1104,2018-06-01T04:08:10Z,2018-06-05T01:41:10Z,2018-06-05T01:41:10Z,MERGED,True,11,11,8,https://github.com/erincatto,Xcode Fixes,4,[],https://github.com/premake/premake-core/pull/1104,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1104#issuecomment-394090466,"Fix cppdialect=C++11 (Xcode 9.3.1 does not like c++0x)
Fix angle bracket include complaints for building Premake in Xcode.","Out of curiosity, what is xcode complaining about with #include <>?
Otherwise, this looks fine to me, will still leave approval to someone more familiar with XCode.
Might also make sense to split this in two PR?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1104,2018-06-01T04:08:10Z,2018-06-05T01:41:10Z,2018-06-05T01:41:10Z,MERGED,True,11,11,8,https://github.com/erincatto,Xcode Fixes,4,[],https://github.com/premake/premake-core/pull/1104,https://github.com/erincatto,3,https://github.com/premake/premake-core/pull/1104#issuecomment-394175875,"Fix cppdialect=C++11 (Xcode 9.3.1 does not like c++0x)
Fix angle bracket include complaints for building Premake in Xcode.","Here is an example error:
/premake-core/binmodules/example/main.c:1:10: 'luashim.h' file not found with  include; use ""quotes"" instead",True,{}
premake/premake-core,https://github.com/premake/premake-core,1105,2018-06-01T19:10:05Z,2018-06-03T14:23:36Z,2018-06-03T14:44:59Z,MERGED,True,34,77,4,https://github.com/tdesveauxPKFX,gmake: Add rules and dependencies for directory creation,1,[],https://github.com/premake/premake-core/pull/1105,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1105,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1105,2018-06-01T19:10:05Z,2018-06-03T14:23:36Z,2018-06-03T14:44:59Z,MERGED,True,34,77,4,https://github.com/tdesveauxPKFX,gmake: Add rules and dependencies for directory creation,1,[],https://github.com/premake/premake-core/pull/1105,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1105#issuecomment-394164502,,"This was one of the issues related to #1091.
I agree with you on making people go with gmake2, however this was a minor fix and was trivial to fix.
I also noticed that we still use gmake in Bootstrap.mak. I will submit a PR to use gmake2 instead.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1106,2018-06-02T01:21:53Z,2018-06-05T00:42:14Z,2018-06-05T00:57:38Z,CLOSED,False,38,6,2,https://github.com/TurkeyMan,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/1106,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1106,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1106,2018-06-02T01:21:53Z,2018-06-05T00:42:14Z,2018-06-05T00:57:38Z,CLOSED,False,38,6,2,https://github.com/TurkeyMan,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/1106,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1106#issuecomment-394089629,,"Hum, #671 and #881 already brought that up.
Have something changed since then?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1106,2018-06-02T01:21:53Z,2018-06-05T00:42:14Z,2018-06-05T00:57:38Z,CLOSED,False,38,6,2,https://github.com/TurkeyMan,Object files should be marked as object files.,1,[],https://github.com/premake/premake-core/pull/1106,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1106#issuecomment-394544089,,Truestory...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1107,2018-06-02T01:47:52Z,2018-06-02T14:02:22Z,2018-06-04T21:05:24Z,MERGED,True,57,6,2,https://github.com/TurkeyMan,Only set WindowsSDKDesktopARMSupport for windows systems (#172),1,[],https://github.com/premake/premake-core/pull/1107,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1107,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1108,2018-06-02T01:48:01Z,2018-06-05T10:26:09Z,2018-06-06T01:09:17Z,MERGED,True,23,2,1,https://github.com/TurkeyMan,Fix gmake2,1,[],https://github.com/premake/premake-core/pull/1108,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1108,bindirs are added to make files for gmake2,bindirs are added to make files for gmake2,True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1109,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1109#issuecomment-394164365,,"There is already an ExcludeFromBuild flag, which this PR sets under the hood. I'd rather see the flag deprecated, and any under-the-hood logic referencing it switched over to check this API value instead (all flags must die).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1109#issuecomment-394545691,,@tvandijck might want to update this patch... or not? :),True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/tvandijck,4,https://github.com/premake/premake-core/pull/1109#issuecomment-394598400,,"the 'exludes' api already does a similar thing, which is what I never realized when making this change. It's in use by WoW and HotS I beleive, but they should just change to using pre-existing API's. either through the filter, or through excludes.
I don't feel this API as is has a right to exist.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1109#issuecomment-394656413,,"excludes (or remove files) is different, that removes the file from the project entirely. The ExcludeFromBuild flag leaves the file in the project, so it will appear in the IDE and can still be easily edited, but doesn't include it when building. The feature is definitely useful, I'd just like to see the flag go away.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/tvandijck,6,https://github.com/premake/premake-core/pull/1109#issuecomment-394661883,,"True, but if you exclude it from only one configuration/platform, it acts like the ""ExcludeFromBuild"" in practice. the file will still appear in the IDE, but disabled for the configuration where you removed it. So I think that covers the use-case for which I introduced this particular API.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1109,2018-06-02T01:48:08Z,2018-06-05T00:57:17Z,2018-06-05T10:42:50Z,CLOSED,False,38,2,3,https://github.com/TurkeyMan,Add 'excludefrombuild' API.,1,[],https://github.com/premake/premake-core/pull/1109,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1109#issuecomment-394663993,,"That makes sense. So that plus improved buildaction support should cover all of the cases, got it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1110,2018-06-02T01:48:17Z,2018-06-05T00:51:57Z,2018-06-05T00:57:27Z,CLOSED,False,1,0,1,https://github.com/TurkeyMan,Add warning for deprecated toolset identifiers.,1,[],https://github.com/premake/premake-core/pull/1110,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1110,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1110,2018-06-02T01:48:17Z,2018-06-05T00:51:57Z,2018-06-05T00:57:27Z,CLOSED,False,1,0,1,https://github.com/TurkeyMan,Add warning for deprecated toolset identifiers.,1,[],https://github.com/premake/premake-core/pull/1110,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1110#issuecomment-394165074,,I believe the argument against was that it would be easier to understand if all of the values followed a consistent format.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1110,2018-06-02T01:48:17Z,2018-06-05T00:51:57Z,2018-06-05T00:57:27Z,CLOSED,False,1,0,1,https://github.com/TurkeyMan,Add warning for deprecated toolset identifiers.,1,[],https://github.com/premake/premake-core/pull/1110,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1110#issuecomment-394166568,,"msc is appended when the toolset API is used, so we don't have to worry about it elsewhere. Any inconsistency would be user side and this is mentioned in the wiki. I don't think it will one day collide with something else and it provide user with something that is familiar to them.
I personally think we should keep it.",True,"{'THUMBS_UP': ['https://github.com/starkos', 'https://github.com/samsinsane']}"
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1111,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1111#issuecomment-394164728,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","Well, I installed both MinGW32 and 64 and it works with MinGW64.
MinGW32 has an error related to curl if I remember correctly.
I expected a review on this part:
filter { ""system:windows"", ""action:gmake*"" }

I think it is pretty safe to assume that Makefiles on Windows are used with MinGW but just wanted to confirm it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1111#issuecomment-394165009,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","think it is pretty safe to assume that Makefiles on Windows are used with MinGW but just wanted to confirm it.

Could be Cygwin too, but I would still expect those libraries to be present. I think this should be okay.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1111#issuecomment-394166036,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","I though Cygwin used MinGW, I'm really confused about all these things. Let me test Cygwin to be sure;
If everything works fine, I will merge this myself if that's ok with you.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,5,https://github.com/premake/premake-core/pull/1111#issuecomment-394169719,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","Well, I can't build curl with the cygwin gcc but I think it is another issue than what this PR does.
The issue is ../../contrib/curl/lib/curl_setup_once.h:110:8: error: redefinition of ‚Äòstruct timeval‚Äô
which can be fixed with a define HAVE_STRUCT_TIMEVAL.
I think this is something for curl to fix and not us.
Anyway, Bootstrap would need a cygwin rule for this.
I also have an issue with mingw64 gcc in cygwin. Here is the log:
/usr/lib/gcc/x86_64-w64-mingw32/6.4.0/../../../../x86_64-w64-mingw32/bin/ld: skipping incompatible /usr/x86_64-w64-mingw32/sys-root/mingw/lib/libmingw32.a when searching for -lmingw32
/usr/lib/gcc/x86_64-w64-mingw32/6.4.0/../../../../x86_64-w64-mingw32/bin/ld: skipping incompatible /usr/x86_64-w64-mingw32/sys-root/mingw/lib/libmingw32.a when searching for -lmingw32
/usr/lib/gcc/x86_64-w64-mingw32/6.4.0/../../../../x86_64-w64-mingw32/bin/ld: skipping incompatible /usr/x86_64-w64-mingw32/sys-root/mingw/lib/libmingw32.a when searching for -lmingw32
/usr/lib/gcc/x86_64-w64-mingw32/6.4.0/../../../../x86_64-w64-mingw32/bin/ld: cannot find -lmingw32

Not sure what cause this, I will look into it some more.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,6,https://github.com/premake/premake-core/pull/1111#issuecomment-394170361,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","Well, it seems to be an issue on cygwin side. If someone want to build with MinGW, they should get MinGW not from cygwin.
If someone want to look into cygwin, I had to add change

  
    
      premake-core/src/host/premake.h
    
    
         Line 20
      in
      d6dfaa3
    
  
  
    

        
          
           #if defined(__linux__) 
        
    
  


to
#if defined(__linux__) || defined(__CYGWIN__)

Anyway, that still fix an issue so I'm inclined to merge as is. I will merge this tomorrow to let the opportunity for people to disagree.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,7,https://github.com/premake/premake-core/pull/1111#issuecomment-394183813,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","I also have an issue with mingw64 gcc in cygwin. Here is the log:

Disregard this... I just forgot to add PLATFORM=x64 so it was building and looking for 32bit libraries.
I just added a fix in os_stat for MinGW32 if the curl problem is ever fixed and the Cygwin identification.
I tried to build with Cygwin for a correctly (with the PLATFORM=x64) and I currently have a seg fault on linking. Otherwise everything build.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/TurkeyMan,8,https://github.com/premake/premake-core/pull/1111#issuecomment-394544509,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","I think it is pretty safe to assume that Makefiles on Windows are used with MinGW but just wanted to confirm it.

I'd like to think that's not a reasonable assumption; msc should work with makefiles too, but it's definitely not used often.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,9,https://github.com/premake/premake-core/pull/1111#issuecomment-394621959,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","I'd like to think that's not a reasonable assumption; msc should work with makefiles too, but it's definitely not used often.

One thing to consider is that Premake generated Makefiles cannot be used with NMake. So we would be talking about using a MinGW/Cygwin makefile binary to run a msc Makefile.
However, I agree that it's a somewhat bold assumption but I didn't see an alternative.
I never used MinGW nor Cygwin so this is a result of some hacking around on my part.
If someone want to take this on, I'd be grateful. Otherwise, I think I need to take another look at this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/TurkeyMan,10,https://github.com/premake/premake-core/pull/1111#issuecomment-395926032,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","So we would be talking about using a MinGW/Cygwin makefile binary to run a msc Makefile.

That's entirely feasible. Although supporting nmake is something I'd like to clean up too one day!
Yeah, I'm not happy with the assumption. It's rarely used, so I have no doubt that when it's committed, it'll 'stick', and it'll be that way forever :P",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,11,https://github.com/premake/premake-core/pull/1111#issuecomment-406366969,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","Finally some time to look into this.
After some thoughts, I'd say that MinGW should be handled as a toolset.
In the same way you can build either with gcc or clang on Linux, you should be able to build with cl or MinGW on Windows with a Makefile. Well not really in the same way as MinGW and cl can't use the same options like gcc and clang does.
This way, the bootstrap can just use --cc=mingw.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/tdesveauxPKFX,12,https://github.com/premake/premake-core/pull/1111#issuecomment-406433643,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","So, the issue with MinGW32 come from luasocket.

wsocket.c
In file included from ../../binmodules/luasocket/src/wsocket.h:11:0,
from ../../binmodules/luasocket/src/socket.h:18,
from ../../binmodules/luasocket/src/wsocket.c:10:
../../binmodules/luasocket/src/wsocket.c: In function 'socket_gaistrerror':
../../binmodules/luasocket/src/wsocket.c:417:14: error: 'ERROR_NOT_ENOUGH_MEMORY' undeclared (first use in this function)
case EAI_MEMORY: return PIE_MEMORY;
^
../../binmodules/luasocket/src/wsocket.c:417:14: note: each undeclared identifier is reported only once for each function it appears in
luasocket.make:210: recipe for target 'obj/x86/Release/luasocket/wsocket.o' failed

The related github issue I was talking about last time: curl/curl#2361.
I'm giving up on MinGW32, so I think this PR is complete as is, just waiting on an approval (especially from @TurkeyMan).
If someone ever take up to make MinGW32 work, there is an issue with how the __declspec(dllexport) is declared. It is declared in the makefile and Premake escape the parenthesis which cause the build to fail.
I also removed the Cygwin change as it was bothering me and I feel (if someone ever want to make Cygwin work) that it should be a system so should be on a separate PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/samsinsane,13,https://github.com/premake/premake-core/pull/1111#issuecomment-411981600,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.",@tdesveauxPKFX @TurkeyMan are we good to merge this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1111,2018-06-02T23:51:41Z,2020-03-30T22:02:23Z,2020-03-30T22:02:23Z,CLOSED,False,26,8,7,https://github.com/tdesveauxPKFX,Fix building Premake using mingw,2,[],https://github.com/premake/premake-core/pull/1111,https://github.com/starkos,14,https://github.com/premake/premake-core/pull/1111#issuecomment-606274715,"Only works with MinGW64 due to an error in luasocket.
I'd appreciate if someone that have used MinGW before could take a look.","I rebased this to master, made some additional fixes, and created PR #1420. It isn't perfect, but it does provide a build path for MinGW users. Thanks to @tdesveaux for doing the hard parts.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1112,2018-06-04T23:57:48Z,2019-10-14T15:14:37Z,2019-10-14T15:14:38Z,CLOSED,False,118,11,6,https://github.com/TurkeyMan,Android fixes from bliz,5,[],https://github.com/premake/premake-core/pull/1112,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1112,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1112,2018-06-04T23:57:48Z,2019-10-14T15:14:37Z,2019-10-14T15:14:38Z,CLOSED,False,118,11,6,https://github.com/TurkeyMan,Android fixes from bliz,5,[],https://github.com/premake/premake-core/pull/1112,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1112#issuecomment-394788611,,"@tvandijck It was getting out of hand... something had to be done >_<
I was not responsible for any of these changes (I make changes to github first, bliz second), and there's quite a few in here that I'm not sure about the intent. Kinda hard to know what should be pushed back or not.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1112,2018-06-04T23:57:48Z,2019-10-14T15:14:37Z,2019-10-14T15:14:38Z,CLOSED,False,118,11,6,https://github.com/TurkeyMan,Android fixes from bliz,5,[],https://github.com/premake/premake-core/pull/1112,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1112#issuecomment-411981132,,@TurkeyMan have you had a chance to fix this up?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1112,2018-06-04T23:57:48Z,2019-10-14T15:14:37Z,2019-10-14T15:14:38Z,CLOSED,False,118,11,6,https://github.com/TurkeyMan,Android fixes from bliz,5,[],https://github.com/premake/premake-core/pull/1112,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1112#issuecomment-541739448,,"I think this one needs to be closed. It looks like some of the issues it addresses have already been fixed in other PRs, and there hasn't been any movement here.
Happy to see this one re-opened, but the individual fixes really should be broken out into separate PRs so they can be approved independently. Going forward, I'll be encouraging more pushback in that direction.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1113,2018-06-07T01:13:29Z,2018-06-09T00:22:38Z,2018-06-11T20:58:44Z,MERGED,True,34,15,3,https://github.com/TurkeyMan,Support buildaction for C++ projects,1,[],https://github.com/premake/premake-core/pull/1113,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1113,"Had to remove 'allowed', since the list of possible build actions is extensible and kinda arbitrary.","Had to remove 'allowed', since the list of possible build actions is extensible and kinda arbitrary.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1113,2018-06-07T01:13:29Z,2018-06-09T00:22:38Z,2018-06-11T20:58:44Z,MERGED,True,34,15,3,https://github.com/TurkeyMan,Support buildaction for C++ projects,1,[],https://github.com/premake/premake-core/pull/1113,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1113#issuecomment-395512533,"Had to remove 'allowed', since the list of possible build actions is extensible and kinda arbitrary.","Yeah, it probably needs to result in None if a bad action name name was given.
I think C# also has an arbitrary/extensible set of buildactions just the same as C++ no?
One lame thing about the C# build actions is that the existing list of actions are MAPPED to the real action names. I think C# should accept the real action names, and not re-name them as it has.
Also, I think the C# code should really be refactored into rules, just like the C++ project code.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1113,2018-06-07T01:13:29Z,2018-06-09T00:22:38Z,2018-06-11T20:58:44Z,MERGED,True,34,15,3,https://github.com/TurkeyMan,Support buildaction for C++ projects,1,[],https://github.com/premake/premake-core/pull/1113,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1113#issuecomment-395518192,"Had to remove 'allowed', since the list of possible build actions is extensible and kinda arbitrary.","It's already handled: https://github.com/premake/premake-core/blob/master/src/tools/dotnet.lua#L63
If buildaction is given some value that isn't supported, it may end out with None, which is what the new C++ implementation does.
That said, there's also a bunch of other logic and matching going on in that code for other conditions, but it wouldn't be right to change any of that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1113,2018-06-07T01:13:29Z,2018-06-09T00:22:38Z,2018-06-11T20:58:44Z,MERGED,True,34,15,3,https://github.com/TurkeyMan,Support buildaction for C++ projects,1,[],https://github.com/premake/premake-core/pull/1113,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/1113#issuecomment-395518481,"Had to remove 'allowed', since the list of possible build actions is extensible and kinda arbitrary.",I'll update the wiki to document the removed 'allowed' fields when this merges.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1113,2018-06-07T01:13:29Z,2018-06-09T00:22:38Z,2018-06-11T20:58:44Z,MERGED,True,34,15,3,https://github.com/TurkeyMan,Support buildaction for C++ projects,1,[],https://github.com/premake/premake-core/pull/1113,https://github.com/TurkeyMan,5,https://github.com/premake/premake-core/pull/1113#issuecomment-395552733,"Had to remove 'allowed', since the list of possible build actions is extensible and kinda arbitrary.","Amended with a unit-test, cus I'm a stylish guy like that ;)",True,{'LAUGH': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1115,2018-06-08T21:57:32Z,2018-06-14T12:26:37Z,2018-06-14T12:29:22Z,MERGED,True,28,382,14,https://github.com/redorav,Remove Xbox 360 code from core to move and expand onto a standalone module,1,[],https://github.com/premake/premake-core/pull/1115,https://github.com/redorav,1,https://github.com/premake/premake-core/pull/1115,I restarted the PR to have a clean start. This just deletes the code from core and I've created a new repository where I'll put the module soon.,I restarted the PR to have a clean start. This just deletes the code from core and I've created a new repository where I'll put the module soon.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1115,2018-06-08T21:57:32Z,2018-06-14T12:26:37Z,2018-06-14T12:29:22Z,MERGED,True,28,382,14,https://github.com/redorav,Remove Xbox 360 code from core to move and expand onto a standalone module,1,[],https://github.com/premake/premake-core/pull/1115,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1115#issuecomment-395925189,I restarted the PR to have a clean start. This just deletes the code from core and I've created a new repository where I'll put the module soon.,Wow. There's more x360 code than I thought! ;),True,{}
premake/premake-core,https://github.com/premake/premake-core,1117,2018-06-15T08:44:00Z,2018-08-22T12:36:05Z,2018-08-22T13:38:27Z,MERGED,True,35,2,2,https://github.com/sp-jordi-vilalta,Fix Xcode autocompletion with excluded files,4,[],https://github.com/premake/premake-core/pull/1117,https://github.com/sp-jordi-vilalta,1,https://github.com/premake/premake-core/pull/1117,"Xcode's autocompletion gets disabled when a file is added to the exclude list. Unfortunately, the compilation units module adds the ExcludeFromBuild flag to all the source files, and the Xcode module translates it into adding them to the Xcode exclude list.
This commit checks if a file must be excluded in all the configurations and in that case it removes the file from the target, so there's no need to add it to any exclusion list (letting Xcode index the file). In case a file is excluded in just some configurations, it prints a warning and keeps the old behavior for that file.","Xcode's autocompletion gets disabled when a file is added to the exclude list. Unfortunately, the compilation units module adds the ExcludeFromBuild flag to all the source files, and the Xcode module translates it into adding them to the Xcode exclude list.
This commit checks if a file must be excluded in all the configurations and in that case it removes the file from the target, so there's no need to add it to any exclusion list (letting Xcode index the file). In case a file is excluded in just some configurations, it prints a warning and keeps the old behavior for that file.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1118,2018-06-18T17:47:28Z,2018-06-25T18:53:22Z,2018-06-26T21:32:00Z,MERGED,True,24,4,2,https://github.com/tdesveauxPKFX,gmake2: fix cpp perfileflags,2,[],https://github.com/premake/premake-core/pull/1118,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1118,"ref: #1116
Fix two of three issues mentioned:

perFileFlags not using toolset getcxxflags on cpp files
makeVarName was local and thus was a pain when overriding perFileFlags.","ref: #1116
Fix two of three issues mentioned:

perFileFlags not using toolset getcxxflags on cpp files
makeVarName was local and thus was a pain when overriding perFileFlags.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1119,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.","buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1119#issuecomment-400467054,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.","Looks fine to me, will merge once updated to master.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1119#issuecomment-401135521,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.",I added additional work on the end.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/TurkeyMan,4,https://github.com/premake/premake-core/pull/1119#issuecomment-403960322,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.",I'm just trying to chase down the author for comment on those points...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1119#issuecomment-411980426,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.",@TurkeyMan were you able to catch up with the author?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1119#issuecomment-541742258,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.",@TurkeyMan - what's the status on this one? Looks like there was some follow-up that may have stalled?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1119,2018-06-19T22:18:06Z,2019-10-21T20:07:16Z,2019-10-21T20:07:16Z,CLOSED,False,214,21,4,https://github.com/TurkeyMan,Fix C# buildaction,2,[],https://github.com/premake/premake-core/pull/1119,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1119#issuecomment-544685246,"buildaction should be able to override what the file extension says.
This also generalises support for buildaction to complement the recent change to support it in C/C++ projects.",I'm going to go ahead and close this one as stalled for now. Feel free to reopen if/when you get a chance to review.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1125,2018-06-28T18:47:00Z,2018-07-10T20:46:17Z,2018-07-17T23:28:21Z,MERGED,True,2,2,1,https://github.com/TurkeyMan,Swap order of applying project specific config,1,[],https://github.com/premake/premake-core/pull/1125,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1125,"the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations","the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations",True,{}
premake/premake-core,https://github.com/premake/premake-core,1125,2018-06-28T18:47:00Z,2018-07-10T20:46:17Z,2018-07-17T23:28:21Z,MERGED,True,2,2,1,https://github.com/TurkeyMan,Swap order of applying project specific config,1,[],https://github.com/premake/premake-core/pull/1125,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1125#issuecomment-401221581,"the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations","I'm not quite following what you're saying, are you able to provide a small snippet that triggers issue?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1125,2018-06-28T18:47:00Z,2018-07-10T20:46:17Z,2018-07-17T23:28:21Z,MERGED,True,2,2,1,https://github.com/TurkeyMan,Swap order of applying project specific config,1,[],https://github.com/premake/premake-core/pull/1125,https://github.com/TurkeyMan,3,https://github.com/premake/premake-core/pull/1125#issuecomment-403647804,"the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations",@bliz-jurecka care to elaborate the problem case? :),True,{}
premake/premake-core,https://github.com/premake/premake-core,1125,2018-06-28T18:47:00Z,2018-07-10T20:46:17Z,2018-07-17T23:28:21Z,MERGED,True,2,2,1,https://github.com/TurkeyMan,Swap order of applying project specific config,1,[],https://github.com/premake/premake-core/pull/1125,https://github.com/bliz-jurecka,4,https://github.com/premake/premake-core/pull/1125#issuecomment-403658417,"the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations","Hey guys,
in context.mergeFilters the terms are always overridden (except tags) for anything that is provided in both the context and source.
""system"" is added to all project configs in the addCommonContextFilters function.
so in the case of a config that wants to change system then use that to add specific settings the value will always be the os.target() value ( use of --os does override this behavior)
a code example would be as follows.
workspace ""premaketest""
    configurations { ""Debug"", ""Release"" }

    if string.match(_ACTION,'vs*') then
        platforms { 'x86', 'x86_64', 'ARM' }
    end

    filter { 'platforms:ARM' }
        system 'android'
        toolset 'clang'
        toolchainversion(iif(_ACTION >= ""vs2015"", '3.8', '3.6'))

    filter { 'platforms:x86_64' }
        system 'windows'
    
    filter { 'platforms:x86' }
        system 'windows'
        
    filter {}

    location ( _OPTIONS[""to""] )
    cppdialect 'C++11'
    cdialect 'C11'

    exceptionhandling ""Off""
    floatingpoint ""Fast""
    rtti ""Off""
    vectorextensions ""SSE2""
    symbols ""On""
    warnings ""Extra""

    flags { ""FatalWarnings"", ""MultiProcessorCompile"" }

    filter { ""configurations:Debug"" }
        defines { ""_DEBUG"" }
        optimize ""Off""

    filter { ""configurations:Release"" }
        defines { ""NDEBUG"" }
        optimize ""On""

dofile ""src/premake5.lua""
project 'testApp'
    kind 'StaticLib'

    includedirs {
        '../include',
        '.'
    }

    files {
        '../include/**.h',
        '../include/**.inl',
        '**.h',
        '**.c',
        '**.cpp',
        '**.mm',
        '**.m'
    }

    filter { 'system:windows' }
        systemversion ""10.0.15063.0""

    filter { 'system:windows', 'files:not win32*' }
        flags 'ExcludeFromBuild'

    filter { 'system:android', 'files:not android**' }
        flags 'ExcludeFromBuild'
In this example the workspace defines the system to use for a specific platform and the project file changes file config properties based on the system that is in use.
when this change is not present the project level version of ""system"" is going to override the platform level setting. This also enables multi platform solution files to be created as the ""system"" value can be used to switch out what is compiled when and with what specific configuration.
Let me know if there are still questions.
have a nice day.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1125,2018-06-28T18:47:00Z,2018-07-10T20:46:17Z,2018-07-17T23:28:21Z,MERGED,True,2,2,1,https://github.com/TurkeyMan,Swap order of applying project specific config,1,[],https://github.com/premake/premake-core/pull/1125,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1125#issuecomment-403675873,"the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations","@bliz-jurecka thanks for that explanation, I think I've encountered this before and figured it was intended behaviour. I'm happy for this to go through, but I think that @starkos should probably weigh in before it gets merged just in case there's a known problem with swapping these around.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1125,2018-06-28T18:47:00Z,2018-07-10T20:46:17Z,2018-07-17T23:28:21Z,MERGED,True,2,2,1,https://github.com/TurkeyMan,Swap order of applying project specific config,1,[],https://github.com/premake/premake-core/pull/1125,https://github.com/TurkeyMan,6,https://github.com/premake/premake-core/pull/1125#issuecomment-403959448,"the config needs to be resolved based on the isolated config|platform pair
The issue this is solving is that anything that changes ""system"" as part of the
config|platform pair would not be applied to resolve of per file config due to
prj.system being a table that contains the current os system and when the order
of application was in the original order the project pair settings would be
overriden by the generic prj settings which are set as defaults in other locations","FWIW, I felt the same way with this patch, and Jason went through it in depth with me. It seems right, or... at least, superior.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1126,2018-06-28T18:47:11Z,2018-07-09T23:07:07Z,2018-07-17T23:28:39Z,MERGED,True,6,3,1,https://github.com/TurkeyMan,vpath android.link fix,1,[],https://github.com/premake/premake-core/pull/1126,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1126,"The issue that this solves is that if vpaths is used to resolve the
android needed file paths when they are referenced from other directories
within the directory structure but not considered external files.","The issue that this solves is that if vpaths is used to resolve the
android needed file paths when they are referenced from other directories
within the directory structure but not considered external files.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1131,2018-07-05T11:33:03Z,2018-09-13T12:41:57Z,2018-09-13T12:41:57Z,CLOSED,False,222,61,1,https://github.com/Dandielo,Fixed custom build rules loosing their dependency information when building up-to-date projects / files.,6,[],https://github.com/premake/premake-core/pull/1131,https://github.com/Dandielo,1,https://github.com/premake/premake-core/pull/1131,"Fixes invalid behaviour while using custom build rules generated with premake5.
If a build was forced on a up-to-date project, or no changes where reported for the custom build rule, the tlog files associated with the rule would be cleared from any dependency information.
After that happens changing files which should be set as 'additional dependencies' wouldn't trigger a rebuild of files associated with custom build rules.","Fixes invalid behaviour while using custom build rules generated with premake5.
If a build was forced on a up-to-date project, or no changes where reported for the custom build rule, the tlog files associated with the rule would be cleared from any dependency information.
After that happens changing files which should be set as 'additional dependencies' wouldn't trigger a rebuild of files associated with custom build rules.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1131,2018-07-05T11:33:03Z,2018-09-13T12:41:57Z,2018-09-13T12:41:57Z,CLOSED,False,222,61,1,https://github.com/Dandielo,Fixed custom build rules loosing their dependency information when building up-to-date projects / files.,6,[],https://github.com/premake/premake-core/pull/1131,https://github.com/Dandielo,2,https://github.com/premake/premake-core/pull/1131#issuecomment-402783124,"Fixes invalid behaviour while using custom build rules generated with premake5.
If a build was forced on a up-to-date project, or no changes where reported for the custom build rule, the tlog files associated with the rule would be cleared from any dependency information.
After that happens changing files which should be set as 'additional dependencies' wouldn't trigger a rebuild of files associated with custom build rules.","Okay, i found one new issue with this one. Now it does look like it properly checks timestamps of all input files, but it does also mark the project as always out of date. Will update this requests soon",True,{}
premake/premake-core,https://github.com/premake/premake-core,1131,2018-07-05T11:33:03Z,2018-09-13T12:41:57Z,2018-09-13T12:41:57Z,CLOSED,False,222,61,1,https://github.com/Dandielo,Fixed custom build rules loosing their dependency information when building up-to-date projects / files.,6,[],https://github.com/premake/premake-core/pull/1131,https://github.com/Dandielo,3,https://github.com/premake/premake-core/pull/1131#issuecomment-403012705,"Fixes invalid behaviour while using custom build rules generated with premake5.
If a build was forced on a up-to-date project, or no changes where reported for the custom build rule, the tlog files associated with the rule would be cleared from any dependency information.
After that happens changing files which should be set as 'additional dependencies' wouldn't trigger a rebuild of files associated with custom build rules.","Okay, so generally the problem was that msbuild (visual studio) does not like when TLog files store a relative path. So I've managed to transform all relative paths to fullpaths just using their xml api.
I've also added a condition to write to a TLog file only if the given lines which we want to write do not exist there already.
Now rules always properly see changes to any input dependency, and do not cause a out-of-date false-positive.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1131,2018-07-05T11:33:03Z,2018-09-13T12:41:57Z,2018-09-13T12:41:57Z,CLOSED,False,222,61,1,https://github.com/Dandielo,Fixed custom build rules loosing their dependency information when building up-to-date projects / files.,6,[],https://github.com/premake/premake-core/pull/1131,https://github.com/Dandielo,4,https://github.com/premake/premake-core/pull/1131#issuecomment-411999521,"Fixes invalid behaviour while using custom build rules generated with premake5.
If a build was forced on a up-to-date project, or no changes where reported for the custom build rule, the tlog files associated with the rule would be cleared from any dependency information.
After that happens changing files which should be set as 'additional dependencies' wouldn't trigger a rebuild of files associated with custom build rules.","Sure, I will add the tests and squish the commits, just atm can't tell when it's gonna be.
Anyway thanks for the review",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1132,2018-07-06T11:48:53Z,2018-08-13T10:30:03Z,2019-05-04T15:07:01Z,MERGED,True,87,81,2,https://github.com/tdesveauxPKFX,Refactor path.normalize and handle path ending with .,3,[],https://github.com/premake/premake-core/pull/1132,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1132,Related to #1121,Related to #1121,True,{}
premake/premake-core,https://github.com/premake/premake-core,1132,2018-07-06T11:48:53Z,2018-08-13T10:30:03Z,2019-05-04T15:07:01Z,MERGED,True,87,81,2,https://github.com/tdesveauxPKFX,Refactor path.normalize and handle path ending with .,3,[],https://github.com/premake/premake-core/pull/1132,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1132#issuecomment-403019457,Related to #1121,"Also,

  
    
      premake-core/src/host/path_normalize.c
    
    
        Lines 108 to 127
      in
      ba3b2eb
    
  
  
    

        
          
           while (*endPtr) { 
        

        
          
           	/* remove any leading ""./"" sequences */ 
        

        
          
           	while (strncmp(readPtr, ""./"", 2) == 0) { 
        

        
          
           		readPtr += 2; 
        

        
          
           	} 
        

        
          
            
        

        
          
           	// find the end of sub path 
        

        
          
           	while (*endPtr && !is_space(*endPtr)) { 
        

        
          
           		++endPtr; 
        

        
          
           	} 
        

        
          
            
        

        
          
           	writePtr = normalize_substring(readPtr, endPtr, writePtr); 
        

        
          
            
        

        
          
           	// skip any white spaces between sub paths 
        

        
          
           	while (*endPtr && is_space(*endPtr)) { 
        

        
          
           		*(writePtr++) = *(endPtr++); 
        

        
          
           	} 
        

        
          
            
        

        
          
           	readPtr = endPtr; 
        

        
          
           } 
        
    
  


Not sure what is the goal here, I find it somewhat dangerous to assume that a space is a path separator.
Unlikely but this path
C:/ParentDir/ dirStartingWithSpace
would result in
C:/ParentDir dirStartingWithSpace.
I saw it was used for build commands processing but I think commands should be properly parsed and each arguments be normalized separately.
Are there other cases where this is useful?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1136,2018-07-17T21:51:49Z,2018-07-19T10:31:57Z,2018-07-19T10:31:57Z,MERGED,True,29,2,4,https://github.com/Gaztin,Support server paths,3,[],https://github.com/premake/premake-core/pull/1136,https://github.com/Gaztin,1,https://github.com/premake/premake-core/pull/1136,"For context, see #1129
TLDR: Server paths (i.e. ""//server/files"") were treated like any non-normalized path with duplicate slashes.","For context, see #1129
TLDR: Server paths (i.e. ""//server/files"") were treated like any non-normalized path with duplicate slashes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1137,2018-07-17T23:35:20Z,2018-08-10T05:00:15Z,2018-12-05T02:48:08Z,MERGED,True,42,3,2,https://github.com/TurkeyMan,Fix gmake multiple-output rule issue.,1,[],https://github.com/premake/premake-core/pull/1137,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1137,"Rules with multiple outputs were emitting rules in the form:
a b c: src
  build src -o a b c
Which is incorrect, because it will execute the rule many times (once for each output).
I think it's intended to describe that a rule produces multiple outputs, and this patch improves the modelling of that relationship in make to read like:
a: src
  build src -o a b c
b c: a
This isn't the best implementation, but it's not just plain broken, and others are much more complicated.
I left some TODO notes for future improvement.","Rules with multiple outputs were emitting rules in the form:
a b c: src
  build src -o a b c
Which is incorrect, because it will execute the rule many times (once for each output).
I think it's intended to describe that a rule produces multiple outputs, and this patch improves the modelling of that relationship in make to read like:
a: src
  build src -o a b c
b c: a
This isn't the best implementation, but it's not just plain broken, and others are much more complicated.
I left some TODO notes for future improvement.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1140,2018-07-26T23:28:42Z,2018-07-31T11:26:03Z,2018-07-31T11:26:03Z,CLOSED,False,5,5,5,https://github.com/carusogabriel,Remove extra semicolons,1,[],https://github.com/premake/premake-core/pull/1140,https://github.com/carusogabriel,1,https://github.com/premake/premake-core/pull/1140,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1140,2018-07-26T23:28:42Z,2018-07-31T11:26:03Z,2018-07-31T11:26:03Z,CLOSED,False,5,5,5,https://github.com/carusogabriel,Remove extra semicolons,1,[],https://github.com/premake/premake-core/pull/1140,https://github.com/carusogabriel,2,https://github.com/premake/premake-core/pull/1140#issuecomment-409140739,,"@samsinsane I did in PHP‚Äôs Core, but, as we use it as a library there, we came with the same issue. Maybe we can find where these files come from and remove them?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1140,2018-07-26T23:28:42Z,2018-07-31T11:26:03Z,2018-07-31T11:26:03Z,CLOSED,False,5,5,5,https://github.com/carusogabriel,Remove extra semicolons,1,[],https://github.com/premake/premake-core/pull/1140,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1140#issuecomment-409182883,,"curl has been fixed
libzip was probably modified by someone accidentally. I see no reason to modify it again.
The mbedtls files are test files so I see no reason to modify them, and they haven't been updated in the main repo; here, here, and here.

I'm kind of inclined to just leave our copies as they are.",True,{'THUMBS_UP': ['https://github.com/carusogabriel']}
premake/premake-core,https://github.com/premake/premake-core,1142,2018-07-27T18:52:53Z,2018-08-10T04:59:51Z,2018-12-05T02:47:58Z,MERGED,True,37,2,4,https://github.com/TurkeyMan,Support for CSDialect,1,[],https://github.com/premake/premake-core/pull/1142,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1142,@Evilsmevil This is your great work in the wild...,@Evilsmevil This is your great work in the wild...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1143,2018-07-31T06:55:10Z,2018-07-31T09:49:25Z,2018-07-31T10:09:32Z,MERGED,True,165,7,2,https://github.com/tempura-sukiyaki,Fix `targetextension` in xcode4,2,[],https://github.com/premake/premake-core/pull/1143,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1143,Add support for ConsoleApp.,Add support for ConsoleApp.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1143,2018-07-31T06:55:10Z,2018-07-31T09:49:25Z,2018-07-31T10:09:32Z,MERGED,True,165,7,2,https://github.com/tempura-sukiyaki,Fix `targetextension` in xcode4,2,[],https://github.com/premake/premake-core/pull/1143,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1143#issuecomment-409160766,Add support for ConsoleApp.,Thanks!,True,{'LAUGH': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1144,2018-07-31T11:59:59Z,2018-08-01T05:16:49Z,2018-08-01T10:27:27Z,MERGED,True,240,21,7,https://github.com/tempura-sukiyaki,Add `sharedlibtype` in xcode4,3,[],https://github.com/premake/premake-core/pull/1144,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1144,Add support for CocoaBundle(.bundle) and Framework(.framework).,Add support for CocoaBundle(.bundle) and Framework(.framework).,True,{}
premake/premake-core,https://github.com/premake/premake-core,1144,2018-07-31T11:59:59Z,2018-08-01T05:16:49Z,2018-08-01T10:27:27Z,MERGED,True,240,21,7,https://github.com/tempura-sukiyaki,Add `sharedlibtype` in xcode4,3,[],https://github.com/premake/premake-core/pull/1144,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1144#issuecomment-409528843,Add support for CocoaBundle(.bundle) and Framework(.framework).,Nice!,True,{'LAUGH': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1145,2018-08-01T08:37:45Z,2018-08-10T04:59:26Z,2018-08-13T02:54:22Z,MERGED,True,127,20,4,https://github.com/tempura-sukiyaki,Add support `kind:Utility` in xcode4,1,[],https://github.com/premake/premake-core/pull/1145,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1145,kind:Utility is output as PBXAggregateTarget.,kind:Utility is output as PBXAggregateTarget.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1145,2018-08-01T08:37:45Z,2018-08-10T04:59:26Z,2018-08-13T02:54:22Z,MERGED,True,127,20,4,https://github.com/tempura-sukiyaki,Add support `kind:Utility` in xcode4,1,[],https://github.com/premake/premake-core/pull/1145,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1145#issuecomment-409529090,kind:Utility is output as PBXAggregateTarget.,"I'm willing to defer‚Ä¶these are good contributions, and they can always be fixed up.",True,"{'THUMBS_UP': ['https://github.com/samsinsane'], 'LAUGH': ['https://github.com/tempura-sukiyaki']}"
premake/premake-core,https://github.com/premake/premake-core,1145,2018-08-01T08:37:45Z,2018-08-10T04:59:26Z,2018-08-13T02:54:22Z,MERGED,True,127,20,4,https://github.com/tempura-sukiyaki,Add support `kind:Utility` in xcode4,1,[],https://github.com/premake/premake-core/pull/1145,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1145#issuecomment-409531390,kind:Utility is output as PBXAggregateTarget.,"@starkos There are unit tests in the commit already, was there a specific thing you wanted them to test?",True,{'LAUGH': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1148,2018-08-13T10:12:28Z,2018-09-10T11:27:09Z,2018-09-10T11:27:09Z,CLOSED,False,273,0,3,https://github.com/tempura-sukiyaki,Add support for `buildcommand` in xcode4,1,[],https://github.com/premake/premake-core/pull/1148,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1148,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/mihaisebea,1,https://github.com/premake/premake-core/pull/1159,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else",True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1159#issuecomment-419031997,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","@starkos any thoughts? I feel that if there's any kind of return value, all of the functions should be able to return errors. Additionally, knowing which function failed would probably be required, return ret, ""<function> failed"" or something?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1159#issuecomment-419713734,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else",@neo2buha it looks like you've pushed the pepperfish commit into this branch.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/mihaisebea,4,https://github.com/premake/premake-core/pull/1159#issuecomment-419812366,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","Thanks @saminsane.. I didn't noticed it..
""grumbles something something git""
""grumbles back in my day we were doing version control on 1.44Mb disks""
""googles how to backout a commit in git""",True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/mihaisebea,5,https://github.com/premake/premake-core/pull/1159#issuecomment-425665518,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else",Does anyone else has any thoughts on this :D ?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/tdesveauxPKFX,6,https://github.com/premake/premake-core/pull/1159#issuecomment-425666736,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","As @samsinsane, I feel if you return a result code here, it should do so for every function but it makes little sense for the other ones. At least not returning nil if there is not an execute execute function would be better.
I do not use this feature personally, what are you reasons to not handle errors inside the execute?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/mihaisebea,7,https://github.com/premake/premake-core/pull/1159#issuecomment-425671554,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","@tdesveauxPKFX Thanks for the quick feedback
Not sure I understand ""At least not returning nil if there is not an execute ""
I think this is what i'm doing ...
		if a.execute then
			return ret
		end

or am I missing something ?
I use this feature because I have scripts that I run on a build server so I want premake to return an error code so the build can fail if something goes wrong.  ""handle errors inside the execute?"" Is there any other way to make premake return an error code ?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/tdesveauxPKFX,8,https://github.com/premake/premake-core/pull/1159#issuecomment-425734037,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","(my comment was not clear, hope this one will be better)
With you current implementation, if the action does not have an execute function, action.call will return nil.
Whereas, if it does, it will return whatever the execute function returns (I assume an int in your case?). This create a discrepancy between actions.
Although we could consider nil as the ""good"" return value.
As for handling errors inside execute, I use premake.error which raise an exception. (I think you can catch it with pcall if needed, but never tried myself).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1159,2018-09-05T14:15:29Z,2018-09-30T18:57:08Z,2018-09-30T18:57:08Z,CLOSED,False,5,2,1,https://github.com/mihaisebea,! allow an action to return an error code,3,[],https://github.com/premake/premake-core/pull/1159,https://github.com/mihaisebea,9,https://github.com/premake/premake-core/pull/1159#issuecomment-425742929,"since I'm using premake to do some scripting it's useful for some actions to return error code
let me know if this can break anything else","never mind this will not work ...
I had this change in an older version of premake and just backported it here ...
But i now noticed that _premake_main will always return 0
function _premake_main()
		p.callArray(m.elements)
		return 0
	end 

I'll give premake error a try and see if it works !
Thanks !
I'll close this !",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1160,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/WorldofBay,2,https://github.com/premake/premake-core/pull/1160#issuecomment-419080457,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","I changed the test and added one for a custom separator.
I have no idea what to capture in the gmake2 version though. Maybe someone else can help?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1160#issuecomment-425669761,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","I guess you can test it like this
--- a/modules/gmake2/tests/test_gmake2_file_rules.lua
+++ b/modules/gmake2/tests/test_gmake2_file_rules.lua
@@ -37,8 +37,14 @@
                        switch = ""-p2""
                }

+               propertydefinition {
+                       name = ""TestPropertySeparator"",
+                       kind = ""list"",
+                       separator = "",""
+               }
+
                buildmessage 'Rule-ing %{file.name}'
-               buildcommands 'dorule %{TestProperty} %{TestProperty2} ""%{file.path}""'
+               buildcommands 'dorule %{TestProperty} %{TestProperty2} %{TestPropertySeparator} ""%{file.path}""'
                buildoutputs { ""%{file.basename}.obj"" }

                wks = test.createWorkspace()
@@ -284,3 +290,26 @@ test2.obj: test2.rule
        $(SILENT) dorule -p -p2 ""test2.rule""
                ]]
        end
+
+
+       function suite.propertydefinitionSeparator()
+
+               rules { ""TestRule"" }
+
+               files { ""test.rule"", ""test2.rule"" }
+
+               testRuleVars { TestPropertySeparator = { ""testValue1"", ""testValue2"" } }
+
+               prepare()
+               test.capture [[
+# File Rules
+# #############################################
+
+test.obj: test.rule
+       @echo Rule-ing test.rule
+       $(SILENT) dorule   testValue1,testValue2 ""test.rule""
+test2.obj: test2.rule
+       @echo Rule-ing test2.rule
+       $(SILENT) dorule   testValue1,testValue2 ""test2.rule""
+               ]]
+       end",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/WorldofBay,4,https://github.com/premake/premake-core/pull/1160#issuecomment-427834987,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","i added your test and one for no separator
for some reason the actual output without separator adds an \
for now i add it to the test though i don't know if that is right",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/WorldofBay,5,https://github.com/premake/premake-core/pull/1160#issuecomment-427862065,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","updated my branch now, all tests pass again",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1160#issuecomment-430630109,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","The changes look good, are you able to squash the commits? Once squashed it should be good to merge, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/WorldofBay,7,https://github.com/premake/premake-core/pull/1160#issuecomment-430909446,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","first time for me, so i'm unsure what i should do with the merged commits.
squash, keep, drop?
btw do i have to update the branch before (7 commits behind)?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/1160#issuecomment-430943997,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.","You don't need to update the branch, you can rebase it if you'd like.
As for the merged commits, dropping them seems like the right thing to do here. I think squashing might pull in the changes from master, which wouldn't be weird, keeping the commit isn't the end of the world but it's kind of a useless merge since you're several commits behind master now. That's my thought process behind this, if you feel differently, I'm happy to discuss. üòÑ",True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/WorldofBay,9,https://github.com/premake/premake-core/pull/1160#issuecomment-430951200,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.",Squashed my commits and dropped the others.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1160,2018-09-05T14:31:18Z,2018-10-18T10:42:01Z,2018-10-18T11:19:50Z,MERGED,True,60,5,3,https://github.com/WorldofBay,use ';' as default separator for vs,1,[],https://github.com/premake/premake-core/pull/1160,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/1160#issuecomment-430961731,"This is a possible minimal workaround for #1157 .
Gmake2 keeps using "" "" as default list separator and VS201x gets the "";"" it needs as default. It is still changeable in propertydefinitions. The field separator still does two different things at once but now it is at least possible to use list properties in VS201x projects.",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1161,2018-09-06T09:59:37Z,2018-09-06T11:32:16Z,2018-09-06T12:11:55Z,MERGED,True,69,0,3,https://github.com/tempura-sukiyaki,Add `xcodesystemcapabilities` in xcode4,1,[],https://github.com/premake/premake-core/pull/1161,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1161,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1164,2018-09-08T21:15:44Z,2018-09-09T12:49:05Z,2018-09-09T12:49:05Z,MERGED,True,24,11,1,https://github.com/mihaisebea,! fixed pepper fish to work with lua 5.3.4,1,[],https://github.com/premake/premake-core/pull/1164,https://github.com/mihaisebea,1,https://github.com/premake/premake-core/pull/1164,"I noticed that pepperfish profiller wasn't working with lua 5.3.4 because of removal of table.getn
This pr should fixed it :)","I noticed that pepperfish profiller wasn't working with lua 5.3.4 because of removal of table.getn
This pr should fixed it :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1165,2018-09-10T07:29:01Z,2018-09-10T11:33:29Z,2018-09-10T11:33:30Z,CLOSED,False,78,0,4,https://github.com/tempura-sukiyaki,Add `stackcommitsize` and `stackreservesize` in vs2010,1,[],https://github.com/premake/premake-core/pull/1165,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1165,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1167,2018-09-10T11:32:54Z,2018-09-30T03:46:01Z,2018-10-02T11:27:30Z,MERGED,True,273,0,3,https://github.com/tempura-sukiyaki,Add support for per-file custom build commands in xcode4,1,[],https://github.com/premake/premake-core/pull/1167,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1167,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1176,2018-10-11T12:22:40Z,2018-10-12T01:01:17Z,2019-05-04T15:06:34Z,MERGED,True,16,2,2,https://github.com/tdesveauxPKFX,path.normalize: Fix when call with path surrounded with quotes,1,[],https://github.com/premake/premake-core/pull/1176,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1176,Fix #1175,Fix #1175,True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1177,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}",True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/WorldofBay,2,https://github.com/premake/premake-core/pull/1177#issuecomment-429271875,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","idk if 2 captures in 1 test are possible
i would like to add
		test.capture [[
<Category
	Name=""Custom Category"">
	<Category.DisplayName>
	  	<sys:String>Custom Category</sys:String>
	</Category.DisplayName>
</Category>
		]]
to the test to also test if the category itself is added correctly",True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1177#issuecomment-430655921,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","Off the top of my head I'm not sure if it would work, you can try it? Locally, you should be able to run bin\debug\premake5.exe test --scripts=. in the repo directory and that will run the tests with the raw Lua files instead of the embedded ones.
Also, once you've got this PR into a state you're happy with, can you please squash the commits? Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/WorldofBay,4,https://github.com/premake/premake-core/pull/1177#issuecomment-430914286,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","I'm currently using this code via premake.override and it works.
I searched through the repo for usage of ""category"" and it's used but in unrelated context in base that as far as i see it does not conflict anywhere.
It's a change in the VS_2010 module, so it doesn't affect anything outside of that. I can only really test it in VS 2015 and VS 2017 though.
It's quite helpful in the GUI then (fortran as a rule):",True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/WorldofBay,5,https://github.com/premake/premake-core/pull/1177#issuecomment-430935403,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","The test maybe can capture twice but it can't capture the <Category> tag because it skips that part of the xml. So unless you know a way to add that test, this pull request is complete as-is.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1177#issuecomment-430942079,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","I'm not sure I'm 100% following what the test needs to use, but I think something like this might work?
	function suite.categories_onStringWithCategory()
		createVar { name=""MyVar"", kind=""string"", category=""Custom Category"" }
		local r = test.getRule(""MyRule"")
		m.categories(r)
		test.capture [[
<Category
	Name=""Custom Category"">
	<Category.DisplayName>
	  	<sys:String>Custom Category</sys:String>
	</Category.DisplayName>
</Category>
		]]
The m.categories function emits the <Category> elements, while the m.properties function emits the <StringProperty> elements. You may need to do some more massaging of the test.capture but I think that's what you're after?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/WorldofBay,7,https://github.com/premake/premake-core/pull/1177#issuecomment-430945575,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}",It ... works but it demands exact indentation and also compares to the whole <Rule.Categories> tag instead of just the custom part.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1177,2018-10-12T09:38:14Z,2018-10-18T10:58:17Z,2018-10-18T11:19:45Z,MERGED,True,63,1,2,https://github.com/WorldofBay,Enable property categories in VS projects,1,[],https://github.com/premake/premake-core/pull/1177,https://github.com/WorldofBay,8,https://github.com/premake/premake-core/pull/1177#issuecomment-430952119,"Allow the usage of Categories in VS to structure properties for big rules.
Items without Category go in ""General"", also the Category ""Command Line"" is invalid.
Usage:
propertydefinition {
  name = ""O0"",
  switch = ""/O0"",
  category = ""Optimizations"",
}","Now it contains the categories test, so this pull request is complete.
Once it is merged i will edit the corresponding wiki entries.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1178,2018-10-15T09:09:53Z,2018-10-16T08:27:48Z,2018-10-16T08:27:48Z,MERGED,True,2,2,2,https://github.com/cengizIO,Avoid impl dependent multi-char constants,2,[],https://github.com/premake/premake-core/pull/1178,https://github.com/cengizIO,1,https://github.com/premake/premake-core/pull/1178,"Hello!
I was receiving this warning while compiling for linux:
src/host/premake.c: In function ‚Äòpremake_init‚Äô:
src/host/premake.c:197:36: warning: multi-character character constant [-Wmultichar]
  lua_rawseti(L, LUA_REGISTRYINDEX, 'SHIM');
                                    ^~~~~~

Instead of disabling the warning, I've decided to convert that array key to
an expression.
And I've tested with following compilers:
gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)
gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)
Thank you","Hello!
I was receiving this warning while compiling for linux:
src/host/premake.c: In function ‚Äòpremake_init‚Äô:
src/host/premake.c:197:36: warning: multi-character character constant [-Wmultichar]
  lua_rawseti(L, LUA_REGISTRYINDEX, 'SHIM');
                                    ^~~~~~

Instead of disabling the warning, I've decided to convert that array key to
an expression.
And I've tested with following compilers:
gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)
gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)
Thank you",True,{}
premake/premake-core,https://github.com/premake/premake-core,1178,2018-10-15T09:09:53Z,2018-10-16T08:27:48Z,2018-10-16T08:27:48Z,MERGED,True,2,2,2,https://github.com/cengizIO,Avoid impl dependent multi-char constants,2,[],https://github.com/premake/premake-core/pull/1178,https://github.com/WorldofBay,2,https://github.com/premake/premake-core/pull/1178#issuecomment-429849730,"Hello!
I was receiving this warning while compiling for linux:
src/host/premake.c: In function ‚Äòpremake_init‚Äô:
src/host/premake.c:197:36: warning: multi-character character constant [-Wmultichar]
  lua_rawseti(L, LUA_REGISTRYINDEX, 'SHIM');
                                    ^~~~~~

Instead of disabling the warning, I've decided to convert that array key to
an expression.
And I've tested with following compilers:
gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)
gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)
Thank you","You change the array index from 1397246285 to 305 for gcc, clang, msvc and icc. I doubt that this points at the correct value.
const Node* n = findNode(reg,((((('S' << 8) + 'H') << 8) + 'I') << 8) + 'M');
See here",True,{}
premake/premake-core,https://github.com/premake/premake-core,1178,2018-10-15T09:09:53Z,2018-10-16T08:27:48Z,2018-10-16T08:27:48Z,MERGED,True,2,2,2,https://github.com/cengizIO,Avoid impl dependent multi-char constants,2,[],https://github.com/premake/premake-core/pull/1178,https://github.com/cengizIO,3,https://github.com/premake/premake-core/pull/1178#issuecomment-429866967,"Hello!
I was receiving this warning while compiling for linux:
src/host/premake.c: In function ‚Äòpremake_init‚Äô:
src/host/premake.c:197:36: warning: multi-character character constant [-Wmultichar]
  lua_rawseti(L, LUA_REGISTRYINDEX, 'SHIM');
                                    ^~~~~~

Instead of disabling the warning, I've decided to convert that array key to
an expression.
And I've tested with following compilers:
gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)
gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)
Thank you","Good point!
However I don't think the actual value has any effect on node retrieval.
What I read from code, we're creating a node with a fixed index key and retrieving it afterwards.
Unless of course, the value was chosen to be something that won't collide with other node indexes that are < 1.3m.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1178,2018-10-15T09:09:53Z,2018-10-16T08:27:48Z,2018-10-16T08:27:48Z,MERGED,True,2,2,2,https://github.com/cengizIO,Avoid impl dependent multi-char constants,2,[],https://github.com/premake/premake-core/pull/1178,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1178#issuecomment-429886389,"Hello!
I was receiving this warning while compiling for linux:
src/host/premake.c: In function ‚Äòpremake_init‚Äô:
src/host/premake.c:197:36: warning: multi-character character constant [-Wmultichar]
  lua_rawseti(L, LUA_REGISTRYINDEX, 'SHIM');
                                    ^~~~~~

Instead of disabling the warning, I've decided to convert that array key to
an expression.
And I've tested with following compilers:
gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)
gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)
Thank you","I'd prefer that this was changed to the hex value, 0x5348494D with a comment indicating that it's equivalent to 'SHIM'.
The value is important, existing binary modules use 'SHIM' and won't work if Premake5 is using 'S' + 'H' + 'I' + 'M'. The current change will require that all existing binary modules be rebuilt against the latest version of luashim, we have no way of knowing how many binary modules our users have, if any. It's best to avoid breaking them where we can.",True,"{'THUMBS_UP': ['https://github.com/tdesveauxPKFX', 'https://github.com/catb0t', 'https://github.com/cengizIO']}"
premake/premake-core,https://github.com/premake/premake-core,1179,2018-10-17T12:20:48Z,2018-10-17T13:07:16Z,2018-10-17T13:51:26Z,MERGED,True,27,1,2,https://github.com/tempura-sukiyaki,fix `xcodebuildsettings` using false,1,[],https://github.com/premake/premake-core/pull/1179,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1179,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1180,2018-10-18T10:03:51Z,2018-10-18T12:51:52Z,2018-10-18T13:48:02Z,MERGED,True,87,17,6,https://github.com/tempura-sukiyaki,Add `os.ios` option in xcode4,3,[],https://github.com/premake/premake-core/pull/1180,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1180,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1180,2018-10-18T10:03:51Z,2018-10-18T12:51:52Z,2018-10-18T13:48:02Z,MERGED,True,87,17,6,https://github.com/tempura-sukiyaki,Add `os.ios` option in xcode4,3,[],https://github.com/premake/premake-core/pull/1180,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1180#issuecomment-430996185,,This is really cool! Thanks for this!,True,{'LAUGH': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1181,2018-10-19T09:20:18Z,2018-10-28T04:17:38Z,2019-10-20T19:31:15Z,MERGED,True,207,2,7,https://github.com/tdesveauxPKFX,Release 5.0 alpha13,8,[],https://github.com/premake/premake-core/pull/1181,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1181,"Closes #1173
Merge back the changes made for Alpha13 release.
Notable changes:

Add compilers category to some options.
Add changes.lua which create a list of merged PRs in the CHANGES.txt format.
Sort options allowed values alphabetically.","Closes #1173
Merge back the changes made for Alpha13 release.
Notable changes:

Add compilers category to some options.
Add changes.lua which create a list of merged PRs in the CHANGES.txt format.
Sort options allowed values alphabetically.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1181,2018-10-19T09:20:18Z,2018-10-28T04:17:38Z,2019-10-20T19:31:15Z,MERGED,True,207,2,7,https://github.com/tdesveauxPKFX,Release 5.0 alpha13,8,[],https://github.com/premake/premake-core/pull/1181,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1181#issuecomment-431301668,"Closes #1173
Merge back the changes made for Alpha13 release.
Notable changes:

Add compilers category to some options.
Add changes.lua which create a list of merged PRs in the CHANGES.txt format.
Sort options allowed values alphabetically.",Didn't notice the release branch was never merged back into master. Should I remove the merge of release in this branch?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1181,2018-10-19T09:20:18Z,2018-10-28T04:17:38Z,2019-10-20T19:31:15Z,MERGED,True,207,2,7,https://github.com/tdesveauxPKFX,Release 5.0 alpha13,8,[],https://github.com/premake/premake-core/pull/1181,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1181#issuecomment-431672330,"Closes #1173
Merge back the changes made for Alpha13 release.
Notable changes:

Add compilers category to some options.
Add changes.lua which create a list of merged PRs in the CHANGES.txt format.
Sort options allowed values alphabetically.","What does it look like @starkos did for alpha12? Ideally, copying that process would be best going forward? :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1181,2018-10-19T09:20:18Z,2018-10-28T04:17:38Z,2019-10-20T19:31:15Z,MERGED,True,207,2,7,https://github.com/tdesveauxPKFX,Release 5.0 alpha13,8,[],https://github.com/premake/premake-core/pull/1181,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1181#issuecomment-431812963,"Closes #1173
Merge back the changes made for Alpha13 release.
Notable changes:

Add compilers category to some options.
Add changes.lua which create a list of merged PRs in the CHANGES.txt format.
Sort options allowed values alphabetically.","I removed the merge, it looks like Github don't update the change on the PR (probably due to this https://blog.github.com/2018-10-21-october21-incident-report/) but it is correct locally.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1189,2018-11-04T17:00:24Z,2018-11-13T07:59:41Z,2019-05-04T15:06:55Z,MERGED,True,81,1,2,https://github.com/tdesveauxPKFX,Host path.normalize: Fix normalization for paths containing tokens,1,[],https://github.com/premake/premake-core/pull/1189,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1189,"Fixes #1186
I'm not 100% happy with this fix but that's the best I could come up now.","Fixes #1186
I'm not 100% happy with this fix but that's the best I could come up now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1189,2018-11-04T17:00:24Z,2018-11-13T07:59:41Z,2019-05-04T15:06:55Z,MERGED,True,81,1,2,https://github.com/tdesveauxPKFX,Host path.normalize: Fix normalization for paths containing tokens,1,[],https://github.com/premake/premake-core/pull/1189,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1189#issuecomment-437981100,"Fixes #1186
I'm not 100% happy with this fix but that's the best I could come up now.","Hey sorry for the delay,

This seems fine, but I think this function might have way too many macros now.
I might tend to overuse macro, yeah.

These are purely for self documentation. I though it better than just dropping the comparison even with comments.
This one is to avoid duplicating code.
In both case, if you think it hurts code readability, I really don't mind removing them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1189,2018-11-04T17:00:24Z,2018-11-13T07:59:41Z,2019-05-04T15:06:55Z,MERGED,True,81,1,2,https://github.com/tdesveauxPKFX,Host path.normalize: Fix normalization for paths containing tokens,1,[],https://github.com/premake/premake-core/pull/1189,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1189#issuecomment-438171313,"Fixes #1186
I'm not 100% happy with this fix but that's the best I could come up now.","Your reasoning makes sense; I personally dislike multiline macros, but I think what you've done is probably the best option. Ignore my previous comment üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1190,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/tempura-sukiyaki,2,https://github.com/premake/premake-core/pull/1190#issuecomment-437359523,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","I may not understand what you are saying correctly...
""xcodeproj"" created with ""premake"" always includes only one product (target) per project.
configurations { ""Release"" }

workspace ""Workspace"" do

¬†¬†project ""StaticLib"" do
¬†¬†¬†¬†kind ""StaticLib""
¬†¬†end

¬†¬†project ""SharedLib"" do
¬†¬†¬†¬†kind ""SharedLib""
¬†¬†end

¬†¬†project ""ConsoleApp"" do
¬†¬†¬†¬†kind ""ConsoleApp""
¬†¬†¬†¬†links {""StaticLib"", ""SharedLib""}
¬†¬†end

end
""SharedLib.xcodeproj"" created from the above script looks something like this.

""StaticLib.xcodeproj"" looks something like this.

""Products"" and ""TARGETS"" have only one item.
However, if you create ""xcodeproj"" with Xcode, one project may contain more than one product (target).

Each of these targets has completely independent project settings.
Currently there is no way to specify such ""xcodeproj"" with externalproject.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1190#issuecomment-437673181,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","My point was that instead of doing:
externalproject ""targetname@projectname""
Something like this would be better:
externalproject ""projectname""
  configmap { [""*""] = ""targetname"" }
  -- or a new API like this:
  targetmap { [""*""] = ""targetname"" }
  -- or perhaps a simpler API:
  xcodetargetname ""targetname""
I don't think the externalproject call is the correct place to have the target name information. At some point Premake should probably support the concept of a target but I'm not really sure how it would fit.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/tempura-sukiyaki,4,https://github.com/premake/premake-core/pull/1190#issuecomment-437739949,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","Actually, I do not think that writing ""targetname"" to externalproject is an excellent way.
I examined ways like xcodetargetname before this implementation.
However, in that case, designation of links and dependson seems difficult, so I gave up.
When using an API such as xcodetargetname, how should we describe links and dependson?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1190#issuecomment-437941007,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","I would imagine that the links and dependson code paths would give access to the other project at some point, then it would be a matter of querying the project for the xcodetargetname entry. I think initially this can just be part of externalprojects, since Premake doesn't support generating targets but when it does we'll need to revisit this assumption.
I think this should suffice for now:
workspace ""wks""
  project ""prj""
    links { ""ext"" } -- This would detect the `xcodetargetname` in the ext project
  externalproject ""ext""
    xcodetargetname ""targetname""",True,{'THUMBS_UP': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/tdesveauxPKFX,6,https://github.com/premake/premake-core/pull/1190#issuecomment-437994603,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","Using existing APIs, you might be able to do something like this:
externalproject(""targetname"")
	location	""location/to/project/file""
	filename 	""projectfile""
this way, you don't have anything to do to link with targetname.
Well, I'm neither familiar with XCode nor the module so I might be wrong.",True,{'THUMBS_UP': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1190,2018-11-06T08:52:58Z,2018-11-13T10:52:24Z,2018-11-14T07:25:52Z,CLOSED,False,443,18,4,https://github.com/tempura-sukiyaki,Add support for `externalproject` with multiple targets in xcode4,1,[],https://github.com/premake/premake-core/pull/1190,https://github.com/tempura-sukiyaki,7,https://github.com/premake/premake-core/pull/1190#issuecomment-438222765,"xcodeproj may have multiple targets.
externalproject must be able to explicitly specify one of those targets.
I think that this can be solved by introducing the following description.
externalproject ""targetname@projectname""
It may be better to judge whether the project is external, but I think that there are no practical problems in particular.","Thank you both.
I did not know the filname API.
I do not know until I tried it, but I feel that it will work well in a way that uses the filename API.
Even if we need to fix something, I think that it will be a completely different implementation from this pull request, so I close this pull request.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1191,2018-11-10T05:55:00Z,2018-11-12T18:50:00Z,2018-11-12T23:46:41Z,MERGED,True,132,20,4,https://github.com/ratzlaff,Fix objname collisions,1,[],https://github.com/premake/premake-core/pull/1191,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1191,"Tweaks logic for setting the sequence number during baking so that objname's are unique on a per-configuration / project basis.
Should resolve #1187
Should resolve #1182","Tweaks logic for setting the sequence number during baking so that objname's are unique on a per-configuration / project basis.
Should resolve #1187
Should resolve #1182",True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/dsvi,1,https://github.com/premake/premake-core/pull/1192,added *.c++ extension,added *.c++ extension,True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/1192#issuecomment-437916366,added *.c++ extension,Is this a common extension?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1192#issuecomment-437937465,added *.c++ extension,"This was requested in #612, however, I'm fairly certain that this change won't work for gmake2 based on this snippet: 
  
    
      premake-core/modules/gmake2/gmake2_cpp.lua
    
    
        Lines 59 to 63
      in
      ed483dd
    
  
  
    

        
          
           rule 'cpp' 
        

        
          
           	fileExtension { "".cc"", "".cpp"", "".cxx"", "".mm"" } 
        

        
          
           	buildoutputs  { ""$(OBJDIR)/%{premake.modules.gmake2.cpp.makeUnique(cfg, file.objname)}.o"" } 
        

        
          
           	buildmessage  '$(notdir $<)' 
        

        
          
           	buildcommands {'$(CXX) %{premake.modules.gmake2.cpp.fileFlags(cfg, file)} $(FORCE_INCLUDE) -o ""$@"" -MF ""$(@:%.o=%.d)"" -c ""$<""'}",True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/dsvi,4,https://github.com/premake/premake-core/pull/1192#issuecomment-437939156,added *.c++ extension,"Is this a common extension?

Relatively. qmake/qtcreator recongnizes it as C++ file.

I'm fairly certain that this change won't work for gmake2 based on this snippet:

Nothing will, since gmake2 does not rely on the path. functions. gmake works fine with this change.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1192#issuecomment-437945896,added *.c++ extension,"Relatively. qmake/qtcreator recongnizes it as C++ file.

Do you have any examples of what uses this extension? I'm kind of curious about where this extension comes from, things seem to support it but nobody seems to use it. I find this really weird.

Nothing will, since gmake2 does not rely on the path. functions. gmake works fine with this change.

I didn't go any deeper than the rule definition, but I kind of assumed the path. functions weren't called further down. FWIW, this change will need to work in gmake2 before we can merge it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/dsvi,6,https://github.com/premake/premake-core/pull/1192#issuecomment-437951577,added *.c++ extension,"Do you have any examples of what uses this extension?

https://www.google.com/search?q=.c%2B%2B+file+extension
gcc toolset recognizes it as well
https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html
Anyway, it doesn't hurt to add, does it?

FWIW, this change will need to work in gmake2 before we can merge it.

I believe the best way to achieve it, is to redesign gmake2 to rely on the detection functions from path., like gmake does.
This change as it is doesn't break anything in gmake2",True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/ratzlaff,7,https://github.com/premake/premake-core/pull/1192#issuecomment-437958746,added *.c++ extension,Can you implement any new tests with the gmake and gmake2 generators for this extension?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/dsvi,8,https://github.com/premake/premake-core/pull/1192#issuecomment-437973985,added *.c++ extension,Hmm...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1192,2018-11-11T18:55:21Z,2019-10-14T19:45:47Z,2019-10-14T19:46:08Z,MERGED,True,1,1,1,https://github.com/dsvi,"Add "".c++"" as a known C++ file extension",1,[],https://github.com/premake/premake-core/pull/1192,https://github.com/tdesveauxPKFX,9,https://github.com/premake/premake-core/pull/1192#issuecomment-438008069,added *.c++ extension,"Do you have any examples of what uses this extension?

https://www.google.com/search?q=.c%2B%2B+file+extension
gcc toolset recognizes it as well
https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html
Anyway, it doesn't hurt to add, does it?

FWIW, this change will need to work in gmake2 before we can merge it.

I believe the best way to achieve it, is to redesign gmake2 to rely on the detection functions from path., like gmake does.
This change as it is doesn't break anything in gmake2

Indeed, it does not hurt and recognizing the same extensions as GCC looks fine to me.
However, I agree with @samsinsane here. The gmake generator will be deprecated in favor of gmake2 in the future so we'd need to have this works for gmake2 to merge.
From a quick look, I think you only need to make changes https://github.com/premake/premake-core/blob/master/modules/gmake2/gmake2_cpp.lua#L60 and https://github.com/premake/premake-core/blob/master/modules/gmake2/gmake2_cpp.lua#L102-L113.
And as @ratzlaff mentioned, a simple unit test that confirm that the correct rule is applied would be great in case a future change break this. There don't seem to be one at the moment but it would have it's place in *_file_rules.lua file test.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1193,2018-11-13T04:40:06Z,2018-11-13T07:33:23Z,2018-11-18T01:42:54Z,MERGED,True,52,4,4,https://github.com/ratzlaff,Add tests for xcode id generator,1,[],https://github.com/premake/premake-core/pull/1193,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1193,the 'long' type is not always of size four bytes - which is what the current code assumes. Changed to uint32_t and added tests for the xcode id-generator.,the 'long' type is not always of size four bytes - which is what the current code assumes. Changed to uint32_t and added tests for the xcode id-generator.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1193,2018-11-13T04:40:06Z,2018-11-13T07:33:23Z,2018-11-18T01:42:54Z,MERGED,True,52,4,4,https://github.com/ratzlaff,Add tests for xcode id generator,1,[],https://github.com/premake/premake-core/pull/1193,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/1193#issuecomment-438281638,the 'long' type is not always of size four bytes - which is what the current code assumes. Changed to uint32_t and added tests for the xcode id-generator.,"Yeah, I have been making local tests here for some of the custom modifications we have made to premake (nothing major, most of which ends up as pull requests). Had to figure out why the windows executable would create an xcode project differently than when we ran the same scripts on the macs. Eventually nailed it down to the size differences of 'long' between the 32 and 64-bit versions of the executable.
So right now I believe we are able to generate the exact same output from all the major platforms.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1194,2018-11-16T10:35:08Z,2018-11-18T13:33:16Z,2018-11-19T07:05:30Z,MERGED,True,122,155,7,https://github.com/WorldofBay,Move rule property string expansion into modules,1,[],https://github.com/premake/premake-core/pull/1194,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1194,"Actual fix for #1157
Replaces the workaround #1160
Also merged the calling functions in gmake2 as they were identical and fixed indentation of a test from the aforementioned workaround.
Changes 1 test to check for the correct behaviour and adds 1 test that i missed before.","Actual fix for #1157
Replaces the workaround #1160
Also merged the calling functions in gmake2 as they were identical and fixed indentation of a test from the aforementioned workaround.
Changes 1 test to check for the correct behaviour and adds 1 test that i missed before.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1196,2018-11-18T19:59:00Z,2019-10-14T15:31:13Z,2019-10-14T19:44:16Z,CLOSED,False,16,10,1,https://github.com/yuyoyuppe,Emit files check feature,2,[],https://github.com/premake/premake-core/pull/1196,https://github.com/yuyoyuppe,1,https://github.com/premake/premake-core/pull/1196,"See #1172. Also I've added .ixx extension support, since they were ""not participating in build"" by default(so no buildaction required)","See #1172. Also I've added .ixx extension support, since they were ""not participating in build"" by default(so no buildaction required)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1196,2018-11-18T19:59:00Z,2019-10-14T15:31:13Z,2019-10-14T19:44:16Z,CLOSED,False,16,10,1,https://github.com/yuyoyuppe,Emit files check feature,2,[],https://github.com/premake/premake-core/pull/1196,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1196#issuecomment-541748863,"See #1172. Also I've added .ixx extension support, since they were ""not participating in build"" by default(so no buildaction required)","Based on the conversion on #1172, it sounds like this is not the preferred way to solve this problem. I'm going to go ahead and close this PR and let that issue play out. Feel free to reopen as needed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1196,2018-11-18T19:59:00Z,2019-10-14T15:31:13Z,2019-10-14T19:44:16Z,CLOSED,False,16,10,1,https://github.com/yuyoyuppe,Emit files check feature,2,[],https://github.com/premake/premake-core/pull/1196,https://github.com/yuyoyuppe,3,https://github.com/premake/premake-core/pull/1196#issuecomment-541856780,"See #1172. Also I've added .ixx extension support, since they were ""not participating in build"" by default(so no buildaction required)","@starkos sure, ping me if you decide on a different implementation - I can still do it :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1196,2018-11-18T19:59:00Z,2019-10-14T15:31:13Z,2019-10-14T19:44:16Z,CLOSED,False,16,10,1,https://github.com/yuyoyuppe,Emit files check feature,2,[],https://github.com/premake/premake-core/pull/1196,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1196#issuecomment-541881200,"See #1172. Also I've added .ixx extension support, since they were ""not participating in build"" by default(so no buildaction required)",It sounds like the checkFunc should just be removed entirely.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1197,2018-11-20T14:55:27Z,2018-11-30T01:19:22Z,2018-11-30T01:19:26Z,MERGED,True,36,0,2,https://github.com/samsinsane,Added missing elements in Visual Studio Makefile projects,1,[],https://github.com/premake/premake-core/pull/1197,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1197,Fixes #670,Fixes #670,True,{}
premake/premake-core,https://github.com/premake/premake-core,1201,2018-12-04T14:10:28Z,2018-12-22T00:32:09Z,2018-12-22T01:01:35Z,CLOSED,False,14,4,1,https://github.com/pintodragon,Updated code lite to properly add LD_LIBRARY_PATH is set if libdirs is set,10,[],https://github.com/premake/premake-core/pull/1201,https://github.com/pintodragon,1,https://github.com/premake/premake-core/pull/1201,Also added a change to the tree.traverse to make it generate the base virtual directories. Without this change I was getting projects that had files that were not part of a virtual directory. These files would not show up in the editor and there was no way for me to easily find them and move them to a virtual directory for them to show up.,Also added a change to the tree.traverse to make it generate the base virtual directories. Without this change I was getting projects that had files that were not part of a virtual directory. These files would not show up in the editor and there was no way for me to easily find them and move them to a virtual directory for them to show up.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1201,2018-12-04T14:10:28Z,2018-12-22T00:32:09Z,2018-12-22T01:01:35Z,CLOSED,False,14,4,1,https://github.com/pintodragon,Updated code lite to properly add LD_LIBRARY_PATH is set if libdirs is set,10,[],https://github.com/premake/premake-core/pull/1201,https://github.com/pintodragon,2,https://github.com/premake/premake-core/pull/1201#issuecomment-449050217,Also added a change to the tree.traverse to make it generate the base virtual directories. Without this change I was getting projects that had files that were not part of a virtual directory. These files would not show up in the editor and there was no way for me to easily find them and move them to a virtual directory for them to show up.,This should be ready to merge now.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1201,2018-12-04T14:10:28Z,2018-12-22T00:32:09Z,2018-12-22T01:01:35Z,CLOSED,False,14,4,1,https://github.com/pintodragon,Updated code lite to properly add LD_LIBRARY_PATH is set if libdirs is set,10,[],https://github.com/premake/premake-core/pull/1201,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1201#issuecomment-449257451,Also added a change to the tree.traverse to make it generate the base virtual directories. Without this change I was getting projects that had files that were not part of a virtual directory. These files would not show up in the editor and there was no way for me to easily find them and move them to a virtual directory for them to show up.,Can you please squish your commits.,True,{'THUMBS_UP': ['https://github.com/pintodragon']}
premake/premake-core,https://github.com/premake/premake-core,1201,2018-12-04T14:10:28Z,2018-12-22T00:32:09Z,2018-12-22T01:01:35Z,CLOSED,False,14,4,1,https://github.com/pintodragon,Updated code lite to properly add LD_LIBRARY_PATH is set if libdirs is set,10,[],https://github.com/premake/premake-core/pull/1201,https://github.com/pintodragon,4,https://github.com/premake/premake-core/pull/1201#issuecomment-449530998,Also added a change to the tree.traverse to make it generate the base virtual directories. Without this change I was getting projects that had files that were not part of a virtual directory. These files would not show up in the editor and there was no way for me to easily find them and move them to a virtual directory for them to show up.,I did and in the process ended up having the process closed. I can raise a new one if needed,True,{}
premake/premake-core,https://github.com/premake/premake-core,1202,2018-12-05T02:56:34Z,2018-12-05T06:18:09Z,2018-12-05T21:43:13Z,MERGED,True,1,0,1,https://github.com/TurkeyMan,Support %{file.name} token in VS,1,[],https://github.com/premake/premake-core/pull/1202,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1202,I feel like this should probably be supported...?,I feel like this should probably be supported...?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1203,2018-12-06T07:59:03Z,2018-12-06T08:17:41Z,2018-12-06T08:32:02Z,MERGED,True,65,1,3,https://github.com/tempura-sukiyaki,Add support for JavaCompile in vsandroid,1,[],https://github.com/premake/premake-core/pull/1203,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1203,"Set ItemGroup toJavaCompile when add "".java"" files to "".androidproj"".","Set ItemGroup toJavaCompile when add "".java"" files to "".androidproj"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,1206,2018-12-22T01:04:07Z,2018-12-23T13:59:55Z,2018-12-23T13:59:55Z,MERGED,True,14,4,1,https://github.com/pintodragon,Updated code lite to properly add LD_LIBRARY_PATH is set if libdirs is set,1,[],https://github.com/premake/premake-core/pull/1206,https://github.com/pintodragon,1,https://github.com/premake/premake-core/pull/1206,Created a new PR. Old one could not be reopened because I deleted my original master branch to squash the commits.,Created a new PR. Old one could not be reopened because I deleted my original master branch to squash the commits.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1214,2019-01-04T19:25:28Z,2019-08-20T00:23:09Z,2019-08-20T00:23:09Z,CLOSED,False,1,1,1,https://github.com/simonri,Update copyright date in LICENSE.txt,2,[],https://github.com/premake/premake-core/pull/1214,https://github.com/simonri,1,https://github.com/premake/premake-core/pull/1214,Updated year.,Updated year.,True,{'THUMBS_UP': ['https://github.com/RustyGuard']}
premake/premake-core,https://github.com/premake/premake-core,1214,2019-01-04T19:25:28Z,2019-08-20T00:23:09Z,2019-08-20T00:23:09Z,CLOSED,False,1,1,1,https://github.com/simonri,Update copyright date in LICENSE.txt,2,[],https://github.com/premake/premake-core/pull/1214,https://github.com/WorldofBay,2,https://github.com/premake/premake-core/pull/1214#issuecomment-453009633,Updated year.,"Happy new Year!
Can you add a year change in the last paragraph of README.md to the commit?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1214,2019-01-04T19:25:28Z,2019-08-20T00:23:09Z,2019-08-20T00:23:09Z,CLOSED,False,1,1,1,https://github.com/simonri,Update copyright date in LICENSE.txt,2,[],https://github.com/premake/premake-core/pull/1214,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1214#issuecomment-522803083,Updated year.,Closing this in favor of #1323.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1218,2019-01-09T05:18:17Z,2019-01-09T06:15:55Z,2019-01-09T13:45:53Z,MERGED,True,74,0,6,https://github.com/Dingobloo,Add support & tests for XCTest sharedlibtype,1,[],https://github.com/premake/premake-core/pull/1218,https://github.com/Dingobloo,1,https://github.com/premake/premake-core/pull/1218,".xctest files are OSXBundles that have executable code in them that Xcode uses to populate its integrated unit testing UI. Since premake supports OSXBundles through the sharedlibtype API I extended that support to also include xctest.
My use case was wanting to use premake rather than cmake with CUTI a C++ unit testing wrapper that integrates with XCode & Visual Studio, but others may find it helpful for swift or objective-c projects that include unit tests.",".xctest files are OSXBundles that have executable code in them that Xcode uses to populate its integrated unit testing UI. Since premake supports OSXBundles through the sharedlibtype API I extended that support to also include xctest.
My use case was wanting to use premake rather than cmake with CUTI a C++ unit testing wrapper that integrates with XCode & Visual Studio, but others may find it helpful for swift or objective-c projects that include unit tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1220,2019-01-09T22:44:41Z,2019-01-10T12:19:32Z,2019-01-10T13:00:56Z,MERGED,True,2,1,1,https://github.com/ifarbod,Implement the androidapilevel() API in Android packaging projects,2,[],https://github.com/premake/premake-core/pull/1220,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1220,"The androidapilevel API is only implemented for shared library projects. Typically, one would want to change the SDK version for the APK project as well. When you don't specify it, VS picks android-21 as the default compileSdkVersion for you. This PR adds support for AndroidAPILevel for APK projects (the code is simply taken from vsandroid_vcxproj.lua).","The androidapilevel API is only implemented for shared library projects. Typically, one would want to change the SDK version for the APK project as well. When you don't specify it, VS picks android-21 as the default compileSdkVersion for you. This PR adds support for AndroidAPILevel for APK projects (the code is simply taken from vsandroid_vcxproj.lua).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1221,2019-01-10T08:06:01Z,2019-01-10T08:41:10Z,2019-01-10T09:01:32Z,MERGED,True,3,0,1,https://github.com/WorldofBay,add nil check to fileconfig.hasFileSetting (gmake),1,[],https://github.com/premake/premake-core/pull/1221,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1221,"fix for #1219
fileconfig.hasFileSettings is as far as i see only used in gmake_cpp.lua so it should be safe","fix for #1219
fileconfig.hasFileSettings is as far as i see only used in gmake_cpp.lua so it should be safe",True,{}
premake/premake-core,https://github.com/premake/premake-core,1223,2019-01-11T08:14:58Z,2019-01-27T13:09:56Z,2019-01-27T13:09:56Z,CLOSED,False,4,2,2,https://github.com/ifarbod,Allow using Clang 5.0 for VSAndroid projects,3,[],https://github.com/premake/premake-core/pull/1223,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1223,"This is only supported in VS2017+, should I add a check for it or is it ok like this?
PS: Can the androidproj value for kind be renamed to something else? Maybe something like AndroidApp, Packaging, or Application? It doesn't really feel inline with WindowedApp and other values.","This is only supported in VS2017+, should I add a check for it or is it ok like this?
PS: Can the androidproj value for kind be renamed to something else? Maybe something like AndroidApp, Packaging, or Application? It doesn't really feel inline with WindowedApp and other values.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1223,2019-01-11T08:14:58Z,2019-01-27T13:09:56Z,2019-01-27T13:09:56Z,CLOSED,False,4,2,2,https://github.com/ifarbod,Allow using Clang 5.0 for VSAndroid projects,3,[],https://github.com/premake/premake-core/pull/1223,https://github.com/ifarbod,2,https://github.com/premake/premake-core/pull/1223#issuecomment-456589797,"This is only supported in VS2017+, should I add a check for it or is it ok like this?
PS: Can the androidproj value for kind be renamed to something else? Maybe something like AndroidApp, Packaging, or Application? It doesn't really feel inline with WindowedApp and other values.",Looks like #1112 already includes this.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1224,2019-01-11T15:14:28Z,2019-01-13T13:02:44Z,2019-01-14T07:20:10Z,MERGED,True,1,1,1,https://github.com/WorldofBay,add missing local,1,[],https://github.com/premake/premake-core/pull/1224,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1224,fix #1210,fix #1210,True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/tritao,1,https://github.com/premake/premake-core/pull/1225,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/tritao,2,https://github.com/premake/premake-core/pull/1225#issuecomment-454066105,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","I started this work by relying on dotnet.isnetcoretarget(prj), but realized that might not be the best approach.
.NET Core projects support multiple target frameworks (using <TargetFrameworks>), and even supports targeting old .NET Framework versions, so just relying on the dotnetframework seems like it will bring some limitations in the future.
The other approach that I thought was by re-using the clr API, but that also comes with limitations, since right now we use clr ""Unsafe"" to specify if the code is unsafe, and that would conflict with a new clr ""netcore"" option.
Another advantage of the action is easy filtering with the filter API.
  filter { ""action:not netcore""}
    links { ""Lib"" }

  filter { ""action:netcore""}
    nuget { ""Lib:1.2.3"" }
All in all, I think it makes sense to be its own action, since it's not really related to any of the VS actions, as it is cross platform and completely independent of Visual Studio.
Another thing to take in mind is that VS supports mixing old .NET Framework and .NET Core projects in the same solution, but that's probably going to be a niche feature that not a lot of people are going to be interested in. This design doesn't support that.
If we want to clean this up in the future, I think coming up with a unified msbuild action, that could take a --flavor=vs20xx|netcore parameter, would be more elegant. Then we could map the ""legacy"" VS actions to this new unified action.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1225#issuecomment-454805594,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","I have a few questions based on your reply:

Can you target an old framework and still be a .NET Core project?

If so, what makes it a .NET Core project if not the framework?


You've indicated that the .NET Core projects are disconnected from Visual Studio, so these open exactly the same in VS2017 and VS2019 without issue? It doesn't display (Visual Studio 2017) in VS2019 and ask to be upgraded and all that?

And I guess by extension, how do new elements get added or values get added/changed/removed when there's no versioning information? Surely, we would need some way for a user to specify they're using VS2017 and not VS2019.


How does this work for Makefile generation since we have C# support there?
The VS generators are already largely unified, maybe I've misunderstood your goal? It just seems like the only change will be premake5 vs2019 will become premake5 msbuild --flavor=vs2019 which is way more to type than should be necessary?

Sorry for all the questions, I just thought .NET Core was the next release of the .NET framework after 4.6, so I'm kind of confused haha. I haven't used C# day to day for nearly 5 years, so I'm well and truly out of the loop on what's going on.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/tritao,4,https://github.com/premake/premake-core/pull/1225#issuecomment-455010918,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","Yes, you can target .NET Framework projects with .NET Core style projects.
From what I've found, If you have <TargetFramework>net461</TargetFramework>, then you get a
regular .NET Framework app that simply makes use of the newer csproj project model, and which can
be easily built with the dotnet command-line tool.


I think it should work like you suggested, without an upgrade dialog for VS upgrades. However I have not tested this yet myself. The main difference than what came before is that now MSBuild is being used as a cross-platform build tool and I guess won't evolve tied with VS, but more as an independent build system.


I'm still trying to figure this out, but it's not as clear-cut as it once was. csc was easy to call from the command-line, but from what I've seen, with the Roslyn compiler, it's not as easy. The new .NET Core, while it simplifies things from the POV of the developer (with dotnet tool), makes things way more complicated and convoluted internally, especially since now more of the base class libraries are distributed as Nuget packages.
Some work will need to be done to make this all work using Make. I might look into it at a later time.


Aye, they're unified from a code perspective. What I mean is that it might make sense to stop tying the action name to VS versions. I can see eventually MSBuild on Linux being able to build C++ projects for instance (in fact I build a prototype of this a few years ago for Mono). If that happens, and Premake supports it, then it makes no sense to call it vs201x or netcore. msbuild would be a more appropriate name for it. And you'd need a flag to signal which version of MSBuild to target.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/tritao,5,https://github.com/premake/premake-core/pull/1225#issuecomment-457029570,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010",@samsinsane Have you had a chance to think about this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1225#issuecomment-457463254,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","@tritao I still have reservations about this, firstly, I'd really like to confirm the VS2017 vs VS2019 issue. Additionally, I can't really see how a user would be able to generate a VS2017 compatible .NET Core project if there's no way to specify the VS version. This leads me to believe that it being an API instead of an action makes the most sense.
Additionally, being locked to VS/MSBuild for .NET Core projects just seems wrong to me. The general trend I've seen is that people want to use whatever setup they can imagine, and having .NET Core projects controlled at the action level would restrict this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/Pitj3,7,https://github.com/premake/premake-core/pull/1225#issuecomment-474894461,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010",Is there any update on this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/tritao,8,https://github.com/premake/premake-core/pull/1225#issuecomment-474914159,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","@Pitj3 We need as a community to agree on a design that makes sense going forward.
Re-reading the previous posts, I think we should probably do this:


Flag .NET Core projects as a new kind of dotnetframework value
Actually we should extend dotnetframework to support multiple values, such as:
dotnetframework { ""netcoreapp2.2"", ""net471"" }


Decide what action triggers .NET Core style projects
We can just go with the status quo and extend the vs2017 and friends to check if
the project is targeting a .NET Core framework. If that is the case, then we would
go with generation of modern csproj projects.


We need (or at least my projects do) some good way to filter .NET Core projects to be able to target generate both .NET Framework or .NET Core depending on configuration. I was using netcore as an action for this, if we go with different approach, then maybe we extend filter {} to support dotnetframework.

Optionally, add an alias action called msbuild (and get rid of thenetcore action on this PR)
The idea here is that on non-Windows platforms, where there is no VS, having to use
vs2xxx Premake actions to generate what is in fact MSBuild build logic feels like Windows/VS-specific legacy.

It raises another question though, which is how to flag which particular version/flavor of MSBuild is generated. Right now we've used the VS version for this, as traditionally, people just used MSBuild as distributed by VS releases. But in a cross-platform world, and with MSBuild being released independently from VS, I don't think it makes sense anymore to tie it to VS versions.
Anyway just my two cents, happy to hear other thoughts about this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/dpeter99,9,https://github.com/premake/premake-core/pull/1225#issuecomment-477977049,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","Hi!
Just reading throught this PR and i have one question. Would this allow for projects that have non dot net core parts?
My current project has c++ main code and a precompiler written in c# uising dot net (so it can be built on any platform). They are setup so VS builds the c# part and runs it before compiling the c++ main code.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/samsinsane,10,https://github.com/premake/premake-core/pull/1225#issuecomment-479572138,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","@tritao Regarding your points:

I think this is a good idea, if you can target multiple .NET frameworks this makes sense.
I think extending the existing actions makes the most sense. As @dpeter99 has pointed out, mixing project types is required and having a new set of actions will likely lead to incompatibilities between the projects for various systems (Windows, VSLinux, Android, iOS) and languages (C#, F#, C++, D).
This seems kind of tricky. Having msbuild and vs* using the same code paths would require all of the _ACTION checks to be changed, and as mentioned above, modules that extend the VS actions won't work and may generate bad data in the msbuild action. It sounds like it would be better if the vs* actions were the aliases instead, specifying very specific versions of MSBuild - which don't seem like they would be overly easy to determine? The projects say 15.0, but it looks like my MSBuild (VS2017) is 15.9 so I'm not sure how those out of the loop on this VS/MSBuild situation would know what to put in?

As for your comment between point 2 and 3, I don't really understand. Are you wanting filter { ""dotnetframework:..."" } or are you wanting do something like this:
filter { ""configuration:something"" }
  dotnetframework ""net471""
filter { ""configuration:another"" }
  dotnetframework ""netcoreapp2.2""
filter {}",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/ClxS,11,https://github.com/premake/premake-core/pull/1225#issuecomment-484124997,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","Adding to this: Don't forget .NET Standard projects!
I agree with @samsinsane on making the .net style projects be generated based on the targetframework would be much better. We have mixed language solutions at work where we use C++ exclusively for our native run-time, with C# being used for tools. These exist in the same project. To further complicate this we utilize .NET Standard (for all libraries), .NET Core (web stuff), and .NET Framework (WPF) projects all inside the same solution.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/tritao,12,https://github.com/premake/premake-core/pull/1225#issuecomment-484128635,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","I have been busy and not sure when I'll have time to finish this one.
Would anyone like to take over this one and get it ready for merging?",True,{'EYES': ['https://github.com/dpeter99']}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/ClxS,13,https://github.com/premake/premake-core/pull/1225#issuecomment-489741673,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","I'm short on time right now myself but I'll implement this in the future if no one beats me to it. Introducing .NET 5 announcement means there's not much choice in having this added if C# is to continue being a supported language. As of the release of .NET 5, .NET Framework is gone and it's not yet decided if .NET Standard will also be gone. There's a chance that what is currently .NET Core will be all that's left.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/ClxS,14,https://github.com/premake/premake-core/pull/1225#issuecomment-581874624,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010","This PR is outdated now, #1386 has been merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1225,2019-01-14T14:38:50Z,2020-02-04T12:44:45Z,2020-02-04T12:44:46Z,CLOSED,False,234,29,12,https://github.com/tritao,Added support for generating .NET Core projects.,1,[],https://github.com/premake/premake-core/pull/1225,https://github.com/samsinsane,15,https://github.com/premake/premake-core/pull/1225#issuecomment-581893429,"This adds a new action netcore that generates new style MSBuild .csproj projects for .NET Core.
This has been tested on CppSharp project, and it gets us far enough for a working build.
Also snuck in a fix to prevent us from generating empty property groups.
Related issue: #1010",Closing based on previous comment.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1228,2019-01-20T15:32:11Z,2019-04-08T13:03:06Z,2019-04-08T13:03:20Z,MERGED,True,3,0,1,https://github.com/samsinsane,Added Win64 as a recognized platform,1,[],https://github.com/premake/premake-core/pull/1228,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1228,Resolves #1171,Resolves #1171,True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1229,Resolves #1185,Resolves #1185,True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/tdesveauxPKFX,2,https://github.com/premake/premake-core/pull/1229#issuecomment-456060190,Resolves #1185,"I run into this issue at work two weeks or so ago.
I fixed it while keeping the error in the else of the config block to perform a check on the config parameter.
I implemented it as to have a smallest change in behavior as possible so it may not be the best approach and I didn't have time to look into it.
Here is the diff if you are interested.
If you agree that keeping the error there is valuable but have an issue with the implementation, I should be able to look into it this week.
diff --git a/modules/gmake2/gmake2.lua b/modules/gmake2/gmake2.lua
index e63669ab15..63a8ecac4b 100644
--- a/modules/gmake2/gmake2.lua
+++ b/modules/gmake2/gmake2.lua
@@ -195,7 +195,7 @@
 	end
 
 
-	function gmake2.outputSection(prj, callback)
+	function gmake2.outputSection(prj, callback, hasconfigcheck)
 		local root = {}
 
 		for cfg in project.eachconfig(prj) do
@@ -251,8 +251,10 @@
 		end
 
 		if not first then
-			p.outln('else')
-			p.outln('  $(error ""invalid configuration $(config)"")')
+			if hasconfigcheck then
+				p.outln('else')
+				p.outln('  $(error ""invalid configuration $(config)"")')
+			end
 			p.outln('endif')
 			p.outln('')
 		end
diff --git a/modules/gmake2/gmake2_cpp.lua b/modules/gmake2/gmake2_cpp.lua
index e89706163d..0af98f450c 100644
--- a/modules/gmake2/gmake2_cpp.lua
+++ b/modules/gmake2/gmake2_cpp.lua
@@ -329,7 +329,7 @@
 		_p('# Configurations')
 		_p('# #############################################')
 		_p('')
-		gmake2.outputSection(prj, cpp.elements.configuration)
+		gmake2.outputSection(prj, cpp.elements.configuration, true)
 	end
 
 
diff --git a/modules/gmake2/gmake2_utility.lua b/modules/gmake2/gmake2_utility.lua
index d8d965e9ff..9a061afc0a 100644
--- a/modules/gmake2/gmake2_utility.lua
+++ b/modules/gmake2/gmake2_utility.lua
@@ -225,7 +225,7 @@
 		_p('# Configurations')
 		_p('# #############################################')
 		_p('')
-		gmake2.outputSection(prj, utility.elements.configuration)
+		gmake2.outputSection(prj, utility.elements.configuration, true)
 	end",True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1229#issuecomment-456066813,Resolves #1185,"I can't see any reason for these checks, the config is validated in the workspace makefile: 
  
    
      premake-core/modules/gmake2/gmake2_workspace.lua
    
    
        Lines 39 to 65
      in
      00c8d53
    
  
  
    

        
          
           function gmake2.configmap(wks) 
        

        
          
           	local first = true 
        

        
          
           	for cfg in p.workspace.eachconfig(wks) do 
        

        
          
           		if first then 
        

        
          
           			_p('ifeq ($(config),%s)', cfg.shortname) 
        

        
          
           			first = false 
        

        
          
           		else 
        

        
          
           			_p('else ifeq ($(config),%s)', cfg.shortname) 
        

        
          
           		end 
        

        
          
            
        

        
          
           		for prj in p.workspace.eachproject(wks) do 
        

        
          
           			local prjcfg = project.getconfig(prj, cfg.buildcfg, cfg.platform) 
        

        
          
           			if prjcfg then 
        

        
          
           				_p('  %s_config = %s', gmake2.tovar(prj.name), prjcfg.shortname) 
        

        
          
           			end 
        

        
          
           		end 
        

        
          
            
        

        
          
           		_p('') 
        

        
          
           	end 
        

        
          
            
        

        
          
           	if not first then 
        

        
          
           		_p('else') 
        

        
          
           		_p('  $(error ""invalid configuration $(config)"")') 
        

        
          
           		_p('endif') 
        

        
          
           		_p('') 
        

        
          
           	end 
        

        
          
           end 
        
    
  


I'm pretty much 100% confident it was a copy-paste error, I just can't see any reason that someone would want this:
# File sets
# #############################################

OBJECTS :=

ifeq ($(config),release)
OBJECTS += $(OBJDIR)/hello.o

else
  $(error ""invalid configuration $(config)"")
endif

which is generated with:
files { ""hello.cpp"" }
filter ""Debug""
  removefiles { ""hello.cpp"" }
Similarly with your diff, I believe the following would fail to build make config=debug:
defines { ""_DEBUG"" }
filter ""Release""
  removedefines { ""_DEBUG"" }
as it would generate a single ifeq block, and then error for all other configurations, despite their validity.
I could be misunderstanding the code, so I'm more than happy to discuss further.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1229#issuecomment-456071005,Resolves #1185,"The OBJECTS is indeed invalid at the moment and that is the issue I encountered.
However, it seems ALL variation of config_platform are created even if identical.
From your example:
ifeq ($(config),debug_x32)
TARGETDIR = bin/x32/Debug
TARGET = $(TARGETDIR)/testProj.exe
OBJDIR = obj/x32/Debug
DEFINES += -D_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32 -s

else ifeq ($(config),debug_x64)
TARGETDIR = bin/x64/Debug
TARGET = $(TARGETDIR)/testProj.exe
OBJDIR = obj/x64/Debug
DEFINES += -D_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else ifeq ($(config),release_x32)
TARGETDIR = bin/x32/Release
TARGET = $(TARGETDIR)/testProj.exe
OBJDIR = obj/x32/Release
DEFINES +=
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32 -s

else ifeq ($(config),release_x64)
TARGETDIR = bin/x64/Release
TARGET = $(TARGETDIR)/testProj.exe
OBJDIR = obj/x64/Release
DEFINES +=
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else
  $(error ""invalid configuration $(config)"")
endif

I find the ""redundant"" check useful as the project Makefiles can be called directly without using the workspace Makefile.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1229#issuecomment-456076366,Resolves #1185,"Can you call the project Makefiles directly? I tried this once quite a long time ago and it didn't work, that was with gmake though, so I just assumed it didn't work.
Anyway, I looked at it a bit closer and there's extra logic for OBJECTS so it won't do the same thing with the configurations. It still feels kind of wrong to use the configurations to perform these checks, but I think your diff is probably the better solution out of the two. üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1229#issuecomment-544283826,Resolves #1185,"So what's the verdict on this one? Do we keep the else and the error, or remove it?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1229#issuecomment-544284969,Resolves #1185,"What's up with this one? I just tried to reproduce the problem with this:
workspace ""MyWorkspace""
	configurations { ""Debug"", ""Release"" }

project ""MyProject""
    kind ""ConsoleApp""
    language ""C++""

    files { ""hello.cc"" }

    filter { ""configurations:Debug"" }
        removefiles ""hello.cc""
And this was the result:
$ make config=debug
==== Building MyProject (debug) ====
MyProject.make:75: *** ""invalid configuration debug"".  Stop.
make: *** [MyProject] Error 2

I'm inclined to merge this as-is and remove the error condition. Thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1229,2019-01-20T15:47:34Z,2019-10-21T20:05:58Z,2019-11-06T14:41:51Z,MERGED,True,0,26,3,https://github.com/samsinsane,Generated makefiles no longer error when a configuration can be missing,1,[],https://github.com/premake/premake-core/pull/1229,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/1229#issuecomment-544314350,Resolves #1185,"@starkos It would take me a bit to get back into state on this, but if you're happy to merge as-is then we can probably revisit this if someone runs into issues with the side effects? I'm not really sure how common it is to call the individual makefiles though, as I said above, it didn't work for me but I easily could have been doing something wrong.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1230,2019-01-20T16:07:08Z,2019-04-30T11:32:07Z,2019-04-30T11:32:11Z,MERGED,True,36,6,5,https://github.com/samsinsane,Removed excessive escaping in CodeLite generator,2,[],https://github.com/premake/premake-core/pull/1230,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1230,Resolves #1168,Resolves #1168,True,{}
premake/premake-core,https://github.com/premake/premake-core,1230,2019-01-20T16:07:08Z,2019-04-30T11:32:07Z,2019-04-30T11:32:11Z,MERGED,True,36,6,5,https://github.com/samsinsane,Removed excessive escaping in CodeLite generator,2,[],https://github.com/premake/premake-core/pull/1230,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1230#issuecomment-456062127,Resolves #1168,"If you have the time, that would be great! Otherwise the next time I get some time I'll add them in.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1230,2019-01-20T16:07:08Z,2019-04-30T11:32:07Z,2019-04-30T11:32:11Z,MERGED,True,36,6,5,https://github.com/samsinsane,Removed excessive escaping in CodeLite generator,2,[],https://github.com/premake/premake-core/pull/1230,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1230#issuecomment-456066593,Resolves #1168,I should be able to do it this evening (approx 5 hours) if you can give me write access on your branch.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1230,2019-01-20T16:07:08Z,2019-04-30T11:32:07Z,2019-04-30T11:32:11Z,MERGED,True,36,6,5,https://github.com/samsinsane,Removed excessive escaping in CodeLite generator,2,[],https://github.com/premake/premake-core/pull/1230,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1230#issuecomment-456067772,Resolves #1168,"The Allow edits from maintainers checkbox is ticked, but I'll add you as a collaborator on the fork just in case.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1230,2019-01-20T16:07:08Z,2019-04-30T11:32:07Z,2019-04-30T11:32:11Z,MERGED,True,36,6,5,https://github.com/samsinsane,Removed excessive escaping in CodeLite generator,2,[],https://github.com/premake/premake-core/pull/1230,https://github.com/tdesveauxPKFX,5,https://github.com/premake/premake-core/pull/1230#issuecomment-456177172,Resolves #1168,"As you can see in the commits, I added tests and fixed the escaping for the codelite generator.
(Edit: Forgot to say, the additional fix was after testing with Codelite 10)
I will let the rebase/squash to you.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1231,2019-01-21T10:06:54Z,2019-01-21T12:24:12Z,2019-01-21T12:36:12Z,MERGED,True,9,3,2,https://github.com/samsinsane,Fixed issue with per-configuration build commands not returning errors correctly,1,[],https://github.com/premake/premake-core/pull/1231,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1231,Resolves #1212,Resolves #1212,True,{}
premake/premake-core,https://github.com/premake/premake-core,1236,2019-02-01T06:06:20Z,2019-02-01T06:16:21Z,2019-02-01T06:16:21Z,MERGED,True,6,0,1,https://github.com/CosmicRey,Added support for Dx12 shader models,1,[],https://github.com/premake/premake-core/pull/1236,https://github.com/CosmicRey,1,https://github.com/premake/premake-core/pull/1236,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1239,2019-02-07T04:18:47Z,2019-02-07T09:59:42Z,2019-02-07T15:42:05Z,MERGED,True,34,0,1,https://github.com/macsforme,Implemented the startproject option for xcode,1,[],https://github.com/premake/premake-core/pull/1239,https://github.com/macsforme,1,https://github.com/premake/premake-core/pull/1239,"This was a fairly simple copy and paste from vs2005_solution.lua, but it enables the startproject option for the xcode action. When one uses the startproject option, the specified project should be moved to the very top of the Xcode workspace file, which causes that project's scheme to be the default selection when the workspace is first opened.
Fixes #1237.","This was a fairly simple copy and paste from vs2005_solution.lua, but it enables the startproject option for the xcode action. When one uses the startproject option, the specified project should be moved to the very top of the Xcode workspace file, which causes that project's scheme to be the default selection when the workspace is first opened.
Fixes #1237.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1240,2019-02-07T13:55:43Z,2019-03-12T11:09:33Z,2019-03-12T22:05:30Z,MERGED,True,43,0,2,https://github.com/WorldofBay,allow linking of mixed c++ assemblies,2,[],https://github.com/premake/premake-core/pull/1240,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1240,"#1205
been over a month, yet nobody yelled at me so here's the PR
Note that all tests still pass on the changed behaviour.","#1205
been over a month, yet nobody yelled at me so here's the PR
Note that all tests still pass on the changed behaviour.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1240,2019-02-07T13:55:43Z,2019-03-12T11:09:33Z,2019-03-12T22:05:30Z,MERGED,True,43,0,2,https://github.com/WorldofBay,allow linking of mixed c++ assemblies,2,[],https://github.com/premake/premake-core/pull/1240,https://github.com/WorldofBay,2,https://github.com/premake/premake-core/pull/1240#issuecomment-470931556,"#1205
been over a month, yet nobody yelled at me so here's the PR
Note that all tests still pass on the changed behaviour.",i don't want this to enter the void. is anything blocking the merge or are you just short in time?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1244,2019-02-14T13:16:24Z,2019-04-30T12:01:25Z,2019-04-30T12:01:29Z,MERGED,True,15,0,2,https://github.com/samsinsane,Fixed issue with detoken not handling deferred joins correctly,1,[],https://github.com/premake/premake-core/pull/1244,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1244,Fixes #999,Fixes #999,True,"{'THUMBS_UP': ['https://github.com/neico'], 'HOORAY': ['https://github.com/neico'], 'ROCKET': ['https://github.com/neico']}"
premake/premake-core,https://github.com/premake/premake-core,1247,2019-02-18T12:38:42Z,2019-02-18T13:19:13Z,2019-02-18T13:19:14Z,MERGED,True,15,0,2,https://github.com/tritao,Added support for `csversion` API to dotnet toolset.,1,[],https://github.com/premake/premake-core/pull/1247,https://github.com/tritao,1,https://github.com/premake/premake-core/pull/1247,Fixes #1246,Fixes #1246,True,{}
premake/premake-core,https://github.com/premake/premake-core,1248,2019-02-18T16:22:38Z,2019-02-19T14:27:14Z,2019-02-19T14:27:14Z,MERGED,True,2,2,2,https://github.com/tritao,Default to Roslyn-based `csc` compiler on all platforms.,1,[],https://github.com/premake/premake-core/pull/1248,https://github.com/tritao,1,https://github.com/premake/premake-core/pull/1248,"Mono has switched to the Roslyn compiler in its latest releases, so default to it going forward.
Users can still set mcs compiler manually, but since it does not support newer language versions, it doesn't make as much sense to be the default.","Mono has switched to the Roslyn compiler in its latest releases, so default to it going forward.
Users can still set mcs compiler manually, but since it does not support newer language versions, it doesn't make as much sense to be the default.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1249,2019-02-21T14:18:20Z,2019-02-24T11:44:47Z,2019-02-25T06:22:30Z,MERGED,True,2,1,1,https://github.com/WorldofBay,do not clear _isIncludingExternal in nested calls,1,[],https://github.com/premake/premake-core/pull/1249,https://github.com/WorldofBay,1,https://github.com/premake/premake-core/pull/1249,"nested includeexternal calls should not clear the state of their parent call
@Sairony's fix from #1001","nested includeexternal calls should not clear the state of their parent call
@Sairony's fix from #1001",True,{}
premake/premake-core,https://github.com/premake/premake-core,1252,2019-03-05T19:54:52Z,2019-10-20T19:46:21Z,2019-10-20T19:46:21Z,CLOSED,False,273,4,6,https://github.com/rlewicki,GameBoy build support,5,[],https://github.com/premake/premake-core/pull/1252,https://github.com/rlewicki,1,https://github.com/premake/premake-core/pull/1252,"Added new kind for gmake target which is GameBoyApp. It produces Makefile that outputs executable file with .gb extension and uses lcc compiler. For now you have to use --cc flag set to lcc during project generation in order to work properly. I'm pretty sure there is a way to set lcc compiler as default cc value when project kind is set to GameBoyApp same way target extension is set.
I'm open to any suggestions and improvements.","Added new kind for gmake target which is GameBoyApp. It produces Makefile that outputs executable file with .gb extension and uses lcc compiler. For now you have to use --cc flag set to lcc during project generation in order to work properly. I'm pretty sure there is a way to set lcc compiler as default cc value when project kind is set to GameBoyApp same way target extension is set.
I'm open to any suggestions and improvements.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1252,2019-03-05T19:54:52Z,2019-10-20T19:46:21Z,2019-10-20T19:46:21Z,CLOSED,False,273,4,6,https://github.com/rlewicki,GameBoy build support,5,[],https://github.com/premake/premake-core/pull/1252,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1252#issuecomment-469940696,"Added new kind for gmake target which is GameBoyApp. It produces Makefile that outputs executable file with .gb extension and uses lcc compiler. For now you have to use --cc flag set to lcc during project generation in order to work properly. I'm pretty sure there is a way to set lcc compiler as default cc value when project kind is set to GameBoyApp same way target extension is set.
I'm open to any suggestions and improvements.","There's a couple of things I would recommend before merging into core.

Support gmake2 instead of gmake, eventually we'll be replacing gmake with gmake2 and this will just stop working.
Instead of using kind to target Gameboy, use system
I would recommend splitting all of this out into a module. Some of the other modules we have should be able to guide you through this, as well as the wiki.

I'd suggest starting out with this in a separate repo, rlewicki/premake-gameboy for example. Add it to the list of modules here and if there's enough interest in having it in core we can look into that.",True,{'THUMBS_UP': ['https://github.com/rlewicki']}
premake/premake-core,https://github.com/premake/premake-core,1252,2019-03-05T19:54:52Z,2019-10-20T19:46:21Z,2019-10-20T19:46:21Z,CLOSED,False,273,4,6,https://github.com/rlewicki,GameBoy build support,5,[],https://github.com/premake/premake-core/pull/1252,https://github.com/rlewicki,3,https://github.com/premake/premake-core/pull/1252#issuecomment-470322410,"Added new kind for gmake target which is GameBoyApp. It produces Makefile that outputs executable file with .gb extension and uses lcc compiler. For now you have to use --cc flag set to lcc during project generation in order to work properly. I'm pretty sure there is a way to set lcc compiler as default cc value when project kind is set to GameBoyApp same way target extension is set.
I'm open to any suggestions and improvements.",Thank you for the response and valuable feedback. I will work on the mentioned module in my spare time then.,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1252,2019-03-05T19:54:52Z,2019-10-20T19:46:21Z,2019-10-20T19:46:21Z,CLOSED,False,273,4,6,https://github.com/rlewicki,GameBoy build support,5,[],https://github.com/premake/premake-core/pull/1252,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1252#issuecomment-544285508,"Added new kind for gmake target which is GameBoyApp. It produces Makefile that outputs executable file with .gb extension and uses lcc compiler. For now you have to use --cc flag set to lcc during project generation in order to work properly. I'm pretty sure there is a way to set lcc compiler as default cc value when project kind is set to GameBoyApp same way target extension is set.
I'm open to any suggestions and improvements.","It sounds like this one is now be worked on else where (be sure to add a link to the Modules page if so!), so I'm going to go ahead and close this one.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1253,2019-03-07T05:11:13Z,2019-03-17T13:07:52Z,2019-03-18T03:40:50Z,MERGED,True,322,337,4,https://github.com/ratzlaff,Xcode newid determinism,1,[],https://github.com/premake/premake-core/pull/1253,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1253,"Enables the ability to generate the exact same xcodeproj from different environments
Prior to this change, the absolute path held in node.path passed into xcode.newid would create different id's depending on where the project was located on your filesystem (especially visible when creating projects on windows and comparing the same project generated from a mac)
Since this path was the third item passed into xcode.newid, it was not visible to the existing tests. Some tests have been updated to show the new relative path being used to generate the id.","Enables the ability to generate the exact same xcodeproj from different environments
Prior to this change, the absolute path held in node.path passed into xcode.newid would create different id's depending on where the project was located on your filesystem (especially visible when creating projects on windows and comparing the same project generated from a mac)
Since this path was the third item passed into xcode.newid, it was not visible to the existing tests. Some tests have been updated to show the new relative path being used to generate the id.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1258,2019-03-17T16:11:58Z,2019-04-04T14:36:20Z,2019-04-04T14:36:20Z,MERGED,True,231,9,15,https://github.com/CosmicRey,Added support for Visual Studio 2019 solutions,1,[],https://github.com/premake/premake-core/pull/1258,https://github.com/CosmicRey,1,https://github.com/premake/premake-core/pull/1258,Uses new action vs2019,Uses new action vs2019,True,{'THUMBS_UP': ['https://github.com/ifarbod']}
premake/premake-core,https://github.com/premake/premake-core,1258,2019-03-17T16:11:58Z,2019-04-04T14:36:20Z,2019-04-04T14:36:20Z,MERGED,True,231,9,15,https://github.com/CosmicRey,Added support for Visual Studio 2019 solutions,1,[],https://github.com/premake/premake-core/pull/1258,https://github.com/fsfod,2,https://github.com/premake/premake-core/pull/1258#issuecomment-473689566,Uses new action vs2019,"I guess you beat me to punch to get a PR up for this https://github.com/fsfod/premake-core/commits/vs2019. You can just take any of my changes if you want for this PR most of them are same as yours.
I was just diffing between Visual Studio generated console projects between 2017 and 2019 for most of what i figured out. Something i did miss was the the ToolsVersion attribute changed to ""Current"" for vcxproj.user files instead of ""15"" idk how much it really matters to visual studio through.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1258,2019-03-17T16:11:58Z,2019-04-04T14:36:20Z,2019-04-04T14:36:20Z,MERGED,True,231,9,15,https://github.com/CosmicRey,Added support for Visual Studio 2019 solutions,1,[],https://github.com/premake/premake-core/pull/1258,https://github.com/CosmicRey,3,https://github.com/premake/premake-core/pull/1258#issuecomment-473690256,Uses new action vs2019,"Awesome thanks, I'll take a look!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1258,2019-03-17T16:11:58Z,2019-04-04T14:36:20Z,2019-04-04T14:36:20Z,MERGED,True,231,9,15,https://github.com/CosmicRey,Added support for Visual Studio 2019 solutions,1,[],https://github.com/premake/premake-core/pull/1258,https://github.com/CosmicRey,4,https://github.com/premake/premake-core/pull/1258#issuecomment-475405279,Uses new action vs2019,@samsinsane Just pinging to see if there is anything else needed.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1258,2019-03-17T16:11:58Z,2019-04-04T14:36:20Z,2019-04-04T14:36:20Z,MERGED,True,231,9,15,https://github.com/CosmicRey,Added support for Visual Studio 2019 solutions,1,[],https://github.com/premake/premake-core/pull/1258,https://github.com/WorldofBay,5,https://github.com/premake/premake-core/pull/1258#issuecomment-477214573,Uses new action vs2019,"lgtm but if you want to fulfill style things i'd have 3 little things:

end tables with comma so that future edits are easily copypastable/single-line changes (modules/vstudio/_manifest.lua)
maybe for the same reason add an 'or false' in modules/vstudio/_preload.lua:

_ACTION == ""vs2019"" or
false;

there is no trailing newline in modules/vstudio/tests/vc2010/test_header.lua

however, those are not necessary, just nice to have
at the very end you should squash your commits when you're ok then sam will merge once he's got the time :)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1259,2019-03-20T19:51:49Z,2019-10-20T20:00:16Z,2019-10-20T20:00:16Z,CLOSED,False,45,0,3,https://github.com/tekgoblin,Adds shaderincludedirs to fxcompile configuration,1,[],https://github.com/premake/premake-core/pull/1259,https://github.com/tekgoblin,1,https://github.com/premake/premake-core/pull/1259,Added shaderincludedirs to the visual studio configuration for fxcompile. Kept name inline with the premake includedirs,Added shaderincludedirs to the visual studio configuration for fxcompile. Kept name inline with the premake includedirs,True,{}
premake/premake-core,https://github.com/premake/premake-core,1259,2019-03-20T19:51:49Z,2019-10-20T20:00:16Z,2019-10-20T20:00:16Z,CLOSED,False,45,0,3,https://github.com/tekgoblin,Adds shaderincludedirs to fxcompile configuration,1,[],https://github.com/premake/premake-core/pull/1259,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1259#issuecomment-544286800,Added shaderincludedirs to the visual studio configuration for fxcompile. Kept name inline with the premake includedirs,"Shame this one stalled so close to the finish line. Closing this in favor of #1355, which changes the field type to ""list:directory"" as suggested.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1261,2019-03-25T15:25:17Z,2019-05-16T12:23:34Z,2019-05-16T12:23:41Z,CLOSED,False,1,1,1,https://github.com/dulingzhi,Fixed filed 'path' should use 'path.join' rather than 'path.deferredjoin' (#1260),1,[],https://github.com/premake/premake-core/pull/1261,https://github.com/dulingzhi,1,https://github.com/premake/premake-core/pull/1261,Resolve #1260,Resolve #1260,True,{}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1263,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.",True,{'THUMBS_UP': ['https://github.com/0x416c69']}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/ifarbod,2,https://github.com/premake/premake-core/pull/1263#issuecomment-477636219,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","Looks like some of the tests are failing, is the order of these really important?
stack traceback:
	...make-core/modules/android/tests/test_android_project.lua:35: in function 'testFunction'
[  FAILED  ] test_android_project.rttiOn
...make-core/modules/android/tests/test_android_project.lua:46: (4) expected:
	<ExceptionHandling>Enabled</ExceptionHandling>
...but was:
	<RuntimeTypeInfo>true</RuntimeTypeInfo>
fulltext:
<ClCompile>
	<PrecompiledHeader>NotUsing</PrecompiledHeader>
	<Optimization>Disabled</Optimization>
	<RuntimeTypeInfo>true</RuntimeTypeInfo>
</ClCompile>",True,{}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/WorldofBay,3,https://github.com/premake/premake-core/pull/1263#issuecomment-477659494,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","the other wrong test aren't because of order but because of default values in _premake-init.lua
both rtti and exceptionhandling are set to ""Default"" if not specified.
if the new behaviour is better you need to edit the tests.
i have no idea why the current test suite.exceptionHandlingOff has no rtti set as it should get from the defaults but for the rest the defaults seem to trigger if any configuration is done.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/WorldofBay,4,https://github.com/premake/premake-core/pull/1263#issuecomment-477668653,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","the rest looks clean but since i know what sam will say i can say it now before he reads it, so you're already done by then:
once you're finished, squash those commits into a single one",True,{}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/ifarbod,5,https://github.com/premake/premake-core/pull/1263#issuecomment-477683828,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","Thanks for the quick reviews, will do once I figure out the rest of the unit test issues",True,{}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/ifarbod,6,https://github.com/premake/premake-core/pull/1263#issuecomment-477718972,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","@WorldofBay All of the tests pass now. (the GCC builds on Travis didn't start for some reason)
I'll squash my commits into one if everything else is okay.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1263,2019-03-28T12:58:25Z,2019-03-28T20:03:28Z,2019-03-28T20:38:45Z,CLOSED,False,564,430,15,https://github.com/ifarbod,"Android module changes, stage 1 [defunct]",1,[],https://github.com/premake/premake-core/pull/1263,https://github.com/ifarbod,7,https://github.com/premake/premake-core/pull/1263#issuecomment-477750370,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","I messed up my local checkout beyond repair after squashing with premake-core's changes from master, I don't like having a lot of merge commits so here's another PR: #1264",True,{}
premake/premake-core,https://github.com/premake/premake-core,1264,2019-03-28T20:03:55Z,2019-04-04T16:39:37Z,2019-04-05T08:31:51Z,MERGED,True,199,124,8,https://github.com/ifarbod,"Android changes, stage 1",2,[],https://github.com/premake/premake-core/pull/1264,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1264,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1264,2019-03-28T20:03:55Z,2019-04-04T16:39:37Z,2019-04-05T08:31:51Z,MERGED,True,199,124,8,https://github.com/ifarbod,"Android changes, stage 1",2,[],https://github.com/premake/premake-core/pull/1264,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1264#issuecomment-479950856,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.",Once you squish the commits down it should be good to merge! üëç,True,{'THUMBS_UP': ['https://github.com/ifarbod']}
premake/premake-core,https://github.com/premake/premake-core,1264,2019-03-28T20:03:55Z,2019-04-04T16:39:37Z,2019-04-05T08:31:51Z,MERGED,True,199,124,8,https://github.com/ifarbod,"Android changes, stage 1",2,[],https://github.com/premake/premake-core/pull/1264,https://github.com/ifarbod,3,https://github.com/premake/premake-core/pull/1264#issuecomment-479964243,"As discussed in #1251, this is a PR that contains merely fixes and minor changes, I'll do the second PR with the new functions and features once this gets merged.
Here's a quick brief of what I did:

Reworked the stl API, using staticruntime to decide on shared/static.

stl ""libc++""
staticruntime ""On""
-- Would produce: ""c++_static""
-- Or:
stl ""gnustl""
staticruntime ""Off""
-- Would produce: ""gnustl_shared""

Fixed the MultiProcessorCompilation flag.
Renamed androidproj to Packaging.
Prevented some Windows-exclusive attributes from ending up in Android projects, such as CharacterSet.
Added NEON support for vectorextensions.
Added UnwindTables support for exceptionhandling.
Fixed targetName not working in Packaging projects.
Included #1112 (minus the unit tests) which fixes disablewarnings, exceptionhandling and rtti.
Unify cppdialect and cdialect, added support for C++latest which maps to C++17 at the moment.
Fixed pic.
Fixed thumbmode.","@samsinsane Thanks for the review, will squash everything into one now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1266,2019-04-05T10:38:22Z,2019-04-08T13:01:58Z,2019-04-08T17:29:34Z,MERGED,True,5,0,1,https://github.com/ifarbod,Implement the 'visibility' API for Android projects,1,[],https://github.com/premake/premake-core/pull/1266,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1266,As discussed in #1251 (comment),As discussed in #1251 (comment),True,{'THUMBS_UP': ['https://github.com/0x416c69']}
premake/premake-core,https://github.com/premake/premake-core,1266,2019-04-05T10:38:22Z,2019-04-08T13:01:58Z,2019-04-08T17:29:34Z,MERGED,True,5,0,1,https://github.com/ifarbod,Implement the 'visibility' API for Android projects,1,[],https://github.com/premake/premake-core/pull/1266,https://github.com/ifarbod,2,https://github.com/premake/premake-core/pull/1266#issuecomment-480729820,As discussed in #1251 (comment),"@samsinsane There's the ""Squash and merge"" option on the dropdown next to the Merge button - that way it doesn't need a force push.
But sure, I'll squash them anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1267,2019-04-15T15:06:30Z,2019-04-18T03:09:43Z,2019-09-09T04:05:29Z,MERGED,True,1,0,1,https://github.com/ratzlaff,Provide access to  json implementation,1,[],https://github.com/premake/premake-core/pull/1267,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1267,"Allow configuring/overriding the base implementation
Specifically, I needed a way to set to set strictTypes=true so that I could override the newArray and newObject functions","Allow configuring/overriding the base implementation
Specifically, I needed a way to set to set strictTypes=true so that I could override the newArray and newObject functions",True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/sp-jordi-vilalta,1,https://github.com/premake/premake-core/pull/1271,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.","The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/ratzlaff,2,https://github.com/premake/premake-core/pull/1271#issuecomment-486267606,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.",Would it be possible to make a test for this specific case? This looks like something that could easily regress.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/sp-jordi-vilalta,3,https://github.com/premake/premake-core/pull/1271#issuecomment-486295923,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.","Sure, I added a test.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/ratzlaff,4,https://github.com/premake/premake-core/pull/1271#issuecomment-486710920,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.",Looks good to me. I know that @samsinsane will request you to squash your commits into one before he accepts it.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/sp-jordi-vilalta,5,https://github.com/premake/premake-core/pull/1271#issuecomment-486719544,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.",Done ;),True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1271#issuecomment-486971441,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.","I don't really like this change, it removes functionality from an awful API to make it somewhat more awful but less awful for the simple case. You've made it easier to add paths with special characters, but you've made it impossible to only add the PNG files from a specific folder.
If the API kind was changed to be the same as files, it would allow for both file-thing.ext and path/**.png. Thoughts? Knowing the XCode generator, I doubt it could be this simple.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1271,2019-04-24T09:21:12Z,2019-10-21T11:26:35Z,2019-10-21T11:26:35Z,CLOSED,False,16,1,2,https://github.com/sp-jordi-vilalta,Fix xcodebuildresources with paths that contain special characters,2,[],https://github.com/premake/premake-core/pull/1271,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1271#issuecomment-544471653,"The resource paths were used as patterns, which interpreted some special characters. This PR changes it to use a plain search.","I take it back: while this PR is technically correct (we should not be doing Lua pattern checks there), ""fixing"" it to support Premake patterns supersedes this change. Closing this one in favor of #1356.
@sp-jordi-vilalta: thanks for taking the time to submit this fix and kicking off the conversation! Sorry this one didn't get merged; it was the right idea.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1275,2019-05-01T16:45:27Z,2019-06-07T03:54:46Z,2019-06-07T03:54:50Z,MERGED,True,59,14,3,https://github.com/samsinsane,Fixed various issues with escaping in CodeLite generator,1,[],https://github.com/premake/premake-core/pull/1275,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1275,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1275,2019-05-01T16:45:27Z,2019-06-07T03:54:46Z,2019-06-07T03:54:50Z,MERGED,True,59,14,3,https://github.com/samsinsane,Fixed various issues with escaping in CodeLite generator,1,[],https://github.com/premake/premake-core/pull/1275,https://github.com/alex-rass-88,2,https://github.com/premake/premake-core/pull/1275#issuecomment-496472036,,What about merging? CodeLite generator broken.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1275,2019-05-01T16:45:27Z,2019-06-07T03:54:46Z,2019-06-07T03:54:50Z,MERGED,True,59,14,3,https://github.com/samsinsane,Fixed various issues with escaping in CodeLite generator,1,[],https://github.com/premake/premake-core/pull/1275,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1275#issuecomment-499748200,,"@tdesveauxPKFX I made more changes since you last reviewed, but I'm going to merge this since as @alex-rass-88 has pointed out the generator is broken without these fixes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1276,2019-05-01T17:11:23Z,2019-05-02T17:35:39Z,2019-05-03T01:02:03Z,MERGED,True,5,3,2,https://github.com/samsinsane,Added support for forceincludes in CodeLite,1,[],https://github.com/premake/premake-core/pull/1276,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1276,Resolves #892,Resolves #892,True,{}
premake/premake-core,https://github.com/premake/premake-core,1278,2019-05-01T18:57:31Z,2019-05-04T12:07:14Z,2019-05-04T15:06:42Z,MERGED,True,241,54,4,https://github.com/tdesveauxPKFX,Packaging script improvement,11,[],https://github.com/premake/premake-core/pull/1278,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1278,"Finally managed to have some time to do this.
Changes are mostly to allow creating release packages without MinGW.
Also added a Bootstrap.bat that setup the environment for Visual Studio and run Bootstrap.mak.
Once this is merge, I will start the process for a new release.","Finally managed to have some time to do this.
Changes are mostly to allow creating release packages without MinGW.
Also added a Bootstrap.bat that setup the environment for Visual Studio and run Bootstrap.mak.
Once this is merge, I will start the process for a new release.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1278,2019-05-01T18:57:31Z,2019-05-04T12:07:14Z,2019-05-04T15:06:42Z,MERGED,True,241,54,4,https://github.com/tdesveauxPKFX,Packaging script improvement,11,[],https://github.com/premake/premake-core/pull/1278,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1278#issuecomment-488989467,"Finally managed to have some time to do this.
Changes are mostly to allow creating release packages without MinGW.
Also added a Bootstrap.bat that setup the environment for Visual Studio and run Bootstrap.mak.
Once this is merge, I will start the process for a new release.","I'm going to approve this, but you'll need to fix up the macOS builds - maybe for macOS using macos, macosx and osx should trigger the macOS job in Bootstrap.mak? Not the end of the world to support multiple names, assuming it works.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1278,2019-05-01T18:57:31Z,2019-05-04T12:07:14Z,2019-05-04T15:06:42Z,MERGED,True,241,54,4,https://github.com/tdesveauxPKFX,Packaging script improvement,11,[],https://github.com/premake/premake-core/pull/1278,https://github.com/tdesveauxPKFX,3,https://github.com/premake/premake-core/pull/1278#issuecomment-489140076,"Finally managed to have some time to do this.
Changes are mostly to allow creating release packages without MinGW.
Also added a Bootstrap.bat that setup the environment for Visual Studio and run Bootstrap.mak.
Once this is merge, I will start the process for a new release.","Bootstrapping should be fixed now.
If you think it's acceptable, I will merge once CI approve and do the following in another PR (after publishing a release):

Bootstrap.mak default to latest Visual Studio present
Package.lua sources use gmake2 action instead of gmake
Package.lua sources include Premake projects for codelite and xcode",True,{}
premake/premake-core,https://github.com/premake/premake-core,1279,2019-05-04T14:59:37Z,2019-05-05T14:19:36Z,2019-10-20T19:31:26Z,MERGED,True,41,2,3,https://github.com/tdesveauxPKFX,Release 5.0 alpha14,5,[],https://github.com/premake/premake-core/pull/1279,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1279,"Closes #1213
Here is alpha14 release!
Release is drafted, I will leave the publishing to the one approving/merging this.","Closes #1213
Here is alpha14 release!
Release is drafted, I will leave the publishing to the one approving/merging this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1280,2019-05-04T15:02:14Z,2019-05-05T14:24:06Z,2019-12-22T16:22:34Z,MERGED,True,62,4,1,https://github.com/tdesveauxPKFX,Bootstrap.bat: Default to latest Visual Studio available,1,[],https://github.com/premake/premake-core/pull/1280,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1280,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1281,2019-05-04T15:27:37Z,2019-05-05T14:26:09Z,2019-12-22T16:23:54Z,MERGED,True,16,14,3,https://github.com/tdesveauxPKFX,Source package improvements,3,[],https://github.com/premake/premake-core/pull/1281,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1281,"Use gmake2 instead of gmake for source packages
Use gmake2 instead of gmake for Bootstrap
Add xcode and codelite projects to source packages","Use gmake2 instead of gmake for source packages
Use gmake2 instead of gmake for Bootstrap
Add xcode and codelite projects to source packages",True,{}
premake/premake-core,https://github.com/premake/premake-core,1282,2019-05-07T15:43:16Z,2019-05-08T02:15:41Z,2019-05-08T07:51:29Z,MERGED,True,1,1,1,https://github.com/ifarbod,Fix VS2019 solution icons,1,[],https://github.com/premake/premake-core/pull/1282,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1282,"VS2019 solutions save with this header (# Visual Studio Version 16 rather than # Visual Studio 16), I figured this was why the icons were broken.","VS2019 solutions save with this header (# Visual Studio Version 16 rather than # Visual Studio 16), I figured this was why the icons were broken.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/ifarbod,1,https://github.com/premake/premake-core/pull/1285,,,True,{'THUMBS_UP': ['https://github.com/0x416c69']}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/ifarbod,2,https://github.com/premake/premake-core/pull/1285#issuecomment-491346433,,"I tried something like this but this is what I get:
local function preparePropertyGroup()
		system ""android""
		local cfg = test.getconfig(prj, ""Debug"", platform)
		vc2010.propertyGroup(cfg)
	end

	function suite.minVisualStudioVersion()
		preparePropertyGroup()
		test.capture [[
	<MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>
	<ApplicationType>Android</ApplicationType>
	<ApplicationTypeRevision>2.0</ApplicationTypeRevision>]]
	end
[  FAILED  ] test_android_project.minVisualStudioVersion
...make-core/modules/android/tests/test_android_project.lua:31: (1) expected:
        <MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>
...but was:
<PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Debug|Android'"">
fulltext:
<PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Debug|Android'"">

stack traceback:
        ...make-core/modules/android/tests/test_android_project.lua:31: in function 'testFunction'

 1 FAILED TESTS",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/ratzlaff,3,https://github.com/premake/premake-core/pull/1285#issuecomment-491880417,,"After your call to preparePropertyGroup() you probably want to call android.androidApplicationType(cfg) - so preparePropertyGroup may need to return the proper cfg.
the output after fulltext: is what was captured (normally written to the file) for the unit test as a result of calling those functions in that order.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1285#issuecomment-492180852,,"You're also probably going to need to set the action with p.action.set(""vs2015""), or whichever action you're intending to test.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/ifarbod,5,https://github.com/premake/premake-core/pull/1285#issuecomment-495586818,,"@ratzlaff Thanks, I've fixed it.
@samsinsane I thought suite.setup() already did that, so I did nothing for that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1285#issuecomment-499744580,,"@ifarbod Sorry, I wasn't overly clear there. Testing vs2015 is great, but it would be good to test all the actions that your code supports. If someone rearranged the if statements, which would result in 14.0 being output always, the tests should catch that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/ifarbod,7,https://github.com/premake/premake-core/pull/1285#issuecomment-499978142,,"All right then, I hope this is good enough.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1285,2019-05-08T14:41:12Z,2019-06-07T22:34:31Z,2019-06-08T12:29:18Z,MERGED,True,50,1,2,https://github.com/ifarbod,Use correct values for MinimumVisualStudioVersion in Android projects,3,[],https://github.com/premake/premake-core/pull/1285,https://github.com/samsinsane,8,https://github.com/premake/premake-core/pull/1285#issuecomment-500059945,,"Perfect, thanks!",True,{'THUMBS_UP': ['https://github.com/ifarbod']}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,1,https://github.com/premake/premake-core/pull/1289,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.","This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,2,https://github.com/premake/premake-core/pull/1289#issuecomment-496738022,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.",Any comment?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/ratzlaff,3,https://github.com/premake/premake-core/pull/1289#issuecomment-497359773,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.","so, I don't know anything about haiku, just what I have read on wikipedia recently
Why does premake need to link against 'network'?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,4,https://github.com/premake/premake-core/pull/1289#issuecomment-497371555,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.","Why does premake need to link against 'network'?

Probably because of cURL I suppose.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,5,https://github.com/premake/premake-core/pull/1289#issuecomment-497808548,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.",bsd is for getpass() btw.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,6,https://github.com/premake/premake-core/pull/1289#issuecomment-503212467,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.","It would be great if you could squish this down to a single commit, it's only +20/-6.

Ok I'll squash all this when I get some time :-)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,7,https://github.com/premake/premake-core/pull/1289#issuecomment-536791040,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.","Just rebased and squashed, builds here.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1289,2019-05-18T23:22:21Z,2019-10-01T12:31:18Z,2019-10-01T13:05:34Z,MERGED,True,20,6,8,https://github.com/mmuman,Haiku fixes,1,[],https://github.com/premake/premake-core/pull/1289,https://github.com/mmuman,8,https://github.com/premake/premake-core/pull/1289#issuecomment-536969419,"This fixes bootstrapping on Haiku.
I could probably squash this a bit.
Still some tests in error though.
Also the makefile in the tarball seems to have hardcoded libs and stuff, not sure how to fix this.","Oh right, I think we're set.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1294,2019-05-28T14:20:26Z,2019-06-07T03:46:00Z,2019-06-07T03:46:00Z,CLOSED,False,16,1,2,https://github.com/alex-rass-88,Fix CodeLite generator.,4,[],https://github.com/premake/premake-core/pull/1294,https://github.com/alex-rass-88,1,https://github.com/premake/premake-core/pull/1294,CodeLite generator now working.,CodeLite generator now working.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1294,2019-05-28T14:20:26Z,2019-06-07T03:46:00Z,2019-06-07T03:46:00Z,CLOSED,False,16,1,2,https://github.com/alex-rass-88,Fix CodeLite generator.,4,[],https://github.com/premake/premake-core/pull/1294,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1294#issuecomment-499747064,CodeLite generator now working.,I'm going to close this since it looks like a partial copy of my PR #1275. Duplicating PRs like this doesn't help us get things fixed faster.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1296,2019-05-30T17:11:22Z,2019-06-07T06:36:37Z,2019-12-22T16:22:55Z,MERGED,True,17,12,2,https://github.com/tdesveauxPKFX,Fix source packaging,2,[],https://github.com/premake/premake-core/pull/1296,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1296,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1296,2019-05-30T17:11:22Z,2019-06-07T06:36:37Z,2019-12-22T16:22:55Z,MERGED,True,17,12,2,https://github.com/tdesveauxPKFX,Fix source packaging,2,[],https://github.com/premake/premake-core/pull/1296,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1296#issuecomment-497445833,,"I don't think this will do it, you need to run premake embed after you check out the sources to generate scripts.c. Unless I'm missing something?
You also probably didn't intend to delete .gitattributes, I assume‚Ä¶",True,{}
premake/premake-core,https://github.com/premake/premake-core,1296,2019-05-30T17:11:22Z,2019-06-07T06:36:37Z,2019-12-22T16:22:55Z,MERGED,True,17,12,2,https://github.com/tdesveauxPKFX,Fix source packaging,2,[],https://github.com/premake/premake-core/pull/1296,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1296#issuecomment-498451340,,"I stand corrected, source package is working fine now. But .gitattributes needs to be restored.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1296,2019-05-30T17:11:22Z,2019-06-07T06:36:37Z,2019-12-22T16:22:55Z,MERGED,True,17,12,2,https://github.com/tdesveauxPKFX,Fix source packaging,2,[],https://github.com/premake/premake-core/pull/1296,https://github.com/tdesveauxPKFX,4,https://github.com/premake/premake-core/pull/1296#issuecomment-498634307,,"Sorry about the lack of context.

I don't think this will do it, you need to run premake embed after you check out the sources to generate scripts.c. Unless I'm missing something?

embed was already called before the package creation here:

  
    
      premake-core/scripts/package.lua
    
    
        Lines 155 to 164
      in
      e4d8121
    
  
  
    

        
          
           -- 
        

        
          
           -- Make absolutely sure the embedded scripts have been updated 
        

        
          
           -- 
        

        
          
            
        

        
          
           	print(""Updating embedded scripts..."") 
        

        
          
            
        

        
          
           	local z = execQuiet(""%s embed %s"", premakeBin, iif(kind == ""source"", """", ""--bytecode"")) 
        

        
          
           	if not z then 
        

        
          
           		error(""failed to update the embedded scripts"", 0) 
        

        
          
           	end 
        
    
  


When I changed this script before, I removed the dependency on zip and used git archive instead but files needs to be tracked to be included in the package and I forgot to add scripts.c.

You also probably didn't intend to delete .gitattributes, I assume‚Ä¶

It was intended. I added gitattributes to ignore some file on git archive.
I changed the way to ignore files in this PR as github also use git archive when you choose to download the repo instead of cloning it.
Also, it makes more sense to centralize the information about which file is ignored/added to the package.
As .gitattributes would be empty after this, I simply deleted it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1298,2019-06-02T09:24:39Z,2019-06-03T21:21:03Z,2019-06-04T07:55:29Z,MERGED,True,503,162,9,https://github.com/TurkeyMan,Update D module to VS2019 and latest D compiler options.,1,[],https://github.com/premake/premake-core/pull/1298,https://github.com/TurkeyMan,1,https://github.com/premake/premake-core/pull/1298,Been meaning to get to this for ages.,Been meaning to get to this for ages.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1298,2019-06-02T09:24:39Z,2019-06-03T21:21:03Z,2019-06-04T07:55:29Z,MERGED,True,503,162,9,https://github.com/TurkeyMan,Update D module to VS2019 and latest D compiler options.,1,[],https://github.com/premake/premake-core/pull/1298,https://github.com/TurkeyMan,2,https://github.com/premake/premake-core/pull/1298#issuecomment-498563793,Been meaning to get to this for ages.,"Yeah I dunno, I opened an issue about that a while ago to start discussion. The toolset issue is kinda problematic; premake is kinda incompatible with mixed-language projects for that reason.
Maybe you could filter it by language or something, but that feels really problematic.
Could use parallel API's for different language toolsets, but that feels crappy as well. Not sure.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1301,2019-06-10T14:51:53Z,2019-10-21T11:35:15Z,2019-10-21T11:35:15Z,CLOSED,False,10,2,2,https://github.com/tdesveauxPKFX,Fix related to #1299,2,[],https://github.com/premake/premake-core/pull/1301,https://github.com/tdesveauxPKFX,1,https://github.com/premake/premake-core/pull/1301,I'm not 100% sure about the tree fix. Maybe we still want onleaf called in this case and we should patch the onleaf functions instead.,I'm not 100% sure about the tree fix. Maybe we still want onleaf called in this case and we should patch the onleaf functions instead.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1301,2019-06-10T14:51:53Z,2019-10-21T11:35:15Z,2019-10-21T11:35:15Z,CLOSED,False,10,2,2,https://github.com/tdesveauxPKFX,Fix related to #1299,2,[],https://github.com/premake/premake-core/pull/1301,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1301#issuecomment-500813591,I'm not 100% sure about the tree fix. Maybe we still want onleaf called in this case and we should patch the onleaf functions instead.,"To my understanding, this problem was only with the codelite generator so wouldn't that indicate an issue with the generator rather than fileconfig or tree?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1301,2019-06-10T14:51:53Z,2019-10-21T11:35:15Z,2019-10-21T11:35:15Z,CLOSED,False,10,2,2,https://github.com/tdesveauxPKFX,Fix related to #1299,2,[],https://github.com/premake/premake-core/pull/1301,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1301#issuecomment-544474350,I'm not 100% sure about the tree fix. Maybe we still want onleaf called in this case and we should patch the onleaf functions instead.,"Since this one has stalled, I'm going to go ahead and close this one. I also think the tree fix should not be included: calling onnode() for an empty node seems valid to me. And there are no tests to cover the original bug. I'll see if I can submit a follow-up PR to address it, but closing this for now since it has gone stale.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1305,2019-06-27T22:50:49Z,2019-06-30T12:25:46Z,2019-06-30T12:25:46Z,MERGED,True,2,6,1,https://github.com/cfs-pure,Reconcile logic within os_matchisfile(),1,[],https://github.com/premake/premake-core/pull/1305,https://github.com/cfs-pure,1,https://github.com/premake/premake-core/pull/1305,"If dirent supplies d_type, then match the logic used within do_isfile() to determine if a directory entry is a file or not.","If dirent supplies d_type, then match the logic used within do_isfile() to determine if a directory entry is a file or not.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1313,2019-07-15T13:17:59Z,2019-07-22T11:23:23Z,2019-07-22T11:23:23Z,MERGED,True,32,2,1,https://github.com/monkeywithacupcake,Activating Open Collective,1,[],https://github.com/premake/premake-core/pull/1313,https://github.com/monkeywithacupcake,1,https://github.com/premake/premake-core/pull/1313,"Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/premake ‚ù§Ô∏è
What it does:

adds a badge to show the latest number of financial contributors
adds a banner displaying contributors to the project on GitHub
adds a banner displaying all individuals contributing financially on Open Collective
adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.
Thank you for your great contribution to the Open Source community. You are awesome! üôå
And welcome to the Open Collective community! üòä
Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!","Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/premake ‚ù§Ô∏è
What it does:

adds a badge to show the latest number of financial contributors
adds a banner displaying contributors to the project on GitHub
adds a banner displaying all individuals contributing financially on Open Collective
adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.
Thank you for your great contribution to the Open Source community. You are awesome! üôå
And welcome to the Open Collective community! üòä
Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1313,2019-07-15T13:17:59Z,2019-07-22T11:23:23Z,2019-07-22T11:23:23Z,MERGED,True,32,2,1,https://github.com/monkeywithacupcake,Activating Open Collective,1,[],https://github.com/premake/premake-core/pull/1313,https://github.com/WorldofBay,2,https://github.com/premake/premake-core/pull/1313#issuecomment-511429229,"Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/premake ‚ù§Ô∏è
What it does:

adds a badge to show the latest number of financial contributors
adds a banner displaying contributors to the project on GitHub
adds a banner displaying all individuals contributing financially on Open Collective
adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.
Thank you for your great contribution to the Open Source community. You are awesome! üôå
And welcome to the Open Collective community! üòä
Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!","for anyone else wondering why the link is broken: it's premake without the ""-core"":
https://opencollective.com/premake",True,{}
premake/premake-core,https://github.com/premake/premake-core,1313,2019-07-15T13:17:59Z,2019-07-22T11:23:23Z,2019-07-22T11:23:23Z,MERGED,True,32,2,1,https://github.com/monkeywithacupcake,Activating Open Collective,1,[],https://github.com/premake/premake-core/pull/1313,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1313#issuecomment-513746189,"Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/premake ‚ù§Ô∏è
What it does:

adds a badge to show the latest number of financial contributors
adds a banner displaying contributors to the project on GitHub
adds a banner displaying all individuals contributing financially on Open Collective
adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.
Thank you for your great contribution to the Open Source community. You are awesome! üôå
And welcome to the Open Collective community! üòä
Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!",Link fixed.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1316,2019-07-22T22:54:33Z,2019-07-24T01:27:06Z,2019-08-21T21:16:01Z,MERGED,True,1,0,1,https://github.com/starkos,Add FUNDING.yml for GitHub Sponsors,2,[],https://github.com/premake/premake-core/pull/1316,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1316,Connect Premake OpenCollective using GitHub's new sponsorship features.,Connect Premake OpenCollective using GitHub's new sponsorship features.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1316,2019-07-22T22:54:33Z,2019-07-24T01:27:06Z,2019-08-21T21:16:01Z,MERGED,True,1,0,1,https://github.com/starkos,Add FUNDING.yml for GitHub Sponsors,2,[],https://github.com/premake/premake-core/pull/1316,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1316#issuecomment-514264259,Connect Premake OpenCollective using GitHub's new sponsorship features.,Waiting for CI checks to pass‚Ä¶,True,{}
premake/premake-core,https://github.com/premake/premake-core,1317,2019-07-23T00:32:39Z,2020-04-15T13:10:41Z,2020-04-15T13:10:42Z,CLOSED,False,20,21,2,https://github.com/jeaiii,"deterministic ""latest"" SDK for vs2017",2,[],https://github.com/premake/premake-core/pull/1317,https://github.com/jeaiii,1,https://github.com/premake/premake-core/pull/1317,"using idea from here:
https://developercommunity.visualstudio.com/content/problem/140294/windowstargetplatformversion-makes-it-impossible-t.html","using idea from here:
https://developercommunity.visualstudio.com/content/problem/140294/windowstargetplatformversion-makes-it-impossible-t.html",True,{}
premake/premake-core,https://github.com/premake/premake-core,1317,2019-07-23T00:32:39Z,2020-04-15T13:10:41Z,2020-04-15T13:10:42Z,CLOSED,False,20,21,2,https://github.com/jeaiii,"deterministic ""latest"" SDK for vs2017",2,[],https://github.com/premake/premake-core/pull/1317,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1317#issuecomment-614030737,"using idea from here:
https://developercommunity.visualstudio.com/content/problem/140294/windowstargetplatformversion-makes-it-impossible-t.html",I've put together a cleaned up alternative PR for this one: #1424. I'm going to go ahead and close this one in favor of that new one; will reopen if #1424 can't be approved.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1318,2019-07-23T11:53:29Z,2019-07-23T12:04:35Z,2019-07-23T12:04:41Z,MERGED,True,1,1,1,https://github.com/OsiJr,Updated mismatched android config to the value in the allowed stl table,1,[],https://github.com/premake/premake-core/pull/1318,https://github.com/OsiJr,1,https://github.com/premake/premake-core/pull/1318,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1323,2019-08-20T00:22:33Z,2019-08-20T14:30:22Z,2019-08-20T14:34:21Z,MERGED,True,2,2,2,https://github.com/starkos,Update copyright year in support files,1,[],https://github.com/premake/premake-core/pull/1323,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1323,Catch up our copyrights before the year is over and we have to do it again.,Catch up our copyrights before the year is over and we have to do it again.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1324,2019-08-20T20:43:00Z,2019-08-21T15:11:19Z,2019-08-21T21:16:10Z,MERGED,True,69,0,1,https://github.com/starkos,Add a CONTRIBUTING.md,1,[],https://github.com/premake/premake-core/pull/1324,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1324,"The GitHub convention is to put contributor guidelines into a file named CONTRIBUTING.md. I took what's on the wiki, freshened it up, and moved it over to CONTRIBUTING.md. Let me know if think any changes are needed.
(I'll be taking a pass over README.md soon, and will rework the contributor links and such there when I do.)","The GitHub convention is to put contributor guidelines into a file named CONTRIBUTING.md. I took what's on the wiki, freshened it up, and moved it over to CONTRIBUTING.md. Let me know if think any changes are needed.
(I'll be taking a pass over README.md soon, and will rework the contributor links and such there when I do.)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1325,2019-08-21T21:17:37Z,2019-08-27T15:29:03Z,2019-08-27T15:29:10Z,MERGED,True,64,43,1,https://github.com/starkos,Improve the README,1,[],https://github.com/premake/premake-core/pull/1325,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1325,You can see the proposed new version here.,You can see the proposed new version here.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1325,2019-08-21T21:17:37Z,2019-08-27T15:29:03Z,2019-08-27T15:29:10Z,MERGED,True,64,43,1,https://github.com/starkos,Improve the README,1,[],https://github.com/premake/premake-core/pull/1325,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1325#issuecomment-524233351,You can see the proposed new version here.,"Thanks for catching that, I'll get it fixed.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1326,2019-08-28T20:27:02Z,2019-08-29T08:54:01Z,2019-10-20T19:31:36Z,MERGED,True,50,0,2,https://github.com/starkos,Update issue templates,1,[],https://github.com/premake/premake-core/pull/1326,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1326,"Spin up templates for new issues and feature requests, to help make reviewing a little easier.","Spin up templates for new issues and feature requests, to help make reviewing a little easier.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1327,2019-08-29T14:23:14Z,2019-08-29T15:25:36Z,2019-10-20T19:32:13Z,MERGED,True,21,0,1,https://github.com/starkos,Add a pull request template,1,[],https://github.com/premake/premake-core/pull/1327,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1327,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1332,2019-09-12T05:35:42Z,2019-09-12T05:57:42Z,2020-03-30T14:00:05Z,MERGED,True,170,11,3,https://github.com/ratzlaff,Account for filename collisions on systems with case-insensitive file‚Ä¶,1,[],https://github.com/premake/premake-core/pull/1332,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1332,"What does this PR do?
Continues the work done in PR #1191 by accounting for case-insensitive filesystems
How does this PR change Premake's behavior?
when computing sequence numbers for a compiled object filename, use the lowercase version of the base file name
closes #1241","What does this PR do?
Continues the work done in PR #1191 by accounting for case-insensitive filesystems
How does this PR change Premake's behavior?
when computing sequence numbers for a compiled object filename, use the lowercase version of the base file name
closes #1241",True,{}
premake/premake-core,https://github.com/premake/premake-core,1332,2019-09-12T05:35:42Z,2019-09-12T05:57:42Z,2020-03-30T14:00:05Z,MERGED,True,170,11,3,https://github.com/ratzlaff,Account for filename collisions on systems with case-insensitive file‚Ä¶,1,[],https://github.com/premake/premake-core/pull/1332,https://github.com/codecat,2,https://github.com/premake/premake-core/pull/1332#issuecomment-604730427,"What does this PR do?
Continues the work done in PR #1191 by accounting for case-insensitive filesystems
How does this PR change Premake's behavior?
when computing sequence numbers for a compiled object filename, use the lowercase version of the base file name
closes #1241","Apologies if this gets asked a lot, but is a new pre-release expected that contains this fix? I just ran into this exact problem myself on the latest pre-release version. No worries if a pre-release is not in sight, I can build it myself as well! üëç
Just wanted to give a ping that someone randomly hit into this issue.. üòÖ",True,{}
premake/premake-core,https://github.com/premake/premake-core,1332,2019-09-12T05:35:42Z,2019-09-12T05:57:42Z,2020-03-30T14:00:05Z,MERGED,True,170,11,3,https://github.com/ratzlaff,Account for filename collisions on systems with case-insensitive file‚Ä¶,1,[],https://github.com/premake/premake-core/pull/1332,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1332#issuecomment-606017021,"What does this PR do?
Continues the work done in PR #1191 by accounting for case-insensitive filesystems
How does this PR change Premake's behavior?
when computing sequence numbers for a compiled object filename, use the lowercase version of the base file name
closes #1241","Top of my Premake to-do list right now. I had planning to punch through some PRs and low-hanging issues and get the release out when I got back the States a few weeks ago, but as everything has gone sort of‚Ä¶sideways since then I haven't been able to make the progress I'd hoped. If I continues to drag on I'll abandon the fixes and just make the release.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1333,2019-09-13T04:18:24Z,2019-09-13T07:03:27Z,2019-09-14T00:51:21Z,MERGED,True,4,9,1,https://github.com/ratzlaff,Cleanup related to #1332,1,[],https://github.com/premake/premake-core/pull/1333,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1333,"What does this PR do?
Deletes some unnecessary variables from PR #1332
How does this PR change Premake's behavior?
No change to behavior, hopefully makes things easier to read for the next person","What does this PR do?
Deletes some unnecessary variables from PR #1332
How does this PR change Premake's behavior?
No change to behavior, hopefully makes things easier to read for the next person",True,{}
premake/premake-core,https://github.com/premake/premake-core,1334,2019-09-14T04:14:07Z,2019-09-15T12:41:19Z,2019-09-15T14:24:10Z,MERGED,True,157,7,2,https://github.com/ratzlaff,Implement 'compileas' for vc2008,1,[],https://github.com/premake/premake-core/pull/1334,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1334,"What does this PR do?
Adds support for:
filter {""files:...""}
    compileas ""...""

to the vs2008 action
How does this PR change Premake's behavior?
the vs2008 action gains new functionality
Anything else we should know?
closes #1255","What does this PR do?
Adds support for:
filter {""files:...""}
    compileas ""...""

to the vs2008 action
How does this PR change Premake's behavior?
the vs2008 action gains new functionality
Anything else we should know?
closes #1255",True,{}
premake/premake-core,https://github.com/premake/premake-core,1337,2019-09-22T12:11:22Z,2019-09-22T12:23:57Z,2019-09-22T15:10:32Z,MERGED,True,48,0,2,https://github.com/baconpaul,"On OSX, convert systemversion to MACOSX_DEPLOYMENT_TARGET",1,[],https://github.com/premake/premake-core/pull/1337,https://github.com/baconpaul,1,https://github.com/premake/premake-core/pull/1337,"Per the discussion in issue #1336, if systemversion is set
output MACOSX_DEPLOYMENT_TARGET into the resulting xcode project.
This borrows a diff from the (unmerged) PR #1003, applies it
in isolation, and adds a pair of unit tests to confirm that both
setting and not setting the systemversion results in correct
output
There is one situation where this could break a user's premake. If they set a systemversion globally and built only on windows and mac, right now that global systemversion would be ignored on mac; but after this change that systemversion will need to be OS-scoped.
Since this is my first pull request, I am sure you'll have lots of feedback. I'm happy to change whatever you think is appropriate! I checked the contrib guidelines and I think I got everything but want to make sure this works for you all.
Thanks so much!
Closes #1336

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits","Per the discussion in issue #1336, if systemversion is set
output MACOSX_DEPLOYMENT_TARGET into the resulting xcode project.
This borrows a diff from the (unmerged) PR #1003, applies it
in isolation, and adds a pair of unit tests to confirm that both
setting and not setting the systemversion results in correct
output
There is one situation where this could break a user's premake. If they set a systemversion globally and built only on windows and mac, right now that global systemversion would be ignored on mac; but after this change that systemversion will need to be OS-scoped.
Since this is my first pull request, I am sure you'll have lots of feedback. I'm happy to change whatever you think is appropriate! I checked the contrib guidelines and I think I got everything but want to make sure this works for you all.
Thanks so much!
Closes #1336

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1337,2019-09-22T12:11:22Z,2019-09-22T12:23:57Z,2019-09-22T15:10:32Z,MERGED,True,48,0,2,https://github.com/baconpaul,"On OSX, convert systemversion to MACOSX_DEPLOYMENT_TARGET",1,[],https://github.com/premake/premake-core/pull/1337,https://github.com/baconpaul,2,https://github.com/premake/premake-core/pull/1337#issuecomment-533878176,"Per the discussion in issue #1336, if systemversion is set
output MACOSX_DEPLOYMENT_TARGET into the resulting xcode project.
This borrows a diff from the (unmerged) PR #1003, applies it
in isolation, and adds a pair of unit tests to confirm that both
setting and not setting the systemversion results in correct
output
There is one situation where this could break a user's premake. If they set a systemversion globally and built only on windows and mac, right now that global systemversion would be ignored on mac; but after this change that systemversion will need to be OS-scoped.
Since this is my first pull request, I am sure you'll have lots of feedback. I'm happy to change whatever you think is appropriate! I checked the contrib guidelines and I think I got everything but want to make sure this works for you all.
Thanks so much!
Closes #1336

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits","Hey awesome! Thank you for merging.
Out of curiosity: how often do you rev binaries? I guess this will be in premake5 alpha15 but curious what the ship date for that is (if you have one).
Appreciate the merge!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1337,2019-09-22T12:11:22Z,2019-09-22T12:23:57Z,2019-09-22T15:10:32Z,MERGED,True,48,0,2,https://github.com/baconpaul,"On OSX, convert systemversion to MACOSX_DEPLOYMENT_TARGET",1,[],https://github.com/premake/premake-core/pull/1337,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1337#issuecomment-533881360,"Per the discussion in issue #1336, if systemversion is set
output MACOSX_DEPLOYMENT_TARGET into the resulting xcode project.
This borrows a diff from the (unmerged) PR #1003, applies it
in isolation, and adds a pair of unit tests to confirm that both
setting and not setting the systemversion results in correct
output
There is one situation where this could break a user's premake. If they set a systemversion globally and built only on windows and mac, right now that global systemversion would be ignored on mac; but after this change that systemversion will need to be OS-scoped.
Since this is my first pull request, I am sure you'll have lots of feedback. I'm happy to change whatever you think is appropriate! I checked the contrib guidelines and I think I got everything but want to make sure this works for you all.
Thanks so much!
Closes #1336

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits","how often do you rev binaries? I guess this will be in premake5 alpha15 but curious what the ship date for that is (if you have one).

Unfortunately, we don't have any particular schedule for releases, it's more of a ""when there's time"" kind of thing at the moment.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1337,2019-09-22T12:11:22Z,2019-09-22T12:23:57Z,2019-09-22T15:10:32Z,MERGED,True,48,0,2,https://github.com/baconpaul,"On OSX, convert systemversion to MACOSX_DEPLOYMENT_TARGET",1,[],https://github.com/premake/premake-core/pull/1337,https://github.com/baconpaul,4,https://github.com/premake/premake-core/pull/1337#issuecomment-533890077,"Per the discussion in issue #1336, if systemversion is set
output MACOSX_DEPLOYMENT_TARGET into the resulting xcode project.
This borrows a diff from the (unmerged) PR #1003, applies it
in isolation, and adds a pair of unit tests to confirm that both
setting and not setting the systemversion results in correct
output
There is one situation where this could break a user's premake. If they set a systemversion globally and built only on windows and mac, right now that global systemversion would be ignored on mac; but after this change that systemversion will need to be OS-scoped.
Since this is my first pull request, I am sure you'll have lots of feedback. I'm happy to change whatever you think is appropriate! I checked the contrib guidelines and I think I got everything but want to make sure this works for you all.
Thanks so much!
Closes #1336

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1340,2019-10-06T18:26:21Z,2019-10-07T14:53:47Z,2019-10-07T14:53:47Z,MERGED,True,214,164,65,https://github.com/jp31415926,Upgrade Lua from 5.3.4 to 5.3.5,1,[],https://github.com/premake/premake-core/pull/1340,https://github.com/jp31415926,1,https://github.com/premake/premake-core/pull/1340,"What does this PR do?
Simple patch to upgrade Lua to 5.3.5. I have had no problems with this upgrade in my other lua projects and I don't expect you to have any issues as well.
How does this PR change Premake's behavior?
There should be no change functionally. The changes made were mostly internal and don't appear to be breaking changes. The changes that premake made to lauxlib.c and liolib.c were maintained.
pretest5 test was executed after this change and passed all tests.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Simple patch to upgrade Lua to 5.3.5. I have had no problems with this upgrade in my other lua projects and I don't expect you to have any issues as well.
How does this PR change Premake's behavior?
There should be no change functionally. The changes made were mostly internal and don't appear to be breaking changes. The changes that premake made to lauxlib.c and liolib.c were maintained.
pretest5 test was executed after this change and passed all tests.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1341,2019-10-08T13:36:22Z,2019-10-08T14:27:46Z,2019-10-08T14:27:49Z,MERGED,True,25,0,1,https://github.com/starkos,"Add new issue template ""Get help""",1,[],https://github.com/premake/premake-core/pull/1341,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1341,"Add a new issue template for folks who just need help using Premake, and who aren't trying to log a bug or request a feature.","Add a new issue template for folks who just need help using Premake, and who aren't trying to log a bug or request a feature.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1342,2019-10-08T13:52:51Z,2019-10-08T14:28:44Z,2019-10-08T14:28:48Z,MERGED,True,28,0,1,https://github.com/starkos,Improve bug reporting template,1,[],https://github.com/premake/premake-core/pull/1342,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1342,"Provide examples
Link article on code block formatting
Add ""bug"" label
Make it a little more friendly","Provide examples
Link article on code block formatting
Add ""bug"" label
Make it a little more friendly",True,{}
premake/premake-core,https://github.com/premake/premake-core,1343,2019-10-08T14:03:29Z,2019-10-08T14:28:29Z,2019-10-08T14:28:32Z,MERGED,True,6,6,1,https://github.com/starkos,Improve feature request template,1,[],https://github.com/premake/premake-core/pull/1343,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1343,"Add more examples and instructions
Attach ""enhancement label""
Match tense of other templates","Add more examples and instructions
Attach ""enhancement label""
Match tense of other templates",True,{}
premake/premake-core,https://github.com/premake/premake-core,1345,2019-10-10T10:00:47Z,2019-10-14T20:01:15Z,2019-10-15T07:50:43Z,MERGED,True,328,11,5,https://github.com/kaldap,New 'listWindowsRegistry' OS API method for enumerating content of single registry subkey,1,[],https://github.com/premake/premake-core/pull/1345,https://github.com/kaldap,1,https://github.com/premake/premake-core/pull/1345,"What does this PR do?
This PR is extending the 'os' API by adding new method called 'listWindowsRegistry' which returns table of all subkeys and values in the specified path. Nil is returned in the case of failure.
How does this PR change Premake's behavior?
No breaking changes, just extended API.
Anything else we should know?

Useful in some cases, f.e. automatic selection of latest GCC toolchain on Windows.
Only REG_SZ and REG_DWORD values are covered in test suite - did not find any reliable values of other types. But I did manual testing of all value types, so it should work properly.

Did you check all the boxes?
Yes I did with single exception. Method name is in camel-case. I did it on purpose to keep it consistent with existing 'getWindowsRegistry' method.","What does this PR do?
This PR is extending the 'os' API by adding new method called 'listWindowsRegistry' which returns table of all subkeys and values in the specified path. Nil is returned in the case of failure.
How does this PR change Premake's behavior?
No breaking changes, just extended API.
Anything else we should know?

Useful in some cases, f.e. automatic selection of latest GCC toolchain on Windows.
Only REG_SZ and REG_DWORD values are covered in test suite - did not find any reliable values of other types. But I did manual testing of all value types, so it should work properly.

Did you check all the boxes?
Yes I did with single exception. Method name is in camel-case. I did it on purpose to keep it consistent with existing 'getWindowsRegistry' method.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1345,2019-10-10T10:00:47Z,2019-10-14T20:01:15Z,2019-10-15T07:50:43Z,MERGED,True,328,11,5,https://github.com/kaldap,New 'listWindowsRegistry' OS API method for enumerating content of single registry subkey,1,[],https://github.com/premake/premake-core/pull/1345,https://github.com/kaldap,2,https://github.com/premake/premake-core/pull/1345#issuecomment-540537034,"What does this PR do?
This PR is extending the 'os' API by adding new method called 'listWindowsRegistry' which returns table of all subkeys and values in the specified path. Nil is returned in the case of failure.
How does this PR change Premake's behavior?
No breaking changes, just extended API.
Anything else we should know?

Useful in some cases, f.e. automatic selection of latest GCC toolchain on Windows.
Only REG_SZ and REG_DWORD values are covered in test suite - did not find any reliable values of other types. But I did manual testing of all value types, so it should work properly.

Did you check all the boxes?
Yes I did with single exception. Method name is in camel-case. I did it on purpose to keep it consistent with existing 'getWindowsRegistry' method.","Found a registry value for a DWORD test which should be around there for some time already, so hopefully should make the test passing on all supported Windows versions.
What do you mean by ""I‚Äôd personally prefer getWindowsRegistry to listWindowsRegistry""? Merge those two methods into single one with different behaviour for keys/values?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1345,2019-10-10T10:00:47Z,2019-10-14T20:01:15Z,2019-10-15T07:50:43Z,MERGED,True,328,11,5,https://github.com/kaldap,New 'listWindowsRegistry' OS API method for enumerating content of single registry subkey,1,[],https://github.com/premake/premake-core/pull/1345,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1345#issuecomment-541817938,"What does this PR do?
This PR is extending the 'os' API by adding new method called 'listWindowsRegistry' which returns table of all subkeys and values in the specified path. Nil is returned in the case of failure.
How does this PR change Premake's behavior?
No breaking changes, just extended API.
Anything else we should know?

Useful in some cases, f.e. automatic selection of latest GCC toolchain on Windows.
Only REG_SZ and REG_DWORD values are covered in test suite - did not find any reliable values of other types. But I did manual testing of all value types, so it should work properly.

Did you check all the boxes?
Yes I did with single exception. Method name is in camel-case. I did it on purpose to keep it consistent with existing 'getWindowsRegistry' method.","Looking good. If you could rebase against the latest master branch (and if you could squash the commits too, that would be a bonus), this looks ready to merge.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1345,2019-10-10T10:00:47Z,2019-10-14T20:01:15Z,2019-10-15T07:50:43Z,MERGED,True,328,11,5,https://github.com/kaldap,New 'listWindowsRegistry' OS API method for enumerating content of single registry subkey,1,[],https://github.com/premake/premake-core/pull/1345,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1345#issuecomment-541889673,"What does this PR do?
This PR is extending the 'os' API by adding new method called 'listWindowsRegistry' which returns table of all subkeys and values in the specified path. Nil is returned in the case of failure.
How does this PR change Premake's behavior?
No breaking changes, just extended API.
Anything else we should know?

Useful in some cases, f.e. automatic selection of latest GCC toolchain on Windows.
Only REG_SZ and REG_DWORD values are covered in test suite - did not find any reliable values of other types. But I did manual testing of all value types, so it should work properly.

Did you check all the boxes?
Yes I did with single exception. Method name is in camel-case. I did it on purpose to keep it consistent with existing 'getWindowsRegistry' method.",Merged. Thanks for this!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1351,2019-10-13T15:33:36Z,2019-10-13T16:08:33Z,2019-10-13T16:12:33Z,MERGED,True,503,34,18,https://github.com/samsinsane,Added support for vcxitems project generation for VS2013+,1,[],https://github.com/premake/premake-core/pull/1351,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1351,"What does this PR do?
This PR adds support for the vcxitems project type that was added in VS2013.
How does this PR change Premake's behavior?
There shouldn't be any breaking changes, nor should this modify any existing behaviour except when generating a vcxitems project type.
Anything else we should know?
I have very limited experience with this project type - I don't find it very useful, but I already spent the effort supporting them.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR adds support for the vcxitems project type that was added in VS2013.
How does this PR change Premake's behavior?
There shouldn't be any breaking changes, nor should this modify any existing behaviour except when generating a vcxitems project type.
Anything else we should know?
I have very limited experience with this project type - I don't find it very useful, but I already spent the effort supporting them.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1352,2019-10-13T16:00:13Z,2019-10-13T16:56:58Z,2019-11-06T14:39:52Z,MERGED,True,105,36,3,https://github.com/samsinsane,Improved test runner usage,1,[],https://github.com/premake/premake-core/pull/1352,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1352,"What does this PR do?
This PR extends the test runner to allow for some of the discussed items in #1114; wildcard support and specifying tests without using --test-only.
How does this PR change Premake's behavior?
This shouldn't break the old functionality, but does extend it as mentioned above.
Anything else we should know?
I wrote this several months before the commit date suggests, so I'm not sure where I got up to with it but it does seem to work. Some of the changes might be for the comma separated list, but I couldn't see anything to suggest I added support for that and it didn't work when tested.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR extends the test runner to allow for some of the discussed items in #1114; wildcard support and specifying tests without using --test-only.
How does this PR change Premake's behavior?
This shouldn't break the old functionality, but does extend it as mentioned above.
Anything else we should know?
I wrote this several months before the commit date suggests, so I'm not sure where I got up to with it but it does seem to work. Some of the changes might be for the comma separated list, but I couldn't see anything to suggest I added support for that and it didn't work when tested.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1352,2019-10-13T16:00:13Z,2019-10-13T16:56:58Z,2019-11-06T14:39:52Z,MERGED,True,105,36,3,https://github.com/samsinsane,Improved test runner usage,1,[],https://github.com/premake/premake-core/pull/1352,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1352#issuecomment-541432209,"What does this PR do?
This PR extends the test runner to allow for some of the discussed items in #1114; wildcard support and specifying tests without using --test-only.
How does this PR change Premake's behavior?
This shouldn't break the old functionality, but does extend it as mentioned above.
Anything else we should know?
I wrote this several months before the commit date suggests, so I'm not sure where I got up to with it but it does seem to work. Some of the changes might be for the comma separated list, but I couldn't see anything to suggest I added support for that and it didn't work when tested.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Quick question inline‚Ä¶,True,{}
premake/premake-core,https://github.com/premake/premake-core,1353,2019-10-16T18:42:54Z,2019-10-17T14:10:22Z,2019-10-17T14:10:22Z,MERGED,True,1,1,1,https://github.com/fountainment,Fix premake4.lua bootstrap build script,1,[],https://github.com/premake/premake-core/pull/1353,https://github.com/fountainment,1,https://github.com/premake/premake-core/pull/1353,"This PR add the missing include dir and fix '""luashim.h"" not found' error when using premake4 bootstrap.","This PR add the missing include dir and fix '""luashim.h"" not found' error when using premake4 bootstrap.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1353,2019-10-16T18:42:54Z,2019-10-17T14:10:22Z,2019-10-17T14:10:22Z,MERGED,True,1,1,1,https://github.com/fountainment,Fix premake4.lua bootstrap build script,1,[],https://github.com/premake/premake-core/pull/1353,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1353#issuecomment-543192957,"This PR add the missing include dir and fix '""luashim.h"" not found' error when using premake4 bootstrap.",Thanks for the contribution!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1355,2019-10-20T19:59:25Z,2019-10-21T01:18:57Z,2020-03-16T23:42:14Z,MERGED,True,45,0,3,https://github.com/starkos,Add shaderincludedirs to fxcompile configuration,1,[],https://github.com/premake/premake-core/pull/1355,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1355,"What does this PR do?
Finishes up PR #1259. The original description is ""Added shaderincludedirs to the visual studio configuration for fxcompile. Kept name inline with the premake includedirs.""
Changed the field type to ""list:directory"" to match includedirs.
How does this PR change Premake's behavior?
Just adds a new API. No changes otherwise.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Finishes up PR #1259. The original description is ""Added shaderincludedirs to the visual studio configuration for fxcompile. Kept name inline with the premake includedirs.""
Changed the field type to ""list:directory"" to match includedirs.
How does this PR change Premake's behavior?
Just adds a new API. No changes otherwise.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1356,2019-10-21T11:24:20Z,2019-10-21T12:19:15Z,2020-03-16T23:42:21Z,MERGED,True,23,10,2,https://github.com/starkos,Allow wildcards in xcodebuildresources,1,[],https://github.com/premake/premake-core/pull/1356,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1356,"What does this PR do?
The xcodebuildresources script API really should use kind='list:file' to get the behavior for free, but the way it was originally coded makes it a more complex change. This is more of a short-term fix which interprets the (string) values from xcodebuildresources as Premake patterns, so you can do things like:
files {
    ""**.h"",
    ""**.cpp"",
    ""**.png""
}

xcodebuildresources {
    ""**.png""
}
This is an improved version of #1271.
How does this PR change Premake's behavior?
No breaking behavior. If anyone used Lua-style patterns in xcodebuildresources it will still work; this just adds the ability to use Premake patterns.
Anything else we should know?
I'm the one responsible for the awful Xcode generator. Seemed like a good idea at the time üôÑ
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
The xcodebuildresources script API really should use kind='list:file' to get the behavior for free, but the way it was originally coded makes it a more complex change. This is more of a short-term fix which interprets the (string) values from xcodebuildresources as Premake patterns, so you can do things like:
files {
    ""**.h"",
    ""**.cpp"",
    ""**.png""
}

xcodebuildresources {
    ""**.png""
}
This is an improved version of #1271.
How does this PR change Premake's behavior?
No breaking behavior. If anyone used Lua-style patterns in xcodebuildresources it will still work; this just adds the ability to use Premake patterns.
Anything else we should know?
I'm the one responsible for the awful Xcode generator. Seemed like a good idea at the time üôÑ
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1357,2019-10-21T15:56:17Z,2019-10-23T21:16:10Z,2019-10-23T21:16:14Z,MERGED,True,47,10,3,https://github.com/starkos,Replace debuggerflavor with debugger (take #2),1,[],https://github.com/premake/premake-core/pull/1357,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1357,"What does this PR do?
A replacement for PR #1063 with additional fixes. The original message: ""Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.""
Closes #1060.
How does this PR change Premake's behavior?
Deprecates the Visual Studio-specific debuggerflavor() in favor of debugger().
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
A replacement for PR #1063 with additional fixes. The original message: ""Remove duplicate in APIs as debugger can be used to set DebuggerFlavor in Visual Studio.""
Closes #1060.
How does this PR change Premake's behavior?
Deprecates the Visual Studio-specific debuggerflavor() in favor of debugger().
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1358,2019-10-21T17:36:57Z,2019-10-21T20:07:48Z,2019-10-21T20:07:54Z,MERGED,True,1,0,1,https://github.com/zlnimda,Added support for Dx11.3 shader model,1,[],https://github.com/premake/premake-core/pull/1358,https://github.com/zlnimda,1,https://github.com/premake/premake-core/pull/1358,"What does this PR do?
Shader Model 5.1 was missing in the listed shader models available,this PR just add it.
How does this PR change Premake's behavior?
There is no behavior changes.
Anything else we should know?
I tested with a project with sm 5.1 shaders, but didn't do a branch for this small change.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Shader Model 5.1 was missing in the listed shader models available,this PR just add it.
How does this PR change Premake's behavior?
There is no behavior changes.
Anything else we should know?
I tested with a project with sm 5.1 shaders, but didn't do a branch for this small change.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1358,2019-10-21T17:36:57Z,2019-10-21T20:07:48Z,2019-10-21T20:07:54Z,MERGED,True,1,0,1,https://github.com/zlnimda,Added support for Dx11.3 shader model,1,[],https://github.com/premake/premake-core/pull/1358,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1358#issuecomment-544685511,"What does this PR do?
Shader Model 5.1 was missing in the listed shader models available,this PR just add it.
How does this PR change Premake's behavior?
There is no behavior changes.
Anything else we should know?
I tested with a project with sm 5.1 shaders, but didn't do a branch for this small change.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1359,2019-10-31T12:46:31Z,2019-11-01T12:52:46Z,2019-11-01T12:52:46Z,MERGED,True,29,0,3,https://github.com/tbasnoopy,add assemblyDebug for vs2017,1,[],https://github.com/premake/premake-core/pull/1359,https://github.com/tbasnoopy,1,https://github.com/premake/premake-core/pull/1359,"What does this PR do?
I missed the ""assemblyDebug"" option for vcxprojects. This pull request introduces the keyword, generation and tests.
What is AssemblyDebug (Quote from VS2017):
/ASSEMBLYDEBUG emits the DebuggableAttribute attribute with debug information tracking and disables JIT optimizations.
https://docs.microsoft.com/de-de/cpp/build/reference/assemblydebug-add-debuggableattribute?view=vs-2019
How does this PR change Premake's behavior?
Nothing existing should change. It only adds another option.","What does this PR do?
I missed the ""assemblyDebug"" option for vcxprojects. This pull request introduces the keyword, generation and tests.
What is AssemblyDebug (Quote from VS2017):
/ASSEMBLYDEBUG emits the DebuggableAttribute attribute with debug information tracking and disables JIT optimizations.
https://docs.microsoft.com/de-de/cpp/build/reference/assemblydebug-add-debuggableattribute?view=vs-2019
How does this PR change Premake's behavior?
Nothing existing should change. It only adds another option.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1360,2019-10-31T17:28:45Z,2019-11-10T14:07:17Z,2019-11-10T14:07:17Z,MERGED,True,100,11,4,https://github.com/sp-jordi-vilalta,Fix the return value of some os functions,3,[],https://github.com/premake/premake-core/pull/1360,https://github.com/sp-jordi-vilalta,1,https://github.com/premake/premake-core/pull/1360,"What does this PR do?
Fix the return values for os.rmdir and os.remove so they're consistent with the Premake documentation and the standard Lua ones.
How does this PR change Premake's behavior?
These functions now report some status that wasn't reported before, so the user can check it if needed. It was confusing not getting any result values in some cases, specially in a function that overrides the standard Lua library.
Anything else we should know?
I've just tested my changes on macOS. The test suite passes but I'm not sure if there may be anything that relies on the previous behavior (now there are some shortcuts when something can't be removed).
I also added a tiny mostly-unrelated commit to fix some comments on related files, I hope it's okay to have it here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Fix the return values for os.rmdir and os.remove so they're consistent with the Premake documentation and the standard Lua ones.
How does this PR change Premake's behavior?
These functions now report some status that wasn't reported before, so the user can check it if needed. It was confusing not getting any result values in some cases, specially in a function that overrides the standard Lua library.
Anything else we should know?
I've just tested my changes on macOS. The test suite passes but I'm not sure if there may be anything that relies on the previous behavior (now there are some shortcuts when something can't be removed).
I also added a tiny mostly-unrelated commit to fix some comments on related files, I hope it's okay to have it here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1361,2019-11-06T14:59:06Z,2019-11-08T15:06:22Z,2019-11-10T14:06:54Z,MERGED,True,2,11,1,https://github.com/samsinsane,Simplified unit test to resolve path issues,1,[],https://github.com/premake/premake-core/pull/1361,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1361,"What does this PR do?
This PR resolves #1354 by simplifying the unit test to just what is required, testing the output of the build commands for the gmake2 action.
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR resolves #1354 by simplifying the unit test to just what is required, testing the output of the build commands for the gmake2 action.
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1362,2019-11-06T16:36:39Z,2019-11-16T06:02:46Z,2019-11-16T06:02:49Z,MERGED,True,14,13,1,https://github.com/samsinsane,Fixed inconsistencies in Android VS project test,1,[],https://github.com/premake/premake-core/pull/1362,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1362,"What does this PR do?
This PR cleans up the inconsistencies in the Android VS project test.
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR cleans up the inconsistencies in the Android VS project test.
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1364,2019-11-10T11:18:31Z,2019-11-10T11:24:50Z,2019-11-10T11:46:27Z,CLOSED,False,30,32,3,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1364,https://github.com/r-a-sattarov,1,https://github.com/premake/premake-core/pull/1364,"fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM for compability with MCST lcc compiler < 1.24

e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000","fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM for compability with MCST lcc compiler < 1.24

e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000",True,{}
premake/premake-core,https://github.com/premake/premake-core,1364,2019-11-10T11:18:31Z,2019-11-10T11:24:50Z,2019-11-10T11:46:27Z,CLOSED,False,30,32,3,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1364,https://github.com/r-a-sattarov,2,https://github.com/premake/premake-core/pull/1364#issuecomment-552187252,"fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM for compability with MCST lcc compiler < 1.24

e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000","Sorry, did not follow the text format in Pull Request.
Recreate Pull Request.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1365,2019-11-10T11:35:53Z,2019-11-15T15:15:47Z,2019-11-15T15:15:47Z,MERGED,True,29,13,2,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1365,https://github.com/r-a-sattarov,1,https://github.com/premake/premake-core/pull/1365,"What does this PR do?

fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM of file curl_utils.c for compability with MCST lcc compiler < 1.24

How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM of file curl_utils.c for compability with MCST lcc compiler < 1.24

How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1365,2019-11-10T11:35:53Z,2019-11-15T15:15:47Z,2019-11-15T15:15:47Z,MERGED,True,29,13,2,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1365,https://github.com/r-a-sattarov,2,https://github.com/premake/premake-core/pull/1365#issuecomment-552187791,"What does this PR do?

fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM of file curl_utils.c for compability with MCST lcc compiler < 1.24

How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","My changes were accepted in the main branch of Curl.
curl/curl@8063c32",True,{}
premake/premake-core,https://github.com/premake/premake-core,1365,2019-11-10T11:35:53Z,2019-11-15T15:15:47Z,2019-11-15T15:15:47Z,MERGED,True,29,13,2,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1365,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1365#issuecomment-552460947,"What does this PR do?

fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM of file curl_utils.c for compability with MCST lcc compiler < 1.24

How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Seems to make more sense to just grab the new curl? I don't recall exactly what hoops we need to jump through when we do that though‚Ä¶,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1365,2019-11-10T11:35:53Z,2019-11-15T15:15:47Z,2019-11-15T15:15:47Z,MERGED,True,29,13,2,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1365,https://github.com/r-a-sattarov,4,https://github.com/premake/premake-core/pull/1365#issuecomment-552594233,"What does this PR do?

fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM of file curl_utils.c for compability with MCST lcc compiler < 1.24

How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","There are differences in file structure between these versions of Curl (for example, curlbuild.h in the old version and system.h in the new version seem similar to each other).
But in any case, please remove BOM (Byte Order Mark) from src/host/curl_utils.c file. MCST lcc compiler version < 1.24 does not understand BOM.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1365,2019-11-10T11:35:53Z,2019-11-15T15:15:47Z,2019-11-15T15:15:47Z,MERGED,True,29,13,2,https://github.com/r-a-sattarov,E2K: fixed build by MCST lcc compiler,2,[],https://github.com/premake/premake-core/pull/1365,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1365#issuecomment-554398189,"What does this PR do?

fixed build by MCST lcc compiler on MCST Elbrus 2000 architecture when using Curl
strip UTF-8 BOM of file curl_utils.c for compability with MCST lcc compiler < 1.24

How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
e2k (Elbrus 2000) - this is VLIW/EPIC architecture, like Intel Itanium architecture.
About this architecture:

https://en.wikipedia.org/wiki/Elbrus_2000

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Okay, guess it makes sense to get this merged now then. Thanks for the contribution!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1371,2019-12-03T09:45:13Z,2020-03-06T00:07:45Z,2020-03-06T03:36:56Z,CLOSED,False,3,2,1,https://github.com/KOLANICH,Add out-of-source build for premake4,1,[],https://github.com/premake/premake-core/pull/1371,https://github.com/KOLANICH,1,https://github.com/premake/premake-core/pull/1371,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1371,2019-12-03T09:45:13Z,2020-03-06T00:07:45Z,2020-03-06T03:36:56Z,CLOSED,False,3,2,1,https://github.com/KOLANICH,Add out-of-source build for premake4,1,[],https://github.com/premake/premake-core/pull/1371,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1371#issuecomment-595507798,,This change is a subset of #1372; closing.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1371,2019-12-03T09:45:13Z,2020-03-06T00:07:45Z,2020-03-06T03:36:56Z,CLOSED,False,3,2,1,https://github.com/KOLANICH,Add out-of-source build for premake4,1,[],https://github.com/premake/premake-core/pull/1371,https://github.com/KOLANICH,3,https://github.com/premake/premake-core/pull/1371#issuecomment-595584102,,"This change is a subset of #1372; closing.

It looks like #1372 will be merged not soon so it may make sense to merge this PR and then rebase #1372 upon master.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1372,2019-12-03T09:48:08Z,2020-03-08T17:34:10Z,2020-03-16T23:31:41Z,CLOSED,False,7,6,2,https://github.com/KOLANICH,A draft of out of source build support using premake5,2,[],https://github.com/premake/premake-core/pull/1372,https://github.com/KOLANICH,1,https://github.com/premake/premake-core/pull/1372,,,True,{}
premake/premake-core,https://github.com/premake/premake-core,1372,2019-12-03T09:48:08Z,2020-03-08T17:34:10Z,2020-03-16T23:31:41Z,CLOSED,False,7,6,2,https://github.com/KOLANICH,A draft of out of source build support using premake5,2,[],https://github.com/premake/premake-core/pull/1372,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1372#issuecomment-596230497,,"I rebased this PR against master, squashed the commits, added a description, and submitted it as #1409. I'm closing this PR in favor of that one (your name is still on the commit, so no credit was lost). Thanks for the contribution!",True,{'THUMBS_UP': ['https://github.com/KOLANICH']}
premake/premake-core,https://github.com/premake/premake-core,1372,2019-12-03T09:48:08Z,2020-03-08T17:34:10Z,2020-03-16T23:31:41Z,CLOSED,False,7,6,2,https://github.com/KOLANICH,A draft of out of source build support using premake5,2,[],https://github.com/premake/premake-core/pull/1372,https://github.com/KOLANICH,3,https://github.com/premake/premake-core/pull/1372#issuecomment-596232109,,Thanks.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1372,2019-12-03T09:48:08Z,2020-03-08T17:34:10Z,2020-03-16T23:31:41Z,CLOSED,False,7,6,2,https://github.com/KOLANICH,A draft of out of source build support using premake5,2,[],https://github.com/premake/premake-core/pull/1372,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1372#issuecomment-599803935,,"I've dug into this further, and it isn't as simple as this PR suggests. There are support libraries getting placed in the build/ folder, and the binmodules/example and binmodules/luasocket will also have to be moved. Then the commands listed in .travis.yml and appveyor.yml all need to be able to complete successfully.
I'm going to close this one and my attempt at #1409; my time is super-limited and trying to fully resolve this isn't my highest priority. If you're able to get it working and passing all tests you're welcome to reopen this PR or submit a new one.
Thanks for the effort!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1374,2019-12-06T14:09:37Z,2020-04-06T22:13:30Z,2020-04-06T22:13:30Z,CLOSED,False,4,1,1,https://github.com/TrianglesPCT,Make enablewarnings work on MSVC,1,[],https://github.com/premake/premake-core/pull/1374,https://github.com/TrianglesPCT,1,https://github.com/premake/premake-core/pull/1374,"Make enablewarnings actually do something
What does this PR do?
enablewarnings currently does nothing on MSVC.
This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
enablewarnings will work on msvc
Are there any breaking changes? Will any existing behavior change?
If people were using enablewarnings they may not have noticed it wasn't doing anything on MSVC, it will now do something, but this may cause them to hit warnings they did not previously hit.
Anything else we should know?
Don't think so
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Make enablewarnings actually do something
What does this PR do?
enablewarnings currently does nothing on MSVC.
This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
enablewarnings will work on msvc
Are there any breaking changes? Will any existing behavior change?
If people were using enablewarnings they may not have noticed it wasn't doing anything on MSVC, it will now do something, but this may cause them to hit warnings they did not previously hit.
Anything else we should know?
Don't think so
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1374,2019-12-06T14:09:37Z,2020-04-06T22:13:30Z,2020-04-06T22:13:30Z,CLOSED,False,4,1,1,https://github.com/TrianglesPCT,Make enablewarnings work on MSVC,1,[],https://github.com/premake/premake-core/pull/1374,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1374#issuecomment-562592932,"Make enablewarnings actually do something
What does this PR do?
enablewarnings currently does nothing on MSVC.
This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
enablewarnings will work on msvc
Are there any breaking changes? Will any existing behavior change?
If people were using enablewarnings they may not have noticed it wasn't doing anything on MSVC, it will now do something, but this may cause them to hit warnings they did not previously hit.
Anything else we should know?
Don't think so
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Could you please add a unit test that demonstrates the change? Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1374,2019-12-06T14:09:37Z,2020-04-06T22:13:30Z,2020-04-06T22:13:30Z,CLOSED,False,4,1,1,https://github.com/TrianglesPCT,Make enablewarnings work on MSVC,1,[],https://github.com/premake/premake-core/pull/1374,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1374#issuecomment-610064566,"Make enablewarnings actually do something
What does this PR do?
enablewarnings currently does nothing on MSVC.
This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
enablewarnings will work on msvc
Are there any breaking changes? Will any existing behavior change?
If people were using enablewarnings they may not have noticed it wasn't doing anything on MSVC, it will now do something, but this may cause them to hit warnings they did not previously hit.
Anything else we should know?
Don't think so
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'm closing this one in favor of #1421, which adds unit tests and removes the spurious comment. I tried to rebase your commit so your name would stay on it, but it looks like you did the work on your master branch, and then continued to work on other, unrelated things.
To increase the odds of your PR getting merged in the future (on this or any open source project), put the fix or feature on its own branch in Git. That way it can updated if needed without having to redo all of the work.
Regardless, thanks for the contribution!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1384,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1384#issuecomment-573939677,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Would it help to change the delimiter character? We could use a non-printable Unicode character for instance, which would never appear in a typical path? That way we wouldn't have to try to figure out if the delimiter was ""real"" or if it were part of the path?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/tempura-sukiyaki,3,https://github.com/premake/premake-core/pull/1384#issuecomment-574001174,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","If the ""deferred join delimiter"" can be replaced by another Unicode symbol, it seems safer.
However, I don't know the extent of the impact of doing so.
I think projects that already use | as the ""deferred join delimiter"" will not work.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1384#issuecomment-574669773,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Lua doesn't support Unicode, this could be problematic when the paths are being manipulated in Lua?
Regardless, I feel that the problem isn't really that we use | for the delimiter, but that we treat postbuildcommands and friends as paths when they're not - only part of some of the elements will be a path sometimes, but we're assuming all of the elements are always entirely paths. I think the only solution here is to have users specify that they want the path manipulation through the %{} system.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1384#issuecomment-575130916,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I feel that the problem isn't really that we use | for the delimiter, but that we treat postbuildcommands and friends as paths when they're not

Agree 100%.
But to help @tempura-sukiyaki out, I do think it should be safe to switch the deferred join delimiter to a non-printable character like ""\x07"" (bell) or ""\x08"" (backspace). That will make it leave pipe symbols alone, and save the trouble of trying work around them.
Could you give that a try? If it doesn't work out, let me know here and I'll approve this PR for you.
Longer term, I would definitely like to address the root causes that made deferred joins seem necessary and see if we can find better solutions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/tempura-sukiyaki,6,https://github.com/premake/premake-core/pull/1384#issuecomment-575202155,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thank you for your comment.

Replace DEFFERD_JOIN_DELIMITER in ""src/host/path_join.c"" from | to \a (bell).
Modify the test in ""test/base/test_path.lua"" accordingly.

Could you confirm my understanding is correct?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1384#issuecomment-575856685,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Yes, that's the approach I would try.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/tempura-sukiyaki,8,https://github.com/premake/premake-core/pull/1384#issuecomment-575901056,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I tried doing it. üôÇ,True,{}
premake/premake-core,https://github.com/premake/premake-core,1384,2020-01-05T18:31:31Z,2020-02-26T09:06:37Z,2020-04-10T10:12:49Z,CLOSED,False,59,28,2,https://github.com/tempura-sukiyaki,Improve issue #1310,3,[],https://github.com/premake/premake-core/pull/1384,https://github.com/starkos,9,https://github.com/premake/premake-core/pull/1384#issuecomment-576905886,"What does this PR do?

If there is a whitespace immediately before and/or after |, it is not considered as a ""deferred join delimiter"".

How does this PR change Premake's behavior?


In most cases, directory names do not have leading and/or trailing whitespace.
In most cases, whitespace is added before and after ""pipe"" and ""or"".
In such cases, applying this PR eliminates issue #1310.


if directory name has a leading and/or trailing whietspace, ""deferred join delimiter"" will not work properly.
However, all existing tests passed without change.


Anything else we should know?

This PR does not completely resolve issue #1310.
So I don't write close comment.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Did that help the problems you were seeing? Hope so! If you could you squash your changes and rebase them against the current master branch I'd be happy to approve and merge.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1385,2020-01-05T19:33:17Z,2020-01-07T05:40:02Z,2020-01-08T09:36:18Z,MERGED,True,1,1,1,https://github.com/tempura-sukiyaki,Fix pull request template,1,[],https://github.com/premake/premake-core/pull/1385,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1385,"What does this PR do?

Fix pull request template.

How does this PR change Premake's behavior?

Markdown was fixed.

Anything else we should know?

Nothing in particular.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

Fix pull request template.

How does this PR change Premake's behavior?

Markdown was fixed.

Anything else we should know?

Nothing in particular.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1386,2020-01-05T20:11:25Z,2020-01-09T02:00:57Z,2020-01-09T02:00:57Z,MERGED,True,247,51,5,https://github.com/ClxS,Initial support for generating netcore and netstandard projects,3,[],https://github.com/premake/premake-core/pull/1386,https://github.com/ClxS,1,https://github.com/premake/premake-core/pull/1386,"What does this PR do?
Resolves #1010
This adds support for generating netcore and netstandard projects via the dotnetframework property. It also adds support for the property used to enable WPF.
How does this PR change Premake's behavior?
I've added a new method in dotnetbase called ""isNewFormatProject"". This is used to control the differences between .NET Framework and netcore/netstandard projects. Rather than keep a list of all frameworks, it determines any version starting with ""netcoreapp"" or ""netstandard"" should use the new project format rules. This method will need to be updated once .NET 5 is released as it's very likely to use the netcore format.
Anything else we should know?
This changelist does not add support for targetting multiple frameworks. It should be easy to do, but I'd prefer to add it to another PR as I'm not sure how to test it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Resolves #1010
This adds support for generating netcore and netstandard projects via the dotnetframework property. It also adds support for the property used to enable WPF.
How does this PR change Premake's behavior?
I've added a new method in dotnetbase called ""isNewFormatProject"". This is used to control the differences between .NET Framework and netcore/netstandard projects. Rather than keep a list of all frameworks, it determines any version starting with ""netcoreapp"" or ""netstandard"" should use the new project format rules. This method will need to be updated once .NET 5 is released as it's very likely to use the netcore format.
Anything else we should know?
This changelist does not add support for targetting multiple frameworks. It should be easy to do, but I'd prefer to add it to another PR as I'm not sure how to test it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1395,2020-02-02T06:36:05Z,2020-02-04T12:45:03Z,2020-02-04T12:45:20Z,MERGED,True,17,2,2,https://github.com/samsinsane,Fixed edge case in path.normalize,1,[],https://github.com/premake/premake-core/pull/1395,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1395,"What does this PR do?
Fixes edge cases that results in ../../ being truncated - see #1283 for more details. Closes #1283.
How does this PR change Premake's behavior?
There may be a breaking change, but none of the unit tests covered such a case. Paths that start with ""../../$ or ""../../% or ""../../  will now work correctly.
Anything else we should know?
None.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes edge cases that results in ../../ being truncated - see #1283 for more details. Closes #1283.
How does this PR change Premake's behavior?
There may be a breaking change, but none of the unit tests covered such a case. Paths that start with ""../../$ or ""../../% or ""../../  will now work correctly.
Anything else we should know?
None.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1396,2020-02-02T06:49:16Z,2020-02-13T01:28:51Z,2020-03-01T03:00:02Z,MERGED,True,23,5,2,https://github.com/samsinsane,Fixed bug with linkgroups only working on Premake projects,1,[],https://github.com/premake/premake-core/pull/1396,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1396,"What does this PR do?
linksgroups now applies to all links instead of just the Premake projects. Closes #1265
How does this PR change Premake's behavior?
I don't believe there's any breaking change, projects will now link correctly to external libraries.
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
linksgroups now applies to all links instead of just the Premake projects. Closes #1265
How does this PR change Premake's behavior?
I don't believe there's any breaking change, projects will now link correctly to external libraries.
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1396,2020-02-02T06:49:16Z,2020-02-13T01:28:51Z,2020-03-01T03:00:02Z,MERGED,True,23,5,2,https://github.com/samsinsane,Fixed bug with linkgroups only working on Premake projects,1,[],https://github.com/premake/premake-core/pull/1396,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1396#issuecomment-581893873,"What does this PR do?
linksgroups now applies to all links instead of just the Premake projects. Closes #1265
How does this PR change Premake's behavior?
I don't believe there's any breaking change, projects will now link correctly to external libraries.
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","did you intend to include a test?

Oops, I'll do that when I get a chance - hopefully tomorrow night.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1396,2020-02-02T06:49:16Z,2020-02-13T01:28:51Z,2020-03-01T03:00:02Z,MERGED,True,23,5,2,https://github.com/samsinsane,Fixed bug with linkgroups only working on Premake projects,1,[],https://github.com/premake/premake-core/pull/1396,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1396#issuecomment-583746597,"What does this PR do?
linksgroups now applies to all links instead of just the Premake projects. Closes #1265
How does this PR change Premake's behavior?
I don't believe there's any breaking change, projects will now link correctly to external libraries.
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@starkos I've added a test for this üëç,True,{}
premake/premake-core,https://github.com/premake/premake-core,1401,2020-02-14T01:11:03Z,2020-02-14T06:58:50Z,2020-03-16T23:41:29Z,MERGED,True,5,17,2,https://github.com/starkos,Remove commands optimization which breaks tokens,1,[],https://github.com/premake/premake-core/pull/1401,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1401,"What does this PR do?
Closes #1013. When a build command contains a token which references a configuration, ex. {cfg.platform}, the platform optimizations removed by this commit would cause a crash: ""Attempt to index a nil value (global 'cfg')"".
How does this PR change Premake's behavior?
No breaking changes I'm aware of.
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Closes #1013. When a build command contains a token which references a configuration, ex. {cfg.platform}, the platform optimizations removed by this commit would cause a crash: ""Attempt to index a nil value (global 'cfg')"".
How does this PR change Premake's behavior?
No breaking changes I'm aware of.
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1402,2020-02-14T10:53:48Z,2020-02-18T13:12:35Z,2020-02-18T13:12:35Z,MERGED,True,14,3,2,https://github.com/yuyoyuppe,Remove checkFunc from Resource files,1,[],https://github.com/premake/premake-core/pull/1402,https://github.com/yuyoyuppe,1,https://github.com/premake/premake-core/pull/1402,"What does this PR do?
This is a second attempt at fixing 1172. I've removed the function entirely according to @starkos comment.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?

.rc files are now included by default for non-windows systems

Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This is a second attempt at fixing 1172. I've removed the function entirely according to @starkos comment.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?

.rc files are now included by default for non-windows systems

Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/redorav,1,https://github.com/premake/premake-core/pull/1403,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1403#issuecomment-589891164,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I haven't tried, but I suspect that this will encounter the same bug I just fixed in #1401. Premake allows this:
project ""MyProject""
   buildcommands { ""cmd.exe %{cfg.buildcfg.abspath}"" }
If you're trying to process that command at the project level, it will fail because cfg will not be set. See #1013 for more discussion.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/redorav,3,https://github.com/premake/premake-core/pull/1403#issuecomment-589945546,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Sorry, scratch what I said last. My command is something like the following:
project ""MyProject""
buildcommands
{
""\""%{cfg.buildtarget.directory}""..ExecutableName.."".exe\""""
}
This puts the following in the build steps command line:
""$(TargetDir)ExecutableName.exe""
So it seems to have replaced it properly in this instance. However, testing {cfg.buildcfg.abspath} will output an empty string, even within a configuration block. Is this correct behavior?
Update: Tokens such as %{wks.name}, %{prj.location} and %{cfg.targetdir} all get replaced properly.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1403#issuecomment-589969297,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'd be curious what %{cfg.targetdir} emits in that situation.
The relevant condundrum is: Premake allows you to specify settings in a ""higher"" scope (global, workspace, project) that get inherited by lower or narrower scopes (configuration, file). So when I use script like‚Ä¶
project ""MyProject""
   buildcommands { ""cmd.exe %{cfg.targetdir}"" }
‚Ä¶my intention is that a separate command would be created for each configuration (think ""Debug"", ""Release"") in my project. I would expect that my project's debug configuration to use cmd.exe bin/Debug, for example, and release to use cmd.exe bin/Release.
I'm not sure what the right answer would be here. A new set of APIs might the easiest, but I'm open to more general-purpose suggestions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/redorav,5,https://github.com/premake/premake-core/pull/1403#issuecomment-589997231,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","As far as I can tell, this does the right thing in the case you describe. I have come up with the following:
configuration(""Debug"")
	targetdir (""MyTargetDir1"")
		
configuration(""Release"")
	targetdir (""MyTargetDir2"")

configuration {} -- Reset configurations so it applies to all

buildcommands
{
	""%{cfg.targetdir}""
}
And this expands the build command to ../../MyTargetDir1 only for Debug, and only MyTargetDir2 respectively on the Release configuration. It also respect configuration filters, so if I was to not have th configuration {} line, it only applies to Release. It seems to me like in general things work as expected. Is there perhaps a bug with specific tokens?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1403#issuecomment-591153146,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thanks for doing that research, I think this looks workable. If you could add some unit tests and squash the commits I think it should be good to approve.
Thanks for contribution!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/redorav,7,https://github.com/premake/premake-core/pull/1403#issuecomment-592135315,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I've added the unit tests and tried rebasing/squashing, but I'm making a mess like I did last time I tried doing the process. I think I conceptually understand what I'm trying to do, I just don't get how to do it with git...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/redorav,8,https://github.com/premake/premake-core/pull/1403#issuecomment-592144570,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I've kind of done it in a brute force way by rewinding the history and re-pushing the commits in one go, I need to learn how to properly do it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1403,2020-02-17T19:35:21Z,2020-03-05T23:50:51Z,2020-03-06T19:31:42Z,MERGED,True,133,5,3,https://github.com/redorav,Add build steps to Visual Studio,2,[],https://github.com/premake/premake-core/pull/1403,https://github.com/redorav,9,https://github.com/premake/premake-core/pull/1403#issuecomment-595925278,"What does this PR do?
Adds build steps to Visual Studio through the buildcommands interface. (edit: See issue #1400 for more information and discussion).
How does this PR change Premake's behavior?
This adds missing functionality, to be able to have build steps with custom inputs and outputs
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thanks for getting it in so quick, I love how premake keeps growing and maturing",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1404,2020-02-21T11:50:58Z,2020-03-22T17:09:10Z,2020-03-22T17:09:11Z,MERGED,True,86,0,2,https://github.com/Mikhael-Danilov,"Place all generated files in separate GENERATED list, so they all can‚Ä¶",1,[],https://github.com/premake/premake-core/pull/1404,https://github.com/Mikhael-Danilov,1,https://github.com/premake/premake-core/pull/1404,"‚Ä¶ be cleaned by clean target.
What does this PR do?
All files generated by regular or custom rules for gmake2/cpp projects will be placed in separate GENERATED list, and will be deleted on make clean invocation.
How does this PR change Premake's behavior?
All files generated by custom rules for gmake2/cpp will be deleted on make clean invocation
Are there any breaking changes? Will any existing behavior change?
Probably no. Yes, previously buildoutputs of custom rules gmake2/cpp was persisted after make clean now they will be deleted.
Anything else we should know?
I use tolua for lua-c++ bindings, with this change generated files will be properly cleaned on make clean step.
closes #1380
Did you check all the boxes?

[v] Focus on a single fix or feature; remove any unrelated formatting or code changes
[v] Add unit tests showing fix or feature works; all tests pass
[v] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[v] Follow our coding conventions
[v] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","‚Ä¶ be cleaned by clean target.
What does this PR do?
All files generated by regular or custom rules for gmake2/cpp projects will be placed in separate GENERATED list, and will be deleted on make clean invocation.
How does this PR change Premake's behavior?
All files generated by custom rules for gmake2/cpp will be deleted on make clean invocation
Are there any breaking changes? Will any existing behavior change?
Probably no. Yes, previously buildoutputs of custom rules gmake2/cpp was persisted after make clean now they will be deleted.
Anything else we should know?
I use tolua for lua-c++ bindings, with this change generated files will be properly cleaned on make clean step.
closes #1380
Did you check all the boxes?

[v] Focus on a single fix or feature; remove any unrelated formatting or code changes
[v] Add unit tests showing fix or feature works; all tests pass
[v] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[v] Follow our coding conventions
[v] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1404,2020-02-21T11:50:58Z,2020-03-22T17:09:10Z,2020-03-22T17:09:11Z,MERGED,True,86,0,2,https://github.com/Mikhael-Danilov,"Place all generated files in separate GENERATED list, so they all can‚Ä¶",1,[],https://github.com/premake/premake-core/pull/1404,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1404#issuecomment-599808358,"‚Ä¶ be cleaned by clean target.
What does this PR do?
All files generated by regular or custom rules for gmake2/cpp projects will be placed in separate GENERATED list, and will be deleted on make clean invocation.
How does this PR change Premake's behavior?
All files generated by custom rules for gmake2/cpp will be deleted on make clean invocation
Are there any breaking changes? Will any existing behavior change?
Probably no. Yes, previously buildoutputs of custom rules gmake2/cpp was persisted after make clean now they will be deleted.
Anything else we should know?
I use tolua for lua-c++ bindings, with this change generated files will be properly cleaned on make clean step.
closes #1380
Did you check all the boxes?

[v] Focus on a single fix or feature; remove any unrelated formatting or code changes
[v] Add unit tests showing fix or feature works; all tests pass
[v] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[v] Follow our coding conventions
[v] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Looking at the tests, it would appear that both OBJECTS and GENERATED are always the same. We already delete all of the object files on make clean, so it isn't obvious why this change is needed.
Presumably you intended this code to also handle the output of custom build rules. If so, could you add a test to show that? I'd like to see a case where OBJECTS and GENERATED end up with different contents, otherwise it would be simpler to just use the list that's already there.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1404,2020-02-21T11:50:58Z,2020-03-22T17:09:10Z,2020-03-22T17:09:11Z,MERGED,True,86,0,2,https://github.com/Mikhael-Danilov,"Place all generated files in separate GENERATED list, so they all can‚Ä¶",1,[],https://github.com/premake/premake-core/pull/1404,https://github.com/Mikhael-Danilov,3,https://github.com/premake/premake-core/pull/1404#issuecomment-600259622,"‚Ä¶ be cleaned by clean target.
What does this PR do?
All files generated by regular or custom rules for gmake2/cpp projects will be placed in separate GENERATED list, and will be deleted on make clean invocation.
How does this PR change Premake's behavior?
All files generated by custom rules for gmake2/cpp will be deleted on make clean invocation
Are there any breaking changes? Will any existing behavior change?
Probably no. Yes, previously buildoutputs of custom rules gmake2/cpp was persisted after make clean now they will be deleted.
Anything else we should know?
I use tolua for lua-c++ bindings, with this change generated files will be properly cleaned on make clean step.
closes #1380
Did you check all the boxes?

[v] Focus on a single fix or feature; remove any unrelated formatting or code changes
[v] Add unit tests showing fix or feature works; all tests pass
[v] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[v] Follow our coding conventions
[v] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thank you for feedback.
I added customBuildCommand_generatedCpp test to show case I'm trying to handle: custom rule was used to generate C++ source and header files, said files will populate  CUSTOM, OBJECTS and SOURCES so GENERATED will be required to keep all their traces.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1406,2020-02-25T23:55:32Z,2020-02-26T09:06:37Z,2020-03-16T23:15:17Z,MERGED,True,59,28,2,https://github.com/starkos,Change deferred join delimiter to non-printable character,1,[],https://github.com/premake/premake-core/pull/1406,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1406,"What does this PR do?
This is a squashed and rebased version of #1384, authored by @tempura-sukiyaki. Changes the deferred join path delimiter to a non-printable character to avoid conflicts with the pipe symbol in paths. Closes #1384.
See #1310 and #1384 for background info.
How does this PR change Premake's behavior?
Should not change backward compatibility.
Anything else we should know?
Nope. Thanks to @tempura-sukiyaki for doing the hard part.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This is a squashed and rebased version of #1384, authored by @tempura-sukiyaki. Changes the deferred join path delimiter to a non-printable character to avoid conflicts with the pipe symbol in paths. Closes #1384.
See #1310 and #1384 for background info.
How does this PR change Premake's behavior?
Should not change backward compatibility.
Anything else we should know?
Nope. Thanks to @tempura-sukiyaki for doing the hard part.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1409,2020-03-08T17:32:16Z,2020-03-16T23:33:23Z,2020-03-16T23:41:42Z,CLOSED,False,9,8,4,https://github.com/starkos,"Use ""to"" option to set targetdir",1,[],https://github.com/premake/premake-core/pull/1409,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1409,"What does this PR do?
Extends the existing ""to"" option (i.e. premake5 --to=build gmake) to also change targetdir, so the bin folder and Premake binaries end up in the same folder as the project files that were used to build them.
Thanks to @KOLANICH for the original PR (#1372). This one has been rebased against master and squashed, the CI builds fixed, and this description added.
How does this PR change Premake's behavior?
Previously, premake5 --to=build gmake would only change the location of the generated project files. When you ran make against those files, the libraries and object files would get placed in the build folder, but the bin folder would still be out next to the Premake5.lua script in the parent folder.
With this change, the bin folder will also get placed in build, make it easier to find.
Anything else we should know?
The Building Premake wiki page will need to be updated to reflect this change. I have it on my list to update once this lands.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Extends the existing ""to"" option (i.e. premake5 --to=build gmake) to also change targetdir, so the bin folder and Premake binaries end up in the same folder as the project files that were used to build them.
Thanks to @KOLANICH for the original PR (#1372). This one has been rebased against master and squashed, the CI builds fixed, and this description added.
How does this PR change Premake's behavior?
Previously, premake5 --to=build gmake would only change the location of the generated project files. When you ran make against those files, the libraries and object files would get placed in the build folder, but the bin folder would still be out next to the Premake5.lua script in the parent folder.
With this change, the bin folder will also get placed in build, make it easier to find.
Anything else we should know?
The Building Premake wiki page will need to be updated to reflect this change. I have it on my list to update once this lands.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1409,2020-03-08T17:32:16Z,2020-03-16T23:33:23Z,2020-03-16T23:41:42Z,CLOSED,False,9,8,4,https://github.com/starkos,"Use ""to"" option to set targetdir",1,[],https://github.com/premake/premake-core/pull/1409,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1409#issuecomment-596232786,"What does this PR do?
Extends the existing ""to"" option (i.e. premake5 --to=build gmake) to also change targetdir, so the bin folder and Premake binaries end up in the same folder as the project files that were used to build them.
Thanks to @KOLANICH for the original PR (#1372). This one has been rebased against master and squashed, the CI builds fixed, and this description added.
How does this PR change Premake's behavior?
Previously, premake5 --to=build gmake would only change the location of the generated project files. When you ran make against those files, the libraries and object files would get placed in the build folder, but the bin folder would still be out next to the Premake5.lua script in the parent folder.
With this change, the bin folder will also get placed in build, make it easier to find.
Anything else we should know?
The Building Premake wiki page will need to be updated to reflect this change. I have it on my list to update once this lands.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Hmm‚Ä¶apparently I need to do more research to fix the CI builds.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1409,2020-03-08T17:32:16Z,2020-03-16T23:33:23Z,2020-03-16T23:41:42Z,CLOSED,False,9,8,4,https://github.com/starkos,"Use ""to"" option to set targetdir",1,[],https://github.com/premake/premake-core/pull/1409,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1409#issuecomment-596277108,"What does this PR do?
Extends the existing ""to"" option (i.e. premake5 --to=build gmake) to also change targetdir, so the bin folder and Premake binaries end up in the same folder as the project files that were used to build them.
Thanks to @KOLANICH for the original PR (#1372). This one has been rebased against master and squashed, the CI builds fixed, and this description added.
How does this PR change Premake's behavior?
Previously, premake5 --to=build gmake would only change the location of the generated project files. When you ran make against those files, the libraries and object files would get placed in the build folder, but the bin folder would still be out next to the Premake5.lua script in the parent folder.
With this change, the bin folder will also get placed in build, make it easier to find.
Anything else we should know?
The Building Premake wiki page will need to be updated to reflect this change. I have it on my list to update once this lands.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@starkos this PR only changed the Premake binary targetdir, you'll need to change luasocket and example too.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1409,2020-03-08T17:32:16Z,2020-03-16T23:33:23Z,2020-03-16T23:41:42Z,CLOSED,False,9,8,4,https://github.com/starkos,"Use ""to"" option to set targetdir",1,[],https://github.com/premake/premake-core/pull/1409,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1409#issuecomment-599804358,"What does this PR do?
Extends the existing ""to"" option (i.e. premake5 --to=build gmake) to also change targetdir, so the bin folder and Premake binaries end up in the same folder as the project files that were used to build them.
Thanks to @KOLANICH for the original PR (#1372). This one has been rebased against master and squashed, the CI builds fixed, and this description added.
How does this PR change Premake's behavior?
Previously, premake5 --to=build gmake would only change the location of the generated project files. When you ran make against those files, the libraries and object files would get placed in the build folder, but the bin folder would still be out next to the Premake5.lua script in the parent folder.
With this change, the bin folder will also get placed in build, make it easier to find.
Anything else we should know?
The Building Premake wiki page will need to be updated to reflect this change. I have it on my list to update once this lands.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I've dug into this further, and it isn't as simple as #1372 suggests. There are support libraries getting placed in the build/ folder, and the binmodules/example and binmodules/luasocket will also have to be moved. Then the commands listed in .travis.yml and appveyor.yml all need to be able to complete successfully.
I gave this an honest effort but I don't consider this a high enough priority for the amount of time I'm putting into it. If someone else wants to run with it I'd welcome the addition.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1412,2020-03-23T22:28:46Z,2020-03-30T20:08:05Z,2020-03-30T20:08:05Z,CLOSED,False,21,7,3,https://github.com/arthurdead,fix issues with codelite (fixes #1411 and #1299),3,[],https://github.com/premake/premake-core/pull/1412,https://github.com/arthurdead,1,https://github.com/premake/premake-core/pull/1412,"This fixes codelite generation if theres no files as reported here: #1299
And if theres multiple platforms as reported here: #1411
Also removes useless root folder from projects
Before:

After:","This fixes codelite generation if theres no files as reported here: #1299
And if theres multiple platforms as reported here: #1411
Also removes useless root folder from projects
Before:

After:",True,{}
premake/premake-core,https://github.com/premake/premake-core,1412,2020-03-23T22:28:46Z,2020-03-30T20:08:05Z,2020-03-30T20:08:05Z,CLOSED,False,21,7,3,https://github.com/arthurdead,fix issues with codelite (fixes #1411 and #1299),3,[],https://github.com/premake/premake-core/pull/1412,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1412#issuecomment-606218442,"This fixes codelite generation if theres no files as reported here: #1299
And if theres multiple platforms as reported here: #1411
Also removes useless root folder from projects
Before:

After:","I'm going to close this PR, as it breaks a couple of our submission guidelines (tries to fix multiple issues, no unit tests), and the C++ standard changes appear to require more discussion before they can be merged.
Appreciate the work you're putting into fixing Codelite though! I opened #1419 to address the platform configuration names issue. Happy to consider the other fixes as well, but they will need to be submitted separately, so we  can approve them while the C++ standard stuff gets sorted out.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1415,2020-03-28T02:21:36Z,2020-03-28T08:55:43Z,2020-03-28T17:08:19Z,MERGED,True,5,3,2,https://github.com/englercj,Add .c++ extension support to a few spots it was missing,1,[],https://github.com/premake/premake-core/pull/1415,https://github.com/englercj,1,https://github.com/premake/premake-core/pull/1415,"What does this PR do?
Attempts to add full support for the .c++ extension.
How does this PR change Premake's behavior?
Files with the .c++ extension seemed to be partial supported before, but this should shore up a few missing places. For example, iscpp returned true for .c++ files but they were not marked for compilation.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Attempts to add full support for the .c++ extension.
How does this PR change Premake's behavior?
Files with the .c++ extension seemed to be partial supported before, but this should shore up a few missing places. For example, iscpp returned true for .c++ files but they were not marked for compilation.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1415,2020-03-28T02:21:36Z,2020-03-28T08:55:43Z,2020-03-28T17:08:19Z,MERGED,True,5,3,2,https://github.com/englercj,Add .c++ extension support to a few spots it was missing,1,[],https://github.com/premake/premake-core/pull/1415,https://github.com/englercj,2,https://github.com/premake/premake-core/pull/1415#issuecomment-605381644,"What does this PR do?
Attempts to add full support for the .c++ extension.
How does this PR change Premake's behavior?
Files with the .c++ extension seemed to be partial supported before, but this should shore up a few missing places. For example, iscpp returned true for .c++ files but they were not marked for compilation.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Ping @TurkeyMan, related to a convo we had today.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1419,2020-03-30T20:03:50Z,2020-03-31T08:22:39Z,2020-04-06T21:38:29Z,MERGED,True,35,2,2,https://github.com/starkos,"Fix #1411: Remove ""|""  from Codelite config names",1,[],https://github.com/premake/premake-core/pull/1419,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1419,"What does this PR do?
Fix #1411 by removing the pipe symbol ""|"" from Codelite configuration names.
How does this PR change Premake's behavior?
The configuration names will now appear as ""platform-config"" e.g. ""x86-Debug"" instead of the previous ""x86|Debug"". Note this only happens if the workspace has specified platforms.
Anything else we should know?
See #1411 for discussion about the fix.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fix #1411 by removing the pipe symbol ""|"" from Codelite configuration names.
How does this PR change Premake's behavior?
The configuration names will now appear as ""platform-config"" e.g. ""x86-Debug"" instead of the previous ""x86|Debug"". Note this only happens if the workspace has specified platforms.
Anything else we should know?
See #1411 for discussion about the fix.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1420,2020-03-30T22:00:55Z,2020-04-01T13:29:06Z,2020-04-01T13:29:12Z,MERGED,True,29,10,7,https://github.com/starkos,Fix MinGW builds of Premake,4,[],https://github.com/premake/premake-core/pull/1420,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1420,"What does this PR do?
Gets Premake's bootstrap makefile to work properly with MinGW (64-bit only). This is an attempt to resurrect PR #1111.
Closes #559.
# To build with bootstrap script
set CC=gcc
mingw32-make -f Bootstrap.mak mingw PLATFORM=x64

# To build with Premake
premake5 --cc=mingw gmake2
mingw32-make config=debug_x64
How does this PR change Premake's behavior?
A few additions were made to Premake to improve support for MinGW specifically. Those were added by @tdesveauxPKFX in #1111, I've maintained them as is.
Anything else we should know?
I've successfully built Premake using the 64-bit version of MinGW using these changes. I was not able to build with the 32-bit version, though that may have  been a local setup issue; I didn't pursue it. Since, best I could tell, we aren't currently able to build with MinGW at all this seems like an incremental win.
I left @tdesveauxPKFX's commits intact so he would get some credit for the fix, since he did the bulk of the work on this one.
Two unit tests fail with the MinGW build:

base_os.remove_ReturnsTrue_OnFile gets an ""Access denied"" error when it tries to delete a temporary file
premake_binmodules.testExample fails with ""module 'example' not found""

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (minimal code changes)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Gets Premake's bootstrap makefile to work properly with MinGW (64-bit only). This is an attempt to resurrect PR #1111.
Closes #559.
# To build with bootstrap script
set CC=gcc
mingw32-make -f Bootstrap.mak mingw PLATFORM=x64

# To build with Premake
premake5 --cc=mingw gmake2
mingw32-make config=debug_x64
How does this PR change Premake's behavior?
A few additions were made to Premake to improve support for MinGW specifically. Those were added by @tdesveauxPKFX in #1111, I've maintained them as is.
Anything else we should know?
I've successfully built Premake using the 64-bit version of MinGW using these changes. I was not able to build with the 32-bit version, though that may have  been a local setup issue; I didn't pursue it. Since, best I could tell, we aren't currently able to build with MinGW at all this seems like an incremental win.
I left @tdesveauxPKFX's commits intact so he would get some credit for the fix, since he did the bulk of the work on this one.
Two unit tests fail with the MinGW build:

base_os.remove_ReturnsTrue_OnFile gets an ""Access denied"" error when it tries to delete a temporary file
premake_binmodules.testExample fails with ""module 'example' not found""

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (minimal code changes)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1420,2020-03-30T22:00:55Z,2020-04-01T13:29:06Z,2020-04-01T13:29:12Z,MERGED,True,29,10,7,https://github.com/starkos,Fix MinGW builds of Premake,4,[],https://github.com/premake/premake-core/pull/1420,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1420#issuecomment-606852887,"What does this PR do?
Gets Premake's bootstrap makefile to work properly with MinGW (64-bit only). This is an attempt to resurrect PR #1111.
Closes #559.
# To build with bootstrap script
set CC=gcc
mingw32-make -f Bootstrap.mak mingw PLATFORM=x64

# To build with Premake
premake5 --cc=mingw gmake2
mingw32-make config=debug_x64
How does this PR change Premake's behavior?
A few additions were made to Premake to improve support for MinGW specifically. Those were added by @tdesveauxPKFX in #1111, I've maintained them as is.
Anything else we should know?
I've successfully built Premake using the 64-bit version of MinGW using these changes. I was not able to build with the 32-bit version, though that may have  been a local setup issue; I didn't pursue it. Since, best I could tell, we aren't currently able to build with MinGW at all this seems like an incremental win.
I left @tdesveauxPKFX's commits intact so he would get some credit for the fix, since he did the bulk of the work on this one.
Two unit tests fail with the MinGW build:

base_os.remove_ReturnsTrue_OnFile gets an ""Access denied"" error when it tries to delete a temporary file
premake_binmodules.testExample fails with ""module 'example' not found""

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (minimal code changes)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Rebased to master, waiting for checks to complete.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1420,2020-03-30T22:00:55Z,2020-04-01T13:29:06Z,2020-04-01T13:29:12Z,MERGED,True,29,10,7,https://github.com/starkos,Fix MinGW builds of Premake,4,[],https://github.com/premake/premake-core/pull/1420,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1420#issuecomment-606927451,"What does this PR do?
Gets Premake's bootstrap makefile to work properly with MinGW (64-bit only). This is an attempt to resurrect PR #1111.
Closes #559.
# To build with bootstrap script
set CC=gcc
mingw32-make -f Bootstrap.mak mingw PLATFORM=x64

# To build with Premake
premake5 --cc=mingw gmake2
mingw32-make config=debug_x64
How does this PR change Premake's behavior?
A few additions were made to Premake to improve support for MinGW specifically. Those were added by @tdesveauxPKFX in #1111, I've maintained them as is.
Anything else we should know?
I've successfully built Premake using the 64-bit version of MinGW using these changes. I was not able to build with the 32-bit version, though that may have  been a local setup issue; I didn't pursue it. Since, best I could tell, we aren't currently able to build with MinGW at all this seems like an incremental win.
I left @tdesveauxPKFX's commits intact so he would get some credit for the fix, since he did the bulk of the work on this one.
Two unit tests fail with the MinGW build:

base_os.remove_ReturnsTrue_OnFile gets an ""Access denied"" error when it tries to delete a temporary file
premake_binmodules.testExample fails with ""module 'example' not found""

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (minimal code changes)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","HTTP tests are failing with ""Bad Gateway"", but it varies which platform fails each time I run it. If I can't get a clean pass I may just merge.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1421,2020-04-06T22:08:24Z,2020-04-07T14:00:37Z,2020-04-07T14:00:58Z,MERGED,True,6,2,2,https://github.com/starkos,Enable enablewarnings() for MSC,1,[],https://github.com/premake/premake-core/pull/1421,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1421,"What does this PR do?
Adds support for Premake's enablewarnings() call to MSC and Visual Studio. From the original pull request: ""This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.""
h/t @TrianglesPCT for the idea.
How does this PR change Premake's behavior?
Values set for enablewarnings() will now be applied to the MSC switches. This may cause a change in behavior if warnings had been previously enabled but ignored.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (n/a)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds support for Premake's enablewarnings() call to MSC and Visual Studio. From the original pull request: ""This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.""
h/t @TrianglesPCT for the idea.
How does this PR change Premake's behavior?
Values set for enablewarnings() will now be applied to the MSC switches. This may cause a change in behavior if warnings had been previously enabled but ignored.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (n/a)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1421,2020-04-06T22:08:24Z,2020-04-07T14:00:37Z,2020-04-07T14:00:58Z,MERGED,True,6,2,2,https://github.com/starkos,Enable enablewarnings() for MSC,1,[],https://github.com/premake/premake-core/pull/1421,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1421#issuecomment-610070422,"What does this PR do?
Adds support for Premake's enablewarnings() call to MSC and Visual Studio. From the original pull request: ""This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.""
h/t @TrianglesPCT for the idea.
How does this PR change Premake's behavior?
Values set for enablewarnings() will now be applied to the MSC switches. This may cause a change in behavior if warnings had been previously enabled but ignored.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (n/a)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Not sure why some CI builds see the branch and others don't?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1421,2020-04-06T22:08:24Z,2020-04-07T14:00:37Z,2020-04-07T14:00:58Z,MERGED,True,6,2,2,https://github.com/starkos,Enable enablewarnings() for MSC,1,[],https://github.com/premake/premake-core/pull/1421,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1421#issuecomment-610168212,"What does this PR do?
Adds support for Premake's enablewarnings() call to MSC and Visual Studio. From the original pull request: ""This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.""
h/t @TrianglesPCT for the idea.
How does this PR change Premake's behavior?
Values set for enablewarnings() will now be applied to the MSC switches. This may cause a change in behavior if warnings had been previously enabled but ignored.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (n/a)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","This looks like you've got CI setup on your fork, but it's using this repos details instead of your fork? I'm guessing you would just need to disable the CI configuration in your repo?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1422,2020-04-09T15:19:47Z,2020-04-15T13:10:55Z,2020-04-15T16:28:38Z,MERGED,True,40,0,1,https://github.com/samsinsane,Added GitHub Actions,1,[],https://github.com/premake/premake-core/pull/1422,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1422,"What does this PR do?
This adds GitHub Actions to do CI as a potential replacement for both Travis-CI and AppVeyor.
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
Windows builds use windows-msbuild instead of windows, the upgrade is unnecessary.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This adds GitHub Actions to do CI as a potential replacement for both Travis-CI and AppVeyor.
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
Windows builds use windows-msbuild instead of windows, the upgrade is unnecessary.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1422,2020-04-09T15:19:47Z,2020-04-15T13:10:55Z,2020-04-15T16:28:38Z,MERGED,True,40,0,1,https://github.com/samsinsane,Added GitHub Actions,1,[],https://github.com/premake/premake-core/pull/1422,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1422#issuecomment-614140745,"What does this PR do?
This adds GitHub Actions to do CI as a potential replacement for both Travis-CI and AppVeyor.
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
Windows builds use windows-msbuild instead of windows, the upgrade is unnecessary.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Hmm, it doesn't appear to have done a master build, I must have got something wrong. Pushing branches worked in my fork, and I assume PRs will work since it does specify them the same way as pushing, I guess neither are merges? I'll look into this when I get a chance üëç
Edit: I guess I spoke too soon, the PR I just merged triggered a CI build.",True,{'HOORAY': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1424,2020-04-15T13:09:05Z,2020-04-15T16:26:46Z,2020-04-16T18:23:23Z,MERGED,True,67,63,3,https://github.com/starkos,"Fix systemversion(""latest"") on VS2017",1,[],https://github.com/premake/premake-core/pull/1424,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1424,"What does this PR do?
My take on a cleaned-up version of #1317. Implements the workaround described here to enable VS 2017 to discover the correct version of the Windows 10 SDK.
h/t to @jeaiii to discovering the fix, and putting together the original PR.
How does this PR change Premake's behavior?
Should not be any breaking changes. Does add this markup to every VS 2017 project, regardless of whether systemversion(""latest"") is used or not:
<LatestTargetPlatformVersion>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetLatestSDKTargetPlatformVersion('Windows', '10.0'))</LatestTargetPlatformVersion>
The alternative is to scan through all of the project configurations to see if the value has been set or not before writing, but the markup is ignored if not used, and querying all of the configurations can be relatively expensive. If no one complains, this is a more efficient approach.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues N/A
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
My take on a cleaned-up version of #1317. Implements the workaround described here to enable VS 2017 to discover the correct version of the Windows 10 SDK.
h/t to @jeaiii to discovering the fix, and putting together the original PR.
How does this PR change Premake's behavior?
Should not be any breaking changes. Does add this markup to every VS 2017 project, regardless of whether systemversion(""latest"") is used or not:
<LatestTargetPlatformVersion>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetLatestSDKTargetPlatformVersion('Windows', '10.0'))</LatestTargetPlatformVersion>
The alternative is to scan through all of the project configurations to see if the value has been set or not before writing, but the markup is ignored if not used, and querying all of the configurations can be relatively expensive. If no one complains, this is a more efficient approach.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues N/A
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1427,2020-04-21T21:04:26Z,2020-04-22T12:58:55Z,2020-04-22T12:59:05Z,MERGED,True,91,102,4,https://github.com/starkos,Fix up and improve the release docs and script,1,[],https://github.com/premake/premake-core/pull/1427,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1427,"What does this PR do?
Fixes a few bits of the packaging script that weren't working properly, and reviewed and cleaned up the supporting checklist. Just getting my head around the process again before cutting a new release.
How does this PR change Premake's behavior?
It does not. Packaging & checklist fixes only.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass n/a
 Mention any related issues n/a
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes a few bits of the packaging script that weren't working properly, and reviewed and cleaned up the supporting checklist. Just getting my head around the process again before cutting a new release.
How does this PR change Premake's behavior?
It does not. Packaging & checklist fixes only.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass n/a
 Mention any related issues n/a
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1430,2020-04-26T01:28:12Z,2020-04-26T11:33:49Z,2020-04-26T11:33:50Z,MERGED,True,2,13,1,https://github.com/Enhex,fixed adding LD_LIBRARY_PATH to the executable run command.,1,[],https://github.com/premake/premake-core/pull/1430,https://github.com/Enhex,1,https://github.com/premake/premake-core/pull/1430,"What does this PR do?
Fix Codelite generator creating broken executable run command.
Premake wrongly adds libdirs to Project Settings -> General -> Executable to Run / Debug.
Anything else we should know?
libdirs are already added to Project Settings -> Linker -> Libraries Search path.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Fix Codelite generator creating broken executable run command.
Premake wrongly adds libdirs to Project Settings -> General -> Executable to Run / Debug.
Anything else we should know?
libdirs are already added to Project Settings -> Linker -> Libraries Search path.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1430,2020-04-26T01:28:12Z,2020-04-26T11:33:49Z,2020-04-26T11:33:50Z,MERGED,True,2,13,1,https://github.com/Enhex,fixed adding LD_LIBRARY_PATH to the executable run command.,1,[],https://github.com/premake/premake-core/pull/1430,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1430#issuecomment-619485800,"What does this PR do?
Fix Codelite generator creating broken executable run command.
Premake wrongly adds libdirs to Project Settings -> General -> Executable to Run / Debug.
Anything else we should know?
libdirs are already added to Project Settings -> Linker -> Libraries Search path.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",This looks like it just reverts #1206 with #1201 being the original PR. Can you please elaborate on why this is wrong?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1430,2020-04-26T01:28:12Z,2020-04-26T11:33:49Z,2020-04-26T11:33:50Z,MERGED,True,2,13,1,https://github.com/Enhex,fixed adding LD_LIBRARY_PATH to the executable run command.,1,[],https://github.com/premake/premake-core/pull/1430,https://github.com/Enhex,3,https://github.com/premake/premake-core/pull/1430#issuecomment-619488575,"What does this PR do?
Fix Codelite generator creating broken executable run command.
Premake wrongly adds libdirs to Project Settings -> General -> Executable to Run / Debug.
Anything else we should know?
libdirs are already added to Project Settings -> Linker -> Libraries Search path.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","It simply adds libdirs to the executable run command, for example:
Executing: cmd /C  call ""\\LD_LIBRARY_PATH=E\conan\Celero\master\enhex\stable\package\3fb49604f9c2f729b85ba3115852006824e72cab\lib bin\Release\search.exe"" && pause

Obviously that doesn't work, it should be:
Executing: cmd /C  call ""bin\Release\search.exe"" && pause

I tried it with Codelite 13 & 14.
You can easily reproduce it by generating Codelite project from a Premake executable script with libdirs defined.
I recommend trying this on Linux (can use a Virtual Machine) because setting up Codelite on Windows doesn't work well.
Also I don't understand why it was added in the first place.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1430,2020-04-26T01:28:12Z,2020-04-26T11:33:49Z,2020-04-26T11:33:50Z,MERGED,True,2,13,1,https://github.com/Enhex,fixed adding LD_LIBRARY_PATH to the executable run command.,1,[],https://github.com/premake/premake-core/pull/1430,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1430#issuecomment-619514138,"What does this PR do?
Fix Codelite generator creating broken executable run command.
Premake wrongly adds libdirs to Project Settings -> General -> Executable to Run / Debug.
Anything else we should know?
libdirs are already added to Project Settings -> Linker -> Libraries Search path.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",Are you saying that the LD_LIBRARY_PATH also failed when you tried this on Linux? Can you provide the snippet of what CodeLite was going to execute on Linux?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1430,2020-04-26T01:28:12Z,2020-04-26T11:33:49Z,2020-04-26T11:33:50Z,MERGED,True,2,13,1,https://github.com/Enhex,fixed adding LD_LIBRARY_PATH to the executable run command.,1,[],https://github.com/premake/premake-core/pull/1430,https://github.com/Enhex,5,https://github.com/premake/premake-core/pull/1430#issuecomment-619524883,"What does this PR do?
Fix Codelite generator creating broken executable run command.
Premake wrongly adds libdirs to Project Settings -> General -> Executable to Run / Debug.
Anything else we should know?
libdirs are already added to Project Settings -> Linker -> Libraries Search path.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","in Codelite's output tab:
Executing: /usr/bin/codelite-terminal --working-directory=/home/desktop/dev/Benchmarks/build/search --file=/tmp/CodeLite.desktop.1587896503/codelite-terminal.txt --wait
And in the run console:
/bin/bash: /home/desktop/dev/Benchmarks/.conan/data/Celero/master/enhex/stable/package/2a30b7d6ea2202e5393ebda51c8729dd2162b9f8/lib bin/Release/search: No such file or directory",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/withmorten,1,https://github.com/premake/premake-core/pull/1439,Related issue: #1438,Related issue: #1438,True,{}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/withmorten,2,https://github.com/premake/premake-core/pull/1439#issuecomment-621433606,Related issue: #1438,Looks like all the tests are failing (should have thought of that) - perhaps it at least should only be added to Windows projects (and I should maybe move it to the bottom of the globals list)?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1439#issuecomment-621650671,Related issue: #1438,"You should definitely ensure it only happens on Windows (os.target() == p.WINDOWS) but also you should ensure that it only happens for VS2019 (your issue mentions that it only started in VS2019), if this continues in VS2021 it can be updated to include that but we shouldn't have this happening when XP support is completely gone. Additionally, you should move the entry to the bottom of the group, you're going to break a lot of unit tests by putting it at the top. Once you've done this, I highly recommend you write unit tests to ensure that it doesn't happen in VS2017 or when system ""android"", and that it does happen in VS2019.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/withmorten,4,https://github.com/premake/premake-core/pull/1439#issuecomment-621796964,Related issue: #1438,"It also happens in VS2017 - it's a general issue with the toolset, because MS added the XPDeprecationWarning as true *in MSBuild\Microsoft\VC\v150\Platforms\Win32\PlatformToolsets\v141_xp\Toolset.targets, and I suspect it will happen in future versions *too (if _xp is even available there).
I don't have VS2017 installed right now, but I remember it from when I had and this stackoverflow *post seems to corroborate that: https://stackoverflow.com/questions/53841470/how-to-disable-warning-msb8051-support-for-targeting-windows-xp-is-deprecated
It doesn't however happen with VS2015, or when you select the v140_xp buildtools in VS2017 or VS2019 ...
Edit: Okay I solved it the following way. Instead of setting it globally for the entire project, I moved the function to the globalsCondition array, give it the cfg, and check if the toolset == msc-v141_xp.
Now I just need to have a look at the tests.
Edit2: Typos....",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1439#issuecomment-621817507,Related issue: #1438,@withmorten thanks for the additional context on that!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/withmorten,6,https://github.com/premake/premake-core/pull/1439#issuecomment-621823083,Related issue: #1438,"The final result then looks like this, instead of adding it to the Globals, it gets added to the Configuration specific parts:
  <PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Debug|Win32'"" Label=""Globals"">
    <XPDeprecationWarning>false</XPDeprecationWarning>
  </PropertyGroup>
  <PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Release|Win32'"" Label=""Globals"">
    <XPDeprecationWarning>false</XPDeprecationWarning>
  </PropertyGroup>
  <PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='ReleaseNO|Win32'"" Label=""Globals"">
    <XPDeprecationWarning>false</XPDeprecationWarning>
  </PropertyGroup>`

That's okay? It disables the build warning just fine even though the placement in the vcxproj is a bit odd.
Tests are fine now too, but I probably would need to add a test for toolset == v141_xp, similar to the v120_xp test.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1439#issuecomment-621864741,Related issue: #1438,"That's okay?

Seems good to me üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,1439,2020-04-29T19:55:34Z,2020-05-01T14:17:09Z,2020-05-01T14:17:09Z,MERGED,True,45,0,2,https://github.com/withmorten,Disable XP deprecation warning for Visual Studio projects,2,[],https://github.com/premake/premake-core/pull/1439,https://github.com/withmorten,8,https://github.com/premake/premake-core/pull/1439#issuecomment-621908817,Related issue: #1438,"Okay, now it only sets the warning to false when specifically choosing v141_xp, and only per config!
I hope the way I added the tests (one for global, one for specific config ""Release"" only) is okay!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1446,2020-05-13T19:50:34Z,2020-05-16T19:00:24Z,2020-05-16T19:00:24Z,MERGED,True,1,1,1,https://github.com/rhuvendiek,Do not add <Link> for .NET resources or the resource will not be properly embedded.,1,[],https://github.com/premake/premake-core/pull/1446,https://github.com/rhuvendiek,1,https://github.com/premake/premake-core/pull/1446,"What does this PR do?
During generation of C# project I did notice resx files did not get properly embedded into the built assembly.
How does this PR change Premake's behavior?
EmbedResource actions or VS won't generate ""file"" tags anymore.
Anything else we should know?
There might be cases if the link is needed. Obviously I do not know the indepth internals of Visual Studio :(","What does this PR do?
During generation of C# project I did notice resx files did not get properly embedded into the built assembly.
How does this PR change Premake's behavior?
EmbedResource actions or VS won't generate ""file"" tags anymore.
Anything else we should know?
There might be cases if the link is needed. Obviously I do not know the indepth internals of Visual Studio :(",True,{}
premake/premake-core,https://github.com/premake/premake-core,1446,2020-05-13T19:50:34Z,2020-05-16T19:00:24Z,2020-05-16T19:00:24Z,MERGED,True,1,1,1,https://github.com/rhuvendiek,Do not add <Link> for .NET resources or the resource will not be properly embedded.,1,[],https://github.com/premake/premake-core/pull/1446,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1446#issuecomment-628692720,"What does this PR do?
During generation of C# project I did notice resx files did not get properly embedded into the built assembly.
How does this PR change Premake's behavior?
EmbedResource actions or VS won't generate ""file"" tags anymore.
Anything else we should know?
There might be cases if the link is needed. Obviously I do not know the indepth internals of Visual Studio :(","Hmm‚Ä¶it's been quite a while since I added support for external files to C# projects. At the time, adding <link/> was the only way to get Visual Studio to see a file that lived outside of the project folder. If you double-click the file within Solution Explorer, does it open? If so, then I'm good with merging.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1446,2020-05-13T19:50:34Z,2020-05-16T19:00:24Z,2020-05-16T19:00:24Z,MERGED,True,1,1,1,https://github.com/rhuvendiek,Do not add <Link> for .NET resources or the resource will not be properly embedded.,1,[],https://github.com/premake/premake-core/pull/1446,https://github.com/rhuvendiek,3,https://github.com/premake/premake-core/pull/1446#issuecomment-628717443,"What does this PR do?
During generation of C# project I did notice resx files did not get properly embedded into the built assembly.
How does this PR change Premake's behavior?
EmbedResource actions or VS won't generate ""file"" tags anymore.
Anything else we should know?
There might be cases if the link is needed. Obviously I do not know the indepth internals of Visual Studio :(","Tested with VS2017: Yes the filesopen just fine.
Also from my observation by poking into the csproj VS won't generate those  tag itself",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/ethan-wallace,1,https://github.com/premake/premake-core/pull/1447,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/ethan-wallace,2,https://github.com/premake/premake-core/pull/1447#issuecomment-629439141,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Tests fail on CI, but that's to be expected as the XML output changed. Locally, when running bin/release/premake5 test I get all tests passed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/ethan-wallace,3,https://github.com/premake/premake-core/pull/1447#issuecomment-629718421,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Oops, I see where the additional tests are now.... Will update them to reflect the new changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1447#issuecomment-629745142,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","I'm not entirely sold on this PR. You're saying that -Wextra and /Wall are the same, but the linked issue says otherwise:

The msvc STL is only tested so that it doesn't emit /W4 errors. The visual c++ team generally recommends that you don't use /Wall all the time.

My projects use flags { ""FatalWarnings"" } with warnings ""Extra"", there's a few 3rd party files that we pull in that we opt to turn warnings off on entirely, but otherwise our entire project will build just fine with these two settings.
I appreciate that people want to turn /Wall on, but I don't think it's a great idea to complicate scripts to do:
warnings ""Extra""
filter { ""action:vs*"" }
  warnings ""High""
filter {}
just to achieve the same functionality that they have now with warnings ""Extra"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1447#issuecomment-630861064,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","I agree with the OP that High should be set to ""4"" for VS, which would bring it into alignment with the other toolsets, including MSC. The fact that High isn't mapped at all makes me think that no just ever got around to doing it. This may cause some existing projects to start generating more warnings, but I think we can make the case for that.
Having poked around a bit, I think we should leave Extra as it is at ""4"", see this SO thread for some explanation.
@ethan-wallace What say you? Would you be willing to rework this PR to just map High and leave Extra alone (and then squash it to remove the previous commits)? You can always add /Wall yourself for VS using buildoptions().",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/redorav,6,https://github.com/premake/premake-core/pull/1447#issuecomment-630915998,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.",Would it make sense to have an All entry instead after Extra that maps to -Weverything? In case you really want to turn the entire world of warnings on?,True,{'HEART': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1447#issuecomment-630967481,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Would it make sense to have an All entry instead after Extra that maps to -Weverything?

I'm good with that. Maybe we should call it ""Everything""?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/ethan-wallace,8,https://github.com/premake/premake-core/pull/1447#issuecomment-631101098,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","That sounds reasonable to me. If no-one has any further revisions I'll see what I can do about adding an ""Everything"" entry on top of ""Extra"". In this scenario, the new table would be as follows:



Level
Flag (MSVC)
Flag (GCC/Clang)




Off
/W0
-w


Default
/W3
no flag (gcc's default warnings)


High
/W4
-Wall


Extra
/W4
-Wall -Wextra


Everything
/Wall
-Weverything



I primarily use Visual Studio and MSVC, but looking at the code there doesn't seem to be a CFLAG emitted on GCC/clang for a default warning level. Let me know if I'm off about that. I also don't have much experience with the C# compilers - if needed I will go ahead with just MSVC and GCC, get your feedback, and then take a stab at dotnet just so everything is consistent across the toolsets.",True,"{'HEART': ['https://github.com/samsinsane', 'https://github.com/RicoP', 'https://github.com/rwcherry']}"
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/1447#issuecomment-631241871,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","The flags for GCC fall under the shared block, which is flags shared between C and C++.
As for what needs to be updated, anything that uses warnings should be updated:

GCC: 
  
    
      premake-core/src/tools/gcc.lua
    
    
        Lines 103 to 107
      in
      b47a949
    
  
  
    

        
          
           warnings = { 
        

        
          
           	Extra = {""-Wall"", ""-Wextra""}, 
        

        
          
           	High = ""-Wall"", 
        

        
          
           	Off = ""-w"", 
        

        
          
           }, 
        
    
  


MSC: 
  
    
      premake-core/src/tools/msc.lua
    
    
        Lines 82 to 86
      in
      b47a949
    
  
  
    

        
          
           warnings = { 
        

        
          
           	Extra = ""/W4"", 
        

        
          
           	High = ""/W4"", 
        

        
          
           	Off = ""/W0"", 
        

        
          
           }, 
        
    
  


SNC: 
  
    
      premake-core/src/tools/snc.lua
    
    
        Lines 30 to 32
      in
      b47a949
    
  
  
    

        
          
           warnings = { 
        

        
          
           	Extra = ""-Xdiag=2"", 
        

        
          
           } 
        
    
  


DMD: 
  
    
      premake-core/modules/d/tools/dmd.lua
    
    
        Lines 300 to 304
      in
      b47a949
    
  
  
    

        
          
           warnings = { 
        

        
          
           	Default = ""-wi"", 
        

        
          
           	High = ""-wi"", 
        

        
          
           	Extra = ""-wi"", 
        

        
          
           }, 
        
    
  


GDC: 
  
    
      premake-core/modules/d/tools/gdc.lua
    
    
        Lines 84 to 88
      in
      b47a949
    
  
  
    

        
          
           		warnings = { 
        

        
          
           --			Default = ""-w"",	-- TODO: check this... 
        

        
          
           			High = ""-Wall"", 
        

        
          
           			Extra = ""-Wall -Wextra"", 
        

        
          
           		}, 
        
    
  


LDC: 
  
    
      premake-core/modules/d/tools/ldc.lua
    
    
        Lines 116 to 120
      in
      b47a949
    
  
  
    

        
          
           warnings = { 
        

        
          
           	Default = ""-wi"", 
        

        
          
           	High = ""-wi"", 
        

        
          
           	Extra = ""-wi"",	-- TODO: is there a way to get extra warnings? 
        

        
          
           }, 
        
    
  


vcproj: 
  
    
      premake-core/modules/vstudio/vs200x_vcproj.lua
    
    
        Lines 1591 to 1606
      in
      b47a949
    
  
  
    

        
          
           function m.warningLevel(cfg) 
        

        
          
           	local prjcfg, filecfg = config.normalize(cfg) 
        

        
          
            
        

        
          
           	local level 
        

        
          
           	if cfg.warnings == p.OFF then 
        

        
          
           		level = ""0"" 
        

        
          
           	elseif cfg.warnings == ""Extra"" then 
        

        
          
           		level = ""4"" 
        

        
          
           	elseif not filecfg then 
        

        
          
           		level = ""3"" 
        

        
          
           	end 
        

        
          
            
        

        
          
           	if level then 
        

        
          
           		p.w('WarningLevel=""%s""', level) 
        

        
          
           	end 
        

        
          
           end 
        
    
  


vcxproj: 
  
    
      premake-core/modules/vstudio/vs2010_vcxproj.lua
    
    
        Lines 2716 to 2719
      in
      b47a949
    
  
  
    

        
          
           function m.warningLevel(cfg) 
        

        
          
           	local map = { Off = ""TurnOffAllWarnings"", Extra = ""Level4"" } 
        

        
          
           	m.element(""WarningLevel"", nil, map[cfg.warnings] or ""Level3"") 
        

        
          
           end 
        
    
  


XCode: 
  
    
      premake-core/modules/xcode/xcode_common.lua
    
    
        Lines 1451 to 1453
      in
      b47a949
    
  
  
    

        
          
           if cfg.warnings == ""Extra"" then 
        

        
          
           	settings['WARNING_CFLAGS'] = '-Wall -Wextra' 
        

        
          
           end 
        
    
  



Where you don't know what the value should be, use the value for Extra. Also, I can't see anything in the Clang docs that it supports -Weverything, so you may need to modify it to not copy the GCC warnings table, similar to floatingpoint or optimize above this: 
  
    
      premake-core/src/tools/clang.lua
    
    
         Line 63
      in
      b47a949
    
  
  
    

        
          
           warnings = gcc.shared.warnings,",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/1447#issuecomment-631397784,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","there doesn't seem to be a CFLAG emitted on GCC/clang for a default warning level

This is by design: Default leaves the toolset's default warning level unchanged, and is meant to be the equivalent of ""add no flags"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/redorav,11,https://github.com/premake/premake-core/pull/1447#issuecomment-631405206,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Also, I can't see anything in the Clang docs that it supports -Weverything, so you may need to modify it to not copy the GCC warnings table, similar to floatingpoint or optimize above this:

Both Clang and GCC do support this flag (a quick godbolt experiment confirms it), what documentation did you check?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/samsinsane,12,https://github.com/premake/premake-core/pull/1447#issuecomment-631466290,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Both Clang and GCC do support this flag (a quick godbolt experiment confirms it)

I always forget that exists when it comes to flags, oops!

what documentation did you check?

Just the Clang docs, the flag doesn't seem to be listed, I might have missed it but searching the page for everything didn't return any results either.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/starkos,13,https://github.com/premake/premake-core/pull/1447#issuecomment-640609238,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Any thoughts or progress on this? I'm going to be pushing back a little harder on ""stale"" PRs so we don't end up with a collection of incomplete work that no one intends to finish (again). If this isn't be actively worked, let's create an issue to note it and then close the PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/ethan-wallace,14,https://github.com/premake/premake-core/pull/1447#issuecomment-642958187,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Most of the work has been done, have been obscenely busy the last few weeks with work. I'll see if I can get an update over the weekend. Sorry for the delay!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/starkos,15,https://github.com/premake/premake-core/pull/1447#issuecomment-643788284,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.",No worries! I certainly know how that is. Just checking in‚Ä¶,True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/ethan-wallace,16,https://github.com/premake/premake-core/pull/1447#issuecomment-646808375,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Finally had some time to get this squared away. I've added distinct ""High"", ""Extra"", and ""Everything"" flags as discussed, and where possible added tests for all of them (e.g., test_gcc.lua only had one test for warnings).
What I haven't added is the extra flags for the SNC compiler; I have no experience with it and couldn't find any documentation. I see there is a single flag in there right now for ""Extra"" but I didn't want to add any flags I wasn't 100% sure would actually be valid. If anyone has documentation/knows what flags are valid please let me know and I'll add them in. As well, I couldn't find documentation for what vcproj_200x based projects would emit on ""Everything"" (e.g., in vs2010+ the output would be EnableAllWarnings). I don't have a copy of VisualStudio that old laying around, so wasn't able to verify it. Again, if anyone knows what should go there please let me know.
Barring that, if everything looks good I'll squash the commits for merging",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/samsinsane,17,https://github.com/premake/premake-core/pull/1447#issuecomment-647081876,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.","Travis-CI seems incredibly flaky when it comes to connecting the PR to the build job. I've manually kicked it off, but one of our unit tests is failing due to httpbin.org having a broken redirect test.
@starkos I'm going to merge this since our master build is already failing for the same reason.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1447,2020-05-15T19:15:16Z,2020-06-21T05:37:57Z,2021-10-05T14:10:48Z,MERGED,True,175,17,14,https://github.com/ethan-wallace,Added /Wall to possible warning levels for Visual Studio,5,[],https://github.com/premake/premake-core/pull/1447,https://github.com/haolly,18,https://github.com/premake/premake-core/pull/1447#issuecomment-934450433,"This small PR follows an old discussion and closes #709
It applies only to VS2010 and above.
What does this PR do?
The current behaviour of the warnings keyword when using Premake for a Visual Studio project is as follows:



Level
Flag




Off
/W0


Default
/W3


Extra
/W4



As per the referenced issue, this PR changes the behaviour to the following (bringing it in-line with how these flags are generated when using GCC: and clang):



Level
Flag




Off
/W0


Default
/W3


High
/W4


Extra
/Wall



In src/tools/msc.lua the list of warning compiler flags contains both ""High"" and ""Extra"" with a value of ""/W4"", however in modules/vstudio/vs2010_vcxproj.lua the map to generate the XML Visual Studio expects only contains Off and Extra, so even if a user specified warnings ""High"" they would still get /W3 (the default when the passed value isn't in the map) instead of /W4 (which they probably expected). I downloaded a fresh Premake binary from the website and confirmed that this was indeed the case.
I have also altered the unit test in test_msc.lua, specifically suite.cflags_OnExtraWarnings, to ensure that the proper flag is generated. Running the Premake test suite I get no errors.
Testing was done on Windows 10 Pro (64-bit) version 1909.
How does this PR change Premake's behavior?
When running Premake with warnings ""Extra"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>EnableAllWarnings</WarningLevel> instead of       <WarningLevel>Level4</WarningLevel>
Running Premake with warnings ""High"" and generating a Visual Studio solution (VS2010 or above), the resultant .vcxproj will generate with       <WarningLevel>Level4</WarningLevel> instead of       <WarningLevel>Level3</WarningLevel>
Anything else we should know?
The /Wall keyword includes all of the warnings in /W4 plus some extra ones off by default. These extra warnings can be turned on piecemeal via the enablewarnings keyword, but it would be nice to be able to just have to set the single flag.
In the referenced issue, a few commenters brought up the importance of allowing /W4 to remain available as an option, which this PR does (/W4 is still available through warnings ""High"").
Overall, I believe that this PR brings MSVC in line with how Premake deals with GCC; warnings ""High"" leads to the generation of the flag -Wall while warnings ""Extra"" leads to the generation of -Wall -Wextra.",Please update the document https://premake.github.io/docs/warnings/ to reflect this change,True,{}
premake/premake-core,https://github.com/premake/premake-core,1454,2020-05-25T10:25:28Z,2020-05-26T02:51:23Z,2021-03-08T18:32:35Z,MERGED,True,55,32,1,https://github.com/noresources,Bootstrap.mak clean target(s),2,[],https://github.com/premake/premake-core/pull/1454,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1454,"Bootstrap.mak can now clean itself using
make -f Bootstrap.mak <platform>-clean

Factorize cleanup tasks in two targets

windows-clean for windows systems
nix-clean: For all UNIX-based systems


Add a ""*-clean"" target counterpart for each target as an alias of windows-clean or nix-clean
Make each target invoke its *-clean target before running
Replace use of $? / $** by explicit $(SRC) in build rules
They cannot be used anymore due to the presence of the *-clean target in dependency list

What does this PR do?
Leaving premake source directory clean after an automatic build
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
No behavior change. Just add new targets to Bootstrap.mak
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
Tested manually on linux & macOS, Github actions run successfully
Add any other context about your changes here.
Did you check all the boxes?
Not sure I can write a test for that. Maybe a Github Action ?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Bootstrap.mak can now clean itself using
make -f Bootstrap.mak <platform>-clean

Factorize cleanup tasks in two targets

windows-clean for windows systems
nix-clean: For all UNIX-based systems


Add a ""*-clean"" target counterpart for each target as an alias of windows-clean or nix-clean
Make each target invoke its *-clean target before running
Replace use of $? / $** by explicit $(SRC) in build rules
They cannot be used anymore due to the presence of the *-clean target in dependency list

What does this PR do?
Leaving premake source directory clean after an automatic build
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
No behavior change. Just add new targets to Bootstrap.mak
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
Tested manually on linux & macOS, Github actions run successfully
Add any other context about your changes here.
Did you check all the boxes?
Not sure I can write a test for that. Maybe a Github Action ?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1454,2020-05-25T10:25:28Z,2020-05-26T02:51:23Z,2021-03-08T18:32:35Z,MERGED,True,55,32,1,https://github.com/noresources,Bootstrap.mak clean target(s),2,[],https://github.com/premake/premake-core/pull/1454,https://github.com/noresources,2,https://github.com/premake/premake-core/pull/1454#issuecomment-633713184,"Bootstrap.mak can now clean itself using
make -f Bootstrap.mak <platform>-clean

Factorize cleanup tasks in two targets

windows-clean for windows systems
nix-clean: For all UNIX-based systems


Add a ""*-clean"" target counterpart for each target as an alias of windows-clean or nix-clean
Make each target invoke its *-clean target before running
Replace use of $? / $** by explicit $(SRC) in build rules
They cannot be used anymore due to the presence of the *-clean target in dependency list

What does this PR do?
Leaving premake source directory clean after an automatic build
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
No behavior change. Just add new targets to Bootstrap.mak
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
Tested manually on linux & macOS, Github actions run successfully
Add any other context about your changes here.
Did you check all the boxes?
Not sure I can write a test for that. Maybe a Github Action ?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thanks for your comments. I have added both suggestions in a new commit.

A new line in the ""none"" target
and a ""clean"" target.",True,{'HEART': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1454,2020-05-25T10:25:28Z,2020-05-26T02:51:23Z,2021-03-08T18:32:35Z,MERGED,True,55,32,1,https://github.com/noresources,Bootstrap.mak clean target(s),2,[],https://github.com/premake/premake-core/pull/1454,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1454#issuecomment-633780497,"Bootstrap.mak can now clean itself using
make -f Bootstrap.mak <platform>-clean

Factorize cleanup tasks in two targets

windows-clean for windows systems
nix-clean: For all UNIX-based systems


Add a ""*-clean"" target counterpart for each target as an alias of windows-clean or nix-clean
Make each target invoke its *-clean target before running
Replace use of $? / $** by explicit $(SRC) in build rules
They cannot be used anymore due to the presence of the *-clean target in dependency list

What does this PR do?
Leaving premake source directory clean after an automatic build
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
No behavior change. Just add new targets to Bootstrap.mak
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
Tested manually on linux & macOS, Github actions run successfully
Add any other context about your changes here.
Did you check all the boxes?
Not sure I can write a test for that. Maybe a Github Action ?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks! Merging!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1460,2020-06-02T00:17:01Z,2020-06-07T05:11:17Z,2020-06-07T05:11:17Z,MERGED,True,123,2,10,https://github.com/nickclark2016,Add C++20 cppdialect for C++ projects,2,[],https://github.com/premake/premake-core/pull/1460,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1460,"What does this PR do?
This PR introduces the C++20 standard dialect option to the cppdialect.  It sets the corresponding standard flag for MSC, Make, and XCode.



cppdialect
Generator
Compiler Value




c++17
MSC
/std:c++17


c++2a
gmake/gmake2
-std=c++2a


c++20
gmake/gmake2
-std=c++20


c++20
MSC
/std:c++latest


c++20
XCode
-std=c++2a


gnu++2a
gmake/gmake2
-std=gnu++2a


gnu++20
gmake/gmake2
-std=gnu++20


gnu++20
XCode
-std=gnu++2a



How does this PR change Premake's behavior?
This changes the behavior of MSC's C++17 dialect value from /std:latest to /std:c++17, which is supported in Visual Studio 2019.  When running Premake with cppdialect c++20, c++2a, gnu++20, or gnu++2a, this adds the appropriate standard revision to the compilation.
Anything else we should know?
Further down the line, the C++ dialect flags for Xcode should be changed to reflect updates to Apple LLVM's compiler flags.  This is out of scope of this PR though.","What does this PR do?
This PR introduces the C++20 standard dialect option to the cppdialect.  It sets the corresponding standard flag for MSC, Make, and XCode.



cppdialect
Generator
Compiler Value




c++17
MSC
/std:c++17


c++2a
gmake/gmake2
-std=c++2a


c++20
gmake/gmake2
-std=c++20


c++20
MSC
/std:c++latest


c++20
XCode
-std=c++2a


gnu++2a
gmake/gmake2
-std=gnu++2a


gnu++20
gmake/gmake2
-std=gnu++20


gnu++20
XCode
-std=gnu++2a



How does this PR change Premake's behavior?
This changes the behavior of MSC's C++17 dialect value from /std:latest to /std:c++17, which is supported in Visual Studio 2019.  When running Premake with cppdialect c++20, c++2a, gnu++20, or gnu++2a, this adds the appropriate standard revision to the compilation.
Anything else we should know?
Further down the line, the C++ dialect flags for Xcode should be changed to reflect updates to Apple LLVM's compiler flags.  This is out of scope of this PR though.",True,"{'THUMBS_UP': ['https://github.com/Cannedfood', 'https://github.com/Force67']}"
premake/premake-core,https://github.com/premake/premake-core,1460,2020-06-02T00:17:01Z,2020-06-07T05:11:17Z,2020-06-07T05:11:17Z,MERGED,True,123,2,10,https://github.com/nickclark2016,Add C++20 cppdialect for C++ projects,2,[],https://github.com/premake/premake-core/pull/1460,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1460#issuecomment-640062045,"What does this PR do?
This PR introduces the C++20 standard dialect option to the cppdialect.  It sets the corresponding standard flag for MSC, Make, and XCode.



cppdialect
Generator
Compiler Value




c++17
MSC
/std:c++17


c++2a
gmake/gmake2
-std=c++2a


c++20
gmake/gmake2
-std=c++20


c++20
MSC
/std:c++latest


c++20
XCode
-std=c++2a


gnu++2a
gmake/gmake2
-std=gnu++2a


gnu++20
gmake/gmake2
-std=gnu++20


gnu++20
XCode
-std=gnu++2a



How does this PR change Premake's behavior?
This changes the behavior of MSC's C++17 dialect value from /std:latest to /std:c++17, which is supported in Visual Studio 2019.  When running Premake with cppdialect c++20, c++2a, gnu++20, or gnu++2a, this adds the appropriate standard revision to the compilation.
Anything else we should know?
Further down the line, the C++ dialect flags for Xcode should be changed to reflect updates to Apple LLVM's compiler flags.  This is out of scope of this PR though.",Thanks for taking a look at the CI build.  I've been wondering why it was stalled.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1462,2020-06-07T16:53:31Z,2020-06-11T01:54:27Z,2020-06-11T01:54:27Z,MERGED,True,72,1,4,https://github.com/nickclark2016,Added clang as a valid option for projects generated with vs2019,1,[],https://github.com/premake/premake-core/pull/1462,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1462,"What does this PR do?
This PR unifies the functionality of the clang toolset across gmake/gmake2 and VS2019+ actions.  Formerly, clang would not resolve to a valid toolset, so it would be set to the default toolset of the Visual Studio version (e.g. v142 for VS2019).  This allows the vs2010 project generator to resolve ""clang"" to the correct platform toolset in the project file.
How does this PR change Premake's behavior?
This break any code that was relying on the value clang to resolve to v142 in VS2019.  Instead, clang now resolves to ClangCL in the PlatformToolset of the project file.  Issue #1461 describes the full affects of the changes.  This should only affect projects generated with the vs2019 action.","What does this PR do?
This PR unifies the functionality of the clang toolset across gmake/gmake2 and VS2019+ actions.  Formerly, clang would not resolve to a valid toolset, so it would be set to the default toolset of the Visual Studio version (e.g. v142 for VS2019).  This allows the vs2010 project generator to resolve ""clang"" to the correct platform toolset in the project file.
How does this PR change Premake's behavior?
This break any code that was relying on the value clang to resolve to v142 in VS2019.  Instead, clang now resolves to ClangCL in the PlatformToolset of the project file.  Issue #1461 describes the full affects of the changes.  This should only affect projects generated with the vs2019 action.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1468,2020-06-12T08:03:28Z,2020-06-16T10:38:36Z,2020-06-16T10:38:36Z,MERGED,True,134,4,5,https://github.com/noresources,macOS deployment target support for gcc and clang,2,[],https://github.com/premake/premake-core/pull/1468,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1468,"Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1468,2020-06-12T08:03:28Z,2020-06-16T10:38:36Z,2020-06-16T10:38:36Z,MERGED,True,134,4,5,https://github.com/noresources,macOS deployment target support for gcc and clang,2,[],https://github.com/premake/premake-core/pull/1468,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1468#issuecomment-643788696,"Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","It would probably be better if you validate at the point where the value is set, to make it easier for the script author to fix it? Here's an example of how to do it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1468,2020-06-12T08:03:28Z,2020-06-16T10:38:36Z,2020-06-16T10:38:36Z,MERGED,True,134,4,5,https://github.com/noresources,macOS deployment target support for gcc and clang,2,[],https://github.com/premake/premake-core/pull/1468,https://github.com/noresources,3,https://github.com/premake/premake-core/pull/1468#issuecomment-643827990,"Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","It would probably be better if you validate at the point where the value is set, to make it easier for the script author to fix it? Here's an example of how to do it.

The allowed values depends on project configuration (mainly os target). As I understand it, the ""allowed"" function only know the input value.
If there is no systemversion validation in all other actions, maybe it is better to remove it here for now.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1468,2020-06-12T08:03:28Z,2020-06-16T10:38:36Z,2020-06-16T10:38:36Z,MERGED,True,134,4,5,https://github.com/noresources,macOS deployment target support for gcc and clang,2,[],https://github.com/premake/premake-core/pull/1468,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1468#issuecomment-643956563,"Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Personally, I'm against validating version numbers - to me, it's just Premake getting in the way of the user when they know exactly what the version needs to be.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1468,2020-06-12T08:03:28Z,2020-06-16T10:38:36Z,2020-06-16T10:38:36Z,MERGED,True,134,4,5,https://github.com/noresources,macOS deployment target support for gcc and clang,2,[],https://github.com/premake/premake-core/pull/1468,https://github.com/noresources,5,https://github.com/premake/premake-core/pull/1468#issuecomment-644004928,"Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Validation has been removed in the new commit,True,{}
premake/premake-core,https://github.com/premake/premake-core,1468,2020-06-12T08:03:28Z,2020-06-16T10:38:36Z,2020-06-16T10:38:36Z,MERGED,True,134,4,5,https://github.com/noresources,macOS deployment target support for gcc and clang,2,[],https://github.com/premake/premake-core/pull/1468,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1468#issuecomment-644030011,"Use the value of systemversion to set the Apple-specific gcc/clang option -mmacosx-version-min=, equivalent of the Xcode setting MACOSX_DEPLOYMENT_TARGET
add tests for gcc and clang
How does this PR change Premake's behavior?
add -mmacosx-version-min= build flag on macOS when the project defines a systemversion.
Are there any breaking changes? Will any existing behavior change?
This flag will be added in all actions that use the gcc/clang getcflags and getcxxflags method. The Xcode action doesn't. It already has a similar behavior but use a Xcode setting insteaod.
Anything else we should know?
Tested on a real project on Linux (no changes) and macOS .
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","PR looks good to me, but I'll let @starkos chime in on the validation before this is merged.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1473,2020-06-18T09:02:44Z,2020-06-21T05:17:52Z,2020-06-21T05:17:52Z,MERGED,True,132,55,1,https://github.com/noresources,macOS os.getversion() improvements,1,[],https://github.com/premake/premake-core/pull/1473,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1473,"What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1473,2020-06-18T09:02:44Z,2020-06-21T05:17:52Z,2020-06-21T05:17:52Z,MERGED,True,132,55,1,https://github.com/noresources,macOS os.getversion() improvements,1,[],https://github.com/premake/premake-core/pull/1473,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1473#issuecomment-645920991,"What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","There is simpler methods to retrieve the OS version but they use private API or Objective-C code.

Is there a simpler Objective-C version that uses public APIs? How much simpler?
@starkos would you object to having a simpler implementation written in a different language? The code is already platform specific, being written in the ""platform language"" isn't going to make that much of a difference.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1473,2020-06-18T09:02:44Z,2020-06-21T05:17:52Z,2020-06-21T05:17:52Z,MERGED,True,132,55,1,https://github.com/noresources,macOS os.getversion() improvements,1,[],https://github.com/premake/premake-core/pull/1473,https://github.com/noresources,3,https://github.com/premake/premake-core/pull/1473#issuecomment-645960776,"What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","@samsinsane Objective-C code relies one Cocoa AppKit framework. It is not simpler, just use standard APIs.
Here is an implementation example",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1473,2020-06-18T09:02:44Z,2020-06-21T05:17:52Z,2020-06-21T05:17:52Z,MERGED,True,132,55,1,https://github.com/noresources,macOS os.getversion() improvements,1,[],https://github.com/premake/premake-core/pull/1473,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1473#issuecomment-645970197,"What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",I would not object to using Objective C in the macOS build.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1473,2020-06-18T09:02:44Z,2020-06-21T05:17:52Z,2020-06-21T05:17:52Z,MERGED,True,132,55,1,https://github.com/noresources,macOS os.getversion() improvements,1,[],https://github.com/premake/premake-core/pull/1473,https://github.com/noresources,5,https://github.com/premake/premake-core/pull/1473#issuecomment-646508062,"What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","I have made some exeperiments with the Objective-C API and the sw_vers command line tool

If I modify the SystemVersion.plist values, both sw_vers and the Objective-C API returns the modified values immediatly. So, the current pull request does exactly what Apple is doing under the hood
The Objective-C API is only available on OSX 10.10+ (with a deprecated alternative)
To compile Objective-C, Bottstrap.mak and premake4/5.lua have to be changed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1473,2020-06-18T09:02:44Z,2020-06-21T05:17:52Z,2020-06-21T05:17:52Z,MERGED,True,132,55,1,https://github.com/noresources,macOS os.getversion() improvements,1,[],https://github.com/premake/premake-core/pull/1473,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1473#issuecomment-646608209,"What does this PR do?

Read macOS system version from system property list instead of reading kernel version.
Add description for latest versions

How does this PR change Premake's behavior?

Same behavior for previously supported OS versions
Correct version number for any new version of macOS instead of 0.0
Maybe a bit slower

Anything else we should know?

I have kept the previous method as a fallback if the property list is removed in future releases.
The big switch over kernel version has been replaced by info->minorversion = kern_major - 4;. The relation is correct for all previously supported versions and probably for future ones.
The description will remain ""Mac OS X"" for new versions until a manual update of the code.

There is simpler methods to retrieve the OS version but they use private API or Objective-C code.
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Thanks for doing that research. @samsinsane I'm okay with the current, simpler plist approach, if you have no objections?",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1477,2020-07-07T09:35:42Z,2020-08-20T12:53:49Z,2020-08-20T12:53:49Z,MERGED,True,113,2,3,https://github.com/sp-rafael-lecina,Add support for .swift file for xcode,4,[],https://github.com/premake/premake-core/pull/1477,https://github.com/sp-rafael-lecina,1,https://github.com/premake/premake-core/pull/1477,"What does this PR do?

Set swift files as source code
Adds a swiftversion to be able to configure Swift Language Version

How does this PR change Premake's behavior?

Adds .swift on the file extension lists with proper values
Adds a DSL api to set the SWIFT_VERSION setting

Are there any breaking changes? Will any existing behavior change?

No

Anything else we should know?
Add any other context about your changes here.

closes #667

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?

Set swift files as source code
Adds a swiftversion to be able to configure Swift Language Version

How does this PR change Premake's behavior?

Adds .swift on the file extension lists with proper values
Adds a DSL api to set the SWIFT_VERSION setting

Are there any breaking changes? Will any existing behavior change?

No

Anything else we should know?
Add any other context about your changes here.

closes #667

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1477,2020-07-07T09:35:42Z,2020-08-20T12:53:49Z,2020-08-20T12:53:49Z,MERGED,True,113,2,3,https://github.com/sp-rafael-lecina,Add support for .swift file for xcode,4,[],https://github.com/premake/premake-core/pull/1477,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1477#issuecomment-656109374,"What does this PR do?

Set swift files as source code
Adds a swiftversion to be able to configure Swift Language Version

How does this PR change Premake's behavior?

Adds .swift on the file extension lists with proper values
Adds a DSL api to set the SWIFT_VERSION setting

Are there any breaking changes? Will any existing behavior change?

No

Anything else we should know?
Add any other context about your changes here.

closes #667

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","This looks like a nice feature addition, thanks for taking the time! Unfortunately, it looks like you've broken some of the existing unit tests with your changes‚Äîwe need all tests to be passing before we can merge your change.
It might make things easier if you split your changes up into two PRs: one that adds Swift support, and another for the single value fix. The Swift changes should pass the existing tests with no trouble, but you will probably need to fix up some of them in order to pass your single value changes.
It would also be helpful if you could add a new test or two to cover your improvements, verify they work, and protect against any future regressions.
And a small GitHub tip: If you put ""Closes #667"" instead of ""There was already an issue about this: #667"" that issue will get closed automatically as soon as your PR merges.
You can push new commits to this branch to patch things up, or close this one and open new one(s). Seem reasonable?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1477,2020-07-07T09:35:42Z,2020-08-20T12:53:49Z,2020-08-20T12:53:49Z,MERGED,True,113,2,3,https://github.com/sp-rafael-lecina,Add support for .swift file for xcode,4,[],https://github.com/premake/premake-core/pull/1477,https://github.com/sp-rafael-lecina,3,https://github.com/premake/premake-core/pull/1477#issuecomment-656136960,"What does this PR do?

Set swift files as source code
Adds a swiftversion to be able to configure Swift Language Version

How does this PR change Premake's behavior?

Adds .swift on the file extension lists with proper values
Adds a DSL api to set the SWIFT_VERSION setting

Are there any breaking changes? Will any existing behavior change?

No

Anything else we should know?
Add any other context about your changes here.

closes #667

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Thanks
Once I have some time I'll do the fixes you suggest
Just one question. Do you know why the single value code was commented?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1477,2020-07-07T09:35:42Z,2020-08-20T12:53:49Z,2020-08-20T12:53:49Z,MERGED,True,113,2,3,https://github.com/sp-rafael-lecina,Add support for .swift file for xcode,4,[],https://github.com/premake/premake-core/pull/1477,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1477#issuecomment-656141394,"What does this PR do?

Set swift files as source code
Adds a swiftversion to be able to configure Swift Language Version

How does this PR change Premake's behavior?

Adds .swift on the file extension lists with proper values
Adds a DSL api to set the SWIFT_VERSION setting

Are there any breaking changes? Will any existing behavior change?

No

Anything else we should know?
Add any other context about your changes here.

closes #667

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Sorry, no!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1477,2020-07-07T09:35:42Z,2020-08-20T12:53:49Z,2020-08-20T12:53:49Z,MERGED,True,113,2,3,https://github.com/sp-rafael-lecina,Add support for .swift file for xcode,4,[],https://github.com/premake/premake-core/pull/1477,https://github.com/sp-rafael-lecina,5,https://github.com/premake/premake-core/pull/1477#issuecomment-666717785,"What does this PR do?

Set swift files as source code
Adds a swiftversion to be able to configure Swift Language Version

How does this PR change Premake's behavior?

Adds .swift on the file extension lists with proper values
Adds a DSL api to set the SWIFT_VERSION setting

Are there any breaking changes? Will any existing behavior change?

No

Anything else we should know?
Add any other context about your changes here.

closes #667

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","@starkos  Don't actually know why CI failed on this and worked on this other one: #1491
Didn¬¥t have much info when going to details",True,{}
premake/premake-core,https://github.com/premake/premake-core,1481,2020-07-10T13:58:50Z,2020-07-10T18:49:22Z,2020-07-11T01:29:14Z,MERGED,True,65,95,1,https://github.com/samsinsane,Improved ability to override XCode generator,1,[],https://github.com/premake/premake-core/pull/1481,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1481,"What does this PR do?
Makes it much easier to override various parts of the XCode generator without copying half of the xcode_common.lua file.
How does this PR change Premake's behavior?
No breaking changes. No existing behaviour will change.
Anything else we should know?
Removed an unused function.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Makes it much easier to override various parts of the XCode generator without copying half of the xcode_common.lua file.
How does this PR change Premake's behavior?
No breaking changes. No existing behaviour will change.
Anything else we should know?
Removed an unused function.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1482,2020-07-10T14:05:16Z,2020-07-10T18:51:34Z,2020-07-11T01:29:18Z,MERGED,True,3,0,1,https://github.com/samsinsane,Disable redirect test until HTTP endpoint is fixed,1,[],https://github.com/premake/premake-core/pull/1482,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1482,"What does this PR do?
Disables a test due to external site not working as expected.
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Disables a test due to external site not working as expected.
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1483,2020-07-10T14:54:07Z,2020-07-10T18:54:38Z,2020-07-11T01:29:23Z,MERGED,True,124,0,3,https://github.com/samsinsane,Add file details to Windows builds including version number,1,[],https://github.com/premake/premake-core/pull/1483,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1483,"What does this PR do?
Adds file details to the Windows builds. Resolves #1466
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
Pre-emptively added the icon section just in case it is ever requested - an icon seems unnecessary but it might be requested.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds file details to the Windows builds. Resolves #1466
How does this PR change Premake's behavior?
N/A.
Anything else we should know?
Pre-emptively added the icon section just in case it is ever requested - an icon seems unnecessary but it might be requested.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{'THUMBS_UP': ['https://github.com/crazydef']}
premake/premake-core,https://github.com/premake/premake-core,1484,2020-07-10T16:04:49Z,2020-07-10T18:56:26Z,2020-07-11T01:29:27Z,MERGED,True,17,2,2,https://github.com/samsinsane,Fixed issue with os.matchfiles and symlinks,1,[],https://github.com/premake/premake-core/pull/1484,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1484,"What does this PR do?
os.matchfiles works with symlinks. Fixes #1459
How does this PR change Premake's behavior?
Symlinks will be followed correctly, those relying on this not happening will have to exclude the symlinks.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
os.matchfiles works with symlinks. Fixes #1459
How does this PR change Premake's behavior?
Symlinks will be followed correctly, those relying on this not happening will have to exclude the symlinks.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1485,2020-07-10T16:32:21Z,2020-07-10T19:02:09Z,2020-07-11T01:29:36Z,MERGED,True,39,0,1,https://github.com/samsinsane,Added Windows implementation to os.touchfile to avoid issues with truncating the file,1,[],https://github.com/premake/premake-core/pull/1485,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1485,"What does this PR do?
Added Windows implementation to os.touchfile to avoid issues with truncating the file. Fixes #1399
How does this PR change Premake's behavior?
The Windows implementation of os.touchfile now just modifies the modified date instead of the file contents.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Added Windows implementation to os.touchfile to avoid issues with truncating the file. Fixes #1399
How does this PR change Premake's behavior?
The Windows implementation of os.touchfile now just modifies the modified date instead of the file contents.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1491,2020-07-30T21:29:42Z,2020-08-05T23:14:57Z,2020-08-05T23:14:57Z,CLOSED,False,121,20,3,https://github.com/sp-rafael-lecina,Use single value for settings on xcode,6,[],https://github.com/premake/premake-core/pull/1491,https://github.com/sp-rafael-lecina,1,https://github.com/premake/premake-core/pull/1491,"What does this PR do?
This PR includes the changes of #1477 . I don't know how I could split those PRs to include tests for both of them
This pull request enables single setting formatting fox xcode projects.
If you use cocoapods and it finds SWIFT_VERSION on a xcode setting formatted as a list cocoapods is not able to read the swift version and fails
How does this PR change Premake's behavior?
It changes how xcode settings are formatted on the pbxproj file. Before this they were formatted as single element lists
SWIFT_VERSION = (
                    4.0,
                );

After this it will be generated as
SWIFT_VERSION = 4.0;

Are there any breaking changes? Will any existing behavior change?
I checked on our own projects and this syntax works on Xcode
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR includes the changes of #1477 . I don't know how I could split those PRs to include tests for both of them
This pull request enables single setting formatting fox xcode projects.
If you use cocoapods and it finds SWIFT_VERSION on a xcode setting formatted as a list cocoapods is not able to read the swift version and fails
How does this PR change Premake's behavior?
It changes how xcode settings are formatted on the pbxproj file. Before this they were formatted as single element lists
SWIFT_VERSION = (
                    4.0,
                );

After this it will be generated as
SWIFT_VERSION = 4.0;

Are there any breaking changes? Will any existing behavior change?
I checked on our own projects and this syntax works on Xcode
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1491,2020-07-30T21:29:42Z,2020-08-05T23:14:57Z,2020-08-05T23:14:57Z,CLOSED,False,121,20,3,https://github.com/sp-rafael-lecina,Use single value for settings on xcode,6,[],https://github.com/premake/premake-core/pull/1491,https://github.com/sp-rafael-lecina,2,https://github.com/premake/premake-core/pull/1491#issuecomment-669044673,"What does this PR do?
This PR includes the changes of #1477 . I don't know how I could split those PRs to include tests for both of them
This pull request enables single setting formatting fox xcode projects.
If you use cocoapods and it finds SWIFT_VERSION on a xcode setting formatted as a list cocoapods is not able to read the swift version and fails
How does this PR change Premake's behavior?
It changes how xcode settings are formatted on the pbxproj file. Before this they were formatted as single element lists
SWIFT_VERSION = (
                    4.0,
                );

After this it will be generated as
SWIFT_VERSION = 4.0;

Are there any breaking changes? Will any existing behavior change?
I checked on our own projects and this syntax works on Xcode
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'm not quite familiar with the codebase and the current hacks, but when you create an Xcode project and use a single value on a setting Xcode creates it using this format. This is a block a project created from Xcodeproject where I just added -ffast-math to OTHER_CFLAGS

This means that the current projects created using premake for Xcode are abusing arguments lists for single value arguments
What would be a proper solution if you consider this a wrong approach? This PR was mainly uncomment a couple of lines, so somebody at some point already considererd this as an option
We found we needed this SWIFT_VERSION to not be on a list for cocoapods to be able to parse the version when upgrading to the latest Facebook SDK on an quite complex objective-C. This is something I think will be more common in the near future and a problem for people using cocoapods",True,{}
premake/premake-core,https://github.com/premake/premake-core,1491,2020-07-30T21:29:42Z,2020-08-05T23:14:57Z,2020-08-05T23:14:57Z,CLOSED,False,121,20,3,https://github.com/sp-rafael-lecina,Use single value for settings on xcode,6,[],https://github.com/premake/premake-core/pull/1491,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1491#issuecomment-669094007,"What does this PR do?
This PR includes the changes of #1477 . I don't know how I could split those PRs to include tests for both of them
This pull request enables single setting formatting fox xcode projects.
If you use cocoapods and it finds SWIFT_VERSION on a xcode setting formatted as a list cocoapods is not able to read the swift version and fails
How does this PR change Premake's behavior?
It changes how xcode settings are formatted on the pbxproj file. Before this they were formatted as single element lists
SWIFT_VERSION = (
                    4.0,
                );

After this it will be generated as
SWIFT_VERSION = 4.0;

Are there any breaking changes? Will any existing behavior change?
I checked on our own projects and this syntax works on Xcode
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I can't really put it any simpler than: Using just your changes in #1477, SWIFT_VERSION doesn't come out as a list for me.
It would have been a list because you started off using xcodebuildsettings and that API forces all the values to be lists. The correct solution is exactly what you did, add a proper API to set this setting and avoid using xcodebuildsettings.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1491,2020-07-30T21:29:42Z,2020-08-05T23:14:57Z,2020-08-05T23:14:57Z,CLOSED,False,121,20,3,https://github.com/sp-rafael-lecina,Use single value for settings on xcode,6,[],https://github.com/premake/premake-core/pull/1491,https://github.com/sp-rafael-lecina,4,https://github.com/premake/premake-core/pull/1491#issuecomment-669592233,"What does this PR do?
This PR includes the changes of #1477 . I don't know how I could split those PRs to include tests for both of them
This pull request enables single setting formatting fox xcode projects.
If you use cocoapods and it finds SWIFT_VERSION on a xcode setting formatted as a list cocoapods is not able to read the swift version and fails
How does this PR change Premake's behavior?
It changes how xcode settings are formatted on the pbxproj file. Before this they were formatted as single element lists
SWIFT_VERSION = (
                    4.0,
                );

After this it will be generated as
SWIFT_VERSION = 4.0;

Are there any breaking changes? Will any existing behavior change?
I checked on our own projects and this syntax works on Xcode
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@samsinsane You are completely right. I added the tests to the other PR as they are here and they pass
I started by adding this SWIFT_VERSION to xcodebuildsettings, made it work by adding the changes of this PR and then tried to add the swiftversion api because I thought it was cleaner but didn't notice this changes were not needed anymore. I should have added the tests from the beginning",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1499,2020-08-19T17:32:59Z,2020-08-21T06:19:49Z,2020-08-21T15:23:13Z,MERGED,True,35,9,1,https://github.com/Timic3,GitHub Actions: Artifacts,2,[],https://github.com/premake/premake-core/pull/1499,https://github.com/Timic3,1,https://github.com/premake/premake-core/pull/1499,"What does this PR do?
This pull request uploads binary files after pipeline is finished and can be downloaded afterwards.
How does this PR change Premake's behavior?
No.
Anything else we should know?
This puts all files from bin/[release,debug] folder to a Zip file and uploads it to Actions server.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This pull request uploads binary files after pipeline is finished and can be downloaded afterwards.
How does this PR change Premake's behavior?
No.
Anything else we should know?
This puts all files from bin/[release,debug] folder to a Zip file and uploads it to Actions server.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1499,2020-08-19T17:32:59Z,2020-08-21T06:19:49Z,2020-08-21T15:23:13Z,MERGED,True,35,9,1,https://github.com/Timic3,GitHub Actions: Artifacts,2,[],https://github.com/premake/premake-core/pull/1499,https://github.com/Timic3,2,https://github.com/premake/premake-core/pull/1499#issuecomment-677752240,"What does this PR do?
This pull request uploads binary files after pipeline is finished and can be downloaded afterwards.
How does this PR change Premake's behavior?
No.
Anything else we should know?
This puts all files from bin/[release,debug] folder to a Zip file and uploads it to Actions server.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Thanks for the review, regarding the debug builds, I totally agree, they are also rather big (twice the size), so it would be best to remove them (they can of course be added back, if there is a need for them). With that said, I guess there is no need for matrix.config in the artifact names then? Or should I leave them there?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1499,2020-08-19T17:32:59Z,2020-08-21T06:19:49Z,2020-08-21T15:23:13Z,MERGED,True,35,9,1,https://github.com/Timic3,GitHub Actions: Artifacts,2,[],https://github.com/premake/premake-core/pull/1499,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1499#issuecomment-677760556,"What does this PR do?
This pull request uploads binary files after pipeline is finished and can be downloaded afterwards.
How does this PR change Premake's behavior?
No.
Anything else we should know?
This puts all files from bin/[release,debug] folder to a Zip file and uploads it to Actions server.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","That's a good question, I hadn't really thought about it - I don't think it really matters either way, I'm happy with whatever you decide.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1499,2020-08-19T17:32:59Z,2020-08-21T06:19:49Z,2020-08-21T15:23:13Z,MERGED,True,35,9,1,https://github.com/Timic3,GitHub Actions: Artifacts,2,[],https://github.com/premake/premake-core/pull/1499,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1499#issuecomment-678063698,"What does this PR do?
This pull request uploads binary files after pipeline is finished and can be downloaded afterwards.
How does this PR change Premake's behavior?
No.
Anything else we should know?
This puts all files from bin/[release,debug] folder to a Zip file and uploads it to Actions server.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",Thanks for this!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1500,2020-08-19T22:16:24Z,2020-08-20T08:50:54Z,2020-08-20T21:56:31Z,CLOSED,False,169,0,6,https://github.com/Jarod42,Add sample project for integration tests,1,[],https://github.com/premake/premake-core/pull/1500,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1500,"What does this PR do?
Add first integration tests, for gmake and codelite currently, for ""basic"" features (includedirs, sysincludedirs).
It spots issue for sysincludedirs with codelite. (but primary goal here is to add integration test)
How does this PR change Premake's behavior?
No changes for premake executable
Anything else we should know?
I would like to know several thing before to go further:


How do you want to organize integration tests and sample projects
Which directories, ci-scripts, ...
For sample projects, I would say the ""minimum"" number needed to test the features.


How to handle ""known bugs"", not (yet) supported feature (in generator).
People updating sample test don't necessary know how to fix each generator.


How to handle target action limitation (some IDE might not support some features (so generators cannot improved/fixed))
I think premake/generator should warn about unsupported feature.
filter by feature might help to write ""portable"" testing projects.


Did you check all the boxes?
No.

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Add first integration tests, for gmake and codelite currently, for ""basic"" features (includedirs, sysincludedirs).
It spots issue for sysincludedirs with codelite. (but primary goal here is to add integration test)
How does this PR change Premake's behavior?
No changes for premake executable
Anything else we should know?
I would like to know several thing before to go further:


How do you want to organize integration tests and sample projects
Which directories, ci-scripts, ...
For sample projects, I would say the ""minimum"" number needed to test the features.


How to handle ""known bugs"", not (yet) supported feature (in generator).
People updating sample test don't necessary know how to fix each generator.


How to handle target action limitation (some IDE might not support some features (so generators cannot improved/fixed))
I think premake/generator should warn about unsupported feature.
filter by feature might help to write ""portable"" testing projects.


Did you check all the boxes?
No.

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1500,2020-08-19T22:16:24Z,2020-08-20T08:50:54Z,2020-08-20T21:56:31Z,CLOSED,False,169,0,6,https://github.com/Jarod42,Add sample project for integration tests,1,[],https://github.com/premake/premake-core/pull/1500,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1500#issuecomment-677467774,"What does this PR do?
Add first integration tests, for gmake and codelite currently, for ""basic"" features (includedirs, sysincludedirs).
It spots issue for sysincludedirs with codelite. (but primary goal here is to add integration test)
How does this PR change Premake's behavior?
No changes for premake executable
Anything else we should know?
I would like to know several thing before to go further:


How do you want to organize integration tests and sample projects
Which directories, ci-scripts, ...
For sample projects, I would say the ""minimum"" number needed to test the features.


How to handle ""known bugs"", not (yet) supported feature (in generator).
People updating sample test don't necessary know how to fix each generator.


How to handle target action limitation (some IDE might not support some features (so generators cannot improved/fixed))
I think premake/generator should warn about unsupported feature.
filter by feature might help to write ""portable"" testing projects.


Did you check all the boxes?
No.

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","I'm going to close this, if you want to discuss integration tests please open an issue instead - PRs just aren't suited to long form discussions, especially with people reviewing the changes throughout the discussion. Regarding sysincludedirs being wrong for CodeLite, a unit test would suffice, there currently isn't one, which is probably why nobody noticed or cared that it was broken.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1500,2020-08-19T22:16:24Z,2020-08-20T08:50:54Z,2020-08-20T21:56:31Z,CLOSED,False,169,0,6,https://github.com/Jarod42,Add sample project for integration tests,1,[],https://github.com/premake/premake-core/pull/1500,https://github.com/Jarod42,3,https://github.com/premake/premake-core/pull/1500#issuecomment-677926994,"What does this PR do?
Add first integration tests, for gmake and codelite currently, for ""basic"" features (includedirs, sysincludedirs).
It spots issue for sysincludedirs with codelite. (but primary goal here is to add integration test)
How does this PR change Premake's behavior?
No changes for premake executable
Anything else we should know?
I would like to know several thing before to go further:


How do you want to organize integration tests and sample projects
Which directories, ci-scripts, ...
For sample projects, I would say the ""minimum"" number needed to test the features.


How to handle ""known bugs"", not (yet) supported feature (in generator).
People updating sample test don't necessary know how to fix each generator.


How to handle target action limitation (some IDE might not support some features (so generators cannot improved/fixed))
I think premake/generator should warn about unsupported feature.
filter by feature might help to write ""portable"" testing projects.


Did you check all the boxes?
No.

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Ok, I hesitate at first between Issue and PR, I take the wrong decision :/
#1502 asked.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1501,2020-08-20T17:22:04Z,2020-08-21T10:59:45Z,2020-08-21T10:59:45Z,CLOSED,False,55,42,4,https://github.com/continue98,Auto detect C++ dialect (gcc && msvc),3,[],https://github.com/premake/premake-core/pull/1501,https://github.com/continue98,1,https://github.com/premake/premake-core/pull/1501,"What does this PR do?
Added the ability to easily change the version of standards for C++ (so far only for GCC and MSVC)
How does this PR change Premake's behavior?
No
Anything else we should know?
It is now possible to use C++ latest with GCC. In addition, it is now easier to update the versions of standards (now there is no duplicate code, it is replaced by a function)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Added the ability to easily change the version of standards for C++ (so far only for GCC and MSVC)
How does this PR change Premake's behavior?
No
Anything else we should know?
It is now possible to use C++ latest with GCC. In addition, it is now easier to update the versions of standards (now there is no duplicate code, it is replaced by a function)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1501,2020-08-20T17:22:04Z,2020-08-21T10:59:45Z,2020-08-21T10:59:45Z,CLOSED,False,55,42,4,https://github.com/continue98,Auto detect C++ dialect (gcc && msvc),3,[],https://github.com/premake/premake-core/pull/1501,https://github.com/continue98,2,https://github.com/premake/premake-core/pull/1501#issuecomment-678139242,"What does this PR do?
Added the ability to easily change the version of standards for C++ (so far only for GCC and MSVC)
How does this PR change Premake's behavior?
No
Anything else we should know?
It is now possible to use C++ latest with GCC. In addition, it is now easier to update the versions of standards (now there is no duplicate code, it is replaced by a function)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","There's so much unnecessary machinery in this that could be resolved by just using a single table, and putting C++Latest right after C++20.

How? Us need hash table, or do you further suggest ""hardcoding"" latest without autodetection?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1501,2020-08-20T17:22:04Z,2020-08-21T10:59:45Z,2020-08-21T10:59:45Z,CLOSED,False,55,42,4,https://github.com/continue98,Auto detect C++ dialect (gcc && msvc),3,[],https://github.com/premake/premake-core/pull/1501,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1501#issuecomment-678211839,"What does this PR do?
Added the ability to easily change the version of standards for C++ (so far only for GCC and MSVC)
How does this PR change Premake's behavior?
No
Anything else we should know?
It is now possible to use C++ latest with GCC. In addition, it is now easier to update the versions of standards (now there is no duplicate code, it is replaced by a function)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","do you further suggest ""hardcoding"" latest without autodetection?

Yeah, autodetection for something that changes once every three years is kind of unnecessary since someone has to put the new values in anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1501,2020-08-20T17:22:04Z,2020-08-21T10:59:45Z,2020-08-21T10:59:45Z,CLOSED,False,55,42,4,https://github.com/continue98,Auto detect C++ dialect (gcc && msvc),3,[],https://github.com/premake/premake-core/pull/1501,https://github.com/continue98,4,https://github.com/premake/premake-core/pull/1501#issuecomment-678233196,"What does this PR do?
Added the ability to easily change the version of standards for C++ (so far only for GCC and MSVC)
How does this PR change Premake's behavior?
No
Anything else we should know?
It is now possible to use C++ latest with GCC. In addition, it is now easier to update the versions of standards (now there is no duplicate code, it is replaced by a function)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Ok, i am close this PR",True,{}
premake/premake-core,https://github.com/premake/premake-core,1503,2020-08-21T18:44:07Z,2020-08-22T03:54:48Z,2020-08-22T03:54:48Z,MERGED,True,10,2,4,https://github.com/continue98,Update cxx standard;,1,[],https://github.com/premake/premake-core/pull/1503,https://github.com/continue98,1,https://github.com/premake/premake-core/pull/1503,"What does this PR do?
Update CXX standard. (latest). Add C++ latest for GCC
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
No
Add any other context about your changes here.



Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Update CXX standard. (latest). Add C++ latest for GCC
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
No
Add any other context about your changes here.



Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1505,2020-08-29T16:35:43Z,2020-08-30T12:03:25Z,2020-08-30T12:29:07Z,MERGED,True,39,3,2,https://github.com/Jarod42,Fix sysincludedirs for codelite.,2,[],https://github.com/premake/premake-core/pull/1505,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1505,"What does this PR do?
Implement sysincludedirs for codelite.
How does this PR change Premake's behavior?
No changes in Premake core. only in codelite generator.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Implement sysincludedirs for codelite.
How does this PR change Premake's behavior?
No changes in Premake core. only in codelite generator.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1506,2020-08-30T08:03:25Z,2020-08-31T12:27:05Z,2020-08-31T17:26:49Z,MERGED,True,2,2,2,https://github.com/Jarod42,Fix quote escaping in Codelite.,1,[],https://github.com/premake/premake-core/pull/1506,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1506,"What does this PR do?
Fix quote escaping in Codelite.
-> fix define with quote
-> fix SharedLib (at least on windows).
improve/fix #1275
How does this PR change Premake's behavior?
No Core changes, only codelite generator
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Fix quote escaping in Codelite.
-> fix define with quote
-> fix SharedLib (at least on windows).
improve/fix #1275
How does this PR change Premake's behavior?
No Core changes, only codelite generator
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1509,2020-09-01T00:43:54Z,2020-09-01T12:13:49Z,2020-09-01T14:59:47Z,CLOSED,False,16,10,1,https://github.com/marcelo-lara,FIX #1508 move help and version to a new function,1,[],https://github.com/premake/premake-core/pull/1509,https://github.com/marcelo-lara,1,https://github.com/premake/premake-core/pull/1509,"What does this PR do?
Solves the issue #1508
--help and --version are not shown if there is a premake5.lua file with errors
How does this PR change Premake's behavior?
On help or version, display message and then exit
Anything else we should know?
Please review it and don't hesitate to contact me.
Thank you!","What does this PR do?
Solves the issue #1508
--help and --version are not shown if there is a premake5.lua file with errors
How does this PR change Premake's behavior?
On help or version, display message and then exit
Anything else we should know?
Please review it and don't hesitate to contact me.
Thank you!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1509,2020-09-01T00:43:54Z,2020-09-01T12:13:49Z,2020-09-01T14:59:47Z,CLOSED,False,16,10,1,https://github.com/marcelo-lara,FIX #1508 move help and version to a new function,1,[],https://github.com/premake/premake-core/pull/1509,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1509#issuecomment-684807936,"What does this PR do?
Solves the issue #1508
--help and --version are not shown if there is a premake5.lua file with errors
How does this PR change Premake's behavior?
On help or version, display message and then exit
Anything else we should know?
Please review it and don't hesitate to contact me.
Thank you!","Thanks for having a look, but no, it can't work this way. Premake allows project scripts to add new actions and options, and to override other calls. That information needs to be taken into account when displaying help and version text, which means the project needs to be run before that text is built.
Personally, I think broken scripts should throw an error and stop. But if you want to do something different, see Lua's pcall() and xpcall() function as starting points for handling the errors instead.
Marking this as closed; but feel free to continue the conversation if you have more questions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1509,2020-09-01T00:43:54Z,2020-09-01T12:13:49Z,2020-09-01T14:59:47Z,CLOSED,False,16,10,1,https://github.com/marcelo-lara,FIX #1508 move help and version to a new function,1,[],https://github.com/premake/premake-core/pull/1509,https://github.com/marcelo-lara,3,https://github.com/premake/premake-core/pull/1509#issuecomment-684918401,"What does this PR do?
Solves the issue #1508
--help and --version are not shown if there is a premake5.lua file with errors
How does this PR change Premake's behavior?
On help or version, display message and then exit
Anything else we should know?
Please review it and don't hesitate to contact me.
Thank you!","The scenario that leads me to this change: I have a repo that calls a submodule with premake scripts, so I need to use premake5 --scripts flag but (at the moment) I don't remember the flag; That's why I try --help but, because premake doesn't found the script just throws an error...
I get your point, so when I got a time will try the pcall approach and PR if I get it done
Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1515,2020-09-11T02:41:13Z,2020-09-23T22:36:39Z,2020-12-18T00:29:27Z,MERGED,True,75,2,3,https://github.com/cos-public,ConformanceMode flag implemented for >= vs2017,2,[],https://github.com/premake/premake-core/pull/1515,https://github.com/cos-public,1,https://github.com/premake/premake-core/pull/1515,"What does this PR do?
Provides support for the ConformanceMode flag for Visual Studio projects. Closes #1329.
How does this PR change Premake's behavior?
Supports additional configuration flag.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Provides support for the ConformanceMode flag for Visual Studio projects. Closes #1329.
How does this PR change Premake's behavior?
Supports additional configuration flag.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1515,2020-09-11T02:41:13Z,2020-09-23T22:36:39Z,2020-12-18T00:29:27Z,MERGED,True,75,2,3,https://github.com/cos-public,ConformanceMode flag implemented for >= vs2017,2,[],https://github.com/premake/premake-core/pull/1515,https://github.com/cos-public,2,https://github.com/premake/premake-core/pull/1515#issuecomment-697335778,"What does this PR do?
Provides support for the ConformanceMode flag for Visual Studio projects. Closes #1329.
How does this PR change Premake's behavior?
Supports additional configuration flag.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I've rebased my branch, so the diff looks correct now. One of the tests is failing bacause of HTTP 502 error, which is irrelevant probably.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1519,2020-09-13T18:12:24Z,2020-09-14T08:01:02Z,2020-09-14T08:01:02Z,MERGED,True,13,0,2,https://github.com/kellygravelyn,Add Metal shader files as source code,1,[],https://github.com/premake/premake-core/pull/1519,https://github.com/kellygravelyn,1,https://github.com/premake/premake-core/pull/1519,"What does this PR do?
Adds support for .metal files as Metal shader source code in Xcode.
How does this PR change Premake's behavior?
Xcode projects containing .metal files will compile those files into a Metal library.
Anything else we should know?
Xcode generally puts these in the Resources category so that's what I've done, but I don't know if that's strictly necessary.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds support for .metal files as Metal shader source code in Xcode.
How does this PR change Premake's behavior?
Xcode projects containing .metal files will compile those files into a Metal library.
Anything else we should know?
Xcode generally puts these in the Resources category so that's what I've done, but I don't know if that's strictly necessary.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1522,2020-09-21T22:20:37Z,2020-09-23T22:31:02Z,2020-09-23T22:49:50Z,MERGED,True,44,1,2,https://github.com/nickclark2016,Fixed external library linking for Clang in VS2019+,1,[],https://github.com/premake/premake-core/pull/1522,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1522,"What does this PR do?
Fixes problems referenced in #1520 and #1507 where the clang toolset produces a bad external library path when used with VS2019.  Current behavior deferred the library generation to gcc's implementation, such that external libraries received the string ""-lName"" (e.g. ""-lSDL"") instead of ""name.lib"" (e.g. ""SDL.lib"").
How does this PR change Premake's behavior?
Changes the clang tool's getlinks method to defer to MSC when the action is VS2019 or newer.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes problems referenced in #1520 and #1507 where the clang toolset produces a bad external library path when used with VS2019.  Current behavior deferred the library generation to gcc's implementation, such that external libraries received the string ""-lName"" (e.g. ""-lSDL"") instead of ""name.lib"" (e.g. ""SDL.lib"").
How does this PR change Premake's behavior?
Changes the clang tool's getlinks method to defer to MSC when the action is VS2019 or newer.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1522,2020-09-21T22:20:37Z,2020-09-23T22:31:02Z,2020-09-23T22:49:50Z,MERGED,True,44,1,2,https://github.com/nickclark2016,Fixed external library linking for Clang in VS2019+,1,[],https://github.com/premake/premake-core/pull/1522,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1522#issuecomment-697024290,"What does this PR do?
Fixes problems referenced in #1520 and #1507 where the clang toolset produces a bad external library path when used with VS2019.  Current behavior deferred the library generation to gcc's implementation, such that external libraries received the string ""-lName"" (e.g. ""-lSDL"") instead of ""name.lib"" (e.g. ""SDL.lib"").
How does this PR change Premake's behavior?
Changes the clang tool's getlinks method to defer to MSC when the action is VS2019 or newer.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Not sure why the test is failing for macosx release on the response code test, especially since what I did shouldn't have affected that",True,{}
premake/premake-core,https://github.com/premake/premake-core,1522,2020-09-21T22:20:37Z,2020-09-23T22:31:02Z,2020-09-23T22:49:50Z,MERGED,True,44,1,2,https://github.com/nickclark2016,Fixed external library linking for Clang in VS2019+,1,[],https://github.com/premake/premake-core/pull/1522,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1522#issuecomment-698004775,"What does this PR do?
Fixes problems referenced in #1520 and #1507 where the clang toolset produces a bad external library path when used with VS2019.  Current behavior deferred the library generation to gcc's implementation, such that external libraries received the string ""-lName"" (e.g. ""-lSDL"") instead of ""name.lib"" (e.g. ""SDL.lib"").
How does this PR change Premake's behavior?
Changes the clang tool's getlinks method to defer to MSC when the action is VS2019 or newer.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Huh, wonder what the issue with the last run was.  Glad to see the release macosx build is working now, though.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1522,2020-09-21T22:20:37Z,2020-09-23T22:31:02Z,2020-09-23T22:49:50Z,MERGED,True,44,1,2,https://github.com/nickclark2016,Fixed external library linking for Clang in VS2019+,1,[],https://github.com/premake/premake-core/pull/1522,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1522#issuecomment-698005569,"What does this PR do?
Fixes problems referenced in #1520 and #1507 where the clang toolset produces a bad external library path when used with VS2019.  Current behavior deferred the library generation to gcc's implementation, such that external libraries received the string ""-lName"" (e.g. ""-lSDL"") instead of ""name.lib"" (e.g. ""SDL.lib"").
How does this PR change Premake's behavior?
Changes the clang tool's getlinks method to defer to MSC when the action is VS2019 or newer.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The HTTP unit tests connect to an external service, it's likely it was just a weird issue within the Azure network - I get this a lot at work with Azure Pipelines.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1522,2020-09-21T22:20:37Z,2020-09-23T22:31:02Z,2020-09-23T22:49:50Z,MERGED,True,44,1,2,https://github.com/nickclark2016,Fixed external library linking for Clang in VS2019+,1,[],https://github.com/premake/premake-core/pull/1522,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1522#issuecomment-698011494,"What does this PR do?
Fixes problems referenced in #1520 and #1507 where the clang toolset produces a bad external library path when used with VS2019.  Current behavior deferred the library generation to gcc's implementation, such that external libraries received the string ""-lName"" (e.g. ""-lSDL"") instead of ""name.lib"" (e.g. ""SDL.lib"").
How does this PR change Premake's behavior?
Changes the clang tool's getlinks method to defer to MSC when the action is VS2019 or newer.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The HTTP unit tests connect to an external service, it's likely it was just a weird issue within the Azure network - I get this a lot at work with Azure Pipelines.

Makes sense. Thanks for closing this out!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1523,2020-09-26T02:26:02Z,2020-09-26T23:21:51Z,2020-09-26T23:21:51Z,MERGED,True,218,2,2,https://github.com/nickclark2016,Added C++1z and C++2a dialect options for XCode,1,[],https://github.com/premake/premake-core/pull/1523,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1523,"What does this PR do?
Closes #1516 by adding all supported C++ dialects to XCode.
How does this PR change Premake's behavior?
No breaking changes, pre-existing functionality does not change.  Only adds functionality described above.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Closes #1516 by adding all supported C++ dialects to XCode.
How does this PR change Premake's behavior?
No breaking changes, pre-existing functionality does not change.  Only adds functionality described above.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/kellygravelyn,1,https://github.com/premake/premake-core/pull/1524,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/thomashope,2,https://github.com/premake/premake-core/pull/1524#issuecomment-701704777,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Hi, nice work on the PR.
Read through the changes, the first commit looks good to me. Wasn't sure about the second one so I recreated your changes on my end and found a few issues in the process:


Embedded items should have have an additional entry in the PBXBuildFile section, even if they are not code signed.


Frameworks should have RemoveHeadersOnCopy attribute set like so 		0DAEAB24FB163DD698103164 /* SDL2.framework in Embed Frameworks */ = {isa = PBXBuildFile; fileRef = 7D41A17F89CC53F104B11FBF /* SDL2.framework */; settings = {ATTRIBUTES = (RemoveHeadersOnCopy, ); }; };. This attribute seems to do pretty much as described, if you look inside framework copied into the built .app you will see the Headers folder has been removed.


Pretty sure we need to add LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/../Frameworks""; so that the executable finds and uses the correct framework placed inside the app bundle. I am guessing what happened on your end was the files appeared to be copied to the correct location but the executable selected you system installed libraries? You should be able to check that by moving/renaming your system libraries and see if your app crashes.


I have done all this testing using .frameworks because that's what I need it for. You can see that reflected in my code where it says 'Embed Frameworks' wheras yours says 'Embed Libraries'. Would be interested to know what xcode generates when you mix the two and if there are any additional cases to handle.
Are you able to you share your project folder structure / premake5.lua using .dylibs so I can test it out on my end?
Here's the link to my commit sans tests if you want to take a look. I went for having separate xcodeembedwithoutsigning and xcodeembedandsign just to see how it would pan out.
Bearing in mind this is all stuff i've been figuring out from my own experimentation/looking at your code/and fiddling with the xcode project, so I may be wrong!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/kellygravelyn,3,https://github.com/premake/premake-core/pull/1524#issuecomment-701779077,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Hey @thomashope. Thanks for taking a peek.

Oh yes good catch. I'll fix that up. I didn't have a use case for not signing so I didn't catch that it was missing.
That's a good point and seems reasonable. I don't use frameworks much so I forget about the embedded headers. IIRC Xcode lets you specify whether or not to remove headers but it seems reasonable to default to doing so and someone can come patch in a way to disable that if there's some reason they want to bloat their app bundle with a bundle of header files.
I don't think that should be done automatically. Sometimes libraries will already be built with that path into them, but for others I think the project should specify it themselves using xcodebuildsettings { [""LD_RUNPATH_SEARCH_PATHS""] = ""@executable_path/../Frameworks"" }.

I don't think there are any concerns with mixing the two. Xcode just names it based on what you add first, I believe. They're all linked and copied to the same place in the end.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/kellygravelyn,4,https://github.com/premake/premake-core/pull/1524#issuecomment-701806770,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Ok I've addressed the first two points (did a rebase and kept it at two commits). You can see the test cases here: https://github.com/premake/premake-core/pull/1524/files#diff-06a55edcdb18495d6fe7e42f832b512dR122-R153,True,{'ROCKET': ['https://github.com/thomashope']}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/thomashope,5,https://github.com/premake/premake-core/pull/1524#issuecomment-702447455,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","So I built your code and ran it on my project, and it works!
For reference here is what I had to do to my premake5.lua to get local frameworks correctly embedded into my app:
links {
    ""third_party/sdl2/macos/SDL2.framework"",
}

sysincludedirs {
    ""third_party/sdl2/macos/SDL2.framework/Headers"",
}

frameworkdirs {
    ""third_party/sdl2/macos/"",
}

xcodeembedlibraries {
    [""SDL2.framework""] = ""embed-and-sign""
}

xcodebuildsettings {
    [""LD_RUNPATH_SEARCH_PATHS""] = ""$(inherited) @executable_path/../Frameworks"",
}
It's a fair bit of config for one framework and I think the user experience here can be improved, but this PR is a step in the right direction so it's a üëç from me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/kellygravelyn,6,https://github.com/premake/premake-core/pull/1524#issuecomment-703131125,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",That‚Äôs great to hear. I realized I need to do some more testing for embedding projects as well as loose file. Once that‚Äôs done I think the big question will just be about the interface to make sure it seems reasonable.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/kellygravelyn,7,https://github.com/premake/premake-core/pull/1524#issuecomment-703144959,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I've fixed things up so project references can also be marked to embed or embed & sign. Instead of using the file name it's the name of the project. This felt better since it matches with what users specify in links. I wrote some automated tests in the dependency test file but I also did a quick manual test and it worked in Xcode.
At this point things are functional for relative dylib/framework references as well as SharedLib project references. I'd be fine with this xcodeembedlibraries interface but I'm also happy to adjust it if someone has a more user-friendly idea of how we can expose these options.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/1524#issuecomment-820365782,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The not a fan of the table syntax for this one. I'm not a fan of the table syntax in general and use it only under duress, but this one really doesn't need it. I would much prefer that it use separate APIs instead.
links { ""SDL"" }
embed { ""SDL"" }
embedAndSign { ""SDL"" }",True,{}
premake/premake-core,https://github.com/premake/premake-core,1524,2020-09-26T02:50:54Z,2021-04-16T14:58:06Z,2021-04-16T14:58:07Z,CLOSED,False,354,13,5,https://github.com/kellygravelyn,Xcode embed libraries,2,[],https://github.com/premake/premake-core/pull/1524,https://github.com/kellygravelyn,9,https://github.com/premake/premake-core/pull/1524#issuecomment-821236969,"What does this PR do?
Provides a mechanism to specify dylibs and frameworks to use Xcode's ""Embed Libraries"" functionality to optionally or embed & sign libraries. Trying to address #1518.
How does this PR change Premake's behavior?

Xcode projects now support specifying .dylib extensions in links. These can be relative or absolute paths but the libraries end up getting treated like .frameworks. That is, they are added to the Frameworks build phase and show up in the Frameworks group rather than just being added as additional linker flags. This was a prerequisite for dylibs to get embedded.
A new xcodeembedlibraries command was added that allows a project to specify the list of libraries to embed in a map, mapping the name of the library (not the path) to a string of either ""embed"" or ""embed-and-sign"".

Anything else we should know?
While this functionally achieves the goals as far as I can tell, I'm not married to the implementation or interface so I'm open to suggestions there. The xcodeembedlibraries feels weird particularly because strings aren't great for this. I thought about just having the right hand side be true/false but that felt too opaque as to what it was doing. I also considered separate commands as discussed in #1518 but ultimately it felt nicer to have a single command since it's controlling a single list in Xcode.
I've written automated tests and verified this works on my own project (which embeds and signs a local dylib) but it probably needs more testing around the edges.
I left this as two commits so that it's easier to review the two changes described above. I'm happy to rebase/squash it later if desired for merging.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I deleted my fork at some point so to continue this PR I had to re-fork and make a new PR. I've applied the API changes requested in #1619. Going to close this one out.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1525,2020-09-29T12:29:42Z,2020-09-30T14:07:15Z,2020-10-01T15:02:15Z,MERGED,True,13,11,2,https://github.com/Jarod42,[Codelite] Only active (i.e. unique) configuration should be selected.,1,[],https://github.com/premake/premake-core/pull/1525,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1525,"What does this PR do?
Fix active configuration under codelite
How does this PR change Premake's behavior?
Only codelite generator is changed.
Anything else we should know?
To reproduce the issue:


create a project with 3 configurations in premake (Debug, Profile, Release)


generate for codelite

Here all 3 configurations are the active one :/
codelite handles the conflict by selecting the first active (so Debug in that case)



open codelite


switch to Release (so now Debug is not active, Release is (still) active, Profile is untouched (so active))

Profile is selected



Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Fix active configuration under codelite
How does this PR change Premake's behavior?
Only codelite generator is changed.
Anything else we should know?
To reproduce the issue:


create a project with 3 configurations in premake (Debug, Profile, Release)


generate for codelite

Here all 3 configurations are the active one :/
codelite handles the conflict by selecting the first active (so Debug in that case)



open codelite


switch to Release (so now Debug is not active, Release is (still) active, Profile is untouched (so active))

Profile is selected



Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1527,2020-10-02T05:59:12Z,2020-10-02T13:34:53Z,2020-10-02T13:34:54Z,MERGED,True,0,49,2,https://github.com/samsinsane,Removed old CI build files,1,[],https://github.com/premake/premake-core/pull/1527,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1527,"What does this PR do?
Removes old CI build files.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Removes old CI build files.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1528,2020-10-02T06:28:47Z,2020-10-02T13:38:17Z,2020-10-02T13:38:19Z,MERGED,True,17,0,1,https://github.com/samsinsane,Added COPYFILE and COPYDIR tokens,1,[],https://github.com/premake/premake-core/pull/1528,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1528,"What does this PR do?
Adds new tokens, {COPYFILE} and {COPYDIR} to resolve issues with XCOPY being unable to copy a file.
How does this PR change Premake's behavior?
No, this does not replace or remove the existing and broken {COPY} token.
Anything else we should know?
This most likely will need more work to be done for all the edge cases where COPY differs to cp and XCOPY differs to cp. See #1232 for examples of differences with folder copying.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds new tokens, {COPYFILE} and {COPYDIR} to resolve issues with XCOPY being unable to copy a file.
How does this PR change Premake's behavior?
No, this does not replace or remove the existing and broken {COPY} token.
Anything else we should know?
This most likely will need more work to be done for all the edge cases where COPY differs to cp and XCOPY differs to cp. See #1232 for examples of differences with folder copying.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1528,2020-10-02T06:28:47Z,2020-10-02T13:38:17Z,2020-10-02T13:38:19Z,MERGED,True,17,0,1,https://github.com/samsinsane,Added COPYFILE and COPYDIR tokens,1,[],https://github.com/premake/premake-core/pull/1528,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1528#issuecomment-702739167,"What does this PR do?
Adds new tokens, {COPYFILE} and {COPYDIR} to resolve issues with XCOPY being unable to copy a file.
How does this PR change Premake's behavior?
No, this does not replace or remove the existing and broken {COPY} token.
Anything else we should know?
This most likely will need more work to be done for all the edge cases where COPY differs to cp and XCOPY differs to cp. See #1232 for examples of differences with folder copying.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@starkos Perhaps, but might be worth having #1232 resolved before doing so?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1529,2020-10-02T06:42:47Z,2020-10-02T13:38:30Z,2020-10-02T13:38:31Z,MERGED,True,25,2,2,https://github.com/samsinsane,NMake projects can now specify buildoptions and cppdialect,1,[],https://github.com/premake/premake-core/pull/1529,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1529,"What does this PR do?
Adds support for buildoptions and cppdialect for VS projects of using kind ""Makefile"".
Fixes #1226
How does this PR change Premake's behavior?
Only as mentioned above, shouldn't have any breaking changes.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds support for buildoptions and cppdialect for VS projects of using kind ""Makefile"".
Fixes #1226
How does this PR change Premake's behavior?
Only as mentioned above, shouldn't have any breaking changes.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1530,2020-10-02T07:03:00Z,2020-10-02T13:38:45Z,2020-10-02T13:38:46Z,MERGED,True,0,14,1,https://github.com/samsinsane,Remove unused code in vs2010_vcxproj.lua,1,[],https://github.com/premake/premake-core/pull/1530,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1530,"What does this PR do?
Removes unused code.
How does this PR change Premake's behavior?
Should only cause issues for anyone calling internal functions.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Removes unused code.
How does this PR change Premake's behavior?
Should only cause issues for anyone calling internal functions.
Anything else we should know?
N/A.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1532,2020-10-07T13:34:39Z,2020-10-08T02:08:01Z,2021-03-16T15:47:40Z,MERGED,True,41,17,7,https://github.com/starkos,Disable network tests; add --test-all flag to enable,1,[],https://github.com/premake/premake-core/pull/1532,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1532,"What does this PR do?
Hides the automated tests that require calls out to the network behind a new --test-all flag. Allows for faster TDD iterations for new development, and tests can now be run even when offline.
How does this PR change Premake's behavior?
Tests which require network access (HTTP, NuGet) will no longer run by default.
Anything else we should know?
I added the --test-all flag to the GitHub CI action, so we'll still be running them there. Open to discussion on whether that's a good idea or not.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Hides the automated tests that require calls out to the network behind a new --test-all flag. Allows for faster TDD iterations for new development, and tests can now be run even when offline.
How does this PR change Premake's behavior?
Tests which require network access (HTTP, NuGet) will no longer run by default.
Anything else we should know?
I added the --test-all flag to the GitHub CI action, so we'll still be running them there. Open to discussion on whether that's a good idea or not.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1534,2020-10-12T15:22:27Z,2020-10-16T16:23:51Z,2021-06-24T14:57:35Z,MERGED,True,66,3,7,https://github.com/nickclark2016,Added Ability to Disable JMC in Visual Studio,1,[],https://github.com/premake/premake-core/pull/1534,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1534,"What does this PR do?
This PR resolves #1526.  It adds a ""jmc"" option to projects in order to disable just my code debugging.
Usage:
project ""SomeProject""
   justmycode ""Off""
How does this PR change Premake's behavior?
There is no change for preexisting projects, thus it is a non-breaking change.  By settings justmycode to ""Off"" in a VS2017 or newer project, it adds a flag to the project file to disable JMC.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This PR resolves #1526.  It adds a ""jmc"" option to projects in order to disable just my code debugging.
Usage:
project ""SomeProject""
   justmycode ""Off""
How does this PR change Premake's behavior?
There is no change for preexisting projects, thus it is a non-breaking change.  By settings justmycode to ""Off"" in a VS2017 or newer project, it adds a flag to the project file to disable JMC.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{'HEART': ['https://github.com/chrisant996']}
premake/premake-core,https://github.com/premake/premake-core,1534,2020-10-12T15:22:27Z,2020-10-16T16:23:51Z,2021-06-24T14:57:35Z,MERGED,True,66,3,7,https://github.com/nickclark2016,Added Ability to Disable JMC in Visual Studio,1,[],https://github.com/premake/premake-core/pull/1534,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1534#issuecomment-710735228,"What does this PR do?
This PR resolves #1526.  It adds a ""jmc"" option to projects in order to disable just my code debugging.
Usage:
project ""SomeProject""
   justmycode ""Off""
How does this PR change Premake's behavior?
There is no change for preexisting projects, thus it is a non-breaking change.  By settings justmycode to ""Off"" in a VS2017 or newer project, it adds a flag to the project file to disable JMC.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Just to follow up on this, can we get a justmycode page in the wiki?  And no problem! I try to contribute back changes that I've used in my own projects as well as help pick up some of the low hanging fruit.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1534,2020-10-12T15:22:27Z,2020-10-16T16:23:51Z,2021-06-24T14:57:35Z,MERGED,True,66,3,7,https://github.com/nickclark2016,Added Ability to Disable JMC in Visual Studio,1,[],https://github.com/premake/premake-core/pull/1534,https://github.com/smbradley,3,https://github.com/premake/premake-core/pull/1534#issuecomment-713060867,"What does this PR do?
This PR resolves #1526.  It adds a ""jmc"" option to projects in order to disable just my code debugging.
Usage:
project ""SomeProject""
   justmycode ""Off""
How does this PR change Premake's behavior?
There is no change for preexisting projects, thus it is a non-breaking change.  By settings justmycode to ""Off"" in a VS2017 or newer project, it adds a flag to the project file to disable JMC.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",Shouldn't this be a boolean? It seems kind of weird to be able to set it to Off but not to On,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1535,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1535#issuecomment-724704772,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What about hooking something early in the _premake_main call array, before the user script is run, do this sort of thing?
if _ACTION == 'vslatest' then
   _ACTION = findLatestVersion()
end
Untested, might not work, but would be pretty transparent if it did.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1535#issuecomment-796345493,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Wow I just noticed this is still out.  Sorry I've been out of it for a bit.  Let me re-acclimate and I'll try to get this cleaned up.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1535#issuecomment-796365914,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What about hooking something early in the _premake_main call array, before the user script is run, do this sort of thing?
if _ACTION == 'vslatest' then
   _ACTION = findLatestVersion()
end
Untested, might not work, but would be pretty transparent if it did.

So I tried something like this out by hooking into the base/action.lua initialization.  When I go to run the tests, it doesn't like this.  I think the vslatest action may be the best approach, if we still want to go with this.  I'll hold off on continuing until we figure out if we want to continue on the original path, addressing @samsinsane's comments.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1535#issuecomment-798773331,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","So I tried something like this out by hooking into the base/action.lua initialization. When I go to run the tests, it doesn't like this

That's not really enough info to provide any useful suggestions. What did you try? What issues did you experience? It looks like action.initialize() is early enough in the initialization order for this to work; is that where you did it? Did you also set _ACTION?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1535#issuecomment-820366614,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@nickclark2016 I'm cleaning up the PR list‚Äîare you still working on this one?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1535,2020-10-17T05:14:58Z,2021-04-18T02:45:24Z,2021-06-24T14:57:32Z,CLOSED,False,71,0,3,https://github.com/nickclark2016,Added vs-latest action,3,[],https://github.com/premake/premake-core/pull/1535,https://github.com/nickclark2016,7,https://github.com/premake/premake-core/pull/1535#issuecomment-821920991,"What does this PR do?
This adds a vs-latest action (closes #1479).  When vs-latest is invoked, it checks for the vswhere executable on this system and runs it to determine the latest VS version.  If no version is found, vswhere does not exist, or the operating system is not windows, it defaults to vs2019, the current version as of writing this PR.
How does this PR change Premake's behavior?
There are no breaking changes to the API.  This only adds functionality as described above.
Anything else we should know?
This makes passing the unit tests dependent upon the machine that the tests are run on.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@starkos Nah, I've been way too busy lately, so my PRs have fallen by the wayside.  I'll go ahead and close.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1538,2020-10-22T14:00:46Z,2021-04-19T14:58:37Z,2021-04-19T14:58:37Z,MERGED,True,89,25,6,https://github.com/noresources,Runpathdirs improvements,5,[],https://github.com/premake/premake-core/pull/1538,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1538,"What does this PR do?
Fix and improve run path search paths support on gmake actions. Add support for xcode4
How does this PR change Premake's behavior?
Automatically added run path search paths from sibling library is now handled by exporters instead of toolset. The previous behavior may not be accurate for all build system.
Are there any breaking changes? Will any existing behavior change?
Not really, only gmake 1&2 supported runpathdirs and the behavior did not change for these exporters.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
Fix and improve run path search paths support on gmake actions. Add support for xcode4
How does this PR change Premake's behavior?
Automatically added run path search paths from sibling library is now handled by exporters instead of toolset. The previous behavior may not be accurate for all build system.
Are there any breaking changes? Will any existing behavior change?
Not really, only gmake 1&2 supported runpathdirs and the behavior did not change for these exporters.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1538,2020-10-22T14:00:46Z,2021-04-19T14:58:37Z,2021-04-19T14:58:37Z,MERGED,True,89,25,6,https://github.com/noresources,Runpathdirs improvements,5,[],https://github.com/premake/premake-core/pull/1538,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1538#issuecomment-717934717,"What does this PR do?
Fix and improve run path search paths support on gmake actions. Add support for xcode4
How does this PR change Premake's behavior?
Automatically added run path search paths from sibling library is now handled by exporters instead of toolset. The previous behavior may not be accurate for all build system.
Are there any breaking changes? Will any existing behavior change?
Not really, only gmake 1&2 supported runpathdirs and the behavior did not change for these exporters.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","I'm a little uncomfortable adding run paths to a project that weren't explicitly requested by the user (the sibling projects). This probably needs an API similar to links() which allows sibling projects to be specified along with file system paths? I'll let @samsinsane (and anyone else who wants to review) have a say, but I'd vote against this one as-is.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1538,2020-10-22T14:00:46Z,2021-04-19T14:58:37Z,2021-04-19T14:58:37Z,MERGED,True,89,25,6,https://github.com/noresources,Runpathdirs improvements,5,[],https://github.com/premake/premake-core/pull/1538,https://github.com/noresources,3,https://github.com/premake/premake-core/pull/1538#issuecomment-792303005,"What does this PR do?
Fix and improve run path search paths support on gmake actions. Add support for xcode4
How does this PR change Premake's behavior?
Automatically added run path search paths from sibling library is now handled by exporters instead of toolset. The previous behavior may not be accurate for all build system.
Are there any breaking changes? Will any existing behavior change?
Not really, only gmake 1&2 supported runpathdirs and the behavior did not change for these exporters.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","Currently, runpathdirs of sibling project are already automatically added. This patch just move this benavior to gmake action instead of gcc/clang code to ensure other actions are not affected. Please consider this PR as a code cleanup rather than a new feature.
As a reminder, this automatic behavior was previously added to fix the fact that binaries and libs generated by gmake actions cannot be moved from where they were built (library installation paths are hardcoded in the library binary on Linux & macOS).
By the way, my initial proposal (years ago) for this was to add a linkmode API to let user choose between default install names (hardcoded) and automatic with runpaths etc.
The current solution was preferred :)
PS: and sorry for the late reply, I totally miss your response",True,{}
premake/premake-core,https://github.com/premake/premake-core,1538,2020-10-22T14:00:46Z,2021-04-19T14:58:37Z,2021-04-19T14:58:37Z,MERGED,True,89,25,6,https://github.com/noresources,Runpathdirs improvements,5,[],https://github.com/premake/premake-core/pull/1538,https://github.com/noresources,4,https://github.com/premake/premake-core/pull/1538#issuecomment-821313212,"What does this PR do?
Fix and improve run path search paths support on gmake actions. Add support for xcode4
How does this PR change Premake's behavior?
Automatically added run path search paths from sibling library is now handled by exporters instead of toolset. The previous behavior may not be accurate for all build system.
Are there any breaking changes? Will any existing behavior change?
Not really, only gmake 1&2 supported runpathdirs and the behavior did not change for these exporters.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",The branch was rebased with a bit of commit history cleanup plus runpath support for xcode4,True,{}
premake/premake-core,https://github.com/premake/premake-core,1540,2020-10-23T08:27:34Z,2020-10-30T01:42:30Z,2020-10-30T01:42:30Z,MERGED,True,41,6,2,https://github.com/noresources,Xcode improvements,2,[],https://github.com/premake/premake-core/pull/1540,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1540,"What does this PR do?

Add syslibdirs support
Update sysincludedirs support for Xcode 9+ (SYSTEM_HEADER_SEARCH_PATHS)
Fix #1517 ,  temporary workaround #1456

How does this PR change Premake's behavior?
Xcode 8 and earlier will not recognize SYSTEM_HEADER_SEARCH_PATHS setting
Anything else we should know?
As discussed in #1456, a Xcode target version may be added later to support the previous behaviour
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?

Add syslibdirs support
Update sysincludedirs support for Xcode 9+ (SYSTEM_HEADER_SEARCH_PATHS)
Fix #1517 ,  temporary workaround #1456

How does this PR change Premake's behavior?
Xcode 8 and earlier will not recognize SYSTEM_HEADER_SEARCH_PATHS setting
Anything else we should know?
As discussed in #1456, a Xcode target version may be added later to support the previous behaviour
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1542,2020-10-24T16:34:45Z,2020-10-25T01:01:53Z,2020-10-25T01:01:58Z,MERGED,True,43,6,5,https://github.com/starkos,Improve the user contribution resources,1,[],https://github.com/premake/premake-core/pull/1542,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1542,"What does this PR do?

Adds some tips to CONTRIBUTING.md for first-time contrtbutors
Added prompts to issue templates to direct first-time contributors to the guide

How does this PR change Premake's behavior?
No changes to Premake code.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

Adds some tips to CONTRIBUTING.md for first-time contrtbutors
Added prompts to issue templates to direct first-time contributors to the guide

How does this PR change Premake's behavior?
No changes to Premake code.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1551,2020-10-30T00:47:32Z,2020-11-04T15:53:03Z,2021-06-24T14:57:33Z,MERGED,True,12,0,2,https://github.com/nickclark2016,Added NetCore to CLR API,2,[],https://github.com/premake/premake-core/pull/1551,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1551,"What does this PR do?
Added NetCore CLR option for MSVC to Visual Studio CLR API.  Closes #1545
How does this PR change Premake's behavior?
There are no breaking changes, only new functionality.
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Added NetCore CLR option for MSVC to Visual Studio CLR API.  Closes #1545
How does this PR change Premake's behavior?
There are no breaking changes, only new functionality.
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1551,2020-10-30T00:47:32Z,2020-11-04T15:53:03Z,2021-06-24T14:57:33Z,MERGED,True,12,0,2,https://github.com/nickclark2016,Added NetCore to CLR API,2,[],https://github.com/premake/premake-core/pull/1551,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1551#issuecomment-721814040,"What does this PR do?
Added NetCore CLR option for MSVC to Visual Studio CLR API.  Closes #1545
How does this PR change Premake's behavior?
There are no breaking changes, only new functionality.
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks for the contribution!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1552,2020-11-03T21:11:31Z,2020-11-10T13:36:33Z,2020-11-10T13:36:33Z,MERGED,True,76,6,2,https://github.com/JoelLinn,"Fix MSC LTO, runtime, subsystem",1,[],https://github.com/premake/premake-core/pull/1552,https://github.com/JoelLinn,1,https://github.com/premake/premake-core/pull/1552,"What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.","What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1552,2020-11-03T21:11:31Z,2020-11-10T13:36:33Z,2020-11-10T13:36:33Z,MERGED,True,76,6,2,https://github.com/JoelLinn,"Fix MSC LTO, runtime, subsystem",1,[],https://github.com/premake/premake-core/pull/1552,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1552#issuecomment-721808761,"What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.","FYI, if you had split these fixes into separate PRs (LTO, WindowedApp, runtime flags, warning changes) we could have approved the simpler changes. Because you submitted them all as one PR, they are all now going to be held up awaiting changes. The first checkbox on our PR template says ""Focus on a single fix or feature"" for a reason.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1552,2020-11-03T21:11:31Z,2020-11-10T13:36:33Z,2020-11-10T13:36:33Z,MERGED,True,76,6,2,https://github.com/JoelLinn,"Fix MSC LTO, runtime, subsystem",1,[],https://github.com/premake/premake-core/pull/1552,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1552#issuecomment-723586813,"What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.","@samsinsane - does this one look reasonable to you, now that some of the cruft has been trimmed out?
@JoelLinn - you'll need to rebase these changes against the latest master branch (okay if you want to wait for review)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1552,2020-11-03T21:11:31Z,2020-11-10T13:36:33Z,2020-11-10T13:36:33Z,MERGED,True,76,6,2,https://github.com/JoelLinn,"Fix MSC LTO, runtime, subsystem",1,[],https://github.com/premake/premake-core/pull/1552,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1552#issuecomment-723972457,"What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.","@starkos Yeah, overall it looks good.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1552,2020-11-03T21:11:31Z,2020-11-10T13:36:33Z,2020-11-10T13:36:33Z,MERGED,True,76,6,2,https://github.com/JoelLinn,"Fix MSC LTO, runtime, subsystem",1,[],https://github.com/premake/premake-core/pull/1552,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1552#issuecomment-724042014,"What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.",Cool. @JoelLinn If you can rebase and squash these changes I'll get it merged. Thanks for the contribution!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1552,2020-11-03T21:11:31Z,2020-11-10T13:36:33Z,2020-11-10T13:36:33Z,MERGED,True,76,6,2,https://github.com/JoelLinn,"Fix MSC LTO, runtime, subsystem",1,[],https://github.com/premake/premake-core/pull/1552,https://github.com/JoelLinn,6,https://github.com/premake/premake-core/pull/1552#issuecomment-724124779,"What does this PR do?

Link-time optimizations now sets correct cl and ld flags.
Run-Time selection now adheres to runtime setting.
Set subsystem flag for kind==""WindowedApp""

How does this PR change Premake's behavior?

The different Warning flags should not cause any troubles in any consumers.
All other changes do in fact change the behavior. They however fix something that was broken or didn't work before.",Done. I don't know what to squash though as there is only one commit...,True,{}
premake/premake-core,https://github.com/premake/premake-core,1554,2020-11-04T19:41:27Z,2020-11-09T11:50:49Z,2020-11-09T11:50:49Z,MERGED,True,23,2,2,https://github.com/JoelLinn,clang Use `llvm-ar` linker when LTO flag is set.,1,[],https://github.com/premake/premake-core/pull/1554,https://github.com/JoelLinn,1,https://github.com/premake/premake-core/pull/1554,"What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1554,2020-11-04T19:41:27Z,2020-11-09T11:50:49Z,2020-11-09T11:50:49Z,MERGED,True,23,2,2,https://github.com/JoelLinn,clang Use `llvm-ar` linker when LTO flag is set.,1,[],https://github.com/premake/premake-core/pull/1554,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1554#issuecomment-723559972,"What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please fill in the template, it's there for a reason.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1554,2020-11-04T19:41:27Z,2020-11-09T11:50:49Z,2020-11-09T11:50:49Z,MERGED,True,23,2,2,https://github.com/JoelLinn,clang Use `llvm-ar` linker when LTO flag is set.,1,[],https://github.com/premake/premake-core/pull/1554,https://github.com/JoelLinn,3,https://github.com/premake/premake-core/pull/1554#issuecomment-723564847,"What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please fill in the template, it's there for a reason.

please reopen",True,{}
premake/premake-core,https://github.com/premake/premake-core,1554,2020-11-04T19:41:27Z,2020-11-09T11:50:49Z,2020-11-09T11:50:49Z,MERGED,True,23,2,2,https://github.com/JoelLinn,clang Use `llvm-ar` linker when LTO flag is set.,1,[],https://github.com/premake/premake-core/pull/1554,https://github.com/tritao,4,https://github.com/premake/premake-core/pull/1554#issuecomment-723645358,"What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","It seems a bit inconsistent that the tool will be different depending on if LTO is enabled or not.
Is there any reason not to just always use llvm-ar when using the clang toolset?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1554,2020-11-04T19:41:27Z,2020-11-09T11:50:49Z,2020-11-09T11:50:49Z,MERGED,True,23,2,2,https://github.com/JoelLinn,clang Use `llvm-ar` linker when LTO flag is set.,1,[],https://github.com/premake/premake-core/pull/1554,https://github.com/JoelLinn,5,https://github.com/premake/premake-core/pull/1554#issuecomment-723648214,"What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Is there any reason not to just always use llvm-ar when using the clang toolset?


It may break existing projects since usually llvm packages are not required by clang-packages. (llvm-ar is not installed)
Afaik (if that counts anything here) cmake also uses plain ar first in its makefiles unless certain features are enabled, only then llvm-ar, llvm-ranlib and friends are emitted. I never looked into when exactly they switched, just noticed it in the makefiles",True,{'THUMBS_UP': ['https://github.com/tritao']}
premake/premake-core,https://github.com/premake/premake-core,1554,2020-11-04T19:41:27Z,2020-11-09T11:50:49Z,2020-11-09T11:50:49Z,MERGED,True,23,2,2,https://github.com/JoelLinn,clang Use `llvm-ar` linker when LTO flag is set.,1,[],https://github.com/premake/premake-core/pull/1554,https://github.com/tritao,6,https://github.com/premake/premake-core/pull/1554#issuecomment-723650014,"What does this PR do?
Changes the static linker from ar to llvm-ar when the clang toolset is used and the LinkTimeOptimization flag is set.
Although many times GNU ar will also work, for some clang features like -flto (link-time optimisation, I only came across this one but could be more) llvm-ar is needed.
How does this PR change Premake's behavior?
It should not break or change build-file output for existing projects (that may not have llvm-ar installed) since llvm-ar is only conditionally used and still defaults to ar.
Anything else we should know?
Before this change, it was not possible to use the LinkTimeOptimization flag with the clang toolset unless using the ""AR=llvm-ar"" environment variable.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Makes sense, thanks.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1555,2020-11-05T00:39:36Z,2021-04-19T14:51:49Z,2021-08-25T16:21:10Z,MERGED,True,27,0,3,https://github.com/nickclark2016,Added API to disable fast up to date checks,3,[],https://github.com/premake/premake-core/pull/1555,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1555,"What does this PR do?
Adds DisableFastUpToDateCheck API, which is only useful for Visual Studio projects.  When fastuptodate is Disable, it adds the relevant XML entry to the globals property group.  Closes #1443.
How does this PR change Premake's behavior?
No changes to existing behavior.  Adds XML entries when fastuptodate is set to Disable.
Anything else we should know?
API:
project ""name""
    -- To Disable
    fastuptodate ""Off""

    -- To Enable
    fastuptodate ""On"" -- does nothing, added for completeness
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds DisableFastUpToDateCheck API, which is only useful for Visual Studio projects.  When fastuptodate is Disable, it adds the relevant XML entry to the globals property group.  Closes #1443.
How does this PR change Premake's behavior?
No changes to existing behavior.  Adds XML entries when fastuptodate is set to Disable.
Anything else we should know?
API:
project ""name""
    -- To Disable
    fastuptodate ""Off""

    -- To Enable
    fastuptodate ""On"" -- does nothing, added for completeness
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1555,2020-11-05T00:39:36Z,2021-04-19T14:51:49Z,2021-08-25T16:21:10Z,MERGED,True,27,0,3,https://github.com/nickclark2016,Added API to disable fast up to date checks,3,[],https://github.com/premake/premake-core/pull/1555,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1555#issuecomment-821920937,"What does this PR do?
Adds DisableFastUpToDateCheck API, which is only useful for Visual Studio projects.  When fastuptodate is Disable, it adds the relevant XML entry to the globals property group.  Closes #1443.
How does this PR change Premake's behavior?
No changes to existing behavior.  Adds XML entries when fastuptodate is set to Disable.
Anything else we should know?
API:
project ""name""
    -- To Disable
    fastuptodate ""Off""

    -- To Enable
    fastuptodate ""On"" -- does nothing, added for completeness
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I hit update. I think that rebases.  If not, feel free to let me know and I'll manually rebase.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1555,2020-11-05T00:39:36Z,2021-04-19T14:51:49Z,2021-08-25T16:21:10Z,MERGED,True,27,0,3,https://github.com/nickclark2016,Added API to disable fast up to date checks,3,[],https://github.com/premake/premake-core/pull/1555,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1555#issuecomment-822529941,"What does this PR do?
Adds DisableFastUpToDateCheck API, which is only useful for Visual Studio projects.  When fastuptodate is Disable, it adds the relevant XML entry to the globals property group.  Closes #1443.
How does this PR change Premake's behavior?
No changes to existing behavior.  Adds XML entries when fastuptodate is set to Disable.
Anything else we should know?
API:
project ""name""
    -- To Disable
    fastuptodate ""Off""

    -- To Enable
    fastuptodate ""On"" -- does nothing, added for completeness
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks for the quick follow up!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1560,2020-11-21T14:02:54Z,2020-11-21T19:16:54Z,2020-11-21T19:16:54Z,MERGED,True,3,1,1,https://github.com/dpeter99,Added newer shader versions,1,[],https://github.com/premake/premake-core/pull/1560,https://github.com/dpeter99,1,https://github.com/premake/premake-core/pull/1560,"What does this PR do?
This PR adds the new shader versions (6.4 and 6.5). I followed the #1236 issue while adding these in. üòÉ
How does this PR change Premake's behavior?
None
Anything else we should know?
Wanted to use the newer versions.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This PR adds the new shader versions (6.4 and 6.5). I followed the #1236 issue while adding these in. üòÉ
How does this PR change Premake's behavior?
None
Anything else we should know?
Wanted to use the newer versions.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1562,2020-11-25T22:45:27Z,2020-11-27T19:45:16Z,2020-11-27T20:25:36Z,MERGED,True,1,74,3,https://github.com/gibbed,Remove moduledownloader to avoid RCE.,1,[],https://github.com/premake/premake-core/pull/1562,https://github.com/gibbed,1,https://github.com/premake/premake-core/pull/1562,"What does this PR do?
This removes moduledownloader functionality which is used to download missing modules from a remote server (default packagesrv.com).
How does this PR change Premake's behavior?
Premake will no longer attempt to download missing modules.
Anything else we should know?
The domain that moduledownloader is pinging and grabbing missing modules from (packagesrv.com) had lapsed and expired, moduledownloader is implemented in such a fashion that it does not securely download and install modules. This would lead to a remote code execution. @JoelLinn has registered the domain to prevent any bad actors from taking advantage of this situation, but this is only a bandaid fix.
Please refer to #1381.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This removes moduledownloader functionality which is used to download missing modules from a remote server (default packagesrv.com).
How does this PR change Premake's behavior?
Premake will no longer attempt to download missing modules.
Anything else we should know?
The domain that moduledownloader is pinging and grabbing missing modules from (packagesrv.com) had lapsed and expired, moduledownloader is implemented in such a fashion that it does not securely download and install modules. This would lead to a remote code execution. @JoelLinn has registered the domain to prevent any bad actors from taking advantage of this situation, but this is only a bandaid fix.
Please refer to #1381.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,"{'THUMBS_UP': ['https://github.com/Triang3l'], 'ROCKET': ['https://github.com/JoelLinn']}"
premake/premake-core,https://github.com/premake/premake-core,1564,2020-12-07T20:12:43Z,2020-12-08T01:05:39Z,2020-12-08T01:05:39Z,MERGED,True,9,5,2,https://github.com/ClxS,Improved net version check to also support net5.0 and beyond,1,[],https://github.com/premake/premake-core/pull/1564,https://github.com/ClxS,1,https://github.com/premake/premake-core/pull/1564,"What does this PR do?
This changes the isNewFormatProject so that netcoreapp, netstandard, and the new net{version} (i.e. net5.0) are formatted using the new csproj format.
How does this PR change Premake's behavior?
Shouldn't break any existing usages. Will allow dotnetframework(""net5.0"") to work.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","What does this PR do?
This changes the isNewFormatProject so that netcoreapp, netstandard, and the new net{version} (i.e. net5.0) are formatted using the new csproj format.
How does this PR change Premake's behavior?
Shouldn't break any existing usages. Will allow dotnetframework(""net5.0"") to work.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1565,2020-12-07T21:20:27Z,2020-12-08T01:06:53Z,2020-12-08T01:06:54Z,MERGED,True,43,3,4,https://github.com/ClxS,AllowUnsafeBlocks will now be a project level property in new format,1,[],https://github.com/premake/premake-core/pull/1565,https://github.com/ClxS,1,https://github.com/premake/premake-core/pull/1565,"What does this PR do?
Moves the location of AllowUnsafeBlocks into the top-level project settings on net format C# projects.
Closes #1549
How does this PR change Premake's behavior?
Should not affect existing .NET Framework projects. Will affect .NET Standard, .NET Core, and .NET projects by fixing conditionally block placed AllowUsingBlocks, which were being ignored by the compiler.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Moves the location of AllowUnsafeBlocks into the top-level project settings on net format C# projects.
Closes #1549
How does this PR change Premake's behavior?
Should not affect existing .NET Framework projects. Will affect .NET Standard, .NET Core, and .NET projects by fixing conditionally block placed AllowUsingBlocks, which were being ignored by the compiler.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1566,2020-12-09T02:37:27Z,2020-12-09T05:47:04Z,2020-12-09T05:47:04Z,MERGED,True,0,0,1,https://github.com/ratzlaff,Set execute bit on Bootstrap.bat,1,[],https://github.com/premake/premake-core/pull/1566,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1566,"What does this PR do?
This PR sets the execute bit on Bootstrap.bat so that cygwin will run it nicely
How does this PR change Premake's behavior?
There should be no changes in premake's behavior
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR sets the execute bit on Bootstrap.bat so that cygwin will run it nicely
How does this PR change Premake's behavior?
There should be no changes in premake's behavior
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1569,2020-12-15T04:05:40Z,2021-04-15T12:53:02Z,2021-04-15T14:57:25Z,CLOSED,False,51,3,2,https://github.com/ratzlaff,Fix --help output when using mixed-case command line options,1,[],https://github.com/premake/premake-core/pull/1569,https://github.com/ratzlaff,1,https://github.com/premake/premake-core/pull/1569,"What does this PR do?
Prior to this PR, using --help would silently fail at iterating over the options table when newoption was used to add a trigger that contained capital letters.
How does this PR change Premake's behavior?
using --help should now properly display all user-defined options
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Prior to this PR, using --help would silently fail at iterating over the options table when newoption was used to add a trigger that contained capital letters.
How does this PR change Premake's behavior?
using --help should now properly display all user-defined options
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1569,2020-12-15T04:05:40Z,2021-04-15T12:53:02Z,2021-04-15T14:57:25Z,CLOSED,False,51,3,2,https://github.com/ratzlaff,Fix --help output when using mixed-case command line options,1,[],https://github.com/premake/premake-core/pull/1569,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1569#issuecomment-820398486,"What does this PR do?
Prior to this PR, using --help would silently fail at iterating over the options table when newoption was used to add a trigger that contained capital letters.
How does this PR change Premake's behavior?
using --help should now properly display all user-defined options
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","As above, this is way too heavy-handed for a simple fix. I'm closing it in favor of #1617.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1569,2020-12-15T04:05:40Z,2021-04-15T12:53:02Z,2021-04-15T14:57:25Z,CLOSED,False,51,3,2,https://github.com/ratzlaff,Fix --help output when using mixed-case command line options,1,[],https://github.com/premake/premake-core/pull/1569,https://github.com/ratzlaff,3,https://github.com/premake/premake-core/pull/1569#issuecomment-820496610,"What does this PR do?
Prior to this PR, using --help would silently fail at iterating over the options table when newoption was used to add a trigger that contained capital letters.
How does this PR change Premake's behavior?
using --help should now properly display all user-defined options
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","No worries here, looks like that is better anyway =)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/hannes-harnisch,1,https://github.com/premake/premake-core/pull/1570,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,"{'THUMBS_UP': ['https://github.com/spaxio', 'https://github.com/alexpanter', 'https://github.com/ClxS', 'https://github.com/fsfod', 'https://github.com/PoetaKodu', 'https://github.com/AbdullahAmrSobh', 'https://github.com/LapysDev'], 'HEART': ['https://github.com/AbdullahAmrSobh']}"
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1570#issuecomment-750808509,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I really appreciate the effort here, however, I'm not sold on the API usage. We need to make sure whatever API we go with works for XCode and Makefiles.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/hannes-harnisch,3,https://github.com/premake/premake-core/pull/1570#issuecomment-757533623,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I will update the PR appropriately when Xcode releases some support for modules. (Edit: I will not, I'm not familiar enough with Xcode. Also module support in Xcode might take a while to arrive anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1570#issuecomment-820381628,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I really appreciate the effort here, however, I'm not sold on the API usage. We need to make sure whatever API we go with works for XCode and Makefiles.

@samsinsane Do you have another suggestion for the syntax?
This seems reasonable enough to me‚Äîthanks for taking the time to put it together and keep it up to date. The only change I would suggest is removing the ""C++"" from the values, so that we have the possibility of supporting similar, non-C++ module systems in the future.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/hannes-harnisch,5,https://github.com/premake/premake-core/pull/1570#issuecomment-830972327,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I've changed the API usage to this, because at the time I opened the PR, I didn't realize exactly what Microsoft meant by ""module internal partition"". I falsely thought it referred to module partition implementation units, but it actually referred to module partitions themselves (aka module partition interface units).
I therefore shortened the strings for the new options. Based on starkos' suggestion, I also removed the C++ prefix. There the new options change from C++ModuleInterface to Module, C++ModulePartitionImplementation to ModulePartition and C++HeaderUnit to HeaderUnit respectively. They refer to module interface units, module partition interface units and header units respectively (the official terms in the C++20 standard).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/hannes-harnisch,6,https://github.com/premake/premake-core/pull/1570#issuecomment-830973327,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","It appears from comparing the current module systems in different compilers, that only interface units of modules and module partitions actually require special processing by the compiler and/or linker. The implementation counterparts for modules and module partitions (source files that don't have the export keyword in them anywhere) can be compiled as regular C++ source files.
Therefore, I don't think that the API that this PR adds will be fixated on the way Visual Studio does it. If anything, other IDEs might extract the kind of translation unit they are dealing with by parsing for the export keyword. Or possibly, they might add specific options for interface units and implementation units. I think support for such options can easily be added to Premake in the future and this PR should add some valuable support for C++20 in its current state.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1570,2020-12-16T21:47:16Z,2021-05-16T20:04:04Z,2021-07-15T11:09:16Z,MERGED,True,48,0,3,https://github.com/hannes-harnisch,Initial C++20 module support for Visual Studio,3,[],https://github.com/premake/premake-core/pull/1570,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1570#issuecomment-842161986,"What does this PR do?
Visual Studio's C++ compiler now has feature-complete support for C++20 modules (see also this link). Playing around with it, it appears to be relatively stable too, disregarding some IntelliSense syntax highlighting issues. It appears this is the first IDE and compiler toolchain to have any usable support for C++20 modules. Therefore, I think it would be useful to add at least some initial support for C++20 modules to Premake. For a better understanding of how C++20 modules work and what type of translation units they introduce, I strongly recommend this blog post and its follow-up posts.
This PR allows the use of 3 new values for Premake's ""compileas"" parameter. This parameter is used to set the value of the ""Compile as"" setting under the ""Advanced"" tab in the C/C++ source file properties, as dictated by the currently available options in Visual Studio. Given that the Visual Studio team has called their module implementation feature-complete, I doubt that the meaning of these options will change. At most, more options might be added in the future. The following values were added:

""Module"": Used to designate the source file as a module interface unit for compilation.
""ModulePartition"": Used to designate the source file as a module partition implementation unit for compilation. This type of module unit is also called a ""module-internal partition"" by Microsoft, though the C++20 standard does not give this type of module unit a specific name.
""HeaderUnit"": Used to designate the source file as a header unit for compilation.

The PR also adds some unit tests, which of course ran fine. I also tested it in my personal project using a files filter and it works perfectly.
How does this PR change Premake's behavior?
No breaking changes and no existing behavior changes. It just adds more options for the ""compileas"" parameter.
Anything else we should know?
The 3 new values were given names that I think are closest to the terms used for the different module unit types in the C++20 standard (relevant section). Of course, the other compilers and IDEs might set up their module support somewhat differently. I still think it would be useful to extend the ""compileas"" parameter in this way so that it can at least be used in the only IDE currently supporting modules.
And of course, thank you Open Collective for creating Premake! You have saved me from the eldritch horrors of CMake and have made my C++ projects so much easier to set up.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Sorry for taking so long to get back to this.

Do you have another suggestion for the syntax?

I don't - I don't know much about C++20 modules, I just knew that it was up to the implementers as to how they worked, and I was concerned that the VS way would be very different to everything else. In hindsight, this was probably unrealistic, sorry about that!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1571,2020-12-18T00:38:42Z,2020-12-24T08:45:42Z,2020-12-24T08:45:42Z,MERGED,True,57,1,3,https://github.com/cos-public,useFullPaths config property for Visual Studio projects,1,[],https://github.com/premake/premake-core/pull/1571,https://github.com/cos-public,1,https://github.com/premake/premake-core/pull/1571,"What does this PR do?
Supports usefullpaths configuration property, which controls /FC compiler option.
How does this PR change Premake's behavior?
Support new configuration property.
Anything else we should know?
The property is supported by Visual Studio since 2010 https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/027c4t2s(v=vs.100), so tests are not version-specific.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Supports usefullpaths configuration property, which controls /FC compiler option.
How does this PR change Premake's behavior?
Support new configuration property.
Anything else we should know?
The property is supported by Visual Studio since 2010 https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/027c4t2s(v=vs.100), so tests are not version-specific.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1576,2021-01-12T17:18:17Z,2021-01-12T21:56:09Z,2021-01-12T21:56:09Z,MERGED,True,2,0,1,https://github.com/pkurth,Mesh and amplification shader type for Visual Studio,1,[],https://github.com/premake/premake-core/pull/1576,https://github.com/pkurth,1,https://github.com/premake/premake-core/pull/1576,"What does this PR do?
Adding two additional shader types for Visual Studio. These are the new additions to DirectX, mesh and amplification shaders.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Allows for two more values in the shadertype directive.
Are there any breaking changes? Will any existing behavior change?
Not that I know of.","What does this PR do?
Adding two additional shader types for Visual Studio. These are the new additions to DirectX, mesh and amplification shaders.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Allows for two more values in the shadertype directive.
Are there any breaking changes? Will any existing behavior change?
Not that I know of.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1583,2021-02-06T21:33:44Z,2021-02-07T20:07:16Z,2021-02-07T20:07:17Z,CLOSED,False,70,0,3,https://github.com/Rachel-Wirtz,Enable cdialect for vs2019,5,[],https://github.com/premake/premake-core/pull/1583,https://github.com/Rachel-Wirtz,1,https://github.com/premake/premake-core/pull/1583,"What does this PR do?
This PR enables the C Language Standard option for the newer versions of vs2019 via cdialect as follows:



cdialect
Value




Default
Default


C11
/std:c11


C17
/std:c17


C18
/std:c17



The default value enables the Legacy-MSVC option. C17 and C18 both refer to the latest ISO C standard released in 2018. Unlike GNU, MSVC doesn't provide separate compiler flags.
How does this PR change Premake's behavior?
It enables cdialect setting Visual Studio's C-Language Standard option that recently became available to the current supported values shown above. If an unsupported value is used for cdialect the Default option is set. For values refering to the gnu dialect the nearest available option is set (gnu11 -> C11).","What does this PR do?
This PR enables the C Language Standard option for the newer versions of vs2019 via cdialect as follows:



cdialect
Value




Default
Default


C11
/std:c11


C17
/std:c17


C18
/std:c17



The default value enables the Legacy-MSVC option. C17 and C18 both refer to the latest ISO C standard released in 2018. Unlike GNU, MSVC doesn't provide separate compiler flags.
How does this PR change Premake's behavior?
It enables cdialect setting Visual Studio's C-Language Standard option that recently became available to the current supported values shown above. If an unsupported value is used for cdialect the Default option is set. For values refering to the gnu dialect the nearest available option is set (gnu11 -> C11).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1587,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1587#issuecomment-790629596,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","Looks absolutely fantastic, you've done a great job with this.
Curious: why are 4.x docs are under versioned_docs but 5.x docs are just docs? If I start bring docs for the next version online where would they go? Would it make sense to keep all reference material under versioned_docs?
I do prefer having each library (os, path, etc.) broken out into its own group in the sidebar. I think we should keep them in alpha order so I guess that's just something we'll have to figure out and maintain manually. Not a showstopper.
Here's a question‚Ä¶at some point we may need to track development of a v5.x and a v6.x. Those would probably maybe be on separate branches, and would stay on separate branches so we could keep maintaining v5? Not sure how we would track the documentation in that setup. Maybe we just publish from the latest (v6) branch? Something that we might need to address but I don't see any reason to let it hold this up.
Again, great work with this! I'd like to get feedback from @samsinsane but atm I see no reason not to land this and start redirecting the wiki pages over to here. Are you cool with landing this PR as is and then iterating on the content, or are you intending to do more work on it first?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1587#issuecomment-791789748,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","Thanks for your feedback! I really appreciate it.

Curious: why are 4.x docs are under versioned_docs but 5.x docs are just docs? If I start bring docs for the next version online where would they go? Would it make sense to keep all reference material under versioned_docs?

It's all about URLs. Docs in docs are meant for the latest/current (or even next) version of Premake. It gives us URLs with custom paths like this: /docs/os.chdir (atm path is empty """", by default it's ""latest"" or ""next"". See 102 line of docusaurus.config.js). If all docs were placed under versioned_docs then there would be no /docs/os.chdir. Instead, we would have: /docs/5.x/os.chdir so only versioned URLs. When development of 6.x is started, 4 things will be done:

all docs will be copied into versioned_docs/version-5.x/
sidebar.js will be saved to versioned_sidebars/version-5.x-sidebars.json
new version ""5.x"" will be added to versions.json
finally, you would have to manually update ""current version label"" to ""6.x"" in docusaurus.config.js.

And from this moment link docs/os.chdir would reference 6.x version of os.chdir. Old one would be docs/5.x/os.chdir. As you can see, it's all about URLs. This approach is mentioned in Recommended practices of Docusaurus. Think of versioned_docs as historical snapshots of docs.

Here's a question‚Ä¶at some point we may need to track development of a v5.x and a v6.x. Those would probably maybe be on separate branches, and would stay on separate branches so we could keep maintaining v5?

In general, website should have only one version (the published one). If we started development of a 6.x on a separate branch then docs would need to be maintained on master in order for them to be published. It's still possible to maintain 6.x docs on a branch and merge webite into master later.

Are you cool with landing this PR as is and then iterating on the content, or are you intending to do more work on it first?

Yes, this PR is intended to be merged so other people can be involved in docs migration :-)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1587#issuecomment-792787986,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","Playing around with this some more‚Ä¶


I'd like to remove all of the 4.x stuff from this site. We'll serve just the current documentation, and sort things out for the next version when we know more. Most likely we'll still just serve a single version of the docs with version specific notes inline, rather than try to maintain two separate collections. I appreciate you putting it together so I could see how it works though; looks straightforward.


At some point, sooner than later, we'll need info on deployments in the README: how it's done, when it's done, how to get to the relevant action, that sort of stuff. Understand if it needs to be deployed first.


Would it be possible for you to clean up the 4.x stuff? In the meantime I'll ping @samsinsane; if he has no objections I'd like to get this landed this week, and then I'll go head down on migrating the docs and see if I can't crank through it. I'd prefer not to go live until we have the majority of the content moved over, and I'd like to get this live ASAP.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1587#issuecomment-792790101,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.",Oh yeah‚Ä¶the website is served from a different repository‚ÄîI assume we can set up the deployment action to push the results there?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/KyrietS,6,https://github.com/premake/premake-core/pull/1587#issuecomment-793065839,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","I'd like to remove all of the 4.x stuff from this site.

Sure thing. But you said ""try to maintain two separate collections"". Actually the idea of versioned docs is that we maintain only one (current/latest/next) version of docs. Old historical API shouldn't be modified (at least not often, in theory ofc). I understand your point of view. Sections ""Availability"" look nice IMO but what about people using Premake4 who want to find functions for their version only?

Would it be possible for you to clean up the 4.x stuff?

Yes, I'll do it as soon as I can. Just clarify for me one thing. What should be left on the website: docs for 5.0 or just simply ""docs"" without version specified?

I assume we can set up the deployment action to push the results there?

Yes exactly. We will use GitHub Action in this repo to build static files and then automatically push them to the other repo. It's simple configuration, I've done it a few times already.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1587#issuecomment-793960466,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","what about people using Premake4 who want to find functions for their version only?

v4 has its own repository and wiki. I'd prefer to focus on getting v5 ported over and cleaned up ASAP, so I can get back to everything else. If someone else feels like migrating the v4 docs after the fact I'm not opposed to it, but it doesn't seem necessary.

What should be left on the website: docs for 5.0 or just simply ""docs"" without version specified?

Let's go with just ""docs"" for now. Once I have a better idea of where the in-development code is going to land I can make changes if needed, but I don't expect it will be necessary.
Thanks again for taking the lead on this.",True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/slorber,8,https://github.com/premake/premake-core/pull/1587#issuecomment-794426535,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","hey,  please add this to our showcase :)
https://v2.docusaurus.io/showcase",True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/KyrietS,9,https://github.com/premake/premake-core/pull/1587#issuecomment-794581636,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","hey, please add this to our showcase :)

when it's ready, sure :-)
Ok, I removed all 4.x stuff. There is only one version of docs on the website. 
Live demo: https://kyriets.github.io/premake-core/ (use Shift + F5 to discard browser cache if needed)",True,{'THUMBS_UP': ['https://github.com/slorber']}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/1587#issuecomment-795279444,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","Okay, I think we're good to go then. @KyrietS do you agree?",True,{'ROCKET': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/KyrietS,11,https://github.com/premake/premake-core/pull/1587#issuecomment-795299222,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.",Yes. Merge it and let the migration begin üëç,True,{}
premake/premake-core,https://github.com/premake/premake-core,1587,2021-02-15T20:22:43Z,2021-03-10T12:58:36Z,2021-03-10T12:59:30Z,MERGED,True,1264,0,31,https://github.com/KyrietS,Introduce new website with docs with docusaurus,2,[],https://github.com/premake/premake-core/pull/1587,https://github.com/starkos,12,https://github.com/premake/premake-core/pull/1587#issuecomment-795378354,"Website with docs for Premake 4.x and 5.0
This idea is discussed in #1547
Structure
Whole website is stored in folder website (followed convention from Docusaurus wiki). Docs for Premake 5.0 are stored in markdown files in website/docs. Some minimal changes have to be done for files downloaded from current github-wiki docs.
I've added many examples in this commit so it's easy to understand everything (I hope).
Example is temporarily hosted on my repo: https://kyriets.github.io/premake-core/
Building website
read website/README.md
tl;dr
(Node.js with npm needed)
cd website
npm install
npm start             # development
npm run-script build  # build static files
Building website with GitHub Actions
Example here
Migration / editor notes

Lua syntax highlight is supported (```lua).
Shell code blocks can (should?) be marked with ```bash.
You can highlight a line in a code block, eg. ```lua {3}.
We should change every occurrence of **inlineCode()** to `inlineCode()`.
In general, sometimes **bold text** is overused. In many places `inline mono` should be used instead.
Markdown files can have front matter (config fields, markdown headers). Here are all supported fields: https://v2.docusaurus.io/docs/markdown-features#markdown-headers, but...
It's better NOT to use front matter if it's possible. It'll be easier to maintain for everyone. You just have to remember that id: defaults to filename and title: defaults to id if not provided. So instead of creating front matter in file os.mkdir.md like this:

---
id: os.mkdir
title: os.mkdir
---

it's better not to provide front matter at all. (id is used to create link in sidebar)

Unfortunately sidebar items are not sorted. So it might be a pain if we wanted to keep them in alphabetical order like in GH wiki ;C
Instant search support can be added after the website is published (tutorial) and it looks nice IMO.
All assets (like images) must be placed in website/static folder so they can be referenced with global path, eg. we have an image in /website/assets/img/image.png and if you want to include this image in docs page you should write: ![alt text](/img/image.png). There is no /assets/ before image path! It'll be added by Docusaurus automatically.
When linking to another document use relative path with *.md extension. Docusaurus will generate valid urls and links will also work when browsing on GitHub. Additionally, you will get a warning message when link to a markdown file can't be resolved. (there are many warnings like this at this moment).
There is a special page: /website/docs/Style-Guide.md that showcases all markdown features in Docusaurus. This page is not listed in sidebar. It's quite useful, especially when you modify theme and styles.
In general, migrating docs is super easy.
At this moment docs pages with os prefix (os.mkdir, os.rmdir, etc.) are grouped in sidebar. I'm not sure if we want this.
Page /website/src/pages/download.md is work-in-proggress. It's also an exmaple of how you can add another page to the website.","Done. If you (or anyone) is planning to migrate documentation, let's coordinate over on #1547.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1589,2021-02-16T18:55:50Z,2021-03-10T10:28:26Z,2021-03-10T10:28:26Z,MERGED,True,40,4,2,https://github.com/noresources,os.outputof: add a second argument to select which stream to output,3,[],https://github.com/premake/premake-core/pull/1589,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1589,"local o, e = os.outputof(cmd, streams)

Where streams could be one of
- ""output"" Only return standard output stream content
- ""error"" Only return standard error stream content
- ""both"" (default) Return both streams content

How does this PR change Premake's behavior?
Allow to filter standard output or error stream content from os.outputof() return value.
Ignoring error output is important when the invoked command may return an exit code 0 (success) but output some content on the error stream which will pollute the text result.
Are there any breaking changes? Will any existing behavior change?
The default behavior follow the previous one (report both streams)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits","local o, e = os.outputof(cmd, streams)

Where streams could be one of
- ""output"" Only return standard output stream content
- ""error"" Only return standard error stream content
- ""both"" (default) Return both streams content

How does this PR change Premake's behavior?
Allow to filter standard output or error stream content from os.outputof() return value.
Ignoring error output is important when the invoked command may return an exit code 0 (success) but output some content on the error stream which will pollute the text result.
Are there any breaking changes? Will any existing behavior change?
The default behavior follow the previous one (report both streams)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits",True,{}
premake/premake-core,https://github.com/premake/premake-core,1593,2021-03-10T15:54:43Z,2021-03-13T19:44:22Z,2021-03-13T19:44:30Z,MERGED,True,206459,33780,988,https://github.com/susnux,Update to mbedtls 2.25,1,[],https://github.com/premake/premake-core/pull/1593,https://github.com/susnux,1,https://github.com/premake/premake-core/pull/1593,"What does this PR do?
Updating mbedtls to a more stable version.
How does this PR change Premake's behavior?
No change in behavior, less build warnings.
Anything else we should know?
This fixes at least ARMmbed/mbed-crypto#312 which is present in used version of mbedtls.
So this issues would also occure if building premake current mbedtls version, this fixes it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Updating mbedtls to a more stable version.
How does this PR change Premake's behavior?
No change in behavior, less build warnings.
Anything else we should know?
This fixes at least ARMmbed/mbed-crypto#312 which is present in used version of mbedtls.
So this issues would also occure if building premake current mbedtls version, this fixes it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1593,2021-03-10T15:54:43Z,2021-03-13T19:44:22Z,2021-03-13T19:44:30Z,MERGED,True,206459,33780,988,https://github.com/susnux,Update to mbedtls 2.25,1,[],https://github.com/premake/premake-core/pull/1593,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1593#issuecomment-798774418,"What does this PR do?
Updating mbedtls to a more stable version.
How does this PR change Premake's behavior?
No change in behavior, less build warnings.
Anything else we should know?
This fixes at least ARMmbed/mbed-crypto#312 which is present in used version of mbedtls.
So this issues would also occure if building premake current mbedtls version, this fixes it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1594,2021-03-12T20:58:07Z,2021-03-16T14:39:23Z,2021-03-16T14:39:23Z,MERGED,True,8661,7,278,https://github.com/KyrietS,Added reference pages to docs,3,[],https://github.com/premake/premake-core/pull/1594,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1594,"What does this commit add

Added all reference pages (362 in total).
Every link has been changed from [text](Page) to [text](Page.md).
Added all reference pages to sidebars.js in alphabetical order. Currently there are 5 subcategories: os, path, premake, string, table.

Live demo here: https://kyriets.github.io/premake-core/docs/
Things to consider before merge

 More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip
 Should we leave auto-generated documents like criteria._compile.md for now? There are more pages like this.
 Should Removing Values be in the reference category? It looks like an api reference to me.

Wiki pages that were NOT migrated
About-This-Wiki.md
Adding-a-new-Action.md
Adding-Source-Files.md
Adding-Unit-Tests.md
Build-Settings.md
Building-Premake.md
Code-Overview.md
Coding-Conventions.md
Command-Line-Arguments.md
Configurations-and-Platforms.md
Contribution-Guidelines.md
Custom-Build-Commands.md
Custom-Rules.md
Debugging-Scripts.md
Developing-Modules.md
Development-Roadmap.md
Embedding-Modules.md
Extending-Premake.md
Feature-Matrix.md
Filters.md
Generating-Project-Files.md
Getting-Help.md
Getting-Premake.md
Home.md
How-To-Help.md
Linking.md
Locating-Scripts.md
Lua-Library-Additions.md
Lua-Library-Additions.updated
Makefile-Projects.md
Migrating-From-4.x.md
Migrating-From-BitBucket.md
Modules-Proposal.md
Modules.md
Overrides-and-Call-Arrays.md
Precompiled-Headers.md
Project-API.md
Scopes-and-Inheritance.md
Sharing-Configuration-Settings.md
Sharing-Your-Module.md
Starting-Your-New-Action.md
System-Scripts.md
Tokens.md
Topics.md
Tutorial
Tutorial-Premake-example-with-GLFW-and-OpenGL.md
Tutorials.md
Usages.md
Using-Modules.md
Using-Premake.md
What's-New-in-5.0.md
What-Is-Premake.md
Who-Uses-Premake.md
Why-Do-Call-Arrays-Need-Functions.md
Workspaces-and-Projects.md
Your-First-Script.md

I suppose @starkos is already in a process of migrating them :-)
FYI: I did not include any malicious or additional text into the docs I migrated.
#1547","What does this commit add

Added all reference pages (362 in total).
Every link has been changed from [text](Page) to [text](Page.md).
Added all reference pages to sidebars.js in alphabetical order. Currently there are 5 subcategories: os, path, premake, string, table.

Live demo here: https://kyriets.github.io/premake-core/docs/
Things to consider before merge

 More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip
 Should we leave auto-generated documents like criteria._compile.md for now? There are more pages like this.
 Should Removing Values be in the reference category? It looks like an api reference to me.

Wiki pages that were NOT migrated
About-This-Wiki.md
Adding-a-new-Action.md
Adding-Source-Files.md
Adding-Unit-Tests.md
Build-Settings.md
Building-Premake.md
Code-Overview.md
Coding-Conventions.md
Command-Line-Arguments.md
Configurations-and-Platforms.md
Contribution-Guidelines.md
Custom-Build-Commands.md
Custom-Rules.md
Debugging-Scripts.md
Developing-Modules.md
Development-Roadmap.md
Embedding-Modules.md
Extending-Premake.md
Feature-Matrix.md
Filters.md
Generating-Project-Files.md
Getting-Help.md
Getting-Premake.md
Home.md
How-To-Help.md
Linking.md
Locating-Scripts.md
Lua-Library-Additions.md
Lua-Library-Additions.updated
Makefile-Projects.md
Migrating-From-4.x.md
Migrating-From-BitBucket.md
Modules-Proposal.md
Modules.md
Overrides-and-Call-Arrays.md
Precompiled-Headers.md
Project-API.md
Scopes-and-Inheritance.md
Sharing-Configuration-Settings.md
Sharing-Your-Module.md
Starting-Your-New-Action.md
System-Scripts.md
Tokens.md
Topics.md
Tutorial
Tutorial-Premake-example-with-GLFW-and-OpenGL.md
Tutorials.md
Usages.md
Using-Modules.md
Using-Premake.md
What's-New-in-5.0.md
What-Is-Premake.md
Who-Uses-Premake.md
Why-Do-Call-Arrays-Need-Functions.md
Workspaces-and-Projects.md
Your-First-Script.md

I suppose @starkos is already in a process of migrating them :-)
FYI: I did not include any malicious or additional text into the docs I migrated.
#1547",True,{}
premake/premake-core,https://github.com/premake/premake-core,1594,2021-03-12T20:58:07Z,2021-03-16T14:39:23Z,2021-03-16T14:39:23Z,MERGED,True,8661,7,278,https://github.com/KyrietS,Added reference pages to docs,3,[],https://github.com/premake/premake-core/pull/1594,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1594#issuecomment-798772091,"What does this commit add

Added all reference pages (362 in total).
Every link has been changed from [text](Page) to [text](Page.md).
Added all reference pages to sidebars.js in alphabetical order. Currently there are 5 subcategories: os, path, premake, string, table.

Live demo here: https://kyriets.github.io/premake-core/docs/
Things to consider before merge

 More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip
 Should we leave auto-generated documents like criteria._compile.md for now? There are more pages like this.
 Should Removing Values be in the reference category? It looks like an api reference to me.

Wiki pages that were NOT migrated
About-This-Wiki.md
Adding-a-new-Action.md
Adding-Source-Files.md
Adding-Unit-Tests.md
Build-Settings.md
Building-Premake.md
Code-Overview.md
Coding-Conventions.md
Command-Line-Arguments.md
Configurations-and-Platforms.md
Contribution-Guidelines.md
Custom-Build-Commands.md
Custom-Rules.md
Debugging-Scripts.md
Developing-Modules.md
Development-Roadmap.md
Embedding-Modules.md
Extending-Premake.md
Feature-Matrix.md
Filters.md
Generating-Project-Files.md
Getting-Help.md
Getting-Premake.md
Home.md
How-To-Help.md
Linking.md
Locating-Scripts.md
Lua-Library-Additions.md
Lua-Library-Additions.updated
Makefile-Projects.md
Migrating-From-4.x.md
Migrating-From-BitBucket.md
Modules-Proposal.md
Modules.md
Overrides-and-Call-Arrays.md
Precompiled-Headers.md
Project-API.md
Scopes-and-Inheritance.md
Sharing-Configuration-Settings.md
Sharing-Your-Module.md
Starting-Your-New-Action.md
System-Scripts.md
Tokens.md
Topics.md
Tutorial
Tutorial-Premake-example-with-GLFW-and-OpenGL.md
Tutorials.md
Usages.md
Using-Modules.md
Using-Premake.md
What's-New-in-5.0.md
What-Is-Premake.md
Who-Uses-Premake.md
Why-Do-Call-Arrays-Need-Functions.md
Workspaces-and-Projects.md
Your-First-Script.md

I suppose @starkos is already in a process of migrating them :-)
FYI: I did not include any malicious or additional text into the docs I migrated.
#1547","More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip

Yes. Every library should have its own category. There should also be a category for‚Ä¶I've never come up with a good name for these‚Ä¶the project APIs? Meaning things like defines() and includedirs() which you use to specify project configuration. People need a place to see all of the available configuration settings that are supported, without the clutter of the other libraries.

Should we leave auto-generated documents like criteria._compile.md for now?

No, please remove these if you can.

Should Removing Values be in the reference category?

No, that is intended to be part of the introductory guide.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1594,2021-03-12T20:58:07Z,2021-03-16T14:39:23Z,2021-03-16T14:39:23Z,MERGED,True,8661,7,278,https://github.com/KyrietS,Added reference pages to docs,3,[],https://github.com/premake/premake-core/pull/1594,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1594#issuecomment-799789679,"What does this commit add

Added all reference pages (362 in total).
Every link has been changed from [text](Page) to [text](Page.md).
Added all reference pages to sidebars.js in alphabetical order. Currently there are 5 subcategories: os, path, premake, string, table.

Live demo here: https://kyriets.github.io/premake-core/docs/
Things to consider before merge

 More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip
 Should we leave auto-generated documents like criteria._compile.md for now? There are more pages like this.
 Should Removing Values be in the reference category? It looks like an api reference to me.

Wiki pages that were NOT migrated
About-This-Wiki.md
Adding-a-new-Action.md
Adding-Source-Files.md
Adding-Unit-Tests.md
Build-Settings.md
Building-Premake.md
Code-Overview.md
Coding-Conventions.md
Command-Line-Arguments.md
Configurations-and-Platforms.md
Contribution-Guidelines.md
Custom-Build-Commands.md
Custom-Rules.md
Debugging-Scripts.md
Developing-Modules.md
Development-Roadmap.md
Embedding-Modules.md
Extending-Premake.md
Feature-Matrix.md
Filters.md
Generating-Project-Files.md
Getting-Help.md
Getting-Premake.md
Home.md
How-To-Help.md
Linking.md
Locating-Scripts.md
Lua-Library-Additions.md
Lua-Library-Additions.updated
Makefile-Projects.md
Migrating-From-4.x.md
Migrating-From-BitBucket.md
Modules-Proposal.md
Modules.md
Overrides-and-Call-Arrays.md
Precompiled-Headers.md
Project-API.md
Scopes-and-Inheritance.md
Sharing-Configuration-Settings.md
Sharing-Your-Module.md
Starting-Your-New-Action.md
System-Scripts.md
Tokens.md
Topics.md
Tutorial
Tutorial-Premake-example-with-GLFW-and-OpenGL.md
Tutorials.md
Usages.md
Using-Modules.md
Using-Premake.md
What's-New-in-5.0.md
What-Is-Premake.md
Who-Uses-Premake.md
Why-Do-Call-Arrays-Need-Functions.md
Workspaces-and-Projects.md
Your-First-Script.md

I suppose @starkos is already in a process of migrating them :-)
FYI: I did not include any malicious or additional text into the docs I migrated.
#1547","If it's easier, we can go ahead and land this PR and then clean up and reorganize in a follow-up.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1594,2021-03-12T20:58:07Z,2021-03-16T14:39:23Z,2021-03-16T14:39:23Z,MERGED,True,8661,7,278,https://github.com/KyrietS,Added reference pages to docs,3,[],https://github.com/premake/premake-core/pull/1594,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1594#issuecomment-800074174,"What does this commit add

Added all reference pages (362 in total).
Every link has been changed from [text](Page) to [text](Page.md).
Added all reference pages to sidebars.js in alphabetical order. Currently there are 5 subcategories: os, path, premake, string, table.

Live demo here: https://kyriets.github.io/premake-core/docs/
Things to consider before merge

 More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip
 Should we leave auto-generated documents like criteria._compile.md for now? There are more pages like this.
 Should Removing Values be in the reference category? It looks like an api reference to me.

Wiki pages that were NOT migrated
About-This-Wiki.md
Adding-a-new-Action.md
Adding-Source-Files.md
Adding-Unit-Tests.md
Build-Settings.md
Building-Premake.md
Code-Overview.md
Coding-Conventions.md
Command-Line-Arguments.md
Configurations-and-Platforms.md
Contribution-Guidelines.md
Custom-Build-Commands.md
Custom-Rules.md
Debugging-Scripts.md
Developing-Modules.md
Development-Roadmap.md
Embedding-Modules.md
Extending-Premake.md
Feature-Matrix.md
Filters.md
Generating-Project-Files.md
Getting-Help.md
Getting-Premake.md
Home.md
How-To-Help.md
Linking.md
Locating-Scripts.md
Lua-Library-Additions.md
Lua-Library-Additions.updated
Makefile-Projects.md
Migrating-From-4.x.md
Migrating-From-BitBucket.md
Modules-Proposal.md
Modules.md
Overrides-and-Call-Arrays.md
Precompiled-Headers.md
Project-API.md
Scopes-and-Inheritance.md
Sharing-Configuration-Settings.md
Sharing-Your-Module.md
Starting-Your-New-Action.md
System-Scripts.md
Tokens.md
Topics.md
Tutorial
Tutorial-Premake-example-with-GLFW-and-OpenGL.md
Tutorials.md
Usages.md
Using-Modules.md
Using-Premake.md
What's-New-in-5.0.md
What-Is-Premake.md
Who-Uses-Premake.md
Why-Do-Call-Arrays-Need-Functions.md
Workspaces-and-Projects.md
Your-First-Script.md

I suppose @starkos is already in a process of migrating them :-)
FYI: I did not include any malicious or additional text into the docs I migrated.
#1547",Let me remove all empty generated documents and Removing Values first. I just didn't have much time for this in the weekend. Then I can leave making categories to you in another commit.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1594,2021-03-12T20:58:07Z,2021-03-16T14:39:23Z,2021-03-16T14:39:23Z,MERGED,True,8661,7,278,https://github.com/KyrietS,Added reference pages to docs,3,[],https://github.com/premake/premake-core/pull/1594,https://github.com/KyrietS,5,https://github.com/premake/premake-core/pull/1594#issuecomment-800116151,"What does this commit add

Added all reference pages (362 in total).
Every link has been changed from [text](Page) to [text](Page.md).
Added all reference pages to sidebars.js in alphabetical order. Currently there are 5 subcategories: os, path, premake, string, table.

Live demo here: https://kyriets.github.io/premake-core/docs/
Things to consider before merge

 More subcategories? Possible candidates are: buffered, criteria, http, io, json, term, zip
 Should we leave auto-generated documents like criteria._compile.md for now? There are more pages like this.
 Should Removing Values be in the reference category? It looks like an api reference to me.

Wiki pages that were NOT migrated
About-This-Wiki.md
Adding-a-new-Action.md
Adding-Source-Files.md
Adding-Unit-Tests.md
Build-Settings.md
Building-Premake.md
Code-Overview.md
Coding-Conventions.md
Command-Line-Arguments.md
Configurations-and-Platforms.md
Contribution-Guidelines.md
Custom-Build-Commands.md
Custom-Rules.md
Debugging-Scripts.md
Developing-Modules.md
Development-Roadmap.md
Embedding-Modules.md
Extending-Premake.md
Feature-Matrix.md
Filters.md
Generating-Project-Files.md
Getting-Help.md
Getting-Premake.md
Home.md
How-To-Help.md
Linking.md
Locating-Scripts.md
Lua-Library-Additions.md
Lua-Library-Additions.updated
Makefile-Projects.md
Migrating-From-4.x.md
Migrating-From-BitBucket.md
Modules-Proposal.md
Modules.md
Overrides-and-Call-Arrays.md
Precompiled-Headers.md
Project-API.md
Scopes-and-Inheritance.md
Sharing-Configuration-Settings.md
Sharing-Your-Module.md
Starting-Your-New-Action.md
System-Scripts.md
Tokens.md
Topics.md
Tutorial
Tutorial-Premake-example-with-GLFW-and-OpenGL.md
Tutorials.md
Usages.md
Using-Modules.md
Using-Premake.md
What's-New-in-5.0.md
What-Is-Premake.md
Who-Uses-Premake.md
Why-Do-Call-Arrays-Need-Functions.md
Workspaces-and-Projects.md
Your-First-Script.md

I suppose @starkos is already in a process of migrating them :-)
FYI: I did not include any malicious or additional text into the docs I migrated.
#1547","All pages with ""This document was generated [...]"" have been removed. Here is a list with all removed files (75 files in total):
buffered.close
buffered.new
buffered.tostring
buffered.write
buffered.writeln
criteria._compile
criteria._delete
criteria._word
criteria.allowPrefix
criteria.flatten
criteria.matches
criteria.new
http.escapeUrlParam
http.reportProgress
json.encode_pretty
os._is64bit
os.compile
os.getSystemTags
os.getWindowsRegistry
os.ishost
os.istarget
os.match
os.matchdone
os.matchisfile
os.matchname
os.matchnext
os.matchstart
os.translateCommandsAndPaths
package.loadlib
package.searchpath
path.isasmfile
path.isidlfile
path.isnativefile
path.isobjcfile
path.isobjcppfile
premake.alias
premake.callArray
premake.capture
premake.captured
premake.checkVersion
premake.clearWarnings
premake.downloadModule
premake.eol
premake.error
premake.esc
premake.escaper
premake.filename
premake.findProjectScript
premake.generate
premake.indent
premake.info
premake.isSemVer
premake.out
premake.outln
premake.override
premake.pop
premake.push
premake.quoted
premake.resolveAlias
premake.showhelp
premake.touch
premake.utf8
premake.w
premake.warn
premake.warnOnce
premake.x
premake.xmlUtf8
table.difference
table.equals
table.filter
table.insertkeyed
table.insertsorted
table.intersect
table.shallowcopy
table.unique

Note: some functions mentioned in pages above look useful. Maybe consider making some sort of todo-list for them if you want to document them in the future.
I consider this PR as done for now. Ready to merge.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1597,2021-03-16T15:51:56Z,2021-03-17T17:45:31Z,2021-03-17T17:45:36Z,MERGED,True,3540,391,53,https://github.com/starkos,Port user guide pages from wiki,1,[],https://github.com/premake/premake-core/pull/1597,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1597,"What does this PR do?
Port all of the user guide content from the wiki to the new website.
How does this PR change Premake's behavior?
Website only, no code changes.
Anything else we should know?
There is still more to do before taking the site live; see #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Port all of the user guide content from the wiki to the new website.
How does this PR change Premake's behavior?
Website only, no code changes.
Anything else we should know?
There is still more to do before taking the site live; see #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1597,2021-03-16T15:51:56Z,2021-03-17T17:45:31Z,2021-03-17T17:45:36Z,MERGED,True,3540,391,53,https://github.com/starkos,Port user guide pages from wiki,1,[],https://github.com/premake/premake-core/pull/1597,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1597#issuecomment-800569154,"What does this PR do?
Port all of the user guide content from the wiki to the new website.
How does this PR change Premake's behavior?
Website only, no code changes.
Anything else we should know?
There is still more to do before taking the site live; see #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","EDIT: In my previous comment I said that using [text](name-of-file) instead of [text](Name-Of-File.md) won't give us warnings about broken links. But it's not true: https://v2.docusaurus.io/docs/docusaurus.config.js/#onbrokenlinks. Sorry for that.
All looks great. Just one little thing. We still have many warnings about broken links.
A few examples:

in Home.md there is broken link to What's-New-in-5.0.md.
in Command-Line-Arguments.md there is Adding-a-new-Action instead of Adding-New-Action.
many broken links in Lua-Library-Additions. Most of them are to the files I deleted as they were auto-generated without sensible content.

run npm run build to see all warnings.
For CI job I'd like to change onBrokenLinks: 'warn' to onBrokenLinks: 'throw' so every version of our website is going to have no broken links.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1597,2021-03-16T15:51:56Z,2021-03-17T17:45:31Z,2021-03-17T17:45:36Z,MERGED,True,3540,391,53,https://github.com/starkos,Port user guide pages from wiki,1,[],https://github.com/premake/premake-core/pull/1597,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1597#issuecomment-801149039,"What does this PR do?
Port all of the user guide content from the wiki to the new website.
How does this PR change Premake's behavior?
Website only, no code changes.
Anything else we should know?
There is still more to do before taking the site live; see #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I guess I misunderstood how/when broken links were reported. I've now run npm run build and fix all issues, and I also added a note to README.md for future developers. If I don't hear otherwise I'll go ahead and merge this later today.

For CI job I'd like to change onBrokenLinks: 'warn' to onBrokenLinks: 'throw'

Yes, definitely.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1597,2021-03-16T15:51:56Z,2021-03-17T17:45:31Z,2021-03-17T17:45:36Z,MERGED,True,3540,391,53,https://github.com/starkos,Port user guide pages from wiki,1,[],https://github.com/premake/premake-core/pull/1597,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1597#issuecomment-801161100,"What does this PR do?
Port all of the user guide content from the wiki to the new website.
How does this PR change Premake's behavior?
Website only, no code changes.
Anything else we should know?
There is still more to do before taking the site live; see #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Warnings about broken markdown links (e.g. [text](Some-File.md)) are reported in dev mode when you run npm start. But raw links, like [text](some/relative/path) are checked during build process only.
Now it looks good to me üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,1597,2021-03-16T15:51:56Z,2021-03-17T17:45:31Z,2021-03-17T17:45:36Z,MERGED,True,3540,391,53,https://github.com/starkos,Port user guide pages from wiki,1,[],https://github.com/premake/premake-core/pull/1597,https://github.com/starkos,5,https://github.com/premake/premake-core/pull/1597#issuecomment-801282342,"What does this PR do?
Port all of the user guide content from the wiki to the new website.
How does this PR change Premake's behavior?
Website only, no code changes.
Anything else we should know?
There is still more to do before taking the site live; see #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thanks for the review. Merging now, and then I'll get started on the index and download landing pages.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1599,2021-03-20T21:05:22Z,2021-03-20T21:06:36Z,2021-03-20T21:07:40Z,CLOSED,False,52,3,3,https://github.com/KyrietS,Temp branch,2,[],https://github.com/premake/premake-core/pull/1599,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1599,"What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1600,2021-03-20T21:38:15Z,2021-03-26T12:07:46Z,2021-03-26T12:07:46Z,MERGED,True,74,3,4,https://github.com/KyrietS,Add GitHub Action workflow for website deployment,1,[],https://github.com/premake/premake-core/pull/1600,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1600,"What does this PR do?
Added website.yml with CI jobs for tests and deployment of the website.
How does this PR change Premake's repo behavior?

Every push and pull request that affects anything in website/** will trigger website build (to make sure no errors were introduced)
Every push to master that affects anything in website/** will trigger website deployment. It means that the website will be built and pushed to master branch of premake.github.io. Repo premake.github.io will not grow in size because no history will be preserved between deployments.

Anything else we should know?
You might ask: ""Where is premake.github.io repo specifieed as deployment target?"". It's inside docusaurus.config.js.

organizationName is GitHub account name: github.com/premake/premake.github.io
projectName is target repository: github.com/premake/premake.github.io

It's weird mapping in my opinion but this is how docusaurus deploy command works.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass I tested this gh-action on my fork with merges and pull requests
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Instructions for @starkos before merging this commit

Generate public and private key.
Go to premake.github.io repository -> settings -> Deploy keys -> Add deploy key. Name it anything you want and paste public key in there. Check Allow write access.
Go to premake-core repository -> settings -> Secrets -> New repository secret. Name it ""WEBSITE_DEPLOY_KEY"" and paste private key in there.
Ready to go.

#1547","What does this PR do?
Added website.yml with CI jobs for tests and deployment of the website.
How does this PR change Premake's repo behavior?

Every push and pull request that affects anything in website/** will trigger website build (to make sure no errors were introduced)
Every push to master that affects anything in website/** will trigger website deployment. It means that the website will be built and pushed to master branch of premake.github.io. Repo premake.github.io will not grow in size because no history will be preserved between deployments.

Anything else we should know?
You might ask: ""Where is premake.github.io repo specifieed as deployment target?"". It's inside docusaurus.config.js.

organizationName is GitHub account name: github.com/premake/premake.github.io
projectName is target repository: github.com/premake/premake.github.io

It's weird mapping in my opinion but this is how docusaurus deploy command works.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass I tested this gh-action on my fork with merges and pull requests
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Instructions for @starkos before merging this commit

Generate public and private key.
Go to premake.github.io repository -> settings -> Deploy keys -> Add deploy key. Name it anything you want and paste public key in there. Check Allow write access.
Go to premake-core repository -> settings -> Secrets -> New repository secret. Name it ""WEBSITE_DEPLOY_KEY"" and paste private key in there.
Ready to go.

#1547",True,{'HOORAY': ['https://github.com/kichel98']}
premake/premake-core,https://github.com/premake/premake-core,1600,2021-03-20T21:38:15Z,2021-03-26T12:07:46Z,2021-03-26T12:07:46Z,MERGED,True,74,3,4,https://github.com/KyrietS,Add GitHub Action workflow for website deployment,1,[],https://github.com/premake/premake-core/pull/1600,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1600#issuecomment-805305753,"What does this PR do?
Added website.yml with CI jobs for tests and deployment of the website.
How does this PR change Premake's repo behavior?

Every push and pull request that affects anything in website/** will trigger website build (to make sure no errors were introduced)
Every push to master that affects anything in website/** will trigger website deployment. It means that the website will be built and pushed to master branch of premake.github.io. Repo premake.github.io will not grow in size because no history will be preserved between deployments.

Anything else we should know?
You might ask: ""Where is premake.github.io repo specifieed as deployment target?"". It's inside docusaurus.config.js.

organizationName is GitHub account name: github.com/premake/premake.github.io
projectName is target repository: github.com/premake/premake.github.io

It's weird mapping in my opinion but this is how docusaurus deploy command works.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass I tested this gh-action on my fork with merges and pull requests
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Instructions for @starkos before merging this commit

Generate public and private key.
Go to premake.github.io repository -> settings -> Deploy keys -> Add deploy key. Name it anything you want and paste public key in there. Check Allow write access.
Go to premake-core repository -> settings -> Secrets -> New repository secret. Name it ""WEBSITE_DEPLOY_KEY"" and paste private key in there.
Ready to go.

#1547",You mean my docusaurus.config.js explanation part? I don't think those two fields that I mention there are ever going to be changed so documenting them in README seems verbose to me.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1600,2021-03-20T21:38:15Z,2021-03-26T12:07:46Z,2021-03-26T12:07:46Z,MERGED,True,74,3,4,https://github.com/KyrietS,Add GitHub Action workflow for website deployment,1,[],https://github.com/premake/premake-core/pull/1600,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1600#issuecomment-805862824,"What does this PR do?
Added website.yml with CI jobs for tests and deployment of the website.
How does this PR change Premake's repo behavior?

Every push and pull request that affects anything in website/** will trigger website build (to make sure no errors were introduced)
Every push to master that affects anything in website/** will trigger website deployment. It means that the website will be built and pushed to master branch of premake.github.io. Repo premake.github.io will not grow in size because no history will be preserved between deployments.

Anything else we should know?
You might ask: ""Where is premake.github.io repo specifieed as deployment target?"". It's inside docusaurus.config.js.

organizationName is GitHub account name: github.com/premake/premake.github.io
projectName is target repository: github.com/premake/premake.github.io

It's weird mapping in my opinion but this is how docusaurus deploy command works.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass I tested this gh-action on my fork with merges and pull requests
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Instructions for @starkos before merging this commit

Generate public and private key.
Go to premake.github.io repository -> settings -> Deploy keys -> Add deploy key. Name it anything you want and paste public key in there. Check Allow write access.
Go to premake-core repository -> settings -> Secrets -> New repository secret. Name it ""WEBSITE_DEPLOY_KEY"" and paste private key in there.
Ready to go.

#1547","I don't think those two fields that I mention there are ever going to be changed

‚Ä¶until they need to be, and and we have to hunt around to find them. Please document those, the deployment action triggers( ""Every push and pull request"") and the need for and location of the deployment keys. Thanks!
Don't worry, we still have lots of space in our README quota :)",True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1600,2021-03-20T21:38:15Z,2021-03-26T12:07:46Z,2021-03-26T12:07:46Z,MERGED,True,74,3,4,https://github.com/KyrietS,Add GitHub Action workflow for website deployment,1,[],https://github.com/premake/premake-core/pull/1600,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1600#issuecomment-806145864,"What does this PR do?
Added website.yml with CI jobs for tests and deployment of the website.
How does this PR change Premake's repo behavior?

Every push and pull request that affects anything in website/** will trigger website build (to make sure no errors were introduced)
Every push to master that affects anything in website/** will trigger website deployment. It means that the website will be built and pushed to master branch of premake.github.io. Repo premake.github.io will not grow in size because no history will be preserved between deployments.

Anything else we should know?
You might ask: ""Where is premake.github.io repo specifieed as deployment target?"". It's inside docusaurus.config.js.

organizationName is GitHub account name: github.com/premake/premake.github.io
projectName is target repository: github.com/premake/premake.github.io

It's weird mapping in my opinion but this is how docusaurus deploy command works.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass I tested this gh-action on my fork with merges and pull requests
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Instructions for @starkos before merging this commit

Generate public and private key.
Go to premake.github.io repository -> settings -> Deploy keys -> Add deploy key. Name it anything you want and paste public key in there. Check Allow write access.
Go to premake-core repository -> settings -> Secrets -> New repository secret. Name it ""WEBSITE_DEPLOY_KEY"" and paste private key in there.
Ready to go.

#1547",I've set up the deployment key. Once #1602 lands I think we have enough in place to go live!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1600,2021-03-20T21:38:15Z,2021-03-26T12:07:46Z,2021-03-26T12:07:46Z,MERGED,True,74,3,4,https://github.com/KyrietS,Add GitHub Action workflow for website deployment,1,[],https://github.com/premake/premake-core/pull/1600,https://github.com/KyrietS,5,https://github.com/premake/premake-core/pull/1600#issuecomment-807380818,"What does this PR do?
Added website.yml with CI jobs for tests and deployment of the website.
How does this PR change Premake's repo behavior?

Every push and pull request that affects anything in website/** will trigger website build (to make sure no errors were introduced)
Every push to master that affects anything in website/** will trigger website deployment. It means that the website will be built and pushed to master branch of premake.github.io. Repo premake.github.io will not grow in size because no history will be preserved between deployments.

Anything else we should know?
You might ask: ""Where is premake.github.io repo specifieed as deployment target?"". It's inside docusaurus.config.js.

organizationName is GitHub account name: github.com/premake/premake.github.io
projectName is target repository: github.com/premake/premake.github.io

It's weird mapping in my opinion but this is how docusaurus deploy command works.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass I tested this gh-action on my fork with merges and pull requests
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Instructions for @starkos before merging this commit

Generate public and private key.
Go to premake.github.io repository -> settings -> Deploy keys -> Add deploy key. Name it anything you want and paste public key in there. Check Allow write access.
Go to premake-core repository -> settings -> Secrets -> New repository secret. Name it ""WEBSITE_DEPLOY_KEY"" and paste private key in there.
Ready to go.

#1547","I added some information to our README file. You can merge it when you are ready. I'd like you to do it so you can track the process of deployment and react if something unexpected happens (it won't).
Note: all history of the master branch in premake.github.io will be overwritten (as far as I understand deploy command in Docusaurus). So you can make a copy somewhere just in case.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1602,2021-03-23T14:37:21Z,2021-03-25T17:43:48Z,2021-03-25T17:43:54Z,MERGED,True,316,151,7,https://github.com/starkos,Rework website home & download pages,1,[],https://github.com/premake/premake-core/pull/1602,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1602,"What does this PR do?
Reworks the placeholder home and download pages on the new Docusaurus-based website.
How does this PR change Premake's behavior?
No changes to Premake itself.
Anything else we should know?
I still need to rework the header and footer, and move some content from docs/ to pages/ such as the help and ""who uses"" pages. Tracking the work on #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Reworks the placeholder home and download pages on the new Docusaurus-based website.
How does this PR change Premake's behavior?
No changes to Premake itself.
Anything else we should know?
I still need to rework the header and footer, and move some content from docs/ to pages/ such as the help and ""who uses"" pages. Tracking the work on #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1602,2021-03-23T14:37:21Z,2021-03-25T17:43:48Z,2021-03-25T17:43:54Z,MERGED,True,316,151,7,https://github.com/starkos,Rework website home & download pages,1,[],https://github.com/premake/premake-core/pull/1602,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1602#issuecomment-805880542,"What does this PR do?
Reworks the placeholder home and download pages on the new Docusaurus-based website.
How does this PR change Premake's behavior?
No changes to Premake itself.
Anything else we should know?
I still need to rework the header and footer, and move some content from docs/ to pages/ such as the help and ""who uses"" pages. Tracking the work on #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Good feedback, thanks! I was going back and forth on the layout of the download links and didn't clean things up properly; I've switched them to <ul> as suggested. I'm hoping/intending to loop back and associate icons with each one at some point (why I wrapped them in <div>).
Console errors are gone. I also backed out my formatting change to docusaurus.config.js to avoid conflicts with your commit.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1604,2021-03-26T13:56:03Z,2021-03-30T13:07:59Z,2021-03-30T13:09:27Z,MERGED,True,208,202,29,https://github.com/starkos,Break out community section on website,1,[],https://github.com/premake/premake-core/pull/1604,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1604,"What does this PR do?
Moves community-related website content out of the 5.x specific docs and into its own top-level area.
How does this PR change Premake's behavior?
No changes to Premake code, just the website.
Anything else we should know?
Addresses a portion of the work required to resolve #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Moves community-related website content out of the 5.x specific docs and into its own top-level area.
How does this PR change Premake's behavior?
No changes to Premake code, just the website.
Anything else we should know?
Addresses a portion of the work required to resolve #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1604,2021-03-26T13:56:03Z,2021-03-30T13:07:59Z,2021-03-30T13:09:27Z,MERGED,True,208,202,29,https://github.com/starkos,Break out community section on website,1,[],https://github.com/premake/premake-core/pull/1604,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1604#issuecomment-808432861,"What does this PR do?
Moves community-related website content out of the 5.x specific docs and into its own top-level area.
How does this PR change Premake's behavior?
No changes to Premake code, just the website.
Anything else we should know?
Addresses a portion of the work required to resolve #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Ok, I got it. In the repo's settings there is a rule for master branch that those tests are necessary to merge. In this situation I suggest removing:
on:
  push:
    paths-ignore: ['website/**']
  pull_request:
    paths-ignore: ['website/**']
and going back to:
on: [push, pull_request]
Tests for binaries are fast enough so it won't be a problem anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1604,2021-03-26T13:56:03Z,2021-03-30T13:07:59Z,2021-03-30T13:09:27Z,MERGED,True,208,202,29,https://github.com/starkos,Break out community section on website,1,[],https://github.com/premake/premake-core/pull/1604,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1604#issuecomment-809681681,"What does this PR do?
Moves community-related website content out of the 5.x specific docs and into its own top-level area.
How does this PR change Premake's behavior?
No changes to Premake code, just the website.
Anything else we should know?
Addresses a portion of the work required to resolve #1547.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I fixed the links and the CI configuration as requested, and also switched to a nicer (IMHO) widget for displaying the sponsors on the download page.",True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1606,2021-04-01T09:39:31Z,2021-04-06T18:13:37Z,2021-04-06T18:13:37Z,MERGED,True,88,1,5,https://github.com/withmorten,add RemoveUnreferencedCodeData option to disable /Zc:inline,1,[],https://github.com/premake/premake-core/pull/1606,https://github.com/withmorten,1,https://github.com/premake/premake-core/pull/1606,"What does this PR do?
This PR adds the option to properly toggle this Visual Studio project build option: https://docs.microsoft.com/en-us/cpp/build/reference/zc-inline-remove-unreferenced-comdat?view=msvc-160
How does this PR change Premake's behavior?
When specifying removeunreferencedcodedata ""On"" or ""Off"", <RemoveUnreferencedCodeData>true</RemoveUnreferencedCodeData> or false will be added to the vcxproj in each build config, similar to usefullpaths.
When it is not specified, nothing changes.
Anything else we should know?
By default, Visual Studio assumes this value to be true, when it is not specified. I was annoyed by this (I wanted to replicate compile options from an old project) and decided to add this.
I pretty much just copypasted the usefullpaths behaviour, so I don't expect this to misbehave :)
Did you check all the boxes?

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR adds the option to properly toggle this Visual Studio project build option: https://docs.microsoft.com/en-us/cpp/build/reference/zc-inline-remove-unreferenced-comdat?view=msvc-160
How does this PR change Premake's behavior?
When specifying removeunreferencedcodedata ""On"" or ""Off"", <RemoveUnreferencedCodeData>true</RemoveUnreferencedCodeData> or false will be added to the vcxproj in each build config, similar to usefullpaths.
When it is not specified, nothing changes.
Anything else we should know?
By default, Visual Studio assumes this value to be true, when it is not specified. I was annoyed by this (I wanted to replicate compile options from an old project) and decided to add this.
I pretty much just copypasted the usefullpaths behaviour, so I don't expect this to misbehave :)
Did you check all the boxes?

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1606,2021-04-01T09:39:31Z,2021-04-06T18:13:37Z,2021-04-06T18:13:37Z,MERGED,True,88,1,5,https://github.com/withmorten,add RemoveUnreferencedCodeData option to disable /Zc:inline,1,[],https://github.com/premake/premake-core/pull/1606,https://github.com/withmorten,2,https://github.com/premake/premake-core/pull/1606#issuecomment-813131851,"What does this PR do?
This PR adds the option to properly toggle this Visual Studio project build option: https://docs.microsoft.com/en-us/cpp/build/reference/zc-inline-remove-unreferenced-comdat?view=msvc-160
How does this PR change Premake's behavior?
When specifying removeunreferencedcodedata ""On"" or ""Off"", <RemoveUnreferencedCodeData>true</RemoveUnreferencedCodeData> or false will be added to the vcxproj in each build config, similar to usefullpaths.
When it is not specified, nothing changes.
Anything else we should know?
By default, Visual Studio assumes this value to be true, when it is not specified. I was annoyed by this (I wanted to replicate compile options from an old project) and decided to add this.
I pretty much just copypasted the usefullpaths behaviour, so I don't expect this to misbehave :)
Did you check all the boxes?

[ x ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[ x ] Add unit tests showing fix or feature works; all tests pass
[ x ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ x ] Follow our coding conventions
[ x ] Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Done! I hope I did everything correct, couldn't really preview it. I ""guessed"" the version it would be available in as alpha 16, hope that was okay :D",True,{}
premake/premake-core,https://github.com/premake/premake-core,1607,2021-04-02T23:21:26Z,2021-04-10T15:35:55Z,2021-04-10T15:35:55Z,MERGED,True,5,1,2,https://github.com/KyrietS,Add Algolia search,1,[],https://github.com/premake/premake-core/pull/1607,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1607,"Sorry that it's taken me so long to make this little change üòÖ
What does this PR do?
Added great instant search-box. Search is demonstrated on my demo website. The only change I need to do in order for this search to actually show our docs (currently search results are from Algolia Search) is to replace apiKey and indexName.
How does this PR change Premake's behavior?
only website is affected
Anything else we should know?

Search index is updated once a day.
We need to apply for API key to DocSearch. Only @starkos can do it. See Instructions below.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

Refers to #1547
You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Applying for apiKey
Algolia is free for open source projects that need search functionality for their documentation websites. It means that Premake is fully legitimate for using Algolia Search for free.
Preconditions:

Only owner of the website/project can apply for DocSearch. (@starkos) ‚úîÔ∏è
Your website must be publicly available. ‚úîÔ∏è
Your website must be a documentation website. ‚úîÔ∏è
Your website must have some final content (no lorem ipsum allowed). ‚úîÔ∏è

Additionaly they say:

Your request will get priority:

If your project is open source. ‚úî
If you're using official integration. ‚úîÔ∏è


So it's time to apply! I kindly ask you @starkos to do this here: https://docsearch.algolia.com/apply/  üôÉ
After they validate your request, you'll get a public apiKey and indexName. You can then send it here. It's public anyway üëç","Sorry that it's taken me so long to make this little change üòÖ
What does this PR do?
Added great instant search-box. Search is demonstrated on my demo website. The only change I need to do in order for this search to actually show our docs (currently search results are from Algolia Search) is to replace apiKey and indexName.
How does this PR change Premake's behavior?
only website is affected
Anything else we should know?

Search index is updated once a day.
We need to apply for API key to DocSearch. Only @starkos can do it. See Instructions below.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

Refers to #1547
You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Applying for apiKey
Algolia is free for open source projects that need search functionality for their documentation websites. It means that Premake is fully legitimate for using Algolia Search for free.
Preconditions:

Only owner of the website/project can apply for DocSearch. (@starkos) ‚úîÔ∏è
Your website must be publicly available. ‚úîÔ∏è
Your website must be a documentation website. ‚úîÔ∏è
Your website must have some final content (no lorem ipsum allowed). ‚úîÔ∏è

Additionaly they say:

Your request will get priority:

If your project is open source. ‚úî
If you're using official integration. ‚úîÔ∏è


So it's time to apply! I kindly ask you @starkos to do this here: https://docsearch.algolia.com/apply/  üôÉ
After they validate your request, you'll get a public apiKey and indexName. You can then send it here. It's public anyway üëç",True,{}
premake/premake-core,https://github.com/premake/premake-core,1607,2021-04-02T23:21:26Z,2021-04-10T15:35:55Z,2021-04-10T15:35:55Z,MERGED,True,5,1,2,https://github.com/KyrietS,Add Algolia search,1,[],https://github.com/premake/premake-core/pull/1607,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1607#issuecomment-813041917,"Sorry that it's taken me so long to make this little change üòÖ
What does this PR do?
Added great instant search-box. Search is demonstrated on my demo website. The only change I need to do in order for this search to actually show our docs (currently search results are from Algolia Search) is to replace apiKey and indexName.
How does this PR change Premake's behavior?
only website is affected
Anything else we should know?

Search index is updated once a day.
We need to apply for API key to DocSearch. Only @starkos can do it. See Instructions below.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

Refers to #1547
You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Applying for apiKey
Algolia is free for open source projects that need search functionality for their documentation websites. It means that Premake is fully legitimate for using Algolia Search for free.
Preconditions:

Only owner of the website/project can apply for DocSearch. (@starkos) ‚úîÔ∏è
Your website must be publicly available. ‚úîÔ∏è
Your website must be a documentation website. ‚úîÔ∏è
Your website must have some final content (no lorem ipsum allowed). ‚úîÔ∏è

Additionaly they say:

Your request will get priority:

If your project is open source. ‚úî
If you're using official integration. ‚úîÔ∏è


So it's time to apply! I kindly ask you @starkos to do this here: https://docsearch.algolia.com/apply/  üôÉ
After they validate your request, you'll get a public apiKey and indexName. You can then send it here. It's public anyway üëç",Request made. Would it make sense to put the API key in GitHub secrets? I guess it still might be accessible via a View Source‚Ä¶ in the browser but at least it won't be hanging out in the sources?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1607,2021-04-02T23:21:26Z,2021-04-10T15:35:55Z,2021-04-10T15:35:55Z,MERGED,True,5,1,2,https://github.com/KyrietS,Add Algolia search,1,[],https://github.com/premake/premake-core/pull/1607,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1607#issuecomment-813049883,"Sorry that it's taken me so long to make this little change üòÖ
What does this PR do?
Added great instant search-box. Search is demonstrated on my demo website. The only change I need to do in order for this search to actually show our docs (currently search results are from Algolia Search) is to replace apiKey and indexName.
How does this PR change Premake's behavior?
only website is affected
Anything else we should know?

Search index is updated once a day.
We need to apply for API key to DocSearch. Only @starkos can do it. See Instructions below.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

Refers to #1547
You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Applying for apiKey
Algolia is free for open source projects that need search functionality for their documentation websites. It means that Premake is fully legitimate for using Algolia Search for free.
Preconditions:

Only owner of the website/project can apply for DocSearch. (@starkos) ‚úîÔ∏è
Your website must be publicly available. ‚úîÔ∏è
Your website must be a documentation website. ‚úîÔ∏è
Your website must have some final content (no lorem ipsum allowed). ‚úîÔ∏è

Additionaly they say:

Your request will get priority:

If your project is open source. ‚úî
If you're using official integration. ‚úîÔ∏è


So it's time to apply! I kindly ask you @starkos to do this here: https://docsearch.algolia.com/apply/  üôÉ
After they validate your request, you'll get a public apiKey and indexName. You can then send it here. It's public anyway üëç","Would it make sense to put the API key in GitHub secrets?

GitHub secrets can be accessed only in workflow (yaml) files.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1607,2021-04-02T23:21:26Z,2021-04-10T15:35:55Z,2021-04-10T15:35:55Z,MERGED,True,5,1,2,https://github.com/KyrietS,Add Algolia search,1,[],https://github.com/premake/premake-core/pull/1607,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1607#issuecomment-817145190,"Sorry that it's taken me so long to make this little change üòÖ
What does this PR do?
Added great instant search-box. Search is demonstrated on my demo website. The only change I need to do in order for this search to actually show our docs (currently search results are from Algolia Search) is to replace apiKey and indexName.
How does this PR change Premake's behavior?
only website is affected
Anything else we should know?

Search index is updated once a day.
We need to apply for API key to DocSearch. Only @starkos can do it. See Instructions below.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

Refers to #1547
You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Applying for apiKey
Algolia is free for open source projects that need search functionality for their documentation websites. It means that Premake is fully legitimate for using Algolia Search for free.
Preconditions:

Only owner of the website/project can apply for DocSearch. (@starkos) ‚úîÔ∏è
Your website must be publicly available. ‚úîÔ∏è
Your website must be a documentation website. ‚úîÔ∏è
Your website must have some final content (no lorem ipsum allowed). ‚úîÔ∏è

Additionaly they say:

Your request will get priority:

If your project is open source. ‚úî
If you're using official integration. ‚úîÔ∏è


So it's time to apply! I kindly ask you @starkos to do this here: https://docsearch.algolia.com/apply/  üôÉ
After they validate your request, you'll get a public apiKey and indexName. You can then send it here. It's public anyway üëç","Response received:
apiKey: '7440a29a5d611582272899683f54f54e', 
indexName: 'premake', 
Could you also add a quick blurb to the website README that mentions Algolia?",True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1607,2021-04-02T23:21:26Z,2021-04-10T15:35:55Z,2021-04-10T15:35:55Z,MERGED,True,5,1,2,https://github.com/KyrietS,Add Algolia search,1,[],https://github.com/premake/premake-core/pull/1607,https://github.com/KyrietS,5,https://github.com/premake/premake-core/pull/1607#issuecomment-817148589,"Sorry that it's taken me so long to make this little change üòÖ
What does this PR do?
Added great instant search-box. Search is demonstrated on my demo website. The only change I need to do in order for this search to actually show our docs (currently search results are from Algolia Search) is to replace apiKey and indexName.
How does this PR change Premake's behavior?
only website is affected
Anything else we should know?

Search index is updated once a day.
We need to apply for API key to DocSearch. Only @starkos can do it. See Instructions below.

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

Refers to #1547
You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!
Applying for apiKey
Algolia is free for open source projects that need search functionality for their documentation websites. It means that Premake is fully legitimate for using Algolia Search for free.
Preconditions:

Only owner of the website/project can apply for DocSearch. (@starkos) ‚úîÔ∏è
Your website must be publicly available. ‚úîÔ∏è
Your website must be a documentation website. ‚úîÔ∏è
Your website must have some final content (no lorem ipsum allowed). ‚úîÔ∏è

Additionaly they say:

Your request will get priority:

If your project is open source. ‚úî
If you're using official integration. ‚úîÔ∏è


So it's time to apply! I kindly ask you @starkos to do this here: https://docsearch.algolia.com/apply/  üôÉ
After they validate your request, you'll get a public apiKey and indexName. You can then send it here. It's public anyway üëç",Works like a charm üòÄ,True,{}
premake/premake-core,https://github.com/premake/premake-core,1608,2021-04-02T23:36:05Z,2021-04-04T13:59:46Z,2021-04-04T13:59:46Z,MERGED,True,1,1,1,https://github.com/KyrietS,Fix Premake logo in README,1,[],https://github.com/premake/premake-core/pull/1608,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1608,"What does this PR do?
Fixes Premake logo in README.md
How does this PR change Premake's behavior?
Markdown fix
Anything else we should know?
nope
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes Premake logo in README.md
How does this PR change Premake's behavior?
Markdown fix
Anything else we should know?
nope
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1609,2021-04-03T01:07:35Z,2021-04-04T13:59:08Z,2021-04-04T13:59:08Z,MERGED,True,13,0,3,https://github.com/KyrietS,Encourage contributors to align the docs,1,[],https://github.com/premake/premake-core/pull/1609,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1609,"What does this PR do?
Premake has evolved over the years, but its documentation has not kept up with the changes. Even now there are a few pending PRs introducing new features, flags and options but none of them would be mentioned in our docs after merge. Since contributing to the docs is possible now, I'd like to see people improving Premake along with its documentation.
This PR introduces a new box for every Pull Request:

 Align documentation to your changes

How does this PR change Premake's behavior?
No changes in behaviour
Anything else we should know?
No
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Premake has evolved over the years, but its documentation has not kept up with the changes. Even now there are a few pending PRs introducing new features, flags and options but none of them would be mentioned in our docs after merge. Since contributing to the docs is possible now, I'd like to see people improving Premake along with its documentation.
This PR introduces a new box for every Pull Request:

 Align documentation to your changes

How does this PR change Premake's behavior?
No changes in behaviour
Anything else we should know?
No
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1610,2021-04-06T19:26:56Z,2021-04-10T14:28:45Z,2021-04-10T14:34:24Z,MERGED,True,61,54,10,https://github.com/starkos,Improve new user website navigation,1,[],https://github.com/premake/premake-core/pull/1610,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1610,"What does this PR do?
Make a few improvements to the website navigation:

Add GitHub & Twitter links to the navbar
Clean up and improve footer links
Improve the flow of the intro pages
Fix broken link on Building Premake
Use a proper favicon
Add OS icons on download page

How does this PR change Premake's behavior?
Website only; no Premake code changes.
Anything else we should know?
See #1547 for all the website setup discussion.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Make a few improvements to the website navigation:

Add GitHub & Twitter links to the navbar
Clean up and improve footer links
Improve the flow of the intro pages
Fix broken link on Building Premake
Use a proper favicon
Add OS icons on download page

How does this PR change Premake's behavior?
Website only; no Premake code changes.
Anything else we should know?
See #1547 for all the website setup discussion.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1614,2021-04-11T13:41:35Z,2021-04-12T14:13:05Z,2021-04-12T14:13:27Z,MERGED,True,420,2,9,https://github.com/starkos,Set up blog; move community updates,1,[],https://github.com/premake/premake-core/pull/1614,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1614,"What does this PR do?
Move the community updates from OpenCollective to our own site, for better visibility and real code blocks.
How does this PR change Premake's behavior?
Website only; no change.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Move the community updates from OpenCollective to our own site, for better visibility and real code blocks.
How does this PR change Premake's behavior?
Website only; no change.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1617,2021-04-15T12:52:12Z,2021-04-19T14:55:46Z,2021-09-07T14:55:43Z,CLOSED,False,23,2,2,https://github.com/starkos,Fix handling of mixed-case flags in option.each(),1,['bug'],https://github.com/premake/premake-core/pull/1617,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1617,"What does this PR do?
Fixes handling of mixed case options (""MyFlag""), which were causing the --help output to fail.
How does this PR change Premake's behavior?
premake.option.each() will no longer break in when mixed case flags are present.
Anything else we should know?
Closes #1569.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes handling of mixed case options (""MyFlag""), which were causing the --help output to fail.
How does this PR change Premake's behavior?
premake.option.each() will no longer break in when mixed case flags are present.
Anything else we should know?
Closes #1569.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1617,2021-04-15T12:52:12Z,2021-04-19T14:55:46Z,2021-09-07T14:55:43Z,CLOSED,False,23,2,2,https://github.com/starkos,Fix handling of mixed-case flags in option.each(),1,['bug'],https://github.com/premake/premake-core/pull/1617,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1617#issuecomment-914375055,"What does this PR do?
Fixes handling of mixed case options (""MyFlag""), which were causing the --help output to fail.
How does this PR change Premake's behavior?
premake.option.each() will no longer break in when mixed case flags are present.
Anything else we should know?
Closes #1569.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",It looks like I applied this and then broke it again. Putting it back in my queue.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1619,2021-04-16T14:57:29Z,2021-04-19T15:01:52Z,2021-04-19T15:52:43Z,MERGED,True,347,13,5,https://github.com/kellygravelyn,Xcode embed libraries,3,[],https://github.com/premake/premake-core/pull/1619,https://github.com/kellygravelyn,1,https://github.com/premake/premake-core/pull/1619,"This is a continuation of #1524. I apparently deleted my fork at some point so in order to address the PR feedback I had to re-fork and open a new PR. My apologies for making this harder to track as a result.
0e93130 and 4ed7424 are just taken directly from #1524. 626eedb is the API change requested by @starkos in #1524. The tests all passed for me locally and I was able to generate an Xcode project that did the right thing so the changes still appear to work for me.","This is a continuation of #1524. I apparently deleted my fork at some point so in order to address the PR feedback I had to re-fork and open a new PR. My apologies for making this harder to track as a result.
0e93130 and 4ed7424 are just taken directly from #1524. 626eedb is the API change requested by @starkos in #1524. The tests all passed for me locally and I was able to generate an Xcode project that did the right thing so the changes still appear to work for me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1625,2021-05-11T18:13:59Z,2021-05-11T18:50:42Z,2021-05-11T18:50:42Z,MERGED,True,0,9,2,https://github.com/noresources,"Remove ""*ng"" action deprecation and auto-fix",1,[],https://github.com/premake/premake-core/pull/1625,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1625,"Fix #1601
What does this PR do?
Remove deprecation warning and auto-renaming of actions ending with ""ng""","Fix #1601
What does this PR do?
Remove deprecation warning and auto-renaming of actions ending with ""ng""",True,{}
premake/premake-core,https://github.com/premake/premake-core,1627,2021-05-17T10:37:24Z,2021-05-29T18:19:18Z,2021-05-31T07:27:59Z,MERGED,True,62,79,5,https://github.com/Jarod42,Enable pchheader for Codelite,2,[],https://github.com/premake/premake-core/pull/1627,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1627,"What does this PR do?
Add missing support of pchheader for Codelite generator:
close #1621
How does this PR change Premake's behavior?
bug fixes of Codelite generator
Anything else we should know?
I also added pch to my sample tests in https://github.com/Jarod42/premake-sample-projects
My check there is partially broken as even if Codelite actually failed to build, test is marked as successful :-(
but log show the issue.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Add missing support of pchheader for Codelite generator:
close #1621
How does this PR change Premake's behavior?
bug fixes of Codelite generator
Anything else we should know?
I also added pch to my sample tests in https://github.com/Jarod42/premake-sample-projects
My check there is partially broken as even if Codelite actually failed to build, test is marked as successful :-(
but log show the issue.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1627,2021-05-17T10:37:24Z,2021-05-29T18:19:18Z,2021-05-31T07:27:59Z,MERGED,True,62,79,5,https://github.com/Jarod42,Enable pchheader for Codelite,2,[],https://github.com/premake/premake-core/pull/1627,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1627#issuecomment-850876891,"What does this PR do?
Add missing support of pchheader for Codelite generator:
close #1621
How does this PR change Premake's behavior?
bug fixes of Codelite generator
Anything else we should know?
I also added pch to my sample tests in https://github.com/Jarod42/premake-sample-projects
My check there is partially broken as even if Codelite actually failed to build, test is marked as successful :-(
but log show the issue.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks for the contribution!,True,{}
premake/premake-core,https://github.com/premake/premake-core,1629,2021-05-20T04:18:33Z,2021-08-10T10:34:34Z,2021-08-10T10:34:34Z,MERGED,True,45,7,3,https://github.com/tempura-sukiyaki,Added support for Premake on macOS universal binary,4,[],https://github.com/premake/premake-core/pull/1629,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1629,"What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1629,2021-05-20T04:18:33Z,2021-08-10T10:34:34Z,2021-08-10T10:34:34Z,MERGED,True,45,7,3,https://github.com/tempura-sukiyaki,Added support for Premake on macOS universal binary,4,[],https://github.com/premake/premake-core/pull/1629,https://github.com/tempura-sukiyaki,2,https://github.com/premake/premake-core/pull/1629#issuecomment-844989313,"What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","It may be a matter of opinion whether Premake needs to support universal binaries right now or not.
As long as Rosetta 2 is supported, I don't think there is any need to rush.
However, I think it will have to be done eventually.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1629,2021-05-20T04:18:33Z,2021-08-10T10:34:34Z,2021-08-10T10:34:34Z,MERGED,True,45,7,3,https://github.com/tempura-sukiyaki,Added support for Premake on macOS universal binary,4,[],https://github.com/premake/premake-core/pull/1629,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1629#issuecomment-846394642,"What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","ARM has definitely got momentum; we're probably going to have support it for all platforms soon. I don't want to require macOS 11.0 yet, so this will need to be a switch of some kind.
What about a new command line flag like --arm or --arch=arm to control the binary type? Something not tied to macOS so we can support ARM Linux & Windows too?",True,{'THUMBS_UP': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1629,2021-05-20T04:18:33Z,2021-08-10T10:34:34Z,2021-08-10T10:34:34Z,MERGED,True,45,7,3,https://github.com/tempura-sukiyaki,Added support for Premake on macOS universal binary,4,[],https://github.com/premake/premake-core/pull/1629,https://github.com/tempura-sukiyaki,4,https://github.com/premake/premake-core/pull/1629#issuecomment-846910890,"What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I wrote the source code to try it out.
How does it look like this?
master...tempura-sukiyaki:premake-arch
However, I do not have a Linux environment, so I have not been able to verify that this works correctly on Linux.
In Visual Studio, I think it might be better to ignore this option and always include all platforms.
master...tempura-sukiyaki:premake-arch2",True,{}
premake/premake-core,https://github.com/premake/premake-core,1629,2021-05-20T04:18:33Z,2021-08-10T10:34:34Z,2021-08-10T10:34:34Z,MERGED,True,45,7,3,https://github.com/tempura-sukiyaki,Added support for Premake on macOS universal binary,4,[],https://github.com/premake/premake-core/pull/1629,https://github.com/tempura-sukiyaki,5,https://github.com/premake/premake-core/pull/1629#issuecomment-847455619,"What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I added the --arch option.
If you want to build ARM64 binaries, you can write the following.
make -f Bootstrap.mak osx PLATFORM=ARM64

nmake -f Bootstrap.mak windows PLATFORM=ARM64

Also, to build the universal binary on macOS, write the following
make -f Bootstrap.mak osx PLATFORM=Universal
On Linux, I didn't know how to specify the architecture, so I didn't do anything.
Adding the following statement to premake5.lua did not seem to work.
		filter { ""system:linux"", ""options:arch=ARM"" }
			architecture ""ARM""

		filter { ""system:linux"", ""options:arch=ARM64"" }
			architecture ""ARM64""

		filter { ""system:linux"", ""options:arch=x86 or arch=Win32"" }
			architecture ""x86""

		filter { ""system:linux"", ""options:arch=x86_64 or arch=x64"" }
			architecture ""x86_64""
Translated with www.DeepL.com/Translator (free version)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1629,2021-05-20T04:18:33Z,2021-08-10T10:34:34Z,2021-08-10T10:34:34Z,MERGED,True,45,7,3,https://github.com/tempura-sukiyaki,Added support for Premake on macOS universal binary,4,[],https://github.com/premake/premake-core/pull/1629,https://github.com/nickclark2016,6,https://github.com/premake/premake-core/pull/1629#issuecomment-893872951,"What does this PR do?
This change allows Premake to be built for Arm64/x86_64 universal binaries on macOS.
How does this PR change Premake's behavior?
Premake runs on Arm64 on Macs using the Apple M1 processor.
There are no other changes.
Anything else we should know?
Building universal binaries requires Xcode Command Line Tools version 12.2 or later.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",What's the status on this PR?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1631,2021-05-26T02:59:39Z,2021-06-07T22:03:59Z,2021-06-07T22:03:59Z,MERGED,True,44,4,2,https://github.com/tempura-sukiyaki,Sort `buildinputs` and `buildoutputs` on xcode4,2,[],https://github.com/premake/premake-core/pull/1631,https://github.com/tempura-sukiyaki,1,https://github.com/premake/premake-core/pull/1631,"What does this PR do?
Fixed a issue where xcodeproj would be modified even if the Premake script was not modified if multiple paths were specified for buildinputs and/or buildoutputs.
How does this PR change Premake's behavior?
The above issue was caused by an indeterminate sort order of Lua's key-value tables, so that part has been fixed.
Anything else we should know?
None.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
Fixed a issue where xcodeproj would be modified even if the Premake script was not modified if multiple paths were specified for buildinputs and/or buildoutputs.
How does this PR change Premake's behavior?
The above issue was caused by an indeterminate sort order of Lua's key-value tables, so that part has been fixed.
Anything else we should know?
None.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1631,2021-05-26T02:59:39Z,2021-06-07T22:03:59Z,2021-06-07T22:03:59Z,MERGED,True,44,4,2,https://github.com/tempura-sukiyaki,Sort `buildinputs` and `buildoutputs` on xcode4,2,[],https://github.com/premake/premake-core/pull/1631,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1631#issuecomment-850823162,"What does this PR do?
Fixed a issue where xcodeproj would be modified even if the Premake script was not modified if multiple paths were specified for buildinputs and/or buildoutputs.
How does this PR change Premake's behavior?
The above issue was caused by an indeterminate sort order of Lua's key-value tables, so that part has been fixed.
Anything else we should know?
None.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Do the other generators sort these too? We should try to be consistent.
Also, is there a case where a user wouldn't want the inputs to be sorted, but instead in the order they specified?",True,{'THUMBS_UP': ['https://github.com/tempura-sukiyaki']}
premake/premake-core,https://github.com/premake/premake-core,1631,2021-05-26T02:59:39Z,2021-06-07T22:03:59Z,2021-06-07T22:03:59Z,MERGED,True,44,4,2,https://github.com/tempura-sukiyaki,Sort `buildinputs` and `buildoutputs` on xcode4,2,[],https://github.com/premake/premake-core/pull/1631,https://github.com/tempura-sukiyaki,3,https://github.com/premake/premake-core/pull/1631#issuecomment-852497015,"What does this PR do?
Fixed a issue where xcodeproj would be modified even if the Premake script was not modified if multiple paths were specified for buildinputs and/or buildoutputs.
How does this PR change Premake's behavior?
The above issue was caused by an indeterminate sort order of Lua's key-value tables, so that part has been fixed.
Anything else we should know?
None.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Thanks for the review.
You're right, it didn't need to be sorted to maintain the order, so I fixed table.insertsorted to table.insert.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1635,2021-06-01T08:14:32Z,2021-06-14T16:21:37Z,2021-06-14T16:21:37Z,MERGED,True,1,1,1,https://github.com/abhiss,Fix typo in Using Premake documentation,2,[],https://github.com/premake/premake-core/pull/1635,https://github.com/abhiss,1,https://github.com/premake/premake-core/pull/1635,"What does this PR do?
Fixes a typo in documentation to avoid confusion.
How does this PR change Premake's behavior?
Documentation change.
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes a typo in documentation to avoid confusion.
How does this PR change Premake's behavior?
Documentation change.
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1638,2021-06-01T21:53:35Z,2021-06-09T14:55:14Z,2021-06-09T14:55:14Z,MERGED,True,540,527,37,https://github.com/KyrietS,Fix broken links in docs,1,[],https://github.com/premake/premake-core/pull/1638,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1638,"What does this PR do?
Fix broken links in docs (#1634)
How does this PR change Premake's behavior?
no
Anything else we should know?

I've added some additional information to website/README about referencing other pages in docs.


Adding a reference to another documentation page
Always reference another documentation page like this:
[some text](Case-Sensitive-Filename.md)
and never like this:
[some text](some-markdown-file)
[some text](/docs/some-markdown-file)
[some text](https://premake.github.io/docs/some-markdown-file)


As always I'm hosting a working demo to prove that this PR fixes the issue:
https://kyriets.github.io/premake-core/docs/Developing-Modules

closes #1634
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fix broken links in docs (#1634)
How does this PR change Premake's behavior?
no
Anything else we should know?

I've added some additional information to website/README about referencing other pages in docs.


Adding a reference to another documentation page
Always reference another documentation page like this:
[some text](Case-Sensitive-Filename.md)
and never like this:
[some text](some-markdown-file)
[some text](/docs/some-markdown-file)
[some text](https://premake.github.io/docs/some-markdown-file)


As always I'm hosting a working demo to prove that this PR fixes the issue:
https://kyriets.github.io/premake-core/docs/Developing-Modules

closes #1634
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1642,2021-06-10T10:04:27Z,2021-06-10T19:40:32Z,2021-06-10T19:40:32Z,MERGED,True,1,1,1,https://github.com/Troplo,Fix spelling mistake,1,[],https://github.com/premake/premake-core/pull/1642,https://github.com/Troplo,1,https://github.com/premake/premake-core/pull/1642,"What does this PR do?
Fixes spelling mistake (Microsft to Microsoft) in documentation.
How does this PR change Premake's behavior?
There are no breaking changes.
Anything else we should know?
No
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes spelling mistake (Microsft to Microsoft) in documentation.
How does this PR change Premake's behavior?
There are no breaking changes.
Anything else we should know?
No
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1644,2021-06-10T20:24:23Z,2021-06-10T21:54:50Z,2021-06-10T22:11:27Z,MERGED,True,2,0,1,https://github.com/KyrietS,Fix author name and update time on pages,1,[],https://github.com/premake/premake-core/pull/1644,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1644,"What does this PR do?
Currently, every page has the same author and update time.

The problem is that actions/checkout@v2 fetches only last commit by default but docusaurus needs to know about every file's history to generate proper metadata. This PR fixes the issue.
with:
  fetch-depth: 0

this tells actions/checkout@v2 to fetch all commits, all branches, all tags, etc.
Working demo: here
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Currently, every page has the same author and update time.

The problem is that actions/checkout@v2 fetches only last commit by default but docusaurus needs to know about every file's history to generate proper metadata. This PR fixes the issue.
with:
  fetch-depth: 0

this tells actions/checkout@v2 to fetch all commits, all branches, all tags, etc.
Working demo: here
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1644,2021-06-10T20:24:23Z,2021-06-10T21:54:50Z,2021-06-10T22:11:27Z,MERGED,True,2,0,1,https://github.com/KyrietS,Fix author name and update time on pages,1,[],https://github.com/premake/premake-core/pull/1644,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1644#issuecomment-859113029,"What does this PR do?
Currently, every page has the same author and update time.

The problem is that actions/checkout@v2 fetches only last commit by default but docusaurus needs to know about every file's history to generate proper metadata. This PR fixes the issue.
with:
  fetch-depth: 0

this tells actions/checkout@v2 to fetch all commits, all branches, all tags, etc.
Working demo: here
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Oh, and this change of course didn't trigger website rebuild üòÖ
I think it's not critical fix so we can wait for some other PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1645,2021-06-11T18:21:39Z,2021-06-14T15:42:22Z,2021-06-15T10:54:39Z,MERGED,True,35,4,2,https://github.com/Jarod42,Add missing support for prebuildmessage/postbuildmessage for Codelite.,1,[],https://github.com/premake/premake-core/pull/1645,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1645,"What does this PR do?
Add missing support for prebuildmessage/postbuildmessage for Codelite.
How does this PR change Premake's behavior?
Change only Codelite generator.
Anything else we should know?
closes #1643
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
Add missing support for prebuildmessage/postbuildmessage for Codelite.
How does this PR change Premake's behavior?
Change only Codelite generator.
Anything else we should know?
closes #1643
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1649,2021-06-14T08:48:24Z,2021-06-14T11:45:50Z,2021-06-14T11:45:50Z,MERGED,True,2,1,1,https://github.com/noresources,Fix curl header search path,1,[],https://github.com/premake/premake-core/pull/1649,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1649,"Consider curl include directory as system header search path to match #include directives with angle brackets.
What does this PR do?
Fix premake xcode4 project
How does this PR change Premake's behavior?
Nothing. Just allow to generate a correct project to build premake with modern Xcode
Anything else we should know?
Xcode is by default less tolerant regarding mismatch between user header search path (#include ""..."") and system header search path (#include <...>).
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Consider curl include directory as system header search path to match #include directives with angle brackets.
What does this PR do?
Fix premake xcode4 project
How does this PR change Premake's behavior?
Nothing. Just allow to generate a correct project to build premake with modern Xcode
Anything else we should know?
Xcode is by default less tolerant regarding mismatch between user header search path (#include ""..."") and system header search path (#include <...>).
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1654,2021-06-22T08:44:40Z,2021-06-28T20:41:19Z,2021-06-28T20:41:19Z,MERGED,True,20,0,2,https://github.com/noresources,xcode4: Fix missing link of sibling project with custom targetextension,1,[],https://github.com/premake/premake-core/pull/1654,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1654,"When a node category cannot be determined by extension,
use the configuration kind when available.
Add unit test to illustrate the case.
What does this PR do?
Project with a custom targetextension were not linked to other projects
because the strategy used to determine Xocde node type was uniquely based
on node name extension.
This patch adds a ""last chance"" fallback based on attached configuration kind
How does this PR change Premake's behavior?
Fix a edge case bug. Should not change the behavior for most common cases.
Anything else we should know?
I kept the previous behavior as the main strategy to avoid breaking changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","When a node category cannot be determined by extension,
use the configuration kind when available.
Add unit test to illustrate the case.
What does this PR do?
Project with a custom targetextension were not linked to other projects
because the strategy used to determine Xocde node type was uniquely based
on node name extension.
This patch adds a ""last chance"" fallback based on attached configuration kind
How does this PR change Premake's behavior?
Fix a edge case bug. Should not change the behavior for most common cases.
Anything else we should know?
I kept the previous behavior as the main strategy to avoid breaking changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1654,2021-06-22T08:44:40Z,2021-06-28T20:41:19Z,2021-06-28T20:41:19Z,MERGED,True,20,0,2,https://github.com/noresources,xcode4: Fix missing link of sibling project with custom targetextension,1,[],https://github.com/premake/premake-core/pull/1654,https://github.com/noresources,2,https://github.com/premake/premake-core/pull/1654#issuecomment-867490269,"When a node category cannot be determined by extension,
use the configuration kind when available.
Add unit test to illustrate the case.
What does this PR do?
Project with a custom targetextension were not linked to other projects
because the strategy used to determine Xocde node type was uniquely based
on node name extension.
This patch adds a ""last chance"" fallback based on attached configuration kind
How does this PR change Premake's behavior?
Fix a edge case bug. Should not change the behavior for most common cases.
Anything else we should know?
I kept the previous behavior as the main strategy to avoid breaking changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Code updated with early return and a single-line ""if""",True,{}
premake/premake-core,https://github.com/premake/premake-core,1654,2021-06-22T08:44:40Z,2021-06-28T20:41:19Z,2021-06-28T20:41:19Z,MERGED,True,20,0,2,https://github.com/noresources,xcode4: Fix missing link of sibling project with custom targetextension,1,[],https://github.com/premake/premake-core/pull/1654,https://github.com/noresources,3,https://github.com/premake/premake-core/pull/1654#issuecomment-869964598,"When a node category cannot be determined by extension,
use the configuration kind when available.
Add unit test to illustrate the case.
What does this PR do?
Project with a custom targetextension were not linked to other projects
because the strategy used to determine Xocde node type was uniquely based
on node name extension.
This patch adds a ""last chance"" fallback based on attached configuration kind
How does this PR change Premake's behavior?
Fix a edge case bug. Should not change the behavior for most common cases.
Anything else we should know?
I kept the previous behavior as the main strategy to avoid breaking changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","This looks good to me. Would you mind rebasing it against or merging it with the latest main branch? It should be trivial merge, but a big line ending fix just landed which might cause issues.

Branch was rebased (twice) without issues",True,{}
premake/premake-core,https://github.com/premake/premake-core,1655,2021-06-23T23:57:59Z,2021-06-25T12:47:41Z,2021-07-26T17:50:46Z,MERGED,True,79,0,6,https://github.com/nickclark2016,Compiler Version support for Visual Studion 2017+,2,[],https://github.com/premake/premake-core/pull/1655,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1655,"What does this PR do?
Adds compiler version support for VS 2017 and newer
How does this PR change Premake's behavior?
No breaking changes, all new functionality.
Syntax
toolsversion ""1.2.3""
This will add the following to the globals group in VS 2017 and newer project files.
<VCToolsVersion>1.2.3</VCToolsVersion>
It is worth noting that this does no checks for legal tool versions. That is on the user. I believe it would be more hassle than it is worth to go check for all installed tool version, then validate user input against that.
Anything else we should know?
Closes #1612
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds compiler version support for VS 2017 and newer
How does this PR change Premake's behavior?
No breaking changes, all new functionality.
Syntax
toolsversion ""1.2.3""
This will add the following to the globals group in VS 2017 and newer project files.
<VCToolsVersion>1.2.3</VCToolsVersion>
It is worth noting that this does no checks for legal tool versions. That is on the user. I believe it would be more hassle than it is worth to go check for all installed tool version, then validate user input against that.
Anything else we should know?
Closes #1612
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1655,2021-06-23T23:57:59Z,2021-06-25T12:47:41Z,2021-07-26T17:50:46Z,MERGED,True,79,0,6,https://github.com/nickclark2016,Compiler Version support for Visual Studion 2017+,2,[],https://github.com/premake/premake-core/pull/1655,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1655#issuecomment-868681745,"What does this PR do?
Adds compiler version support for VS 2017 and newer
How does this PR change Premake's behavior?
No breaking changes, all new functionality.
Syntax
toolsversion ""1.2.3""
This will add the following to the globals group in VS 2017 and newer project files.
<VCToolsVersion>1.2.3</VCToolsVersion>
It is worth noting that this does no checks for legal tool versions. That is on the user. I believe it would be more hassle than it is worth to go check for all installed tool version, then validate user input against that.
Anything else we should know?
Closes #1612
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Hey @nickclark2016, you forgot to add ""toolsversion"" to website/sidebars.js file. Can you fix it in another commit?
Btw. the latest version of docusaurus introduced some kind of automation for sidebars. It's not perfect yet but I'll try this feature in time.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1655,2021-06-23T23:57:59Z,2021-06-25T12:47:41Z,2021-07-26T17:50:46Z,MERGED,True,79,0,6,https://github.com/nickclark2016,Compiler Version support for Visual Studion 2017+,2,[],https://github.com/premake/premake-core/pull/1655,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1655#issuecomment-868721648,"What does this PR do?
Adds compiler version support for VS 2017 and newer
How does this PR change Premake's behavior?
No breaking changes, all new functionality.
Syntax
toolsversion ""1.2.3""
This will add the following to the globals group in VS 2017 and newer project files.
<VCToolsVersion>1.2.3</VCToolsVersion>
It is worth noting that this does no checks for legal tool versions. That is on the user. I believe it would be more hassle than it is worth to go check for all installed tool version, then validate user input against that.
Anything else we should know?
Closes #1612
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@KyrietS Ahh crap, yup, I'll do that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1655,2021-06-23T23:57:59Z,2021-06-25T12:47:41Z,2021-07-26T17:50:46Z,MERGED,True,79,0,6,https://github.com/nickclark2016,Compiler Version support for Visual Studion 2017+,2,[],https://github.com/premake/premake-core/pull/1655,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1655#issuecomment-886876354,"What does this PR do?
Adds compiler version support for VS 2017 and newer
How does this PR change Premake's behavior?
No breaking changes, all new functionality.
Syntax
toolsversion ""1.2.3""
This will add the following to the globals group in VS 2017 and newer project files.
<VCToolsVersion>1.2.3</VCToolsVersion>
It is worth noting that this does no checks for legal tool versions. That is on the user. I believe it would be more hassle than it is worth to go check for all installed tool version, then validate user input against that.
Anything else we should know?
Closes #1612
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@nickclark2016 *cough* *cough* üôÉ,True,{}
premake/premake-core,https://github.com/premake/premake-core,1655,2021-06-23T23:57:59Z,2021-06-25T12:47:41Z,2021-07-26T17:50:46Z,MERGED,True,79,0,6,https://github.com/nickclark2016,Compiler Version support for Visual Studion 2017+,2,[],https://github.com/premake/premake-core/pull/1655,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1655#issuecomment-886904458,"What does this PR do?
Adds compiler version support for VS 2017 and newer
How does this PR change Premake's behavior?
No breaking changes, all new functionality.
Syntax
toolsversion ""1.2.3""
This will add the following to the globals group in VS 2017 and newer project files.
<VCToolsVersion>1.2.3</VCToolsVersion>
It is worth noting that this does no checks for legal tool versions. That is on the user. I believe it would be more hassle than it is worth to go check for all installed tool version, then validate user input against that.
Anything else we should know?
Closes #1612
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@nickclark2016 cough cough üôÉ

Oh crap, totally slipped my mind. Standby",True,{}
premake/premake-core,https://github.com/premake/premake-core,1657,2021-06-24T00:15:56Z,2021-06-24T12:13:45Z,2021-06-24T12:13:46Z,MERGED,True,2022,2022,14,https://github.com/nickclark2016,Renormalize line endings,1,[],https://github.com/premake/premake-core/pull/1657,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1657,"What does this PR do?
Maintenance commit. This normalizes all line endings in the repository to LF.
How does this PR change Premake's behavior?
No change.
Anything else we should know?
Closes #1656
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Maintenance commit. This normalizes all line endings in the repository to LF.
How does this PR change Premake's behavior?
No change.
Anything else we should know?
Closes #1656
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1657,2021-06-24T00:15:56Z,2021-06-24T12:13:45Z,2021-06-24T12:13:46Z,MERGED,True,2022,2022,14,https://github.com/nickclark2016,Renormalize line endings,1,[],https://github.com/premake/premake-core/pull/1657,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1657#issuecomment-867239442,"What does this PR do?
Maintenance commit. This normalizes all line endings in the repository to LF.
How does this PR change Premake's behavior?
No change.
Anything else we should know?
Closes #1656
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I would like to point at that it appears large, but it is all just line ending fixes.  It also fixed issues in a dependency.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1658,2021-06-24T19:03:22Z,2021-07-08T10:27:37Z,2021-07-08T10:27:37Z,MERGED,True,81,9,6,https://github.com/nickclark2016,Fix D module compiler output for visual studio,3,[],https://github.com/premake/premake-core/pull/1658,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1658,"What does this PR do?
This fixes the output for the D compiler.  In Visual Studio, this forces a compiler to be set in the project file.
The problem was that the toolset for D projects was always being set to ""msc-v142"" for Visual Studio 2019 (did not check the value for previous versions of VS).  If the toolset was defined in the premake script, it was not an allowed value.  The only way for this to work previously was by using --dc=dmd (change dmd to your preferred D compiler).
How does this PR change Premake's behavior?
There are no breaking changes.  All changes are to fix the ""D"" module (and allow for other module support).  Premake now supports the ""dmd"", ""gdc"", and ""ldc"" toolset options for D projects.  This was done by adding them to the allowed values in the ""toolset"" premake field.
Usage:
workspace ""test""
    configurations { ""debug"" }

    project ""t""
        kind ""ConsoleApp""
        language ""D""
        toolset ""dmd""
        files ""**.d""
| Module / Toolset | Old Output | New Output |
| --- | --- |
| VS 2019 / dmd |  | 0 |
| VS 2019 / gdc |  | 1 |
| VS 2019 / ldc |  | 2 |
Anything else we should know?
Closes #1603
So what next? The gmake module still needs work to actually function.  When running with ""gmake"" on the command line, it still attempts to go through the C++ module instead of the D module.  In order to minimize the number of changes in the review, I will leave that for another day.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This fixes the output for the D compiler.  In Visual Studio, this forces a compiler to be set in the project file.
The problem was that the toolset for D projects was always being set to ""msc-v142"" for Visual Studio 2019 (did not check the value for previous versions of VS).  If the toolset was defined in the premake script, it was not an allowed value.  The only way for this to work previously was by using --dc=dmd (change dmd to your preferred D compiler).
How does this PR change Premake's behavior?
There are no breaking changes.  All changes are to fix the ""D"" module (and allow for other module support).  Premake now supports the ""dmd"", ""gdc"", and ""ldc"" toolset options for D projects.  This was done by adding them to the allowed values in the ""toolset"" premake field.
Usage:
workspace ""test""
    configurations { ""debug"" }

    project ""t""
        kind ""ConsoleApp""
        language ""D""
        toolset ""dmd""
        files ""**.d""
| Module / Toolset | Old Output | New Output |
| --- | --- |
| VS 2019 / dmd |  | 0 |
| VS 2019 / gdc |  | 1 |
| VS 2019 / ldc |  | 2 |
Anything else we should know?
Closes #1603
So what next? The gmake module still needs work to actually function.  When running with ""gmake"" on the command line, it still attempts to go through the C++ module instead of the D module.  In order to minimize the number of changes in the review, I will leave that for another day.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1658,2021-06-24T19:03:22Z,2021-07-08T10:27:37Z,2021-07-08T10:27:37Z,MERGED,True,81,9,6,https://github.com/nickclark2016,Fix D module compiler output for visual studio,3,[],https://github.com/premake/premake-core/pull/1658,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1658#issuecomment-868546905,"What does this PR do?
This fixes the output for the D compiler.  In Visual Studio, this forces a compiler to be set in the project file.
The problem was that the toolset for D projects was always being set to ""msc-v142"" for Visual Studio 2019 (did not check the value for previous versions of VS).  If the toolset was defined in the premake script, it was not an allowed value.  The only way for this to work previously was by using --dc=dmd (change dmd to your preferred D compiler).
How does this PR change Premake's behavior?
There are no breaking changes.  All changes are to fix the ""D"" module (and allow for other module support).  Premake now supports the ""dmd"", ""gdc"", and ""ldc"" toolset options for D projects.  This was done by adding them to the allowed values in the ""toolset"" premake field.
Usage:
workspace ""test""
    configurations { ""debug"" }

    project ""t""
        kind ""ConsoleApp""
        language ""D""
        toolset ""dmd""
        files ""**.d""
| Module / Toolset | Old Output | New Output |
| --- | --- |
| VS 2019 / dmd |  | 0 |
| VS 2019 / gdc |  | 1 |
| VS 2019 / ldc |  | 2 |
Anything else we should know?
Closes #1603
So what next? The gmake module still needs work to actually function.  When running with ""gmake"" on the command line, it still attempts to go through the C++ module instead of the D module.  In order to minimize the number of changes in the review, I will leave that for another day.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",No problem! I'll go ahead and mark this ready once I make sure the documentation on the website is up to date.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1661,2021-06-30T14:17:41Z,2021-09-14T12:50:48Z,2021-09-15T12:00:29Z,MERGED,True,73,10,7,https://github.com/noresources,Add frameworkdirs support to gmake and gmake2 with gcc/clang toolsets‚Ä¶,3,[],https://github.com/premake/premake-core/pull/1661,https://github.com/noresources,1,https://github.com/premake/premake-core/pull/1661,"‚Ä¶ on macOS systems

Add new optional parameter to toolset.getincludedirs(dirs, sysdirs, frameworkdirs)
Translate frameworkdirs to -F build & linker flags
Add tests

Anything else we should know?
It should be easy to update CodeLite too but I can't really test it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","‚Ä¶ on macOS systems

Add new optional parameter to toolset.getincludedirs(dirs, sysdirs, frameworkdirs)
Translate frameworkdirs to -F build & linker flags
Add tests

Anything else we should know?
It should be easy to update CodeLite too but I can't really test it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1661,2021-06-30T14:17:41Z,2021-09-14T12:50:48Z,2021-09-15T12:00:29Z,MERGED,True,73,10,7,https://github.com/noresources,Add frameworkdirs support to gmake and gmake2 with gcc/clang toolsets‚Ä¶,3,[],https://github.com/premake/premake-core/pull/1661,https://github.com/noresources,2,https://github.com/premake/premake-core/pull/1661#issuecomment-915096626,"‚Ä¶ on macOS systems

Add new optional parameter to toolset.getincludedirs(dirs, sysdirs, frameworkdirs)
Translate frameworkdirs to -F build & linker flags
Add tests

Anything else we should know?
It should be easy to update CodeLite too but I can't really test it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Hello,
I finally had some spare time and motivation to run a macOS VM, install CodeLite and test frameworkdirs  support.
I also add the runpathdirs support to it (one line change).
Finally I rebased/cleanup commits on top of master.
Hope this will allow to close this PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1661,2021-06-30T14:17:41Z,2021-09-14T12:50:48Z,2021-09-15T12:00:29Z,MERGED,True,73,10,7,https://github.com/noresources,Add frameworkdirs support to gmake and gmake2 with gcc/clang toolsets‚Ä¶,3,[],https://github.com/premake/premake-core/pull/1661,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1661#issuecomment-919118563,"‚Ä¶ on macOS systems

Add new optional parameter to toolset.getincludedirs(dirs, sysdirs, frameworkdirs)
Translate frameworkdirs to -F build & linker flags
Add tests

Anything else we should know?
It should be easy to update CodeLite too but I can't really test it.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Oh shoot, I see @samsinsane already approved‚Ä¶merging‚Ä¶",True,{'HEART': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1662,2021-07-04T13:52:13Z,2021-07-08T10:41:24Z,2021-07-08T14:34:16Z,MERGED,True,80,1,2,https://github.com/Jarod42,Handle `buildcommand` for Codelite.,1,[],https://github.com/premake/premake-core/pull/1662,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1662,"What does this PR do?
Handle buildcommand/buildmessage/buildinputs/buildoutputs for Codelite
How does this PR change Premake's behavior?
Only Codelite generator
Anything else we should know?
Added sample project for https://github.com/Jarod42/premake-sample-projects
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Handle buildcommand/buildmessage/buildinputs/buildoutputs for Codelite
How does this PR change Premake's behavior?
Only Codelite generator
Anything else we should know?
Added sample project for https://github.com/Jarod42/premake-sample-projects
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1662,2021-07-04T13:52:13Z,2021-07-08T10:41:24Z,2021-07-08T14:34:16Z,MERGED,True,80,1,2,https://github.com/Jarod42,Handle `buildcommand` for Codelite.,1,[],https://github.com/premake/premake-core/pull/1662,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1662#issuecomment-876331372,"What does this PR do?
Handle buildcommand/buildmessage/buildinputs/buildoutputs for Codelite
How does this PR change Premake's behavior?
Only Codelite generator
Anything else we should know?
Added sample project for https://github.com/Jarod42/premake-sample-projects
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","IMHO I'd prefer a little more vertical whitespace in there to separate the logical blocks; this is beginning to look like a wall of text to me. But it's a nice addition, thanks! Merging now‚Ä¶",True,{}
premake/premake-core,https://github.com/premake/premake-core,1662,2021-07-04T13:52:13Z,2021-07-08T10:41:24Z,2021-07-08T14:34:16Z,MERGED,True,80,1,2,https://github.com/Jarod42,Handle `buildcommand` for Codelite.,1,[],https://github.com/premake/premake-core/pull/1662,https://github.com/Jarod42,3,https://github.com/premake/premake-core/pull/1662#issuecomment-876491794,"What does this PR do?
Handle buildcommand/buildmessage/buildinputs/buildoutputs for Codelite
How does this PR change Premake's behavior?
Only Codelite generator
Anything else we should know?
Added sample project for https://github.com/Jarod42/premake-sample-projects
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","https://github.com/Jarod42/premake-sample-projects/blob/master/Readme.md updated to reflect that :-)
Note: Feel free to reformat the code or ask for changes before merging.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1663,2021-07-04T13:53:57Z,2021-07-05T19:37:21Z,2021-07-06T14:03:42Z,MERGED,True,2,1,1,https://github.com/Jarod42,compilebuildoutputs make some comments obsolete.,1,[],https://github.com/premake/premake-core/pull/1663,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1663,"What does this PR do?
Update doc
How does this PR change Premake's behavior?
No changes
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Update doc
How does this PR change Premake's behavior?
No changes
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1668,2021-07-13T18:29:23Z,2021-07-15T11:59:53Z,2021-10-22T14:27:20Z,MERGED,True,20,5,2,https://github.com/starkos,Fix v6 bootstrapping from v5,1,[],https://github.com/premake/premake-core/pull/1668,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1668,"What does this PR do?
Updated‚Äîmy first build didn't catch all cases.
Trying to bootstrap the Premake6 build using Premake5 can throw an error ""module 'dom' not found"". This fix prevents Premake5 from picking up the v6 modules when run within a v6 source directory, by always loading modules from the same directory where their _preload.lua script was located.
How does this PR change Premake's behavior?
If an embedded script calls require(), embedded modules will now be given precedence over scripts on the local file system. This situation only occurs during the bootstrapping phase of a release build, and in that situation we should always be using the embedded scripts, since what's on the file system might not be in sync with the native code used in the build.
In addition to fixing v6 bootstrapping, this should also help with using v5 to bootstrap a new v5 build as well.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (no great way to unit test this)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Updated‚Äîmy first build didn't catch all cases.
Trying to bootstrap the Premake6 build using Premake5 can throw an error ""module 'dom' not found"". This fix prevents Premake5 from picking up the v6 modules when run within a v6 source directory, by always loading modules from the same directory where their _preload.lua script was located.
How does this PR change Premake's behavior?
If an embedded script calls require(), embedded modules will now be given precedence over scripts on the local file system. This situation only occurs during the bootstrapping phase of a release build, and in that situation we should always be using the embedded scripts, since what's on the file system might not be in sync with the native code used in the build.
In addition to fixing v6 bootstrapping, this should also help with using v5 to bootstrap a new v5 build as well.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (no great way to unit test this)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1668,2021-07-13T18:29:23Z,2021-07-15T11:59:53Z,2021-10-22T14:27:20Z,MERGED,True,20,5,2,https://github.com/starkos,Fix v6 bootstrapping from v5,1,[],https://github.com/premake/premake-core/pull/1668,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1668#issuecomment-879757190,"What does this PR do?
Updated‚Äîmy first build didn't catch all cases.
Trying to bootstrap the Premake6 build using Premake5 can throw an error ""module 'dom' not found"". This fix prevents Premake5 from picking up the v6 modules when run within a v6 source directory, by always loading modules from the same directory where their _preload.lua script was located.
How does this PR change Premake's behavior?
If an embedded script calls require(), embedded modules will now be given precedence over scripts on the local file system. This situation only occurs during the bootstrapping phase of a release build, and in that situation we should always be using the embedded scripts, since what's on the file system might not be in sync with the native code used in the build.
In addition to fixing v6 bootstrapping, this should also help with using v5 to bootstrap a new v5 build as well.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (no great way to unit test this)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",This looks to have broken bootstrapping?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1668,2021-07-13T18:29:23Z,2021-07-15T11:59:53Z,2021-10-22T14:27:20Z,MERGED,True,20,5,2,https://github.com/starkos,Fix v6 bootstrapping from v5,1,[],https://github.com/premake/premake-core/pull/1668,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1668#issuecomment-879798374,"What does this PR do?
Updated‚Äîmy first build didn't catch all cases.
Trying to bootstrap the Premake6 build using Premake5 can throw an error ""module 'dom' not found"". This fix prevents Premake5 from picking up the v6 modules when run within a v6 source directory, by always loading modules from the same directory where their _preload.lua script was located.
How does this PR change Premake's behavior?
If an embedded script calls require(), embedded modules will now be given precedence over scripts on the local file system. This situation only occurs during the bootstrapping phase of a release build, and in that situation we should always be using the embedded scripts, since what's on the file system might not be in sync with the native code used in the build.
In addition to fixing v6 bootstrapping, this should also help with using v5 to bootstrap a new v5 build as well.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (no great way to unit test this)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I saw :( Hope to figure it out this morning
‚Ä¶
On Wed, Jul 14, 2021, at 05:53, Samuel Surtees wrote:


 This looks to have broken bootstrapping?


 ‚Äî
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#1668 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAB43H223HQKWIWY6VMCQJLTXVNA7ANCNFSM5AJWQYUA>.",True,{'HEART': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1668,2021-07-13T18:29:23Z,2021-07-15T11:59:53Z,2021-10-22T14:27:20Z,MERGED,True,20,5,2,https://github.com/starkos,Fix v6 bootstrapping from v5,1,[],https://github.com/premake/premake-core/pull/1668,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1668#issuecomment-880096563,"What does this PR do?
Updated‚Äîmy first build didn't catch all cases.
Trying to bootstrap the Premake6 build using Premake5 can throw an error ""module 'dom' not found"". This fix prevents Premake5 from picking up the v6 modules when run within a v6 source directory, by always loading modules from the same directory where their _preload.lua script was located.
How does this PR change Premake's behavior?
If an embedded script calls require(), embedded modules will now be given precedence over scripts on the local file system. This situation only occurs during the bootstrapping phase of a release build, and in that situation we should always be using the embedded scripts, since what's on the file system might not be in sync with the native code used in the build.
In addition to fixing v6 bootstrapping, this should also help with using v5 to bootstrap a new v5 build as well.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (no great way to unit test this)
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Apologies for the premature PR‚Ä¶I've had another look at it and come up with a more complete solution.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1672,2021-07-26T15:56:55Z,2021-08-10T10:46:48Z,2021-08-10T11:20:00Z,MERGED,True,151,4,3,https://github.com/nickclark2016,C# Symbol Premake -> VS Mapping Changes,1,[],https://github.com/premake/premake-core/pull/1672,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1672,"What does this PR do?
This PR closes #1670.  It allows for none to be set for the debug symbol value of Visual Studio C# projects.
How does this PR change Premake's behavior?
Previous Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off, Full, FastLink, Default
pdbonly


On
full



New/Proposed Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off
none


On, FastLink
pdbonly


Full
full


Default
portable



This changes the behavior of the Off, On, Full, and Default C# symbol outputs.
Anything else we should know?
The rational behind the change of Default to map to portable is because VS2019 defaults to portable for the debug symbol output.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes (Not applicable, no new API added)

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This PR closes #1670.  It allows for none to be set for the debug symbol value of Visual Studio C# projects.
How does this PR change Premake's behavior?
Previous Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off, Full, FastLink, Default
pdbonly


On
full



New/Proposed Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off
none


On, FastLink
pdbonly


Full
full


Default
portable



This changes the behavior of the Off, On, Full, and Default C# symbol outputs.
Anything else we should know?
The rational behind the change of Default to map to portable is because VS2019 defaults to portable for the debug symbol output.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes (Not applicable, no new API added)

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1672,2021-07-26T15:56:55Z,2021-08-10T10:46:48Z,2021-08-10T11:20:00Z,MERGED,True,151,4,3,https://github.com/nickclark2016,C# Symbol Premake -> VS Mapping Changes,1,[],https://github.com/premake/premake-core/pull/1672,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1672#issuecomment-887683171,"What does this PR do?
This PR closes #1670.  It allows for none to be set for the debug symbol value of Visual Studio C# projects.
How does this PR change Premake's behavior?
Previous Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off, Full, FastLink, Default
pdbonly


On
full



New/Proposed Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off
none


On, FastLink
pdbonly


Full
full


Default
portable



This changes the behavior of the Off, On, Full, and Default C# symbol outputs.
Anything else we should know?
The rational behind the change of Default to map to portable is because VS2019 defaults to portable for the debug symbol output.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes (Not applicable, no new API added)

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Have you confirmed the existence of ""portable"" for older versions of Visual Studio and the various .NET project types? I'm pretty sure at one point it was only supported for .NET Core?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1672,2021-07-26T15:56:55Z,2021-08-10T10:46:48Z,2021-08-10T11:20:00Z,MERGED,True,151,4,3,https://github.com/nickclark2016,C# Symbol Premake -> VS Mapping Changes,1,[],https://github.com/premake/premake-core/pull/1672,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1672#issuecomment-887688709,"What does this PR do?
This PR closes #1670.  It allows for none to be set for the debug symbol value of Visual Studio C# projects.
How does this PR change Premake's behavior?
Previous Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off, Full, FastLink, Default
pdbonly


On
full



New/Proposed Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off
none


On, FastLink
pdbonly


Full
full


Default
portable



This changes the behavior of the Off, On, Full, and Default C# symbol outputs.
Anything else we should know?
The rational behind the change of Default to map to portable is because VS2019 defaults to portable for the debug symbol output.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes (Not applicable, no new API added)

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Good question.  From what I found about it, it appears to be fairly well supported at this point, with the following notable exceptions:

Older VS debugger versions (before VS 2015 Update 2)
.NET Framework versions 4.7.1 and earlier
Some code analysis tools
Some symbol servers
Post compilation steps that consume the non-portable/Windows PDBs
Some .NET decompilers
Microsoft DIA

Source
If we wanted to, we could change this based on the VS action being run with. (2017 and newer, portable, prior full?)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1672,2021-07-26T15:56:55Z,2021-08-10T10:46:48Z,2021-08-10T11:20:00Z,MERGED,True,151,4,3,https://github.com/nickclark2016,C# Symbol Premake -> VS Mapping Changes,1,[],https://github.com/premake/premake-core/pull/1672,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1672#issuecomment-895927360,"What does this PR do?
This PR closes #1670.  It allows for none to be set for the debug symbol value of Visual Studio C# projects.
How does this PR change Premake's behavior?
Previous Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off, Full, FastLink, Default
pdbonly


On
full



New/Proposed Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off
none


On, FastLink
pdbonly


Full
full


Default
portable



This changes the behavior of the Off, On, Full, and Default C# symbol outputs.
Anything else we should know?
The rational behind the change of Default to map to portable is because VS2019 defaults to portable for the debug symbol output.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes (Not applicable, no new API added)

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@nickclark2016 Nitpick, but please continue to stage your PR branches on your own fork of premake-core, rather than pushing the branch to premake-core itself. That way our release scripts can correctly pull out your username from the auto-generated commit message (and it avoids clutter and old branches hanging around on premake-core). Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1672,2021-07-26T15:56:55Z,2021-08-10T10:46:48Z,2021-08-10T11:20:00Z,MERGED,True,151,4,3,https://github.com/nickclark2016,C# Symbol Premake -> VS Mapping Changes,1,[],https://github.com/premake/premake-core/pull/1672,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1672#issuecomment-895946318,"What does this PR do?
This PR closes #1670.  It allows for none to be set for the debug symbol value of Visual Studio C# projects.
How does this PR change Premake's behavior?
Previous Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off, Full, FastLink, Default
pdbonly


On
full



New/Proposed Mapping



Premake Symbol Value
Visual Studio C# Project Value




Off
none


On, FastLink
pdbonly


Full
full


Default
portable



This changes the behavior of the Off, On, Full, and Default C# symbol outputs.
Anything else we should know?
The rational behind the change of Default to map to portable is because VS2019 defaults to portable for the debug symbol output.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes (Not applicable, no new API added)

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@nickclark2016 Nitpick, but please continue to stage your PR branches on your own fork of premake-core, rather than pushing the branch to premake-core itself. That way our release scripts can correctly pull out your username from the auto-generated commit message (and it avoids clutter and old branches hanging around on premake-core). Thanks!

Of course. I didn't realize until after putting in the PR that I had my remote set to premake and not my fork.  I'll be more careful on this next time :)",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1673,2021-07-26T17:53:49Z,2021-07-26T18:04:17Z,2021-07-26T18:05:39Z,MERGED,True,1,0,1,https://github.com/nickclark2016,Updated sidebar to include toolsversion link,1,[],https://github.com/premake/premake-core/pull/1673,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1673,"What does this PR do?
Adds toolsversion to website sidebar.  Addresses comment left in #1655.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds toolsversion to website sidebar.  Addresses comment left in #1655.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/Biswa96,1,https://github.com/premake/premake-core/pull/1680,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1680#issuecomment-889373343,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Please follow the PR format provided.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1680#issuecomment-889463278,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",May resolve #1675,True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/Lemiort,4,https://github.com/premake/premake-core/pull/1680#issuecomment-889544574,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please take a look at that patch, that is used in conan-center:
https://github.com/conan-io/conan-center-index/blob/41d4fbb8c218f9d938ccb8b9d888bff52002e62e/recipes/premake/5.x/patches/0001-5.0.0-alpha15-mingw.patch
It's quite simular, but u don't have changes in linking commands, and their patch doesn't contain changes in contrib/curl/lib/select.h",True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/Biswa96,5,https://github.com/premake/premake-core/pull/1680#issuecomment-889740238,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please take a look at that patch, that is used in conan-center

I am not familiar with that project and never used it.

It's quite similar, but u don't have changes in linking commands

This pull request does not change any linking commands. That patch file in conano-io adds -lcrypt32 but it has already been defined in premake5.lua file.

and their patch doesn't contain changes in contrib/curl/lib/select.h

Without that change, this error is shown in mingw gcc:
In file included from ../../contrib/curl/lib/connect.c:64:
../../contrib/curl/lib/select.h:48:8: error: redefinition of 'struct pollfd'
   48 | struct pollfd
      |        ^~~~~~
In file included from ../../contrib/curl/lib/curl_setup.h:273,
                 from ../../contrib/curl/lib/connect.c:23:
x86_64-w64-mingw32/include/winsock2.h:1185:16: note: originally defined here
 1185 | typedef struct pollfd {
      |                ^~~~~~
BTW, I am building premake5 using this recipe msys2/MINGW-packages#9245. Feel free to comment on any mistake there.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/nickclark2016,6,https://github.com/premake/premake-core/pull/1680#issuecomment-890565948,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","So based on comments, I think the course of action is to have curl updated in one commit, then fix the build issues in a follow on commit, then submit that as a single PR.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/Biswa96,7,https://github.com/premake/premake-core/pull/1680#issuecomment-890566364,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Updating curl would be a huge change and out of scope of this pull request. I have edited curl in separate commit here.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/nickclark2016,8,https://github.com/premake/premake-core/pull/1680#issuecomment-891964974,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'll go ahead and approve, but I'll write an issue for updating curl so this isn't lost.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/nickclark2016,9,https://github.com/premake/premake-core/pull/1680#issuecomment-899804826,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Just gonna poke on this @starkos,True,{}
premake/premake-core,https://github.com/premake/premake-core,1680,2021-07-29T18:23:38Z,2021-08-20T10:33:19Z,2021-08-20T13:01:21Z,MERGED,True,7,4,4,https://github.com/Biswa96,Fix some build issues with mingw,4,[],https://github.com/premake/premake-core/pull/1680,https://github.com/starkos,10,https://github.com/premake/premake-core/pull/1680#issuecomment-902599810,"What does this PR do?
Fixes some build issues with mingw
How does this PR change Premake's behavior?
None.
Are there any breaking changes? Will any existing behavior change?
Nope.
Anything else we should know?
Don't know what to add here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks for the contribution!,True,{'HEART': ['https://github.com/Biswa96']}
premake/premake-core,https://github.com/premake/premake-core,1682,2021-07-31T16:45:00Z,2021-07-31T16:49:32Z,2021-10-22T14:27:37Z,MERGED,True,61,0,1,https://github.com/starkos,Add Community Update #9,1,[],https://github.com/premake/premake-core/pull/1682,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1682,"What does this PR do?
Add a new community update to the website.
How does this PR change Premake's behavior?
No changes.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Add a new community update to the website.
How does this PR change Premake's behavior?
No changes.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1687,2021-08-09T08:52:34Z,2021-09-16T14:37:33Z,2021-09-16T14:42:31Z,MERGED,True,4,1,1,https://github.com/Jarod42,[Doc] Update deprecated entry for `newaction`.,1,[],https://github.com/premake/premake-core/pull/1687,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1687,"What does this PR do?

update newaction doc

How does this PR change Premake's behavior?

No behavior changes, only doc updated.

Anything else we should know?

No


Did you check all the boxes?


 Focus on a single fix or feature; remove any unrelated formatting or code changes


 Add unit tests showing fix or feature works; all tests pass


 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)


 Follow our coding conventions


 Minimize the number of commits


 Align documentation to your changes


You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

update newaction doc

How does this PR change Premake's behavior?

No behavior changes, only doc updated.

Anything else we should know?

No


Did you check all the boxes?


 Focus on a single fix or feature; remove any unrelated formatting or code changes


 Add unit tests showing fix or feature works; all tests pass


 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)


 Follow our coding conventions


 Minimize the number of commits


 Align documentation to your changes


You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1687,2021-08-09T08:52:34Z,2021-09-16T14:37:33Z,2021-09-16T14:42:31Z,MERGED,True,4,1,1,https://github.com/Jarod42,[Doc] Update deprecated entry for `newaction`.,1,[],https://github.com/premake/premake-core/pull/1687,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1687#issuecomment-895914553,"What does this PR do?

update newaction doc

How does this PR change Premake's behavior?

No behavior changes, only doc updated.

Anything else we should know?

No


Did you check all the boxes?


 Focus on a single fix or feature; remove any unrelated formatting or code changes


 Add unit tests showing fix or feature works; all tests pass


 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)


 Follow our coding conventions


 Minimize the number of commits


 Align documentation to your changes


You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Since @Jarod42 has already put it in  place, and since it isn't actually flagged by the code, IMHO I'd say just leave it as-is.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1700,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1700#issuecomment-907803196,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Trying to make some time to sit and review this‚Ä¶,True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1700#issuecomment-907804776,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Sounds good.  I'll be driving the next few days, so I'll get around to responses next weekend.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1700#issuecomment-913653766,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","On the whole, I'd say this looks pretty good. There are minor nitpicks like‚Ä¶
OBJDIR = bin-int/Premake/Debug  # why ""bin-int"" and not the previous default ""obj""?
‚Ä¶but nothing that won't come out in the wash. So that's great, thanks for putting it together!
Before pushing on ahead here though, I really think it would be worth thinking through what the v6 makefiles should look like, while we have this opportunity to break big things. Should/could we be able to build Windows/Linux/macOS out of a single makefile (pretty sure CodeBlocks & CodeLite support this idea too)? How should/could per-file build settings be expressed? What about custom build rules? Would it be possible to not inherit project settings into the build configurations, and instead output all of the project-level stuff in a leading block, and then only break out the values that actually differ in the build configuration if-else-end?
Because Makefiles are so open-ended, we have the opportunity to do things different/better. These bigger questions never really got properly addressed in v5; I want to make sure they are looked at for v6 before we dig in too deep to porting the previous implementations. Does that make sense?

Yeah, the OBJDIR was out of habit for my personal projects. Will change to obj.  For printing the values specific to configurations separate from the project-wide settings, I'd argue that we should have that built into the DOM, where when we get configuration-specific values rather than configuration and project values.  Is this something that's doable?  I think that'd make sense for getting file-specific configuration values as well.  I haven't had the chance to look into file-specific values yet, but that's on my list to do :).  I'll look into fixing those other comments today and get it back out.  Thanks for taking a look!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1700#issuecomment-913697839,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The -j flag is done on command line, not in a rule, but I definitely agree we don't want to break multi-core/multi-job builds.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1700#issuecomment-913702276,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The -j flag is done on command line, not in a rule, but I definitely agree we don't want to break multi-core/multi-job builds.

I know that, but there was something about the original gmake generator that caused build failures if you used the -j flag which the gmake2 generator fixed. My only concern about another rewrite is reintroducing this and creating a reason to rewrite the generator again.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/starkos,7,https://github.com/premake/premake-core/pull/1700#issuecomment-914350174,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","For printing the values specific to configurations separate from the project-wide settings, I'd argue that we should have that built into the DOM, where when we get configuration-specific values rather than configuration and project values.

If you remove the call to withInheritance() from fetchProjectConfig(), you will get just the configuration values, without the project-level settings. But you'll still need to add logic to the exporter to write out the project-level settings, in addition to iterating over the build configurations. This is all just theoretical at this point mind you, there may be good reasons NOT to do this that I'm not seeing.
And once more so it doesn't get lost in the conversation: IMHO we really need some R&D on things like custom build rules, per-file build settings, and multi-platform targeting before we push too much further on this, since they could have big impacts on how the files should be written.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/nickclark2016,8,https://github.com/premake/premake-core/pull/1700#issuecomment-914351487,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","For printing the values specific to configurations separate from the project-wide settings, I'd argue that we should have that built into the DOM, where when we get configuration-specific values rather than configuration and project values.

If you remove the call to withInheritance() from fetchProjectConfig(), you will get just the configuration values, without the project-level settings. But you'll still need to add logic to the exporter to write out the project-level settings, in addition to iterating over the build configurations. This is all just theoretical at this point mind you, there may be good reasons NOT to do this that I'm not seeing.
And once more so it doesn't get lost in the conversation: IMHO we really need some R&D on things like custom build rules, per-file build settings, and multi-platform targeting before we push too much further on this, since they could have big impacts on how the files should be written.

TIL.  I'll update that in my project then.",True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/KyrietS,9,https://github.com/premake/premake-core/pull/1700#issuecomment-920402600,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","#docsnazi here üòÑ
How does this amount of code without touching single *.md page has:

 Align documentation to your changes

Please correct me if I'm clinging unnecessarily but what is the strategy for keeping docs up-to-date with the implementation now? Premake 5.0 has such a large docs-debt now that it is no longer manageable. And I'd love to see improvement in that aspect for 6.x.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/nickclark2016,10,https://github.com/premake/premake-core/pull/1700#issuecomment-920422556,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","#docsnazi here üòÑ
How does this amount of code without touching single *.md page has:

  Align documentation to your changes

Please correct me if I'm clinging unnecessarily but what is the strategy for keeping docs up-to-date with the implementation now? Premake 5.0 has such a large docs-debt now that it is no longer manageable. And I'd love to see improvement in that aspect for 6.x.

I didn't add any API üòõ",True,{'LAUGH': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/KyrietS,11,https://github.com/premake/premake-core/pull/1700#issuecomment-920427838,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I didn't add any API üòõ

Oh, okay... fair enough for now, but I'll see you tomorrow! üòÑ",True,"{'LAUGH': ['https://github.com/samsinsane', 'https://github.com/nickclark2016']}"
premake/premake-core,https://github.com/premake/premake-core,1700,2021-08-27T16:11:41Z,2021-09-16T12:06:03Z,2021-09-16T12:48:45Z,CLOSED,False,2976,2,39,https://github.com/nickclark2016,Start of GNU Makefile exporter for 6.x,1,[],https://github.com/premake/premake-core/pull/1700,https://github.com/starkos,12,https://github.com/premake/premake-core/pull/1700#issuecomment-920866817,"What does this PR do?
Starts implementation of the GNU Makefile exporter for the 6.x branch.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
TODO Before Merge:

 Unit Testing

Follow Up Needs

Support for project types other than executables
Support for linking external libraries
Dependencies

Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Premake 5.0 has such a large docs-debt now that it is no longer manageable. And I'd love to see improvement in that aspect for 6.x.

Agreed. I didn't document the earlier work because I wasn't yet sure if it was even going to work, and we didn't have Docusaurus yet. Now that it does, and we do, I'm making an effort to document everything new that I add, and regularly do a little bit of catch-up on the earlier stuff.
There's no obligation at all, but you're welcome to contribute to the 6.x stuff as well if you like.",True,{'HEART': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/StellaASchlotter,1,https://github.com/premake/premake-core/pull/1701,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1701#issuecomment-907672786,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Can we get some unit tests to show this working?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/StellaASchlotter,3,https://github.com/premake/premake-core/pull/1701#issuecomment-907674460,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Working on it. Locally it works for me already. I know thats not enough to get it approved :)
Do you have any thoughts on the splt between the warning level and the external include dirs. For gcc and clang setting a include dir with sysincludedirs also sets the warnings to Off. This is different in visual studio now. I wonder if the default behavior for vs should also be warnings off?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1701#issuecomment-907677006,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I'd argue that we want the same default behavior across platforms, but I could see the argument for making it default to the exported platform.  Thoughts @starkos @samsinsane?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/StellaASchlotter,5,https://github.com/premake/premake-core/pull/1701#issuecomment-907805642,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","@starkos according to the documentation of Visual Studio. The external warning levels only apply for  the external include dirs.
The example in https://devblogs.microsoft.com/cppblog/broken-warnings-theory/ shows that the external warning level and the external include dir must be specified.  So those two features are tied together and are not unrelated in my opinion. I can still split this in multiple PR's.
Another point:
Suppose we introduce externalincludedirs as a seperate thing. For projects that should support both gcc/clang and VisualStudio, both sysincludedirs and externalincludedirs must be set. Then you need to be careful that you set those inside a filter. Otherwise you would end up with the sysincludedirs als normal includes + the externalincludedirs as external include in Visualstudio. I guess this could be pointed out in the documentation.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1701#issuecomment-944248096,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","According to the 3rd point in the release notes for VS2019 v16.10, it looks like external includes is a very new thing (May 2021). It would appear that this PR will break sysincludedirs support for VS2010-VS2017.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/StellaASchlotter,7,https://github.com/premake/premake-core/pull/1701#issuecomment-944268433,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",@samsinsane thanks for your input. I am still working on a way to make this non breaking for all visual studio versions.,True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/StellaASchlotter,8,https://github.com/premake/premake-core/pull/1701#issuecomment-969201313,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Currently I can't continue working on this. Another solution for externalincludedirs is being developed in #1754. If you merge that you can close this PR.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1701,2021-08-28T18:41:53Z,2021-11-21T21:10:16Z,2021-11-21T21:10:17Z,CLOSED,False,65,2,5,https://github.com/StellaASchlotter,add support for external warning levels in visual studio,4,[],https://github.com/premake/premake-core/pull/1701,https://github.com/starkos,9,https://github.com/premake/premake-core/pull/1701#issuecomment-974896428,"What does this PR do?
Add support for external warnings in visual studio
How does this PR change Premake's behavior?
sysincludedirs now works slightly different for visual studio.  Instead of adding the paths in sysincludedirs  ""VC++ Directories"" properties panel under ""Include Directories"" it will add it to ""External Include Directories""
Anything else we should know?
It was only tested on visual studio 2019.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Based on the comments, closing this one in favor of #1754.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1702,2021-08-28T19:33:32Z,2021-08-29T14:33:25Z,2021-08-29T14:33:25Z,CLOSED,False,31,0,1,https://github.com/Pirulax,[Docs] Add a cruel script to dump all the values of tables,1,[],https://github.com/premake/premake-core/pull/1702,https://github.com/Pirulax,1,https://github.com/premake/premake-core/pull/1702,"What does this PR do?
Adds a cruel script to dump the content of tables available inside tokens
It might help people, as the docs aren't complete.","What does this PR do?
Adds a cruel script to dump the content of tables available inside tokens
It might help people, as the docs aren't complete.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1704,2021-08-31T03:03:35Z,2021-08-31T12:56:55Z,2021-08-31T21:35:24Z,MERGED,True,135,2,5,https://github.com/nickclark2016,VS2022 Exporter,1,[],https://github.com/premake/premake-core/pull/1704,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1704,"What does this PR do?
Adds VS2022 support for C++ projects. Closes #1674. Needs follow on for research and implementation of C# projects in VS2022.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds VS2022 support for C++ projects. Closes #1674. Needs follow on for research and implementation of C# projects in VS2022.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1704,2021-08-31T03:03:35Z,2021-08-31T12:56:55Z,2021-08-31T21:35:24Z,MERGED,True,135,2,5,https://github.com/nickclark2016,VS2022 Exporter,1,[],https://github.com/premake/premake-core/pull/1704,https://github.com/Pirulax,2,https://github.com/premake/premake-core/pull/1704#issuecomment-909659657,"What does this PR do?
Adds VS2022 support for C++ projects. Closes #1674. Needs follow on for research and implementation of C# projects in VS2022.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thank you very much for implementing it.
It was really annoying to retarget all the time.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/ActuallyaDeviloper,1,https://github.com/premake/premake-core/pull/1710,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/ActuallyaDeviloper,2,https://github.com/premake/premake-core/pull/1710#issuecomment-914679054,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thank your for your speedy response.
Do you really think a test is necessary? There are also no tests that I can find for SSE 3, SSSE 3 or SSE 4.1 and I think that is totally fine that way.
If you insist that this must be tested, I am actually not sure how to. The only tests for SSE-like kind of things seem to be for specific toolsets. Would I need to make a new test for each of them?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1710#issuecomment-915160392,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'll defer to @starkos or @samsinsane for final decision on a unit test, but it's part of our checklist.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/ActuallyaDeviloper,4,https://github.com/premake/premake-core/pull/1710#issuecomment-916941093,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","You are right, there are no changes regarding the VS version because VS (unfortunately) can't directly target SSE3 - SSE4.2 in any version with it's code generation controlled by these compiler switches.
I have made the AVX entry the second one again even though I am sceptical of the existing order in regards to if there is any meaning to it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/ActuallyaDeviloper,5,https://github.com/premake/premake-core/pull/1710#issuecomment-931495443,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Can we maybe make progress with this?
@nickclark2016 Apparently both @starkos and @samsinsane consider the level of preexisting testing sufficient. If I am not mistaken, your counter argument was only due to the formal requirement of fulfilling the checklist. Can you accept this patch set?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/nickclark2016,6,https://github.com/premake/premake-core/pull/1710#issuecomment-931512488,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","If tests are added for MSC (see test_msc.lua) and GCC (see test_gcc.lua), I'm happy to approve.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1710,2021-09-07T21:34:41Z,2021-10-10T11:25:19Z,2021-10-10T11:25:19Z,MERGED,True,20,1,9,https://github.com/ActuallyaDeviloper,Add support for SSE 4.2.,2,[],https://github.com/premake/premake-core/pull/1710,https://github.com/ActuallyaDeviloper,7,https://github.com/premake/premake-core/pull/1710#issuecomment-939324162,"What does this PR do?
This adds support for SSE 4.2 in Premake. The change is quite simple. The lack of SSE 4.2 support so far was probably just an oversight.
How does this PR change Premake's behavior?
There are no behaviour changes for already written and currently working Premake build scripts.
Anything else we should know?
I did not add new tests, since there are none for global configurations themselves and I just added new table entries and really did not change any actual logic.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@nickclark2016 Can we make progress with this now?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1711,2021-09-07T21:42:35Z,2021-09-07T22:17:20Z,2021-09-07T22:17:39Z,CLOSED,False,21,0,3,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1711,https://github.com/T-rvw,1,https://github.com/premake/premake-core/pull/1711,"What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1711,2021-09-07T21:42:35Z,2021-09-07T22:17:20Z,2021-09-07T22:17:39Z,CLOSED,False,21,0,3,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1711,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1711#issuecomment-914663843,"What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",This appears to be a duplicate PR. Please close if that is the case.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1711,2021-09-07T21:42:35Z,2021-09-07T22:17:20Z,2021-09-07T22:17:39Z,CLOSED,False,21,0,3,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1711,https://github.com/T-rvw,3,https://github.com/premake/premake-core/pull/1711#issuecomment-914664237,"What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","This appears to be a duplicate PR. Please close if that is the case.

Sorry for inconvenience.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/T-rvw,1,https://github.com/premake/premake-core/pull/1712,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/T-rvw,2,https://github.com/premake/premake-core/pull/1712#issuecomment-914658107,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please add unit tests to verify functionality.

Thanks for your quick reply. I added a test function to check it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/Jarod42,3,https://github.com/premake/premake-core/pull/1712#issuecomment-916863511,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Shoudn't -fopenmp be added to gcc/clang toolset too.
The other way would be to search for /openmp in buildoptions to place it in correct place in visual project (as from premake point of view, it is a buildoption like another). (I know that Codelite/CodeBlock doesn't hardcode compiler options and extract them as checkboxes from ""commandline"")",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/T-rvw,4,https://github.com/premake/premake-core/pull/1712#issuecomment-916947949,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Shoudn't -fopenmp be added to gcc/clang toolset too.
The other way would be to search for /openmp in buildoptions to place it in correct place in visual project (as from premake point of view, it is a buildoption like another). (I know that Codelite/CodeBlock doesn't hardcode compiler options and extract them as checkboxes from ""commandline"")

Thanks for providing information about -fopenmp in gcc/clang toolset. Do you think I should support -fopenmp for gcc/clang in this PR or a separated one? I'm willing to support OpenMP not only for VisualStudio.
If we use ""The other way"" to support OpenMP, it looks that we need to translate /openmp to -fopenmp for gcc/clang user. It is a little confusing to write /openmp from their perspective. Current way has a consistent usage for user although we need to add a new api.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/Jarod42,5,https://github.com/premake/premake-core/pull/1712#issuecomment-917379270,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I think that that PR should fully (so each toolset) support Open MP.
Not sure I would want each custom visual studio node to be a premake option (which IMO then need support for other toolsets)).
So, my alternative solution is visual studio specific:
instead of having special premake option, user just do:
filter ""toolset:msc*""
    buildoptions ""/openmp""

and on premake side, visualStudio module parses the buildoptions to detect if /openmp is present, and if so, instead of putting it in extra build command flag, set the information in the node as you did.
as currently buildoptions ""/openmp"" has just ""glitch"" issues (it is in the command line, but the dedicated widget don't show its true value).
Note: I might have different vision that official maintainers.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/samsinsane,6,https://github.com/premake/premake-core/pull/1712#issuecomment-917572947,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The other way would be to search for /openmp in buildoptions to place it in correct place in visual project (as from premake point of view, it is a buildoption like another). (I know that Codelite/CodeBlock doesn't hardcode compiler options and extract them as checkboxes from ""commandline"")

If only Premake had some kind of API system to let the user specify something as simple as openmp ""On"".
Don't over-complicate a problem that is already solved.",True,{'LAUGH': ['https://github.com/redorav']}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/Jarod42,7,https://github.com/premake/premake-core/pull/1712#issuecomment-918075339,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@samsinsane: I would like that Premake is less visual studio specific/centric and more portable.
My concern is not to over-complicate a problem partially solved, but having a proper solution/API.
Visual Studio has more than 100 options (with ""property entry""). gcc/clang also have specific flags (not necessary overlapping). I'm not sure Premake wants to have equivalent options for each field.
I don't know if OpenMP is generic enough to be part of Premake (toolset) API (it might be).
and if it is, then it should be done for all toolsets (and it is my main concern).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/1712#issuecomment-919124885,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I think that that PR should fully (so each toolset) support Open MP.

@Jarod42 Once again, we have no objection to toolset-specific contributions, and encourage people to improve Premake where they are able.

visualStudio module parses the buildoptions to detect if /openmp is present, and if so, instead of putting it in extra build command flag, set the information in the node as you did.

@Jarod42 No. We are not doing this and contributions that do will be rejected. Please use the API system, and do not try to invent your own approach to an already solved problem.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/T-rvw,9,https://github.com/premake/premake-core/pull/1712#issuecomment-919480247,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Two changes please:

A unit test would be very much appreciated, you can just copy any of the existing tests.
A new documentation page for openmp(). Again, you can copy any of the existing pages in website/docs, and there are instructions on adding a new page in website/README.md. Please note that this feature is currently Visual Studio only.




Unit test was added in tests/vc2019/test_compile_settings.lua. Do you mean that I should create a new lua file? If so, which folder should be suitable to place new unit test?


Thanks! I'm going to create document page.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/Jarod42,10,https://github.com/premake/premake-core/pull/1712#issuecomment-919892126,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","For information,
I add a test in my repo https://github.com/Jarod42/premake-sample-projects/tree/OpenMP
(@T-rvw : that repo is NOT approved by Premake).
(openMP defines under the hood _OPENMP, and I test that define presence).
Notice that old
filter ""toolset:msc*""
  buildoptions ""/openmp""
filter ""toolset:not msc*""
  buildoptions ""-fopenmp""
works (even if option is not displayed correctly inside visual studio).
Now we should have
filter ""toolset:msc*""
  openmp ""On""
filter ""toolset:not msc*""
  buildoptions ""-fopenmp""",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/T-rvw,11,https://github.com/premake/premake-core/pull/1712#issuecomment-919900390,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@Jarod42 buildoptions ""/openmp"" for msc should not work. See #1312. If buildoptions ""-fopenmp"" works for not msc, I am OK to write it into document as a workaround before openmp supports other toolsets.
Thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/Jarod42,12,https://github.com/premake/premake-core/pull/1712#issuecomment-919918967,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","buildoptions ""/openmp"" for msc should not work. See #1312

I disagree on ""not work"". It indeed displays wrongly as the option is misplaced, but project would compile fine.
As when you do buildoptions ""/O2"", and Optimization field is wrongly displayed, but you use /O2 option anyway.
(for me, it would be to module visual to place the options to the correct place, but it is not the opinion of Premake team).

If buildoptions ""-fopenmp"" works for not msc.

buildoptions ""-fopenmp"" pass my integration tests for gmake/gmake2/codelite (for gcc/linux).
I don't have tests with clang :-/ (and it seems with quick search that clang requires -fopenmp=libomp :-/ )
so filter should be filter ""toolset:gcc"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/T-rvw,13,https://github.com/premake/premake-core/pull/1712#issuecomment-919944914,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@Jarod42 is nice to point out display issue existed in Visual Studio. That is what I don't know in previous discussions.
Now I understand why @Jarod42 prefer to ""the other way"" you mentioned. @Jarod42 wants to help VisualStudio to fix their display issue. And other toolsets may not have similar issues. Feel free to correct me if I misunderstand.
Let me rethink about this story, I would like to use OpenMP for my project in VisualStudio. So I searched openmp in Premake docs but got nothing. So I tried to type /openmp in build option and checked VisualStudio's Open MP Support display option because I didn't want to wait a build time to see if it works. Then I created pull request for Premake to support correct '/openmp' option and correct display.
My opinion is:

An extra API such as openmp will save Premake users' time. These people who don't know /openmp(msc as an example) build option can leverage Premake doc to use it more easily.
To translate /openmp to <OpenMPSupport>true</OpenMPSupport> for VisualStudio, it looks like a workaround for me. I think it must add proper comments about this VisualStudio display issue. Or it is hard to understand to do so. And we can't control if Mircosoft team will fix it or not. Then we maybe have efforts to remove dead codes if they fix it.
openmp ""On"" is more straightforward than using toolset filters to type different build options. It is a fact that we need to write filter for VS/gcc/clang, right? But I love to use Premake as my build tool because it is easier to use than CMake and other build tools. And writing filters are more like writing platform specified macros for cross-platform projects. I would like to write these things as less as possible.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1712,2021-09-07T21:46:41Z,2021-09-17T17:59:59Z,2021-09-17T18:00:00Z,MERGED,True,88,3,8,https://github.com/T-rvw,Add OpenMP support for VisualStudio,1,[],https://github.com/premake/premake-core/pull/1712,https://github.com/nickclark2016,14,https://github.com/premake/premake-core/pull/1712#issuecomment-921278057,"What does this PR do?
When I tried to use Premake5 to set VisualStudio project property -> C++ -> Language -> Open MP Support, I didn't find any solution. I learned that issue 1312 reported in the past and it also didn't get answered. So this PR add support for this compile option.
Closes #1312
How does this PR change Premake's behavior?
It will add <OpenMPSupport>true</OpenMPSupport> node inside <ClCompile>...</ClCompile> group
Anything else we should know?
No.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Just a few minor nits, I'll be happy once addressed.",True,{'THUMBS_UP': ['https://github.com/T-rvw']}
premake/premake-core,https://github.com/premake/premake-core,1713,2021-09-08T19:56:27Z,2021-09-09T17:50:45Z,2021-09-09T17:50:45Z,MERGED,True,96,54,21,https://github.com/KyrietS,Upgrade docusaurus version to beta.6,1,[],https://github.com/premake/premake-core/pull/1713,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1713,"What does this PR do?
Upgrade Docusaurus from alpha.70 to beta.6. I'd like to try a new Docusaurus' feature for sidebars auto-generation at some point in the future. This PR is my first step towards it.
How does this PR change Premake's behavior?
From Docusaurus perspective there are 2 changes that had to be made:

Every file prefixed with an underscore is ignored so I had to rename some files: _OPTIONS.md, _OS.md etc. I used premake prefix for them.
A path /docs/tags/ is reserved by Docusaurus. I had to use different URL for tags.md.

Anything else we should know?
Everything should work as before.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Upgrade Docusaurus from alpha.70 to beta.6. I'd like to try a new Docusaurus' feature for sidebars auto-generation at some point in the future. This PR is my first step towards it.
How does this PR change Premake's behavior?
From Docusaurus perspective there are 2 changes that had to be made:

Every file prefixed with an underscore is ignored so I had to rename some files: _OPTIONS.md, _OS.md etc. I used premake prefix for them.
A path /docs/tags/ is reserved by Docusaurus. I had to use different URL for tags.md.

Anything else we should know?
Everything should work as before.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1713,2021-09-08T19:56:27Z,2021-09-09T17:50:45Z,2021-09-09T17:50:45Z,MERGED,True,96,54,21,https://github.com/KyrietS,Upgrade docusaurus version to beta.6,1,[],https://github.com/premake/premake-core/pull/1713,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1713#issuecomment-916309313,"What does this PR do?
Upgrade Docusaurus from alpha.70 to beta.6. I'd like to try a new Docusaurus' feature for sidebars auto-generation at some point in the future. This PR is my first step towards it.
How does this PR change Premake's behavior?
From Docusaurus perspective there are 2 changes that had to be made:

Every file prefixed with an underscore is ignored so I had to rename some files: _OPTIONS.md, _OS.md etc. I used premake prefix for them.
A path /docs/tags/ is reserved by Docusaurus. I had to use different URL for tags.md.

Anything else we should know?
Everything should work as before.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Yup, Docusaurus was in alpha for quite a long time, and now they announced that they are going to deprecate v1, so beta.6 is the best we can have now :-)
I also asked them how to prevent Docusaurus from reserving a docs/tags path (facebook/docusaurus#5542) and they were kind enough to immediately create PR and add this feature üòÑ So hopefully my hack won't be necessary in beta.7.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1713,2021-09-08T19:56:27Z,2021-09-09T17:50:45Z,2021-09-09T17:50:45Z,MERGED,True,96,54,21,https://github.com/KyrietS,Upgrade docusaurus version to beta.6,1,[],https://github.com/premake/premake-core/pull/1713,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1713#issuecomment-916310112,"What does this PR do?
Upgrade Docusaurus from alpha.70 to beta.6. I'd like to try a new Docusaurus' feature for sidebars auto-generation at some point in the future. This PR is my first step towards it.
How does this PR change Premake's behavior?
From Docusaurus perspective there are 2 changes that had to be made:

Every file prefixed with an underscore is ignored so I had to rename some files: _OPTIONS.md, _OS.md etc. I used premake prefix for them.
A path /docs/tags/ is reserved by Docusaurus. I had to use different URL for tags.md.

Anything else we should know?
Everything should work as before.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Should we wait for beta.7 then?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1713,2021-09-08T19:56:27Z,2021-09-09T17:50:45Z,2021-09-09T17:50:45Z,MERGED,True,96,54,21,https://github.com/KyrietS,Upgrade docusaurus version to beta.6,1,[],https://github.com/premake/premake-core/pull/1713,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1713#issuecomment-916311056,"What does this PR do?
Upgrade Docusaurus from alpha.70 to beta.6. I'd like to try a new Docusaurus' feature for sidebars auto-generation at some point in the future. This PR is my first step towards it.
How does this PR change Premake's behavior?
From Docusaurus perspective there are 2 changes that had to be made:

Every file prefixed with an underscore is ignored so I had to rename some files: _OPTIONS.md, _OS.md etc. I used premake prefix for them.
A path /docs/tags/ is reserved by Docusaurus. I had to use different URL for tags.md.

Anything else we should know?
Everything should work as before.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Nah, it's not that important. I'll merge it for now",True,{'THUMBS_UP': ['https://github.com/nickclark2016']}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/archanox,1,https://github.com/premake/premake-core/pull/1714,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/archanox,2,https://github.com/premake/premake-core/pull/1714#issuecomment-915840677,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","The following files may need updating but I'm not sure how to proceed with confidently making the required changes here.

/contrib/curl/include/curl/curlbuild.h

This looks like it should be accepting its changes from upstream, rather than be made locally. Should this not be a gitmodule?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1714#issuecomment-916154182,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Can we get a unit test added in here?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1714#issuecomment-916731372,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@archanox Just to confirm, you're only adding RISC-V support for D projects specifically using LDC?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/archanox,5,https://github.com/premake/premake-core/pull/1714#issuecomment-917143332,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Can we get a unit test added in here?

Can I get some guidance on how to go about this? What, where, how‚Ä¶?

@archanox Just to confirm, you're only adding RISC-V support for D projects specifically using LDC?

It shouldn‚Äôt be ‚Äúonly‚Äù. If you‚Äôd prefer I can create an issue outlining what was the problem I intended to solve, showing what wasn‚Äôt working. In a nutshell GTAmodding/re3 was unable to be provided the RISC-V target.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/nickclark2016,6,https://github.com/premake/premake-core/pull/1714#issuecomment-917165315,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Can we get a unit test added in here?

Can I get some guidance on how to go about this? What, where, how‚Ä¶?

@archanox Just to confirm, you're only adding RISC-V support for D projects specifically using LDC?

It shouldn‚Äôt be ‚Äúonly‚Äù. If you‚Äôd prefer I can create an issue outlining what was the problem I intended to solve, showing what wasn‚Äôt working. In a nutshell GTAmodding/re3 was unable to be provided the RISC-V target.

For the unit tests, please add to the test_ldc.lua file.  There are some tests there for the LDC toolchain.  If you have a more specific question, let me know and I'll answer regarding the unit tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1714#issuecomment-917569520,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@archanox Right, I see, you don't want to specify RISC-V specifically, you just want a platform that doesn't specify architecture. I was expecting some of these to be modified if you were wanting RISC-V specifically, similar to how you modified LDC.
GCC:

  
    
      premake-core/src/tools/gcc.lua
    
    
        Lines 50 to 53
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-m32"", 
        

        
          
           	x86_64 = ""-m64"", 
        

        
          
           }, 
        
    
  



  
    
      premake-core/src/tools/gcc.lua
    
    
        Lines 409 to 412
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-m32"", 
        

        
          
           	x86_64 = ""-m64"", 
        

        
          
           }, 
        
    
  



  
    
      premake-core/src/tools/gcc.lua
    
    
        Lines 453 to 468
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = function (cfg) 
        

        
          
           		local r = {} 
        

        
          
           		if not table.contains(os.getSystemTags(cfg.system), ""darwin"") then 
        

        
          
           			table.insert (r, ""-L/usr/lib32"") 
        

        
          
           		end 
        

        
          
           		return r 
        

        
          
           	end, 
        

        
          
           	x86_64 = function (cfg) 
        

        
          
           		local r = {} 
        

        
          
           		if not table.contains(os.getSystemTags(cfg.system), ""darwin"") then 
        

        
          
           			table.insert (r, ""-L/usr/lib64"") 
        

        
          
           		end 
        

        
          
           		return r 
        

        
          
           	end, 
        

        
          
           }, 
        
    
  


Clang:

  
    
      premake-core/src/tools/clang.lua
    
    
        Lines 217 to 220
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-m32"", 
        

        
          
           	x86_64 = ""-m64"", 
        

        
          
           }, 
        
    
  


DMD:

  
    
      premake-core/modules/d/tools/dmd.lua
    
    
        Lines 33 to 36
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = { ""-m32"" }, 
        

        
          
           	x86_64 = { ""-m64"" }, 
        

        
          
           }, 
        
    
  



  
    
      premake-core/modules/d/tools/dmd.lua
    
    
        Lines 54 to 57
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-L-L/usr/lib"", 
        

        
          
           	x86_64 = ""-L-L/usr/lib64"", 
        

        
          
           } 
        
    
  



  
    
      premake-core/modules/d/tools/dmd.lua
    
    
        Lines 124 to 127
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = { ""-m32"" }, 
        

        
          
           	x86_64 = { ""-m64"" }, 
        

        
          
           }, 
        
    
  



  
    
      premake-core/modules/d/tools/dmd.lua
    
    
        Lines 214 to 217
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-m32mscoff"", 
        

        
          
           	x86_64 = ""-m64"", 
        

        
          
           }, 
        
    
  


GDC:

  
    
      premake-core/modules/d/tools/gdc.lua
    
    
        Lines 27 to 30
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-m32"", 
        

        
          
           	x86_64 = ""-m64"", 
        

        
          
           }, 
        
    
  



  
    
      premake-core/modules/d/tools/gdc.lua
    
    
        Lines 201 to 204
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = { ""-m32"" }, 
        

        
          
           	x86_64 = { ""-m64"" }, 
        

        
          
           }, 
        
    
  



  
    
      premake-core/modules/d/tools/gdc.lua
    
    
        Lines 230 to 233
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-L/usr/lib"", 
        

        
          
           	x86_64 = ""-L/usr/lib64"", 
        

        
          
           } 
        
    
  


LDC:

  
    
      premake-core/modules/d/tools/ldc.lua
    
    
        Lines 303 to 306
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = { ""-m32"" }, 
        

        
          
           	x86_64 = { ""-m64"" }, 
        

        
          
           }, 
        
    
  



  
    
      premake-core/modules/d/tools/ldc.lua
    
    
        Lines 324 to 327
      in
      bfafd86
    
  
  
    

        
          
           architecture = { 
        

        
          
           	x86 = ""-L=-L/usr/lib"", 
        

        
          
           	x86_64 = ""-L=-L/usr/lib64"", 
        

        
          
           }",True,{'THUMBS_UP': ['https://github.com/archanox']}
premake/premake-core,https://github.com/premake/premake-core,1714,2021-09-09T07:23:14Z,,2021-09-15T08:17:22Z,OPEN,False,5,0,5,https://github.com/archanox,RISC-V Support,1,[],https://github.com/premake/premake-core/pull/1714,https://github.com/archanox,8,https://github.com/premake/premake-core/pull/1714#issuecomment-919802852,"What does this PR do?
Enables RISC-V support.
How does this PR change Premake's behavior?
No breaking changes, enables an additional build target.
Anything else we should know?
This has only been tested successfully within the scope of getting https://github.com/GTAmodding/re3 to build.
Did you check all the boxes?

[‚úî] Focus on a single fix or feature; remove any unrelated formatting or code changes
[‚ùå] Add unit tests showing fix or feature works; all tests pass
[N/A] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[‚úî] Follow our coding conventions
[‚úî] Minimize the number of commits
[‚úî] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@samsinsane ashamedly all I did was do a quick search for ARM64 and slipped in RISCV64 next to it.
I then proceeded to build my fork https://github.com/archanox/re3 using the binary built from this premake fork, and there were no apparent issues.
I will still look at plumbing through the rest of the changes as there are tuneables for rv64. https://gcc.gnu.org/onlinedocs/gcc/RISC-V-Options.html
A consideration I had not made is that someone may use this tool for RISC-V 32bit platforms outside of Linux (embedded etc).",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1715,2021-09-15T20:51:23Z,2021-09-16T13:15:14Z,2021-09-16T13:15:14Z,MERGED,True,19,23,11,https://github.com/KyrietS,Docs maintenance,1,[],https://github.com/premake/premake-core/pull/1715,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1715,"What does this PR do?

filled missing heading in tables (intentionally not everywhere)
fixed link to symbols.md
removed an accidentally added *.md extension from libX11.so

How does this PR change Premake's behavior?
Website only.
Anything else we should know?
I'm sorry for: Focus on a single fix or feature. I think that loosening this condition for the need of this type of commits is beneficial. It's still only fixing some bugs but in bulk.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

filled missing heading in tables (intentionally not everywhere)
fixed link to symbols.md
removed an accidentally added *.md extension from libX11.so

How does this PR change Premake's behavior?
Website only.
Anything else we should know?
I'm sorry for: Focus on a single fix or feature. I think that loosening this condition for the need of this type of commits is beneficial. It's still only fixing some bugs but in bulk.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1718,2021-09-16T14:29:27Z,2021-09-17T18:04:37Z,2021-10-22T14:27:12Z,MERGED,True,29,40,15,https://github.com/starkos,Deprecate configuration(),1,[],https://github.com/premake/premake-core/pull/1718,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1718,"What does this PR do?
Marks configuration() as deprecated. We'll continue supporting it for 5.0, but it will not be included in Premake 6.
How does this PR change Premake's behavior?
No breaking changes, just a warning message.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Marks configuration() as deprecated. We'll continue supporting it for 5.0, but it will not be included in Premake 6.
How does this PR change Premake's behavior?
No breaking changes, just a warning message.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1718,2021-09-16T14:29:27Z,2021-09-17T18:04:37Z,2021-10-22T14:27:12Z,MERGED,True,29,40,15,https://github.com/starkos,Deprecate configuration(),1,[],https://github.com/premake/premake-core/pull/1718,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1718#issuecomment-921699449,"What does this PR do?
Marks configuration() as deprecated. We'll continue supporting it for 5.0, but it will not be included in Premake 6.
How does this PR change Premake's behavior?
No breaking changes, just a warning message.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass (n/a)
 Mention any related issues
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'd suggest aligning all the examples that use configuration instead of filter. I think I've listed all of them:

@KyrietS I so appreciate having you on the project. Fixed now.",True,{'HEART': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/T-rvw,1,https://github.com/premake/premake-core/pull/1720,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/T-rvw,2,https://github.com/premake/premake-core/pull/1720#issuecomment-922523359,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@nickclark2016 I prepared this PR for previous discussion on adding On option for justmycode.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/T-rvw,3,https://github.com/premake/premake-core/pull/1720#issuecomment-922525502,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I don't understand why suite.nuGetPackages_multipleAssemblies failed in debug/win32 build. A glitch?
I will look into more details tomorrow.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1720#issuecomment-922540826,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I don't understand why suite.nuGetPackages_multipleAssemblies failed in debug/win32 build. A glitch?
I will look into more details tomorrow.

Not sure what the issue was, looks like a network hiccup.  Rerunning the tests.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1720#issuecomment-922541055,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Looks like a cert issue.  However, I'm not comfortable with merging without it being verified.  I'll rerun the tests in the morning.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/T-rvw,6,https://github.com/premake/premake-core/pull/1720#issuecomment-924538657,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Looks like a cert issue. However, I'm not comfortable with merging without it being verified. I'll rerun the tests in the morning.

It looks that network issue was gone. All tests passed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/KyrietS,7,https://github.com/premake/premake-core/pull/1720#issuecomment-925110927,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please add 'justmycode' to website/sidebars.js under Reference > Project Settings ü§†
(sidebar will be autogenerated in the future but for now we maintain it manually)",True,{}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/T-rvw,8,https://github.com/premake/premake-core/pull/1720#issuecomment-925135624,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Please add 'justmycode' to website/sidebars.js under Reference > Project Settings ü§†
(sidebar will be autogenerated in the future but for now we maintain it manually)

Thanks! I forgot to add it. This improvement can be planned in project's backlog. Automation makes life better.",True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1720,2021-09-19T18:54:46Z,2021-10-20T22:25:43Z,2021-10-21T05:20:21Z,MERGED,True,57,7,7,https://github.com/T-rvw,Improve justmycode,1,[],https://github.com/premake/premake-core/pull/1720,https://github.com/T-rvw,9,https://github.com/premake/premake-core/pull/1720#issuecomment-926071327,"What does this PR do?
In the past, we got Premake errors when switching justmycode ""Off"" to ¬∑justmycode ""On"". Because justmycode api only allows Off. In my opinion, it is confusing for users that an api only supports ""On"" or ""Off"" even though it has some reasons behind.
How does this PR change Premake's behavior?
No.
Anything else we should know?
I also noticed that there is no document for justmycode api.
Did you check all the boxes?

[Yes] Focus on a single fix or feature; remove any unrelated formatting or code changes
[Yes] Add unit tests showing fix or feature works; all tests pass
[Yes] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[Yes] Follow our coding conventions
[Yes] Minimize the number of commits
[Yes] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","[  FAILED  ] vstudio_cs2005_assembly_refs.nuGetPackages_multipleAssemblies happens again after a document update. This test seems not stable at different time.
Update:
Passed in another run.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1721,2021-09-22T14:27:18Z,2021-10-28T14:13:19Z,2021-10-28T14:37:43Z,MERGED,True,517,174,12,https://github.com/Jarod42,Add custom rules for Gmake2 & Codelite,1,[],https://github.com/premake/premake-core/pull/1721,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1721,"What does this PR do?

Fix custom rule support (enum case) for gmake2 generator
Handle support of CustomRule for Codelite generator

How does this PR change Premake's behavior?
Handling of separator and switch in propertydefinition is coherent with msvc.
Anything else we should know?
The refacto (rule code moved from gmake to rule) is also used to add support of CustomRule for premake-ninja module
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?

Fix custom rule support (enum case) for gmake2 generator
Handle support of CustomRule for Codelite generator

How does this PR change Premake's behavior?
Handling of separator and switch in propertydefinition is coherent with msvc.
Anything else we should know?
The refacto (rule code moved from gmake to rule) is also used to add support of CustomRule for premake-ninja module
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1721,2021-09-22T14:27:18Z,2021-10-28T14:13:19Z,2021-10-28T14:37:43Z,MERGED,True,517,174,12,https://github.com/Jarod42,Add custom rules for Gmake2 & Codelite,1,[],https://github.com/premake/premake-core/pull/1721,https://github.com/Jarod42,2,https://github.com/premake/premake-core/pull/1721#issuecomment-953810552,"What does this PR do?

Fix custom rule support (enum case) for gmake2 generator
Handle support of CustomRule for Codelite generator

How does this PR change Premake's behavior?
Handling of separator and switch in propertydefinition is coherent with msvc.
Anything else we should know?
The refacto (rule code moved from gmake to rule) is also used to add support of CustomRule for premake-ninja module
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",rebase and squash done.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1721,2021-09-22T14:27:18Z,2021-10-28T14:13:19Z,2021-10-28T14:37:43Z,MERGED,True,517,174,12,https://github.com/Jarod42,Add custom rules for Gmake2 & Codelite,1,[],https://github.com/premake/premake-core/pull/1721,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1721#issuecomment-953888588,"What does this PR do?

Fix custom rule support (enum case) for gmake2 generator
Handle support of CustomRule for Codelite generator

How does this PR change Premake's behavior?
Handling of separator and switch in propertydefinition is coherent with msvc.
Anything else we should know?
The refacto (rule code moved from gmake to rule) is also used to add support of CustomRule for premake-ninja module
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Merged, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1723,2021-09-28T17:25:20Z,2021-10-20T22:56:04Z,2021-10-20T22:56:14Z,MERGED,True,144,25,2,https://github.com/cicanci,Add configuration condition to VS csproj references ItemGroup,1,[],https://github.com/premake/premake-core/pull/1723,https://github.com/cicanci,1,https://github.com/premake/premake-core/pull/1723,"What does this PR do?
Consider the following premake5.lua script line:
links { ""bin/%{cfg.platform}/%{cfg.buildcfg}/MyLib.Sharp.dll"" }
If you have more than one optimizations it will only consider the first one found. So, for example, if you have Debug and Release optimizations, the only DLL linked will be the Debug one, resulting in the following VS csproj configuration:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
The changes in this PR make it possible to apply the same condition used in the <PropertyGroup> to the <ItemGroup> when linking a DLL in a VS csproj, resulting in the following VS csproj configuration (considering the previous example).
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Release\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
How does this PR change Premake's behavior?
After this PR, any VS csproj that links a DLL will have the condition applied for each optimization defined. For example, if only Debug is used, the VS csproj will change from this:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
To this:
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
Anything else we should know?
Not really, the changes are pretty straight forward.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Consider the following premake5.lua script line:
links { ""bin/%{cfg.platform}/%{cfg.buildcfg}/MyLib.Sharp.dll"" }
If you have more than one optimizations it will only consider the first one found. So, for example, if you have Debug and Release optimizations, the only DLL linked will be the Debug one, resulting in the following VS csproj configuration:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
The changes in this PR make it possible to apply the same condition used in the <PropertyGroup> to the <ItemGroup> when linking a DLL in a VS csproj, resulting in the following VS csproj configuration (considering the previous example).
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Release\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
How does this PR change Premake's behavior?
After this PR, any VS csproj that links a DLL will have the condition applied for each optimization defined. For example, if only Debug is used, the VS csproj will change from this:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
To this:
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
Anything else we should know?
Not really, the changes are pretty straight forward.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1723,2021-09-28T17:25:20Z,2021-10-20T22:56:04Z,2021-10-20T22:56:14Z,MERGED,True,144,25,2,https://github.com/cicanci,Add configuration condition to VS csproj references ItemGroup,1,[],https://github.com/premake/premake-core/pull/1723,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1723#issuecomment-929559593,"What does this PR do?
Consider the following premake5.lua script line:
links { ""bin/%{cfg.platform}/%{cfg.buildcfg}/MyLib.Sharp.dll"" }
If you have more than one optimizations it will only consider the first one found. So, for example, if you have Debug and Release optimizations, the only DLL linked will be the Debug one, resulting in the following VS csproj configuration:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
The changes in this PR make it possible to apply the same condition used in the <PropertyGroup> to the <ItemGroup> when linking a DLL in a VS csproj, resulting in the following VS csproj configuration (considering the previous example).
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Release\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
How does this PR change Premake's behavior?
After this PR, any VS csproj that links a DLL will have the condition applied for each optimization defined. For example, if only Debug is used, the VS csproj will change from this:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
To this:
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
Anything else we should know?
Not really, the changes are pretty straight forward.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Looks like we have tests failing here.  Please investigate why these tests are failing, resolve the failures, and then add unit testing for the new piece of functionality.",True,{'THUMBS_UP': ['https://github.com/cicanci']}
premake/premake-core,https://github.com/premake/premake-core,1723,2021-09-28T17:25:20Z,2021-10-20T22:56:04Z,2021-10-20T22:56:14Z,MERGED,True,144,25,2,https://github.com/cicanci,Add configuration condition to VS csproj references ItemGroup,1,[],https://github.com/premake/premake-core/pull/1723,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1723#issuecomment-931310048,"What does this PR do?
Consider the following premake5.lua script line:
links { ""bin/%{cfg.platform}/%{cfg.buildcfg}/MyLib.Sharp.dll"" }
If you have more than one optimizations it will only consider the first one found. So, for example, if you have Debug and Release optimizations, the only DLL linked will be the Debug one, resulting in the following VS csproj configuration:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
The changes in this PR make it possible to apply the same condition used in the <PropertyGroup> to the <ItemGroup> when linking a DLL in a VS csproj, resulting in the following VS csproj configuration (considering the previous example).
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Release\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
How does this PR change Premake's behavior?
After this PR, any VS csproj that links a DLL will have the condition applied for each optimization defined. For example, if only Debug is used, the VS csproj will change from this:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
To this:
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
Anything else we should know?
Not really, the changes are pretty straight forward.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Also, if you could squash your changes down to a single commit (you can force push to this branch to overwrite the previous commits) it will make it easier for us to merge it. Thanks!",True,{'THUMBS_UP': ['https://github.com/cicanci']}
premake/premake-core,https://github.com/premake/premake-core,1723,2021-09-28T17:25:20Z,2021-10-20T22:56:04Z,2021-10-20T22:56:14Z,MERGED,True,144,25,2,https://github.com/cicanci,Add configuration condition to VS csproj references ItemGroup,1,[],https://github.com/premake/premake-core/pull/1723,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1723#issuecomment-948096770,"What does this PR do?
Consider the following premake5.lua script line:
links { ""bin/%{cfg.platform}/%{cfg.buildcfg}/MyLib.Sharp.dll"" }
If you have more than one optimizations it will only consider the first one found. So, for example, if you have Debug and Release optimizations, the only DLL linked will be the Debug one, resulting in the following VS csproj configuration:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
The changes in this PR make it possible to apply the same condition used in the <PropertyGroup> to the <ItemGroup> when linking a DLL in a VS csproj, resulting in the following VS csproj configuration (considering the previous example).
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Release\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
How does this PR change Premake's behavior?
After this PR, any VS csproj that links a DLL will have the condition applied for each optimization defined. For example, if only Debug is used, the VS csproj will change from this:
<ItemGroup>
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
To this:
<ItemGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
  <Reference Include=""MyLib.Sharp"">
  <HintPath>..\..\bin\x64\Debug\MyLib.Sharp.dll</HintPath>
  </Reference>
</ItemGroup>
Anything else we should know?
Not really, the changes are pretty straight forward.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Merged, thanks!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1726,2021-10-04T05:50:47Z,2021-10-04T16:43:08Z,2021-10-07T08:55:52Z,MERGED,True,31,18,2,https://github.com/samsinsane,Updated cdialect and cppdialect docs,1,[],https://github.com/premake/premake-core/pull/1726,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1726,"What does this PR do?
Updates the documentation for cdialect and cppdialect.
How does this PR change Premake's behavior?
Docs only.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Updates the documentation for cdialect and cppdialect.
How does this PR change Premake's behavior?
Docs only.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1727,2021-10-04T06:07:16Z,2021-10-04T16:43:38Z,2021-10-07T08:55:55Z,MERGED,True,9,0,1,https://github.com/samsinsane,Updated architecture docs,1,[],https://github.com/premake/premake-core/pull/1727,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1727,"What does this PR do?
Updates the documentation for architecture.
How does this PR change Premake's behavior?
Docs only.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Updates the documentation for architecture.
How does this PR change Premake's behavior?
Docs only.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1728,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1728#issuecomment-933609203,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Just remember that those auto-generated drafts won't appear on the sidebar but will still be searchable.
Sidebar auto-generation (which I've been talking about for months and it's still work-in-progress üòÖ) is based on folders. So eventually we would like to get something similar to 6.x docs arranged in folders. For now it is ok to have all markdown files in one folder, but I plan to change that at some point.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1728#issuecomment-933940568,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Just remember that those auto-generated drafts won't appear on the sidebar but will still be searchable.

Oh, that was not intentional at all - even though I modified the sidebar.js it didn't even occur to me to add these new files. Should I add these files? I think even just availability information being there is better than nothing. @KyrietS what are your thoughts?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1728#issuecomment-934410399,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I think that these drafts should be listed in the sidebar so that users can see it and (hopefully) help us develop the documentation. I'm just wondering that maybe we should create a separate section in the sidebar for auto-generated pages to keep track of them ü§î.
(And personally, I wouldn't bother to automate the process of adding these pages to the sidebar)
Also, I think it would be nice if each draft had some sort of encouragement for the reader to help with the documentation improvements. ""This page was auto-generated. Feel free to help us improve the documentation by creating a pull request."" or something like that.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/samsinsane,5,https://github.com/premake/premake-core/pull/1728#issuecomment-937590253,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@KyrietS I've added the encouragement as you requested, and I've (manually) added the new files to the sidebar.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/KyrietS,6,https://github.com/premake/premake-core/pull/1728#issuecomment-938068275,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Looks like Docusaurus is complaining about anotherpage.md. That's sad. It's a bug to me so I've created an issue for this: facebook/docusaurus#5659. Let's wait for their response. In general this commit looks good to me.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1728#issuecomment-938325336,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@KyrietS I can just remove the commented out section for the files that I added, and just leave it in the template generation?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/KyrietS,8,https://github.com/premake/premake-core/pull/1728#issuecomment-938378102,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@samsinsane Okay, then please do it. Their fix will be for the next version of Docusaurus anyway.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1728,2021-10-04T09:56:01Z,2021-10-21T20:20:05Z,2021-10-22T03:41:22Z,MERGED,True,1373,10,57,https://github.com/samsinsane,Add action to check for and generate missing documentation,1,[],https://github.com/premake/premake-core/pull/1728,https://github.com/samsinsane,9,https://github.com/premake/premake-core/pull/1728#issuecomment-939315327,"Added auto-generated documentation files for APIs without docs
Renamed editAndContinue.md to editandcontinue.md to match convention

What does this PR do?
Adds a helpful action for the Premake project to auto-generate new documentation.
How does this PR change Premake's behavior?
Prevents CI builds from succeeding if documentation is missing.
Anything else we should know?
Under certain conditions the git commands won't work, for example if a user hasn't allowed tags to be downloaded. This PR doesn't necessarily focus on a single fix/feature as the template required for missing documentation needs to be reviewed. Similarly, editAndContinue needed to be corrected to avoid a false-positive on the missing documentation.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@KyrietS I've removed the commented out section in the files this PR adds. Should be all good now! üòÑ,True,{}
premake/premake-core,https://github.com/premake/premake-core,1730,2021-10-07T09:53:50Z,2021-10-16T04:56:39Z,2021-10-16T04:56:40Z,MERGED,True,5,0,1,https://github.com/samsinsane,Added missing compileas values to docs,1,[],https://github.com/premake/premake-core/pull/1730,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1730,"What does this PR do?
Adds missing values to compileas documentation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
I wasn't sure what the Module, ModulePartition and HeaderUnit values actually do, so I left these as ""needs documentation"".
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds missing values to compileas documentation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
I wasn't sure what the Module, ModulePartition and HeaderUnit values actually do, so I left these as ""needs documentation"".
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1734,2021-10-12T23:46:46Z,2021-10-20T22:49:02Z,2021-10-20T22:49:40Z,MERGED,True,3,0,1,https://github.com/asobruno,Add VS 2022 bootstrapping support,1,[],https://github.com/premake/premake-core/pull/1734,https://github.com/asobruno,1,https://github.com/premake/premake-core/pull/1734,"What does this PR do?
Adds a check for ""vs2022"" in Bootstrap.bat (for building from source on Windows).
How does this PR change Premake's behavior?
This is a small change I had to make in order to be able to build premake with Visual Studio 2022 RC support (had to build from the repo). Related change: #1704
Anything else we should know?
I added both 17.0 and 18.0, following the previous version check pattern.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds a check for ""vs2022"" in Bootstrap.bat (for building from source on Windows).
How does this PR change Premake's behavior?
This is a small change I had to make in order to be able to build premake with Visual Studio 2022 RC support (had to build from the repo). Related change: #1704
Anything else we should know?
I added both 17.0 and 18.0, following the previous version check pattern.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1736,2021-10-16T04:38:38Z,2021-10-20T15:59:07Z,2021-10-20T15:59:07Z,MERGED,True,1,0,1,https://github.com/sausagejohnson,Update showcase to include Orx,2,[],https://github.com/premake/premake-core/pull/1736,https://github.com/sausagejohnson,1,https://github.com/premake/premake-core/pull/1736,"Orx Portable Game Engine uses premake for building the game library and for all blank projects that the engine spins up.
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Orx Portable Game Engine uses premake for building the game library and for all blank projects that the engine spins up.
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1736,2021-10-16T04:38:38Z,2021-10-20T15:59:07Z,2021-10-20T15:59:07Z,MERGED,True,1,0,1,https://github.com/sausagejohnson,Update showcase to include Orx,2,[],https://github.com/premake/premake-core/pull/1736,https://github.com/sausagejohnson,2,https://github.com/premake/premake-core/pull/1736#issuecomment-947580056,"Orx Portable Game Engine uses premake for building the game library and for all blank projects that the engine spins up.
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Hi @samsinsane I saw you approved the PR, were you ok with it for a merge?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1737,2021-10-26T11:11:27Z,2021-11-01T11:16:56Z,2021-11-01T11:22:41Z,MERGED,True,11,1,2,https://github.com/simco50,Change Visual Studio Version to 17 so sln is opened with VS2022,3,[],https://github.com/premake/premake-core/pull/1737,https://github.com/simco50,1,https://github.com/premake/premake-core/pull/1737,"What does this PR do?
Change the VS version from 16 to 17 so to correctly match what VS2022 solutions look like.
How does this PR change Premake's behavior?
None
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Change the VS version from 16 to 17 so to correctly match what VS2022 solutions look like.
How does this PR change Premake's behavior?
None
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1737,2021-10-26T11:11:27Z,2021-11-01T11:16:56Z,2021-11-01T11:22:41Z,MERGED,True,11,1,2,https://github.com/simco50,Change Visual Studio Version to 17 so sln is opened with VS2022,3,[],https://github.com/premake/premake-core/pull/1737,https://github.com/simco50,2,https://github.com/premake/premake-core/pull/1737#issuecomment-952926461,"What does this PR do?
Change the VS version from 16 to 17 so to correctly match what VS2022 solutions look like.
How does this PR change Premake's behavior?
None
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'm not sure if this requires any unit tests?
Apologies as I'm not very familiar with the process.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1737,2021-10-26T11:11:27Z,2021-11-01T11:16:56Z,2021-11-01T11:22:41Z,MERGED,True,11,1,2,https://github.com/simco50,Change Visual Studio Version to 17 so sln is opened with VS2022,3,[],https://github.com/premake/premake-core/pull/1737,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1737#issuecomment-952970009,"What does this PR do?
Change the VS version from 16 to 17 so to correctly match what VS2022 solutions look like.
How does this PR change Premake's behavior?
None
Anything else we should know?
None
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'm the unit test police. Yeah, if you could add a test here, that'd be great!
https://github.com/premake/premake-core/blob/master/modules/vstudio/tests/sln2005/test_header.lua",True,"{'LAUGH': ['https://github.com/samsinsane', 'https://github.com/starkos'], 'HEART': ['https://github.com/KyrietS']}"
premake/premake-core,https://github.com/premake/premake-core,1739,2021-10-27T16:31:09Z,2021-10-29T10:34:02Z,2021-10-29T10:37:13Z,MERGED,True,36,12,3,https://github.com/starkos,Fix #1628 failing macOS os.findlib() test,1,[],https://github.com/premake/premake-core/pull/1739,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1739,"What does this PR do?
Fixes‚Äîor rather disables‚Äîa failing os.findlib() unit test on macOS. From Apple's release notes:

New in macOS Big Sur 11.0.1, the system ships with a built-in dynamic linker cache of all system-provided libraries. As part of this change, copies of dynamic libraries are no longer present on the filesystem. Code that attempts to check for dynamic library presence by looking for a file at a path or enumerating a directory will fail. Instead, check for library presence by attempting to dlopen() the path, which will correctly check for the library in the cache. (62986286)

So os.findlib() is effectively useless for locating system libraries on macOS. I've documented the issue and disabled the failing test for macOS.
How does this PR change Premake's behavior?
No changes to behavior, only the unit test.
Anything else we should know?
I think you're all doing a wonderful job.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes‚Äîor rather disables‚Äîa failing os.findlib() unit test on macOS. From Apple's release notes:

New in macOS Big Sur 11.0.1, the system ships with a built-in dynamic linker cache of all system-provided libraries. As part of this change, copies of dynamic libraries are no longer present on the filesystem. Code that attempts to check for dynamic library presence by looking for a file at a path or enumerating a directory will fail. Instead, check for library presence by attempting to dlopen() the path, which will correctly check for the library in the cache. (62986286)

So os.findlib() is effectively useless for locating system libraries on macOS. I've documented the issue and disabled the failing test for macOS.
How does this PR change Premake's behavior?
No changes to behavior, only the unit test.
Anything else we should know?
I think you're all doing a wonderful job.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1739,2021-10-27T16:31:09Z,2021-10-29T10:34:02Z,2021-10-29T10:37:13Z,MERGED,True,36,12,3,https://github.com/starkos,Fix #1628 failing macOS os.findlib() test,1,[],https://github.com/premake/premake-core/pull/1739,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1739#issuecomment-953432341,"What does this PR do?
Fixes‚Äîor rather disables‚Äîa failing os.findlib() unit test on macOS. From Apple's release notes:

New in macOS Big Sur 11.0.1, the system ships with a built-in dynamic linker cache of all system-provided libraries. As part of this change, copies of dynamic libraries are no longer present on the filesystem. Code that attempts to check for dynamic library presence by looking for a file at a path or enumerating a directory will fail. Instead, check for library presence by attempting to dlopen() the path, which will correctly check for the library in the cache. (62986286)

So os.findlib() is effectively useless for locating system libraries on macOS. I've documented the issue and disabled the failing test for macOS.
How does this PR change Premake's behavior?
No changes to behavior, only the unit test.
Anything else we should know?
I think you're all doing a wonderful job.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","This function could attempt to load the library on macOS instead? Additionally, the documentation suggests that this function will still work in older versions of macOS but your change applies to all versions of macOS not just 11.0 and higher.",True,{'THUMBS_UP': ['https://github.com/Jarod42']}
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/Triang3l,1,https://github.com/premake/premake-core/pull/1740,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,"{'HOORAY': ['https://github.com/Razzile', 'https://github.com/gibbed']}"
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/Triang3l,2,https://github.com/premake/premake-core/pull/1740#issuecomment-955430789,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Considering there are 4 community modules (2 already listed on the website ‚Äî though I'm not sure if we should add the old premake-ndk without a request from its author) targeting the Android NDK, each with their own features (multi-ABI builds and language filters here, whole app project generation in other ones, possibly broader (in a different way) external Android.mk inclusion functionality in another), would user experience of the visitors of the page be better if all NDK modules were grouped, with their key advantages, as well as the exact target build systems (ndk-build, CMake, Gradle, Ant), listed? The way I added this module to the list in this pull request is just the one that involves least changes, as anything further would be something to discuss, I think.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/starkos,3,https://github.com/premake/premake-core/pull/1740#issuecomment-958917618,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Considering there are 4 community modules (2 already listed on the website‚Ä¶each with their own features‚Ä¶would user experience of the visitors of the page be better if all NDK modules were grouped, with their key advantages, as well as the exact target build systems (ndk-build, CMake, Gradle, Ant), listed?

If you're able to contribute that knowledge, that would be awesome! All for it.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1740#issuecomment-958922152,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@Triang3l Do you want to split out the Android/NDK group as part of this PR, or should we go ahead and merge this one now?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/Triang3l,5,https://github.com/premake/premake-core/pull/1740#issuecomment-959741625,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@starkos Yes, I'll split it out here after browsing their code a bit more. Should I add https://github.com/IsCoolEntertainment/premake-ndk as well?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/starkos,6,https://github.com/premake/premake-core/pull/1740#issuecomment-974893436,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@Triang3l Where do we stand one this one? Are you still up for breaking out a section for Android, or should we go ahead and merge this as is?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1740,2021-10-30T16:20:00Z,,2021-11-21T21:33:33Z,OPEN,False,1,0,1,https://github.com/Triang3l,Add premake-androidndk module link to the website,1,[],https://github.com/premake/premake-core/pull/1740,https://github.com/Triang3l,7,https://github.com/premake/premake-core/pull/1740#issuecomment-974899228,"What does this PR do?
Adds a link to the new generator for the ndk-build system used in the Android NDK, for building C, C++, GNU Assembler, Yasm and RenderScript code for Android, with support for per-architecture settings.
How does this PR change Premake's behavior?
As this is a third-party module, the core functionality of Premake is not changed ‚Äî only the community section on the website is modified.
This module exposes a more comprehensive set of features provided by ndk-build compared to other NDK modules, such as Meoo/premake-androidmk (ndk-build, listed on the website), IsCoolEntertainment/premake-ndk (ndk-build, not listed), polymonster/premake-android-studio (CMake, listed). I haven't done comparisons to the generator of Visual Studio projects for the Android NDK as it appears that Visual Studio has a different approach to target architecture selection, though this module serves a different goal ‚Äî generation of files for Google's original cross-platform tools.
The most important addition ‚Äî why this module was created in the first place (as our project contains a large amount of architecture-specific code, being an emulator) ‚Äî is support for architecture filters, while also preserving the intended way of running ndk-build (one invocation builds for all needed architectures), so it's easy to use the generated scripts with Gradle via its externalNativeBuild.ndkBuild functionality, with only a few additions to the arguments provided to ndk-build. It's done by allowing users to specify multiple platforms (or build configurations) to build the workspace for, each with its own architecture (though universal-architecture configurations, including mixing of architecture specializations and architecture-agnostic fallbacks, are also supported). The configuration‚Äìplatform pair that will actually be used for building each project, out of all build configurations and platforms selected by the user, will be chosen based on the TARGET_ARCH_ABI state variable set by ndk-build at build time. This is in contrast to other NDK modules for Premake, which restrict one build system invocation to just one set of project settings (similar to the behavior of most build systems that Premake generates scripts for), making it inconvenient to integrate generated scripts into Gradle projects if per-architecture settings are needed.
The new module also tries to provide broad support for all source file languages accepted by ndk-build ‚Äî C, C++, the GNU Assembler, Yasm and RenderScript, passing applicable settings to the compilers of each. As Premake itself doesn't expose separate settings like buildoptions and defines (among many others) for different languages, this module relies on files:**.extension filters for letting the user pick which language each setting is designed for. Unfortunately, ndk-build doesn't allow per-file settings (except for .arm and .neon suffixes, exposed directly or as properly file-filtered armisa and vectorextensions by this module), but it does provide certain per-language variables, so this specific kind of files filtering is still possible to some extent.
On the linkage side, a few additional features for convenience and for consistency with other build systems (like Visual Studio) are also available. System libraries required by static libraries (via links or, as a fallback, for example, for cases of name collisions, linkoptions) are automatically exported to shared libraries that depend on them. This is also done for -u (--undefined) in linkoptions, so a static library project can, for instance, list the Java native function implementations it contains, so they will not be removed from shared libraries as unused by the linker (the more brute-force option, whole archive linkage, is also provided via two new settings ‚Äî either wholelib in the static library or wholelibs in the shared library can be used for this purpose). The -flto type can also be overridden via buildoptions and linkoptions, and it will be exported from static libraries if it's specified in their linkoptions.
Prebuilt libraries, external Android.mk files, and executables (such as for Runtime.exec or Termux) are also supported. The way external Android.mk files are exposed is different than in Meoo/premake-androidmk and, possibly unlike there, is limited to only one ndk-build module per Android.mk, as ndk-build modules correspond to Premake projects here so they can have their own linkoptions, links and some other settings.
A lot of attention is paid to escaping and input validation ‚Äî as ndk-build performs various string operations internally and passes values to shell commands, the handling of each non-alphanumeric character in all ndk-build variables accepting file names or paths was checked. Different kinds of escaping are performed at both Premake time and dynamically at build time (so escaping is also done for the result of GNU make $ variable expansion and function calls).
Anything else we should know?
While this module is generally more flexible at building native code, it still doesn't completely supersede the other generators mentioned previously. One example covered above is different constraints in the usage of external Android.mk files. Deprecated architectures, such as ARMv5, are not supported as well (as they would need not only the architecture value, but also settings for things like floating-point operation implementation and calling convention for floating-point numbers). Gradle, Java/Kotlin are completely out of scope of the project, as that's a completely different world than what is covered by Premake.
The module is also intentionally incompatible with the settings added by the Visual Studio Android module in the Premake core. There are many things that it does inconsistently with Premake itself, that will likely be unexpected or inconvenient to users. The detailed list of reasons for diverging is written in the bottom of the README.md of the new module, but some of the examples are duplicate (and lowercase) architecture names which are not aliases, thumbmode also being lowercase and using ""disabled"" instead of the usual ""Default"" (and also duplicated as flags ""Thumb""), androidapilevel introduced while systemversion exists. If the new module is added to the core, I think the Visual Studio module needs to be adjusted (to use the new armisa = ""Default"" / ""A32"" / ""T32"" instead of thumbmode = ""disabled"" / ""arm"" / ""thumb"", the cppstl setting added by this module which corresponds directly to the NDK STL names instead of stl with arbitrary and unexpected renaming) rather than this module.
Currently, the module doesn't include unit tests. There are many edge cases that need to be validated, including various combinations of platform-specific and platform-agnostic, architecture-specific and architecture-agnostic configurations, linkage (including transitivity of certain settings), input validation. However, this is unfortunately also the reason why it's a massive task, but it's among what I want to do in the future, though it's low-priority as it doesn't directly effect my main project that uses this module.
Did you check all the boxes?
(This section is not entirely applicable as this is a third-party module rather than core functionality.)

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@starkos I think a subitem should be more user-friendly. I'm somewhat stuck regarding how features of the modules should be listed, however (while I think it's important to do so to make sure people won't be asking ‚Äúwhy 4 of the same?‚Äù and maybe even get disappointed if they don't find the needed functionality in just one or two of them), considering that such a list may become outdated if something is changed in their code, though at least 2 of the modules there have not been updated for a long time, but I'll send a pull request within the next week with the proposed format.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1744,2021-11-02T16:56:31Z,2021-11-03T10:43:29Z,2021-11-03T12:14:25Z,MERGED,True,89,6,15,https://github.com/samsinsane,Add check for missing values in documentation,1,[],https://github.com/premake/premake-core/pull/1744,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1744,"Added missing values in documentation files

What does this PR do?
Adds missing values in the documentation, and adds check for missing values to docs-check action.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Various values added to docs in this PR require proper documentation. The flags API should probably have a separate table for deprecated values.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Added missing values in documentation files

What does this PR do?
Adds missing values in the documentation, and adds check for missing values to docs-check action.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Various values added to docs in this PR require proper documentation. The flags API should probably have a separate table for deprecated values.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1745,2021-11-04T19:59:37Z,2021-11-05T17:40:23Z,2021-11-05T17:41:18Z,MERGED,True,4,4,1,https://github.com/hannes-harnisch,Adding documentation for module options,1,[],https://github.com/premake/premake-core/pull/1745,https://github.com/hannes-harnisch,1,https://github.com/premake/premake-core/pull/1745,"What does this PR do?
The website currently does not fully document the module-related options for the compileas setting. I implemented these settings in #1570. I added basic descriptions about what the individual settings do. The terms used reflect those used in the C++20 standard. I think more detailed descriptions aren't necessary, as they would probably easily branch out into a lengthy description of C++20 modules, which shouldn't be the purpose of this page.
How does this PR change Premake's behavior?
In no way. It's purely documentation.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
The website currently does not fully document the module-related options for the compileas setting. I implemented these settings in #1570. I added basic descriptions about what the individual settings do. The terms used reflect those used in the C++20 standard. I think more detailed descriptions aren't necessary, as they would probably easily branch out into a lengthy description of C++20 modules, which shouldn't be the purpose of this page.
How does this PR change Premake's behavior?
In no way. It's purely documentation.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1745,2021-11-04T19:59:37Z,2021-11-05T17:40:23Z,2021-11-05T17:41:18Z,MERGED,True,4,4,1,https://github.com/hannes-harnisch,Adding documentation for module options,1,[],https://github.com/premake/premake-core/pull/1745,https://github.com/hannes-harnisch,2,https://github.com/premake/premake-core/pull/1745#issuecomment-961989277,"What does this PR do?
The website currently does not fully document the module-related options for the compileas setting. I implemented these settings in #1570. I added basic descriptions about what the individual settings do. The terms used reflect those used in the C++20 standard. I think more detailed descriptions aren't necessary, as they would probably easily branch out into a lengthy description of C++20 modules, which shouldn't be the purpose of this page.
How does this PR change Premake's behavior?
In no way. It's purely documentation.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I'm unsure on what makes the website check fail.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1745,2021-11-04T19:59:37Z,2021-11-05T17:40:23Z,2021-11-05T17:41:18Z,MERGED,True,4,4,1,https://github.com/hannes-harnisch,Adding documentation for module options,1,[],https://github.com/premake/premake-core/pull/1745,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1745#issuecomment-962058260,"What does this PR do?
The website currently does not fully document the module-related options for the compileas setting. I implemented these settings in #1570. I added basic descriptions about what the individual settings do. The terms used reflect those used in the C++20 standard. I think more detailed descriptions aren't necessary, as they would probably easily branch out into a lengthy description of C++20 modules, which shouldn't be the purpose of this page.
How does this PR change Premake's behavior?
In no way. It's purely documentation.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'm looking into this.
UPDATE
I couldn't reproduce this error locally. Re-run passed.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1745,2021-11-04T19:59:37Z,2021-11-05T17:40:23Z,2021-11-05T17:41:18Z,MERGED,True,4,4,1,https://github.com/hannes-harnisch,Adding documentation for module options,1,[],https://github.com/premake/premake-core/pull/1745,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1745#issuecomment-962090185,"What does this PR do?
The website currently does not fully document the module-related options for the compileas setting. I implemented these settings in #1570. I added basic descriptions about what the individual settings do. The terms used reflect those used in the C++20 standard. I think more detailed descriptions aren't necessary, as they would probably easily branch out into a lengthy description of C++20 modules, which shouldn't be the purpose of this page.
How does this PR change Premake's behavior?
In no way. It's purely documentation.
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Thanks for your help in documenting those values! ü§ó,True,{'HEART': ['https://github.com/hannes-harnisch']}
premake/premake-core,https://github.com/premake/premake-core,1747,2021-11-06T08:47:25Z,2021-11-26T15:39:31Z,2021-11-26T15:39:31Z,MERGED,True,136,2,6,https://github.com/samsinsane,Added API for CompileAsWinRT,1,[],https://github.com/premake/premake-core/pull/1747,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1747,"What does this PR do?
Adds API to consume the Windows Runtime language extensions.
How does this PR change Premake's behavior?
No breaking changes, only adds the element when the API is set.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds API to consume the Windows Runtime language extensions.
How does this PR change Premake's behavior?
No breaking changes, only adds the element when the API is set.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1747,2021-11-06T08:47:25Z,2021-11-26T15:39:31Z,2021-11-26T15:39:31Z,MERGED,True,136,2,6,https://github.com/samsinsane,Added API for CompileAsWinRT,1,[],https://github.com/premake/premake-core/pull/1747,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1747#issuecomment-962440912,"What does this PR do?
Adds API to consume the Windows Runtime language extensions.
How does this PR change Premake's behavior?
No breaking changes, only adds the element when the API is set.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Why consumewinrtextension ""On"" and not just winrt ""On""?

I would find it kind of confusing if it was winrt instead of consumewinrtextension. This enables the usage of C++/CX, but Microsoft also released C++/WinRT which doesn't require this to be enabled - nice and confusing! The UI item this PR implements is labelled as ""Consume Windows Runtime Extension"". I'm happy to change it but I feel like ""WinRT"" means too many things for an API to be named just winrt.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1749,2021-11-06T17:23:18Z,2021-11-07T05:05:07Z,2021-11-07T05:05:07Z,MERGED,True,62,2,4,https://github.com/nickclark2016,Changed C++20 to emit C++20 instead of C++Latest in MSVC,1,[],https://github.com/premake/premake-core/pull/1749,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1749,"What does this PR do?
Changes C++20 to emit stdcpp20 instead of stdcpplatest in VS projects VS2017 or newer.  Adds c11 and c17 outputs to VS 2019 and newer projects.
How does this PR change Premake's behavior?
Existing projects with the cppdialect set to C++20 will now emit stdcpp20 instead of stdcpplatest for VS 2017 and newer.
Anything else we should know?
Closes #1746
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Changes C++20 to emit stdcpp20 instead of stdcpplatest in VS projects VS2017 or newer.  Adds c11 and c17 outputs to VS 2019 and newer projects.
How does this PR change Premake's behavior?
Existing projects with the cppdialect set to C++20 will now emit stdcpp20 instead of stdcpplatest for VS 2017 and newer.
Anything else we should know?
Closes #1746
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1750,2021-11-07T04:10:07Z,2022-05-21T05:16:42Z,2022-05-21T05:16:42Z,MERGED,True,44,0,2,https://github.com/samsinsane,Added support for AppxManifest files,1,[],https://github.com/premake/premake-core/pull/1750,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1750,"What does this PR do?
Adds VS category for AppxManifest files.
How does this PR change Premake's behavior?
I don't believe this will break anything. Will cause .appxmanifest files to be compiled.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds VS category for AppxManifest files.
How does this PR change Premake's behavior?
I don't believe this will break anything. Will cause .appxmanifest files to be compiled.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1752,2021-11-07T06:15:39Z,2021-11-07T06:19:03Z,2021-11-07T06:19:03Z,MERGED,True,18,0,4,https://github.com/nickclark2016,Added C17/GNU17 support to gmake/gmake2 exporters,1,[],https://github.com/premake/premake-core/pull/1752,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1752,"What does this PR do?
Adds C17/GNU17 support for GCC/Clang toolchains, which will be used by the gmake/gmake2 exporters.
Mapping:
C17 -> -std=c17
gnu17 -> -std=gnu17
How does this PR change Premake's behavior?
No breaking changes. Adds C17/GNU17 cdialects.
Anything else we should know?
Closes #1751
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds C17/GNU17 support for GCC/Clang toolchains, which will be used by the gmake/gmake2 exporters.
Mapping:
C17 -> -std=c17
gnu17 -> -std=gnu17
How does this PR change Premake's behavior?
No breaking changes. Adds C17/GNU17 cdialects.
Anything else we should know?
Closes #1751
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1753,2021-11-07T17:11:49Z,2021-11-07T20:23:14Z,2021-11-07T20:23:14Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Update documentation link in README,1,[],https://github.com/premake/premake-core/pull/1753,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1753,"What does this PR do?
Previous link pointed to wiki which is no longer updated.  Updated link to point to the github pages URL.
How does this PR change Premake's behavior?
No behavior changes.
Anything else we should know?
Nope :)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Previous link pointed to wiki which is no longer updated.  Updated link to point to the github pages URL.
How does this PR change Premake's behavior?
No behavior changes.
Anything else we should know?
Nope :)
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,1,https://github.com/premake/premake-core/pull/1754,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1754#issuecomment-968125574,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Please add your new markdown pages to website/sidebar.js,True,{'THUMBS_UP': ['https://github.com/englercj']}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1754#issuecomment-969086780,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Out of scope of this PR, but how exactly should this be handled by other build systems?  For build systems without this concept, should externalincludedirs be treated as sysincludedirs (I agree with how this is currently being done, just want to make sure we are sure)?  I think this question should be answered and the consequences understood before we approve/deny this.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/Jarod42,4,https://github.com/premake/premake-core/pull/1754#issuecomment-969136833,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"".

Note that msvc does nothing for sysincludedirs, so it might just be a naming issue.
What would you place in ""system""?
Aliasing might be an option if really you dislike the name.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/StellaASchlotter,5,https://github.com/premake/premake-core/pull/1754#issuecomment-969205751,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I am the author of #1701. Unfortunately I can't continue working on premake for the next few months. However I want to point out that I think it is a bug in premake that sysincluddirs do not supress warnings in visual studio  but do in gcc and clang. I wanted to address this as part of my PR.
My idea was to make sysincludedirs behave the same on all systems so I don't need multiple instructions for the same behavior.
But I am okay with closing my PR and going forward with this one. Any support for externalincludedirs is better than none.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,6,https://github.com/premake/premake-core/pull/1754#issuecomment-969473904,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What would you place in ""system""?

I guess I'd separate include paths I expect to exist on the build system (Windows SDK or glibc++, for example). And external would be dependencies of my application that aren't from the system, for example sqlite, freetype, or other third-party libraries that are external to my app but not part of the system.
Maybe this distinction is moot or undesired, and that's fine I'm open to any solution that lets me tag file paths as external in MSVC so I can disable warnings when including them.

My idea was to make sysincludedirs behave the same on all systems so I don't need multiple instructions for the same behavior.

If I change this PR to fall back to sysincludedirs on other build systems then you will get the behavior you expect of this new instruction silencing warnings on all platforms. Is that a reasonable solution?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/nickclark2016,7,https://github.com/premake/premake-core/pull/1754#issuecomment-969569812,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I've had some time to dig into the implications of this as opposed to co-opting the existing API.  As it currently stands, I don't think I'd want to accept the PR as-is (however I appreciate the work üòÉ).  Below I've listed some of my research into the issue as well as what my take on the correct course of action is.

externalincludedirs - This is fundamentally no different than sysincludedirs.  While this may not semantically be what you want, they have roughly the same meaning.  These both seem to mean any include directory other than includes from projects that the user owns.
externalanglebrackets - This is something unique to Visual Studio as far as I can tell.  Since this has no analog to any other toolchain, should we make the API part of the visual studio module or should we ignore it in other toolchains.
externalwarnings - This equates to the -Wsystem-headers flag in GCC/Clang.

What do I propose?

I believe that we should coalesce the existing sysincludedirs and externalincludedirs to a single API called externalincludedirs.  I think this name works better, as it is the more all-encompassing of the two.  This will prevent the need for an exporter-specific API.  This would behave by writing externalincludedirs to the externalincludedirs in Visual Studio, but for GNU makefile it would write it to -isystem.
For externalwarnings, I believe we should try to mirror as closely to the current warnings options as possible.  See below table for flag mapping.




Premake Symbol Value
Visual Studio
GNU Makefile




Off
/external:W0



Default
/external:W3
-Wsystem-headers


High
/external:W4
-Wsystem-headers


Extra
/external:W4
-Wsystem-headers


Everything
/external:W4
-Wsystem-headers




Finally, I believe that the externalanglebrackets API should be specific to Visual Studio.

This would have impacts on the API that already exists for sysincludedirs.  Instead of removing the API, I would have it deprecated in favor of the new externalincludedirs and removed in the full release.
Thoughts on this?",True,{'THUMBS_UP': ['https://github.com/Jarod42']}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/starkos,8,https://github.com/premake/premake-core/pull/1754#issuecomment-970441728,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","+1 on this plan.

This would have impacts on the API that already exists for sysincludedirs. Instead of removing the API, I would have it deprecated in favor of the new externalincludedirs and removed in the full release.

In favor of deprecating, but would probably not remove until v6 at this point, IMHO. Another option is to make sysincludedirs and alias for externalincludedirs?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,9,https://github.com/premake/premake-core/pull/1754#issuecomment-970514752,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I believe that we should coalesce the existing sysincludedirs and externalincludedirs to a single API called externalincludedirs

I think this makes a lot of sense, I'll get that done.

For externalwarnings, I believe we should try to mirror as closely to the current warnings options as possible. See below table for flag mapping.

I can make this change, but the reason I had them different originally is because I didn't want the same words with different meanings. For example, ""Everything"" in the warnings API means /Wall but in the externalwarnings it would mean /W4. That may be surprising for some users so instead of having multiple /W4s I just cut that one out. I'll add it back in for now and let people review.
I also don't like ""Default"" being /external:W3. The visual studio default is to inherit the project's warning level, which matches the behavior of older versions. I'd like to keep that behavior as the default.

Finally, I believe that the externalanglebrackets API should be specific to Visual Studio.

It is currently only used in vs project generation and ignored by other toolsets. Did you want me to do something different here?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,10,https://github.com/premake/premake-core/pull/1754#issuecomment-970515242,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","In favor of deprecating, but would probably not remove until v6 at this point, IMHO. Another option is to make sysincludedirs and alias for externalincludedirs?

I don't have strong feelings on this, happy to do whatever people want here. It would probably mean less overall changes to keep sysincludedirs and just change its behavior on VS 2022.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/nickclark2016,11,https://github.com/premake/premake-core/pull/1754#issuecomment-970524956,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I believe that we should coalesce the existing sysincludedirs and externalincludedirs to a single API called externalincludedirs

I think this makes a lot of sense, I'll get that done.

For externalwarnings, I believe we should try to mirror as closely to the current warnings options as possible. See below table for flag mapping.

I can make this change, but the reason I had them different originally is because I didn't want the same words with different meanings. For example, ""Everything"" in the warnings API means /Wall but in the externalwarnings it would mean /W4. That may be surprising for some users so instead of having multiple /W4s I just cut that one out. I'll add it back in for now and let people review.
I also don't like ""Default"" being /external:W3. The visual studio default is to inherit the project's warning level, which matches the behavior of older versions. I'd like to keep that behavior as the default.

For this, I think we should personally make the warnings and externalwarnings flags match as much as possible. To me, this would be the most straight forward.  It would be nice to have inherit as well, but I think the mismatch for Default would be confusing.


Finally, I believe that the externalanglebrackets API should be specific to Visual Studio.

It is currently only used in vs project generation and ignored by other toolsets. Did you want me to do something different here?

So that's one option. Another option would be to register the API on the vstudio module.  See this file: https://github.com/premake/premake-core/blob/master/modules/vstudio/_preload.lua",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,12,https://github.com/premake/premake-core/pull/1754#issuecomment-970554316,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",OK I think I've addressed all the feedback at this point aside from deprecating sysincludedirs and making it an alias of externalincludedirs. I wanted the naming debate of which one to keep settle first so I knew how to proceed.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/Jarod42,13,https://github.com/premake/premake-core/pull/1754#issuecomment-970636043,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","My opinion about naming:

externalincludedirs seems clearer than sysincludedirs.
Having both, one as aliasing of the other is ok.
sysincludedirs has historic advantage, but deprecating sysincludirs is ok for me.

If we keep only sysincludedirs, then the new externalanglebrackets, externalwarnings should be renamed IMO.
if we deprecated sysincludedirs, how about syslibdirs.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,14,https://github.com/premake/premake-core/pull/1754#issuecomment-970887963,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Made changes to deprecate sysincluddirs and only have an implementation for externalincludedirs.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,15,https://github.com/premake/premake-core/pull/1754#issuecomment-974925964,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Are there additional changes people are interested in seeing here?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/starkos,16,https://github.com/premake/premake-core/pull/1754#issuecomment-980068896,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","@englercj Can you please rebase this against the latest main branch, and squash the commits?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/Jarod42,17,https://github.com/premake/premake-core/pull/1754#issuecomment-980083382,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","@starkos:
It seems you miss my comment:

from toolset, it seems we can use ""v143"" directly instead of ""msc-v143"", I didn't see code to unify it afterward.
As ""vyyy"" > ""msc-xxx"", that check might be problematic. which is the correct method?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/starkos,18,https://github.com/premake/premake-core/pull/1754#issuecomment-980352628,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","@starkos: It seems you miss my comment:

from toolset, it seems we can use ""v143"" directly instead of ""msc-v143"", I didn't see code to unify it afterward.
As ""vyyy"" > ""msc-xxx"", that check might be problematic. which is the correct method?


I did miss it, thanks for escalating. It looks like the value will get normalized to ""msc-v143"".",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,19,https://github.com/premake/premake-core/pull/1754#issuecomment-985166343,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Hey @starkos, just wanted to ping about this comment: #1754 (comment)
I tried the method of comparing cfg.toolset but it is sometimes nil. Please advise.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/starkos,20,https://github.com/premake/premake-core/pull/1754#issuecomment-985556682,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I'm not sure what to suggest here; I'm not the one who proposed using the toolset value. IMHO I'd go ahead and merge it as is, if you could do us the favor of rebasing your changing against the latest main branch.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/Jarod42,21,https://github.com/premake/premake-core/pull/1754#issuecomment-985708030,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","I suppose p.action.set(""vs2010"") doesn't set associated toolset.
You probably need to set toolset also afterward :-/
I hope it is only a Unit testing issue.
(I will try to look at it this week-end).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,22,https://github.com/premake/premake-core/pull/1754#issuecomment-986283949,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Rebased and ready for merge.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,23,https://github.com/premake/premake-core/pull/1754#issuecomment-986917468,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Fixed the toolset check and squashed the commits onto latest master. I think we're good to go.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/peter1745,24,https://github.com/premake/premake-core/pull/1754#issuecomment-1001648945,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Can't wait for this to be merged in üôÇ,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,25,https://github.com/premake/premake-core/pull/1754#issuecomment-1004210462,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Rebased atop latest master, ready for merge AFAIK.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/starkos,26,https://github.com/premake/premake-core/pull/1754#issuecomment-1004855821,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","Done, thanks!",True,{'HOORAY': ['https://github.com/englercj']}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/StellaASchlotter,27,https://github.com/premake/premake-core/pull/1754#issuecomment-1024551909,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",@englercj was there a reason why its only for visual studio 2022 and up? Externalincludes are supported in vs2019.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/englercj,28,https://github.com/premake/premake-core/pull/1754#issuecomment-1027228065,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","@StellaASchlotter It was experimental in most versions of vs2019 and required the /experimental:external flag to be set in order to work. It was only non-experimental as of vs2019 16.10. I didn't deal with the complexity of checking when to set the experimental flag because vs2022 support was sufficient for my needs, and it is guaranteed to work there in all versions.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1754,2021-11-13T17:41:53Z,2022-01-04T14:25:30Z,2022-02-04T12:19:30Z,MERGED,True,527,77,30,https://github.com/englercj,Improve external include & warning support,1,[],https://github.com/premake/premake-core/pull/1754,https://github.com/StellaASchlotter,29,https://github.com/premake/premake-core/pull/1754#issuecomment-1029937190,"What does this PR do?
Adds support for ""external"" headers to Visual Studio 2022. This adds three new APIs:

externalwarnings - Controls warning levels for headers considered ""external"" (/external:Wn, <ExternalWarningLevel>)
externalanglebrackets - When set to ""On"" treats all headers included with angle brackets as ""external"" (/external:anglebrackets, <TreatAngleIncludeAsExternal>)
externalincludedirs - Include directory paths to treat as ""external"" (/external:Ipath, <>)

This is a different take on this support than #1701. Here instead of repurposing sysincludedirs, I added a new concept of externalincludedirs. I think these two things are fundamentally different as ""external"" in this context means ""not part of my project"" which doesn't necessarily mean ""system"". For example, I use these for some third-party non-system libraries, which I include using double quotes and not angle brackets.
MSVC Docs: https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-170
How does this PR change Premake's behavior?
Existing behavior should be unaffected, all new functionality is behind new APIs.
Anything else we should know?
Add any other context about your changes here.
closes #1692
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",Ah thanks for this information. I was not aware of this. I will upgrade the VS version in my team then.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1757,2021-11-18T15:58:56Z,2021-11-21T21:17:54Z,2021-11-22T08:30:53Z,MERGED,True,14,5,3,https://github.com/Jarod42,"Add ""support"" for `kind ""None""` (as do nothing) for gmake/gmake2.",1,[],https://github.com/premake/premake-core/pull/1757,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1757,"What does this PR do?
Add ""support"" for kind ""None"" (as do nothing) for gmake/gmake2.
How does this PR change Premake's behavior?
Just change gmake/gmake2 generators.
Anything else we should know?
closes #1149
Tested also with my testing repo https://github.com/Jarod42/premake-sample-projects/tree/GMakeKindNone
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Add ""support"" for kind ""None"" (as do nothing) for gmake/gmake2.
How does this PR change Premake's behavior?
Just change gmake/gmake2 generators.
Anything else we should know?
closes #1149
Tested also with my testing repo https://github.com/Jarod42/premake-sample-projects/tree/GMakeKindNone
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1759,2021-11-19T18:15:18Z,2021-11-19T18:15:40Z,2021-11-19T18:15:40Z,MERGED,True,2958,2,48,https://github.com/nickclark2016,Initial GNU Makefile Exporter,3,[],https://github.com/premake/premake-core/pull/1759,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1759,"What does this PR do?
Initial implementation of Makefile exporter for 6.x
How does this PR change Premake's behavior?
Adds makefile exporter.
Anything else we should know?
Reviewed at nickclark2016#1. Merging without review.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Initial implementation of Makefile exporter for 6.x
How does this PR change Premake's behavior?
Adds makefile exporter.
Anything else we should know?
Reviewed at nickclark2016#1. Merging without review.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1760,2021-11-19T21:16:52Z,2021-11-19T21:20:58Z,2021-11-19T21:21:31Z,MERGED,True,73,1,2,https://github.com/starkos,Add Community Update #10,1,[],https://github.com/premake/premake-core/pull/1760,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1760,"What does this PR do?
Adds a new community update to the website.
How does this PR change Premake's behavior?
No changes.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds a new community update to the website.
How does this PR change Premake's behavior?
No changes.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1762,2021-11-26T09:56:53Z,2021-11-26T15:53:29Z,2021-11-26T16:10:05Z,MERGED,True,27,7,4,https://github.com/Jarod42,"Add support of `kind ""None""` for Codelite.",1,[],https://github.com/premake/premake-core/pull/1762,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1762,"What does this PR do?
Add support of kind ""None"" for Codelite.
-> project without compilation/link
How does this PR change Premake's behavior?
Only Codelite generator is changed
Anything else we should know?
Also tested on my integration test repo:
https://github.com/Jarod42/premake-sample-projects/runs/4332430852?check_suite_focus=true
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Add support of kind ""None"" for Codelite.
-> project without compilation/link
How does this PR change Premake's behavior?
Only Codelite generator is changed
Anything else we should know?
Also tested on my integration test repo:
https://github.com/Jarod42/premake-sample-projects/runs/4332430852?check_suite_focus=true
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1763,2021-11-26T14:47:04Z,2022-01-04T14:19:06Z,2022-01-04T14:26:09Z,MERGED,True,1,1,1,https://github.com/starkos,Fix `make clean` handling of generated files,1,[],https://github.com/premake/premake-core/pull/1763,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1763,"What does this PR do?
Replaces an incorrect rmdir with del to fix removal of generated files on make clean. Closes #1650.
How does this PR change Premake's behavior?
No changes other than the fix.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Replaces an incorrect rmdir with del to fix removal of generated files on make clean. Closes #1650.
How does this PR change Premake's behavior?
No changes other than the fix.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1764,2021-11-26T14:57:22Z,2021-11-26T15:25:47Z,2021-11-26T15:37:53Z,CLOSED,False,3,3,3,https://github.com/starkos,Always use `llvm-ar` for Clang,1,[],https://github.com/premake/premake-core/pull/1764,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1764,"What does this PR do?
Adjusts the Clang toolset adapter to always use its included llvm-ar instead of ar, which may or may not be installed. Fixes #1742.
How does this PR change Premake's behavior?
No changes other than described.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adjusts the Clang toolset adapter to always use its included llvm-ar instead of ar, which may or may not be installed. Fixes #1742.
How does this PR change Premake's behavior?
No changes other than described.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1764,2021-11-26T14:57:22Z,2021-11-26T15:25:47Z,2021-11-26T15:37:53Z,CLOSED,False,3,3,3,https://github.com/starkos,Always use `llvm-ar` for Clang,1,[],https://github.com/premake/premake-core/pull/1764,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1764#issuecomment-980057321,"What does this PR do?
Adjusts the Clang toolset adapter to always use its included llvm-ar instead of ar, which may or may not be installed. Fixes #1742.
How does this PR change Premake's behavior?
No changes other than described.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Looks like llvm-ar isn't available on the CI servers, so that answers that question.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1764,2021-11-26T14:57:22Z,2021-11-26T15:25:47Z,2021-11-26T15:37:53Z,CLOSED,False,3,3,3,https://github.com/starkos,Always use `llvm-ar` for Clang,1,[],https://github.com/premake/premake-core/pull/1764,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1764#issuecomment-980064168,"What does this PR do?
Adjusts the Clang toolset adapter to always use its included llvm-ar instead of ar, which may or may not be installed. Fixes #1742.
How does this PR change Premake's behavior?
No changes other than described.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","We should be able to do a check using which in the makefile to see if llvm-ar exists.  If it does, use llvm-ar, else we use ar.  This should probably only be emitted to the makefile if we are using an LLVM toolchain.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1770,2021-12-07T01:49:38Z,2021-12-09T18:01:43Z,2021-12-09T18:01:43Z,MERGED,True,48,2,3,https://github.com/KyrietS,Add a workroud for localized dates on the website,2,[],https://github.com/premake/premake-core/pull/1770,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1770,"What does this PR do?
Added script that replaces the date in Last updated on section. It uses standard JavaScript function toLocaleDateString to produce localized date.
I've created a demo based on this commit so please check if it works for you (LINK). But keep in mind that it is your browser that decides what format to use. For me, every date now looks like this:

Fixes #1748
How does this PR change Premake's behavior?
Website only.
Anything else we should know?
Currently, Docusaurus will always try to put mm/dd/yyyy date on every page. It is a workaround as Docusaurus doesn't allow changing metadata of a page (yet).
I've also bumped Docusaurus version from beta.6 to beta.9. This update did not require any changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Added script that replaces the date in Last updated on section. It uses standard JavaScript function toLocaleDateString to produce localized date.
I've created a demo based on this commit so please check if it works for you (LINK). But keep in mind that it is your browser that decides what format to use. For me, every date now looks like this:

Fixes #1748
How does this PR change Premake's behavior?
Website only.
Anything else we should know?
Currently, Docusaurus will always try to put mm/dd/yyyy date on every page. It is a workaround as Docusaurus doesn't allow changing metadata of a page (yet).
I've also bumped Docusaurus version from beta.6 to beta.9. This update did not require any changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1770,2021-12-07T01:49:38Z,2021-12-09T18:01:43Z,2021-12-09T18:01:43Z,MERGED,True,48,2,3,https://github.com/KyrietS,Add a workroud for localized dates on the website,2,[],https://github.com/premake/premake-core/pull/1770,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1770#issuecomment-987500317,"What does this PR do?
Added script that replaces the date in Last updated on section. It uses standard JavaScript function toLocaleDateString to produce localized date.
I've created a demo based on this commit so please check if it works for you (LINK). But keep in mind that it is your browser that decides what format to use. For me, every date now looks like this:

Fixes #1748
How does this PR change Premake's behavior?
Website only.
Anything else we should know?
Currently, Docusaurus will always try to put mm/dd/yyyy date on every page. It is a workaround as Docusaurus doesn't allow changing metadata of a page (yet).
I've also bumped Docusaurus version from beta.6 to beta.9. This update did not require any changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I can already see that it's half working ‚òπ Tricking React has never been easy üòÖ I'll mark this as draft for now.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1770,2021-12-07T01:49:38Z,2021-12-09T18:01:43Z,2021-12-09T18:01:43Z,MERGED,True,48,2,3,https://github.com/KyrietS,Add a workroud for localized dates on the website,2,[],https://github.com/premake/premake-core/pull/1770,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1770#issuecomment-988241405,"What does this PR do?
Added script that replaces the date in Last updated on section. It uses standard JavaScript function toLocaleDateString to produce localized date.
I've created a demo based on this commit so please check if it works for you (LINK). But keep in mind that it is your browser that decides what format to use. For me, every date now looks like this:

Fixes #1748
How does this PR change Premake's behavior?
Website only.
Anything else we should know?
Currently, Docusaurus will always try to put mm/dd/yyyy date on every page. It is a workaround as Docusaurus doesn't allow changing metadata of a page (yet).
I've also bumped Docusaurus version from beta.6 to beta.9. This update did not require any changes.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Okay, it should be all fine now. I'm waiting for your feedback ü§†",True,{}
premake/premake-core,https://github.com/premake/premake-core,1771,2021-12-07T15:04:02Z,2022-05-21T05:16:25Z,2022-05-22T14:03:03Z,MERGED,True,9,9,2,https://github.com/Jarod42,"Codelite PCH Fix for obsolete `UseDifferentPCHFlags=""no""`",1,[],https://github.com/premake/premake-core/pull/1771,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1771,"What does this PR do?
Fix Pch policy for Codelite to use same build parameter as regular files.
(Codelite allows to have specific build flags for pch)
How does this PR change Premake's behavior?
Fix Codelite Pch (when pch depends of build flag).
Anything else we should know?
closes #1767
Tested with https://github.com/Jarod42/premake-sample-projects/actions/runs/1549955075
(whereas https://github.com/Jarod42/premake-sample-projects/actions/runs/1549114861 spots the issue).
For info, Codelite replaced UseDifferentPCHFlags=""no"" by PCHFlagsPolicy=""1""(without retro-compatility) in 2014.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fix Pch policy for Codelite to use same build parameter as regular files.
(Codelite allows to have specific build flags for pch)
How does this PR change Premake's behavior?
Fix Codelite Pch (when pch depends of build flag).
Anything else we should know?
closes #1767
Tested with https://github.com/Jarod42/premake-sample-projects/actions/runs/1549955075
(whereas https://github.com/Jarod42/premake-sample-projects/actions/runs/1549114861 spots the issue).
For info, Codelite replaced UseDifferentPCHFlags=""no"" by PCHFlagsPolicy=""1""(without retro-compatility) in 2014.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1771,2021-12-07T15:04:02Z,2022-05-21T05:16:25Z,2022-05-22T14:03:03Z,MERGED,True,9,9,2,https://github.com/Jarod42,"Codelite PCH Fix for obsolete `UseDifferentPCHFlags=""no""`",1,[],https://github.com/premake/premake-core/pull/1771,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1771#issuecomment-1131897415,"What does this PR do?
Fix Pch policy for Codelite to use same build parameter as regular files.
(Codelite allows to have specific build flags for pch)
How does this PR change Premake's behavior?
Fix Codelite Pch (when pch depends of build flag).
Anything else we should know?
closes #1767
Tested with https://github.com/Jarod42/premake-sample-projects/actions/runs/1549955075
(whereas https://github.com/Jarod42/premake-sample-projects/actions/runs/1549114861 spots the issue).
For info, Codelite replaced UseDifferentPCHFlags=""no"" by PCHFlagsPolicy=""1""(without retro-compatility) in 2014.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Just gonna poke on this. Any reason it hasn't been merged?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1771,2021-12-07T15:04:02Z,2022-05-21T05:16:25Z,2022-05-22T14:03:03Z,MERGED,True,9,9,2,https://github.com/Jarod42,"Codelite PCH Fix for obsolete `UseDifferentPCHFlags=""no""`",1,[],https://github.com/premake/premake-core/pull/1771,https://github.com/samsinsane,3,https://github.com/premake/premake-core/pull/1771#issuecomment-1133536561,"What does this PR do?
Fix Pch policy for Codelite to use same build parameter as regular files.
(Codelite allows to have specific build flags for pch)
How does this PR change Premake's behavior?
Fix Codelite Pch (when pch depends of build flag).
Anything else we should know?
closes #1767
Tested with https://github.com/Jarod42/premake-sample-projects/actions/runs/1549955075
(whereas https://github.com/Jarod42/premake-sample-projects/actions/runs/1549114861 spots the issue).
For info, Codelite replaced UseDifferentPCHFlags=""no"" by PCHFlagsPolicy=""1""(without retro-compatility) in 2014.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Nope, I probably left it to be reviewed by someone else and then forgot to come back and merge it. Merging...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1773,2021-12-08T15:03:11Z,2022-01-04T21:18:11Z,2022-01-05T20:34:15Z,CLOSED,False,0,0,0,https://github.com/hannes-harnisch,"Add C++ module file extensions and ""allmodulespublic"" option",0,[],https://github.com/premake/premake-core/pull/1773,https://github.com/hannes-harnisch,1,https://github.com/premake/premake-core/pull/1773,"What does this PR do?
Visual Studio automatically detects .ixx and .cppm as C++ module interface units and compiles them accordingly. This only happens if a ClCompile tag is generated for them in the project file, but Premake doesn't emit this tag for these file extensions, meaning this default behavior is lost. This PR rectifies that.
Additionally, it's sometimes necessary to explicitly share modules between projects even though the exporting project is not a static library (for which this is enabled by default). So if you wanna use modules in another project from an executable project for example, you'd have to manually enable it by setting ""All Modules are Public"" to Yes in the VC++ directories settings in the project properties. I implemented a new Boolean project setting ""allmodulespublic"" to enable/disable this at the config level. A test is also implemented.
How does this PR change Premake's behavior?
It only adds new behavior.
Anything else we should know?
Don't think so.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Visual Studio automatically detects .ixx and .cppm as C++ module interface units and compiles them accordingly. This only happens if a ClCompile tag is generated for them in the project file, but Premake doesn't emit this tag for these file extensions, meaning this default behavior is lost. This PR rectifies that.
Additionally, it's sometimes necessary to explicitly share modules between projects even though the exporting project is not a static library (for which this is enabled by default). So if you wanna use modules in another project from an executable project for example, you'd have to manually enable it by setting ""All Modules are Public"" to Yes in the VC++ directories settings in the project properties. I implemented a new Boolean project setting ""allmodulespublic"" to enable/disable this at the config level. A test is also implemented.
How does this PR change Premake's behavior?
It only adds new behavior.
Anything else we should know?
Don't think so.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1773,2021-12-08T15:03:11Z,2022-01-04T21:18:11Z,2022-01-05T20:34:15Z,CLOSED,False,0,0,0,https://github.com/hannes-harnisch,"Add C++ module file extensions and ""allmodulespublic"" option",0,[],https://github.com/premake/premake-core/pull/1773,https://github.com/starkos,2,https://github.com/premake/premake-core/pull/1773#issuecomment-1004868708,"What does this PR do?
Visual Studio automatically detects .ixx and .cppm as C++ module interface units and compiles them accordingly. This only happens if a ClCompile tag is generated for them in the project file, but Premake doesn't emit this tag for these file extensions, meaning this default behavior is lost. This PR rectifies that.
Additionally, it's sometimes necessary to explicitly share modules between projects even though the exporting project is not a static library (for which this is enabled by default). So if you wanna use modules in another project from an executable project for example, you'd have to manually enable it by setting ""All Modules are Public"" to Yes in the VC++ directories settings in the project properties. I implemented a new Boolean project setting ""allmodulespublic"" to enable/disable this at the config level. A test is also implemented.
How does this PR change Premake's behavior?
It only adds new behavior.
Anything else we should know?
Don't think so.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Ready to merge but could you please:

make your changes on a branch, rather than on master
rebase your changes against the latest Premake-core master branch, rather than merging master into your branch",True,{}
premake/premake-core,https://github.com/premake/premake-core,1773,2021-12-08T15:03:11Z,2022-01-04T21:18:11Z,2022-01-05T20:34:15Z,CLOSED,False,0,0,0,https://github.com/hannes-harnisch,"Add C++ module file extensions and ""allmodulespublic"" option",0,[],https://github.com/premake/premake-core/pull/1773,https://github.com/hannes-harnisch,3,https://github.com/premake/premake-core/pull/1773#issuecomment-1004882351,"What does this PR do?
Visual Studio automatically detects .ixx and .cppm as C++ module interface units and compiles them accordingly. This only happens if a ClCompile tag is generated for them in the project file, but Premake doesn't emit this tag for these file extensions, meaning this default behavior is lost. This PR rectifies that.
Additionally, it's sometimes necessary to explicitly share modules between projects even though the exporting project is not a static library (for which this is enabled by default). So if you wanna use modules in another project from an executable project for example, you'd have to manually enable it by setting ""All Modules are Public"" to Yes in the VC++ directories settings in the project properties. I implemented a new Boolean project setting ""allmodulespublic"" to enable/disable this at the config level. A test is also implemented.
How does this PR change Premake's behavior?
It only adds new behavior.
Anything else we should know?
Don't think so.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@starkos I shall try.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1773,2021-12-08T15:03:11Z,2022-01-04T21:18:11Z,2022-01-05T20:34:15Z,CLOSED,False,0,0,0,https://github.com/hannes-harnisch,"Add C++ module file extensions and ""allmodulespublic"" option",0,[],https://github.com/premake/premake-core/pull/1773,https://github.com/hannes-harnisch,4,https://github.com/premake/premake-core/pull/1773#issuecomment-1005178475,"What does this PR do?
Visual Studio automatically detects .ixx and .cppm as C++ module interface units and compiles them accordingly. This only happens if a ClCompile tag is generated for them in the project file, but Premake doesn't emit this tag for these file extensions, meaning this default behavior is lost. This PR rectifies that.
Additionally, it's sometimes necessary to explicitly share modules between projects even though the exporting project is not a static library (for which this is enabled by default). So if you wanna use modules in another project from an executable project for example, you'd have to manually enable it by setting ""All Modules are Public"" to Yes in the VC++ directories settings in the project properties. I implemented a new Boolean project setting ""allmodulespublic"" to enable/disable this at the config level. A test is also implemented.
How does this PR change Premake's behavior?
It only adds new behavior.
Anything else we should know?
Don't think so.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Oops, looks like this was accidentally closed by reshuffling commits. Further discussion should go into #1790.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1774,2021-12-08T19:25:15Z,2022-01-04T14:39:43Z,2022-01-04T21:23:24Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Disabling inherited dependencies,4,[],https://github.com/premake/premake-core/pull/1774,https://github.com/hannes-harnisch,1,https://github.com/premake/premake-core/pull/1774,"What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1774,2021-12-08T19:25:15Z,2022-01-04T14:39:43Z,2022-01-04T21:23:24Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Disabling inherited dependencies,4,[],https://github.com/premake/premake-core/pull/1774,https://github.com/hannes-harnisch,2,https://github.com/premake/premake-core/pull/1774#issuecomment-991047484,"What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@KyrietS I'm unsure why the tests failed after merging the latest main-repo commit.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1774,2021-12-08T19:25:15Z,2022-01-04T14:39:43Z,2022-01-04T21:23:24Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Disabling inherited dependencies,4,[],https://github.com/premake/premake-core/pull/1774,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1774#issuecomment-991251167,"What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I've re-run all tests and it passed. There was some connection problem (as usual). You still need a code review from some other fellow. I'm only a website guardian (kind of) üòÑ,True,{'THUMBS_UP': ['https://github.com/hannes-harnisch']}
premake/premake-core,https://github.com/premake/premake-core,1774,2021-12-08T19:25:15Z,2022-01-04T14:39:43Z,2022-01-04T21:23:24Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Disabling inherited dependencies,4,[],https://github.com/premake/premake-core/pull/1774,https://github.com/starkos,4,https://github.com/premake/premake-core/pull/1774#issuecomment-1004873800,"What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Hey all‚Äîsorry, I was trying to go too fast and I inadvertently merged this branch before it was approved. I backed it out but the PR is still showing as merged. @hannes-harnisch original branch is still intact.
I had intended to ask @hannes-harnisch if they could please rebase their changes against the latest master branch rather than merging master into their changes, so we don't end up with a bunch of ""Merge branch 'master' into‚Ä¶"" noise commits. If you'd like me to do this for you‚Äîsince I went and made more work for you seems fair‚Äîlet me know.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1774,2021-12-08T19:25:15Z,2022-01-04T14:39:43Z,2022-01-04T21:23:24Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Disabling inherited dependencies,4,[],https://github.com/premake/premake-core/pull/1774,https://github.com/hannes-harnisch,5,https://github.com/premake/premake-core/pull/1774#issuecomment-1004881705,"What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","@starkos I'm not very good with rebasing, so I might just accidentally add more noise commits...",True,{}
premake/premake-core,https://github.com/premake/premake-core,1774,2021-12-08T19:25:15Z,2022-01-04T14:39:43Z,2022-01-04T21:23:24Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Disabling inherited dependencies,4,[],https://github.com/premake/premake-core/pull/1774,https://github.com/hannes-harnisch,6,https://github.com/premake/premake-core/pull/1774#issuecomment-1005180506,"What does this PR do?
Implements a new Boolean config setting inheritdependencies that allows disabling or explicitly enabling the inheritance of dependencies from project default settings or parent projects in Visual Studio. Under Windows by default for C++ projects, this has for example the effect of linking Windows system libraries such as kernel32 and user32 if enabled. When disabled, only explicitly specified libraries will be linked.
How does this PR change Premake's behavior?
It doesn't. Only new behavior.
Anything else we should know?
This was implemented as a response to #1733.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",@starkos I removed the merge I did from this branch. I don't know if you can still access it easily and merge again. Tell me if you want me to do something specific.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1777,2021-12-10T18:39:02Z,2022-02-28T19:21:33Z,2022-02-28T19:21:33Z,MERGED,True,2,1,1,https://github.com/starkos,Migrate website to latest DocSearch,2,[],https://github.com/premake/premake-core/pull/1777,https://github.com/starkos,1,https://github.com/premake/premake-core/pull/1777,"What does this PR do?
DocSearch is migrating to a new Algolia backend. Adjust the API keys for the new account.
Closes #1776.
How does this PR change Premake's behavior?
There should be no behavior changes.
Anything else we should know?
I'm not sure how to test this? Hoping @KyrietS can provide some guidance before this merges.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
DocSearch is migrating to a new Algolia backend. Adjust the API keys for the new account.
Closes #1776.
How does this PR change Premake's behavior?
There should be no behavior changes.
Anything else we should know?
I'm not sure how to test this? Hoping @KyrietS can provide some guidance before this merges.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1777,2021-12-10T18:39:02Z,2022-02-28T19:21:33Z,2022-02-28T19:21:33Z,MERGED,True,2,1,1,https://github.com/starkos,Migrate website to latest DocSearch,2,[],https://github.com/premake/premake-core/pull/1777,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1777#issuecomment-1002791779,"What does this PR do?
DocSearch is migrating to a new Algolia backend. Adjust the API keys for the new account.
Closes #1776.
How does this PR change Premake's behavior?
There should be no behavior changes.
Anything else we should know?
I'm not sure how to test this? Hoping @KyrietS can provide some guidance before this merges.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",The key displayed in the Algolia control panel is different than the one you used in this PR. Both keys seem to work. I asked Algolia support about this issue. Let's wait for their response.,True,{'THUMBS_UP': ['https://github.com/starkos']}
premake/premake-core,https://github.com/premake/premake-core,1777,2021-12-10T18:39:02Z,2022-02-28T19:21:33Z,2022-02-28T19:21:33Z,MERGED,True,2,1,1,https://github.com/starkos,Migrate website to latest DocSearch,2,[],https://github.com/premake/premake-core/pull/1777,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1777#issuecomment-1021456977,"What does this PR do?
DocSearch is migrating to a new Algolia backend. Adjust the API keys for the new account.
Closes #1776.
How does this PR change Premake's behavior?
There should be no behavior changes.
Anything else we should know?
I'm not sure how to test this? Hoping @KyrietS can provide some guidance before this merges.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Okay, I have not received a response from them yet. I think it is not worth waiting any longer. I suggest to use the key from the Algolia panel. @starkos can you please change the apiKey to 5c08cdec7a7243eecb271c06cdba3b9f?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1780,2021-12-23T08:47:25Z,2022-01-03T00:38:50Z,2022-01-03T02:17:40Z,CLOSED,False,1,0,1,https://github.com/Asthegor,Add vs2022 action,1,[],https://github.com/premake/premake-core/pull/1780,https://github.com/Asthegor,1,https://github.com/premake/premake-core/pull/1780,"What does this PR do?
Add vs2022 action on the documentaiton
How does this PR change Premake's behavior?
No change
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
[X ] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Add vs2022 action on the documentaiton
How does this PR change Premake's behavior?
No change
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
[X ] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1780,2021-12-23T08:47:25Z,2022-01-03T00:38:50Z,2022-01-03T02:17:40Z,CLOSED,False,1,0,1,https://github.com/Asthegor,Add vs2022 action,1,[],https://github.com/premake/premake-core/pull/1780,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1780#issuecomment-1003806939,"What does this PR do?
Add vs2022 action on the documentaiton
How does this PR change Premake's behavior?
No change
Anything else we should know?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
[X ] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Closing this as #1785 was merged and did the same thing.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1785,2021-12-31T04:10:04Z,2022-01-02T13:48:54Z,2022-01-02T13:48:54Z,MERGED,True,1,0,1,https://github.com/Enhex,"add ""vs2022"" to the list of available actions",1,[],https://github.com/premake/premake-core/pull/1785,https://github.com/Enhex,1,https://github.com/premake/premake-core/pull/1785,"What does this PR do?
add vs2022 action to the documentation.
How does this PR change Premake's behavior?
no.
Anything else we should know?
no.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
add vs2022 action to the documentation.
How does this PR change Premake's behavior?
no.
Anything else we should know?
no.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1786,2022-01-02T14:19:52Z,,2022-01-11T13:32:11Z,OPEN,False,2,1,1,https://github.com/aliascc,Fixes issues in VS Script when comparing paths for PCH Source,3,[],https://github.com/premake/premake-core/pull/1786,https://github.com/aliascc,1,https://github.com/premake/premake-core/pull/1786,"What does this PR do?
The source in prjcfg is the same string the user set, this means it can include duplicate / or \, can also have both back/forward-slashes in the same string (C:\MySource\srcs/mysource.cpp). In summary, the path is not normalized. Which will cause the matching to fail and the PCH Source will not be set.
There is also another issue, path.normalize does not remove the double // from the drive name. For example, if the path is:
C:\\MySource\sources.cpp
Normalize will transform it to
C://MySources/sources.cpp
ignoring the drive //, this is why there is a string replace after calling normalize.
How does this PR change Premake's behavior?
No
Anything else we should know?
Probably the best place to normalize the pchsource would be when reading it and setting it con prjcfg, but I didn't find out where this happens exactly.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
The source in prjcfg is the same string the user set, this means it can include duplicate / or \, can also have both back/forward-slashes in the same string (C:\MySource\srcs/mysource.cpp). In summary, the path is not normalized. Which will cause the matching to fail and the PCH Source will not be set.
There is also another issue, path.normalize does not remove the double // from the drive name. For example, if the path is:
C:\\MySource\sources.cpp
Normalize will transform it to
C://MySources/sources.cpp
ignoring the drive //, this is why there is a string replace after calling normalize.
How does this PR change Premake's behavior?
No
Anything else we should know?
Probably the best place to normalize the pchsource would be when reading it and setting it con prjcfg, but I didn't find out where this happens exactly.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1787,2022-01-04T20:22:19Z,2022-01-07T09:12:23Z,2022-01-07T09:12:24Z,MERGED,True,1,2,1,https://github.com/KyrietS,Remove unavailable modules,1,[],https://github.com/premake/premake-core/pull/1787,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1787,"What does this PR do?
Removes links to modules resulting with 404.
I wonder if it would be better to link @Jarod42's fork instead of the original CMake module. As far as I know, the fork fixes several bugs?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Removes links to modules resulting with 404.
I wonder if it would be better to link @Jarod42's fork instead of the original CMake module. As far as I know, the fork fixes several bugs?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1787,2022-01-04T20:22:19Z,2022-01-07T09:12:23Z,2022-01-07T09:12:24Z,MERGED,True,1,2,1,https://github.com/KyrietS,Remove unavailable modules,1,[],https://github.com/premake/premake-core/pull/1787,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1787#issuecomment-1005935660,"What does this PR do?
Removes links to modules resulting with 404.
I wonder if it would be better to link @Jarod42's fork instead of the original CMake module. As far as I know, the fork fixes several bugs?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Poking @Enhex for reference as he's the author of the premake-cmake module.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1787,2022-01-04T20:22:19Z,2022-01-07T09:12:23Z,2022-01-07T09:12:24Z,MERGED,True,1,2,1,https://github.com/KyrietS,Remove unavailable modules,1,[],https://github.com/premake/premake-core/pull/1787,https://github.com/Enhex,3,https://github.com/premake/premake-core/pull/1787#issuecomment-1006109017,"What does this PR do?
Removes links to modules resulting with 404.
I wonder if it would be better to link @Jarod42's fork instead of the original CMake module. As far as I know, the fork fixes several bugs?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Note that I'm not actively maintaining the CMake generator.
I experimented with several IDEs on Linux and wrote Premake generators to try them, and now I
only maintain generators I use.
So maybe there's a fork of my repo that's more active, in which case it should be referred to instead.",True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1787,2022-01-04T20:22:19Z,2022-01-07T09:12:23Z,2022-01-07T09:12:24Z,MERGED,True,1,2,1,https://github.com/KyrietS,Remove unavailable modules,1,[],https://github.com/premake/premake-core/pull/1787,https://github.com/Jarod42,4,https://github.com/premake/premake-core/pull/1787#issuecomment-1006449581,"What does this PR do?
Removes links to modules resulting with 404.
I wonder if it would be better to link @Jarod42's fork instead of the original CMake module. As far as I know, the fork fixes several bugs?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","On my side, I created generic integration tests for Premake's generators, and just testing the generators which seems important (as CMake's one).
I indeed fix those which fail my tests (and create PRs) (Authors of premake-ninja even gave me rights to modify repository directly).
Whereas I might fix issues encountered with my tests, I don't think I will go further for my forks.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1787,2022-01-04T20:22:19Z,2022-01-07T09:12:23Z,2022-01-07T09:12:24Z,MERGED,True,1,2,1,https://github.com/KyrietS,Remove unavailable modules,1,[],https://github.com/premake/premake-core/pull/1787,https://github.com/KyrietS,5,https://github.com/premake/premake-core/pull/1787#issuecomment-1006543231,"What does this PR do?
Removes links to modules resulting with 404.
I wonder if it would be better to link @Jarod42's fork instead of the original CMake module. As far as I know, the fork fixes several bugs?
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Alright, considering both statements I decided to link @Jarod42's fork. It has a few more features, and the original repo is tagged on GitHub anyway. This list is very ""community driven"" and neither of you should feel obligated to maintain these modules ofc.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1788,2022-01-04T20:36:21Z,2022-02-22T12:22:43Z,2022-02-22T12:22:43Z,MERGED,True,74,0,5,https://github.com/LoneBoco,"Add a new ""ScanForModuleDependencies"" flag.",5,[],https://github.com/premake/premake-core/pull/1788,https://github.com/LoneBoco,1,https://github.com/premake/premake-core/pull/1788,"What does this PR do?
This controls the Visual Studio ""Scan Sources for Module Dependencies"" option, which controls how it scans for C++20 modules.  This new flag sets the option in the generated project files.
How does this PR change Premake's behavior?
This PR adds a new flag option that generates a new entry in the  group for each configuration.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
This controls the Visual Studio ""Scan Sources for Module Dependencies"" option, which controls how it scans for C++20 modules.  This new flag sets the option in the generated project files.
How does this PR change Premake's behavior?
This PR adds a new flag option that generates a new entry in the  group for each configuration.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1788,2022-01-04T20:36:21Z,2022-02-22T12:22:43Z,2022-02-22T12:22:43Z,MERGED,True,74,0,5,https://github.com/LoneBoco,"Add a new ""ScanForModuleDependencies"" flag.",5,[],https://github.com/premake/premake-core/pull/1788,https://github.com/Jarod42,2,https://github.com/premake/premake-core/pull/1788#issuecomment-1005492832,"What does this PR do?
This controls the Visual Studio ""Scan Sources for Module Dependencies"" option, which controls how it scans for C++20 modules.  This new flag sets the option in the generated project files.
How does this PR change Premake's behavior?
This PR adds a new flag option that generates a new entry in the  group for each configuration.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Is there a equivalent (command-line) flag for other IDEs which might use msvc as compiler?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1788,2022-01-04T20:36:21Z,2022-02-22T12:22:43Z,2022-02-22T12:22:43Z,MERGED,True,74,0,5,https://github.com/LoneBoco,"Add a new ""ScanForModuleDependencies"" flag.",5,[],https://github.com/premake/premake-core/pull/1788,https://github.com/LoneBoco,3,https://github.com/premake/premake-core/pull/1788#issuecomment-1005936714,"What does this PR do?
This controls the Visual Studio ""Scan Sources for Module Dependencies"" option, which controls how it scans for C++20 modules.  This new flag sets the option in the generated project files.
How does this PR change Premake's behavior?
This PR adds a new flag option that generates a new entry in the  group for each configuration.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Is there a equivalent (command-line) flag for other IDEs which might use msvc as compiler?

No.  This isn't a command-line flag for the compiler.  This controls how the Visual Studio IDE scans for module dependencies and how it determines which files to compile.
This is related to using the import command.  By default, Visual Studio will only look at .ixx modules to build the dependency graph.  If it encounters something like import <vector>;, it will build that file as a header unit (.ifc), including any other headers it might import.
But say your main.cpp file had import <iostream>; and no .ixx files in your project tried to import the iostream header.  This would cause a build failure as iostream was never compiled into a header unit.
Error C7612 could not find header unit for 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\iostream'    MyProject    MyProject\src\main.cpp
By enabling the Scan Sources for Module Dependencies flag, Visual Studio would have also scanned .cpp files and saw that we are trying to import iostream, so it would have built iostream as a header unit.  Then, when we compile, the build would be successful.
Other IDEs which use Visual Studio as a compiler would probably have their own way of determining which files to build.  They might scan .cpp files on their own, or maybe have a setting where you list additional files to compile.
The solutions given by Microsoft are:

Enable the Scan Sources for Module Dependencies option to scan every source file (increasing compile times).
Build a static shared library that imports header files, giving anything that links to it access to them.
Manually specifying that a .h file should be compiled as a header unit.  See PR #1570 for supporting CompileAs options.
Enable experimental STL modules and import them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1788,2022-01-04T20:36:21Z,2022-02-22T12:22:43Z,2022-02-22T12:22:43Z,MERGED,True,74,0,5,https://github.com/LoneBoco,"Add a new ""ScanForModuleDependencies"" flag.",5,[],https://github.com/premake/premake-core/pull/1788,https://github.com/LoneBoco,4,https://github.com/premake/premake-core/pull/1788#issuecomment-1007327500,"What does this PR do?
This controls the Visual Studio ""Scan Sources for Module Dependencies"" option, which controls how it scans for C++20 modules.  This new flag sets the option in the generated project files.
How does this PR change Premake's behavior?
This PR adds a new flag option that generates a new entry in the  group for each configuration.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Okay.  It has been converted to an API call now.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1789,2022-01-04T21:08:56Z,2022-02-22T12:22:11Z,2022-02-22T12:22:11Z,MERGED,True,56,2,2,https://github.com/LoneBoco,Include the configuration condition for ExternalWarningLevel.,4,[],https://github.com/premake/premake-core/pull/1789,https://github.com/LoneBoco,1,https://github.com/premake/premake-core/pull/1789,"What does this PR do?
Fixes a bug with ExternalWarningLevel where the entry would be duplicated for every configuration you had.
Before:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
After:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
How does this PR change Premake's behavior?
No breaking changes.
Anything else we should know?
The bug was introduced with changeset 065b3ac.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes a bug with ExternalWarningLevel where the entry would be duplicated for every configuration you had.
Before:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
After:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
How does this PR change Premake's behavior?
No breaking changes.
Anything else we should know?
The bug was introduced with changeset 065b3ac.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1789,2022-01-04T21:08:56Z,2022-02-22T12:22:11Z,2022-02-22T12:22:11Z,MERGED,True,56,2,2,https://github.com/LoneBoco,Include the configuration condition for ExternalWarningLevel.,4,[],https://github.com/premake/premake-core/pull/1789,https://github.com/LoneBoco,2,https://github.com/premake/premake-core/pull/1789#issuecomment-1005970644,"What does this PR do?
Fixes a bug with ExternalWarningLevel where the entry would be duplicated for every configuration you had.
Before:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
After:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
How does this PR change Premake's behavior?
No breaking changes.
Anything else we should know?
The bug was introduced with changeset 065b3ac.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Okay, I fixed all instances of file level handling of externalwarnings and externalanglebrackets, including adding tests for them.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1789,2022-01-04T21:08:56Z,2022-02-22T12:22:11Z,2022-02-22T12:22:11Z,MERGED,True,56,2,2,https://github.com/LoneBoco,Include the configuration condition for ExternalWarningLevel.,4,[],https://github.com/premake/premake-core/pull/1789,https://github.com/LoneBoco,3,https://github.com/premake/premake-core/pull/1789#issuecomment-1005971275,"What does this PR do?
Fixes a bug with ExternalWarningLevel where the entry would be duplicated for every configuration you had.
Before:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
After:
<ClCompile Include=""file.cpp"">
  <ExternalWarningLevel>Level3</ExternalWarningLevel>
</ClCompile>
How does this PR change Premake's behavior?
No breaking changes.
Anything else we should know?
The bug was introduced with changeset 065b3ac.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I also prevented it from exporting on the file level if it wasn't declared.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1790,2022-01-04T21:24:08Z,2022-02-22T12:20:50Z,2022-02-22T12:46:58Z,MERGED,True,83,7,6,https://github.com/hannes-harnisch,"Adding C++ module file extensions and implementing ""allmodulespublic""",2,[],https://github.com/premake/premake-core/pull/1790,https://github.com/hannes-harnisch,1,https://github.com/premake/premake-core/pull/1790,See #1773. That PR was closed accidentally due to reshuffling commits on request.,See #1773. That PR was closed accidentally due to reshuffling commits on request.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1790,2022-01-04T21:24:08Z,2022-02-22T12:20:50Z,2022-02-22T12:46:58Z,MERGED,True,83,7,6,https://github.com/hannes-harnisch,"Adding C++ module file extensions and implementing ""allmodulespublic""",2,[],https://github.com/premake/premake-core/pull/1790,https://github.com/hannes-harnisch,2,https://github.com/premake/premake-core/pull/1790#issuecomment-1027198916,See #1773. That PR was closed accidentally due to reshuffling commits on request.,@starkos Is this okay?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1796,2022-01-12T09:57:00Z,2022-04-08T10:49:20Z,2022-04-08T10:49:20Z,MERGED,True,1,1,1,https://github.com/somyungoh,"Fix #1795: project generation fails with ""Error: attempt to index a function value""",1,[],https://github.com/premake/premake-core/pull/1796,https://github.com/somyungoh,1,https://github.com/premake/premake-core/pull/1796,"What does this PR do?
Only allow ""table"" type to be passed into ipairs() in the code api.lua, line 661.
Closes #1795.
How does this PR change Premake's behavior?
No premake behavioral change, but prevents error when invalid type being passed to ipairs().
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Only allow ""table"" type to be passed into ipairs() in the code api.lua, line 661.
Closes #1795.
How does this PR change Premake's behavior?
No premake behavioral change, but prevents error when invalid type being passed to ipairs().
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1796,2022-01-12T09:57:00Z,2022-04-08T10:49:20Z,2022-04-08T10:49:20Z,MERGED,True,1,1,1,https://github.com/somyungoh,"Fix #1795: project generation fails with ""Error: attempt to index a function value""",1,[],https://github.com/premake/premake-core/pull/1796,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1796#issuecomment-1087462490,"What does this PR do?
Only allow ""table"" type to be passed into ipairs() in the code api.lua, line 661.
Closes #1795.
How does this PR change Premake's behavior?
No premake behavioral change, but prevents error when invalid type being passed to ipairs().
Anything else we should know?
No.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Apologies on such a long follow up time. If you don't mine, can you rebase your branch off the most recent master, then I'll go ahead and merge? I'm happy with these changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/hannes-harnisch,1,https://github.com/premake/premake-core/pull/1809,See end of discussion in #1774.,See end of discussion in #1774.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/hannes-harnisch,2,https://github.com/premake/premake-core/pull/1809#issuecomment-1031712303,See end of discussion in #1774.,Any reason the checks are stalled?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1809#issuecomment-1031813467,See end of discussion in #1774.,"Any reason the checks are stalled?

Your changes are in conflict with our master branch. Please rebase your branch on top of master üôÇ",True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/hannes-harnisch,4,https://github.com/premake/premake-core/pull/1809#issuecomment-1032058174,See end of discussion in #1774.,"Any reason the checks are stalled?

Your changes are in conflict with our master branch. Please rebase your branch on top of master üôÇ

Any idea how I can do that quickly without polluting the commits here again? Because that was the reason the original PR was merged and then undone.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1809#issuecomment-1032074453,See end of discussion in #1774.,Could you rebase the the branch?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/hannes-harnisch,6,https://github.com/premake/premake-core/pull/1809#issuecomment-1032078166,See end of discussion in #1774.,"Could you rebase the the branch?

I can't. I have to merge master via a PR on my own fork first. I don't think I have another choice, GitHub doesn't seem to leave me one.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1809#issuecomment-1034901203,See end of discussion in #1774.,"@hannes-harnisch Add a remote for this repo to your checkout and then rebase to this repos master. I tested this with your branch, but because you're trying to submit a commit that's already in master, it's a bit more complicated.
This will add a remote called premake and fetch the branches:
git remote add premake git@github.com:premake/premake-core.git
git fetch premake

This will start an interactive rebase from your master (where all of your changes originate) onto the current master of Premake:
git rebase -i --onto premake/master origin/master

This will then bring up a prompt, press i to begin insert characters, move to the second line using the down arrow, press f and then delete pick using the del key. Then move down to the third line and press f and delete pick again. Then press the escape key, and type :wq which will save and quit the prompt.
Your branch will now have the commit message Implementing ""inheretdependencies"" and contain all of your changes. Once this is done, you'll then need to git push --force-with-lease to push the updated branch. If you don't include --force-with-lease or --force, it will fail as the branch is different.
Normally, you would just git rebase premake/master but because your commits are already in master, it just moves your branch tag to master without any of the changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1809,2022-02-06T17:29:42Z,2022-02-22T12:23:40Z,2022-02-22T12:47:20Z,MERGED,True,79,5,5,https://github.com/hannes-harnisch,Feature for disabling inherited dependencies,1,[],https://github.com/premake/premake-core/pull/1809,https://github.com/hannes-harnisch,8,https://github.com/premake/premake-core/pull/1809#issuecomment-1035319779,See end of discussion in #1774.,"@samsinsane Thank you so much for taking the time to write out the detailed explanation, it worked. I've done a few rebases before but those were very simple situations and I'm far from a Git expert.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1811,2022-02-08T14:20:53Z,2022-02-21T00:51:45Z,2022-02-21T00:51:45Z,MERGED,True,1,0,1,https://github.com/MattBystrin,"Doc edit. Add Matt's ECC in ""Tool modules""",2,[],https://github.com/premake/premake-core/pull/1811,https://github.com/MattBystrin,1,https://github.com/premake/premake-core/pull/1811,Add link to alternative generator of clang compile database.,Add link to alternative generator of clang compile database.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1820,2022-02-21T22:31:11Z,2022-02-22T11:44:02Z,2022-02-22T16:34:27Z,MERGED,True,1,1,1,https://github.com/KyrietS,Use windows-2019 instead of windows-lastest (temporarily),1,[],https://github.com/premake/premake-core/pull/1820,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1820,"What does this PR do?
GitHub updated its GH Actions environments and windows-latest is now 2022 by default (previously 2019). It caused our pipeline to fail.
This commit brings back a windows-2019 environment in our GH Actions pipeline.
Anything else we should know?
We will discuss the upgrade back to windows-latest in #1819
Briefly, I would like to use vswhere.exe in our pipeline to avoid hardcoding paths to Visual Studio.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
GitHub updated its GH Actions environments and windows-latest is now 2022 by default (previously 2019). It caused our pipeline to fail.
This commit brings back a windows-2019 environment in our GH Actions pipeline.
Anything else we should know?
We will discuss the upgrade back to windows-latest in #1819
Briefly, I would like to use vswhere.exe in our pipeline to avoid hardcoding paths to Visual Studio.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1821,2022-02-23T01:44:44Z,2022-04-02T22:00:05Z,2022-04-02T22:00:05Z,MERGED,True,3,4,1,https://github.com/KyrietS,Use vswhere.exe in Windows pipeline,1,[],https://github.com/premake/premake-core/pull/1821,https://github.com/KyrietS,1,https://github.com/premake/premake-core/pull/1821,"What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1821,2022-02-23T01:44:44Z,2022-04-02T22:00:05Z,2022-04-02T22:00:05Z,MERGED,True,3,4,1,https://github.com/KyrietS,Use vswhere.exe in Windows pipeline,1,[],https://github.com/premake/premake-core/pull/1821,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1821#issuecomment-1082464851,"What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Rebased on top of master.
Please, don't feel pressured to work fast. We are here because of passion, not duty. Thanks! üòä",True,{}
premake/premake-core,https://github.com/premake/premake-core,1821,2022-02-23T01:44:44Z,2022-04-02T22:00:05Z,2022-04-02T22:00:05Z,MERGED,True,3,4,1,https://github.com/KyrietS,Use vswhere.exe in Windows pipeline,1,[],https://github.com/premake/premake-core/pull/1821,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1821#issuecomment-1083392214,"What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I'm blanking. What merge strategy do we use again? I'm happy with changes,True,{}
premake/premake-core,https://github.com/premake/premake-core,1821,2022-02-23T01:44:44Z,2022-04-02T22:00:05Z,2022-04-02T22:00:05Z,MERGED,True,3,4,1,https://github.com/KyrietS,Use vswhere.exe in Windows pipeline,1,[],https://github.com/premake/premake-core/pull/1821,https://github.com/KyrietS,4,https://github.com/premake/premake-core/pull/1821#issuecomment-1085128432,"What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Do we have a strategy? üòÖ
I always click the ""Merge pull request"" button. I know that it creates a redundant merge commit but it has never been a problem. Starkos has always done it this way, so I do doing the same üòÅ
EDIT:
But if you're asking about who should click the ""Merge"" button on GitHub then I'm not aware of any rules. Maybe we should have some üòÑ. I personally try not to merge my own commits but when it's kind-of urgent then I wouldn't hesitate.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1821,2022-02-23T01:44:44Z,2022-04-02T22:00:05Z,2022-04-02T22:00:05Z,MERGED,True,3,4,1,https://github.com/KyrietS,Use vswhere.exe in Windows pipeline,1,[],https://github.com/premake/premake-core/pull/1821,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1821#issuecomment-1085158245,"What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Do we have a strategy? üòÖ I always click the ""Merge pull request"" button. I know that it creates a redundant merge commit but it has never been a problem. Starkos has always done it this way, so I do doing the same üòÅ
EDIT: But if you're asking about who should click the ""Merge"" button on GitHub then I'm not aware of any rules. Maybe we should have some üòÑ. I personally try not to merge my own commits but when it's kind-of urgent then I wouldn't hesitate.

Ahh, talking about merge strategy. Create a Merge Request, Squash and Merge, Rebase and Merge",True,{}
premake/premake-core,https://github.com/premake/premake-core,1821,2022-02-23T01:44:44Z,2022-04-02T22:00:05Z,2022-04-02T22:00:05Z,MERGED,True,3,4,1,https://github.com/KyrietS,Use vswhere.exe in Windows pipeline,1,[],https://github.com/premake/premake-core/pull/1821,https://github.com/KyrietS,6,https://github.com/premake/premake-core/pull/1821#issuecomment-1085168514,"What does this PR do?
Use vswhere.exe to get a path to the vcvarsall.bat.
My approach is that I use PowerShell to execute vswhere.exe and save its result to variable ($vcvarsall_path).
Then, run the script in legacy cmd.exe.
Resolves #1819
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Ahh, talking about merge strategy. Create a Merge Request, Squash and Merge, Rebase and Merge

See Premake's commit history. In most cases, we use Create a merge commit. As far as I know, no strategy has been agreed upon",True,{}
premake/premake-core,https://github.com/premake/premake-core,1822,2022-02-23T19:04:38Z,2022-02-23T21:18:06Z,2022-02-23T21:20:39Z,CLOSED,False,2965,2,48,https://github.com/nickclark2016,Fix for export location,3,[],https://github.com/premake/premake-core/pull/1822,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1822,"What does this PR do?
Initial gmake PR missed a change that set the export location for projects.
How does this PR change Premake's behavior?
Fixes a runtime exception for gmake exporter.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Initial gmake PR missed a change that set the export location for projects.
How does this PR change Premake's behavior?
Fixes a runtime exception for gmake exporter.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1822,2022-02-23T19:04:38Z,2022-02-23T21:18:06Z,2022-02-23T21:20:39Z,CLOSED,False,2965,2,48,https://github.com/nickclark2016,Fix for export location,3,[],https://github.com/premake/premake-core/pull/1822,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1822#issuecomment-1049224850,"What does this PR do?
Initial gmake PR missed a change that set the export location for projects.
How does this PR change Premake's behavior?
Fixes a runtime exception for gmake exporter.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Closing to fix some git issues. Will reopen.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1823,2022-02-23T21:25:38Z,2022-04-02T21:59:29Z,2022-04-04T11:58:13Z,MERGED,True,11,4,2,https://github.com/nickclark2016,Fix export location for gmake,1,"['bug', 'gmake']",https://github.com/premake/premake-core/pull/1823,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1823,"What does this PR do?
Fixes export location not being set in the gmake project generation. Missed in the initial PR.
How does this PR change Premake's behavior?
Fixes runtime error.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes export location not being set in the gmake project generation. Missed in the initial PR.
How does this PR change Premake's behavior?
Fixes runtime error.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1826,2022-02-24T16:34:22Z,2022-03-30T07:21:51Z,2022-03-30T07:21:51Z,MERGED,True,16,3,1,https://github.com/nickclark2016,Added documentation for static and shared linking suffixes,1,[],https://github.com/premake/premake-core/pull/1826,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1826,"What does this PR do?
Documentation update to include :static and :shared suffixes.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Closes #1818
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Documentation update to include :static and :shared suffixes.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Closes #1818
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{'THUMBS_UP': ['https://github.com/babaliaris']}
premake/premake-core,https://github.com/premake/premake-core,1826,2022-02-24T16:34:22Z,2022-03-30T07:21:51Z,2022-03-30T07:21:51Z,MERGED,True,16,3,1,https://github.com/nickclark2016,Added documentation for static and shared linking suffixes,1,[],https://github.com/premake/premake-core/pull/1826,https://github.com/KyrietS,2,https://github.com/premake/premake-core/pull/1826#issuecomment-1082468625,"What does this PR do?
Documentation update to include :static and :shared suffixes.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Closes #1818
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Can you rebase your branch so I can finally merge it?
I thought somone else would click the merge button after my approval but it didn't happen and your branch is out-of-date now. Sorry üòÖ",True,{}
premake/premake-core,https://github.com/premake/premake-core,1826,2022-02-24T16:34:22Z,2022-03-30T07:21:51Z,2022-03-30T07:21:51Z,MERGED,True,16,3,1,https://github.com/nickclark2016,Added documentation for static and shared linking suffixes,1,[],https://github.com/premake/premake-core/pull/1826,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1826#issuecomment-1082533741,"What does this PR do?
Documentation update to include :static and :shared suffixes.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
Closes #1818
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Please ignore my git issues.  Couldn't get my branch to rebase cleanly.,True,{'THUMBS_UP': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1834,2022-03-08T15:11:18Z,2022-04-18T21:16:12Z,2022-04-18T21:16:12Z,MERGED,True,1,1,1,https://github.com/r-a-sattarov,contrib/curl: update ifdef condition for MCST-LCC compiler,1,[],https://github.com/premake/premake-core/pull/1834,https://github.com/r-a-sattarov,1,https://github.com/premake/premake-core/pull/1834,"What does this PR do?
Backport from Curl - curl/curl#8546
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
In mcst-lcc compiler => 1.25 added a new macro definition to determine compiler
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Backport from Curl - curl/curl#8546
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
In mcst-lcc compiler => 1.25 added a new macro definition to determine compiler
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1834,2022-03-08T15:11:18Z,2022-04-18T21:16:12Z,2022-04-18T21:16:12Z,MERGED,True,1,1,1,https://github.com/r-a-sattarov,contrib/curl: update ifdef condition for MCST-LCC compiler,1,[],https://github.com/premake/premake-core/pull/1834,https://github.com/r-a-sattarov,2,https://github.com/premake/premake-core/pull/1834#issuecomment-1061882938,"What does this PR do?
Backport from Curl - curl/curl#8546
How does this PR change Premake's behavior?
This PR doesn't change Premake's behaviour to the end user.
Anything else we should know?
In mcst-lcc compiler => 1.25 added a new macro definition to determine compiler
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",enhancement of the previous patch - #1365,True,{}
premake/premake-core,https://github.com/premake/premake-core,1841,2022-03-24T16:30:59Z,,2022-03-30T02:21:17Z,OPEN,False,14,14,1,https://github.com/TylerDahl,Update shadertype.md,2,[],https://github.com/premake/premake-core/pull/1841,https://github.com/TylerDahl,1,https://github.com/premake/premake-core/pull/1841,"What does this PR do?
Update the shadertype documentation to remove auto-generated text and add a description and example.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[CHECK] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[CHECK ] Follow our coding conventions
[CHECK ] Minimize the number of commits
[CHECK ] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Update the shadertype documentation to remove auto-generated text and add a description and example.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[CHECK] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[CHECK ] Follow our coding conventions
[CHECK ] Minimize the number of commits
[CHECK ] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1841,2022-03-24T16:30:59Z,,2022-03-30T02:21:17Z,OPEN,False,14,14,1,https://github.com/TylerDahl,Update shadertype.md,2,[],https://github.com/premake/premake-core/pull/1841,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1841#issuecomment-1082548892,"What does this PR do?
Update the shadertype documentation to remove auto-generated text and add a description and example.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[CHECK] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[CHECK ] Follow our coding conventions
[CHECK ] Minimize the number of commits
[CHECK ] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Sorry, one last minor thing and I'll leave you alone. Instead of making a new commit, could you just amend the previous?
git reset HEAD~
git add --all
git commit --amend --no-edit
We try to keep the number of commits to a minimum (this should be applied to all your PRs).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1842,2022-03-24T18:44:44Z,,2022-03-30T00:06:45Z,OPEN,False,6,4,1,https://github.com/TylerDahl,Update shaderobjectfileoutput.md,2,[],https://github.com/premake/premake-core/pull/1842,https://github.com/TylerDahl,1,https://github.com/premake/premake-core/pull/1842,"What does this PR do?
Update the shaderobjectfileoutput documentation to replace the current auto-generated text.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[ CHECK] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ CHECK] Follow our coding conventions
[CHECK ] Minimize the number of commits
[ CHECK] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Update the shaderobjectfileoutput documentation to replace the current auto-generated text.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[ CHECK] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[ CHECK] Follow our coding conventions
[CHECK ] Minimize the number of commits
[ CHECK] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1843,2022-03-24T19:35:33Z,,2022-03-29T23:57:14Z,OPEN,False,19,19,1,https://github.com/TylerDahl,Update shadermodel.md,2,[],https://github.com/premake/premake-core/pull/1843,https://github.com/TylerDahl,1,https://github.com/premake/premake-core/pull/1843,"What does this PR do?
Update shadermodel documentation to replace auto-generated text.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[CHECK ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[CHECK ] Follow our coding conventions
[CHECK ] Minimize the number of commits
[ CHECK] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Update shadermodel documentation to replace auto-generated text.
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Modifies the Premake documentation.
Are there any breaking changes? Will any existing behavior change?
No.
Anything else we should know?
No.
Add any other context about your changes here.
Did you check all the boxes?

[CHECK ] Focus on a single fix or feature; remove any unrelated formatting or code changes
[CHECK ] Add unit tests showing fix or feature works; all tests pass
[CHECK ] Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
[CHECK ] Follow our coding conventions
[CHECK ] Minimize the number of commits
[ CHECK] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1847,2022-03-28T16:06:54Z,2022-04-03T18:08:47Z,2022-04-03T18:08:47Z,CLOSED,False,13,16,1,https://github.com/mihaisebea,Improve os match performance ,3,[],https://github.com/premake/premake-core/pull/1847,https://github.com/mihaisebea,1,https://github.com/premake/premake-core/pull/1847,"What does this PR do?
It tries to improve performance on large projects by not checking if a matched item is a file or folder and makes the check directly in the os.match function where we already have that information.
How does this PR change Premake's behavior?
In theory the behaviour of premake itself will not change
If no matchtype flag is passed to os.match the function will return all of the results as before
Anything else we should know?
this is part of the investigation with issue #1414
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 TODO Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
[] Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
It tries to improve performance on large projects by not checking if a matched item is a file or folder and makes the check directly in the os.match function where we already have that information.
How does this PR change Premake's behavior?
In theory the behaviour of premake itself will not change
If no matchtype flag is passed to os.match the function will return all of the results as before
Anything else we should know?
this is part of the investigation with issue #1414
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 TODO Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
[] Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1850,2022-04-03T09:35:44Z,,2022-05-13T16:28:58Z,OPEN,False,18,17,1,https://github.com/mihaisebea,! checking if each match found is either a file or folder appears to ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/1850,https://github.com/mihaisebea,1,https://github.com/premake/premake-core/pull/1850,"‚Ä¶be expensive on large projects (at least on windows)
! for a 5k files project GetAttributesW takes around 20% of the time
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","‚Ä¶be expensive on large projects (at least on windows)
! for a 5k files project GetAttributesW takes around 20% of the time
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1850,2022-04-03T09:35:44Z,,2022-05-13T16:28:58Z,OPEN,False,18,17,1,https://github.com/mihaisebea,! checking if each match found is either a file or folder appears to ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/1850,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1850#issuecomment-1092785660,"‚Ä¶be expensive on large projects (at least on windows)
! for a 5k files project GetAttributesW takes around 20% of the time
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Noticed the tests fail on non-Windows platforms, it fails on os.remove() when attempting to remove a directory. os.remove() is supposed to fail, but it succeeds now. I can't really figure out what's different other than os.matchisfile will check the dirent->d_type if it has it before falling back to calling os.isfile.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1850,2022-04-03T09:35:44Z,,2022-05-13T16:28:58Z,OPEN,False,18,17,1,https://github.com/mihaisebea,! checking if each match found is either a file or folder appears to ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/1850,https://github.com/mihaisebea,3,https://github.com/premake/premake-core/pull/1850#issuecomment-1094205198,"‚Ä¶be expensive on large projects (at least on windows)
! for a 5k files project GetAttributesW takes around 20% of the time
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Noticed the tests fail on non-Windows platforms, it fails on os.remove() when attempting to remove a directory. os.remove() is supposed to fail, but it succeeds now. I can't really figure out what's different other than os.matchisfile will check the dirent->d_type if it has it before falling back to calling os.isfile.

I noticed and it has been puzzling me for a while :(
I need to get my hands on a mac or linux so this will take a bit.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1850,2022-04-03T09:35:44Z,,2022-05-13T16:28:58Z,OPEN,False,18,17,1,https://github.com/mihaisebea,! checking if each match found is either a file or folder appears to ‚Ä¶,2,[],https://github.com/premake/premake-core/pull/1850,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1850#issuecomment-1126238605,"‚Ä¶be expensive on large projects (at least on windows)
! for a 5k files project GetAttributesW takes around 20% of the time
What does this PR do?
Thanks for the contribution! Please provide a concise description of the problem this request solves.
How does this PR change Premake's behavior?
Are there any breaking changes? Will any existing behavior change?
Anything else we should know?
Add any other context about your changes here.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Just wanted to poke this and see if there's a status on it since there are changes requested.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1851,2022-04-04T11:48:14Z,2022-04-05T12:25:50Z,2022-04-05T16:53:23Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Updated LICENSE.txt copyright year,1,[],https://github.com/premake/premake-core/pull/1851,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1851,"What does this PR do?
Updates copyright year in LICENSE.txt from 2019 to 2022.
How does this PR change Premake's behavior?
No code changes.
Anything else we should know?
Closes #1833
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Updates copyright year in LICENSE.txt from 2019 to 2022.
How does this PR change Premake's behavior?
No code changes.
Anything else we should know?
Closes #1833
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1851,2022-04-04T11:48:14Z,2022-04-05T12:25:50Z,2022-04-05T16:53:23Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Updated LICENSE.txt copyright year,1,[],https://github.com/premake/premake-core/pull/1851,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1851#issuecomment-1087459732,"What does this PR do?
Updates copyright year in LICENSE.txt from 2019 to 2022.
How does this PR change Premake's behavior?
No code changes.
Anything else we should know?
Closes #1833
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Just a thought, but moving forward, why don't we add an item to the checklist where if we touch a file, we update the copyright year?  That's a practice that I do where I work, and it works out better than fixing it all at once before a SW delivery.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1851,2022-04-04T11:48:14Z,2022-04-05T12:25:50Z,2022-04-05T16:53:23Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Updated LICENSE.txt copyright year,1,[],https://github.com/premake/premake-core/pull/1851,https://github.com/KyrietS,3,https://github.com/premake/premake-core/pull/1851#issuecomment-1088024370,"What does this PR do?
Updates copyright year in LICENSE.txt from 2019 to 2022.
How does this PR change Premake's behavior?
No code changes.
Anything else we should know?
Closes #1833
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Just a thought, but moving forward, why don't we add an item to the checklist where if we touch a file, we update the copyright year? That's a practice that I do where I work, and it works out better than fixing it all at once before a SW delivery.

I'm not a big fan of having copyright clause in every single source file but your idea is not bad. However, I think the process of checking whether someone has updated the copyright date in the file that was touched could be somehow automated (and added to the pipeline).",True,{}
premake/premake-core,https://github.com/premake/premake-core,1851,2022-04-04T11:48:14Z,2022-04-05T12:25:50Z,2022-04-05T16:53:23Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Updated LICENSE.txt copyright year,1,[],https://github.com/premake/premake-core/pull/1851,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1851#issuecomment-1088642295,"What does this PR do?
Updates copyright year in LICENSE.txt from 2019 to 2022.
How does this PR change Premake's behavior?
No code changes.
Anything else we should know?
Closes #1833
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Just a thought, but moving forward, why don't we add an item to the checklist where if we touch a file, we update the copyright year? That's a practice that I do where I work, and it works out better than fixing it all at once before a SW delivery.

I'm not a big fan of having copyright clause in every single source file but your idea is not bad. However, I think the process of checking whether someone has updated the copyright date in the file that was touched could be somehow automated (and added to the pipeline).

Definitely could be added to the pipeline, I'm just not 100% sure how to do it.  Couldn't find a GitHub CI action in a cursory search.  Maybe a simple python or bash script to check in it's own runner and fail out if the copyright of the file touched wasn't updated?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1851,2022-04-04T11:48:14Z,2022-04-05T12:25:50Z,2022-04-05T16:53:23Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Updated LICENSE.txt copyright year,1,[],https://github.com/premake/premake-core/pull/1851,https://github.com/KyrietS,5,https://github.com/premake/premake-core/pull/1851#issuecomment-1089030340,"What does this PR do?
Updates copyright year in LICENSE.txt from 2019 to 2022.
How does this PR change Premake's behavior?
No code changes.
Anything else we should know?
Closes #1833
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",I don't know how to do it either. I was just thinking üòÅ,True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/ReeceSX,1,https://github.com/premake/premake-core/pull/1852,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1852#issuecomment-1088639240,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.",Can we get a unit test that reflect this?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/ReeceSX,3,https://github.com/premake/premake-core/pull/1852#issuecomment-1088662454,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","It'd require digging out the boilerplate test suit, hacking it in test_gmake2_makefile - a file that hasn't been touched since 2018, to validate that the widely used p.esc function can be used in this context.  I can't directly push to GitHub from Linux. It seemed like a test was more trouble than it was worth.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1852#issuecomment-1088681201,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","Why can we not make a new file for testing it, based off something like this: https://github.com/premake/premake-core/blob/master/modules/gmake2/tests/test_gmake2_ldflags.lua.  It'd be much easier to do than trying to put it into that monolithic test.
While yeah, we don't have a test for it right now, it'd be useful so we know if we break it in the future.  I also want to see testing for what the output would look like in cases where the path has no spaces, where the path has spaces, etc.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/ReeceSX,5,https://github.com/premake/premake-core/pull/1852#issuecomment-1088694299,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","Why can we not make a new file for testing it, based off something like this: https://github.com/premake/premake-core/blob/master/modules/gmake2/tests/test_gmake2_ldflags.lua. It'd be much easier to do than trying to put it into that monolithic test.

I have next to no experience with poking in premakes internal test suit; however it appears as though the test_gmake2_makefile file would cover TARGET and TARGETDIR part of the generator. The problem is, it depends on a core test util to generate the workspace and project. All the tests across premake assume a project name of ""MyProject""  (... index). It'd require modifying the self-test module - not just gmake2s test surface. Or perhaps you could get away with hacking the relevant parts out. Not sure how getproject in prepare works. I don't have enough experience in this subsystem to produce such a new hacky test from scratch.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/nickclark2016,6,https://github.com/premake/premake-core/pull/1852#issuecomment-1089024108,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","Again, that's why I recommended the test_gmake2_ldflags as a base instead.  While the change is minor, I'm not comfortable approving without a test, as this modified premake's outputs.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/samsinsane,7,https://github.com/premake/premake-core/pull/1852#issuecomment-1092731732,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","@ReeceSX You don't need to use the helpers you can just call workspace and project yourself - they're just the normal API calls you make in a premake5.lua script. targetdir, targetname and objdir are the APIs you're looking for though as they can be used to control TARGETDIR, TARGET and OBJDIR, respectively.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/nickclark2016,8,https://github.com/premake/premake-core/pull/1852#issuecomment-1121783390,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.",Just wanted to poke on this to see if any progress was made.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1852,2022-04-05T12:15:18Z,2022-05-15T14:50:29Z,2022-05-15T14:50:29Z,CLOSED,False,3,3,1,https://github.com/ReeceSX,[*] gmake2: fix unescaped ' ' characters in target directory and target,1,[],https://github.com/premake/premake-core/pull/1852,https://github.com/ReeceSX,9,https://github.com/premake/premake-core/pull/1852#issuecomment-1126935006,"Projects, target directories, and object directories didn't account for users including spaces into their respective values.  This commit should fix that by wrapping the values with the global premake.esc function as used by _x.","Just wanted to poke on this to see if any progress was made.

about as much progress made in the other issues where you expect new contributors to write tests in an alien framework without assistance.

no, you're not getting a pointless unit test that wont validate the validity of a makefile for a 3 line change under the guize of regression testing a preface space with a backslash function in a project with almost 4k commits and recent changes under gmake2/relevant subsytems with no tests to match.
also you: c36e48a",True,{}
premake/premake-core,https://github.com/premake/premake-core,1855,2022-04-08T12:52:39Z,2022-04-08T13:12:15Z,2022-04-08T13:12:16Z,MERGED,True,5,5,4,https://github.com/nickclark2016,Changed MMD to MD in gmake/gmake2 outputs for gcc/clang.,1,[],https://github.com/premake/premake-core/pull/1855,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1855,"What does this PR do?
Changes ""-MMD"" to ""-MD"" for all platforms but ""wii"" and ""haiku"".
How does this PR change Premake's behavior?
No breaking changes AFAIK.
Anything else we should know?
Closes #1801
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Changes ""-MMD"" to ""-MD"" for all platforms but ""wii"" and ""haiku"".
How does this PR change Premake's behavior?
No breaking changes AFAIK.
Anything else we should know?
Closes #1801
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1857,2022-04-10T18:53:41Z,,2022-04-21T03:22:12Z,OPEN,False,1,1,1,https://github.com/flakey5,6.x - Fix broken link to testing module,1,[],https://github.com/premake/premake-core/pull/1857,https://github.com/flakey5,1,https://github.com/premake/premake-core/pull/1857,"What does this PR do?
Fixes the link to the testing module in the v6 change list.
How does this PR change Premake's behavior?
No behavioral change
Anything else we should know?
Nope
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes","What does this PR do?
Fixes the link to the testing module in the v6 change list.
How does this PR change Premake's behavior?
No behavioral change
Anything else we should know?
Nope
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes",True,{}
premake/premake-core,https://github.com/premake/premake-core,1860,2022-04-13T11:33:05Z,2022-04-16T05:56:46Z,2022-04-18T13:41:45Z,MERGED,True,39,8,5,https://github.com/Jarod42,Add support of openmp for gcc/clang.,1,[],https://github.com/premake/premake-core/pull/1860,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1860,"What does this PR do?
Extend openmp to be supported by gcc/clang
How does this PR change Premake's behavior?
By adding support for gcc/clang to existing openmp.
Anything else we should know?
Also tested with https://github.com/Jarod42/premake-sample-projects branch OpenMP
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Extend openmp to be supported by gcc/clang
How does this PR change Premake's behavior?
By adding support for gcc/clang to existing openmp.
Anything else we should know?
Also tested with https://github.com/Jarod42/premake-sample-projects branch OpenMP
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1860,2022-04-13T11:33:05Z,2022-04-16T05:56:46Z,2022-04-18T13:41:45Z,MERGED,True,39,8,5,https://github.com/Jarod42,Add support of openmp for gcc/clang.,1,[],https://github.com/premake/premake-core/pull/1860,https://github.com/Jarod42,2,https://github.com/premake/premake-core/pull/1860#issuecomment-1100380870,"What does this PR do?
Extend openmp to be supported by gcc/clang
How does this PR change Premake's behavior?
By adding support for gcc/clang to existing openmp.
Anything else we should know?
Also tested with https://github.com/Jarod42/premake-sample-projects branch OpenMP
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Website CI failed, but it seems unrelated to my changes.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1861,2022-04-15T20:07:13Z,2022-05-11T12:58:48Z,2022-05-13T09:16:50Z,MERGED,True,13,0,2,https://github.com/Jarod42,Fix Codelite generation of empty source tree project.,1,[],https://github.com/premake/premake-core/pull/1861,https://github.com/Jarod42,1,https://github.com/premake/premake-core/pull/1861,"What does this PR do?
Fix generation of codelite for project without files.
How does this PR change Premake's behavior?
Only affects codelite generator.
Anything else we should know?
No
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fix generation of codelite for project without files.
How does this PR change Premake's behavior?
Only affects codelite generator.
Anything else we should know?
No
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1863,2022-04-20T13:47:23Z,2022-04-21T13:07:31Z,2022-05-02T06:42:49Z,MERGED,True,1,1,1,https://github.com/simbit18,Fix build failed in mingw x86,1,[],https://github.com/premake/premake-core/pull/1863,https://github.com/simbit18,1,https://github.com/premake/premake-core/pull/1863,"What does this PR do?
Fixes  build failed in mingw x86 with v5.0.0-beta1 version. Here is the output:
Makefile:34: *** ""invalid configuration release_x86"".  Stop.
mingw32-make: *** [Bootstrap.mak:91: mingw] Error 2
How does this PR change Premake's behavior?
No changes other than the fix.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixes  build failed in mingw x86 with v5.0.0-beta1 version. Here is the output:
Makefile:34: *** ""invalid configuration release_x86"".  Stop.
mingw32-make: *** [Bootstrap.mak:91: mingw] Error 2
How does this PR change Premake's behavior?
No changes other than the fix.
Anything else we should know?
Nope.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1867,2022-04-28T23:57:15Z,2022-05-09T21:38:50Z,2022-05-09T21:38:50Z,MERGED,True,8,1,3,https://github.com/flakey5,Improve uuid generation on Linux,2,[],https://github.com/premake/premake-core/pull/1867,https://github.com/flakey5,1,https://github.com/premake/premake-core/pull/1867,"What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1867,2022-04-28T23:57:15Z,2022-05-09T21:38:50Z,2022-05-09T21:38:50Z,MERGED,True,8,1,3,https://github.com/flakey5,Improve uuid generation on Linux,2,[],https://github.com/premake/premake-core/pull/1867,https://github.com/flakey5,2,https://github.com/premake/premake-core/pull/1867#issuecomment-1113922259,"What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","One more note I've just realized: the 6.x branch uses the same generation code, so this could also be applied there. If y'all want I can do another pr implementing it. It would be basically the same code change and the only real difference I can see would be in the build files",True,{}
premake/premake-core,https://github.com/premake/premake-core,1867,2022-04-28T23:57:15Z,2022-05-09T21:38:50Z,2022-05-09T21:38:50Z,MERGED,True,8,1,3,https://github.com/flakey5,Improve uuid generation on Linux,2,[],https://github.com/premake/premake-core/pull/1867,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1867#issuecomment-1119849530,"What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Feel free to stick out a PR for v6.  Given UUID has been around since 2009, I think we're good. That was 13 years ago.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1867,2022-04-28T23:57:15Z,2022-05-09T21:38:50Z,2022-05-09T21:38:50Z,MERGED,True,8,1,3,https://github.com/flakey5,Improve uuid generation on Linux,2,[],https://github.com/premake/premake-core/pull/1867,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1867#issuecomment-1121608789,"What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Merging.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1873,2022-05-06T18:23:45Z,2022-05-06T18:27:30Z,2022-05-06T18:27:30Z,CLOSED,False,2,2,90,https://github.com/nickclark2016,Move exporters to new directory,1,[],https://github.com/premake/premake-core/pull/1873,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1873,"What does this PR do?
Moves the exporters from the root level modules directory into modules/exporters, making way for the toolset directory in modules at a later time.
How does this PR change Premake's behavior?
Changes Lua search paths.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Moves the exporters from the root level modules directory into modules/exporters, making way for the toolset directory in modules at a later time.
How does this PR change Premake's behavior?
Changes Lua search paths.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1873,2022-05-06T18:23:45Z,2022-05-06T18:27:30Z,2022-05-06T18:27:30Z,CLOSED,False,2,2,90,https://github.com/nickclark2016,Move exporters to new directory,1,[],https://github.com/premake/premake-core/pull/1873,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1873#issuecomment-1119878346,"What does this PR do?
Moves the exporters from the root level modules directory into modules/exporters, making way for the toolset directory in modules at a later time.
How does this PR change Premake's behavior?
Changes Lua search paths.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Put this out on the wrong repo. Reopening elsewhere.,True,{'LAUGH': ['https://github.com/KyrietS']}
premake/premake-core,https://github.com/premake/premake-core,1875,2022-05-09T21:38:24Z,2022-05-09T21:38:30Z,2022-05-09T21:38:30Z,MERGED,True,2,2,90,https://github.com/nickclark2016,Refactored the modules directory,1,[],https://github.com/premake/premake-core/pull/1875,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1875,See this issue for context. Immediate merge.,See this issue for context. Immediate merge.,True,{}
premake/premake-core,https://github.com/premake/premake-core,1876,2022-05-10T01:59:35Z,2022-05-11T13:03:21Z,2022-05-11T13:03:21Z,MERGED,True,2,2,1,https://github.com/nickclark2016,Escape group names when creating rules,1,[],https://github.com/premake/premake-core/pull/1876,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1876,"What does this PR do?
Closes #1868
How does this PR change Premake's behavior?
Changes the gmake2 output when there are spaces in the name of a group.  The name is escaped when it has whitespace.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Closes #1868
How does this PR change Premake's behavior?
Changes the gmake2 output when there are spaces in the name of a group.  The name is escaped when it has whitespace.
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1877,2022-05-10T17:13:43Z,2022-05-11T13:34:26Z,2022-05-11T13:34:26Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Fixed unit test for gmake target,1,[],https://github.com/premake/premake-core/pull/1877,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1877,"What does this PR do?
Fixed a broken unit test in the gmake exporter.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Fixed a broken unit test in the gmake exporter.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1877,2022-05-10T17:13:43Z,2022-05-11T13:34:26Z,2022-05-11T13:34:26Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Fixed unit test for gmake target,1,[],https://github.com/premake/premake-core/pull/1877,https://github.com/samsinsane,2,https://github.com/premake/premake-core/pull/1877#issuecomment-1123719944,"What does this PR do?
Fixed a broken unit test in the gmake exporter.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Does this run?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1877,2022-05-10T17:13:43Z,2022-05-11T13:34:26Z,2022-05-11T13:34:26Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Fixed unit test for gmake target,1,[],https://github.com/premake/premake-core/pull/1877,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1877#issuecomment-1123742461,"What does this PR do?
Fixed a broken unit test in the gmake exporter.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Nah, 6.x doesn't run since there's no way for it to build itself.  We haven't added the pipeline yet.  Thought I had ran it before, I had not.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1877,2022-05-10T17:13:43Z,2022-05-11T13:34:26Z,2022-05-11T13:34:26Z,MERGED,True,1,1,1,https://github.com/nickclark2016,Fixed unit test for gmake target,1,[],https://github.com/premake/premake-core/pull/1877,https://github.com/samsinsane,4,https://github.com/premake/premake-core/pull/1877#issuecomment-1123770558,"What does this PR do?
Fixed a broken unit test in the gmake exporter.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I didn't even notice this was for the 6.x branch, don't mind me!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1878,2022-05-11T04:11:43Z,2022-05-15T15:42:19Z,2022-05-15T15:42:20Z,MERGED,True,7,0,2,https://github.com/flakey5,6.x - Improve uuid generation on Linux,1,[],https://github.com/premake/premake-core/pull/1878,https://github.com/flakey5,1,https://github.com/premake/premake-core/pull/1878,"This is pretty much just the changes from #1867 but for the 6.x branch.
What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build. Also, I didn't check the all tests pass box since I couldn't get the tests working in the first place
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","This is pretty much just the changes from #1867 but for the 6.x branch.
What does this PR do?
Makes use of Linux's uuid header to generate a uuid instead of reading from /dev/urandom.
How does this PR change Premake's behavior?
No breaking changes or behavior differences should occur.
Anything else we should know?
This does create the requirement of having the libuuid/uuid-dev package in order to build. Also, I didn't check the all tests pass box since I couldn't get the tests working in the first place
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/abel0b,1,https://github.com/premake/premake-core/pull/1881,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1881#issuecomment-1126658121,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Closes #1874,True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1881#issuecomment-1126658491,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","I'll review this when I have time to sit down and read through the entire toolset.  It's a wall of code, so it'll take me a while to get comfortable with it.",True,{'THUMBS_UP': ['https://github.com/abel0b']}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/abel0b,4,https://github.com/premake/premake-core/pull/1881#issuecomment-1126662455,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","For information, a large part of the code is copied from the gcc toolset. I tried to find an equivalent in the Nvidia compiler for each flag but it's not always possible.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/nickclark2016,5,https://github.com/premake/premake-core/pull/1881#issuecomment-1126666618,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Sure, I don't expect equivalents to be there for everything. Do you mind posting a link to where you were referencing for the compiler flags just so I'm looking at the same sources as you when I review?",True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/abel0b,6,https://github.com/premake/premake-core/pull/1881#issuecomment-1126667771,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Here is the latest available documentation for nvidia compiler : NVIDIA HPC Compilers Reference Manual,True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/Jarod42,7,https://github.com/premake/premake-core/pull/1881#issuecomment-1130042871,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",Should it be an external modules instead?,True,{}
premake/premake-core,https://github.com/premake/premake-core,1881,2022-05-14T06:48:24Z,,2022-05-19T20:32:04Z,OPEN,False,553,0,6,https://github.com/abel0b,Nvidia compiler support,2,[],https://github.com/premake/premake-core/pull/1881,https://github.com/nickclark2016,8,https://github.com/premake/premake-core/pull/1881#issuecomment-1130052576,"What does this PR do?
Add a new toolset module for Nvidia HPC C/C++ compiler (Closes #1874).
How does this PR change Premake's behavior?
No breaking change.
Anything else we should know?
I only tested that the new toolset can compile premake on my linux machine using gmake2 exporter.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Should it be an external modules instead?

Definitely something worth considering.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1882,2022-05-15T15:19:01Z,2022-05-16T20:37:19Z,2022-05-16T20:37:19Z,MERGED,True,73,1,3,https://github.com/nickclark2016,Added Unit Test for Workspace Generation,1,[],https://github.com/premake/premake-core/pull/1882,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1882,"Follow up on #1876.
What does this PR do?
Adds unit test, makes sure all escaping uses p.esc in the gmake workspace generation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Follow up on #1876.
What does this PR do?
Adds unit test, makes sure all escaping uses p.esc in the gmake workspace generation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1882,2022-05-15T15:19:01Z,2022-05-16T20:37:19Z,2022-05-16T20:37:19Z,MERGED,True,73,1,3,https://github.com/nickclark2016,Added Unit Test for Workspace Generation,1,[],https://github.com/premake/premake-core/pull/1882,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1882#issuecomment-1126964625,"Follow up on #1876.
What does this PR do?
Adds unit test, makes sure all escaping uses p.esc in the gmake workspace generation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","This is a follow on to that PR. Had ported my changes back from my 6.x working area, and noticed a few differences in v5 that needed clean up and a unit test.  Should be g2g with this. I'll close on Monday or Tuesday unless someone has comments or closes before me.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1882,2022-05-15T15:19:01Z,2022-05-16T20:37:19Z,2022-05-16T20:37:19Z,MERGED,True,73,1,3,https://github.com/nickclark2016,Added Unit Test for Workspace Generation,1,[],https://github.com/premake/premake-core/pull/1882,https://github.com/nickclark2016,3,https://github.com/premake/premake-core/pull/1882#issuecomment-1127595602,"Follow up on #1876.
What does this PR do?
Adds unit test, makes sure all escaping uses p.esc in the gmake workspace generation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Okay, I think I've got the major test cases covered for spaces in the path and the project file name, just let me know if you want me to put in any more cases before we merge this in.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1882,2022-05-15T15:19:01Z,2022-05-16T20:37:19Z,2022-05-16T20:37:19Z,MERGED,True,73,1,3,https://github.com/nickclark2016,Added Unit Test for Workspace Generation,1,[],https://github.com/premake/premake-core/pull/1882,https://github.com/nickclark2016,4,https://github.com/premake/premake-core/pull/1882#issuecomment-1127597752,"Follow up on #1876.
What does this PR do?
Adds unit test, makes sure all escaping uses p.esc in the gmake workspace generation.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","Thanks again for the review. I'm gonna leave it open until the end of the day for comments, then I'll merge.",True,{'THUMBS_UP': ['https://github.com/samsinsane']}
premake/premake-core,https://github.com/premake/premake-core,1883,2022-05-17T12:40:00Z,2022-05-19T15:53:06Z,2022-05-19T15:53:15Z,MERGED,True,13,2,3,https://github.com/nickclark2016,Fixes the generation of source projects,1,[],https://github.com/premake/premake-core/pull/1883,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1883,"What does this PR do?
#1629 introduced an issue that made it impossible to have both x86 and x64 published source packages.  This adds a ""default"" architecture flag, which produces project files with the default architectures of their exporter (except for windows, which exports both x86 and x64 explicitly).
In addition, we go ahead and add functionality the VS2022 exporter to the publish action and search for vcvars64.bat to fall back on if we can't find vcvars32.bat.
How does this PR change Premake's behavior?
Reverts the default behavior to pre-#1629 behavior.
Anything else we should know?
Closes #1862.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
#1629 introduced an issue that made it impossible to have both x86 and x64 published source packages.  This adds a ""default"" architecture flag, which produces project files with the default architectures of their exporter (except for windows, which exports both x86 and x64 explicitly).
In addition, we go ahead and add functionality the VS2022 exporter to the publish action and search for vcvars64.bat to fall back on if we can't find vcvars32.bat.
How does this PR change Premake's behavior?
Reverts the default behavior to pre-#1629 behavior.
Anything else we should know?
Closes #1862.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1885,2022-05-19T15:24:04Z,,2022-05-28T00:10:02Z,OPEN,False,37,2,2,https://github.com/nickclark2016,Source Package Generation in CI Pipeline,1,[],https://github.com/premake/premake-core/pull/1885,https://github.com/nickclark2016,1,https://github.com/premake/premake-core/pull/1885,"What does this PR do?
Adds a job to generate source packages.  This job depends on the Linux, Windows, and MacOSX jobs completing successfully, as these should be a prerequisite to building source packages (why build useless source packages?).
This also helps to automate a step of the Premake release process, where we'd be doing this manually.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds a job to generate source packages.  This job depends on the Linux, Windows, and MacOSX jobs completing successfully, as these should be a prerequisite to building source packages (why build useless source packages?).
This also helps to automate a step of the Premake release process, where we'd be doing this manually.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1885,2022-05-19T15:24:04Z,,2022-05-28T00:10:02Z,OPEN,False,37,2,2,https://github.com/nickclark2016,Source Package Generation in CI Pipeline,1,[],https://github.com/premake/premake-core/pull/1885,https://github.com/nickclark2016,2,https://github.com/premake/premake-core/pull/1885#issuecomment-1131885081,"What does this PR do?
Adds a job to generate source packages.  This job depends on the Linux, Windows, and MacOSX jobs completing successfully, as these should be a prerequisite to building source packages (why build useless source packages?).
This also helps to automate a step of the Premake release process, where we'd be doing this manually.
How does this PR change Premake's behavior?
N/A
Anything else we should know?
N/A
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","FYI: The issue in the build pipeline is because it pulls the premake sources from GitHub and tries to run off those. Since my code is not in the repo, it can't actually run it. Quite a catch-22.",True,{}
premake/premake-core,https://github.com/premake/premake-core,1886,2022-05-19T15:44:15Z,,2022-05-20T12:31:48Z,OPEN,False,42,3,2,https://github.com/samsinsane,Added MinGW CI job,1,[],https://github.com/premake/premake-core/pull/1886,https://github.com/samsinsane,1,https://github.com/premake/premake-core/pull/1886,"What does this PR do?
Adds MinGW32 and MinGW64 CI jobs. Fixes #1869
How does this PR change Premake's behavior?
N/A outside of building MinGW.
Anything else we should know?
There's more msystem options that can be used here, not sure if any of them are worth adding or not.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
[N/A] Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
[N/A] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Adds MinGW32 and MinGW64 CI jobs. Fixes #1869
How does this PR change Premake's behavior?
N/A outside of building MinGW.
Anything else we should know?
There's more msystem options that can be used here, not sure if any of them are worth adding or not.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
[N/A] Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
[N/A] Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1888,2022-05-22T02:27:04Z,,2022-05-22T02:27:04Z,OPEN,False,9,9,2,https://github.com/flakey5,6.x - Move help option to help register file,1,[],https://github.com/premake/premake-core/pull/1888,https://github.com/flakey5,1,https://github.com/premake/premake-core/pull/1888,"What does this PR do?
Resolves a todo specified in core/modules/main/core_options.lua line 15. Relocates the --help command line argument to a _register.lua located in the help module and has the core_options.lua file register it.
How does this PR change Premake's behavior?
No noticeable or breaking change. Internally the help module would be registered rather than defining the command line argument with the rest of the main arguments.
Anything else we should know?
I wasn't too sure where to actually register the help module so I just did it in the same file it was defined in originally.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Resolves a todo specified in core/modules/main/core_options.lua line 15. Relocates the --help command line argument to a _register.lua located in the help module and has the core_options.lua file register it.
How does this PR change Premake's behavior?
No noticeable or breaking change. Internally the help module would be registered rather than defining the command line argument with the rest of the main arguments.
Anything else we should know?
I wasn't too sure where to actually register the help module so I just did it in the same file it was defined in originally.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
premake/premake-core,https://github.com/premake/premake-core,1889,2022-05-22T18:21:29Z,,2022-05-22T18:21:29Z,OPEN,False,14,2,2,https://github.com/flakey5,6.x - string.expandWildcards implementation,1,[],https://github.com/premake/premake-core/pull/1889,https://github.com/flakey5,1,https://github.com/premake/premake-core/pull/1889,"What does this PR do?
Provides an implementation for string.expandWildcards.
How does this PR change Premake's behavior?
The function will no longer return placeholders and will act as it should. Uses string.patternFromWildcards internally.
Anything else we should know?
Since string.patternFromWildcards is implemented in C I was unsure if the todo calling for this function to be moved to C is still applicable. If it is, I'd be able to move it either in another commit in this pr or by making a new pr. Also, I believe this implementation is applicable to path.expandWildcards, however, it breaks a few tests in the field module so it requires a bit more looking into.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!","What does this PR do?
Provides an implementation for string.expandWildcards.
How does this PR change Premake's behavior?
The function will no longer return placeholders and will act as it should. Uses string.patternFromWildcards internally.
Anything else we should know?
Since string.patternFromWildcards is implemented in C I was unsure if the todo calling for this function to be moved to C is still applicable. If it is, I'd be able to move it either in another commit in this pr or by making a new pr. Also, I believe this implementation is applicable to path.expandWildcards, however, it breaks a few tests in the field module so it requires a bit more looking into.
Did you check all the boxes?

 Focus on a single fix or feature; remove any unrelated formatting or code changes
 Add unit tests showing fix or feature works; all tests pass
 Mention any related issues (put closes #XXXX in comment to auto-close issue when PR is merged)
 Follow our coding conventions
 Minimize the number of commits
 Align documentation to your changes

You can now support Premake on our OpenCollective. Your contributions help us spend more time responding to requests like these!",True,{}
