krakjoe/pthreads,https://github.com/krakjoe/pthreads,533,2015-12-15T16:00:33Z,2017-01-01T09:32:11Z,2017-01-01T09:32:11Z,MERGED,True,5,5,1,https://github.com/ephrin,more ...,1,[],https://github.com/krakjoe/pthreads/pull/533,https://github.com/ephrin,1,https://github.com/krakjoe/pthreads/pull/533,"since you've ""gotta love php7"" )","since you've ""gotta love php7"" )",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,573,2016-03-16T11:03:48Z,2016-03-16T12:32:29Z,2016-03-16T12:32:29Z,MERGED,True,5,5,2,https://github.com/sirsnyder,#567 - added ->val,1,[],https://github.com/krakjoe/pthreads/pull/573,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/573,This commit should fix #567,This commit should fix #567,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,582,2016-03-28T12:39:06Z,2016-05-27T13:17:32Z,2016-05-27T13:23:35Z,MERGED,True,1,0,1,https://github.com/hfedcba,Added Homegear to SAPI whitelist,1,[],https://github.com/krakjoe/pthreads/pull/582,https://github.com/hfedcba,1,https://github.com/krakjoe/pthreads/pull/582,"Hey,
as discussed in issue #557 here is the pull request to add the open source project Homegear to your SAPI whitelist 😉. You can find the source code here: https://github.com/Homegear/Homegear. The source code for the script engine can be found in the subdirectory src/ScriptEngine. The script engine itself runs in a seperate process for stability reasons (class ScriptEngineClient), which communicates with the main process (class ScriptEngineServer). The SAPI implementation is in php_sapi.cpp. The function reference is on https://ref.homegear.eu/php.html (only the PHP reference is complete - I'm currently working on the other parts). You can find an example PHP script using pthreads on https://github.com/Homegear/Homegear-OpenWeatherMap/blob/master/OpenWeatherMap.xml or in the reference: https://ref.homegear.eu/php.html#HomegearpollEvent.
Thank you 😃!
Best regards,
Sathya","Hey,
as discussed in issue #557 here is the pull request to add the open source project Homegear to your SAPI whitelist 😉. You can find the source code here: https://github.com/Homegear/Homegear. The source code for the script engine can be found in the subdirectory src/ScriptEngine. The script engine itself runs in a seperate process for stability reasons (class ScriptEngineClient), which communicates with the main process (class ScriptEngineServer). The SAPI implementation is in php_sapi.cpp. The function reference is on https://ref.homegear.eu/php.html (only the PHP reference is complete - I'm currently working on the other parts). You can find an example PHP script using pthreads on https://github.com/Homegear/Homegear-OpenWeatherMap/blob/master/OpenWeatherMap.xml or in the reference: https://ref.homegear.eu/php.html#HomegearpollEvent.
Thank you 😃!
Best regards,
Sathya",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,582,2016-03-28T12:39:06Z,2016-05-27T13:17:32Z,2016-05-27T13:23:35Z,MERGED,True,1,0,1,https://github.com/hfedcba,Added Homegear to SAPI whitelist,1,[],https://github.com/krakjoe/pthreads/pull/582,https://github.com/hfedcba,2,https://github.com/krakjoe/pthreads/pull/582#issuecomment-222145015,"Hey,
as discussed in issue #557 here is the pull request to add the open source project Homegear to your SAPI whitelist 😉. You can find the source code here: https://github.com/Homegear/Homegear. The source code for the script engine can be found in the subdirectory src/ScriptEngine. The script engine itself runs in a seperate process for stability reasons (class ScriptEngineClient), which communicates with the main process (class ScriptEngineServer). The SAPI implementation is in php_sapi.cpp. The function reference is on https://ref.homegear.eu/php.html (only the PHP reference is complete - I'm currently working on the other parts). You can find an example PHP script using pthreads on https://github.com/Homegear/Homegear-OpenWeatherMap/blob/master/OpenWeatherMap.xml or in the reference: https://ref.homegear.eu/php.html#HomegearpollEvent.
Thank you 😃!
Best regards,
Sathya",Thank you 😃!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,608,2016-06-29T12:15:09Z,2016-06-29T12:17:27Z,2016-06-29T12:18:39Z,CLOSED,False,1,1,1,https://github.com/stefanopini,Windows Installation Error,1,[],https://github.com/krakjoe/pthreads/pull/608,https://github.com/stefanopini,1,https://github.com/krakjoe/pthreads/pull/608,"In Windows, the dll pthreadVC2.dll must be put into the Apache\Bin folder in order to work, otherwise the php extension will not be loaded.
Tip found here: http://stackoverflow.com/a/36160612/5260309","In Windows, the dll pthreadVC2.dll must be put into the Apache\Bin folder in order to work, otherwise the php extension will not be loaded.
Tip found here: http://stackoverflow.com/a/36160612/5260309",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,609,2016-06-29T12:25:22Z,2016-06-30T05:54:27Z,2016-07-01T19:01:08Z,CLOSED,False,2,1,1,https://github.com/stefanopini,Windows Installation Error,1,[],https://github.com/krakjoe/pthreads/pull/609,https://github.com/stefanopini,1,https://github.com/krakjoe/pthreads/pull/609,"In Windows, the dll pthreadVC2.dll must be put into the Apache\Bin folder in order to work, otherwise the php extension will not be loaded.
Tip found here: http://stackoverflow.com/a/36160612/5260309
Added the step needed to enable the php extension.","In Windows, the dll pthreadVC2.dll must be put into the Apache\Bin folder in order to work, otherwise the php extension will not be loaded.
Tip found here: http://stackoverflow.com/a/36160612/5260309
Added the step needed to enable the php extension.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,609,2016-06-29T12:25:22Z,2016-06-30T05:54:27Z,2016-07-01T19:01:08Z,CLOSED,False,2,1,1,https://github.com/stefanopini,Windows Installation Error,1,[],https://github.com/krakjoe/pthreads/pull/609,https://github.com/krakjoe,2,https://github.com/krakjoe/pthreads/pull/609#issuecomment-229566101,"In Windows, the dll pthreadVC2.dll must be put into the Apache\Bin folder in order to work, otherwise the php extension will not be loaded.
Tip found here: http://stackoverflow.com/a/36160612/5260309
Added the step needed to enable the php extension.",Apache has nothing to do with PHP.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,609,2016-06-29T12:25:22Z,2016-06-30T05:54:27Z,2016-07-01T19:01:08Z,CLOSED,False,2,1,1,https://github.com/stefanopini,Windows Installation Error,1,[],https://github.com/krakjoe/pthreads/pull/609,https://github.com/stefanopini,3,https://github.com/krakjoe/pthreads/pull/609#issuecomment-230024024,"In Windows, the dll pthreadVC2.dll must be put into the Apache\Bin folder in order to work, otherwise the php extension will not be loaded.
Tip found here: http://stackoverflow.com/a/36160612/5260309
Added the step needed to enable the php extension.","I know, but it works instead doing as you wrote doesn't work. Make a try if you don't trust...
My platform: Windows 8.1 x64, Apache 2.4, PHP 5.6 thread safe",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,634,2016-11-10T09:09:12Z,2016-11-11T12:46:17Z,2016-11-11T12:49:55Z,MERGED,True,53,148,6,https://github.com/tpunt,Refactor,11,[],https://github.com/krakjoe/pthreads/pull/634,https://github.com/tpunt,1,https://github.com/krakjoe/pthreads/pull/634,"Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.","Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.",True,{'THUMBS_UP': ['https://github.com/krakjoe']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,634,2016-11-10T09:09:12Z,2016-11-11T12:46:17Z,2016-11-11T12:49:55Z,MERGED,True,53,148,6,https://github.com/tpunt,Refactor,11,[],https://github.com/krakjoe/pthreads/pull/634,https://github.com/krakjoe,2,https://github.com/krakjoe/pthreads/pull/634#issuecomment-259639222,"Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.","At a glance, looks good ... will review properly later on today ...
Thanks :)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,634,2016-11-10T09:09:12Z,2016-11-11T12:46:17Z,2016-11-11T12:49:55Z,MERGED,True,53,148,6,https://github.com/tpunt,Refactor,11,[],https://github.com/krakjoe/pthreads/pull/634,https://github.com/krakjoe,3,https://github.com/krakjoe/pthreads/pull/634#issuecomment-259745448,"Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.","Can you build in debug mode and have a look at this:
I'll have time to look myself sometime tomorrow, but thought you'd like to have a go ;)
=====================================================================
FAILED TEST SUMMARY
---------------------------------------------------------------------
Testing class statics properties (gh bug #570) [tests/class-static-properties.phpt]
=====================================================================

---- EXPECTED OUTPUT
string(3) ""one""
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
array(2) {
  [0]=>
  array(3) {
    [0]=>
    int(1)
    [1]=>
    int(2)
    [2]=>
    int(3)
  }
  [1]=>
  array(3) {
    [0]=>
    int(4)
    [1]=>
    int(5)
    [2]=>
    int(6)
  }
}
object(Threaded)#1 (0) {
}
NULL
object(Closure)#2 (0) {
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
NULL
array(0) {
}
array(2) {
  [0]=>
  object(Threaded)#3 (0) {
  }
  [2]=>
  array(2) {
    [0]=>
    object(Threaded)#4 (0) {
    }
    [2]=>
    array(1) {
      [0]=>
      object(Threaded)#5 (0) {
      }
    }
  }
}
---- ACTUAL OUTPUT
string(3) ""one""
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
array(2) {
  [0]=>
  array(3) {
    [0]=>
    int(1)
    [1]=>
    int(2)
    [2]=>
    int(3)
  }
  [1]=>
  array(3) {
    [0]=>
    int(4)
    [1]=>
    int(5)
    [2]=>
    int(6)
  }
}
object(Threaded)#1 (0) {
}
NULL
object(Closure)#2 (0) {
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
NULL
array(0) {
}
array(2) {
  [0]=>
  object(Threaded)#3 (0) {
  }
  [2]=>
  array(2) {
    [0]=>
    object(Threaded)#4 (0) {
    }
    [2]=>
    array(1) {
      [0]=>
      object(Threaded)#5 (0) {
      }
    }
  }
}
[Thu Nov 10 16:57:15 2016]  Script:  '/usr/src/pthreads/tests/class-static-properties.php'
/usr/src/php-src/Zend/zend_API.c(1059) :  Freeing 0x2B7B888023C0 (56 bytes), script=/usr/src/pthreads/tests/class-static-properties.php
Last leak repeated 1 time
[Thu Nov 10 16:57:15 2016]  Script:  '/usr/src/pthreads/tests/class-static-properties.php'
/usr/src/php-src/Zend/zend_vm_execute.h(19624) :  Freeing 0x2B7B88802660 (56 bytes), script=/usr/src/pthreads/tests/class-static-properties.php
Last leak repeated 1 time
[Thu Nov 10 16:57:15 2016]  Script:  '/usr/src/pthreads/tests/class-static-properties.php'
/usr/src/php-src/Zend/zend_hash.c(135) :  Freeing 0x2B7B88860DC0 (264 bytes), script=/usr/src/pthreads/tests/class-static-properties.php
Last leak repeated 3 times
[Thu Nov 10 16:57:15 2016]  Script:  '/usr/src/pthreads/tests/class-static-properties.php'
/usr/src/php-src/Zend/zend_objects.c(162) :  Freeing 0x2B7B88865CD0 (40 bytes), script=/usr/src/pthreads/tests/class-static-properties.php
Last leak repeated 1 time
[Thu Nov 10 16:57:15 2016]  Script:  '/usr/src/pthreads/tests/class-static-properties.php'
/usr/src/pthreads/src/globals.c(77) :  Freeing 0x2B7B8887A280 (128 bytes), script=/usr/src/pthreads/tests/class-static-properties.php
/usr/src/php-src/Zend/zend_alloc.c(2505) : Actual location (location was relayed)
Last leak repeated 1 time",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,634,2016-11-10T09:09:12Z,2016-11-11T12:46:17Z,2016-11-11T12:49:55Z,MERGED,True,53,148,6,https://github.com/tpunt,Refactor,11,[],https://github.com/krakjoe/pthreads/pull/634,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/634#issuecomment-259825671,"Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.","I didn't have time to look into this tonight, but I should have some time tomorrow morning to (if you don't beat me to it) :)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,634,2016-11-10T09:09:12Z,2016-11-11T12:46:17Z,2016-11-11T12:49:55Z,MERGED,True,53,148,6,https://github.com/tpunt,Refactor,11,[],https://github.com/krakjoe/pthreads/pull/634,https://github.com/tpunt,5,https://github.com/krakjoe/pthreads/pull/634#issuecomment-259947991,"Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.","Regarding the memory leak, what's wrong with simply decrementing pzval's refcount by one in pthreads_store_remove_complex?
--GC_REFCOUNT(Z_COUNTED_P(pzval));",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,634,2016-11-10T09:09:12Z,2016-11-11T12:46:17Z,2016-11-11T12:49:55Z,MERGED,True,53,148,6,https://github.com/tpunt,Refactor,11,[],https://github.com/krakjoe/pthreads/pull/634,https://github.com/krakjoe,6,https://github.com/krakjoe/pthreads/pull/634#issuecomment-259949781,"Hi Joe!
I've done a little refactoring on parts of pthreads. Nothing seems to be broken by these changes, which focus on removing redundant logic and centralising logic to prevent repetition. All changes are self-contained in individual commits, so if there are any changes you disagree with, then the others can simply be cherry-picked instead.","My mistake, I thought this introduced the leak for some reason ... it's nothing whatever to do with these changes ...
/* TODO(krakjoe) leaks */

If you want to open another PR for that suggestion above, looks fine to me ...",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,635,2016-11-11T13:08:43Z,2016-12-11T16:03:46Z,2016-12-11T16:03:46Z,CLOSED,False,2,1,1,https://github.com/tpunt,Fix memory leak,1,[],https://github.com/krakjoe/pthreads/pull/635,https://github.com/tpunt,1,https://github.com/krakjoe/pthreads/pull/635,"Here's the fix, as mentioned in #634.","Here's the fix, as mentioned in #634.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,635,2016-11-11T13:08:43Z,2016-12-11T16:03:46Z,2016-12-11T16:03:46Z,CLOSED,False,2,1,1,https://github.com/tpunt,Fix memory leak,1,[],https://github.com/krakjoe/pthreads/pull/635,https://github.com/krakjoe,2,https://github.com/krakjoe/pthreads/pull/635#issuecomment-259958215,"Here's the fix, as mentioned in #634.","Ah now no-debug faults, I'll have to have a closer look (if you don't beat me too it) ...",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,635,2016-11-11T13:08:43Z,2016-12-11T16:03:46Z,2016-12-11T16:03:46Z,CLOSED,False,2,1,1,https://github.com/tpunt,Fix memory leak,1,[],https://github.com/krakjoe/pthreads/pull/635,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/635#issuecomment-260038545,"Here's the fix, as mentioned in #634.","Well that's just irritating ^^. I didn't have much time to look deeper into this today, but I may be able to over the weekend, if you don't find a fix first :).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,635,2016-11-11T13:08:43Z,2016-12-11T16:03:46Z,2016-12-11T16:03:46Z,CLOSED,False,2,1,1,https://github.com/tpunt,Fix memory leak,1,[],https://github.com/krakjoe/pthreads/pull/635,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/635#issuecomment-266290148,"Here's the fix, as mentioned in #634.","I haven't managed to make much progress on this, so I'll close this for now.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,645,2016-12-12T12:38:32Z,2017-01-01T09:31:23Z,2017-01-01T09:31:23Z,CLOSED,False,498,11,13,https://github.com/cmyker,Synchronized queue functionality,1,[],https://github.com/krakjoe/pthreads/pull/645,https://github.com/cmyker,1,https://github.com/krakjoe/pthreads/pull/645,"First of all thanks you Joe for making it possible.
I've already developed an experimental application, use it on production, works great!
But what was quite hard to implement is an ability to simply exchange the data between threads and main, or between different threads.
Mainly it is hard to maintain a refcount to the data you need to pass to the other threads and especially if you have a lot of data to exchange. Good example would be that several threads are asynchronously querying to some web service and main is processing the results (see Queue.php in examples folder).
What I was particularly missing is something similar to python's Queue https://docs.python.org/2/library/queue.html
Keeping in mind that each thread has its own memory manager and the data that thread is passed to other threads or main is allocated dynamically inside that thread, and will be gone after thread is finished or the reference is gone, I came up to the simple solution:

store data out of zend memory manager, in the regular heap
serialize the data that is pushed to the queue, copy that data to the memory allocated in heap, clean up memory that was allocated in zend_mm for serialization
unserialize data when other thread is poping it out (thus after that it is in the thread's address space), clean up memory allocated in heap
make it thread safe, thus easy to use in userland, take care of synchronization in C code
on object destruction free allocated in heap heap memory if something is left

I was also trying to maintain your code style and stick to the similar design.","First of all thanks you Joe for making it possible.
I've already developed an experimental application, use it on production, works great!
But what was quite hard to implement is an ability to simply exchange the data between threads and main, or between different threads.
Mainly it is hard to maintain a refcount to the data you need to pass to the other threads and especially if you have a lot of data to exchange. Good example would be that several threads are asynchronously querying to some web service and main is processing the results (see Queue.php in examples folder).
What I was particularly missing is something similar to python's Queue https://docs.python.org/2/library/queue.html
Keeping in mind that each thread has its own memory manager and the data that thread is passed to other threads or main is allocated dynamically inside that thread, and will be gone after thread is finished or the reference is gone, I came up to the simple solution:

store data out of zend memory manager, in the regular heap
serialize the data that is pushed to the queue, copy that data to the memory allocated in heap, clean up memory that was allocated in zend_mm for serialization
unserialize data when other thread is poping it out (thus after that it is in the thread's address space), clean up memory allocated in heap
make it thread safe, thus easy to use in userland, take care of synchronization in C code
on object destruction free allocated in heap heap memory if something is left

I was also trying to maintain your code style and stick to the similar design.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,645,2016-12-12T12:38:32Z,2017-01-01T09:31:23Z,2017-01-01T09:31:23Z,CLOSED,False,498,11,13,https://github.com/cmyker,Synchronized queue functionality,1,[],https://github.com/krakjoe/pthreads/pull/645,https://github.com/krakjoe,2,https://github.com/krakjoe/pthreads/pull/645#issuecomment-266472198,"First of all thanks you Joe for making it possible.
I've already developed an experimental application, use it on production, works great!
But what was quite hard to implement is an ability to simply exchange the data between threads and main, or between different threads.
Mainly it is hard to maintain a refcount to the data you need to pass to the other threads and especially if you have a lot of data to exchange. Good example would be that several threads are asynchronously querying to some web service and main is processing the results (see Queue.php in examples folder).
What I was particularly missing is something similar to python's Queue https://docs.python.org/2/library/queue.html
Keeping in mind that each thread has its own memory manager and the data that thread is passed to other threads or main is allocated dynamically inside that thread, and will be gone after thread is finished or the reference is gone, I came up to the simple solution:

store data out of zend memory manager, in the regular heap
serialize the data that is pushed to the queue, copy that data to the memory allocated in heap, clean up memory that was allocated in zend_mm for serialization
unserialize data when other thread is poping it out (thus after that it is in the thread's address space), clean up memory allocated in heap
make it thread safe, thus easy to use in userland, take care of synchronization in C code
on object destruction free allocated in heap heap memory if something is left

I was also trying to maintain your code style and stick to the similar design.","This looks quite nice.
I haven't built it yet, will have time in the coming days to review it properly ... I have had a look over it though, follows are some thoughts ...
I'm a bit confused as to how this is different to the queue functionality built into Threaded objects, perhaps you could explain that ?
I can see that it's simpler in some ways, but it still seems to duplicate some functionality, and I'm just not sure why, perhaps I'm missing something obvious ?
pthreads doesn't serialize scalars, it's too wasteful.
There's not enough tests, there needs to be tests that actually use threads too.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,645,2016-12-12T12:38:32Z,2017-01-01T09:31:23Z,2017-01-01T09:31:23Z,CLOSED,False,498,11,13,https://github.com/cmyker,Synchronized queue functionality,1,[],https://github.com/krakjoe/pthreads/pull/645,https://github.com/cmyker,3,https://github.com/krakjoe/pthreads/pull/645#issuecomment-266477356,"First of all thanks you Joe for making it possible.
I've already developed an experimental application, use it on production, works great!
But what was quite hard to implement is an ability to simply exchange the data between threads and main, or between different threads.
Mainly it is hard to maintain a refcount to the data you need to pass to the other threads and especially if you have a lot of data to exchange. Good example would be that several threads are asynchronously querying to some web service and main is processing the results (see Queue.php in examples folder).
What I was particularly missing is something similar to python's Queue https://docs.python.org/2/library/queue.html
Keeping in mind that each thread has its own memory manager and the data that thread is passed to other threads or main is allocated dynamically inside that thread, and will be gone after thread is finished or the reference is gone, I came up to the simple solution:

store data out of zend memory manager, in the regular heap
serialize the data that is pushed to the queue, copy that data to the memory allocated in heap, clean up memory that was allocated in zend_mm for serialization
unserialize data when other thread is poping it out (thus after that it is in the thread's address space), clean up memory allocated in heap
make it thread safe, thus easy to use in userland, take care of synchronization in C code
on object destruction free allocated in heap heap memory if something is left

I was also trying to maintain your code style and stick to the similar design.","I'm a bit confused as to how this is different to the queue functionality built into Threaded objects, perhaps you could explain that ?

Sorry my bad, now watching closer to the store functionality I see that actually I did is the same ((( and appears spent time for nothing.
Why I did it in the first place - I was experiencing frequent segfaults, and switching data exchange to the external queue engine (Redis) eliminated those, that is why I thought it would be nice to have such a queue built-in, with no external dependencies...
Does it makes any sense to improve it to the point that you would accept it? Or that is a pure duplicate and don't worth to continue with?",True,{'CONFUSED': ['https://github.com/cmyker']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,645,2016-12-12T12:38:32Z,2017-01-01T09:31:23Z,2017-01-01T09:31:23Z,CLOSED,False,498,11,13,https://github.com/cmyker,Synchronized queue functionality,1,[],https://github.com/krakjoe/pthreads/pull/645,https://github.com/cmyker,4,https://github.com/krakjoe/pthreads/pull/645#issuecomment-266487939,"First of all thanks you Joe for making it possible.
I've already developed an experimental application, use it on production, works great!
But what was quite hard to implement is an ability to simply exchange the data between threads and main, or between different threads.
Mainly it is hard to maintain a refcount to the data you need to pass to the other threads and especially if you have a lot of data to exchange. Good example would be that several threads are asynchronously querying to some web service and main is processing the results (see Queue.php in examples folder).
What I was particularly missing is something similar to python's Queue https://docs.python.org/2/library/queue.html
Keeping in mind that each thread has its own memory manager and the data that thread is passed to other threads or main is allocated dynamically inside that thread, and will be gone after thread is finished or the reference is gone, I came up to the simple solution:

store data out of zend memory manager, in the regular heap
serialize the data that is pushed to the queue, copy that data to the memory allocated in heap, clean up memory that was allocated in zend_mm for serialization
unserialize data when other thread is poping it out (thus after that it is in the thread's address space), clean up memory allocated in heap
make it thread safe, thus easy to use in userland, take care of synchronization in C code
on object destruction free allocated in heap heap memory if something is left

I was also trying to maintain your code style and stick to the similar design.",Generally it would be nice to have such a class as python and ruby have... More obvious since this is a very common design pattern and also a possibility to provide a blocking queue API with pthread_cond_wait family in the future,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,645,2016-12-12T12:38:32Z,2017-01-01T09:31:23Z,2017-01-01T09:31:23Z,CLOSED,False,498,11,13,https://github.com/cmyker,Synchronized queue functionality,1,[],https://github.com/krakjoe/pthreads/pull/645,https://github.com/krakjoe,5,https://github.com/krakjoe/pthreads/pull/645#issuecomment-269896916,"First of all thanks you Joe for making it possible.
I've already developed an experimental application, use it on production, works great!
But what was quite hard to implement is an ability to simply exchange the data between threads and main, or between different threads.
Mainly it is hard to maintain a refcount to the data you need to pass to the other threads and especially if you have a lot of data to exchange. Good example would be that several threads are asynchronously querying to some web service and main is processing the results (see Queue.php in examples folder).
What I was particularly missing is something similar to python's Queue https://docs.python.org/2/library/queue.html
Keeping in mind that each thread has its own memory manager and the data that thread is passed to other threads or main is allocated dynamically inside that thread, and will be gone after thread is finished or the reference is gone, I came up to the simple solution:

store data out of zend memory manager, in the regular heap
serialize the data that is pushed to the queue, copy that data to the memory allocated in heap, clean up memory that was allocated in zend_mm for serialization
unserialize data when other thread is poping it out (thus after that it is in the thread's address space), clean up memory allocated in heap
make it thread safe, thus easy to use in userland, take care of synchronization in C code
on object destruction free allocated in heap heap memory if something is left

I was also trying to maintain your code style and stick to the similar design.","I'm going to say it doesn't really make sense to merge this, sorry about that.
Please do open bug reports that produce the faults you mentioned, and I appreciate you taking the time and effort to try something.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,653,2017-01-07T21:51:26Z,2017-01-07T21:54:14Z,2017-01-07T21:54:14Z,MERGED,True,49,48,1,https://github.com/tpunt,Update stub,1,[],https://github.com/krakjoe/pthreads/pull/653,https://github.com/tpunt,1,https://github.com/krakjoe/pthreads/pull/653,Updated the stub for pthreads v3,Updated the stub for pthreads v3,True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,654,2017-01-08T09:58:50Z,2017-01-08T12:41:22Z,2017-01-08T12:41:23Z,MERGED,True,8,15,1,https://github.com/tpunt,update readme,1,[],https://github.com/krakjoe/pthreads/pull/654,https://github.com/tpunt,1,https://github.com/krakjoe/pthreads/pull/654,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,661,2017-01-16T23:49:02Z,2017-01-17T07:34:15Z,2017-01-17T07:34:15Z,MERGED,True,19,18,1,https://github.com/Stricted,update .travis.yml,1,[],https://github.com/krakjoe/pthreads/pull/661,https://github.com/Stricted,1,https://github.com/krakjoe/pthreads/pull/661,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,663,2017-01-20T19:29:11Z,2017-01-20T20:06:47Z,2017-01-20T20:06:47Z,MERGED,True,1,1,1,https://github.com/pgbezerra,Fix pool test,1,[],https://github.com/krakjoe/pthreads/pull/663,https://github.com/pgbezerra,1,https://github.com/krakjoe/pthreads/pull/663,The variable protected is incorrect and the correct logger variable is created as public.,The variable protected is incorrect and the correct logger variable is created as public.,True,{'THUMBS_UP': ['https://github.com/krakjoe']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,668,2017-01-25T16:29:30Z,2017-06-13T20:50:56Z,2017-06-13T20:54:22Z,CLOSED,False,56,18,1,https://github.com/pgbezerra,Enhance Pool example to show garbage collector getting array,1,[],https://github.com/krakjoe/pthreads/pull/668,https://github.com/pgbezerra,1,https://github.com/krakjoe/pthreads/pull/668,"This is a complement to be more easy to see the needed of casting the
\Thread class variable to array to be possible recover by collector.
@krakjoe, sorry for posting some error in another user's thread. I discovered my problem and here I put some contribution to Pool example.
This was possible because of this issue: #610.
Thank you!","This is a complement to be more easy to see the needed of casting the
\Thread class variable to array to be possible recover by collector.
@krakjoe, sorry for posting some error in another user's thread. I discovered my problem and here I put some contribution to Pool example.
This was possible because of this issue: #610.
Thank you!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,668,2017-01-25T16:29:30Z,2017-06-13T20:50:56Z,2017-06-13T20:54:22Z,CLOSED,False,56,18,1,https://github.com/pgbezerra,Enhance Pool example to show garbage collector getting array,1,[],https://github.com/krakjoe/pthreads/pull/668,https://github.com/pgbezerra,2,https://github.com/krakjoe/pthreads/pull/668#issuecomment-275675230,"This is a complement to be more easy to see the needed of casting the
\Thread class variable to array to be possible recover by collector.
@krakjoe, sorry for posting some error in another user's thread. I discovered my problem and here I put some contribution to Pool example.
This was possible because of this issue: #610.
Thank you!","I forgot to check if the garbage variable is complete.
It is updated now.
Thank you!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,668,2017-01-25T16:29:30Z,2017-06-13T20:50:56Z,2017-06-13T20:54:22Z,CLOSED,False,56,18,1,https://github.com/pgbezerra,Enhance Pool example to show garbage collector getting array,1,[],https://github.com/krakjoe/pthreads/pull/668,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/668#issuecomment-308244619,"This is a complement to be more easy to see the needed of casting the
\Thread class variable to array to be possible recover by collector.
@krakjoe, sorry for posting some error in another user's thread. I discovered my problem and here I put some contribution to Pool example.
This was possible because of this issue: #610.
Thank you!","I don't think these additions are something we want to show. It relies on the garbage collector to fetch data, which simply isn't a reliable thing to do, since its behaviour is not deterministic.
You also mentioned that it is not possible to fetch the (array-based) data if it has been converted into a Volatile object (which is also a Threaded object) - this isn't really true. Threaded objects are tied to the context in which they are created. This means that if data is going to be stored inside of a Volatile object (from the implicit coercion of an array, for example), then that object should be created in the outer-most scope in which it will be used (in this case, the main thread).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,668,2017-01-25T16:29:30Z,2017-06-13T20:50:56Z,2017-06-13T20:54:22Z,CLOSED,False,56,18,1,https://github.com/pgbezerra,Enhance Pool example to show garbage collector getting array,1,[],https://github.com/krakjoe/pthreads/pull/668,https://github.com/pgbezerra,4,https://github.com/krakjoe/pthreads/pull/668#issuecomment-308245563,"This is a complement to be more easy to see the needed of casting the
\Thread class variable to array to be possible recover by collector.
@krakjoe, sorry for posting some error in another user's thread. I discovered my problem and here I put some contribution to Pool example.
This was possible because of this issue: #610.
Thank you!","ok, thanks for explanation, @tpunt.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,669,2017-01-30T00:11:35Z,2017-02-28T10:43:08Z,2017-02-28T10:43:08Z,CLOSED,False,113,24,5,https://github.com/sirsnyder,#666 fix Warning: Class __PHP_Incomplete_Class has no unserializer in…,3,[],https://github.com/krakjoe/pthreads/pull/669,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/669,"… Unknown on line 0
It's just an idea, how this issue could get fixed.","… Unknown on line 0
It's just an idea, how this issue could get fixed.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,675,2017-02-08T06:40:28Z,2017-06-13T16:51:43Z,2017-06-23T12:06:53Z,CLOSED,False,39,0,1,https://github.com/c9s,Add failing test case for #674,1,[],https://github.com/krakjoe/pthreads/pull/675,https://github.com/c9s,1,https://github.com/krakjoe/pthreads/pull/675,This is the failing test case for #674,This is the failing test case for #674,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,675,2017-02-08T06:40:28Z,2017-06-13T16:51:43Z,2017-06-23T12:06:53Z,CLOSED,False,39,0,1,https://github.com/c9s,Add failing test case for #674,1,[],https://github.com/krakjoe/pthreads/pull/675,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/675#issuecomment-308179524,This is the failing test case for #674,"As Joe mentioned on the issue, the example is simply outdated. I noticed the following things wrong with the test snippet you gave:

You are creating the results array inside of the new thread. This array is implicitly casted to a Volatile object (a Threaded object), which means it is tied to the Job object. When this object has finished running, the result (Volatile) object will be destroyed, causing pthreads to throw a RuntimeException when trying to access it. To prevent this from happening, it should be created in the constructor (and therefore by the main thread).
There's no need to define the isGarbage method.
The worker object should not be joined - in particular, you are attempting to collect its garbage and shut it down again afterwards.

I'd rewrite your example test as follows:
<?php

class Job extends Threaded
{
    public $result;

    public function __construct()
    {
        $this->result = new Volatile(); // create this in the outer most thread that it is needed
    }

    public function run()
    {
        $this->result[] = 1;
        $this->result[] = 2;
        $this->result[] = 3;
        $this->result[] = 4;
    }

    public function getResult()
    {
        return $this->result;
    }
}

$worker = new Worker;
$worker->start();
$jobs = [];

for ($i = 0; $i < 4; ++$i) {
    $worker->stack($jobs[] = new Job());
}

while ($worker->collect()); // collect the garbage to free memory used

$worker->shutdown(); // shutdown the worker to make sure it has completely finished before attempting to access job results

foreach ($jobs as $job) {
    print_r($job->getResult());
}
Given that this is being tracked in your other issue, I'm closing this PR.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,675,2017-02-08T06:40:28Z,2017-06-13T16:51:43Z,2017-06-23T12:06:53Z,CLOSED,False,39,0,1,https://github.com/c9s,Add failing test case for #674,1,[],https://github.com/krakjoe/pthreads/pull/675,https://github.com/c9s,3,https://github.com/krakjoe/pthreads/pull/675#issuecomment-310648594,This is the failing test case for #674,"Thank you
…
On Wed, Jun 14, 2017 at 12:51 AM, Thomas Punt ***@***.***> wrote:
 As Joe mentioned on the issue, the example is simply outdated. I noticed
 the following things wrong with the test snippet you gave:

    - You are creating the results array inside of the new thread. This
    array is implicitly casted to a Volatile object (a Threaded object),
    which means it is tied to the Job object. When this object has
    finished running, the result (Volatile) object will be destroyed,
    causing pthreads to throw a RuntimeException when trying to access it.
    To prevent this from happening, it should be created in the constructor
    (and therefore by the main thread).
    - There's no need to define the isGarbage method.
    - The worker object should not be joined - in particular, you are
    attempting to collect its garbage and shut it down again afterwards.

 I'd rewrite your example test as follows:

 <?phpclass Job extends Threaded{    public $result;    public function __construct()    {        $this->result = new Volatile(); // create this in the outer most thread that it is needed    }    public function run()    {        $this->result[] = 1;        $this->result[] = 2;        $this->result[] = 3;        $this->result[] = 4;    }    public function getResult()    {        return $this->result;    }}$worker = new Worker;$worker->start();$jobs = [];for ($i = 0; $i < 4; ++$i) {    $worker->stack($jobs[] = new Job());}while ($worker->collect()); // collect the garbage to free memory used$worker->shutdown(); // shutdown the worker to make sure it has completely finished before attempting to access job resultsforeach ($jobs as $job) {    print_r($job->getResult());}

 Given that this is being tracked in your other issue, I'm closing this PR.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#675 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AADGzlNzB9IqXnWKvbenV26I3ggaWsbZks5sDr4ugaJpZM4L6cI_>
 .",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,682,2017-02-23T23:37:34Z,2017-03-02T00:48:36Z,2017-03-02T00:48:36Z,CLOSED,False,39,1,2,https://github.com/sirsnyder,#666 - don't override creator TSRMLS,1,[],https://github.com/krakjoe/pthreads/pull/682,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/682,"@krakjoe please review and merge
@tpunt thx for your support","@krakjoe please review and merge
@tpunt thx for your support",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,683,2017-03-02T00:50:05Z,2017-06-03T17:51:32Z,2017-08-23T11:59:55Z,MERGED,True,103,24,4,https://github.com/sirsnyder,#666 fix Warning: Class __PHP_Incomplete_Class has no unserializer in…,1,[],https://github.com/krakjoe/pthreads/pull/683,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/683,… Unknown on line 0,… Unknown on line 0,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,683,2017-03-02T00:50:05Z,2017-06-03T17:51:32Z,2017-08-23T11:59:55Z,MERGED,True,103,24,4,https://github.com/sirsnyder,#666 fix Warning: Class __PHP_Incomplete_Class has no unserializer in…,1,[],https://github.com/krakjoe/pthreads/pull/683,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/683#issuecomment-305004286,… Unknown on line 0,"This doesn't cover all cases, it seems. For example, the following errors:
class SecondClass extends FirstClass {}
class FirstClass extends \Threaded
{
	public static $prop = [];
}
FirstClass::$prop[] = new SecondClass();
$thread = new class extends Thread {
    public function run() {
        var_dump(FirstClass::$prop);
    }
};
$thread->start() && $thread->join();
This can easily be changed by not copying the statics when preparing parent classes in pthreads_copy_entry:
prepared->parent = pthreads_prepared_entry_internal(thread, candidate->parent, 0);
There could be other edge cases around the preparing of classes, but I haven't had the time to check for them.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,683,2017-03-02T00:50:05Z,2017-06-03T17:51:32Z,2017-08-23T11:59:55Z,MERGED,True,103,24,4,https://github.com/sirsnyder,#666 fix Warning: Class __PHP_Incomplete_Class has no unserializer in…,1,[],https://github.com/krakjoe/pthreads/pull/683,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/683#issuecomment-305904372,… Unknown on line 0,@tpunt both fixed and I've added your example as test.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,683,2017-03-02T00:50:05Z,2017-06-03T17:51:32Z,2017-08-23T11:59:55Z,MERGED,True,103,24,4,https://github.com/sirsnyder,#666 fix Warning: Class __PHP_Incomplete_Class has no unserializer in…,1,[],https://github.com/krakjoe/pthreads/pull/683,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/683#issuecomment-305990853,… Unknown on line 0,"Merged, thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,684,2017-03-02T00:55:52Z,2017-05-28T20:29:18Z,2017-08-23T11:57:26Z,MERGED,True,2,2,1,https://github.com/sirsnyder,fix usources size,1,[],https://github.com/krakjoe/pthreads/pull/684,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/684,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,684,2017-03-02T00:55:52Z,2017-05-28T20:29:18Z,2017-08-23T11:57:26Z,MERGED,True,2,2,1,https://github.com/sirsnyder,fix usources size,1,[],https://github.com/krakjoe/pthreads/pull/684,https://github.com/pp3345,2,https://github.com/krakjoe/pthreads/pull/684#issuecomment-284157916,,Wouldn't it be better to use macros for this instead of a do-while loop?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,684,2017-03-02T00:55:52Z,2017-05-28T20:29:18Z,2017-08-23T11:57:26Z,MERGED,True,2,2,1,https://github.com/sirsnyder,fix usources size,1,[],https://github.com/krakjoe/pthreads/pull/684,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/684#issuecomment-304538257,,Merged in a83eca3. Thanks!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,685,2017-03-02T01:02:40Z,2017-06-13T15:44:40Z,2017-08-23T11:59:50Z,MERGED,True,41,2,2,https://github.com/sirsnyder,#666 - don't override creator TSRMLS,1,[],https://github.com/krakjoe/pthreads/pull/685,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/685,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,685,2017-03-02T01:02:40Z,2017-06-13T15:44:40Z,2017-08-23T11:59:50Z,MERGED,True,41,2,2,https://github.com/sirsnyder,#666 - don't override creator TSRMLS,1,[],https://github.com/krakjoe/pthreads/pull/685,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/685#issuecomment-304607918,,"Declaration is now on top of block, ok?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,685,2017-03-02T01:02:40Z,2017-06-13T15:44:40Z,2017-08-23T11:59:50Z,MERGED,True,41,2,2,https://github.com/sirsnyder,#666 - don't override creator TSRMLS,1,[],https://github.com/krakjoe/pthreads/pull/685,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/685#issuecomment-306000717,,"Other than my single comment above, this looks good to me.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,685,2017-03-02T01:02:40Z,2017-06-13T15:44:40Z,2017-08-23T11:59:50Z,MERGED,True,41,2,2,https://github.com/sirsnyder,#666 - don't override creator TSRMLS,1,[],https://github.com/krakjoe/pthreads/pull/685,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/685#issuecomment-306604036,,"@tpunt oh, yes of course. updated",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,685,2017-03-02T01:02:40Z,2017-06-13T15:44:40Z,2017-08-23T11:59:50Z,MERGED,True,41,2,2,https://github.com/sirsnyder,#666 - don't override creator TSRMLS,1,[],https://github.com/krakjoe/pthreads/pull/685,https://github.com/tpunt,5,https://github.com/krakjoe/pthreads/pull/685#issuecomment-308160122,,"Merged, thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/686,"anonymous class support, fix #505 #658 #659","anonymous class support, fix #505 #658 #659",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/686#issuecomment-285096050,"anonymous class support, fix #505 #658 #659",This PR shouldn't have commits from other PRs in it - it just makes it a lot harder to review.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/686#issuecomment-285178857,"anonymous class support, fix #505 #658 #659",Other PRs removed,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/686#issuecomment-307568241,"anonymous class support, fix #505 #658 #659",@sirsnyder Can you rebase this please? I hope to review it again sometime this weekend.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/686#issuecomment-307599240,"anonymous class support, fix #505 #658 #659",@tpunt rebased.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/krakjoe,6,https://github.com/krakjoe/pthreads/pull/686#issuecomment-317347641,"anonymous class support, fix #505 #658 #659","@tpunt I guess you reviewed this already, or shall I do it ?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/tpunt,7,https://github.com/krakjoe/pthreads/pull/686#issuecomment-318151882,"anonymous class support, fix #505 #658 #659","@krakjoe I gave this a quick review a while ago, and it seemed ok then. I won't be able to give it a thorough review until sometime next week, however.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/tpunt,8,https://github.com/krakjoe/pthreads/pull/686#issuecomment-320470432,"anonymous class support, fix #505 #658 #659","@krakjoe I've given this patch another review and it seems fine. I'll leave this open, though, in case you would like to give it a review first.
Also, with this patch, the thread preparation logic becomes rather convoluted. If this gets merged, then I may have a look to see how things can be refactored to make the code easier to reason about (or at the very least, add a few comments about why certain checks are necessary).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/sirsnyder,9,https://github.com/krakjoe/pthreads/pull/686#issuecomment-320473469,"anonymous class support, fix #505 #658 #659","Good to read. With this patch finally merged, I could submit the next bug fix patch ;-)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/tpunt,10,https://github.com/krakjoe/pthreads/pull/686#issuecomment-322464955,"anonymous class support, fix #505 #658 #659","Joe seems quite busy at the moment, so I've merged this myself. Thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,686,2017-03-05T13:39:54Z,2017-08-15T13:22:53Z,2017-08-23T12:01:49Z,MERGED,True,155,33,4,https://github.com/sirsnyder,Feature/anonymous class support,1,['feedback'],https://github.com/krakjoe/pthreads/pull/686,https://github.com/sirsnyder,11,https://github.com/krakjoe/pthreads/pull/686#issuecomment-322564794,"anonymous class support, fix #505 #658 #659",Thanks @tpunt!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,687,2017-03-06T01:05:18Z,2017-05-28T21:02:51Z,2017-08-23T12:02:57Z,MERGED,True,37,1,2,https://github.com/sirsnyder,fix #564,1,[],https://github.com/krakjoe/pthreads/pull/687,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/687,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,687,2017-03-06T01:05:18Z,2017-05-28T21:02:51Z,2017-08-23T12:02:57Z,MERGED,True,37,1,2,https://github.com/sirsnyder,fix #564,1,[],https://github.com/krakjoe/pthreads/pull/687,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/687#issuecomment-304540182,,Merged in b3a8407. Thanks!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,688,2017-03-08T16:15:08Z,2017-05-29T12:08:29Z,2017-08-23T12:00:46Z,MERGED,True,5,2,1,https://github.com/sirsnyder,fix #580 #681,1,[],https://github.com/krakjoe/pthreads/pull/688,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/688,"Cleanup on synchronized or reading a property is inconsistent, therefore cleanup should also happen on writing a property. Moreover the cleanup behavior on synchronized is misleading.
class myRec extends Threaded {
	public $data1;
	public $data2;
}

class storage extends Threaded {

	private $store = array();

	public function addRecord($key,$data) {
        	$this->store->synchronized(function () use ($key, $data)
        	{
			$this->store[$key] = $data;
		});
	}

	public function delAll() {
        	$this->store->synchronized(function ()
		{
			foreach($this->store as $key => $data)
			{
				unset($this->store[$key]);
			}
        	});
	}

	public function countRecs() {
		return count($this->store);
	}
}

class myThread extends Thread
{

	private static $type;

	public function __construct($type,$storage)
	{
		self::$type = $type;
		$this->storage = $storage;
	}

	public function run()
	{

		if (self::$type === 1) {
			while (true) {

				//if($this->storage->countRecs() == 0)
				{
					@$loop++;
					for($i = 0; $i < 30000; $i++)
					{
						$r = new  myRec();
						$r->data1 = 'data' . $i;
						$this->storage->addRecord($loop . '|' . $i, $r);
					}
				}

				sleep(5);

			}
		}

		if (self::$type === 2) {
			while (true) {
				//if($this->storage->countRecs() >= 30000)
				{
					$this->storage->delAll();
				}

				sleep(1);
				print ""RECS:"".$this->storage->countRecs().""\n"";
			}

		}
	}
}

ini_set('memory_limit', '-1');

$storage = new storage();

$threads[0] = new myThread(1,$storage);
$threads[0]->start();

$threads[1] = new myThread(2,$storage);
$threads[1]->start();
$threads[1]->join();

This is a fix for #681 as well.","Cleanup on synchronized or reading a property is inconsistent, therefore cleanup should also happen on writing a property. Moreover the cleanup behavior on synchronized is misleading.
class myRec extends Threaded {
	public $data1;
	public $data2;
}

class storage extends Threaded {

	private $store = array();

	public function addRecord($key,$data) {
        	$this->store->synchronized(function () use ($key, $data)
        	{
			$this->store[$key] = $data;
		});
	}

	public function delAll() {
        	$this->store->synchronized(function ()
		{
			foreach($this->store as $key => $data)
			{
				unset($this->store[$key]);
			}
        	});
	}

	public function countRecs() {
		return count($this->store);
	}
}

class myThread extends Thread
{

	private static $type;

	public function __construct($type,$storage)
	{
		self::$type = $type;
		$this->storage = $storage;
	}

	public function run()
	{

		if (self::$type === 1) {
			while (true) {

				//if($this->storage->countRecs() == 0)
				{
					@$loop++;
					for($i = 0; $i < 30000; $i++)
					{
						$r = new  myRec();
						$r->data1 = 'data' . $i;
						$this->storage->addRecord($loop . '|' . $i, $r);
					}
				}

				sleep(5);

			}
		}

		if (self::$type === 2) {
			while (true) {
				//if($this->storage->countRecs() >= 30000)
				{
					$this->storage->delAll();
				}

				sleep(1);
				print ""RECS:"".$this->storage->countRecs().""\n"";
			}

		}
	}
}

ini_set('memory_limit', '-1');

$storage = new storage();

$threads[0] = new myThread(1,$storage);
$threads[0]->start();

$threads[1] = new myThread(2,$storage);
$threads[1]->start();
$threads[1]->join();

This is a fix for #681 as well.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,688,2017-03-08T16:15:08Z,2017-05-29T12:08:29Z,2017-08-23T12:00:46Z,MERGED,True,5,2,1,https://github.com/sirsnyder,fix #580 #681,1,[],https://github.com/krakjoe/pthreads/pull/688,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/688#issuecomment-304635927,"Cleanup on synchronized or reading a property is inconsistent, therefore cleanup should also happen on writing a property. Moreover the cleanup behavior on synchronized is misleading.
class myRec extends Threaded {
	public $data1;
	public $data2;
}

class storage extends Threaded {

	private $store = array();

	public function addRecord($key,$data) {
        	$this->store->synchronized(function () use ($key, $data)
        	{
			$this->store[$key] = $data;
		});
	}

	public function delAll() {
        	$this->store->synchronized(function ()
		{
			foreach($this->store as $key => $data)
			{
				unset($this->store[$key]);
			}
        	});
	}

	public function countRecs() {
		return count($this->store);
	}
}

class myThread extends Thread
{

	private static $type;

	public function __construct($type,$storage)
	{
		self::$type = $type;
		$this->storage = $storage;
	}

	public function run()
	{

		if (self::$type === 1) {
			while (true) {

				//if($this->storage->countRecs() == 0)
				{
					@$loop++;
					for($i = 0; $i < 30000; $i++)
					{
						$r = new  myRec();
						$r->data1 = 'data' . $i;
						$this->storage->addRecord($loop . '|' . $i, $r);
					}
				}

				sleep(5);

			}
		}

		if (self::$type === 2) {
			while (true) {
				//if($this->storage->countRecs() >= 30000)
				{
					$this->storage->delAll();
				}

				sleep(1);
				print ""RECS:"".$this->storage->countRecs().""\n"";
			}

		}
	}
}

ini_set('memory_limit', '-1');

$storage = new storage();

$threads[0] = new myThread(1,$storage);
$threads[0]->start();

$threads[1] = new myThread(2,$storage);
$threads[1]->start();
$threads[1]->join();

This is a fix for #681 as well.","@sirsnyder I'm also having trouble replicating the issue you're receiving without the syncing of the pthreads store. Do you have a smaller reproducing script that explicitly shows a difference with and without the syncing of stores on property writes?
The memory leak fixes look fine to me though.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,688,2017-03-08T16:15:08Z,2017-05-29T12:08:29Z,2017-08-23T12:00:46Z,MERGED,True,5,2,1,https://github.com/sirsnyder,fix #580 #681,1,[],https://github.com/krakjoe/pthreads/pull/688,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/688#issuecomment-304637715,"Cleanup on synchronized or reading a property is inconsistent, therefore cleanup should also happen on writing a property. Moreover the cleanup behavior on synchronized is misleading.
class myRec extends Threaded {
	public $data1;
	public $data2;
}

class storage extends Threaded {

	private $store = array();

	public function addRecord($key,$data) {
        	$this->store->synchronized(function () use ($key, $data)
        	{
			$this->store[$key] = $data;
		});
	}

	public function delAll() {
        	$this->store->synchronized(function ()
		{
			foreach($this->store as $key => $data)
			{
				unset($this->store[$key]);
			}
        	});
	}

	public function countRecs() {
		return count($this->store);
	}
}

class myThread extends Thread
{

	private static $type;

	public function __construct($type,$storage)
	{
		self::$type = $type;
		$this->storage = $storage;
	}

	public function run()
	{

		if (self::$type === 1) {
			while (true) {

				//if($this->storage->countRecs() == 0)
				{
					@$loop++;
					for($i = 0; $i < 30000; $i++)
					{
						$r = new  myRec();
						$r->data1 = 'data' . $i;
						$this->storage->addRecord($loop . '|' . $i, $r);
					}
				}

				sleep(5);

			}
		}

		if (self::$type === 2) {
			while (true) {
				//if($this->storage->countRecs() >= 30000)
				{
					$this->storage->delAll();
				}

				sleep(1);
				print ""RECS:"".$this->storage->countRecs().""\n"";
			}

		}
	}
}

ini_set('memory_limit', '-1');

$storage = new storage();

$threads[0] = new myThread(1,$storage);
$threads[0]->start();

$threads[1] = new myThread(2,$storage);
$threads[1]->start();
$threads[1]->join();

This is a fix for #681 as well.",@tpunt that must have been an erroneous observation in htop. My fault. I've removed the pthreads_store_sync call.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,688,2017-03-08T16:15:08Z,2017-05-29T12:08:29Z,2017-08-23T12:00:46Z,MERGED,True,5,2,1,https://github.com/sirsnyder,fix #580 #681,1,[],https://github.com/krakjoe/pthreads/pull/688,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/688#issuecomment-304646067,"Cleanup on synchronized or reading a property is inconsistent, therefore cleanup should also happen on writing a property. Moreover the cleanup behavior on synchronized is misleading.
class myRec extends Threaded {
	public $data1;
	public $data2;
}

class storage extends Threaded {

	private $store = array();

	public function addRecord($key,$data) {
        	$this->store->synchronized(function () use ($key, $data)
        	{
			$this->store[$key] = $data;
		});
	}

	public function delAll() {
        	$this->store->synchronized(function ()
		{
			foreach($this->store as $key => $data)
			{
				unset($this->store[$key]);
			}
        	});
	}

	public function countRecs() {
		return count($this->store);
	}
}

class myThread extends Thread
{

	private static $type;

	public function __construct($type,$storage)
	{
		self::$type = $type;
		$this->storage = $storage;
	}

	public function run()
	{

		if (self::$type === 1) {
			while (true) {

				//if($this->storage->countRecs() == 0)
				{
					@$loop++;
					for($i = 0; $i < 30000; $i++)
					{
						$r = new  myRec();
						$r->data1 = 'data' . $i;
						$this->storage->addRecord($loop . '|' . $i, $r);
					}
				}

				sleep(5);

			}
		}

		if (self::$type === 2) {
			while (true) {
				//if($this->storage->countRecs() >= 30000)
				{
					$this->storage->delAll();
				}

				sleep(1);
				print ""RECS:"".$this->storage->countRecs().""\n"";
			}

		}
	}
}

ini_set('memory_limit', '-1');

$storage = new storage();

$threads[0] = new myThread(1,$storage);
$threads[0]->start();

$threads[1] = new myThread(2,$storage);
$threads[1]->start();
$threads[1]->join();

This is a fix for #681 as well.",Merged in 1dfeea7. Thanks!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,701,2017-05-03T22:17:20Z,2017-07-24T07:59:10Z,2018-01-29T23:15:57Z,CLOSED,False,47,9,3,https://github.com/sirsnyder,Bug/return type hanging thread,1,['feedback'],https://github.com/krakjoe/pthreads/pull/701,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/701,"Wrong logical operator, should be equal to the other branch. A fake typ in instanceof_function leads to a infinite loop.","Wrong logical operator, should be equal to the other branch. A fake typ in instanceof_function leads to a infinite loop.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,701,2017-05-03T22:17:20Z,2017-07-24T07:59:10Z,2018-01-29T23:15:57Z,CLOSED,False,47,9,3,https://github.com/sirsnyder,Bug/return type hanging thread,1,['feedback'],https://github.com/krakjoe/pthreads/pull/701,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/701#issuecomment-299054278,"Wrong logical operator, should be equal to the other branch. A fake typ in instanceof_function leads to a infinite loop.","hm, some tests failed. I'll look at it",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,701,2017-05-03T22:17:20Z,2017-07-24T07:59:10Z,2018-01-29T23:15:57Z,CLOSED,False,47,9,3,https://github.com/sirsnyder,Bug/return type hanging thread,1,['feedback'],https://github.com/krakjoe/pthreads/pull/701,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/701#issuecomment-299602018,"Wrong logical operator, should be equal to the other branch. A fake typ in instanceof_function leads to a infinite loop.","Existing test extended, all tests passed.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,701,2017-05-03T22:17:20Z,2017-07-24T07:59:10Z,2018-01-29T23:15:57Z,CLOSED,False,47,9,3,https://github.com/sirsnyder,Bug/return type hanging thread,1,['feedback'],https://github.com/krakjoe/pthreads/pull/701,https://github.com/krakjoe,4,https://github.com/krakjoe/pthreads/pull/701#issuecomment-317347529,"Wrong logical operator, should be equal to the other branch. A fake typ in instanceof_function leads to a infinite loop.","As far as I can tell, this was fixed when we prepared for 7.2 ... sorry it took so long :)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,702,2017-05-15T18:18:02Z,2017-05-28T21:08:13Z,2017-05-28T22:12:15Z,MERGED,True,1,1,1,https://github.com/dktapps,Update stub,1,[],https://github.com/krakjoe/pthreads/pull/702,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/702,Threaded::wait() parameter is optional,Threaded::wait() parameter is optional,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,702,2017-05-15T18:18:02Z,2017-05-28T21:08:13Z,2017-05-28T22:12:15Z,MERGED,True,1,1,1,https://github.com/dktapps,Update stub,1,[],https://github.com/krakjoe/pthreads/pull/702,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/702#issuecomment-304540512,Threaded::wait() parameter is optional,Merged in 1997397. Thanks!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,712,2017-06-05T18:37:25Z,2017-07-24T07:36:33Z,2017-07-24T07:36:33Z,CLOSED,False,19,1,2,https://github.com/tpunt,Resolve bug #711 (class declaration after new thread creation),1,[],https://github.com/krakjoe/pthreads/pull/712,https://github.com/tpunt,1,https://github.com/krakjoe/pthreads/pull/712,"This fixes #711.
I'm not sure on the full ramifications of this fix quite yet, though. The basic idea is to delay the copying of certain classes (on thread creation) until they are actually used (basically, lazy copying), since the class entry seems to be incomplete at the point of thread creation. Notably, the create_object member of zend_class_entry is NULL, and so the new Threaded object is not created by pthreads' constructor, but rather the built-in constructor. This causes issues down the line when attempting to fetch the pthreads object from the allocated Zend object.
It requires the class to be implementing an interface (though I haven't figured out why that is necessary, yet).","This fixes #711.
I'm not sure on the full ramifications of this fix quite yet, though. The basic idea is to delay the copying of certain classes (on thread creation) until they are actually used (basically, lazy copying), since the class entry seems to be incomplete at the point of thread creation. Notably, the create_object member of zend_class_entry is NULL, and so the new Threaded object is not created by pthreads' constructor, but rather the built-in constructor. This causes issues down the line when attempting to fetch the pthreads object from the allocated Zend object.
It requires the class to be implementing an interface (though I haven't figured out why that is necessary, yet).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,712,2017-06-05T18:37:25Z,2017-07-24T07:36:33Z,2017-07-24T07:36:33Z,CLOSED,False,19,1,2,https://github.com/tpunt,Resolve bug #711 (class declaration after new thread creation),1,[],https://github.com/krakjoe/pthreads/pull/712,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/712#issuecomment-306631642,"This fixes #711.
I'm not sure on the full ramifications of this fix quite yet, though. The basic idea is to delay the copying of certain classes (on thread creation) until they are actually used (basically, lazy copying), since the class entry seems to be incomplete at the point of thread creation. Notably, the create_object member of zend_class_entry is NULL, and so the new Threaded object is not created by pthreads' constructor, but rather the built-in constructor. This causes issues down the line when attempting to fetch the pthreads object from the allocated Zend object.
It requires the class to be implementing an interface (though I haven't figured out why that is necessary, yet).",Your description looks similar to my anonymous class observations. The create_object member of anonymous zend_class_entry is also NULL. #686 would solve this issue too.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,712,2017-06-05T18:37:25Z,2017-07-24T07:36:33Z,2017-07-24T07:36:33Z,CLOSED,False,19,1,2,https://github.com/tpunt,Resolve bug #711 (class declaration after new thread creation),1,[],https://github.com/krakjoe/pthreads/pull/712,https://github.com/krakjoe,3,https://github.com/krakjoe/pthreads/pull/712#issuecomment-317342720,"This fixes #711.
I'm not sure on the full ramifications of this fix quite yet, though. The basic idea is to delay the copying of certain classes (on thread creation) until they are actually used (basically, lazy copying), since the class entry seems to be incomplete at the point of thread creation. Notably, the create_object member of zend_class_entry is NULL, and so the new Threaded object is not created by pthreads' constructor, but rather the built-in constructor. This causes issues down the line when attempting to fetch the pthreads object from the allocated Zend object.
It requires the class to be implementing an interface (though I haven't figured out why that is necessary, yet).","Merged 082f2ef
Thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/720,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,2,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316378497,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","@dktapps I applied the patch to the fork by @sirsnyder
sirsnyder#5
The test results aren't bad:
=====================================================================
Number of tests :   99                98
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    3 (  3.0%) (  3.1%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   95 ( 96.0%) ( 96.9%)
---------------------------------------------------------------------
Time taken      :    3 seconds
=====================================================================
=====================================================================
FAILED TEST SUMMARY
---------------------------------------------------------------------
Basic anonymous class support, fix #505 [C:\projects\php-src\ext\pthreads\tests\inherited-anon-class-outside-context.phpt]
Test fix for #658 with inheritance [C:\projects\php-src\ext\pthreads\tests\inherited-anon-class.phpt]
Test fix for #659 [C:\projects\php-src\ext\pthreads\tests\no-inheritance-anon-class.phpt]
=====================================================================

See https://ci.appveyor.com/project/SirSnyder/pthreads-ftdtq/build/feature/winbuild.13 (at the bottom)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,3,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316383354,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Try changing this line in appveyor.yml
git clone https://github.com/php/php-src C:\projects\php-src
to
git clone -b PHP-7.0 https://github.com/php/php-src C:\projects\php-src
to see what Appveyor makes of your patch to @krakjoe 's version.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316401255,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","I attempted to set-up an environment matrix for AppVeyor on my own fork to have it build for 7.0 and 7.1 both, but it was too much of a pain.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316402127,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Ah. AppVeyor won't build this PR anyway, the appveyor.yml is configured to build master only.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,6,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316406034,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","No, pthreads master is now restricted to build with PHP 7.2 only:
https://github.com/krakjoe/pthreads/blob/master/php_pthreads.c#L38

pthreads requires PHP 7.2, ZTS in versions 7.0 and 7.1 is broken

See 5bb2058
Maybe @krakjoe van revert that when he sees https://ci.appveyor.com/project/SirSnyder/pthreads-ftdtq/build/feature/winbuild.13",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,7,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316408746,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","You removed your commit, but the Appveyor output is still there ;-)
https://ci.appveyor.com/project/krakjoe/pthreads/build/master.161#L999",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,8,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316409572,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","My branch doesn't have the commit which prevents building on < 7.2... not sure what's going on there.
I don't have VS2017 on my machine at the moment because I still need VS2015 for various things, so I can't test this against 7.2 immediately. I'll have to see if I can get them to coexist.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,9,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316412898,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","My branch doesn't have the commit which prevents building on < 7.2... not sure what's going on there.

Your patch is againts @krakjoe's version, which has the commit..
There is no problem in having VS2017 besides VS2015, with one caveat:
https://www.apachelounge.com/viewtopic.php?p=35244",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,10,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316818788,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","My last commit fixes AppVeyor to build against 7.2dev, but don't be fooled by the test result - there's something wrong with pthreads on 7.2 with Windows (the exact same build process worked perfectly with 7.1 and all tests succeeded (without the last 5 commits to master or so)) - lots of the tests fail for reasons I can't explain.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,11,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316887283,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","See https://www.apachelounge.com/posting.php?mode=editpost&p=30903 for my builds
With https://phpdev.toolsforresearch.com/php-7.2.0beta1-Win32-VC15-x86.zip test results are almost perfect.
php /php-sdk/php72dev/run-tests.php /php-sdk/php72dev/ext/pthreads/tests/*.phpt
=====================================================================
Number of tests :   97                96
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    1 (  1.0%) (  1.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   95 ( 97.9%) ( 99.0%)
---------------------------------------------------------------------
Time taken      :   10 seconds
=====================================================================

=====================================================================
FAILED TEST SUMMARY
---------------------------------------------------------------------
Test Volatile objects [/php-sdk/php72dev/ext/pthreads/tests/volatile-objects.phpt]
=====================================================================

php.ini:
[PHP]
extension_dir = ""ext""
extension=php_pthreads.dll
`
TEST_PHP_EXECUTABLE:
/php-sdk/php72dev/Release_TS/php-7.2.0beta1/php.exe",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,12,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316900628,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","It must be something in the test setup. I downloaded your master artificial and ran the tests with a php.ini:
=====================================================================
Number of tests :   97                96
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    0 (  0.0%) (  0.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   96 ( 99.0%) (100.0%)
---------------------------------------------------------------------
Time taken      :    4 seconds
=====================================================================

C:\phpdev\master>type php.ini
[PHP]
extension_dir = ""ext""
extension=php_pthreads",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Wes0617,13,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316927718,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","since php 7.2 the only supported compiler will be vs2017 (VC15), not vs2015 (VC14)
in case you don't know, and unsure if relevant information...",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,14,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316963082,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","@Jan-E if you run the tests with --show-diff, why are they failing for you? When I test locally, random tests are failing because pthreads is apparently already loaded. It's never the same tests, always random ones. Worked fine on 7.1.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,15,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316985241,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","@dktapps With the php_pthreads.dll from the Appveyor build I have no failing tests. With my build, this resulted in a Unhandled exception: read access violation aka a crash:
php.exe \php-sdk\php72dev\ext\pthreads\tests\volatile-objects.php
The crash is not detected by run-tests.php, but volatile-objects.out is just 0 bytes. I am trying to find out what is the difference between your Appveyor build and mine. Maybe it is my custom pthreadsVC2.lib/dll (with a pthreadsVC2.pdb, maybe it is because you are building PHP 7.2.0-dev and I build PHP 7.2.0-beta1.

When I test locally, random tests are failing because pthreads is apparently already loaded. It's never the same tests, always random ones.

Strange. See my tests with the master artefact that I downloaded from the Appveyor build. Did you use that one as well?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,16,https://github.com/krakjoe/pthreads/pull/720#issuecomment-316991148,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Downloaded http://windows.php.net/downloads/qa/php-7.2.0beta1-Win32-VC15-x86.zip added php_pthreads.dll and pthreadVC2.dll from the master artefact, added a php.ini and a tests.bat. Result:
=====================================================================
Number of tests :   97                96
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    0 (  0.0%) (  0.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   96 ( 99.0%) (100.0%)
---------------------------------------------------------------------
Time taken      :    5 seconds
=====================================================================

C:\phpdev\php-7.2.0beta1-Win32-VC15-x86>type tests.bat
\phpdev\php-7.2.0beta1-Win32-VC15-x86\php.exe -doutput_buffering=0 /php-sdk/php72dev/run-tests.php /php-sdk/php72dev/ext/pthreads -p \phpdev\php-7.2.0beta1-Win32-VC15-x86\php.exe -q --show-diff

C:\phpdev\php-7.2.0beta1-Win32-VC15-x86>type php.ini
[PHP]
extension_dir = "".""
extension=php_pthreads

C:\phpdev\php-7.2.0beta1-Win32-VC15-x86>dir /o:-d
 Volume in drive C is Windows7_OS
 Volume Serial Number is D13A-4B50

 Directory of C:\phpdev\php-7.2.0beta1-Win32-VC15-x86

21/07/17  14:23                49 php.ini
21/07/17  14:23               196 tests.bat
21/07/17  14:22    <DIR>          ..
21/07/17  14:22    <DIR>          .
21/07/17  14:19    <DIR>          sasl2
21/07/17  14:19    <DIR>          lib
21/07/17  14:19    <DIR>          extras
21/07/17  14:19    <DIR>          ext
21/07/17  14:19    <DIR>          dev
20/07/17  13:19            75.776 php_pthreads.dll
20/07/17  13:19            55.808 pthreadVC2.dll
19/07/17  01:47            53.242 pharcommand.phar
19/07/17  01:47                43 phar.phar.bat
19/07/17  01:42            15.360 gmodule-2.dll
19/07/17  01:42            79.396 install.txt
19/07/17  01:42            41.984 icuio57.dll
19/07/17  01:42         2.143.744 libcrypto-1_1.dll
19/07/17  01:42            35.328 libenchant.dll
19/07/17  01:42           151.040 libpq.dll
19/07/17  01:42         1.233.920 icuuc57.dll
19/07/17  01:42         1.814.016 icuin57.dll
19/07/17  01:42           183.808 libssh2.dll
19/07/17  01:42           380.928 libssl-1_1.dll
19/07/17  01:42        25.671.680 icudt57.dll
19/07/17  01:42            16.830 news.txt
19/07/17  01:42           156.672 nghttp2.dll
19/07/17  01:42            44.544 iculx57.dll
19/07/17  01:42            82.432 libsasl.dll
19/07/17  01:42            13.556 snapshot.txt
19/07/17  01:42           229.376 icule57.dll
19/07/17  01:42            20.183 readme-redist-bins.txt
19/07/17  01:42             2.523 php.gif
19/07/17  01:42            97.280 deplister.exe
19/07/17  01:42            72.305 php.ini-development
19/07/17  01:42            72.584 php.ini-production
19/07/17  01:42         1.194.496 glib-2.dll
19/07/17  01:42           488.448 libsodium.dll
19/07/17  01:42             3.286 license.txt
19/07/17  01:42         7.167.488 php7ts.dll
19/07/17  01:42           276.480 phpdbg.exe
19/07/17  01:42           852.930 php7embed.lib
19/07/17  01:42            30.720 php7apache2_4.dll
19/07/17  01:42           105.984 php.exe
19/07/17  01:42            33.280 php-win.exe
19/07/17  01:42            57.344 php-cgi.exe
19/07/17  01:42           225.792 php7phpdbg.dll
              39 File(s)     43.180.851 bytes
               7 Dir(s)  62.041.874.432 bytes free

C:\phpdev\php-7.2.0beta1-Win32-VC15-x86>",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,17,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317040451,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Yep, doesn't matter what version I use, I see this at random intervals:
PHP Warning:  Module 'pthreads' already loaded in Unknown on line 0

Warning: Module 'pthreads' already loaded in Unknown on line 0

AppVeyor is being even more strange by frequently declaring that random pthreads classes don't exist. I don't know what's going on there.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,18,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317054194,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","I do not know either what is going wrong. I rebuilt my ptreadsVC2.dll/lib, cloned this repo master, applied your patch and now got this result:
=====================================================================
Number of tests :   97                96
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    0 (  0.0%) (  0.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   96 ( 99.0%) (100.0%)
---------------------------------------------------------------------
Time taken      :    6 seconds
=====================================================================
cmdline:
php -doutput_buffering=0 /php-sdk/php72dev/run-tests.php /php-sdk/php72dev/ext/pthreads -q --show-diff
php.ini:
[PHP]
extension_dir = ""ext""
extension=php_pthreads
TEST_PHP_EXECUTABLE:
/php-sdk/php72dev/Release_TS/php-7.2.0beta1/php.exe

I am now building the x64 version.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,19,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317064198,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","x64 build results:
=====================================================================
Number of tests :   97                96
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    0 (  0.0%) (  0.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   96 ( 99.0%) (100.0%)
---------------------------------------------------------------------
Time taken      :    4 seconds
=====================================================================
cmdline:
php -doutput_buffering=0 /php-sdk/php72dev/run-tests.php /php-sdk/php72dev/ext/pthreads -q --show-diff
php.ini:
[PHP]
extension_dir = ""ext""
extension=php_pthreads
TEST_PHP_EXECUTABLE:
/php-sdk/php72dev/x64/Release_TS/php-7.2.0beta1/php.exe",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,20,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317066317,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Yep, doesn't matter what version I use, I see this at random intervals:

Try setting TEST_PHP_EXECUTABLE before running run-tests.php, do not use the -p.
cd to the directory of the php.exe and add a minimal php.ini there.
This is how I run my tests. See output above.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,21,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317068627,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","@krakjoe 67bd55f is OK to merge
The Appveyor setup is much better than what you have right now, so it might be OK to merge that as well.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,22,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317069279,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .",@dktapps Maybe change the title and add VS2017.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,23,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317175970,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .",Thanks. Maybe I will try to fix the test setup now.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,24,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317176793,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","@krakjoe If I do a git checkout 5272863 and apply @dktapps 's patch, below is the effect on PHP 7.1,
""pthreads requires PHP 7.2, ZTS in versions 7.0 and 7.1 is broken"" does not seem to be true.

  
    
      pthreads/php_pthreads.c
    
    
         Line 38
      in
      5bb2058
    
  
  
    

        
          
           #	error ""pthreads requires PHP 7.2, ZTS in versions 7.0 and 7.1 is broken"" 
        
    
  


Time to revert (parts of) 5bb2058 ???
=====================================================================
Number of tests :   97                96
Tests skipped   :    1 (  1.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    0 (  0.0%) (  0.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :   96 ( 99.0%) (100.0%)
---------------------------------------------------------------------
Time taken      :    5 seconds
=====================================================================
cd:
N:\php-sdk\php71dev\Release_TS\php-7.1.8RC1
cmdline:
php -doutput_buffering=0 /php-sdk/php71dev/run-tests.php /php-sdk/php71dev/ext/pthreads -q --show-diff
php.ini:
[PHP]
extension_dir = ""ext""
extension=php_pthreads.dll
TEST_PHP_EXECUTABLE:
N:\php-sdk\php71dev\Release_TS\php-7.1.8RC1\php.exe
PHP 7.1.8RC1 (cli) (built: Jul 22 2017 11:48:41) ( ZTS MSVC14 (Visual C++ 2015) x86 )
Copyright (c) 1997-2017 The PHP Group
Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/dktapps,25,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317177130,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","The reason for cutting < 7.2 support was discussed here and here. Regardless of the test results, I can confirm that since my project moved to PHP 7.0 we have been experiencing a lot of seemingly random faults which do not occur anymore with PHP 7.2.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,26,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317177827,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Wow. Am I reading this right? Is ZTS in PHP 7.0 and 7.1 broken, regardless of pthreads? That would justify an ABI break in the ZTS builds of 7.0 and 7.1...",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,720,2017-07-11T12:07:15Z,2017-07-22T05:48:11Z,2017-07-23T02:22:18Z,MERGED,True,31,16,3,https://github.com/dktapps,fix compile with Visual Studio on windows,2,[],https://github.com/krakjoe/pthreads/pull/720,https://github.com/Jan-E,27,https://github.com/krakjoe/pthreads/pull/720#issuecomment-317223896,"AF_UNIX is defined in WinSock2.h which is included by php_network.h, meaning AF_UNIX is never not defined. However, Windows doesn't support Unix domain sockets.
This fixes #713 .","Try setting TEST_PHP_EXECUTABLE before running run-tests.php, do not use the -p.
cd to the directory of the php.exe and add a minimal php.ini there.

#722 I'm feeling lucky. Direct hit:
https://ci.appveyor.com/project/krakjoe/pthreads/build/master.167#L645",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,722,2017-07-23T02:13:10Z,2017-07-24T06:17:41Z,2017-07-24T06:17:41Z,MERGED,True,10,6,1,https://github.com/Jan-E,Fix Appveyor run-tests,1,[],https://github.com/krakjoe/pthreads/pull/722,https://github.com/Jan-E,1,https://github.com/krakjoe/pthreads/pull/722,Try a minimal php.ini,Try a minimal php.ini,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,722,2017-07-23T02:13:10Z,2017-07-24T06:17:41Z,2017-07-24T06:17:41Z,MERGED,True,10,6,1,https://github.com/Jan-E,Fix Appveyor run-tests,1,[],https://github.com/krakjoe/pthreads/pull/722,https://github.com/Jan-E,2,https://github.com/krakjoe/pthreads/pull/722#issuecomment-317223976,Try a minimal php.ini,"@krakjoe First shot was a direct hit:
https://ci.appveyor.com/project/krakjoe/pthreads/build/master.167#L645
Please merge",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,722,2017-07-23T02:13:10Z,2017-07-24T06:17:41Z,2017-07-24T06:17:41Z,MERGED,True,10,6,1,https://github.com/Jan-E,Fix Appveyor run-tests,1,[],https://github.com/krakjoe/pthreads/pull/722,https://github.com/Jan-E,3,https://github.com/krakjoe/pthreads/pull/722#issuecomment-317224754,Try a minimal php.ini,Small cleanup: I merged the 2 commits I had at the first shot.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,722,2017-07-23T02:13:10Z,2017-07-24T06:17:41Z,2017-07-24T06:17:41Z,MERGED,True,10,6,1,https://github.com/Jan-E,Fix Appveyor run-tests,1,[],https://github.com/krakjoe/pthreads/pull/722,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/722#issuecomment-317236771,Try a minimal php.ini,"I think you can also remove --with-config-file-scan-dir=C:\projects\pthreads\bin\modules.d from configure, it doesn't appear to be necessary with these changes.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,722,2017-07-23T02:13:10Z,2017-07-24T06:17:41Z,2017-07-24T06:17:41Z,MERGED,True,10,6,1,https://github.com/Jan-E,Fix Appveyor run-tests,1,[],https://github.com/krakjoe/pthreads/pull/722,https://github.com/Jan-E,5,https://github.com/krakjoe/pthreads/pull/722#issuecomment-317238636,Try a minimal php.ini,This must be a bad dream for @krakjoe : the Windows build env is now better than the *nix one.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,730,2017-07-30T03:53:13Z,2017-08-01T04:40:22Z,2017-08-01T04:40:53Z,MERGED,True,11,4,1,https://github.com/Jan-E,Appveyor: build x86 & x64,1,[],https://github.com/krakjoe/pthreads/pull/730,https://github.com/Jan-E,1,https://github.com/krakjoe/pthreads/pull/730,"Proof of the pudding:
https://ci.appveyor.com/project/Jan-E/pthreads/build/master.1","Proof of the pudding:
https://ci.appveyor.com/project/Jan-E/pthreads/build/master.1",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,730,2017-07-30T03:53:13Z,2017-08-01T04:40:22Z,2017-08-01T04:40:53Z,MERGED,True,11,4,1,https://github.com/Jan-E,Appveyor: build x86 & x64,1,[],https://github.com/krakjoe/pthreads/pull/730,https://github.com/Jan-E,2,https://github.com/krakjoe/pthreads/pull/730#issuecomment-318876594,"Proof of the pudding:
https://ci.appveyor.com/project/Jan-E/pthreads/build/master.1","@krakjoe: https://ci.appveyor.com/project/krakjoe/pthreads/build/master.173
Please merge",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,730,2017-07-30T03:53:13Z,2017-08-01T04:40:22Z,2017-08-01T04:40:53Z,MERGED,True,11,4,1,https://github.com/Jan-E,Appveyor: build x86 & x64,1,[],https://github.com/krakjoe/pthreads/pull/730,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/730#issuecomment-318885121,"Proof of the pudding:
https://ci.appveyor.com/project/Jan-E/pthreads/build/master.1","You can set arch using the platform variable, which can help create a less messy matrix.
platform:
 - x86
  -x64

which is then accessible via PLATFORM in the cmd itself. See https://github.com/php/php-src/blob/master/.appveyor.yml#L49",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,730,2017-07-30T03:53:13Z,2017-08-01T04:40:22Z,2017-08-01T04:40:53Z,MERGED,True,11,4,1,https://github.com/Jan-E,Appveyor: build x86 & x64,1,[],https://github.com/krakjoe/pthreads/pull/730,https://github.com/Jan-E,4,https://github.com/krakjoe/pthreads/pull/730#issuecomment-318886515,"Proof of the pudding:
https://ci.appveyor.com/project/Jan-E/pthreads/build/master.1","'messy' is a matter of taste.
  matrix:
    - ARCH: x86
      PHP_VER: 7.2
      VC_VER: vc15
    - ARCH: x64
      PHP_VER: 7.2
      VC_VER: vc15

tells me instantly that I am testing the x86 & x64 builds of the extension for PHP 7.2",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,730,2017-07-30T03:53:13Z,2017-08-01T04:40:22Z,2017-08-01T04:40:53Z,MERGED,True,11,4,1,https://github.com/Jan-E,Appveyor: build x86 & x64,1,[],https://github.com/krakjoe/pthreads/pull/730,https://github.com/krakjoe,5,https://github.com/krakjoe/pthreads/pull/730#issuecomment-319265863,"Proof of the pudding:
https://ci.appveyor.com/project/Jan-E/pthreads/build/master.1","Thanks @Jan-E ... sorry about delay, busyness happened ...",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,734,2017-08-06T10:51:49Z,2017-08-26T19:43:40Z,2017-08-26T19:43:40Z,CLOSED,False,136,0,1,https://github.com/prolic,add socket server example,1,[],https://github.com/krakjoe/pthreads/pull/734,https://github.com/prolic,1,https://github.com/krakjoe/pthreads/pull/734,"this example also includes pcntl usage. but there is an issue regarding on how to stop a thread, that is waiting for Socket::accept(), therefore stopping the socket server is not really good working, see: #733
I hope we can get this one running 🍻","this example also includes pcntl usage. but there is an issue regarding on how to stop a thread, that is waiting for Socket::accept(), therefore stopping the socket server is not really good working, see: #733
I hope we can get this one running 🍻",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,734,2017-08-06T10:51:49Z,2017-08-26T19:43:40Z,2017-08-26T19:43:40Z,CLOSED,False,136,0,1,https://github.com/prolic,add socket server example,1,[],https://github.com/krakjoe/pthreads/pull/734,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/734#issuecomment-325157861,"this example also includes pcntl usage. but there is an issue regarding on how to stop a thread, that is waiting for Socket::accept(), therefore stopping the socket server is not really good working, see: #733
I hope we can get this one running 🍻","Given your recent comment in #733, I guess this PR has now been superseded by #743, so I'm closing this.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,740,2017-08-23T21:56:19Z,2017-08-24T13:56:44Z,2017-08-24T13:56:57Z,MERGED,True,18,4,1,https://github.com/sirsnyder,extends verify-overload test,1,[],https://github.com/krakjoe/pthreads/pull/740,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/740,Just a small extension of an existing test,Just a small extension of an existing test,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,740,2017-08-23T21:56:19Z,2017-08-24T13:56:44Z,2017-08-24T13:56:57Z,MERGED,True,18,4,1,https://github.com/sirsnyder,extends verify-overload test,1,[],https://github.com/krakjoe/pthreads/pull/740,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/740#issuecomment-324477129,Just a small extension of an existing test,"Just a minor nitpick, but pthreads uses tabs instead of spaces (which is why things are misaligned in the patch preview).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,740,2017-08-23T21:56:19Z,2017-08-24T13:56:44Z,2017-08-24T13:56:57Z,MERGED,True,18,4,1,https://github.com/sirsnyder,extends verify-overload test,1,[],https://github.com/krakjoe/pthreads/pull/740,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/740#issuecomment-324481621,Just a small extension of an existing test,"You're absolutely right, my netbeans expanded tabs to spaces. Changed.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,740,2017-08-23T21:56:19Z,2017-08-24T13:56:44Z,2017-08-24T13:56:57Z,MERGED,True,18,4,1,https://github.com/sirsnyder,extends verify-overload test,1,[],https://github.com/krakjoe/pthreads/pull/740,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/740#issuecomment-324642702,Just a small extension of an existing test,"Merged, thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,741,2017-08-23T22:23:40Z,2017-10-10T08:37:33Z,2017-10-10T08:38:25Z,MERGED,True,13,13,3,https://github.com/sirsnyder,fix static property circular references during class preparation,1,[],https://github.com/krakjoe/pthreads/pull/741,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/741,"I have no further details or tests for this bug fix, sorry.","I have no further details or tests for this bug fix, sorry.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,741,2017-08-23T22:23:40Z,2017-10-10T08:37:33Z,2017-10-10T08:38:25Z,MERGED,True,13,13,3,https://github.com/sirsnyder,fix static property circular references during class preparation,1,[],https://github.com/krakjoe/pthreads/pull/741,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/741#issuecomment-328300738,"I have no further details or tests for this bug fix, sorry.","@sirsnyder I've submitted a PR to refactor the class preparation logic (see #755). Given that this changes a fair amount of code you've written, could you please have a look over it to ensure that I haven't missed anything please? Thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,741,2017-08-23T22:23:40Z,2017-10-10T08:37:33Z,2017-10-10T08:38:25Z,MERGED,True,13,13,3,https://github.com/sirsnyder,fix static property circular references during class preparation,1,[],https://github.com/krakjoe/pthreads/pull/741,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/741#issuecomment-329983294,"I have no further details or tests for this bug fix, sorry.",Closing this since it was superseded by the changes made in #755 (which has now been merged).,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,741,2017-08-23T22:23:40Z,2017-10-10T08:37:33Z,2017-10-10T08:38:25Z,MERGED,True,13,13,3,https://github.com/sirsnyder,fix static property circular references during class preparation,1,[],https://github.com/krakjoe/pthreads/pull/741,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/741#issuecomment-330367141,"I have no further details or tests for this bug fix, sorry.","I've reopened this since my attempt to refactor the static preparation code has failed. I'm still unsure whether introducing a new global for this is the best way, though. Do you see any other ways? Otherwise, can you update the PR to reflect the comments made on it, and I'll look into merging it. Thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,741,2017-08-23T22:23:40Z,2017-10-10T08:37:33Z,2017-10-10T08:38:25Z,MERGED,True,13,13,3,https://github.com/sirsnyder,fix static property circular references during class preparation,1,[],https://github.com/krakjoe/pthreads/pull/741,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/741#issuecomment-331151468,"I have no further details or tests for this bug fix, sorry.",@tpunt unfortunately I see no other solution. I've updated the PR.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,741,2017-08-23T22:23:40Z,2017-10-10T08:37:33Z,2017-10-10T08:38:25Z,MERGED,True,13,13,3,https://github.com/sirsnyder,fix static property circular references during class preparation,1,[],https://github.com/krakjoe/pthreads/pull/741,https://github.com/tpunt,6,https://github.com/krakjoe/pthreads/pull/741#issuecomment-335402258,"I have no further details or tests for this bug fix, sorry.","Merged in 8b10643, thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,743,2017-08-25T21:57:07Z,2018-01-29T15:07:20Z,2018-01-29T15:07:34Z,MERGED,True,141,5,2,https://github.com/sirsnyder,Fixes #733: accept() recognizes socket blocking state,1,[],https://github.com/krakjoe/pthreads/pull/743,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/743,In non blocking state Socket::accept() returns false instead of throwing an exception to match the behavior of socket_accept(). Also added an example.,In non blocking state Socket::accept() returns false instead of throwing an exception to match the behavior of socket_accept(). Also added an example.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,744,2017-08-28T00:07:36Z,2018-02-10T22:44:30Z,2018-02-10T22:46:10Z,CLOSED,False,88,6,3,https://github.com/sirsnyder,#706 - Socket::read() adds PHP_NORMAL_READ and PHP_BINARY_READ,1,[],https://github.com/krakjoe/pthreads/pull/744,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/744,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,744,2017-08-28T00:07:36Z,2018-02-10T22:44:30Z,2018-02-10T22:46:10Z,CLOSED,False,88,6,3,https://github.com/sirsnyder,#706 - Socket::read() adds PHP_NORMAL_READ and PHP_BINARY_READ,1,[],https://github.com/krakjoe/pthreads/pull/744,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/744#issuecomment-349152921,,"@tpunt, new editor with working indentation ;-) files updated",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,744,2017-08-28T00:07:36Z,2018-02-10T22:44:30Z,2018-02-10T22:46:10Z,CLOSED,False,88,6,3,https://github.com/sirsnyder,#706 - Socket::read() adds PHP_NORMAL_READ and PHP_BINARY_READ,1,[],https://github.com/krakjoe/pthreads/pull/744,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/744#issuecomment-364701913,,Follow up on #828,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,745,2017-08-28T11:37:12Z,2018-01-16T15:01:11Z,2018-01-16T15:01:41Z,MERGED,True,1,7,1,https://github.com/dktapps,Fix getting dependencies in AppVeyor builds,2,[],https://github.com/krakjoe/pthreads/pull/745,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/745,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,745,2017-08-28T11:37:12Z,2018-01-16T15:01:11Z,2018-01-16T15:01:41Z,MERGED,True,1,7,1,https://github.com/dktapps,Fix getting dependencies in AppVeyor builds,2,[],https://github.com/krakjoe/pthreads/pull/745,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/745#issuecomment-357977408,,"@dktapps I have no win build setup at hand right now. But I guess you've tested your changes and it works, right?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,745,2017-08-28T11:37:12Z,2018-01-16T15:01:11Z,2018-01-16T15:01:41Z,MERGED,True,1,7,1,https://github.com/dktapps,Fix getting dependencies in AppVeyor builds,2,[],https://github.com/krakjoe/pthreads/pull/745,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/745#issuecomment-357985054,,"@sirsnyder it was tested as of August, yes. The AppVeyor build for the PR passes. Presumably it still works, I use the same configuration for CI builds on my own extensions.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,745,2017-08-28T11:37:12Z,2018-01-16T15:01:11Z,2018-01-16T15:01:41Z,MERGED,True,1,7,1,https://github.com/dktapps,Fix getting dependencies in AppVeyor builds,2,[],https://github.com/krakjoe/pthreads/pull/745,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/745#issuecomment-357987279,,Thanks!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/746,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.","This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/746#issuecomment-329983392,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.","@sirsnyder Please rebase this onto master, and then I'll merge it.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/746#issuecomment-336313836,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.","@tpunt I've updated the PR, please have a look. Thx!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/746#issuecomment-336488567,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.","@sirsnyder I've taken another look at this, but I don't seem to be able to reproduce the problem you're seeing using the master branch of pthreads and the PHP-7.2 branch of php-src. Assuming you can still see this problem, could you add a test with a reproducing script, so that I can better see what this fixes exactly? Also, another nitpick, but the whole body of the main change is indented with spaces (I only noticed this when viewing it in my editor) - can this be changed to use tabs please?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/746#issuecomment-338423873,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.",@tpunt this somehow appears to have landed on master in b879981,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/tpunt,6,https://github.com/krakjoe/pthreads/pull/746#issuecomment-338425848,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.","Thanks for letting me know. It looks like I pulled this change a while ago, but forgot that it was committed to my branch... I've reverted it for now, so that @sirsnyder can make the aforementioned changes first.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/tpunt,7,https://github.com/krakjoe/pthreads/pull/746#issuecomment-348723940,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.",Merged with a  few changes and a test. Thanks!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,746,2017-08-28T23:38:02Z,2017-12-02T22:12:38Z,2017-12-05T01:07:02Z,CLOSED,False,55,21,1,https://github.com/sirsnyder,Bug/72 class constant visibility,1,[],https://github.com/krakjoe/pthreads/pull/746,https://github.com/sirsnyder,8,https://github.com/krakjoe/pthreads/pull/746#issuecomment-349161037,"This PR based on PR 741. The zend_class_entry constants_table contains zend_class_constant instead of zend_constant objects. The present behavior leads to segfaults. It is necessary to copy the ce and doc_comment, also the delayed build/preparation. If the changed function name is not ok, I will rename/revert the function name.","Oh sorry, somehow I've missed this PR. Thanks @tpunt !",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,747,2017-08-29T00:48:57Z,2017-09-16T17:31:59Z,2017-09-16T17:31:59Z,CLOSED,False,3,1,1,https://github.com/sirsnyder,#742 - simple (almost stupid) bug fix,1,[],https://github.com/krakjoe/pthreads/pull/747,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/747,Very simple bug fix,Very simple bug fix,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,747,2017-08-29T00:48:57Z,2017-09-16T17:31:59Z,2017-09-16T17:31:59Z,CLOSED,False,3,1,1,https://github.com/sirsnyder,#742 - simple (almost stupid) bug fix,1,[],https://github.com/krakjoe/pthreads/pull/747,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/747#issuecomment-325586902,Very simple bug fix,"I'm not keen on this fix. I also looked into something similar initially, but didn't resolve it this way because it isn't robust enough.
Firstly, it still is just a hack that will not apply to all cases:
$this->a = [];
$this->a[] = (array)[1];
$this->a->b = [];
$this->a->b[] = (array)[2];
$this->a->b->c = [];
$this->a->b->c[] = (array)[3];
$this->a->b->c->d = [];
$this->a->b->c->d[] = (array)[3]; // still a Volatile object
Secondly, when you begin looking back through the opline that far, you can no longer guarantee that you're still working off of the current statement. For example, with your fix, the following will be incorrect:
$a = (array)[];
$this[] = []; // now an array
var_dump($this);
The second line will now be an array, rather than the expected Volatile object. This is because it has looked back 3 opcodes from the write operation, and has seen that one of them is an array cast, even though it is for a different expression.
I don't know what the solution is for this problem yet (or if there even is one), but it is not safe to look back more than two opcodes for an array cast.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,747,2017-08-29T00:48:57Z,2017-09-16T17:31:59Z,2017-09-16T17:31:59Z,CLOSED,False,3,1,1,https://github.com/sirsnyder,#742 - simple (almost stupid) bug fix,1,[],https://github.com/krakjoe/pthreads/pull/747,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/747#issuecomment-329983440,Very simple bug fix,"Given the problems I mentioned above, I am closing this PR since it is not a suitable fix.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,755,2017-09-09T20:07:18Z,2017-09-16T17:29:04Z,2017-09-16T17:29:04Z,MERGED,True,145,124,3,https://github.com/tpunt,Refactor class preparation logic,4,[],https://github.com/krakjoe/pthreads/pull/755,https://github.com/tpunt,1,https://github.com/krakjoe/pthreads/pull/755,"The old class entry copying logic was a mess. This PR refactors this so that the new class copying logic is cleaner, simpler, and faster.
Broadly, the following changes have been made:

Removal of the unused thread parameter to pthreads_prepared_entry_static_members
Removal of the conditional copying of static class members, since they are always copied later by pthreads_prepare_classes
Shift around the copying logic with respect to unbound anonymous classes. Previously, the copying logic would sometimes be executed twice when copying the following ce information:

function_table
magic methods
properties_info
default_properties_table
constants_table



Whilst the double copying was not a problem in many cases, it did cause unnecessary overhead (though this would have only been noticed with respect to copying unbound anonymous classes).
I'll leave this PR here for a couple of days in case there are any comments, and then I'll merge it.","The old class entry copying logic was a mess. This PR refactors this so that the new class copying logic is cleaner, simpler, and faster.
Broadly, the following changes have been made:

Removal of the unused thread parameter to pthreads_prepared_entry_static_members
Removal of the conditional copying of static class members, since they are always copied later by pthreads_prepare_classes
Shift around the copying logic with respect to unbound anonymous classes. Previously, the copying logic would sometimes be executed twice when copying the following ce information:

function_table
magic methods
properties_info
default_properties_table
constants_table



Whilst the double copying was not a problem in many cases, it did cause unnecessary overhead (though this would have only been noticed with respect to copying unbound anonymous classes).
I'll leave this PR here for a couple of days in case there are any comments, and then I'll merge it.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,770,2017-10-23T11:52:40Z,2017-10-24T14:00:48Z,2017-10-24T14:00:48Z,CLOSED,False,7,0,1,https://github.com/RAJESHINDIN,Create composer.json,1,[],https://github.com/krakjoe/pthreads/pull/770,https://github.com/RAJESHINDIN,1,https://github.com/krakjoe/pthreads/pull/770,"Without composer.json file, people find it difficult to install the package in framworks like laravel. So, it will make the installation easy using composer","Without composer.json file, people find it difficult to install the package in framworks like laravel. So, it will make the installation easy using composer",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,770,2017-10-23T11:52:40Z,2017-10-24T14:00:48Z,2017-10-24T14:00:48Z,CLOSED,False,7,0,1,https://github.com/RAJESHINDIN,Create composer.json,1,[],https://github.com/krakjoe/pthreads/pull/770,https://github.com/rask,2,https://github.com/krakjoe/pthreads/pull/770#issuecomment-338640197,"Without composer.json file, people find it difficult to install the package in framworks like laravel. So, it will make the installation easy using composer","This is an extension written in C, not a package that can be installed inside other PHP projects/packages.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,770,2017-10-23T11:52:40Z,2017-10-24T14:00:48Z,2017-10-24T14:00:48Z,CLOSED,False,7,0,1,https://github.com/RAJESHINDIN,Create composer.json,1,[],https://github.com/krakjoe/pthreads/pull/770,https://github.com/bwoebi,3,https://github.com/krakjoe/pthreads/pull/770#issuecomment-339000192,"Without composer.json file, people find it difficult to install the package in framworks like laravel. So, it will make the installation easy using composer","Exactly, no point in a composer.json here. Closing.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,774,2017-11-02T17:14:49Z,2017-11-02T17:38:30Z,2017-11-03T06:36:46Z,MERGED,True,1,1,1,https://github.com/dktapps,fix compile error on 7.2,1,[],https://github.com/krakjoe/pthreads/pull/774,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/774,"wrong version check, GC_ADDREF only exists in 7.3-dev. If I read correctly, edf81d3 was actually intended to fix 7.3, not 7.2.","wrong version check, GC_ADDREF only exists in 7.3-dev. If I read correctly, edf81d3 was actually intended to fix 7.3, not 7.2.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,774,2017-11-02T17:14:49Z,2017-11-02T17:38:30Z,2017-11-03T06:36:46Z,MERGED,True,1,1,1,https://github.com/dktapps,fix compile error on 7.2,1,[],https://github.com/krakjoe/pthreads/pull/774,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/774#issuecomment-341501357,"wrong version check, GC_ADDREF only exists in 7.3-dev. If I read correctly, edf81d3 was actually intended to fix 7.3, not 7.2.","Merged, thanks.",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,774,2017-11-02T17:14:49Z,2017-11-02T17:38:30Z,2017-11-03T06:36:46Z,MERGED,True,1,1,1,https://github.com/dktapps,fix compile error on 7.2,1,[],https://github.com/krakjoe/pthreads/pull/774,https://github.com/krakjoe,3,https://github.com/krakjoe/pthreads/pull/774#issuecomment-341630792,"wrong version check, GC_ADDREF only exists in 7.3-dev. If I read correctly, edf81d3 was actually intended to fix 7.3, not 7.2.",Thanks for cleaning up there ... I'm unsure what I thought I was doing :D,True,{'LAUGH': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/778,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.","@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/778#issuecomment-357696597,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.",@tpunt @krakjoe could someone of you please review this PR. Do you see any problems concerning performance? This PR is important for Volatile objects and I would like to merge it soon.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/778#issuecomment-362693968,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.","Ok, I've given it a review now. I don't see anything technically wrong with it, but the negative performance impact it brings is not good.
Using the following code:
<?php

class A extends Thread
{
	public function __construct(Threaded $t)
	{
		$this->t = $t;
	}

	public function run()
	{
		for ($i = 0; $i < 10000; ++$i) {
			$this->t[] = function (){};
		}
	}
}

$t = new Threaded();
$a = new A($t);

for ($i = 0; $i < 10000; ++$i) {
	$t[] = function (){};
}

$a->start() && $a->join();
Times:

Before the patch: 0.056s
After the patch: 1.242s

Instructions:

Before the patch: 198,469,277
After the patch: 10,398,134,419

That's quite a degradation for normal Threaded objects, and weakens the purpose of immutability in pthreads (something Joe wrote quite fondly about).
In its current state, I don't think it would be a good idea to merge the patch. But we can use this patch as a base, and optimise it to provide a solution that minimises the performance degradation.
I can take another look at this over the weekend.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/778#issuecomment-362760012,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.","I'm afraid I made a mistake. Hold on, I will push a fix tomorrow.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/778#issuecomment-362857310,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.",I've restricted pthreads_store_sync() in line https://github.com/krakjoe/pthreads/pull/778/files#diff-299af04dc20fc53f6c029d9f260211b6R377 to Volatiles only. This fix performs much better. @tpunt please repeat your benchmark.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/tpunt,6,https://github.com/krakjoe/pthreads/pull/778#issuecomment-362891271,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.","I did wonder whether you meant to restrict the syncing to just Volatile objects only. This looks fine to me now, and gives a nice performance win on the following script (which was problematic in issue #786):
<?php

class ThreadedClass extends Thread
{
    private $work;
    private $matrixSize;

    public function __construct($matrixSize) {
        $this->matrixSize = $matrixSize;
        $this->work = new Volatile();
        // $this->work = new Threaded(); // for better performance
    }

    public function pushWork($line) {
        $this->work[] = $line;
    }

    public function run() {
        for ($i = 0; $i < count($this->work); $i++) {
            for ($j = 0; $j < $this->matrixSize; $j++) {
                $this->work[$i][$j] = rand(1, 100);
            }
        }
    }
}

$matrix = $threads = [];
$matrixSize = 500;
$numThreads = 2;

for ($i = 0; $i < $matrixSize; $i++) $matrix[$i] = [];
for ($i = 0; $i < $numThreads; $i++) $threads[] = new ThreadedClass($matrixSize);
for ($i = 0; $i < $matrixSize; $i++) $threads[$i % $numThreads]->pushWork($matrix[$i]);
for ($i = 0; $i < $numThreads; $i++) $threads[$i]->start();
for ($i = 0; $i < $numThreads; $i++) $threads[$i]->join();
Feel free to merge.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/sirsnyder,7,https://github.com/krakjoe/pthreads/pull/778#issuecomment-362907148,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.",With pleasure! How did you measure the number of instructions?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,778,2017-12-05T00:56:54Z,2018-02-04T13:44:54Z,2018-02-04T14:24:15Z,MERGED,True,122,8,2,https://github.com/sirsnyder,Ability to nest volatile objects,1,[],https://github.com/krakjoe/pthreads/pull/778,https://github.com/tpunt,8,https://github.com/krakjoe/pthreads/pull/778#issuecomment-362910313,"@tpunt @krakjoe Volatile objects are not suitable for nested and/or complex structures, because of the missing refcount. I hope the contained test clarifies the use case of this PR.","How did you measure the number of instructions?

By using Cachegrind:
valgrind --tool=cachegrind -- php -dextension=modules/pthreads.so script.php",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/780,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","Support of socket_recvfrom() and socket_sendto(), equal to php socket API",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/780#issuecomment-349303917,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","check for win32 added, @dktapps",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/780#issuecomment-357336720,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","I haven't had chance to test this yet, will take a look over the weekend.",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/780#issuecomment-357430719,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","Some issues I picked up on:

The extension can't be compiled without PHP sockets. Use of PHP_SOCKET_ERROR() makes pthreads dependent on the sockets extension, as does usage of the below functions. Shouldn't that be PTHREADS_SOCKET_ERROR()?

socket.obj : error LNK2019: unresolved external symbol PHP_SOCKET_ERROR referenced in function pthreads_socket_recvfrom
socket.obj : error LNK2019: unresolved external symbol php_set_inet_addr referenced in function pthreads_socket_sendto
socket.obj : error LNK2019: unresolved external symbol php_set_inet6_addr referenced in function pthreads_socket_sendto


MSVC complains about a bunch of unreferenced variable declarations that should probably be moved under their relevant cases.

ext\pthreads\src\socket.c(827): warning C4101: 'addr6': unreferenced local variable


sockaddr_un is not defined on Windows, again the declarations could probably be moved under the AF_UNIX cases.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/780#issuecomment-357437279,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","@sirsnyder I've created a few commits you might be interested in cherry-picking (commits 1a1f562, 60401fe and d644417).
I've tested this and it seems to be working fine with my additional patches, but one problem I did spot:
socket_recvfrom($socket, $buf, 65535, 0, $addr, $port);

works, and I don't have to define $buf, $addr and $port separately (since they are set by socket_recvfrom() by reference), but
$socket->recvfrom($buf, 65535, 0, $addr, $port);

raises TypeErrors (Fatal error: Uncaught TypeError: Argument 1 passed to Socket::recvfrom() must be of the type string, null given), requiring those variables to be separately declared. Maybe consider allowing the reference parameters to be nullable.",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/dktapps,6,https://github.com/krakjoe/pthreads/pull/780#issuecomment-357437408,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","Also, I haven't tested IPv6 or Unix socket yet.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/dktapps,7,https://github.com/krakjoe/pthreads/pull/780#issuecomment-360817212,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API",@sirsnyder please also take a look at pmmp/pthreads@27ee665 and pmmp/pthreads@2300bcc,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/sirsnyder,8,https://github.com/krakjoe/pthreads/pull/780#issuecomment-361106909,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API",Thanks for your commits @dktapps! Would you report the efree/zend_string_free issue to php/php-src? Otherwise I would do that.,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,780,2017-12-05T11:47:05Z,2018-01-29T12:29:26Z,2018-01-29T15:45:34Z,MERGED,True,413,0,6,https://github.com/sirsnyder,WIP: #776 - socket_recvfrom / socket_sendto support,11,[],https://github.com/krakjoe/pthreads/pull/780,https://github.com/dktapps,9,https://github.com/krakjoe/pthreads/pull/780#issuecomment-361189555,"Support of socket_recvfrom() and socket_sendto(), equal to php socket API","@sirsnyder reported, thanks.",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,781,2017-12-05T14:47:49Z,2018-02-09T21:03:28Z,2018-02-09T21:03:38Z,CLOSED,False,179,0,1,https://github.com/sirsnyder,WIP: socket class stub,1,[],https://github.com/krakjoe/pthreads/pull/781,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/781,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,781,2017-12-05T14:47:49Z,2018-02-09T21:03:28Z,2018-02-09T21:03:38Z,CLOSED,False,179,0,1,https://github.com/sirsnyder,WIP: socket class stub,1,[],https://github.com/krakjoe/pthreads/pull/781,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/781#issuecomment-364527824,,"Yes, by hand :) a generated one would be great!",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,783,2017-12-06T13:52:32Z,2017-12-06T21:57:26Z,2017-12-06T21:57:26Z,MERGED,True,22,0,2,https://github.com/sirsnyder,fix #782 - related to class constant visibility,2,[],https://github.com/krakjoe/pthreads/pull/783,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/783,"@tpunt what is your opinion to this fix, any concerns?","@tpunt what is your opinion to this fix, any concerns?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,783,2017-12-06T13:52:32Z,2017-12-06T21:57:26Z,2017-12-06T21:57:26Z,MERGED,True,22,0,2,https://github.com/sirsnyder,fix #782 - related to class constant visibility,2,[],https://github.com/krakjoe/pthreads/pull/783,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/783#issuecomment-349653637,"@tpunt what is your opinion to this fix, any concerns?","@sirsnyder Looks good to me! My only request would be for a test to be added, so that we can ensure that such a regression is not accidentally introduced in future :)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,783,2017-12-06T13:52:32Z,2017-12-06T21:57:26Z,2017-12-06T21:57:26Z,MERGED,True,22,0,2,https://github.com/sirsnyder,fix #782 - related to class constant visibility,2,[],https://github.com/krakjoe/pthreads/pull/783,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/783#issuecomment-349786476,"@tpunt what is your opinion to this fix, any concerns?",@tpunt good point. I've added the reproducing code snippet as a new test case.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,784,2017-12-07T00:35:15Z,2017-12-07T00:35:40Z,2017-12-07T00:35:40Z,MERGED,True,44,5,3,https://github.com/sirsnyder,fix #782 - prepare static members / constants of all related classes,1,[],https://github.com/krakjoe/pthreads/pull/784,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/784,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,794,2018-01-09T09:38:19Z,2018-01-15T19:33:36Z,2018-02-01T14:37:41Z,MERGED,True,0,6,2,https://github.com/dktapps,Remove remnants of PTHREADS_ALLOW_GLOBALS,2,[],https://github.com/krakjoe/pthreads/pull/794,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/794,This constant does not exist in pthreads v3 as of 3.1.7.,This constant does not exist in pthreads v3 as of 3.1.7.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,794,2018-01-09T09:38:19Z,2018-01-15T19:33:36Z,2018-02-01T14:37:41Z,MERGED,True,0,6,2,https://github.com/dktapps,Remove remnants of PTHREADS_ALLOW_GLOBALS,2,[],https://github.com/krakjoe/pthreads/pull/794,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/794#issuecomment-356246525,This constant does not exist in pthreads v3 as of 3.1.7.,This constant could also be removed from the source code (see thread.h#L87).,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,794,2018-01-09T09:38:19Z,2018-01-15T19:33:36Z,2018-02-01T14:37:41Z,MERGED,True,0,6,2,https://github.com/dktapps,Remove remnants of PTHREADS_ALLOW_GLOBALS,2,[],https://github.com/krakjoe/pthreads/pull/794,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/794#issuecomment-356248919,This constant does not exist in pthreads v3 as of 3.1.7.,"@tpunt ah, I didn't know that was still there. I only saw that it wasn't exposed to PHPland anymore by way of php --re pthreads. I'll remove the define if you want.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,794,2018-01-09T09:38:19Z,2018-01-15T19:33:36Z,2018-02-01T14:37:41Z,MERGED,True,0,6,2,https://github.com/dktapps,Remove remnants of PTHREADS_ALLOW_GLOBALS,2,[],https://github.com/krakjoe/pthreads/pull/794,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/794#issuecomment-357770816,This constant does not exist in pthreads v3 as of 3.1.7.,Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,799,2018-01-13T11:17:30Z,2018-01-16T11:48:39Z,2018-01-16T12:12:26Z,MERGED,True,33,8,2,https://github.com/dktapps,Windows socket fixes,4,[],https://github.com/krakjoe/pthreads/pull/799,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/799,"This includes a fix for #798 , a test for it, and a fix for another Windows-specific bug that broke the test.

Socket::__construct() now works correctly on Windows.
Socket::close() no longer raises exceptions on Windows.

These are Windows-specific issues, but the fixes have been tested on unix as well nonetheless.","This includes a fix for #798 , a test for it, and a fix for another Windows-specific bug that broke the test.

Socket::__construct() now works correctly on Windows.
Socket::close() no longer raises exceptions on Windows.

These are Windows-specific issues, but the fixes have been tested on unix as well nonetheless.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,799,2018-01-13T11:17:30Z,2018-01-16T11:48:39Z,2018-01-16T12:12:26Z,MERGED,True,33,8,2,https://github.com/dktapps,Windows socket fixes,4,[],https://github.com/krakjoe/pthreads/pull/799,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/799#issuecomment-357820081,"This includes a fix for #798 , a test for it, and a fix for another Windows-specific bug that broke the test.

Socket::__construct() now works correctly on Windows.
Socket::close() no longer raises exceptions on Windows.

These are Windows-specific issues, but the fixes have been tested on unix as well nonetheless.",Looks good to me! Please cherry-pick commit d74cb0d and review/confirm the windows part.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,799,2018-01-13T11:17:30Z,2018-01-16T11:48:39Z,2018-01-16T12:12:26Z,MERGED,True,33,8,2,https://github.com/dktapps,Windows socket fixes,4,[],https://github.com/krakjoe/pthreads/pull/799,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/799#issuecomment-357911414,"This includes a fix for #798 , a test for it, and a fix for another Windows-specific bug that broke the test.

Socket::__construct() now works correctly on Windows.
Socket::close() no longer raises exceptions on Windows.

These are Windows-specific issues, but the fixes have been tested on unix as well nonetheless.","Looks good, I missed that. Thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,799,2018-01-13T11:17:30Z,2018-01-16T11:48:39Z,2018-01-16T12:12:26Z,MERGED,True,33,8,2,https://github.com/dktapps,Windows socket fixes,4,[],https://github.com/krakjoe/pthreads/pull/799,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/799#issuecomment-357936821,"This includes a fix for #798 , a test for it, and a fix for another Windows-specific bug that broke the test.

Socket::__construct() now works correctly on Windows.
Socket::close() no longer raises exceptions on Windows.

These are Windows-specific issues, but the fixes have been tested on unix as well nonetheless.",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,800,2018-01-15T01:31:26Z,2018-01-15T19:22:48Z,2018-01-15T19:23:59Z,MERGED,True,290,236,4,https://github.com/sirsnyder,class preparation revision,2,[],https://github.com/krakjoe/pthreads/pull/800,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/800,"I've splitted up the functions pthreads_prepared_entry_static_members and pthreads_complete_entry to smaller ones. New (partially prepared) classes will get inserted into the EG(class_table) HT and not into the resolve HT anymore. I'm quite not happy with the wording of function pthreads_prepared_entry_late_bindings, suggestions are welcome. Your opinions, of course, too.","I've splitted up the functions pthreads_prepared_entry_static_members and pthreads_complete_entry to smaller ones. New (partially prepared) classes will get inserted into the EG(class_table) HT and not into the resolve HT anymore. I'm quite not happy with the wording of function pthreads_prepared_entry_late_bindings, suggestions are welcome. Your opinions, of course, too.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,800,2018-01-15T01:31:26Z,2018-01-15T19:22:48Z,2018-01-15T19:23:59Z,MERGED,True,290,236,4,https://github.com/sirsnyder,class preparation revision,2,[],https://github.com/krakjoe/pthreads/pull/800,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/800#issuecomment-357670632,"I've splitted up the functions pthreads_prepared_entry_static_members and pthreads_complete_entry to smaller ones. New (partially prepared) classes will get inserted into the EG(class_table) HT and not into the resolve HT anymore. I'm quite not happy with the wording of function pthreads_prepared_entry_late_bindings, suggestions are welcome. Your opinions, of course, too.","Nice work, @sirsnyder! I've left a few comments, but other than that, I couldn't see any problems with it. This is definitely a cleaner approach to things.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,800,2018-01-15T01:31:26Z,2018-01-15T19:22:48Z,2018-01-15T19:23:59Z,MERGED,True,290,236,4,https://github.com/sirsnyder,class preparation revision,2,[],https://github.com/krakjoe/pthreads/pull/800,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/800#issuecomment-357708381,"I've splitted up the functions pthreads_prepared_entry_static_members and pthreads_complete_entry to smaller ones. New (partially prepared) classes will get inserted into the EG(class_table) HT and not into the resolve HT anymore. I'm quite not happy with the wording of function pthreads_prepared_entry_late_bindings, suggestions are welcome. Your opinions, of course, too.",Thx for your review @tpunt! I will gonna merge this this evening.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,804,2018-01-26T16:50:21Z,2018-02-02T19:46:35Z,2018-02-02T19:49:35Z,MERGED,True,3,3,1,https://github.com/dktapps,Allow Socket::select() to accept null variables for reference parameters,2,[],https://github.com/krakjoe/pthreads/pull/804,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/804,"This matches the PHP socket_select() behaviour.
Prior to this change, TypeErrors would be raised in strict mode if null was given.","This matches the PHP socket_select() behaviour.
Prior to this change, TypeErrors would be raised in strict mode if null was given.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,804,2018-01-26T16:50:21Z,2018-02-02T19:46:35Z,2018-02-02T19:49:35Z,MERGED,True,3,3,1,https://github.com/dktapps,Allow Socket::select() to accept null variables for reference parameters,2,[],https://github.com/krakjoe/pthreads/pull/804,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/804#issuecomment-362687374,"This matches the PHP socket_select() behaviour.
Prior to this change, TypeErrors would be raised in strict mode if null was given.",Thanks @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/805,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/805#issuecomment-360872077,,"Looks good to me. There also seems to be a few other incorrect things in this file.
The required arg count is incorrect for a few other methods:

Socket_setOption arginfo should be 3
Socket_select arginfo should be 3
Socket_read arginfo should be 1

The commented prototypes for the following are also incorrect:

Socket::select
Socket::send

Would you like to fix these in this PR too? If not, I'll merge this and fix them later.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/805#issuecomment-360872778,,"@tpunt sure, I'll update the PR.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/805#issuecomment-360874284,,"I'm not sure about Socket::select(), socket_select() requires the first timeout parameter. But the parameter parsing allows it to not be specified, and the commented doc indicates that all of them are required. Very inconsistent.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/tpunt,5,https://github.com/krakjoe/pthreads/pull/805#issuecomment-360877288,,"@dktapps I'd be inclined to go with what the current implementation does (i.e. what the parameter parsing API specifies). That will likely be the most recently updated piece of code (the arginfo usually ends up going out of sync, not the other way around).",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/dktapps,6,https://github.com/krakjoe/pthreads/pull/805#issuecomment-360890512,,@tpunt I've updated the PR,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,805,2018-01-26T18:37:51Z,2018-01-27T11:30:50Z,2018-01-27T11:40:29Z,CLOSED,False,6,6,1,https://github.com/dktapps,Fixed arginfo on some Socket methods,4,[],https://github.com/krakjoe/pthreads/pull/805,https://github.com/tpunt,7,https://github.com/krakjoe/pthreads/pull/805#issuecomment-360978696,,"Merged in 8028ec1, thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,807,2018-01-29T13:00:25Z,2018-01-29T14:09:02Z,2018-01-29T14:09:33Z,MERGED,True,64,1,2,https://github.com/dktapps,enable IPv6 support when testing on AppVeyor and add IPv6 Windows tes…,1,[],https://github.com/krakjoe/pthreads/pull/807,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/807,…t (based from php-src),…t (based from php-src),True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,807,2018-01-29T13:00:25Z,2018-01-29T14:09:02Z,2018-01-29T14:09:33Z,MERGED,True,64,1,2,https://github.com/dktapps,enable IPv6 support when testing on AppVeyor and add IPv6 Windows tes…,1,[],https://github.com/krakjoe/pthreads/pull/807,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/807#issuecomment-361255987,…t (based from php-src),Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,808,2018-01-29T13:39:36Z,2018-01-29T14:09:54Z,2018-01-29T14:10:42Z,MERGED,True,4,1,1,https://github.com/dktapps,Fail AppVeyor build if any tests fail,1,[],https://github.com/krakjoe/pthreads/pull/808,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/808,"Prior to this, AppVeyor builds would still be marked as ""succeeded"" even if tests failed.","Prior to this, AppVeyor builds would still be marked as ""succeeded"" even if tests failed.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,808,2018-01-29T13:39:36Z,2018-01-29T14:09:54Z,2018-01-29T14:10:42Z,MERGED,True,4,1,1,https://github.com/dktapps,Fail AppVeyor build if any tests fail,1,[],https://github.com/krakjoe/pthreads/pull/808,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/808#issuecomment-361256256,"Prior to this, AppVeyor builds would still be marked as ""succeeded"" even if tests failed.",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,808,2018-01-29T13:39:36Z,2018-01-29T14:09:54Z,2018-01-29T14:10:42Z,MERGED,True,4,1,1,https://github.com/dktapps,Fail AppVeyor build if any tests fail,1,[],https://github.com/krakjoe/pthreads/pull/808,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/808#issuecomment-361256442,"Prior to this, AppVeyor builds would still be marked as ""succeeded"" even if tests failed.",You're welcome :),True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,811,2018-01-29T16:25:51Z,2018-01-29T20:22:56Z,2018-01-29T21:18:20Z,MERGED,True,1,0,1,https://github.com/dktapps,tiny fix for win32 IPv4 test,1,[],https://github.com/krakjoe/pthreads/pull/811,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/811,"Windows adds newlines at the end of most socket error messages.
see https://ci.appveyor.com/project/krakjoe/pthreads/build/master.274/job/lwjo6yv8mi5vb79v#L743","Windows adds newlines at the end of most socket error messages.
see https://ci.appveyor.com/project/krakjoe/pthreads/build/master.274/job/lwjo6yv8mi5vb79v#L743",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,811,2018-01-29T16:25:51Z,2018-01-29T20:22:56Z,2018-01-29T21:18:20Z,MERGED,True,1,0,1,https://github.com/dktapps,tiny fix for win32 IPv4 test,1,[],https://github.com/krakjoe/pthreads/pull/811,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/811#issuecomment-361312966,"Windows adds newlines at the end of most socket error messages.
see https://ci.appveyor.com/project/krakjoe/pthreads/build/master.274/job/lwjo6yv8mi5vb79v#L743","@sirsnyder It may be best to keep future socket development in different branches, until they stabilise a bit more. Otherwise, if the socket changes need to be reverted (for whatever reason), a dozen commits will need to be reverted (messy business), instead of just one. It's also not good for master stability, which we need whilst there's no official pthreads release for PHP 7.2 yet :)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,811,2018-01-29T16:25:51Z,2018-01-29T20:22:56Z,2018-01-29T21:18:20Z,MERGED,True,1,0,1,https://github.com/dktapps,tiny fix for win32 IPv4 test,1,[],https://github.com/krakjoe/pthreads/pull/811,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/811#issuecomment-361373657,"Windows adds newlines at the end of most socket error messages.
see https://ci.appveyor.com/project/krakjoe/pthreads/build/master.274/job/lwjo6yv8mi5vb79v#L743","@tpunt you're right. Thought it could be easy going to add some socket tests. But well, it wasn't ^^. I would love to see a release for PHP 7.2. In two weeks the last release was two years ago after all.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,817,2018-02-02T19:30:47Z,2018-02-09T16:58:12Z,2018-02-09T17:02:16Z,CLOSED,False,3,0,1,https://github.com/dktapps,Fixed missing null terminator on serialized string,2,[],https://github.com/krakjoe/pthreads/pull/817,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/817,"#816 (comment)
This is probably harmless since a length is stored for this anyway, but still unwanted behaviour.","#816 (comment)
This is probably harmless since a length is stored for this anyway, but still unwanted behaviour.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,817,2018-02-02T19:30:47Z,2018-02-09T16:58:12Z,2018-02-09T17:02:16Z,CLOSED,False,3,0,1,https://github.com/dktapps,Fixed missing null terminator on serialized string,2,[],https://github.com/krakjoe/pthreads/pull/817,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/817#issuecomment-362686828,"#816 (comment)
This is probably harmless since a length is stored for this anyway, but still unwanted behaviour.","This problem appears in a couple of other places as well, will push fixes.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,817,2018-02-02T19:30:47Z,2018-02-09T16:58:12Z,2018-02-09T17:02:16Z,CLOSED,False,3,0,1,https://github.com/dktapps,Fixed missing null terminator on serialized string,2,[],https://github.com/krakjoe/pthreads/pull/817,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/817#issuecomment-364492641,"#816 (comment)
This is probably harmless since a length is stored for this anyway, but still unwanted behaviour.","Given that an extra byte was specifically allocated, I'm going to assume it was meant for a NUL termination, so I've merged this. Thanks.",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,818,2018-02-02T21:08:30Z,2018-02-03T00:39:35Z,2018-02-03T00:39:41Z,MERGED,True,28,6,2,https://github.com/sirsnyder,#816 - keep refcount as set by unserialize,1,[],https://github.com/krakjoe/pthreads/pull/818,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/818,,,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,818,2018-02-02T21:08:30Z,2018-02-03T00:39:35Z,2018-02-03T00:39:41Z,MERGED,True,28,6,2,https://github.com/sirsnyder,#816 - keep refcount as set by unserialize,1,[],https://github.com/krakjoe/pthreads/pull/818,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/818#issuecomment-362708295,,A test for this case is still missing,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,818,2018-02-02T21:08:30Z,2018-02-03T00:39:35Z,2018-02-03T00:39:41Z,MERGED,True,28,6,2,https://github.com/sirsnyder,#816 - keep refcount as set by unserialize,1,[],https://github.com/krakjoe/pthreads/pull/818,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/818#issuecomment-362725183,,I have added a test.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,818,2018-02-02T21:08:30Z,2018-02-03T00:39:35Z,2018-02-03T00:39:41Z,MERGED,True,28,6,2,https://github.com/sirsnyder,#816 - keep refcount as set by unserialize,1,[],https://github.com/krakjoe/pthreads/pull/818,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/818#issuecomment-362742085,,"Looks good to me. I'm not quite sure why the refcount was reset in the first place. The setting of the pzval to null is a little redundant, since it will be set to null in the calling function (it will also be set to null by the calling function of the calling function... But perhaps that can be cleaned up later).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,818,2018-02-02T21:08:30Z,2018-02-03T00:39:35Z,2018-02-03T00:39:41Z,MERGED,True,28,6,2,https://github.com/sirsnyder,#816 - keep refcount as set by unserialize,1,[],https://github.com/krakjoe/pthreads/pull/818,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/818#issuecomment-362751525,,"@dktapps nice to see
@tpunt thanks for the hint, I've removed the nulling",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,819,2018-02-02T23:32:39Z,2018-02-09T12:47:35Z,2018-02-09T12:47:40Z,MERGED,True,202,235,9,https://github.com/sirsnyder,Socket error handling,7,[],https://github.com/krakjoe/pthreads/pull/819,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/819,"The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?","The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,819,2018-02-02T23:32:39Z,2018-02-09T12:47:35Z,2018-02-09T12:47:40Z,MERGED,True,202,235,9,https://github.com/sirsnyder,Socket error handling,7,[],https://github.com/krakjoe/pthreads/pull/819,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/819#issuecomment-362868696,"The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?","Some remarks where fixed, thx @dktapps and @tpunt. Please have a look at it again.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,819,2018-02-02T23:32:39Z,2018-02-09T12:47:35Z,2018-02-09T12:47:40Z,MERGED,True,202,235,9,https://github.com/sirsnyder,Socket error handling,7,[],https://github.com/krakjoe/pthreads/pull/819,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/819#issuecomment-362891873,"The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?","@sirsnyder from a non-technical perspective I don't see anything immediately wrong with it, except for Socket::select() will crash if the error reference parameter isn't specified.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,819,2018-02-02T23:32:39Z,2018-02-09T12:47:35Z,2018-02-09T12:47:40Z,MERGED,True,202,235,9,https://github.com/sirsnyder,Socket error handling,7,[],https://github.com/krakjoe/pthreads/pull/819,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/819#issuecomment-362917016,"The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?",@dktapps Socket::select() won't crash anymore without error specified. I've added a null pointer check. @dktapps  @tpunt  Do you see any more issues? Otherwise I would like to merge this PR.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,819,2018-02-02T23:32:39Z,2018-02-09T12:47:35Z,2018-02-09T12:47:40Z,MERGED,True,202,235,9,https://github.com/sirsnyder,Socket error handling,7,[],https://github.com/krakjoe/pthreads/pull/819,https://github.com/tpunt,5,https://github.com/krakjoe/pthreads/pull/819#issuecomment-362941478,"The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?","I've had another look through the code, and cannot see anything immediately wrong with it (other than the couple of comments I left). Assuming @dktapps doesn't notice any further problems, then feel free to merge. Also, more tests around the sockets functionality (testing both success and error paths) would be good.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,819,2018-02-02T23:32:39Z,2018-02-09T12:47:35Z,2018-02-09T12:47:40Z,MERGED,True,202,235,9,https://github.com/sirsnyder,Socket error handling,7,[],https://github.com/krakjoe/pthreads/pull/819,https://github.com/sirsnyder,6,https://github.com/krakjoe/pthreads/pull/819#issuecomment-362951806,"The return type of the following methods had to be removed from zend arg info, because these methods can return bool(false) in case of an error:

connect()
read()
write()
send()
select()

The two methods recvfrom() and sendto() can also return bool(false) in case of an error, but there were no explicit return types defined.
Each Socket object holds his own error state now. To query and clear the error state, the two new methods getLastError() and clearError() were added. Method getLastError() differs from the PHP equivalent socket_last_error() by one param. Param clear was added to query and clear error state in one single method call. The param is optional and false by default.
I've tried to mimic the PHP socket error behavior(without warnings) with a view to blocking/non-blocking mode as far as possible. Socket::select() should also not throw exceptions in case of an error. But this method is static and there is no global Socket error state. Therefore a optional param error was added to Socket::select() to retrieve a possible error.
Two -win32 socket tests where removed. @dktapps could you test the both socket-sentto-recvfrom- tests on windows, please?",@tpunt more tests will come,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,820,2018-02-03T10:45:08Z,2018-02-09T16:46:47Z,2018-02-09T19:01:05Z,CLOSED,False,1,1,1,https://github.com/dktapps,Fixed IPv6 tests not running when ext/sockets is not compiled,1,[],https://github.com/krakjoe/pthreads/pull/820,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/820,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,820,2018-02-03T10:45:08Z,2018-02-09T16:46:47Z,2018-02-09T19:01:05Z,CLOSED,False,1,1,1,https://github.com/dktapps,Fixed IPv6 tests not running when ext/sockets is not compiled,1,[],https://github.com/krakjoe/pthreads/pull/820,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/820#issuecomment-364489133,,"It looks like this change was bundled into commit b508e06, so I'm closing this. Thanks.",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,820,2018-02-03T10:45:08Z,2018-02-09T16:46:47Z,2018-02-09T19:01:05Z,CLOSED,False,1,1,1,https://github.com/dktapps,Fixed IPv6 tests not running when ext/sockets is not compiled,1,[],https://github.com/krakjoe/pthreads/pull/820,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/820#issuecomment-364527169,,"Yep, thanks @dktapps",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,823,2018-02-04T23:27:16Z,2018-02-05T00:07:43Z,2018-02-05T10:54:28Z,CLOSED,False,1,0,1,https://github.com/dktapps,fixed #812 - missing reference on copied functions,1,[],https://github.com/krakjoe/pthreads/pull/823,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/823,"since these are inserted into the resolve HT for later reuse, the refcount should reflect that. Without this fix the refcount only accounts for the reference returned, and not the one stored in the HT.
This fixes #812.","since these are inserted into the resolve HT for later reuse, the refcount should reflect that. Without this fix the refcount only accounts for the reference returned, and not the one stored in the HT.
This fixes #812.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,823,2018-02-04T23:27:16Z,2018-02-05T00:07:43Z,2018-02-05T10:54:28Z,CLOSED,False,1,0,1,https://github.com/dktapps,fixed #812 - missing reference on copied functions,1,[],https://github.com/krakjoe/pthreads/pull/823,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/823#issuecomment-362951913,"since these are inserted into the resolve HT for later reuse, the refcount should reflect that. Without this fix the refcount only accounts for the reference returned, and not the one stored in the HT.
This fixes #812.",Some tests are failing in debug mode (leaks).,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,824,2018-02-09T19:34:03Z,2018-02-09T21:05:24Z,2018-02-09T21:16:17Z,MERGED,True,186,0,1,https://github.com/dktapps,Auto-generated Socket class stub,2,[],https://github.com/krakjoe/pthreads/pull/824,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/824,"(as mentioned in #781)
This is generated from latest master, built on Ubuntu. Constant values might be different on Windows and/or might be missing in some cases.
This does not have any documentation.","(as mentioned in #781)
This is generated from latest master, built on Ubuntu. Constant values might be different on Windows and/or might be missing in some cases.
This does not have any documentation.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,824,2018-02-09T19:34:03Z,2018-02-09T21:05:24Z,2018-02-09T21:16:17Z,MERGED,True,186,0,1,https://github.com/dktapps,Auto-generated Socket class stub,2,[],https://github.com/krakjoe/pthreads/pull/824,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/824#issuecomment-364566665,"(as mentioned in #781)
This is generated from latest master, built on Ubuntu. Constant values might be different on Windows and/or might be missing in some cases.
This does not have any documentation.",Thanks @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,825,2018-02-09T22:09:42Z,2018-02-10T00:04:51Z,2018-02-10T00:07:25Z,MERGED,True,44,0,2,https://github.com/dktapps,Fixed #761 - error output is swallowed without display_startup_errors…,1,[],https://github.com/krakjoe/pthreads/pull/825,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/825,"… directive
https://github.com/php/php-src/blob/a7fe2570d3ce6915d4ea85c62c0f880ddc225ba7/main/main.c#L1660-L1661
php_execute_script() does not get called on a pthreads thread, so this global is always 1 while the thread is running.","… directive
https://github.com/php/php-src/blob/a7fe2570d3ce6915d4ea85c62c0f880ddc225ba7/main/main.c#L1660-L1661
php_execute_script() does not get called on a pthreads thread, so this global is always 1 while the thread is running.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,825,2018-02-09T22:09:42Z,2018-02-10T00:04:51Z,2018-02-10T00:07:25Z,MERGED,True,44,0,2,https://github.com/dktapps,Fixed #761 - error output is swallowed without display_startup_errors…,1,[],https://github.com/krakjoe/pthreads/pull/825,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/825#issuecomment-364604537,"… directive
https://github.com/php/php-src/blob/a7fe2570d3ce6915d4ea85c62c0f880ddc225ba7/main/main.c#L1660-L1661
php_execute_script() does not get called on a pthreads thread, so this global is always 1 while the thread is running.",Thanks @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,826,2018-02-09T22:22:04Z,2018-02-09T23:20:22Z,2018-02-09T23:22:41Z,MERGED,True,2,2,1,https://github.com/dktapps,Socket: fix Unix socket test failure when ext/sockets is not present,2,[],https://github.com/krakjoe/pthreads/pull/826,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/826,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,826,2018-02-09T22:22:04Z,2018-02-09T23:20:22Z,2018-02-09T23:22:41Z,MERGED,True,2,2,1,https://github.com/dktapps,Socket: fix Unix socket test failure when ext/sockets is not present,2,[],https://github.com/krakjoe/pthreads/pull/826,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/826#issuecomment-364588462,,Could you add leading backslashes(\Socket)?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,826,2018-02-09T22:22:04Z,2018-02-09T23:20:22Z,2018-02-09T23:22:41Z,MERGED,True,2,2,1,https://github.com/dktapps,Socket: fix Unix socket test failure when ext/sockets is not present,2,[],https://github.com/krakjoe/pthreads/pull/826,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/826#issuecomment-364589457,,"@sirsnyder sure, if you like. This code is in the global namespace though so it doesn't make any difference.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,826,2018-02-09T22:22:04Z,2018-02-09T23:20:22Z,2018-02-09T23:22:41Z,MERGED,True,2,2,1,https://github.com/dktapps,Socket: fix Unix socket test failure when ext/sockets is not present,2,[],https://github.com/krakjoe/pthreads/pull/826,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/826#issuecomment-364597906,,@dktapps yes I know it's nitpicking but now it's consistent to other socket tests ;) Thanks!,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/827,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/827#issuecomment-364642294,,"This doesn't appear to be working - with a higher loop count as mentioned above (tested with and without fix) the test case fails with segfault.
The way I would hypothetically do this is to check the ZEND_ACC_CLOSURE flag on the function in pthreads_copy_function() and avoid using the HT if it is set. Your solution does make it clearer what is going on elsewhere though, although it could also be achieved with an extra parameter to pthreads_copy_function().",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/827#issuecomment-364667030,,"That's an odd behavior. This fix works perfectly well on my i5 machine(php 7.2). I use a loop of 100000 for tests. Without a fix, it crashes at third loop. I wanna avoid a extra parameter to  don't blow up logic in pthreads_copy_function(). Sure, there are other ways to solve and I'm open for them :) but first we have to find the differences why this fix is working on my machine and not on yours.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/827#issuecomment-364668370,,"never mind me, I'm not sure what I was doing this morning... I ran clean builds with 100k loops just now and everything worked fine (debug and release both). Possibly failed to checkout the branch because I downloaded the test case manually to run on master.
This is the fix I wrote this morning after thinking this wasn't working, but I guess it's not needed.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/827#issuecomment-369287959,,@dktapps I like your fix and have taken it over. @tpunt @krakjoe what do you think about this solution to prevent seg faults?,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/dktapps,6,https://github.com/krakjoe/pthreads/pull/827#issuecomment-369296233,,relevant issue: #812,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/sirsnyder,7,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426261173,,ping @tpunt @krakjoe any concerns? I would like to merge this PR within the next days.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/tpunt,8,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426302698,,What was the reason for the segfault in the first place? It is not clear to me why this causes a segfault.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/dktapps,9,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426315357,,@tpunt this was discussed here,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/tpunt,10,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426341479,,"@dktapps Right, I vaguely recall that issue. I never got around to debugging exactly why the function was prematurely freed from the resolve HT, though. Did you or @sirsnyder find out the reason for this?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/dktapps,11,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426344256,,"@tpunt the zend_function behind closures has its refcount decremented when the Closure encapsulating it goes out of scope. Since the functions in the resolve HT don't have an extra ref on the count for the HT itself, they get destroyed when the closure goes out of scope, causing a fault next time it's accessed.
As I mentioned in the issue, the bulletproof solution would be to add an extra ref to prevent things disappearing from the resolve HT, but this is complicated because the refs would have to be cleaned up, and previously it wasn't just funcs in the resolve HT.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/tpunt,12,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426428638,,"Ok, I see now. This fix looks like a good approach to me then. Whilst incrementing the refcount upon the initial insertion would prevent the copying overhead, handling the garbage collection of closures would be difficult to do efficiently and without introducing memory leaks, so it's not really worth it.",True,"{'THUMBS_UP': ['https://github.com/dktapps', 'https://github.com/sirsnyder']}"
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/sirsnyder,13,https://github.com/krakjoe/pthreads/pull/827#issuecomment-426473813,,"Fine. Yep, the copying overhead is not great but the detection of freed closures was a mess and if it was working, it was pretty slow.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,827,2018-02-10T01:15:16Z,2018-10-10T08:12:39Z,2018-10-10T13:57:16Z,MERGED,True,39,5,2,https://github.com/sirsnyder,Don't cache closures set as members in resolve HT,2,[],https://github.com/krakjoe/pthreads/pull/827,https://github.com/sirsnyder,14,https://github.com/krakjoe/pthreads/pull/827#issuecomment-428479587,,Thanks for your support @dktapps and @tpunt for review,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/828,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/828#issuecomment-367999909,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,@dktapps could you review and verify that the tests are working on windows?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/828#issuecomment-368124608,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,"@sirsnyder Other than the couple of comments I made, this looks fine to me.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/828#issuecomment-368803845,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,"Following tests are failing on Windows here with latest commits:
=====================================================================
Number of tests :  138               130
Tests skipped   :    8 (  5.8%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    3 (  2.2%) (  2.3%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :  127 ( 92.0%) ( 97.7%)
---------------------------------------------------------------------
Time taken      :    6 seconds
=====================================================================

=====================================================================
FAILED TEST SUMMARY
---------------------------------------------------------------------
IPv4 Loopback test [ext/pthreads/tests/socket-ipv4loop.phpt]
IPv6 Loopback test [ext/pthreads/tests/socket-ipv6loop.phpt]
Test of Socket::read() - testing type \Socket::PHP_NORMAL_READ and \Socket::PHP_BINARY_READ [ext/pthreads/tests/socket-read-type.phpt]
=====================================================================

socket-ipv4loop.log
socket-read-type.log
socket-ipv6loop.log",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/828#issuecomment-369254345,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,"@dktapps tests should be fixed now, can you confirm that for windows?",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/dktapps,6,https://github.com/krakjoe/pthreads/pull/828#issuecomment-369325182,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,All tests now passing on my machine.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,828,2018-02-10T22:42:44Z,2018-02-28T20:32:25Z,2018-02-28T20:43:31Z,MERGED,True,325,7,9,https://github.com/sirsnyder,706 - Socket::read() adds Socket::PHP_NORMAL_READ and Socket::PHP_BINARY_READ,4,[],https://github.com/krakjoe/pthreads/pull/828,https://github.com/sirsnyder,7,https://github.com/krakjoe/pthreads/pull/828#issuecomment-369372793,This PR adds $type to Socket::read() and the both constants Socket::PHP_NORMAL_READ as well as Socket::PHP_BINARY_READ to mimic php-src Sockets API. Four more tests were added.,Great! Thanks to you @dktapps and @tpunt for your support!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,829,2018-02-10T23:19:03Z,2018-02-15T14:27:00Z,2018-02-16T14:51:34Z,MERGED,True,125,7,3,https://github.com/sirsnyder,Ensure proper win32 sockets ,3,[],https://github.com/krakjoe/pthreads/pull/829,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/829,I've copied windows_commons.h from php-src to be sure all basic consts and vars are defined on win32. @dktapps could you test this branch please? Does it compile and work properly? Do you see any issues?,I've copied windows_commons.h from php-src to be sure all basic consts and vars are defined on win32. @dktapps could you test this branch please? Does it compile and work properly? Do you see any issues?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,829,2018-02-10T23:19:03Z,2018-02-15T14:27:00Z,2018-02-16T14:51:34Z,MERGED,True,125,7,3,https://github.com/sirsnyder,Ensure proper win32 sockets ,3,[],https://github.com/krakjoe/pthreads/pull/829,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/829#issuecomment-364760417,I've copied windows_commons.h from php-src to be sure all basic consts and vars are defined on win32. @dktapps could you test this branch please? Does it compile and work properly? Do you see any issues?,"AppVeyor isn't happy:
Creating library C:\projects\php-src\x64\Release_TS\php_pthreads.lib and object C:\projects\php-src\x64\Release_TS\php_pthreads.exp
socket.obj : error LNK2019: unresolved external symbol if_nametoindex referenced in function pthreads_socket_bind
C:\projects\php-src\x64\Release_TS\php_pthreads.dll : fatal error LNK1120: 1 unresolved externals
NMAKE : fatal error U1077: '""C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\bin\HostX64\x64\link.exe""' : return code '0x460'
Stop.
Command exited with code 2

I haven't looked at this in detail yet, will do so later.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,830,2018-02-11T19:42:51Z,2018-02-14T11:45:34Z,2018-02-15T16:27:07Z,MERGED,True,3,1,1,https://github.com/dktapps,Fixed missing libraries for Windows sockets,1,[],https://github.com/krakjoe/pthreads/pull/830,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/830,"I have no idea how this actually worked before now. @sirsnyder this fixes Windows build for #829  .
All tests pass when run locally on x64.","I have no idea how this actually worked before now. @sirsnyder this fixes Windows build for #829  .
All tests pass when run locally on x64.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,830,2018-02-11T19:42:51Z,2018-02-14T11:45:34Z,2018-02-15T16:27:07Z,MERGED,True,3,1,1,https://github.com/dktapps,Fixed missing libraries for Windows sockets,1,[],https://github.com/krakjoe/pthreads/pull/830,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/830#issuecomment-365580234,"I have no idea how this actually worked before now. @sirsnyder this fixes Windows build for #829  .
All tests pass when run locally on x64.",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,830,2018-02-11T19:42:51Z,2018-02-14T11:45:34Z,2018-02-15T16:27:07Z,MERGED,True,3,1,1,https://github.com/dktapps,Fixed missing libraries for Windows sockets,1,[],https://github.com/krakjoe/pthreads/pull/830,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/830#issuecomment-365941773,"I have no idea how this actually worked before now. @sirsnyder this fixes Windows build for #829  .
All tests pass when run locally on x64.",At least the inet6 stuff was not working in some cases. pthreads_socket_string_to_if_index returned always false.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,830,2018-02-11T19:42:51Z,2018-02-14T11:45:34Z,2018-02-15T16:27:07Z,MERGED,True,3,1,1,https://github.com/dktapps,Fixed missing libraries for Windows sockets,1,[],https://github.com/krakjoe/pthreads/pull/830,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/830#issuecomment-365981357,"I have no idea how this actually worked before now. @sirsnyder this fixes Windows build for #829  .
All tests pass when run locally on x64.","Yeah, I didn't test it in detail, just checked why it wasn't compiling.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/831,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/831#issuecomment-365184139,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","Since they are resources, I was under the impression they would be unsafe to copy from the origin thread? I thought it would be better to just recreate them on the child.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/krakjoe,3,https://github.com/krakjoe/pthreads/pull/831#issuecomment-365219436,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","Correct, this would be unsafe ...
There might be a way to do it by dup'ing the handles and using the streams API to reimport them in the new thread ... I'd go with that, if anything ...",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,None,4,https://github.com/krakjoe/pthreads/pull/831#issuecomment-431654624,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",@sirsnyder Is there any update on this?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/831#issuecomment-431710994,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","@CharlotteDunois Not yet, maybe in 3 or 4 weeks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,6,https://github.com/krakjoe/pthreads/pull/831#issuecomment-431724891,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",@CharlotteDunois @dktapps can anyone provide a simple test/example that crashes?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,7,https://github.com/krakjoe/pthreads/pull/831#issuecomment-433569785,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","@krakjoe can you have a look at the last commit in this PR, is the implementation ok?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/dktapps,8,https://github.com/krakjoe/pthreads/pull/831#issuecomment-446119316,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","@sirsnyder I don't know any crashing condition, but this is inherently unsafe anyway since these are resources.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,9,https://github.com/krakjoe/pthreads/pull/831#issuecomment-446166556,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",@dktapps from php vm perspective this should be ok. The resources are created per thread context and not shared between them. So there is no resource/memory dependency to another thread. What can happen are race conditions by reading/writing to the streams. Developers have to sync them by hand. I think I'll wait for that until FileStreams are implemented.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/tpunt,10,https://github.com/krakjoe/pthreads/pull/831#issuecomment-446739658,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","On the one hand, this seems fine to me. Multiple threads writing to the same output will obviously incur race conditions without any kind of synchronisation, so anyone using this should synchronise the access for predictable results (and I don't see any ways for this to crash from PHP's VM from such race conditions). But on the other hand, there's probably a nicer way to expose this, where writing is done in an atomic way (e.g. to write strings in full, implicitly serialising them one after another without having output interleaved).
I'm not against this PR, but I am curious to know what you have in mind with a FileStream class.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/dktapps,11,https://github.com/krakjoe/pthreads/pull/831#issuecomment-446756831,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","fwiw, the reason I originally wanted this was because I had some library code that did checks on STDOUT to check for ANSI colour code support (it disables colours on pipes). I didn't really put any consideration into how they would be used for actual stdio.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,12,https://github.com/krakjoe/pthreads/pull/831#issuecomment-453797118,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",@tpunt I have had the idea to replace the STD* constants by FileStream objects from https://github.com/krakjoe/pthreads/tree/streams. But that was just a crazy idea. I would say this stuff can get merged.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,13,https://github.com/krakjoe/pthreads/pull/831#issuecomment-457873079,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",Thanks to all involved!,True,{'THUMBS_UP': ['https://github.com/krakjoe']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/dktapps,14,https://github.com/krakjoe/pthreads/pull/831#issuecomment-461583934,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","This has caused some problems for PM on Windows. Threads hang on start until the user presses the enter key on the console. I'm still trying to gauge the scope of the issue and reproducing test case, but this is not bug free.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/dktapps,15,https://github.com/krakjoe/pthreads/pull/831#issuecomment-500416626,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583","@sirsnyder it would be appreciated if you could revert the merge, it makes things difficult for PRs since I have to omit this commit to be able to test anything.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,831,2018-02-12T23:44:22Z,2019-01-26T22:53:22Z,2019-06-14T23:30:24Z,MERGED,True,104,3,4,https://github.com/sirsnyder,"Copy stdin, stdout and stderr at thread creation",4,[],https://github.com/krakjoe/pthreads/pull/831,https://github.com/sirsnyder,16,https://github.com/krakjoe/pthreads/pull/831#issuecomment-502310353,"This PR copies the streams stdin, stdout and stderr(if available) to new threads at creation and independently of start options. See #806 and #583",@dktapps reverted,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,832,2018-02-15T10:57:52Z,2018-02-15T12:26:08Z,2018-02-15T12:43:27Z,MERGED,True,13,0,1,https://github.com/dktapps,Added Volatile class to stub,1,[],https://github.com/krakjoe/pthreads/pull/832,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/832,I don't know how this was missed.,I don't know how this was missed.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,832,2018-02-15T10:57:52Z,2018-02-15T12:26:08Z,2018-02-15T12:43:27Z,MERGED,True,13,0,1,https://github.com/dktapps,Added Volatile class to stub,1,[],https://github.com/krakjoe/pthreads/pull/832,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/832#issuecomment-365912499,I don't know how this was missed.,Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,833,2018-02-16T15:02:55Z,2018-02-17T20:24:18Z,2018-02-17T20:24:46Z,MERGED,True,73,9,6,https://github.com/sirsnyder,Rework of Socket::connect,1,[],https://github.com/krakjoe/pthreads/pull/833,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/833,"Parameter port can be optional on AF_UNIX sockets
Added some tests","Parameter port can be optional on AF_UNIX sockets
Added some tests",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,833,2018-02-16T15:02:55Z,2018-02-17T20:24:18Z,2018-02-17T20:24:46Z,MERGED,True,73,9,6,https://github.com/sirsnyder,Rework of Socket::connect,1,[],https://github.com/krakjoe/pthreads/pull/833,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/833#issuecomment-366259782,"Parameter port can be optional on AF_UNIX sockets
Added some tests",@dktapps could you do a review?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,833,2018-02-16T15:02:55Z,2018-02-17T20:24:18Z,2018-02-17T20:24:46Z,MERGED,True,73,9,6,https://github.com/sirsnyder,Rework of Socket::connect,1,[],https://github.com/krakjoe/pthreads/pull/833,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/833#issuecomment-366276045,"Parameter port can be optional on AF_UNIX sockets
Added some tests","Other than the couple of comments I made, I don't see a problem with this. I think it makes sense to mimic the sockets API in php-src where possible.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,833,2018-02-16T15:02:55Z,2018-02-17T20:24:18Z,2018-02-17T20:24:46Z,MERGED,True,73,9,6,https://github.com/sirsnyder,Rework of Socket::connect,1,[],https://github.com/krakjoe/pthreads/pull/833,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/833#issuecomment-366398737,"Parameter port can be optional on AF_UNIX sockets
Added some tests","@tpunt sockets API in php-src is the template I'm following. The details are tricky to find, I will need some time to complete.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,833,2018-02-16T15:02:55Z,2018-02-17T20:24:18Z,2018-02-17T20:24:46Z,MERGED,True,73,9,6,https://github.com/sirsnyder,Rework of Socket::connect,1,[],https://github.com/krakjoe/pthreads/pull/833,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/833#issuecomment-366468854,"Parameter port can be optional on AF_UNIX sockets
Added some tests",Thanks @tpunt and @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,835,2018-02-19T12:59:08Z,2018-02-22T10:38:06Z,2018-02-22T10:45:47Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed unnecessary nullable method signature BC breaks in PHP 7.1+,2,[],https://github.com/krakjoe/pthreads/pull/835,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/835,"In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.","In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,835,2018-02-19T12:59:08Z,2018-02-22T10:38:06Z,2018-02-22T10:45:47Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed unnecessary nullable method signature BC breaks in PHP 7.1+,2,[],https://github.com/krakjoe/pthreads/pull/835,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/835#issuecomment-367276912,"In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.","Yes, it's undocumented and buggy behavior. I think these changes are ok, also with a BC break.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,835,2018-02-19T12:59:08Z,2018-02-22T10:38:06Z,2018-02-22T10:45:47Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed unnecessary nullable method signature BC breaks in PHP 7.1+,2,[],https://github.com/krakjoe/pthreads/pull/835,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/835#issuecomment-367319787,"In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.","@tpunt what's your opinion about the BC break? Ok, not ok?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,835,2018-02-19T12:59:08Z,2018-02-22T10:38:06Z,2018-02-22T10:45:47Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed unnecessary nullable method signature BC breaks in PHP 7.1+,2,[],https://github.com/krakjoe/pthreads/pull/835,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/835#issuecomment-367321549,"In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.","@sirsnyder The 3.1.6 release doesn't have these issues since it was only compatible with PHP 7.0 anyway. The bug only exists in versions of pthreads compatible with PHP 7.1 (3.1.7dev only), which since it doesn't have a release, these fixes are technically not a BC break anyway (it doesn't break the released public API).
Also as discussed in #814 there are other BC breaks here which also haven't been covered in a new release, so this can be wrapped as a bugfix.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,835,2018-02-19T12:59:08Z,2018-02-22T10:38:06Z,2018-02-22T10:45:47Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed unnecessary nullable method signature BC breaks in PHP 7.1+,2,[],https://github.com/krakjoe/pthreads/pull/835,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/835#issuecomment-367358954,"In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.",I've pushed an additional fix to address the Pool::__construct() nulled typehints noted in #838 .,True,{'THUMBS_UP': ['https://github.com/tpunt']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,835,2018-02-19T12:59:08Z,2018-02-22T10:38:06Z,2018-02-22T10:45:47Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed unnecessary nullable method signature BC breaks in PHP 7.1+,2,[],https://github.com/krakjoe/pthreads/pull/835,https://github.com/tpunt,6,https://github.com/krakjoe/pthreads/pull/835#issuecomment-367640391,"In PHP 7.1+, these resulted in the signatures becoming ?typehint, which raises warnings when upgrading old code which overrides these methods. As it turns out, these parameters are not supposed to accept null at all (see the implementation).
These nullable flags are not necessary; it is sufficient to declare that only X parameters are needed.
This will break code written for pthreads 3.1.7dev which gave null explicitly to these methods; however the fact that these methods accept null is not documented anywhere and I think it is a bug.
This is backwards compatible with code which overrides these methods since parameter type widening allows this.","Merged, thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,837,2018-02-19T16:38:39Z,2018-02-22T10:44:00Z,2018-02-22T11:06:25Z,CLOSED,False,1,1,1,https://github.com/dktapps,Fixed wrong required argcount for Socket::bind(),1,[],https://github.com/krakjoe/pthreads/pull/837,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/837,see d882b1c#commitcomment-27584635,see d882b1c#commitcomment-27584635,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,837,2018-02-19T16:38:39Z,2018-02-22T10:44:00Z,2018-02-22T11:06:25Z,CLOSED,False,1,1,1,https://github.com/dktapps,Fixed wrong required argcount for Socket::bind(),1,[],https://github.com/krakjoe/pthreads/pull/837,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/837#issuecomment-367642068,see d882b1c#commitcomment-27584635,"Merged in 08ef45a, thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,838,2018-02-19T16:55:34Z,2018-02-22T10:49:34Z,2018-02-22T11:06:01Z,MERGED,True,207,217,1,https://github.com/dktapps,Fixed some issues with stub method signatures,2,[],https://github.com/krakjoe/pthreads/pull/838,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/838,"This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)","This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,838,2018-02-19T16:55:34Z,2018-02-22T10:49:34Z,2018-02-22T11:06:01Z,MERGED,True,207,217,1,https://github.com/dktapps,Fixed some issues with stub method signatures,2,[],https://github.com/krakjoe/pthreads/pull/838,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/838#issuecomment-367274956,"This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)",I've checked your changes and they are fine. It's ok if you reformat stub.php in a second commit. :),True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,838,2018-02-19T16:55:34Z,2018-02-22T10:49:34Z,2018-02-22T11:06:01Z,MERGED,True,207,217,1,https://github.com/dktapps,Fixed some issues with stub method signatures,2,[],https://github.com/krakjoe/pthreads/pull/838,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/838#issuecomment-367343164,"This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)","Other than the couple of comments I made on there, this patch looks fine to me.
PHP also has return typing that could be used in the stubs, too.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,838,2018-02-19T16:55:34Z,2018-02-22T10:49:34Z,2018-02-22T11:06:01Z,MERGED,True,207,217,1,https://github.com/dktapps,Fixed some issues with stub method signatures,2,[],https://github.com/krakjoe/pthreads/pull/838,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/838#issuecomment-367345875,"This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)","@tpunt as above, this was mostly done with a script, typehints have been added (or omitted) as per the arginfo already in place.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,838,2018-02-19T16:55:34Z,2018-02-22T10:49:34Z,2018-02-22T11:06:01Z,MERGED,True,207,217,1,https://github.com/dktapps,Fixed some issues with stub method signatures,2,[],https://github.com/krakjoe/pthreads/pull/838,https://github.com/tpunt,5,https://github.com/krakjoe/pthreads/pull/838#issuecomment-367353301,"This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)","@dktapps Ok. Since it isn't going to be possible to add return typing to the arg infos, I guess it will have to be left to the doc comments (that, or updated manually, which is less desirable).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,838,2018-02-19T16:55:34Z,2018-02-22T10:49:34Z,2018-02-22T11:06:01Z,MERGED,True,207,217,1,https://github.com/dktapps,Fixed some issues with stub method signatures,2,[],https://github.com/krakjoe/pthreads/pull/838,https://github.com/tpunt,6,https://github.com/krakjoe/pthreads/pull/838#issuecomment-367643532,"This updates the stub to match pthreads v3 properly, as per the arginfo of the extension. Some issues were discovered in the process (see #835 and #836), so method signatures have been adjusted to match the documentation where there are mismatches.
The formatting in this file is very inconsistent, I went to great pains to avoid reformatting it to avoid polluting the diff. If it's desirable to have a reformat in this PR, let me know, but please don't squash-merge. :)","Merged, thanks.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,839,2018-02-19T23:58:23Z,2018-02-22T15:56:23Z,2018-02-23T10:44:38Z,MERGED,True,310,120,12,https://github.com/sirsnyder,Rework of sockets to mimic php-src sockets API,2,[],https://github.com/krakjoe/pthreads/pull/839,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/839,"Macros PTHREADS_SOCKET_ERROR and PTHREADS_HANDLE_SOCKET_ERROR extended by msg and eno for detailed exceptions
Extended error handling
Bug fix in Socket::getOption()
Param sec of Socket::select() is mandatory. Valid values are 0, > 0 and null.
Param port of Socket::bind() is optional, default value is 0.
Param backlog of Socket::listen() ist optional, default value is 0.
Added serveral tests","Macros PTHREADS_SOCKET_ERROR and PTHREADS_HANDLE_SOCKET_ERROR extended by msg and eno for detailed exceptions
Extended error handling
Bug fix in Socket::getOption()
Param sec of Socket::select() is mandatory. Valid values are 0, > 0 and null.
Param port of Socket::bind() is optional, default value is 0.
Param backlog of Socket::listen() ist optional, default value is 0.
Added serveral tests",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,839,2018-02-19T23:58:23Z,2018-02-22T15:56:23Z,2018-02-23T10:44:38Z,MERGED,True,310,120,12,https://github.com/sirsnyder,Rework of sockets to mimic php-src sockets API,2,[],https://github.com/krakjoe/pthreads/pull/839,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/839#issuecomment-366950145,"Macros PTHREADS_SOCKET_ERROR and PTHREADS_HANDLE_SOCKET_ERROR extended by msg and eno for detailed exceptions
Extended error handling
Bug fix in Socket::getOption()
Param sec of Socket::select() is mandatory. Valid values are 0, > 0 and null.
Param port of Socket::bind() is optional, default value is 0.
Param backlog of Socket::listen() ist optional, default value is 0.
Added serveral tests","@dktapps @tpunt please review this PR. Looks like Appveyor has problems with phpsdk_deps, don't know why. (Edit: https://twitter.com/nikita_ppv/status/965905195019526145)
After this PR has been merged, more additions and tests has to come. PR #828, extension of get/setOptions(), importStream()/exportSocket() and getErrorMessage() are in preparation. Later on the IPV6 stuff.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,839,2018-02-19T23:58:23Z,2018-02-22T15:56:23Z,2018-02-23T10:44:38Z,MERGED,True,310,120,12,https://github.com/sirsnyder,Rework of sockets to mimic php-src sockets API,2,[],https://github.com/krakjoe/pthreads/pull/839,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/839#issuecomment-367647678,"Macros PTHREADS_SOCKET_ERROR and PTHREADS_HANDLE_SOCKET_ERROR extended by msg and eno for detailed exceptions
Extended error handling
Bug fix in Socket::getOption()
Param sec of Socket::select() is mandatory. Valid values are 0, > 0 and null.
Param port of Socket::bind() is optional, default value is 0.
Param backlog of Socket::listen() ist optional, default value is 0.
Added serveral tests","@tpunt thanks for your review so far, any further notes?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,839,2018-02-19T23:58:23Z,2018-02-22T15:56:23Z,2018-02-23T10:44:38Z,MERGED,True,310,120,12,https://github.com/sirsnyder,Rework of sockets to mimic php-src sockets API,2,[],https://github.com/krakjoe/pthreads/pull/839,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/839#issuecomment-367790582,"Macros PTHREADS_SOCKET_ERROR and PTHREADS_HANDLE_SOCKET_ERROR extended by msg and eno for detailed exceptions
Extended error handling
Bug fix in Socket::getOption()
Param sec of Socket::select() is mandatory. Valid values are 0, > 0 and null.
Param port of Socket::bind() is optional, default value is 0.
Param backlog of Socket::listen() ist optional, default value is 0.
Added serveral tests",I will start a second branch for fixes,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,839,2018-02-19T23:58:23Z,2018-02-22T15:56:23Z,2018-02-23T10:44:38Z,MERGED,True,310,120,12,https://github.com/sirsnyder,Rework of sockets to mimic php-src sockets API,2,[],https://github.com/krakjoe/pthreads/pull/839,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/839#issuecomment-367974865,"Macros PTHREADS_SOCKET_ERROR and PTHREADS_HANDLE_SOCKET_ERROR extended by msg and eno for detailed exceptions
Extended error handling
Bug fix in Socket::getOption()
Param sec of Socket::select() is mandatory. Valid values are 0, > 0 and null.
Param port of Socket::bind() is optional, default value is 0.
Param backlog of Socket::listen() ist optional, default value is 0.
Added serveral tests",Thanks @tpunt and @dktapps for your support!,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,840,2018-02-21T14:00:03Z,2018-02-28T15:38:22Z,2018-02-28T15:39:09Z,MERGED,True,29,0,4,https://github.com/sirsnyder,New static method Socket::strerror(),1,[],https://github.com/krakjoe/pthreads/pull/840,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/840,Added missing method Socket::strerror(int $error):?string equal to php-src sockets API,Added missing method Socket::strerror(int $error):?string equal to php-src sockets API,True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,840,2018-02-21T14:00:03Z,2018-02-28T15:38:22Z,2018-02-28T15:39:09Z,MERGED,True,29,0,4,https://github.com/sirsnyder,New static method Socket::strerror(),1,[],https://github.com/krakjoe/pthreads/pull/840,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/840#issuecomment-367764988,Added missing method Socket::strerror(int $error):?string equal to php-src sockets API,"I've given it a quick review, and it seems that this implementation deviates from the socket_strerror implementation in php-src, causing some different outputs. For example:
<?php

var_dump(
    Socket::strerror(-10001)
);

var_dump(
    socket_strerror(-10001)
);
Outputs:
string(21) ""Unknown error: -10001""
string(12) ""Unknown host""

I'm not entirely sure why the php-src implementation does this, or why it's specifically not for Windows. That should probably be looked into before merging this.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,840,2018-02-21T14:00:03Z,2018-02-28T15:38:22Z,2018-02-28T15:39:09Z,MERGED,True,29,0,4,https://github.com/sirsnyder,New static method Socket::strerror(),1,[],https://github.com/krakjoe/pthreads/pull/840,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/840#issuecomment-367802041,Added missing method Socket::strerror(int $error):?string equal to php-src sockets API,php-src moves error codes from getaddrinfo() in space beneath -10000 on unix. Appropriate error codes are defined in php_gai_strerror() but not used. I would like to add these separate error codes with the implementation of socket_addrinfo_*,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,840,2018-02-21T14:00:03Z,2018-02-28T15:38:22Z,2018-02-28T15:39:09Z,MERGED,True,29,0,4,https://github.com/sirsnyder,New static method Socket::strerror(),1,[],https://github.com/krakjoe/pthreads/pull/840,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/840#issuecomment-367821900,Added missing method Socket::strerror(int $error):?string equal to php-src sockets API,"Ah, that makes more sense, thanks. This looks good to me then.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,840,2018-02-21T14:00:03Z,2018-02-28T15:38:22Z,2018-02-28T15:39:09Z,MERGED,True,29,0,4,https://github.com/sirsnyder,New static method Socket::strerror(),1,[],https://github.com/krakjoe/pthreads/pull/840,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/840#issuecomment-369278844,Added missing method Socket::strerror(int $error):?string equal to php-src sockets API,Thanks @tpunt and @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,841,2018-02-22T16:42:19Z,2018-02-25T20:44:10Z,2018-04-12T15:38:11Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed signatures of Worker::collect() and Pool::collect(),2,[],https://github.com/krakjoe/pthreads/pull/841,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/841,"This fixes #836 (incorrect arginfo, again ^.^) - the implementations of these methods accept any callable, but the arginfo demanded Closure objects (break from v2). Since these are documented as accepting callable, this should be treated as a bug.
Also fixes Pool::collect()'s optional parameter.","This fixes #836 (incorrect arginfo, again ^.^) - the implementations of these methods accept any callable, but the arginfo demanded Closure objects (break from v2). Since these are documented as accepting callable, this should be treated as a bug.
Also fixes Pool::collect()'s optional parameter.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,841,2018-02-22T16:42:19Z,2018-02-25T20:44:10Z,2018-04-12T15:38:11Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed signatures of Worker::collect() and Pool::collect(),2,[],https://github.com/krakjoe/pthreads/pull/841,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/841#issuecomment-367770209,"This fixes #836 (incorrect arginfo, again ^.^) - the implementations of these methods accept any callable, but the arginfo demanded Closure objects (break from v2). Since these are documented as accepting callable, this should be treated as a bug.
Also fixes Pool::collect()'s optional parameter.",Technical side of the patch looks good to me.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,841,2018-02-22T16:42:19Z,2018-02-25T20:44:10Z,2018-04-12T15:38:11Z,MERGED,True,4,4,3,https://github.com/dktapps,Fixed signatures of Worker::collect() and Pool::collect(),2,[],https://github.com/krakjoe/pthreads/pull/841,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/841#issuecomment-368342897,"This fixes #836 (incorrect arginfo, again ^.^) - the implementations of these methods accept any callable, but the arginfo demanded Closure objects (break from v2). Since these are documented as accepting callable, this should be treated as a bug.
Also fixes Pool::collect()'s optional parameter.","Merged, thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,842,2018-02-23T01:25:05Z,2018-02-23T10:41:23Z,2018-02-23T10:41:28Z,MERGED,True,141,32,9,https://github.com/sirsnyder,Fixed sockets tests + stub,1,[],https://github.com/krakjoe/pthreads/pull/842,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/842,Continuation of PR #839,Continuation of PR #839,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,842,2018-02-23T01:25:05Z,2018-02-23T10:41:23Z,2018-02-23T10:41:28Z,MERGED,True,141,32,9,https://github.com/sirsnyder,Fixed sockets tests + stub,1,[],https://github.com/krakjoe/pthreads/pull/842,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/842#issuecomment-367880214,Continuation of PR #839,@dktapps could you check and review this PR please?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,844,2018-02-27T16:53:32Z,,2018-03-02T09:35:31Z,OPEN,False,101,0,5,https://github.com/sirsnyder,Added static method Socket::createListen(),1,[],https://github.com/krakjoe/pthreads/pull/844,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/844,"Static method createListen() wraps create(), bind() and listen() in one call
added one test","Static method createListen() wraps create(), bind() and listen() in one call
added one test",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,844,2018-02-27T16:53:32Z,,2018-03-02T09:35:31Z,OPEN,False,101,0,5,https://github.com/sirsnyder,Added static method Socket::createListen(),1,[],https://github.com/krakjoe/pthreads/pull/844,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/844#issuecomment-369425768,"Static method createListen() wraps create(), bind() and listen() in one call
added one test",@dktapps @tpunt please review,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,845,2018-02-28T23:14:45Z,,2019-01-14T00:02:59Z,OPEN,False,91,0,6,https://github.com/sirsnyder,Added method Socket::shutdown(),5,[],https://github.com/krakjoe/pthreads/pull/845,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/845,"Method shutdown() added
added one test","Method shutdown() added
added one test",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,845,2018-02-28T23:14:45Z,,2019-01-14T00:02:59Z,OPEN,False,91,0,6,https://github.com/sirsnyder,Added method Socket::shutdown(),5,[],https://github.com/krakjoe/pthreads/pull/845,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/845#issuecomment-369417971,"Method shutdown() added
added one test",@dktapps please review,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,845,2018-02-28T23:14:45Z,,2019-01-14T00:02:59Z,OPEN,False,91,0,6,https://github.com/sirsnyder,Added method Socket::shutdown(),5,[],https://github.com/krakjoe/pthreads/pull/845,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/845#issuecomment-369874400,"Method shutdown() added
added one test","Experiencing test failures:
socket-shutdown.log",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,846,2018-03-05T14:38:02Z,2018-08-22T23:12:00Z,2019-01-11T22:47:07Z,MERGED,True,3,1,1,https://github.com/dktapps,"Fixed leaking pthread_mutexattr_t on Windows, closes #822",1,[],https://github.com/krakjoe/pthreads/pull/846,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/846,"This bug occurs due to implementation differences in pthread-w32 vs other platforms. In glibc, pthread_mutexattr_destroy is a no-op, so not calling it did no harm, but in pthread-w32 it actually does something important, i.e. freeing memory.
This bug was discovered using Visual Studio memory profiler. It may affect other platforms depending on the libc in use.
I haven't written tests for this because observing it from an automated standpoint to watch for leaks is tedious and takes a long time. However, this fix has been tested manually with the test script in #822 and is confirmed to fix the leak for Windows.","This bug occurs due to implementation differences in pthread-w32 vs other platforms. In glibc, pthread_mutexattr_destroy is a no-op, so not calling it did no harm, but in pthread-w32 it actually does something important, i.e. freeing memory.
This bug was discovered using Visual Studio memory profiler. It may affect other platforms depending on the libc in use.
I haven't written tests for this because observing it from an automated standpoint to watch for leaks is tedious and takes a long time. However, this fix has been tested manually with the test script in #822 and is confirmed to fix the leak for Windows.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,846,2018-03-05T14:38:02Z,2018-08-22T23:12:00Z,2019-01-11T22:47:07Z,MERGED,True,3,1,1,https://github.com/dktapps,"Fixed leaking pthread_mutexattr_t on Windows, closes #822",1,[],https://github.com/krakjoe/pthreads/pull/846,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/846#issuecomment-370465063,"This bug occurs due to implementation differences in pthread-w32 vs other platforms. In glibc, pthread_mutexattr_destroy is a no-op, so not calling it did no harm, but in pthread-w32 it actually does something important, i.e. freeing memory.
This bug was discovered using Visual Studio memory profiler. It may affect other platforms depending on the libc in use.
I haven't written tests for this because observing it from an automated standpoint to watch for leaks is tedious and takes a long time. However, this fix has been tested manually with the test script in #822 and is confirmed to fix the leak for Windows.","The implementation detail here is that pthread_mutexattr_t is merely a struct in regular POSIX implementations, but is a pointer to a pthread_mutexattr_t_ in pthreadw32. The memory allocated for the structure is allocated on the heap by pthread_mutexattr_init() and as such needs to be freed. Thus the missing destroy() call causes the memory to leak.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,846,2018-03-05T14:38:02Z,2018-08-22T23:12:00Z,2019-01-11T22:47:07Z,MERGED,True,3,1,1,https://github.com/dktapps,"Fixed leaking pthread_mutexattr_t on Windows, closes #822",1,[],https://github.com/krakjoe/pthreads/pull/846,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/846#issuecomment-415217143,"This bug occurs due to implementation differences in pthread-w32 vs other platforms. In glibc, pthread_mutexattr_destroy is a no-op, so not calling it did no harm, but in pthread-w32 it actually does something important, i.e. freeing memory.
This bug was discovered using Visual Studio memory profiler. It may affect other platforms depending on the libc in use.
I haven't written tests for this because observing it from an automated standpoint to watch for leaks is tedious and takes a long time. However, this fix has been tested manually with the test script in #822 and is confirmed to fix the leak for Windows.",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,847,2018-03-05T14:43:01Z,2018-03-05T15:42:54Z,2018-03-05T15:46:53Z,MERGED,True,1,1,1,https://github.com/dktapps,Fix AppVeyor crashing during build,1,[],https://github.com/krakjoe/pthreads/pull/847,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/847,"Fatal error: Uncaught SDK\Exception: Failed to fetch supported branches in C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php:155
Stack trace:
#0 C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php(165): SDK\Config::getKnownBranches()
#1 C:\projects\php-sdk\bin\phpsdk_deps.php(99): SDK\Config::setCurrentBranchName('7.2')
#2 {main}
  thrown in C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php on line 155
Command exited with code 255

Newer SDK fixes this issue (I hit the same bug on my own projects this morning).","Fatal error: Uncaught SDK\Exception: Failed to fetch supported branches in C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php:155
Stack trace:
#0 C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php(165): SDK\Config::getKnownBranches()
#1 C:\projects\php-sdk\bin\phpsdk_deps.php(99): SDK\Config::setCurrentBranchName('7.2')
#2 {main}
  thrown in C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php on line 155
Command exited with code 255

Newer SDK fixes this issue (I hit the same bug on my own projects this morning).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,847,2018-03-05T14:43:01Z,2018-03-05T15:42:54Z,2018-03-05T15:46:53Z,MERGED,True,1,1,1,https://github.com/dktapps,Fix AppVeyor crashing during build,1,[],https://github.com/krakjoe/pthreads/pull/847,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/847#issuecomment-370460991,"Fatal error: Uncaught SDK\Exception: Failed to fetch supported branches in C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php:155
Stack trace:
#0 C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php(165): SDK\Config::getKnownBranches()
#1 C:\projects\php-sdk\bin\phpsdk_deps.php(99): SDK\Config::setCurrentBranchName('7.2')
#2 {main}
  thrown in C:\projects\php-sdk\lib\php\libsdk\SDK\Config.php on line 155
Command exited with code 255

Newer SDK fixes this issue (I hit the same bug on my own projects this morning).",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,860,2018-04-24T14:58:36Z,2018-09-05T00:06:30Z,2019-01-11T22:48:45Z,MERGED,True,6,0,1,https://github.com/dktapps,Guard against returning uninitialized variables in switch-cases,1,[],https://github.com/krakjoe/pthreads/pull/860,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/860,"VS2017 code analysis complains about ""Using uninitialized memory 'retval'"". While these cases should theoretically never get hit, they shouldn't be returning uninitialized variables anyway.","VS2017 code analysis complains about ""Using uninitialized memory 'retval'"". While these cases should theoretically never get hit, they shouldn't be returning uninitialized variables anyway.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,860,2018-04-24T14:58:36Z,2018-09-05T00:06:30Z,2019-01-11T22:48:45Z,MERGED,True,6,0,1,https://github.com/dktapps,Guard against returning uninitialized variables in switch-cases,1,[],https://github.com/krakjoe/pthreads/pull/860,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/860#issuecomment-418556468,"VS2017 code analysis complains about ""Using uninitialized memory 'retval'"". While these cases should theoretically never get hit, they shouldn't be returning uninitialized variables anyway.",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/861,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.",True,"{'THUMBS_UP': ['https://github.com/Muqsit', 'https://github.com/L3ice', 'https://github.com/eqMFqfFd', 'https://github.com/Frago9876543210']}"
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/861#issuecomment-412031461,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","It appears this is to do with the array serialization happening on the wrong thread.
pthreads serializes and unserializes statics on the child thread. The problem with this is that serialization can cause objects to be modified (for example reallocating the properties table when it doesn't exist), which then cause memory errors later on when they try to be destroyed on the main thread.
The solution to this appears to be to do all static serialization on the main thread before thread start, and then unserialize on the child.
A similar issue is in effect with the exception-handler-options test failure - see pmmp/pthreads@0c28adb for a solution.
Obviously a similar solution for statics would be rather more complex, and I really don't want to go down this avenue, but I see no other solution to the problem.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/861#issuecomment-427742788,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","I've spent some days with research, debugging and tests and come to same conclusion. My approach was, to initially clean copy the objects to be serialized but even that was error prune. As an example, zend_array_dup allocates a new Hashtable though, but the containing zvals are shared (also their zend_refcounted object) and their refcounter incremented. If you just replace the zval with a new one, it leaks at shutdown, cause of the wrong refcount. A call of zval_ptr_dtor adds the zval of Thread 1 to the GC (as root object) of Thread 2 and that is one reason (of several possible) for the shutdown segfault.
At the moment I assume that I will take over your approach.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/861#issuecomment-427751714,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","My solution is a nasty one. I'd love to see a better one if you have any ideas.
I'm dicing with the thought of an intermediary pthreads_store (like the property store, but inaccessible to user code) which things would be fed through from the main thread. That's a nasty solution also, but less nasty than others I had in mind.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/861#issuecomment-427752273,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","I also experimented with switching TSRM contexts, but didn't get anywhere with that (perhaps because of TSRM static cache, but I barely have an idea what I'm doing there, so it's dangerous territory).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/sirsnyder,6,https://github.com/krakjoe/pthreads/pull/861#issuecomment-428104116,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","I think your exception handler solution is basically ok. But the situation with static properties is difficult. I thought about a separate pthreads_store too. Problem here is however, the zend vm doesn't provide any handler to read/write of static properties. At least I can't find any in code or docs.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,7,https://github.com/krakjoe/pthreads/pull/861#issuecomment-428107427,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","Read/write is thread local, so that isn't an issue. There just needs to be an intermediary to copying statics when classes are copied to the child thread (on thread start and on worker task submit).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/sirsnyder,8,https://github.com/krakjoe/pthreads/pull/861#issuecomment-428117738,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","Jep, these are thread local. But what bothers me, would be the gap between serialization in pthreads_prepare_parent and unserialization later on in the new thread. In this time, there can happen a lot. Static properties may change, classes were added and also small potential for race conditions. With a proper vm handler, pthreads could track static properties continously. I'm still thinking about that.",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,9,https://github.com/krakjoe/pthreads/pull/861#issuecomment-429519035,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","In all honesty, the selective inheritance of statics (inherit primitives and arrays) is confusing and a royal pain in the ass. Real thread-locals do not behave this way (for example in C++11), so I do not see why they should in pthreads. Instead I think copying should be confined to only default static members, and not assigned values. This would kill several birds with one stone, at the expense of a BC break.",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,10,https://github.com/krakjoe/pthreads/pull/861#issuecomment-429519122,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","Additionally this may also be a problem with local static variables, but I haven't tested this.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/sirsnyder,11,https://github.com/krakjoe/pthreads/pull/861#issuecomment-429528872,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","I'm completely with you. I've a branch(sirsnyder@ec8fad8) in my fork, to stay compatible with the latest official release 3.1.6. The BC break is another point. We had so many changes and enhancements in the last two years, maybe we should go up to pthreads 4.
I'll change the copying within the next days as you suggested. At the moment I'm still busy with #873 ;-) Local static variables should not be affected. As far as I know, they are copied in pthreads_copy_user_function",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,12,https://github.com/krakjoe/pthreads/pull/861#issuecomment-429576650,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","From what I could see, anything where the serialization happened in the wrong context could potentially be affected. Constants would also be, but there are no ways to define complex constants which would reproduce this bug. Local static variables also - they exhibit the same behaviour as class statics wrt. copying, so I would expect they would be impacted by this bug too, but I'd need to test that.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/sirsnyder,13,https://github.com/krakjoe/pthreads/pull/861#issuecomment-429839356,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.",A first draft 00779ab. Works very well with your attached statics-modify-copied-object-array test. Three tests are failing because of the BC break.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/dktapps,14,https://github.com/krakjoe/pthreads/pull/861#issuecomment-454394878,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","One thing I don't understand on further investigation. pthreads is already only copying the default_static_members_table, which is apparently not default static members (as far as I can tell). Bug in php-src or no?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,861,2018-04-24T19:03:51Z,2020-07-26T19:27:28Z,2020-07-26T19:27:28Z,CLOSED,False,45,0,1,https://github.com/dktapps,Add test for crash when modifying static array after thread start,1,[],https://github.com/krakjoe/pthreads/pull/861,https://github.com/krakjoe,15,https://github.com/krakjoe/pthreads/pull/861#issuecomment-454495474,"I haven't been able to find the root cause of this issue yet, but it stems from pthreads' handling of copied static arrays.
When pthreads copies a static array, modifying the array on the parent thread triggers heap corruption and other nasties for reasons I am yet to fully understand.
The test case in the PR demonstrates the bug. It needs to be noted that:

the crash does not occur unless the PTHREADS_INHERIT_CLASSES flag is enabled (hence, it is to do with the way static arrays are being handled)
the crash occurs in GC when removing members of the array (Test::$array = []; works, also unset(Test::$array[0]);)
the crash only appears to occur if Test::$array is modified while the thread is running (hence the use of a Worker to demonstrate)
the crash does not occur if the static array is populated with scalar values or arrays, only objects.","1238300
In statics branch is some work on fixing this problem ... you may develop the store further using the copy routines that I've nicked from krakjoe/sandbox ... one test is failing, I dunno why ... this test passes but I didn't commit it ...
I may come back to this one weekend, or you may holla to ask questions, but I think you'll probably get it before me ;)",True,{'HEART': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,863,2018-05-04T09:38:02Z,,2018-05-08T09:30:58Z,OPEN,False,17,8,4,https://github.com/dktapps,Don't silence SOCK_EINVAL errors,1,[],https://github.com/krakjoe/pthreads/pull/863,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/863,"Silently returning false on invalid arguments is incredibly annoying and frustrating because it conceals bugs. This pull request changes the PTHREADS_HANDLE_SOCKET_ERROR macro to throw RuntimeException when receiving an EINVAL error.
This change makes several bugs in tests apparent, which will be fixed in later commits.","Silently returning false on invalid arguments is incredibly annoying and frustrating because it conceals bugs. This pull request changes the PTHREADS_HANDLE_SOCKET_ERROR macro to throw RuntimeException when receiving an EINVAL error.
This change makes several bugs in tests apparent, which will be fixed in later commits.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,863,2018-05-04T09:38:02Z,,2018-05-08T09:30:58Z,OPEN,False,17,8,4,https://github.com/dktapps,Don't silence SOCK_EINVAL errors,1,[],https://github.com/krakjoe/pthreads/pull/863,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/863#issuecomment-386552555,"Silently returning false on invalid arguments is incredibly annoying and frustrating because it conceals bugs. This pull request changes the PTHREADS_HANDLE_SOCKET_ERROR macro to throw RuntimeException when receiving an EINVAL error.
This change makes several bugs in tests apparent, which will be fixed in later commits.","It might also be worthwhile adding higher-level detection for invalid calls on sockets - as we saw here, calling listen() on an unbound socket will raise a cryptic InvalidArgumentException instead of something more sensible - listen() raises exceptions like this because you can't listen() on an unbound socket.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,863,2018-05-04T09:38:02Z,,2018-05-08T09:30:58Z,OPEN,False,17,8,4,https://github.com/dktapps,Don't silence SOCK_EINVAL errors,1,[],https://github.com/krakjoe/pthreads/pull/863,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/863#issuecomment-386565751,"Silently returning false on invalid arguments is incredibly annoying and frustrating because it conceals bugs. This pull request changes the PTHREADS_HANDLE_SOCKET_ERROR macro to throw RuntimeException when receiving an EINVAL error.
This change makes several bugs in tests apparent, which will be fixed in later commits.","Annoyingly most cases where this actually raises exceptions are not due to invalid arguments, however EINVAL still shouldn't be silenced because it hides bugs.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,864,2018-05-04T09:45:55Z,2019-01-13T14:14:38Z,2019-01-13T14:26:15Z,MERGED,True,24,12,5,https://github.com/dktapps,Improvements & fixes for Socket::shutdown() PR,7,[],https://github.com/krakjoe/pthreads/pull/864,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/864,@sirsnyder this one's for you - some suggested alterations of my own for #845,@sirsnyder this one's for you - some suggested alterations of my own for #845,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,864,2018-05-04T09:45:55Z,2019-01-13T14:14:38Z,2019-01-13T14:26:15Z,MERGED,True,24,12,5,https://github.com/dktapps,Improvements & fixes for Socket::shutdown() PR,7,[],https://github.com/krakjoe/pthreads/pull/864,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/864#issuecomment-386808755,@sirsnyder this one's for you - some suggested alterations of my own for #845,"updated, thanks!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,864,2018-05-04T09:45:55Z,2019-01-13T14:14:38Z,2019-01-13T14:26:15Z,MERGED,True,24,12,5,https://github.com/dktapps,Improvements & fixes for Socket::shutdown() PR,7,[],https://github.com/krakjoe/pthreads/pull/864,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/864#issuecomment-453833307,@sirsnyder this one's for you - some suggested alterations of my own for #845,Many thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,865,2018-05-04T12:47:02Z,,2018-05-08T10:07:19Z,OPEN,False,78,99,5,https://github.com/dktapps,Sockets: Improve consistency when dealing with invalid arguments,3,[],https://github.com/krakjoe/pthreads/pull/865,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/865,"Use InvalidArgumentException where appropriate instead of RuntimeException and/or returning false.
Fixed undefined behaviour when a negative usec value was given to Socket::select().
Fixed compiler warning due to above point (casting signed to unsigned).
Make Socket::select() behave consistently across all platforms with regards to timeouts.","Use InvalidArgumentException where appropriate instead of RuntimeException and/or returning false.
Fixed undefined behaviour when a negative usec value was given to Socket::select().
Fixed compiler warning due to above point (casting signed to unsigned).
Make Socket::select() behave consistently across all platforms with regards to timeouts.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,865,2018-05-04T12:47:02Z,,2018-05-08T10:07:19Z,OPEN,False,78,99,5,https://github.com/dktapps,Sockets: Improve consistency when dealing with invalid arguments,3,[],https://github.com/krakjoe/pthreads/pull/865,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/865#issuecomment-386865607,"Use InvalidArgumentException where appropriate instead of RuntimeException and/or returning false.
Fixed undefined behaviour when a negative usec value was given to Socket::select().
Fixed compiler warning due to above point (casting signed to unsigned).
Make Socket::select() behave consistently across all platforms with regards to timeouts.","@tpunt with regards to the previously-mentioned problems with return values on not enough arguments, I think it makes sense to instead use zend_parse_parameters_throw() on the Socket API.
That way we get ArgumentCountError instead of this stupid problem with warnings and useless returns.
throwing is also more consistent with userland code, for example:
<?php

function test($a, $b, $c, $d){

}

\Socket::select();
test();
emits:
Warning: Socket::select() expects at least 4 parameters, 0 given in test.php on line 7

Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in test.php on line 8 and exactly 4 expected in test.php:3
Stack trace:
#0 test.php(8): test()
#1 {main}
  thrown in test.php on line 3

If that's something worth having, it could also go into this PR. I don't think it makes sense to stick with the legacy warnings.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,865,2018-05-04T12:47:02Z,,2018-05-08T10:07:19Z,OPEN,False,78,99,5,https://github.com/dktapps,Sockets: Improve consistency when dealing with invalid arguments,3,[],https://github.com/krakjoe/pthreads/pull/865,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/865#issuecomment-386865712,"Use InvalidArgumentException where appropriate instead of RuntimeException and/or returning false.
Fixed undefined behaviour when a negative usec value was given to Socket::select().
Fixed compiler warning due to above point (casting signed to unsigned).
Make Socket::select() behave consistently across all platforms with regards to timeouts.",It might also be worth migrating to the new ZPP API - these symbols give me a headache 😅,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,865,2018-05-04T12:47:02Z,,2018-05-08T10:07:19Z,OPEN,False,78,99,5,https://github.com/dktapps,Sockets: Improve consistency when dealing with invalid arguments,3,[],https://github.com/krakjoe/pthreads/pull/865,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/865#issuecomment-386866453,"Use InvalidArgumentException where appropriate instead of RuntimeException and/or returning false.
Fixed undefined behaviour when a negative usec value was given to Socket::select().
Fixed compiler warning due to above point (casting signed to unsigned).
Make Socket::select() behave consistently across all platforms with regards to timeouts.","to be honest I also don't really understand why throwing is opt-in, given that it automatically applies to user code anyway. 🤷‍♂️",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,865,2018-05-04T12:47:02Z,,2018-05-08T10:07:19Z,OPEN,False,78,99,5,https://github.com/dktapps,Sockets: Improve consistency when dealing with invalid arguments,3,[],https://github.com/krakjoe/pthreads/pull/865,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/865#issuecomment-387352879,"Use InvalidArgumentException where appropriate instead of RuntimeException and/or returning false.
Fixed undefined behaviour when a negative usec value was given to Socket::select().
Fixed compiler warning due to above point (casting signed to unsigned).
Make Socket::select() behave consistently across all platforms with regards to timeouts.","The changes in this PR conflict with #863 - if that's merged before this, this will need further alterations (to fix tests).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,866,2018-05-04T13:18:33Z,2018-09-13T00:41:48Z,2018-09-13T07:15:10Z,MERGED,True,4,0,1,https://github.com/dktapps,Travis: Allow failures of nightly PHP builds,1,[],https://github.com/krakjoe/pthreads/pull/866,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/866,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,866,2018-05-04T13:18:33Z,2018-09-13T00:41:48Z,2018-09-13T07:15:10Z,MERGED,True,4,0,1,https://github.com/dktapps,Travis: Allow failures of nightly PHP builds,1,[],https://github.com/krakjoe/pthreads/pull/866,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/866#issuecomment-420844264,,Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,874,2018-06-06T11:46:12Z,2018-08-31T00:35:06Z,2018-08-31T08:04:08Z,MERGED,True,24,1,2,https://github.com/dktapps,Allow Volatile::extend() to work as expected,1,[],https://github.com/krakjoe/pthreads/pull/874,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/874,"Threaded objects are often poorly suited for runtime class extension because of their immutability characteristics. Classes which are not Threaded need to be adapted to extend Threaded (for example, overwriting a coerced array on a runtime-extended class crashes).
Because Volatile descends from Threaded, Volatile::extend() exists, but does not work as might be expected - it behaves exactly the same as Threaded::extend().
This PR changes Threaded::extend() to apply the scope it was called from, instead of always applying the Threaded parent.
A possible alternative to this could be to simply move extend() to Volatile completely, since as I said above Threaded isn't suited to code that doesn't know it's Threaded anymore due to immutability.","Threaded objects are often poorly suited for runtime class extension because of their immutability characteristics. Classes which are not Threaded need to be adapted to extend Threaded (for example, overwriting a coerced array on a runtime-extended class crashes).
Because Volatile descends from Threaded, Volatile::extend() exists, but does not work as might be expected - it behaves exactly the same as Threaded::extend().
This PR changes Threaded::extend() to apply the scope it was called from, instead of always applying the Threaded parent.
A possible alternative to this could be to simply move extend() to Volatile completely, since as I said above Threaded isn't suited to code that doesn't know it's Threaded anymore due to immutability.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,874,2018-06-06T11:46:12Z,2018-08-31T00:35:06Z,2018-08-31T08:04:08Z,MERGED,True,24,1,2,https://github.com/dktapps,Allow Volatile::extend() to work as expected,1,[],https://github.com/krakjoe/pthreads/pull/874,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/874#issuecomment-417511751,"Threaded objects are often poorly suited for runtime class extension because of their immutability characteristics. Classes which are not Threaded need to be adapted to extend Threaded (for example, overwriting a coerced array on a runtime-extended class crashes).
Because Volatile descends from Threaded, Volatile::extend() exists, but does not work as might be expected - it behaves exactly the same as Threaded::extend().
This PR changes Threaded::extend() to apply the scope it was called from, instead of always applying the Threaded parent.
A possible alternative to this could be to simply move extend() to Volatile completely, since as I said above Threaded isn't suited to code that doesn't know it's Threaded anymore due to immutability.","To keep Volatile and Threaded consistent, I prefer the way of this PR.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,874,2018-06-06T11:46:12Z,2018-08-31T00:35:06Z,2018-08-31T08:04:08Z,MERGED,True,24,1,2,https://github.com/dktapps,Allow Volatile::extend() to work as expected,1,[],https://github.com/krakjoe/pthreads/pull/874,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/874#issuecomment-417511858,"Threaded objects are often poorly suited for runtime class extension because of their immutability characteristics. Classes which are not Threaded need to be adapted to extend Threaded (for example, overwriting a coerced array on a runtime-extended class crashes).
Because Volatile descends from Threaded, Volatile::extend() exists, but does not work as might be expected - it behaves exactly the same as Threaded::extend().
This PR changes Threaded::extend() to apply the scope it was called from, instead of always applying the Threaded parent.
A possible alternative to this could be to simply move extend() to Volatile completely, since as I said above Threaded isn't suited to code that doesn't know it's Threaded anymore due to immutability.",Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,876,2018-06-08T16:59:38Z,2018-06-09T11:21:55Z,2018-06-09T11:24:07Z,CLOSED,False,28,0,2,https://github.com/dktapps,Fixed a crash with GC related to unstack(),2,[],https://github.com/krakjoe/pthreads/pull/876,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/876,"pthreads worker stack maintains a linked-list of items to be executed. When an item is removed from the stack with unstack(), it is freed, but the item currently running on the stack does not know about this, and still has to this destroyed task in its ->next member. This running task is then later added to the GC stack, where this happens. The GC-stacked item still has a ptr to the destroyed task in its ->next member, so this loop then tries to free memory which has already been freed.
The cause of this was found by @MCMrARM, send him your love.
This fixes the described bug by NULL-ing the ->next member of items added to the end of the stack in pthreads_stack_add_item().","pthreads worker stack maintains a linked-list of items to be executed. When an item is removed from the stack with unstack(), it is freed, but the item currently running on the stack does not know about this, and still has to this destroyed task in its ->next member. This running task is then later added to the GC stack, where this happens. The GC-stacked item still has a ptr to the destroyed task in its ->next member, so this loop then tries to free memory which has already been freed.
The cause of this was found by @MCMrARM, send him your love.
This fixes the described bug by NULL-ing the ->next member of items added to the end of the stack in pthreads_stack_add_item().",True,{'THUMBS_UP': ['https://github.com/Muqsit']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,876,2018-06-08T16:59:38Z,2018-06-09T11:21:55Z,2018-06-09T11:24:07Z,CLOSED,False,28,0,2,https://github.com/dktapps,Fixed a crash with GC related to unstack(),2,[],https://github.com/krakjoe/pthreads/pull/876,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/876#issuecomment-395839514,"pthreads worker stack maintains a linked-list of items to be executed. When an item is removed from the stack with unstack(), it is freed, but the item currently running on the stack does not know about this, and still has to this destroyed task in its ->next member. This running task is then later added to the GC stack, where this happens. The GC-stacked item still has a ptr to the destroyed task in its ->next member, so this loop then tries to free memory which has already been freed.
The cause of this was found by @MCMrARM, send him your love.
This fixes the described bug by NULL-ing the ->next member of items added to the end of the stack in pthreads_stack_add_item().",The CI failures are not related to the pull request changes.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,876,2018-06-08T16:59:38Z,2018-06-09T11:21:55Z,2018-06-09T11:24:07Z,CLOSED,False,28,0,2,https://github.com/dktapps,Fixed a crash with GC related to unstack(),2,[],https://github.com/krakjoe/pthreads/pull/876,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/876#issuecomment-395961480,"pthreads worker stack maintains a linked-list of items to be executed. When an item is removed from the stack with unstack(), it is freed, but the item currently running on the stack does not know about this, and still has to this destroyed task in its ->next member. This running task is then later added to the GC stack, where this happens. The GC-stacked item still has a ptr to the destroyed task in its ->next member, so this loop then tries to free memory which has already been freed.
The cause of this was found by @MCMrARM, send him your love.
This fixes the described bug by NULL-ing the ->next member of items added to the end of the stack in pthreads_stack_add_item().","LGTM! Merged in 1630264 and 99a86fa, thanks.",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,878,2018-07-01T15:43:55Z,2018-07-07T11:38:27Z,2018-07-07T11:39:38Z,CLOSED,False,40,0,2,https://github.com/dktapps,Fixed infinite iteration on Threaded objects in PHP 7.3,1,[],https://github.com/krakjoe/pthreads/pull/878,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/878,"This bug was caused by changes made in php/php-src@d7f2dc4 .
zend_hash_move_forward_ex() no longer sets the given HashPosition to HT_INVALID_IDX when it reaches the end of the HT, which causes this to always be true.
There are probably better solutions for this, but this was the simplest and least invasive fix I could come up with. It is also backwards-compatible with PHP 7.2.","This bug was caused by changes made in php/php-src@d7f2dc4 .
zend_hash_move_forward_ex() no longer sets the given HashPosition to HT_INVALID_IDX when it reaches the end of the HT, which causes this to always be true.
There are probably better solutions for this, but this was the simplest and least invasive fix I could come up with. It is also backwards-compatible with PHP 7.2.",True,{'THUMBS_UP': ['https://github.com/Muqsit']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,878,2018-07-01T15:43:55Z,2018-07-07T11:38:27Z,2018-07-07T11:39:38Z,CLOSED,False,40,0,2,https://github.com/dktapps,Fixed infinite iteration on Threaded objects in PHP 7.3,1,[],https://github.com/krakjoe/pthreads/pull/878,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/878#issuecomment-401845012,"This bug was caused by changes made in php/php-src@d7f2dc4 .
zend_hash_move_forward_ex() no longer sets the given HashPosition to HT_INVALID_IDX when it reaches the end of the HT, which causes this to always be true.
There are probably better solutions for this, but this was the simplest and least invasive fix I could come up with. It is also backwards-compatible with PHP 7.2.",Seems this has issues when iterating on empty Threaded objects - they'll always yield one NULL before a foreach exits. Please don't merge this yet if it's seen :),True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,879,2018-07-03T18:12:20Z,,2018-07-03T18:12:20Z,OPEN,False,17,11,1,https://github.com/Maikuolan,Improve README examples.,1,[],https://github.com/krakjoe/pthreads/pull/879,https://github.com/Maikuolan,1,https://github.com/krakjoe/pthreads/pull/879,"Fixes some inconsistent indents (spaces+tabs mixed, different length, etc),
and adjusts braces to be more PSR-friendly. No logic or functional changes.","Fixes some inconsistent indents (spaces+tabs mixed, different length, etc),
and adjusts braces to be more PSR-friendly. No logic or functional changes.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,880,2018-07-04T16:14:11Z,2018-07-07T11:38:32Z,2018-07-07T11:39:38Z,CLOSED,False,1,1,1,https://github.com/dktapps,Fixed Threaded->chunk() odd behaviour on PHP 7.3,1,[],https://github.com/krakjoe/pthreads/pull/880,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/880,"This issue is described in pmmp/pthreads#1. I think move_forward from a non existing index to an existing one is probably undefined behaviour anyway, so this PR prefers using reset, which is also backwards compatible with 7.2.","This issue is described in pmmp/pthreads#1. I think move_forward from a non existing index to an existing one is probably undefined behaviour anyway, so this PR prefers using reset, which is also backwards compatible with 7.2.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/882,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.","This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/882#issuecomment-425602571,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.","@dktapps the last commit brings pthreads back to be consistent with php 73 (and 72) arrays, at least I hope so ;-) Do you see any issues with the fix? This could also be a possible solution for #560",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/882#issuecomment-425647137,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.",@sirsnyder Looks good to me 👍,True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/882#issuecomment-433571352,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.","@tpunt @krakjoe are the Hashtable changes/fixes ok? I would like to merge this PR within the next days, if there are no concerns.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/882#issuecomment-433597031,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.","This isn't synced with the latest changes, I haven't had time to update it  yet.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,None,6,https://github.com/krakjoe/pthreads/pull/882#issuecomment-444763055,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.",@dktapps @sirsnyder Any updates on this? Release of 7.3 is just around the door.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/dktapps,7,https://github.com/krakjoe/pthreads/pull/882#issuecomment-444791537,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.",@CharlotteDunois I haven't touched this since the 7.3 alphas. I'll take another look at it soon when I find time.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/sirsnyder,8,https://github.com/krakjoe/pthreads/pull/882#issuecomment-444862613,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.",I'm busy with a huge feature for pthreads in the last few weeks. Would be cool if you can take care of it @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/dktapps,9,https://github.com/krakjoe/pthreads/pull/882#issuecomment-453741739,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.","I've run some tests and this seems to be ready to r&r. I'm sure more bugs will roll in later on.
@sirsnyder I think this is good to merge.",True,{'THUMBS_UP': ['https://github.com/hfedcba']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,882,2018-07-15T09:02:16Z,2019-01-13T01:38:51Z,2019-01-15T21:09:55Z,MERGED,True,160,42,10,https://github.com/dktapps,Updates for PHP 7.3,9,[],https://github.com/krakjoe/pthreads/pull/882,https://github.com/sirsnyder,10,https://github.com/krakjoe/pthreads/pull/882#issuecomment-453794718,"This is mostly just fixing issues inserting persistent strings into non-persistent hashtables. In some cases I have replaced them with interned strings, others just needed copying appropriately.
There are also fixes for iteration.
There is a BC break in the behaviour of Volatile object keys which I believe is caused by php/php-src#3351. I haven't taken the time to try and fix this yet.","@dktapps that's nice to hear. Two days back I've played with debug builds and two tests have mem leaks. The one I've investigated is in pthreads_copy_literals and was probably caused by php/php-src@e70618a#diff-8f41738bb0ceb7bf7c9882a4b399ab6e. I have no write permissions for this branch anymore, so I will push the fix direct to master.",True,{'THUMBS_UP': ['https://github.com/hfedcba']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,888,2018-08-10T09:37:19Z,2018-10-26T23:28:39Z,2018-11-21T11:47:17Z,MERGED,True,49,34,4,https://github.com/dktapps,Fixed unsafe copying of exception handler,1,[],https://github.com/krakjoe/pthreads/pull/888,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/888,"This fixes #753 .
See #861 (comment) for long explanation - the TL;DR is that serialization can cause objects to be modified on the child thread, which will cause problems.
The solution here is to serialize it in pthreads_prepare_parent() and then unserialize during the thread's prepared startup. A similar solution will likely be needed for statics.","This fixes #753 .
See #861 (comment) for long explanation - the TL;DR is that serialization can cause objects to be modified on the child thread, which will cause problems.
The solution here is to serialize it in pthreads_prepare_parent() and then unserialize during the thread's prepared startup. A similar solution will likely be needed for statics.",True,{'HOORAY': ['https://github.com/Muqsit']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,888,2018-08-10T09:37:19Z,2018-10-26T23:28:39Z,2018-11-21T11:47:17Z,MERGED,True,49,34,4,https://github.com/dktapps,Fixed unsafe copying of exception handler,1,[],https://github.com/krakjoe/pthreads/pull/888,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/888#issuecomment-412034062,"This fixes #753 .
See #861 (comment) for long explanation - the TL;DR is that serialization can cause objects to be modified on the child thread, which will cause problems.
The solution here is to serialize it in pthreads_prepare_parent() and then unserialize during the thread's prepared startup. A similar solution will likely be needed for statics.",travis is being dumb... a run for my fork on the same commit: https://travis-ci.org/pmmp/pthreads/jobs/414434233,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,888,2018-08-10T09:37:19Z,2018-10-26T23:28:39Z,2018-11-21T11:47:17Z,MERGED,True,49,34,4,https://github.com/dktapps,Fixed unsafe copying of exception handler,1,[],https://github.com/krakjoe/pthreads/pull/888,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/888#issuecomment-412336047,"This fixes #753 .
See #861 (comment) for long explanation - the TL;DR is that serialization can cause objects to be modified on the child thread, which will cause problems.
The solution here is to serialize it in pthreads_prepare_parent() and then unserialize during the thread's prepared startup. A similar solution will likely be needed for statics.",A less invasive way to do this could be to assign it to a magic (or private) property in the thread's property store - one that isn't accessible by normal code.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,888,2018-08-10T09:37:19Z,2018-10-26T23:28:39Z,2018-11-21T11:47:17Z,MERGED,True,49,34,4,https://github.com/dktapps,Fixed unsafe copying of exception handler,1,[],https://github.com/krakjoe/pthreads/pull/888,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/888#issuecomment-433568904,"This fixes #753 .
See #861 (comment) for long explanation - the TL;DR is that serialization can cause objects to be modified on the child thread, which will cause problems.
The solution here is to serialize it in pthreads_prepare_parent() and then unserialize during the thread's prepared startup. A similar solution will likely be needed for statics.",Thx @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,890,2018-08-12T10:34:51Z,2018-09-13T00:28:26Z,2018-09-13T07:15:02Z,MERGED,True,2,2,1,https://github.com/dktapps,Fixed bug in pthreads_preparation_copy_trait_alias(),1,[],https://github.com/krakjoe/pthreads/pull/890,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/890,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,890,2018-08-12T10:34:51Z,2018-09-13T00:28:26Z,2018-09-13T07:15:02Z,MERGED,True,2,2,1,https://github.com/dktapps,Fixed bug in pthreads_preparation_copy_trait_alias(),1,[],https://github.com/krakjoe/pthreads/pull/890,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/890#issuecomment-415223888,,"@dktapps , could you add a test please?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,890,2018-08-12T10:34:51Z,2018-09-13T00:28:26Z,2018-09-13T07:15:02Z,MERGED,True,2,2,1,https://github.com/dktapps,Fixed bug in pthreads_preparation_copy_trait_alias(),1,[],https://github.com/krakjoe/pthreads/pull/890,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/890#issuecomment-415315830,,"I'm not 100% sure how to test this bug - I spotted it while writing updates for PHP 7.3 and pulled a fix. The code is obviously wrong, but I'm not 100% sure how it would manifest itself in PHP code. I'll try and write a test later.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,890,2018-08-12T10:34:51Z,2018-09-13T00:28:26Z,2018-09-13T07:15:02Z,MERGED,True,2,2,1,https://github.com/dktapps,Fixed bug in pthreads_preparation_copy_trait_alias(),1,[],https://github.com/krakjoe/pthreads/pull/890,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/890#issuecomment-420842266,,"Ok, I will add a small test. Thanks for your PR!",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,891,2018-08-12T12:05:52Z,2018-08-31T00:46:41Z,2018-08-31T08:03:56Z,MERGED,True,2,1,1,https://github.com/dktapps,"Allocate user class methods inherited from internal classes on arena,…",2,[],https://github.com/krakjoe/pthreads/pull/891,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/891,"… fixes #881
This is in line with how inheritance usually works (https://github.com/php/php-src/blob/master/Zend/zend_inheritance.c#L66).","… fixes #881
This is in line with how inheritance usually works (https://github.com/php/php-src/blob/master/Zend/zend_inheritance.c#L66).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,891,2018-08-12T12:05:52Z,2018-08-31T00:46:41Z,2018-08-31T08:03:56Z,MERGED,True,2,1,1,https://github.com/dktapps,"Allocate user class methods inherited from internal classes on arena,…",2,[],https://github.com/krakjoe/pthreads/pull/891,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/891#issuecomment-417513650,"… fixes #881
This is in line with how inheritance usually works (https://github.com/php/php-src/blob/master/Zend/zend_inheritance.c#L66).","After intensive consideration, I can not find any side effects. Therefore I will merge this PR.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,891,2018-08-12T12:05:52Z,2018-08-31T00:46:41Z,2018-08-31T08:03:56Z,MERGED,True,2,1,1,https://github.com/dktapps,"Allocate user class methods inherited from internal classes on arena,…",2,[],https://github.com/krakjoe/pthreads/pull/891,https://github.com/sirsnyder,3,https://github.com/krakjoe/pthreads/pull/891#issuecomment-417513721,"… fixes #881
This is in line with how inheritance usually works (https://github.com/php/php-src/blob/master/Zend/zend_inheritance.c#L66).",Thanks @dktapps,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,895,2018-08-21T13:40:12Z,2020-02-10T11:09:44Z,2020-02-10T11:09:44Z,CLOSED,False,7,2,1,https://github.com/dktapps,Windows: add support for building with pthreads4w v3,1,[],https://github.com/krakjoe/pthreads/pull/895,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/895,"pthread-w32 is now known as pthreads4w. Versions 2.11.0 and 3.0.0 were released on the 8th of August 2018. This pull request adds support for building php-pthreads with pthreads4w version 3.
It should perhaps be considered to use the newer 2.11.0 or 3.0.0 on AppVeyor CI, but that's beyond the intended scope of this PR (I can PR it separately if desired).","pthread-w32 is now known as pthreads4w. Versions 2.11.0 and 3.0.0 were released on the 8th of August 2018. This pull request adds support for building php-pthreads with pthreads4w version 3.
It should perhaps be considered to use the newer 2.11.0 or 3.0.0 on AppVeyor CI, but that's beyond the intended scope of this PR (I can PR it separately if desired).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,906,2018-10-18T01:06:31Z,,2018-10-27T00:10:20Z,OPEN,False,950,80,13,https://github.com/sirsnyder,WIP: New Concurrent class,9,[],https://github.com/krakjoe/pthreads/pull/906,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/906,"Introduction of Concurrent class. This new mutable class features property visibility, a thread-local annotation(@thread_local), ArrayAccess callback support and proper __get/__set/__isset/__unset handling.
Additionally this PR fixes #861, however with a BC break. Copying of static properties is confined to only default values and not assigned values.","Introduction of Concurrent class. This new mutable class features property visibility, a thread-local annotation(@thread_local), ArrayAccess callback support and proper __get/__set/__isset/__unset handling.
Additionally this PR fixes #861, however with a BC break. Copying of static properties is confined to only default values and not assigned values.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,906,2018-10-18T01:06:31Z,,2018-10-27T00:10:20Z,OPEN,False,950,80,13,https://github.com/sirsnyder,WIP: New Concurrent class,9,[],https://github.com/krakjoe/pthreads/pull/906,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/906#issuecomment-431560075,"Introduction of Concurrent class. This new mutable class features property visibility, a thread-local annotation(@thread_local), ArrayAccess callback support and proper __get/__set/__isset/__unset handling.
Additionally this PR fixes #861, however with a BC break. Copying of static properties is confined to only default values and not assigned values.","I'm not sure I understand the deal with thread-locals. Why is it necessary to confine them to a new class? What if I want thread locals without the performance hit involved with mutability? The additional runtime checks appear to be very minor, so I don't see why they should be relegated to a separate class.
I think it would be better if the statics fix could be handled separately from the Concurrent implementation so that can be integrated independently.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,906,2018-10-18T01:06:31Z,,2018-10-27T00:10:20Z,OPEN,False,950,80,13,https://github.com/sirsnyder,WIP: New Concurrent class,9,[],https://github.com/krakjoe/pthreads/pull/906,https://github.com/tpunt,3,https://github.com/krakjoe/pthreads/pull/906#issuecomment-431588103,"Introduction of Concurrent class. This new mutable class features property visibility, a thread-local annotation(@thread_local), ArrayAccess callback support and proper __get/__set/__isset/__unset handling.
Additionally this PR fixes #861, however with a BC break. Copying of static properties is confined to only default values and not assigned values.","I'm not so sure I like introducing a new class for this. Is the performance overhead that much, since this is only done at copy time? I get that it introduces a little extra overhead, but given that it has the potential to save on some serialisation overhead (which is forcibly incurred on every instance property currently), the potential speed improvements of TLS could negate this. Maybe some benchmarks would help to see this more clearly.
Also, the name ""Concurrent"" isn't particularly good, since it is pretty generic. It could refer to any concurrency primitive (thread, process, actor, communicating sequential process, green thread, etc).
I'm glad to see an implementation of this, though :)",True,{'THUMBS_UP': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,911,2018-12-30T00:51:07Z,,2019-01-22T00:21:55Z,OPEN,False,22693,566,80,https://github.com/sirsnyder,Streams support,4,[],https://github.com/krakjoe/pthreads/pull/911,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/911,"This is a thread-safe port of the php streams layer, including wrappers, transports and filters. Resources were replaced by objects and the following new classes introduced.

Streams
File
Stream
StreamContext
StreamWrapper
StreamFilter
StreamBucket
StreamBucketBrigade
pthreads_user_filter
FileStream
SocketStream

See stub.php. A File class definition in global scope will be a huge BC break though. Maybe we will find another name or introduce a namespace, whatever that looks like.
Predefined wrappers

php

temp
memory
output
stdin
stdout
stderr
fd/
filter/


file
glob
data
ftp
http

Predefined filters

string.rot13
string.toupper
string.tolower

Todo

I've no idea why travis fails. Maybe you have an idea.
Tests
more Tests
Windows build and testing

What's next? Removal of Todos for sure. I would like to publish this in a timely manner as prerelease in a separate branch to get audience and feedback. Possibly with other BC breaking changes like #906 and the behavior of static members initialization.
On top of this PR a port of the openssl ""ssl"" wrapper will follow.
@tpunt @dktapps Thoughts, questions?
Big thanks to the team behind php-src!","This is a thread-safe port of the php streams layer, including wrappers, transports and filters. Resources were replaced by objects and the following new classes introduced.

Streams
File
Stream
StreamContext
StreamWrapper
StreamFilter
StreamBucket
StreamBucketBrigade
pthreads_user_filter
FileStream
SocketStream

See stub.php. A File class definition in global scope will be a huge BC break though. Maybe we will find another name or introduce a namespace, whatever that looks like.
Predefined wrappers

php

temp
memory
output
stdin
stdout
stderr
fd/
filter/


file
glob
data
ftp
http

Predefined filters

string.rot13
string.toupper
string.tolower

Todo

I've no idea why travis fails. Maybe you have an idea.
Tests
more Tests
Windows build and testing

What's next? Removal of Todos for sure. I would like to publish this in a timely manner as prerelease in a separate branch to get audience and feedback. Possibly with other BC breaking changes like #906 and the behavior of static members initialization.
On top of this PR a port of the openssl ""ssl"" wrapper will follow.
@tpunt @dktapps Thoughts, questions?
Big thanks to the team behind php-src!",True,{'EYES': ['https://github.com/dktapps']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,911,2018-12-30T00:51:07Z,,2019-01-22T00:21:55Z,OPEN,False,22693,566,80,https://github.com/sirsnyder,Streams support,4,[],https://github.com/krakjoe/pthreads/pull/911,https://github.com/tpunt,2,https://github.com/krakjoe/pthreads/pull/911#issuecomment-450756049,"This is a thread-safe port of the php streams layer, including wrappers, transports and filters. Resources were replaced by objects and the following new classes introduced.

Streams
File
Stream
StreamContext
StreamWrapper
StreamFilter
StreamBucket
StreamBucketBrigade
pthreads_user_filter
FileStream
SocketStream

See stub.php. A File class definition in global scope will be a huge BC break though. Maybe we will find another name or introduce a namespace, whatever that looks like.
Predefined wrappers

php

temp
memory
output
stdin
stdout
stderr
fd/
filter/


file
glob
data
ftp
http

Predefined filters

string.rot13
string.toupper
string.tolower

Todo

I've no idea why travis fails. Maybe you have an idea.
Tests
more Tests
Windows build and testing

What's next? Removal of Todos for sure. I would like to publish this in a timely manner as prerelease in a separate branch to get audience and feedback. Possibly with other BC breaking changes like #906 and the behavior of static members initialization.
On top of this PR a port of the openssl ""ssl"" wrapper will follow.
@tpunt @dktapps Thoughts, questions?
Big thanks to the team behind php-src!","Great work @sirsnyder! I'll try to get around to reviewing the code some time soon, as well as give some feedback on the API exposed.",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,911,2018-12-30T00:51:07Z,,2019-01-22T00:21:55Z,OPEN,False,22693,566,80,https://github.com/sirsnyder,Streams support,4,[],https://github.com/krakjoe/pthreads/pull/911,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/911#issuecomment-453829789,"This is a thread-safe port of the php streams layer, including wrappers, transports and filters. Resources were replaced by objects and the following new classes introduced.

Streams
File
Stream
StreamContext
StreamWrapper
StreamFilter
StreamBucket
StreamBucketBrigade
pthreads_user_filter
FileStream
SocketStream

See stub.php. A File class definition in global scope will be a huge BC break though. Maybe we will find another name or introduce a namespace, whatever that looks like.
Predefined wrappers

php

temp
memory
output
stdin
stdout
stderr
fd/
filter/


file
glob
data
ftp
http

Predefined filters

string.rot13
string.toupper
string.tolower

Todo

I've no idea why travis fails. Maybe you have an idea.
Tests
more Tests
Windows build and testing

What's next? Removal of Todos for sure. I would like to publish this in a timely manner as prerelease in a separate branch to get audience and feedback. Possibly with other BC breaking changes like #906 and the behavior of static members initialization.
On top of this PR a port of the openssl ""ssl"" wrapper will follow.
@tpunt @dktapps Thoughts, questions?
Big thanks to the team behind php-src!","This looks interesting for sure, but I'm doubtful about the merits of replicating half of PHP into pthreads. As far as I knew, php-src are planning to kill off resources anyway.
I haven't looked closely at the diff yet, so please excuse me if I said something wrong.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,911,2018-12-30T00:51:07Z,,2019-01-22T00:21:55Z,OPEN,False,22693,566,80,https://github.com/sirsnyder,Streams support,4,[],https://github.com/krakjoe/pthreads/pull/911,https://github.com/sirsnyder,4,https://github.com/krakjoe/pthreads/pull/911#issuecomment-453832175,"This is a thread-safe port of the php streams layer, including wrappers, transports and filters. Resources were replaced by objects and the following new classes introduced.

Streams
File
Stream
StreamContext
StreamWrapper
StreamFilter
StreamBucket
StreamBucketBrigade
pthreads_user_filter
FileStream
SocketStream

See stub.php. A File class definition in global scope will be a huge BC break though. Maybe we will find another name or introduce a namespace, whatever that looks like.
Predefined wrappers

php

temp
memory
output
stdin
stdout
stderr
fd/
filter/


file
glob
data
ftp
http

Predefined filters

string.rot13
string.toupper
string.tolower

Todo

I've no idea why travis fails. Maybe you have an idea.
Tests
more Tests
Windows build and testing

What's next? Removal of Todos for sure. I would like to publish this in a timely manner as prerelease in a separate branch to get audience and feedback. Possibly with other BC breaking changes like #906 and the behavior of static members initialization.
On top of this PR a port of the openssl ""ssl"" wrapper will follow.
@tpunt @dktapps Thoughts, questions?
Big thanks to the team behind php-src!","I understand the concerns, it will be a lot more code to care about. Nevertheless it is a great opportunity for pthreads, we can build many things up on streams. I heard two years ago for the first time, that resources should be replaced. To be honest, I think that will never happen and end like php 6 in the distant future. That task is huge, it's massive. Beside the core, API, every bundled and external extension dealing with resources have to replace them too. The db extensions are no fun, really. Even if I'm wrong, which would be great, implementation and data handling must be thread-safe. Objects only are not enough.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,913,2019-01-03T08:00:51Z,2019-01-03T10:01:55Z,2019-01-03T10:05:57Z,MERGED,True,6,6,1,https://github.com/remicollet,refresh file list,1,[],https://github.com/krakjoe/pthreads/pull/913,https://github.com/remicollet,1,https://github.com/krakjoe/pthreads/pull/913,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,913,2019-01-03T08:00:51Z,2019-01-03T10:01:55Z,2019-01-03T10:05:57Z,MERGED,True,6,6,1,https://github.com/remicollet,refresh file list,1,[],https://github.com/krakjoe/pthreads/pull/913,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/913#issuecomment-451099508,,Thanks @remicollet !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/915,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .","igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/915#issuecomment-457961042,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .","@dktapps I've pushed a code change direct to your PR, but it's just a suggest. The feature to create a separate branch with a pull request didn't worked. Let me know what you think about the change. It's is untested, would be greate if you could test it ;-) @tpunt what do you think about igbinary support? I'm +1 in favor.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/dktapps,3,https://github.com/krakjoe/pthreads/pull/915#issuecomment-457961418,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .",Looks good to me off the hop. I'll add igbinary-enabled test configurations soon so we can see it run on CI.,True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/tpunt,4,https://github.com/krakjoe/pthreads/pull/915#issuecomment-458729908,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .","I don't have any complaints about this, but do you have any benchmarks to show noticeable performance differences? And I presume there are no semantic differences from the PHP side?",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/dktapps,5,https://github.com/krakjoe/pthreads/pull/915#issuecomment-458733464,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .","There are some minor behavioural differences regarding anonymous classes which I'm not currently sure how to address - they work in the user's advantage, but they break the tests.
I don't have any pthreads-specific benchmarks for this, but igbinary sells itself as being faster and less memory hard than the standard serializer. This seems like a match made in heaven. :P
Ideally we could throw out the serializing altogether and do proper recursive copying... ¯_(ツ)_/¯",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/krakjoe,6,https://github.com/krakjoe/pthreads/pull/915#issuecomment-458739257,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .","Do that, don't introduce more serial data, it doesn't make much sense.

Cheers
Joe
…
On Tue, 29 Jan 2019, 23:29 Dylan T. ***@***.*** wrote:
 There are some minor behavioural differences regarding anonymous classes
 which I'm not currently sure how to address - they work in the user's
 advantage, but they break the tests.

 I don't have any pthreads-specific benchmarks for this, but igbinary sells
 itself as being faster and less memory hard than the standard serializer.
 This seems like a match made in heaven. :P

 Ideally we could throw out the serializing altogether and do proper
 recursive copying... ¯_(ツ)_/¯

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#915 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ACIe6pswccE4oSs6ObuIQGHC4NX2GkA-ks5vIMtcgaJpZM4aB1uj>
 .",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/krakjoe,7,https://github.com/krakjoe/pthreads/pull/915#issuecomment-458739494,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .","If no one done it by weekend after this one, I'll make a start.

Cheers
Joe
…
On Tue, 29 Jan 2019, 23:50 Joe Watkins ***@***.*** wrote:
 Do that, don't introduce more serial data, it doesn't make much sense.

 Cheers
 Joe

 On Tue, 29 Jan 2019, 23:29 Dylan T. ***@***.*** wrote:

> There are some minor behavioural differences regarding anonymous classes
> which I'm not currently sure how to address - they work in the user's
> advantage, but they break the tests.
>
> I don't have any pthreads-specific benchmarks for this, but igbinary
> sells itself as being faster and less memory hard than the standard
> serializer. This seems like a match made in heaven. :P
>
> Ideally we could throw out the serializing altogether and do proper
> recursive copying... ¯_(ツ)_/¯
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <#915 (comment)>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ACIe6pswccE4oSs6ObuIQGHC4NX2GkA-ks5vIMtcgaJpZM4aB1uj>
> .
>",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,915,2019-01-15T21:23:18Z,2019-01-29T23:02:24Z,2019-01-29T23:02:24Z,CLOSED,False,81,5,4,https://github.com/dktapps,Added support for igbinary serializer,2,['enhancement'],https://github.com/krakjoe/pthreads/pull/915,https://github.com/dktapps,8,https://github.com/krakjoe/pthreads/pull/915#issuecomment-458742437,"igbinary is faster and uses less memory, at the cost of readability. This is perfect for pthreads.
This code is not very pretty and could probably use some cosmetic enhancement. However, this works fine (apart from some behavioural quirks) so I'm pulling this to get feedback.
Pass --with-pthreads-igbinary at compile-time to enable it.
CI does not currently test with igbinary enabled - that's a TODO.
This closes #834 .",Sounds good to me. I'll close this for now.,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,918,2019-01-22T10:41:14Z,2019-01-22T11:58:25Z,2019-11-09T16:17:03Z,MERGED,True,7,0,2,https://github.com/dktapps,Build 7.3 on AppVeyor/Travis,1,[],https://github.com/krakjoe/pthreads/pull/918,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/918,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,918,2019-01-22T10:41:14Z,2019-01-22T11:58:25Z,2019-11-09T16:17:03Z,MERGED,True,7,0,2,https://github.com/dktapps,Build 7.3 on AppVeyor/Travis,1,[],https://github.com/krakjoe/pthreads/pull/918,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/918#issuecomment-456374460,,Thanks @dktapps !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,922,2019-02-01T01:33:26Z,,2019-02-11T23:08:17Z,OPEN,False,34,0,4,https://github.com/sirsnyder,invoke user defined join(),2,[],https://github.com/krakjoe/pthreads/pull/922,https://github.com/sirsnyder,1,https://github.com/krakjoe/pthreads/pull/922,@dktapps does that correspond to your issue #919?,@dktapps does that correspond to your issue #919?,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,922,2019-02-01T01:33:26Z,,2019-02-11T23:08:17Z,OPEN,False,34,0,4,https://github.com/sirsnyder,invoke user defined join(),2,[],https://github.com/krakjoe/pthreads/pull/922,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/922#issuecomment-459646814,@dktapps does that correspond to your issue #919?,"It appears to, yes. Haven't looked at this in close detail yet though. 👍",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,939,2019-06-10T13:35:51Z,2020-02-10T11:09:21Z,2020-02-10T11:09:22Z,CLOSED,False,1,1,1,https://github.com/dktapps,String constants created by define() are not always interned,2,[],https://github.com/krakjoe/pthreads/pull/939,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/939,"A premature optimization was introduced to constant string copying in a473944 and worsened in de5d8f2, which caused faults with string copying of constants created using define().
For example, this string is allocated using str_repeat() and is not interned. This caused faults later on when modifying a copy of this string assigned to a variable (copy on write issues).
I do not have a test case for this fault, but it was identified with VS debugger and noting that the type_info of the copied zval did not match the original (refcount flag was missing).","A premature optimization was introduced to constant string copying in a473944 and worsened in de5d8f2, which caused faults with string copying of constants created using define().
For example, this string is allocated using str_repeat() and is not interned. This caused faults later on when modifying a copy of this string assigned to a variable (copy on write issues).
I do not have a test case for this fault, but it was identified with VS debugger and noting that the type_info of the copied zval did not match the original (refcount flag was missing).",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,939,2019-06-10T13:35:51Z,2020-02-10T11:09:21Z,2020-02-10T11:09:22Z,CLOSED,False,1,1,1,https://github.com/dktapps,String constants created by define() are not always interned,2,[],https://github.com/krakjoe/pthreads/pull/939,https://github.com/dktapps,2,https://github.com/krakjoe/pthreads/pull/939#issuecomment-501263572,"A premature optimization was introduced to constant string copying in a473944 and worsened in de5d8f2, which caused faults with string copying of constants created using define().
For example, this string is allocated using str_repeat() and is not interned. This caused faults later on when modifying a copy of this string assigned to a variable (copy on write issues).
I do not have a test case for this fault, but it was identified with VS debugger and noting that the type_info of the copied zval did not match the original (refcount flag was missing).","pls stand by, there are more problems here than I thought ...",True,"{'THUMBS_UP': ['https://github.com/sirsnyder', 'https://github.com/temuri416']}"
krakjoe/pthreads,https://github.com/krakjoe/pthreads,943,2019-06-26T22:49:44Z,2019-06-27T23:02:56Z,2019-06-27T23:03:15Z,MERGED,True,0,18,2,https://github.com/petk,Remove HAVE_SPL,1,[],https://github.com/krakjoe/pthreads/pull/943,https://github.com/petk,1,https://github.com/krakjoe/pthreads/pull/943,The HAVE_SPL symbol is defined in PHP to indicate the presence of the spl extension. Since PHP 5.3 the spl extension is always available and since PHP-7.4 the HAVE_SPL symbol has also been removed.,The HAVE_SPL symbol is defined in PHP to indicate the presence of the spl extension. Since PHP 5.3 the spl extension is always available and since PHP-7.4 the HAVE_SPL symbol has also been removed.,True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,943,2019-06-26T22:49:44Z,2019-06-27T23:02:56Z,2019-06-27T23:03:15Z,MERGED,True,0,18,2,https://github.com/petk,Remove HAVE_SPL,1,[],https://github.com/krakjoe/pthreads/pull/943,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/943#issuecomment-506541561,The HAVE_SPL symbol is defined in PHP to indicate the presence of the spl extension. Since PHP 5.3 the spl extension is always available and since PHP-7.4 the HAVE_SPL symbol has also been removed.,Thx @petk !,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,946,2019-08-06T17:01:46Z,2020-02-26T16:36:16Z,2020-02-26T16:36:17Z,CLOSED,False,2,12,4,https://github.com/dktapps,Properly disallow cloning pthreads objects,2,[],https://github.com/krakjoe/pthreads/pull/946,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/946,,,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,951,2019-11-06T22:34:56Z,2020-02-10T11:09:11Z,2020-02-10T11:09:12Z,CLOSED,False,34,0,2,https://github.com/dktapps,fix superglobals JIT,2,[],https://github.com/krakjoe/pthreads/pull/951,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/951,"Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.","Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.",True,{'THUMBS_UP': ['https://github.com/sirsnyder']}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,951,2019-11-06T22:34:56Z,2020-02-10T11:09:11Z,2020-02-10T11:09:12Z,CLOSED,False,34,0,2,https://github.com/dktapps,fix superglobals JIT,2,[],https://github.com/krakjoe/pthreads/pull/951,https://github.com/sirsnyder,2,https://github.com/krakjoe/pthreads/pull/951#issuecomment-550554098,"Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.",I'll take a closer look at it the next few days,True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,951,2019-11-06T22:34:56Z,2020-02-10T11:09:11Z,2020-02-10T11:09:12Z,CLOSED,False,34,0,2,https://github.com/dktapps,fix superglobals JIT,2,[],https://github.com/krakjoe/pthreads/pull/951,https://github.com/krakjoe,3,https://github.com/krakjoe/pthreads/pull/951#issuecomment-550879303,"Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.","#929

When 7.4 goes into RC stage near the end of this year, this repository will be archived, and no further releases of pthreads will occur on PECL or from this repository.

RC stage is nearly over, archiving is imminent.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,951,2019-11-06T22:34:56Z,2020-02-10T11:09:11Z,2020-02-10T11:09:12Z,CLOSED,False,34,0,2,https://github.com/dktapps,fix superglobals JIT,2,[],https://github.com/krakjoe/pthreads/pull/951,https://github.com/dktapps,4,https://github.com/krakjoe/pthreads/pull/951#issuecomment-550976993,"Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.","I suspect there are more users than just myself who are not ready to move away from pthreads yet, so I made this PR in case someone may find it useful.
I plan to maintain my fork in the 7.4 period, regardless of JIT availablity.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,951,2019-11-06T22:34:56Z,2020-02-10T11:09:11Z,2020-02-10T11:09:12Z,CLOSED,False,34,0,2,https://github.com/dktapps,fix superglobals JIT,2,[],https://github.com/krakjoe/pthreads/pull/951,https://github.com/sirsnyder,5,https://github.com/krakjoe/pthreads/pull/951#issuecomment-551104148,"Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.","Do you really want to do this? pthreads is such a good extension for php. Through object sharing, pthreads provides the capabilities of other multithreaded languages, such as Java. My applications (including a full runtime environment) are based on this key feature, which otherwise does not provide any extension in the scope. JIT and performance is a nice to have. What good is a JIT when the application stops working? Nothing. The application has to work, then comes the performance.
You have a lot of projects, I can understand that they are doing a lot of work and you want to focus on parallel for php8 with JIT support. Just give pthreads to Dylan and me and we'll do it. I'm sure we have some good ideas for further development & features. Otherwise, only the fork remains to a new project. Hopefully then again in the PECL.
Thank you @krakjoe",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,951,2019-11-06T22:34:56Z,2020-02-10T11:09:11Z,2020-02-10T11:09:12Z,CLOSED,False,34,0,2,https://github.com/dktapps,fix superglobals JIT,2,[],https://github.com/krakjoe/pthreads/pull/951,https://github.com/dktapps,6,https://github.com/krakjoe/pthreads/pull/951#issuecomment-551109795,"Superglobals referenced in copied code are not initialized because they are JIT-initialized when compiled. This can be worked around by setting auto_globals_jit to 0 or with this code.
Ideally we would manually JIT these from copied functions like parallel, but this solution is simpler and works well enough as a stopgap for now.","FWIW I am not exactly enamoured of pthreads as it stands, but the migration cost to parallel is just too big, especially considering that parallel has some of its own gremlins to make things confusing (I'm looking at you, object copying).
pthreads hasn't run out of road as far as I'm concerned because it's still in active use by thousands of PM servers worldwide.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,952,2019-11-07T08:37:45Z,2020-02-10T11:09:07Z,2020-02-10T11:09:08Z,CLOSED,False,85,0,3,https://github.com/dktapps,inherit argc/argv,3,[],https://github.com/krakjoe/pthreads/pull/952,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/952,"As far as I understand there are no thread safety problems with this, although if there are then it would be trivial to duplicate argv.
This change fixes functions such as getopt() not working on threads, as well as the globals $argc and $argv being missing.
Tests are TBD. I pulled this to get third party review in case I missed some obvious problem with the code changes.","As far as I understand there are no thread safety problems with this, although if there are then it would be trivial to duplicate argv.
This change fixes functions such as getopt() not working on threads, as well as the globals $argc and $argv being missing.
Tests are TBD. I pulled this to get third party review in case I missed some obvious problem with the code changes.",True,{}
krakjoe/pthreads,https://github.com/krakjoe/pthreads,953,2019-11-09T18:39:08Z,2020-02-10T11:09:05Z,2020-02-10T11:09:05Z,CLOSED,False,8,0,1,https://github.com/dktapps,gitignore: filter out some junk,1,[],https://github.com/krakjoe/pthreads/pull/953,https://github.com/dktapps,1,https://github.com/krakjoe/pthreads/pull/953,,,True,{}
