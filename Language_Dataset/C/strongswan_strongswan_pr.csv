strongswan/strongswan,https://github.com/strongswan/strongswan,36,2016-03-09T15:39:54Z,2016-03-09T16:39:59Z,2016-03-09T16:39:59Z,CLOSED,False,35,11,1,https://github.com/SeverinAlexB,added some missing returns to the python vici wrapper,1,[],https://github.com/strongswan/strongswan/pull/36,https://github.com/SeverinAlexB,1,https://github.com/strongswan/strongswan/pull/36,"According to the vici readme quiet every vici method returns a value. The python wrapper has missed some of these returns. This pull request fixes this.
Gruss Severin","According to the vici readme quiet every vici method returns a value. The python wrapper has missed some of these returns. This pull request fixes this.
Gruss Severin",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,36,2016-03-09T15:39:54Z,2016-03-09T16:39:59Z,2016-03-09T16:39:59Z,CLOSED,False,35,11,1,https://github.com/SeverinAlexB,added some missing returns to the python vici wrapper,1,[],https://github.com/strongswan/strongswan/pull/36,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/36#issuecomment-194387269,"According to the vici readme quiet every vici method returns a value. The python wrapper has missed some of these returns. This pull request fixes this.
Gruss Severin","That's on purpose. For all the VICI commands the Python bindings don't return a value no log messages are expected and the VICI response message looks like this:
{
    success = <yes or no>
    errmsg = <error string on failure>
}

Instead of returning this data and letting the caller analyze it the bindings check the response and raise a CommandException that includes errmsg if success is not yes, see session.py.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,37,2016-03-12T13:56:33Z,2016-03-23T13:45:32Z,2016-03-23T13:45:32Z,CLOSED,False,2,2,1,https://github.com/sorah,"Get value for PLUTO_MARK_{IN,OUT} from child_sa",1,[],https://github.com/strongswan/strongswan/pull/37,https://github.com/sorah,1,https://github.com/strongswan/strongswan/pull/37,Or the invoked script will get broken value when mark=%unique is used in a configuration.,Or the invoked script will get broken value when mark=%unique is used in a configuration.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,37,2016-03-12T13:56:33Z,2016-03-23T13:45:32Z,2016-03-23T13:45:32Z,CLOSED,False,2,2,1,https://github.com/sorah,"Get value for PLUTO_MARK_{IN,OUT} from child_sa",1,[],https://github.com/strongswan/strongswan/pull/37,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/37#issuecomment-200348970,Or the invoked script will get broken value when mark=%unique is used in a configuration.,Makes sense. Thanks!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,38,2016-03-23T14:39:37Z,2016-03-23T14:41:10Z,2016-03-23T14:43:37Z,CLOSED,False,3,4,2,https://github.com/rolikoff,ignore this one. sorry :D,1,[],https://github.com/strongswan/strongswan/pull/38,https://github.com/rolikoff,1,https://github.com/strongswan/strongswan/pull/38,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,39,2016-03-29T17:38:05Z,2016-09-05T13:36:29Z,2016-09-05T13:36:29Z,CLOSED,False,370,406,14,https://github.com/lkundrak,Some cleanups,9,[],https://github.com/strongswan/strongswan/pull/39,https://github.com/lkundrak,1,https://github.com/strongswan/strongswan/pull/39,Split off from pull reques #15 for ease of review.,Split off from pull reques #15 for ease of review.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,39,2016-03-29T17:38:05Z,2016-09-05T13:36:29Z,2016-09-05T13:36:29Z,CLOSED,False,370,406,14,https://github.com/lkundrak,Some cleanups,9,[],https://github.com/strongswan/strongswan/pull/39,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/39#issuecomment-206446491,Split off from pull reques #15 for ease of review.,"Looks good, up to the last commit. The problem there is that there is still a call to gnome_keyring_set_network_password_sync() which is now obviously not defined anymore.  I tried migrating that to secret_password_store_sync(), which seems to compile, not sure if it would actually work.  I pushed your changes (with some minor tweaks to the commit messages) and that (squashable) fix to the nm-updates branch (it also includes a fix regarding the LIBS).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,40,2016-03-30T11:01:47Z,2016-03-31T09:27:23Z,2016-03-31T09:27:42Z,CLOSED,False,3,3,1,https://github.com/cameronmccord2,Fix dictionary keys,1,[],https://github.com/strongswan/strongswan/pull/40,https://github.com/cameronmccord2,1,https://github.com/strongswan/strongswan/pull/40,The dictionary keys for the requests need to have a (-) instead of a (_). They should follow the same style as swanctl.,The dictionary keys for the requests need to have a (-) instead of a (_). They should follow the same style as swanctl.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,40,2016-03-30T11:01:47Z,2016-03-31T09:27:23Z,2016-03-31T09:27:42Z,CLOSED,False,3,3,1,https://github.com/cameronmccord2,Fix dictionary keys,1,[],https://github.com/strongswan/strongswan/pull/40,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/40#issuecomment-203847490,The dictionary keys for the requests need to have a (-) instead of a (_). They should follow the same style as swanctl.,"Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/lkundrak,1,https://github.com/strongswan/strongswan/pull/41,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/41#issuecomment-209953260,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","Isn't this something distributions should provide? In particular regarding the bugtracker and contact email addresses. Or do they generally patch this (or doesn't that matter anyway)?
The screenshots should probably be updated (or at least served from more stable URLs like e.g. strongswan.org/images). And the second screenshot shows the libgnomeui password dialog, so that will look quite differently I guess with NM 1.2 (maybe we should just drop it?).
Another thing is that the plugin does not support IKEv1. So those two references should be removed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/lkundrak,3,https://github.com/strongswan/strongswan/pull/41#issuecomment-210595104,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","Isn't this something distributions should provide? In particular regarding the bugtracker and contact email addresses. Or do they generally patch this (or doesn't that matter anyway)?

They do patch it. AppStream is cross-distribution: The point is that the upstreams fill in as much as possible (and relevant) and distribution fills in the rest (the actual distribution package name, icons, rating, etc.) while generating a feed from the packages they provide.

The screenshots should probably be updated (or at least served from more stable URLs like e.g. strongswan.org/images). And the second screenshot shows the libgnomeui password dialog, so that will look quite differently I guess with NM 1.2 (maybe we should just drop it?).

Yeah, better screenshots and on a better URL would be perfect. The appstream tooling is picky about the screenshots and complains loudly now:
[lkundrak@belphegor gnome]$ appstream-util validate NetworkManager-strongswan.appdata.xml.in
• attribute-invalid     :  width too small [https://wiki.strongswan.org/attachments/download/27/nm-strongswan-config.png]
• style-invalid         :  has vertical padding [https://wiki.strongswan.org/attachments/download/27/nm-strongswan-config.png]
• style-invalid         :  has horizontal padding [https://wiki.strongswan.org/attachments/download/27/nm-strongswan-config.png]
• attribute-invalid     :  width too small [https://wiki.strongswan.org/attachments/download/26/nm-strongswan-auth.png]
• attribute-invalid     :  height too small [https://wiki.strongswan.org/attachments/download/26/nm-strongswan-auth.png]
• style-invalid         :  has vertical padding [https://wiki.strongswan.org/attachments/download/26/nm-strongswan-auth.png]
• style-invalid         :  has horizontal padding [https://wiki.strongswan.org/attachments/download/26/nm-strongswan-auth.png]
If you need a compliant screenshot to host, you can use https://people.freedesktop.org/~lkundrak/strongswan.png
It's probably a bit wider than usual, but makes the tools happy and it looks better in the actual app store.
Note that the screenshot URLs is something that the distributions tooling patches in the XML: they fetch the screenshots and cache them in their own infrastructure and add a couple of links to mirrors.

Another thing is that the plugin does not support IKEv1. So those two references should be removed.

Fixed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/41#issuecomment-211475787,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","Thanks for the clarifications.

If you need a compliant screenshot to host, you can use https://people.freedesktop.org/~lkundrak/strongswan.png
It's probably a bit wider than usual, but makes the tools happy and it looks better in the actual app store.

Looks great, however, I'd prefer an (additional) example that uses EAP or certificate authentication (we don't promote PSK authentication generally - even though that PSK looks comparatively strong :-). Could you provide one?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/lkundrak,5,https://github.com/strongswan/strongswan/pull/41#issuecomment-212874049,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","Looks great, however, I'd prefer an (additional) example that uses EAP or certificate authentication (we don't promote PSK authentication generally

Updated. If you host the picture somewhere else. please amend the patch when applying it.
It doesn't matter too much where the picture is (it's going to be mirrored, so it won't consume bandwidth or be latency-sensitive); it's just important that it doesn't go away too quickly. A web site is okay; people also tend to use raw.github.com or their cgit instances.

even though that PSK looks comparatively strong :-).

Well, that password was copied from an example in the documentation :)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/41#issuecomment-213417123,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","Updated. If you host the picture somewhere else. please amend the patch when applying it.

Thanks a bunch. I did so in the nm-appstream branch.
I saw that according to the docs the files for Addons should be located at /usr/share/metainfo/%{id}.metainfo.xml (/usr/share/appdata/ is listed as legacy path). Should we change that? I also wondered whether appdata_DATA should actually be added to the distribution, or if appdata_in_files is enough (at least the docs indicate as much).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/lkundrak,7,https://github.com/strongswan/strongswan/pull/41#issuecomment-213505078,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","I saw that according to the docs the files for Addons should be located at /usr/share/metainfo/%{id}.metainfo.xml (/usr/share/appdata/ is listed as legacy path). Should we change that?

The /usr/share/metainfo is too new to be used by actual distribution or appdata-glib. I've asked the appstream upstream and they recommend to start using it no sooner than in a year. Thus we need to stick with /usr/share/appdata at least for now.

I also wondered whether appdata_DATA should actually be added to the distribution, or if appdata_in_files is enough (at least the docs indicate as much).

I don't know. I've cargo-culted it from somewhere. GNOME projects don't seem to ship the generated file. On the other hand, generating the file requires intltool-update which is not guaranteed to be around (the user could do a ./configure --disable-nls). For that reason I would prefer to keep it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,41,2016-04-14T12:03:27Z,2016-09-05T13:26:38Z,2016-09-05T13:26:38Z,CLOSED,False,50,1,4,https://github.com/lkundrak,appdata: add AppStream metadata,1,[],https://github.com/strongswan/strongswan/pull/41,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/41#issuecomment-214387515,"This will ensure the strongSwan NetworkManager plugin will be easily
installable from the app stores such as GNOME Software.","I've asked the appstream upstream and they recommend to start using it no sooner than in a year. Thus we need to stick with /usr/share/appdata at least for now.

Ah, OK. Thanks for the clarification.

For that reason I would prefer to keep it.

OK, no problem.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,42,2016-04-16T18:41:28Z,2016-09-05T13:36:29Z,2016-09-05T13:36:29Z,CLOSED,False,0,1,1,https://github.com/lkundrak,"gnome: don't do <deny send_interface=""..."" /> in dbus service file",1,[],https://github.com/strongswan/strongswan/pull/42,https://github.com/lkundrak,1,https://github.com/strongswan/strongswan/pull/42,"It does more than intended; apart from denying messages to that
particular interface it also denies all messages non-qualified with an
interface globally. This blocks messages completely unrelated to
wpa_supplicant, such as NetworkManager communication with the VPN
plugins.
From the dbus-daemon manual:
Be careful with send_interface/receive_interface, because the
interface field in messages is optional. In particular, do NOT
specify ! This will cause
no-interface messages to be blocked for all services, which is
almost certainly not what you intended. Always use rules of the form:
  
We can just safely remove those rules, since we're sufficiently
protected by the send_destination matches and method calls are
disallowed by default anyway.","It does more than intended; apart from denying messages to that
particular interface it also denies all messages non-qualified with an
interface globally. This blocks messages completely unrelated to
wpa_supplicant, such as NetworkManager communication with the VPN
plugins.
From the dbus-daemon manual:
Be careful with send_interface/receive_interface, because the
interface field in messages is optional. In particular, do NOT
specify ! This will cause
no-interface messages to be blocked for all services, which is
almost certainly not what you intended. Always use rules of the form:
  
We can just safely remove those rules, since we're sufficiently
protected by the send_destination matches and method calls are
disallowed by default anyway.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,42,2016-04-16T18:41:28Z,2016-09-05T13:36:29Z,2016-09-05T13:36:29Z,CLOSED,False,0,1,1,https://github.com/lkundrak,"gnome: don't do <deny send_interface=""..."" /> in dbus service file",1,[],https://github.com/strongswan/strongswan/pull/42,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/42#issuecomment-211376372,"It does more than intended; apart from denying messages to that
particular interface it also denies all messages non-qualified with an
interface globally. This blocks messages completely unrelated to
wpa_supplicant, such as NetworkManager communication with the VPN
plugins.
From the dbus-daemon manual:
Be careful with send_interface/receive_interface, because the
interface field in messages is optional. In particular, do NOT
specify ! This will cause
no-interface messages to be blocked for all services, which is
almost certainly not what you intended. Always use rules of the form:
  
We can just safely remove those rules, since we're sufficiently
protected by the send_destination matches and method calls are
disallowed by default anyway.","Thanks. I'll add this to the nm-updates branch.

This blocks messages completely unrelated to
wpa_supplicant, such as NetworkManager communication with the VPN
plugins.

Typo here. I guess you could write ""... unrelated to strongSwan's VPN plugin, such as ... with wpa_supplicant."" instead.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,43,2016-04-25T09:00:48Z,2016-04-25T15:07:53Z,2016-05-12T12:25:09Z,CLOSED,False,5,0,3,https://github.com/y-cann,Support dmdName RDN,2,[],https://github.com/strongswan/strongswan/pull/43,https://github.com/y-cann,1,https://github.com/strongswan/strongswan/pull/43,Add dmdName attribute for RDN (oid: 2.5.4.54).,Add dmdName attribute for RDN (oid: 2.5.4.54).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,43,2016-04-25T09:00:48Z,2016-04-25T15:07:53Z,2016-05-12T12:25:09Z,CLOSED,False,5,0,3,https://github.com/y-cann,Support dmdName RDN,2,[],https://github.com/strongswan/strongswan/pull/43,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/43#issuecomment-214229689,Add dmdName attribute for RDN (oid: 2.5.4.54).,Is anybody actually using this? It was removed with RFC 4519.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,43,2016-04-25T09:00:48Z,2016-04-25T15:07:53Z,2016-05-12T12:25:09Z,CLOSED,False,5,0,3,https://github.com/y-cann,Support dmdName RDN,2,[],https://github.com/strongswan/strongswan/pull/43,https://github.com/y-cann,3,https://github.com/strongswan/strongswan/pull/43#issuecomment-214232855,Add dmdName attribute for RDN (oid: 2.5.4.54).,"It is still used by some governmental organisation. At least, one of our client.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,43,2016-04-25T09:00:48Z,2016-04-25T15:07:53Z,2016-05-12T12:25:09Z,CLOSED,False,5,0,3,https://github.com/y-cann,Support dmdName RDN,2,[],https://github.com/strongswan/strongswan/pull/43,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/43#issuecomment-214383918,Add dmdName attribute for RDN (oid: 2.5.4.54).,"OK, applied to master. Thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,44,2016-05-03T08:09:18Z,2016-05-03T08:24:59Z,2018-05-09T12:27:55Z,CLOSED,False,303,0,7,https://github.com/coolcol001,When Android connection cannot identify the wildcard domain name,1,[],https://github.com/strongswan/strongswan/pull/44,https://github.com/coolcol001,1,https://github.com/strongswan/strongswan/pull/44,"When Android connection cannot identify the wildcard domain name
my server config with a wildcard domain name like *.myvpn.com
when i connnect to one of vpn server like  us1.myvpn.com,the android client report:
SSL cert's Common Name is : *.myvpn.com
constraint check failed: indentity 'us1.myvpn.com' required.","When Android connection cannot identify the wildcard domain name
my server config with a wildcard domain name like *.myvpn.com
when i connnect to one of vpn server like  us1.myvpn.com,the android client report:
SSL cert's Common Name is : *.myvpn.com
constraint check failed: indentity 'us1.myvpn.com' required.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,44,2016-05-03T08:09:18Z,2016-05-03T08:24:59Z,2018-05-09T12:27:55Z,CLOSED,False,303,0,7,https://github.com/coolcol001,When Android connection cannot identify the wildcard domain name,1,[],https://github.com/strongswan/strongswan/pull/44,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/44#issuecomment-216466534,"When Android connection cannot identify the wildcard domain name
my server config with a wildcard domain name like *.myvpn.com
when i connnect to one of vpn server like  us1.myvpn.com,the android client report:
SSL cert's Common Name is : *.myvpn.com
constraint check failed: indentity 'us1.myvpn.com' required.","Wildcard certificates are not supported by strongSwan (see e.g. [#629](https://wiki.strongswan.org/issues/629 on our issue tracker).  However, in the current version of the Android app it is possible to set the server's identity explicitly, which allows you to use a different identity than the server's IP/FQDN (so if you have multiple servers with different hostnames they all could use the same identity).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,44,2016-05-03T08:09:18Z,2016-05-03T08:24:59Z,2018-05-09T12:27:55Z,CLOSED,False,303,0,7,https://github.com/coolcol001,When Android connection cannot identify the wildcard domain name,1,[],https://github.com/strongswan/strongswan/pull/44,https://github.com/coolcol001,3,https://github.com/strongswan/strongswan/pull/44#issuecomment-216476961,"When Android connection cannot identify the wildcard domain name
my server config with a wildcard domain name like *.myvpn.com
when i connnect to one of vpn server like  us1.myvpn.com,the android client report:
SSL cert's Common Name is : *.myvpn.com
constraint check failed: indentity 'us1.myvpn.com' required.","but we connect  by win7 or win8,the Wildcard certificates works fine with Strongswan on centos version 5.3.4.
if there have some way to support on android ?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,45,2016-05-23T12:24:40Z,2016-05-23T14:49:29Z,2016-05-23T14:49:29Z,CLOSED,False,0,16,1,https://github.com/rossoneri91,Remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card,1,[],https://github.com/strongswan/strongswan/pull/45,https://github.com/rossoneri91,1,https://github.com/strongswan/strongswan/pull/45,"Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash","Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,46,2016-05-23T15:17:15Z,2016-05-24T08:54:02Z,2016-05-24T08:54:03Z,CLOSED,False,0,18,1,https://github.com/rossoneri91,Remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card,2,[],https://github.com/strongswan/strongswan/pull/46,https://github.com/rossoneri91,1,https://github.com/strongswan/strongswan/pull/46,"Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash","Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,46,2016-05-23T15:17:15Z,2016-05-24T08:54:02Z,2016-05-24T08:54:03Z,CLOSED,False,0,18,1,https://github.com/rossoneri91,Remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card,2,[],https://github.com/strongswan/strongswan/pull/46,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/46#issuecomment-221035606,"Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash","Your changes produce memory leaks. Where exactly did it crash? (After quickly glancing over the code, I'd say a potential issue could be the total lack of any locking when accessing the hashtables).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,46,2016-05-23T15:17:15Z,2016-05-24T08:54:02Z,2016-05-24T08:54:03Z,CLOSED,False,0,18,1,https://github.com/rossoneri91,Remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card,2,[],https://github.com/strongswan/strongswan/pull/46,https://github.com/rossoneri91,3,https://github.com/strongswan/strongswan/pull/46#issuecomment-221057830,"Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash","When I did this test:
https://www.strongswan.org/testing/testresults/ikev2/rw-eap-aka-id-rsa/index.html
with eap-simaka-pseudonym enabled, charon randomly crashed after a few times connect/disconnect. Here is the log I got:
...
May 24 01:34:42 rossoneri-pc charon: 16[LIB] storing pseudonym '9bd66cd0232fbcca' for 'carol'
May 24 01:34:42 rossoneri-pc charon: 16[DMN] thread 16 received 11
May 24 01:34:42 rossoneri-pc charon: 16[LIB]  dumping 17 stack frame addresses:
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /lib/x86_64-linux-gnu/libpthread.so.0 @ 0x7fd41a732000 [0x7fd41a742340]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> ??:?
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/libstrongswan.so.0 @ 0x7fd41abd8000 [0x7fd41abf0fda]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libstrongswan/collections/linked_list.c:319
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/libstrongswan.so.0 @ 0x7fd41abd8000 [0x7fd41ac13855]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libstrongswan/utils/identification.c:730
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/libstrongswan.so.0 @ 0x7fd41abd8000 [0x7fd41abefc52]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libstrongswan/collections/hashtable.c:264
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/plugins/libstrongswan-eap-simaka-pseudonym.so @ 0x7fd414b19000 [0x7fd414b19e02]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libcharon/plugins/eap_simaka_pseudonym/eap_simaka_pseudonym_card.c:82
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/libsimaka.so.0 @ 0x7fd414f21000 [0x7fd414f24602]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libsimaka/simaka_manager.c:176 (discriminator 1)
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/plugins/libstrongswan-eap-aka.so @ 0x7fd415129000 [0x7fd41512a6f7]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libcharon/plugins/eap_aka/eap_aka_peer.c:327
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/plugins/libstrongswan-eap-aka.so @ 0x7fd415129000 [0x7fd41512aa2b]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libcharon/plugins/eap_aka/eap_aka_peer.c:564
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/libcharon.so.0 @ 0x7fd41a950000 [0x7fd41a98deb0]
May 24 01:34:42 rossoneri-pc charon: 16[LIB]     -> /home/rossoneri/strongswan-5.4.0/src/libcharon/sa/ikev2/authenticators/eap_authenticator.c:424
May 24 01:34:42 rossoneri-pc charon: 16[LIB]   /usr/local/lib/ipsec/libcharon.so.0 @ 0x7fd41a950000 [0x7fd41a996631]
...

After removing that unnecessary hastable, this crash won't happen anymore.
Please clarify this issue.
Thank you!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,46,2016-05-23T15:17:15Z,2016-05-24T08:54:02Z,2016-05-24T08:54:03Z,CLOSED,False,0,18,1,https://github.com/rossoneri91,Remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card,2,[],https://github.com/strongswan/strongswan/pull/46,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/46#issuecomment-221206668,"Issue: charon randomly crashed while storing pseudonym
Solution: remove unnecessary hastable 'permanent' in eap_simaka_pseudonym_card, which causes the crash","Thanks for the additional information.

After removing that unnecessary hastable, this crash won't happen anymore.

If a pseudonym is set the mapping from real identity to pseudonym is replaced. But while the hashtable replaces the stored key and value objects with the ones passed in the put() call, it only returns the old value, not the old key. By just removing the table these objects will definitely be leaked.  I guess the idea was to use the permanent hashtable to keep track of the key objects used in the other table. However, there is a flaw in this.
Lets say we store the mappings carol => 3fc0536091badf6a and 3fc0536091badf6a => carol in the two hashtables and the pseudonym now changes to 103a2398f2df674e. What happens is that a new mapping 103a2398f2df674e => carol gets added to the permanent table, the existing mapping 3fc0536091badf6a => carol is not touched. However the mapping carol => 3fc0536091badf6a in the pseudonym table is replaced and that means the destruction of the object 3fc0536091badf6a that's used as key in the other table. This will later cause a crash when the hash of a new pseudonym matches that of the existing entry in the permanent table and the keys will have to be compared.
I pushed a fix for this to the simaka-pseudonym-fix branch.",True,{'THUMBS_UP': ['https://github.com/rossoneri91']}
strongswan/strongswan,https://github.com/strongswan/strongswan,47,2016-05-24T11:49:40Z,,2016-05-30T07:57:38Z,OPEN,False,924,0,13,https://github.com/Void-p,New plugin named dead-peer-notify-plugin,1,[],https://github.com/strongswan/strongswan/pull/47,https://github.com/Void-p,1,https://github.com/strongswan/strongswan/pull/47,"After the last retransmit has been sent and the peer is considered dead ( plugin hooks ALERT_RETRANSMIT_SEND_TIMEOUT alert ), plugin sends an email with notification, which contains a name and an ip address of the dead peer, or( and ) executes external command with two arguments: dead peer name and IP address. System administrators may find it useful for configuring email alerts and customizing other actions.​","After the last retransmit has been sent and the peer is considered dead ( plugin hooks ALERT_RETRANSMIT_SEND_TIMEOUT alert ), plugin sends an email with notification, which contains a name and an ip address of the dead peer, or( and ) executes external command with two arguments: dead peer name and IP address. System administrators may find it useful for configuring email alerts and customizing other actions.​",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,47,2016-05-24T11:49:40Z,,2016-05-30T07:57:38Z,OPEN,False,924,0,13,https://github.com/Void-p,New plugin named dead-peer-notify-plugin,1,[],https://github.com/strongswan/strongswan/pull/47,https://github.com/jia3ep,2,https://github.com/strongswan/strongswan/pull/47#issuecomment-222432546,"After the last retransmit has been sent and the peer is considered dead ( plugin hooks ALERT_RETRANSMIT_SEND_TIMEOUT alert ), plugin sends an email with notification, which contains a name and an ip address of the dead peer, or( and ) executes external command with two arguments: dead peer name and IP address. System administrators may find it useful for configuring email alerts and customizing other actions.​",@tobiasbrunner this plugin is widely used in products of Infotecs company. Is there a chance it will be accepted?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,47,2016-05-24T11:49:40Z,,2016-05-30T07:57:38Z,OPEN,False,924,0,13,https://github.com/Void-p,New plugin named dead-peer-notify-plugin,1,[],https://github.com/strongswan/strongswan/pull/47,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/47#issuecomment-222434788,"After the last retransmit has been sent and the peer is considered dead ( plugin hooks ALERT_RETRANSMIT_SEND_TIMEOUT alert ), plugin sends an email with notification, which contains a name and an ip address of the dead peer, or( and ) executes external command with two arguments: dead peer name and IP address. System administrators may find it useful for configuring email alerts and customizing other actions.​","No, I have no intention to include this in our repository.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,48,2016-06-21T19:43:23Z,2016-07-19T09:51:51Z,2016-07-19T09:51:51Z,CLOSED,False,7,0,1,https://github.com/prathyks,IKEV1: Force delete IKE_SA during quick mode. Issue 479,1,[],https://github.com/strongswan/strongswan/pull/48,https://github.com/prathyks,1,https://github.com/strongswan/strongswan/pull/48,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,48,2016-06-21T19:43:23Z,2016-07-19T09:51:51Z,2016-07-19T09:51:51Z,CLOSED,False,7,0,1,https://github.com/prathyks,IKEV1: Force delete IKE_SA during quick mode. Issue 479,1,[],https://github.com/strongswan/strongswan/pull/48,https://github.com/prathyks,2,https://github.com/strongswan/strongswan/pull/48#issuecomment-228851777,,"Changes in this patch are to ensure IKEv1 IKE-SA delete happens irrespective of the tasks in the lists 'queued' and 'active'. Details about the fix are explained in the issue:
https://wiki.strongswan.org/issues/1537",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/superCodrut,1,https://github.com/strongswan/strongswan/pull/49,This is the first patch series for feature  #1557.,This is the first patch series for feature  #1557.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/neeraj9,2,https://github.com/strongswan/strongswan/pull/49#issuecomment-237547166,This is the first patch series for feature  #1557.,"This is definitely a very useful feature for debugging.
https://wiki.strongswan.org/issues/1557",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/superCodrut,3,https://github.com/strongswan/strongswan/pull/49#issuecomment-237553796,This is the first patch series for feature  #1557.,"Indeed, this feature is for debugging and the cool part about it is that this feature will not kill performance.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/superCodrut,4,https://github.com/strongswan/strongswan/pull/49#issuecomment-238874539,This is the first patch series for feature  #1557.,The second patch series contains the code for saving CHILD_SA keys.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/superCodrut,5,https://github.com/strongswan/strongswan/pull/49#issuecomment-240646957,This is the first patch series for feature  #1557.,"@tobiasbrunner , @strongX509 and @martinwilli can you review this code?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/49#issuecomment-242081245,This is the first patch series for feature  #1557.,"This is definitely a very useful feature for debugging.

@neeraj9 Debugging what exactly? @superCodrut You also never responded to my similar question in #1557.
I had a quick look and there are several issues:

Several fixups could be squashed into other commits.
In some commits are changes that are clearly not related to the rest, so they should be split up (and parts possibly squashed in other commits).
There is test code in several commits that should be removed.
The indention in lots of commits is incorrect as is the code style.
Please don't use camel case, the plugin should probably be called save-keys/save_keys (look at other plugins with two-part names).
I don't really like the additional save_*_keys hooks (in general and in particular because of their arguments). I'd rather see you using the existing *_keys hooks and doing the key derivation in the plugin (as there is no logging required and the error handling could be simplified this shouldn't be that much code).
The send_spis hook is not necessary as the SPIs can be retrieved from the IKE_SA directly (it is passed to the ike_keys hook).
Not your fault but the format used by Wireshark is just the worst (algorithm identifiers can't even be passed numerically). To avoid compatibility problems and to simplify the code it might be better to just define the complete strings in a map (identifier -> string).
The contents of chunk_t instances can be printed as plain hex strings with the %+B printf specifier (no need to call chunk_to_hex()).
The path for the files to which keys etc. are written should be configurable already when they are first introduced (basically an extension of the test code comment above). If the setting is not configured the plugin should be disabled (or if writing to /tmp is preferred in that case the files should at least be created with e.g. mkstemp() or written to a directory created with mkdtemp()). Since this format is very Wireshark specific it might be useful to have different schemes to store the keys later. So the current option should perhaps be called wireshark_directory or similar (and only if it is set will files in this format and with specific names be created/extended).

There must be some safeguards that prevent this plugin from getting loaded automatically when it is built. For instance, it should not be included in the default plugin list used by the daemon when it is enabled (charon in ADD_PLUGIN in configure.ac) so it would have to be loaded explicitly (also needs some work regarding the config snippets in conf/plugins, which you currently ignored). Doing nothing until a path is configured would help too.

the cool part about it is that this feature will not kill performance

I don't really see how that's relevant for a debugging feature that should never be enabled outside of specific test scenarios.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/strainu,7,https://github.com/strongswan/strongswan/pull/49#issuecomment-242082263,This is the first patch series for feature  #1557.,"@tobiasbrunner, debugging interop with a different device that does not have capture and/or proper logging capabilities, for instance.
One particular use-case is when the (proprietary) initiator is on a VM with very little memory, so debug logging is out of the question, and strongswan acts as a responder on a more powerful machine.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/49#issuecomment-242083918,This is the first patch series for feature  #1557.,@strainu Again debugging what exactly? IKE? What aspects of it? strongSwan can also log a lot of details about the IKE packet encoding if the debug level is increased.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/strainu,9,https://github.com/strongswan/strongswan/pull/49#issuecomment-242085985,This is the first patch series for feature  #1557.,"Both IKE and encrypted traffic. For IKE, when working with a very high number of tunnels, extended logging is not really feasible. Logging only the keys significantly reduces the strain on the performance. For ESP, NULL encryption is not acceptable for all use-cases.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/tobiasbrunner,10,https://github.com/strongswan/strongswan/pull/49#issuecomment-242101255,This is the first patch series for feature  #1557.,That does not really sound like a debugging test scenario.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/vamposdecampos,11,https://github.com/strongswan/strongswan/pull/49#issuecomment-242648223,This is the first patch series for feature  #1557.,"Thanks @tobiasbrunner for reviewing!
On the use-cases:

There's the old adage of ""I don't trust your implementation"".  Verification with a 3rd-party implementation (in this case, wireshark) can be enlightening. This also applies to in-kernel ESP, which strongswan can't log.  Captures + keys can be more convenient than logs (e.g. correlations with other network traffic), particularly if you already have a packet capture tool running somewhere in the network, and you realize post-factum that you'd like to investigate something.
We're thinking of enabling this on the automated test suite, and exporting captures + keys for all tests.  This would produce a ton of sample captures for all kinds of scenarios (both IKE and ESP), which would be a great learning resource.

On the patches:

the one point to debate would be how exactly to extract the keys.  IMHO for use-case 1) above, it would be beneficial to log the exact keys used later on by the strongswan proper, rather than deriving them again -- but I'll admit that it does make for a more hairy implementation.  In the end, of course, The Maintainer Is Always Right ;)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/tobiasbrunner,12,https://github.com/strongswan/strongswan/pull/49#issuecomment-243111965,This is the first patch series for feature  #1557.,"There's the old adage of ""I don't trust your implementation"". Verification with a 3rd-party implementation (in this case, wireshark) can be enlightening. This also applies to in-kernel ESP, which strongswan can't log.

Doesn't this apply way more to proprietary implementations/devices than open-source software like strongSwan or the Linux kernel? And while strongSwan obviously can't log information about the ESP packets sent by the kernel it already can log the keys of these SAs.

Captures + keys can be more convenient than logs (e.g. correlations with other network traffic), particularly if you already have a packet capture tool running somewhere in the network, and you realize post-factum that you'd like to investigate something.

That's one of the reasons I'm reluctant to include a plugin like this in our distribution. Storing the keys just to have them on hand when needed later (for whatever unspecified reason) defeats the whole purpose of dynamic keying and rekeying (PFS). Of course, it can be done already by writing a custom plugin/script but shipping a ready-made plugin might convey the unintended message that we somehow endorse this kind of behavior.

We're thinking of enabling this on the automated test suite, and exporting captures + keys for all tests.

Are you referring to our test suite? That would have to be hidden somehow as we already struggle with users literally copying the configs of our test scenarios (despite our warnings) and we definitely wouldn't want anybody using this plugin unintentionally.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/superCodrut,13,https://github.com/strongswan/strongswan/pull/49#issuecomment-245878280,This is the first patch series for feature  #1557.,"@neeraj9 Debugging what exactly? @superCodrut You also never responded to my similar question in #1557.

@strainu  and @vamposdecampos responded this one for me.


Several fixups could be squashed into other commits.
In some commits are changes that are clearly not related to the rest, so they should be split up (and parts possibly squashed in other commits).


Fixed it by rebasing the code.


There is test code in several commits that should be removed.


Done.


The indention in lots of commits is incorrect as is the code style.


Done.


Please don't use camel case, the plugin should probably be called save-keys/save_keys (look at other plugins with two-part names).


Done.


I don't really like the additional save_*_keys hooks (in general and in particular because of their arguments). I'd rather see you using the existing *_keys hooks and doing the key derivation in the plugin (as there is no logging required and the error handling could be simplified this shouldn't be that much code).


In a lab enviroment, if we have tens of thousands of connections and we do the key derivation in the plugin then this scenario will take much longer than the scenario when we use the save_*_keys hooks.


The send_spis hook is not necessary as the SPIs can be retrieved from the IKE_SA directly (it is passed to the ike_keys hook).


If we don't use the ike_keys hook and we keep the save_*_keys hooks, is there another way to receive the SPIs?


Not your fault but the format used by Wireshark is just the worst (algorithm identifiers can't even be passed numerically). To avoid compatibility problems and to simplify the code it might be better to just define the complete strings in a map (identifier -> string).


Done. We used the map model used in the kernel_netlink


The contents of chunk_t instances can be printed as plain hex strings with the %+B printf specifier (no need to call chunk_to_hex()).


Done.


The path for the files to which keys etc. are written should be configurable already when they are first introduced (basically an extension of the test code comment above). If the setting is not configured the plugin should be disabled (or if writing to /tmp is preferred in that case the files should at least be created with e.g. mkstemp() or written to a directory created with mkdtemp()). Since this format is very Wireshark specific it might be useful to have different schemes to store the keys later. So the current option should perhaps be called wireshark_directory or similar (and only if it is set will files in this format and with specific names be created/extended).
There must be some safeguards that prevent this plugin from getting loaded automatically when it is built.


Done. Now even if you compile the plugin, the plugin will be loaded by charon only when the path is set.

(also needs some work regarding the config snippets in conf/plugins, which you currently ignored).

Done.


We're thinking of enabling this on the automated test suite, and exporting captures + keys for all tests.

Are you referring to our test suite? That would have to be hidden somehow as we already struggle with users literally copying the configs of our test scenarios (despite our warnings) and we definitely wouldn't want anybody using this plugin unintentionally.

Fair enough, we will drop this idea.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/superCodrut,14,https://github.com/strongswan/strongswan/pull/49#issuecomment-245879390,This is the first patch series for feature  #1557.,@tobiasbrunner  is there a chance for this plugin to be accepted?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/tobiasbrunner,15,https://github.com/strongswan/strongswan/pull/49#issuecomment-247962715,This is the first patch series for feature  #1557.,"I've refactored this and pushed a bunch of commits to the save-keys branch. The new hooks providing the derived keys will most likely end up in our next release. Regarding the plugin, we've not  decided yet whether it stays like that or even gets merged. Perhaps we'll maintain it in a separate branch or provide it as an out-of-tree plugin.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,49,2016-08-04T11:31:00Z,2018-12-20T15:25:03Z,2018-12-20T15:25:04Z,CLOSED,False,832,2,16,https://github.com/superCodrut,An option to save IKE_SA  and CHILD_SA keys for wireshark,17,[],https://github.com/strongswan/strongswan/pull/49,https://github.com/tobiasbrunner,16,https://github.com/strongswan/strongswan/pull/49#issuecomment-449034669,This is the first patch series for feature  #1557.,The save-keys plugin is available since strongSwan 5.6.2.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,50,2016-09-30T02:10:50Z,2016-09-30T02:34:17Z,2016-09-30T02:34:48Z,CLOSED,False,137,6,4,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING ,6,[],https://github.com/strongswan/strongswan/pull/50,https://github.com/ramon-garcia,1,https://github.com/strongswan/strongswan/pull/50,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,50,2016-09-30T02:10:50Z,2016-09-30T02:34:17Z,2016-09-30T02:34:48Z,CLOSED,False,137,6,4,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING ,6,[],https://github.com/strongswan/strongswan/pull/50,https://github.com/ramon-garcia,2,https://github.com/strongswan/strongswan/pull/50#issuecomment-250644531,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.",Need to create again with proper tags,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,1,https://github.com/strongswan/strongswan/pull/51,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,2,https://github.com/strongswan/strongswan/pull/51#issuecomment-250720270,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","I see that there is a compile error because OS X does not have uchar.h that defines char16_t
Let us see what can be done.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/51#issuecomment-250726321,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format.

Are you saying the CA certificate's subject is not actually encoded with ASN1_BMPSTRING and that the Windows client uses not the actual subject DN but something similar that uses ASN1_BMPSTRING RDNs? Because if the CA certificate actually used ASN1_BMPSTRING and you have that installed on both ends why wouldn't there be a match? Could you provide more information on this (example certificates, logs etc.).

The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks.

I don't think that's necessary. The server already sends certificate requests for the CAs it has installed or configured in the fourth Main Mode message (unless that's disabled with rightsendcert=never, but do you really consider the subject of CA certificates private?).
I haven't looked at the code that closely yet, but you should definitely squash the fixup commits. And also have a look at our contribution requirements.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,4,https://github.com/strongswan/strongswan/pull/51#issuecomment-250873602,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Yes, during my test I created a test self signed as CA certificate with openssl, then created two machine certificates and assigned one to the Windows 2012R2 server and other to strongswan. And the connection did not work. After troubleshooting this problem I implemented this patch, and now the IPSec connection is established.
I am going to fix the continuus integration issues.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/51#issuecomment-251056366,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Yes, during my test I created a test self signed as CA certificate with openssl, then created two machine certificates and assigned one to the Windows 2012R2 server and other to strongswan. And the connection did not work. After troubleshooting this problem I implemented this patch, and now the IPSec connection is established.

Could you provide more information on this. Like example certificates and logs (enc and asn log levels increased to 3). Changing the encoding for the CA certificate's subject when sending the certificate request doesn't make much sense. In particular to BMPString as RFC 5280 says:

When encoding attribute values of type DirectoryString, conforming
CAs MUST use PrintableString or UTF8String encoding, with the
following exceptions

The exceptions are for pre-existing legacy CAs that use other encodings. Anyway, to compare the DNs properly, what should be implemented is probably what's described in section 7.1 of RFC 5280. But that'd be quite a lot of work.
And please re-read the last paragraph of my reply above.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,6,https://github.com/strongswan/strongswan/pull/51#issuecomment-251360723,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Attached
requested.log.txt.gz  : debug log with log level enc and ans = 3
IP Address 192.168.56.1 is Linux machine with strongswan, IP Address 192.168.56.2 is Windows 2012 R2
Certificates:
CA cacert.pem.txt
Strongswan side linux_cert.pem.txt
Windows 2012R2 windows2012r2_cert.pem.txt
These logs where generated with the modified strongswan, so the IPSec tunnel succeeds.
With regard to being careful of avoiding depending on early match, during debugging, I think that al the certificates where tested, the code in identification.c:compare_dn was invoked comparing the dn in the request with each one of the certificates, not just CA certificates. Maybe I overlooked something.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/51#issuecomment-251369012,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Hm, yeah looks like Windows, for no apparent reason, changes the encoding of the CA certificate's subject when sending a certificate request for it (the original encoding uses UTF8String). This seems wrong to me. RFC 4945, section 3.2.7.1, for example, states:

Implementations SHOULD populate the Certification Authority field
with the Subject field of the trust anchor, populated such that
binary comparison of the Subject and the Certification Authority will
succeed.

I'm a bit reluctant to add this code. I'd rather we refactor the whole DN comparison some time in the future as mentioned earlier.
The simplest workaround for you is probably to configure leftsendcert=always so strongSwan sends its certificate also when not receiving a matching certificate request.
(By the way, you posted a private key above in windows2012r2_cert.pem.txt)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,8,https://github.com/strongswan/strongswan/pull/51#issuecomment-251551413,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","So, what options do we have?
What changes should I do so that this patch is accepted?
Note that Windows has a very large amount of users. An issue with Windows 2012R2 is also likely to happen with Windows 8.1 (essentially the same system) and later versions. Microsoft might have incentives to be incompatible with Strongswan different from Strongswan ones.
Is there any more general way (but a reasonable work) that you would prefer?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/51#issuecomment-252940242,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","So, what options do we have?
What changes should I do so that this patch is accepted?

You'd definitely need to change the license first (again, I refer to the link above). Otherwise, we can't start integrating any part of your code, if we decide to do so.
But doesn't the workaround I described above work for you?

Note that Windows has a very large amount of users.

Does Windows not also support IKEv2? At least via SC-VMM it seems possible to configure this (see e.g. this technet article)

An issue with Windows 2012R2 is also likely to happen with Windows 8.1 (essentially the same system) and later versions.

You are the first one to report this issue and these systems have been out there for quite a while. And I guess on client systems IKEv2 is generally used. Which client/function are you using in Windows? Do you configure it via Windows Firewall with Advanced Security?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,10,https://github.com/strongswan/strongswan/pull/51#issuecomment-253725012,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","With regard to licensing, I hereby grant to to the Strongswan team, permission to use this code under the MIT license.
Is there any procedure that I should follow? I did not add a license text becuase I added no file.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,11,https://github.com/strongswan/strongswan/pull/51#issuecomment-253731605,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","With regard to the IPSEC Windows configuration, I used the normal method for configuring IPSEC in LAN (as opposed to VPN tunnels): one opens with ""Windows firewall with advanced security"" -> Connection security rules -> New Rule.
Nowhere I found anything that allows one to select IKEv2.
I guess that the reason is compatibility with Windows 7 desktops and Windows 2008 R2 servers (the most common deployed type) that do not support IKEv2 (see here https://technet.microsoft.com/en-us/library/hh831365(v=ws.11).aspx )
In order to configure IPSEC policies with IKEv2, one has to use command line tools https://technet.microsoft.com/en-us/library/hh831807 .
The use case that I am working with is this one, placing Linux and Windows machines in the same LAN and encrypt traffic with IPSEC in transport model.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,12,https://github.com/strongswan/strongswan/pull/51#issuecomment-253768994,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Also note, that this patch is not just for me. The purpose is to make it easy for someone, with a normal Windows installation, a normal Windows network with IPSec policies, and a normal Strongswan configuration, that it works, without having to use complicated tricks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,13,https://github.com/strongswan/strongswan/pull/51#issuecomment-257825921,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.",Hello?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/tobiasbrunner,14,https://github.com/strongswan/strongswan/pull/51#issuecomment-257827939,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Is there any procedure that I should follow? I did not add a license text becuase I added no file.

Read the docs again. We still require you to add it in case a file is significantly modified. Also, please rebase your branch (squash those fixup commits etc.).

that do not support IKEv2

They do, but only via the Agile VPN client (RAS) I guess. Not when configured via firewall.

Also note, that this patch is not just for me.

Well, you are so far the first and only one who has this problem (but I suppose using Windows clients with Linux servers with transport mode SAs is a rare setup).

without having to use complicated tricks.

What's complicated about adding leftsendcert=always to the server config?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,15,https://github.com/strongswan/strongswan/pull/51#issuecomment-258118148,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.",Thank you for your answers. I will look at it as soon as possible.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,51,2016-09-30T02:42:48Z,,2016-11-03T11:37:04Z,OPEN,False,157,6,5,https://github.com/ramon-garcia,Compatibility with Windows 2012R2: accept certificate requests with ID BMPSTRING,7,[],https://github.com/strongswan/strongswan/pull/51,https://github.com/ramon-garcia,16,https://github.com/strongswan/strongswan/pull/51#issuecomment-258120142,"Hello,
While testing with Windows 2012R2 I found that strongswan could not estabish an IPSEC connection in transport mode because it makes a certificate request with the CA in ASN1_BMPSTRING format. The ID comparison function in libstrongswan/utils/identification.c do not accept matching an DN in ASN1_BMPSTRING with another in ASN1_UTF8STRING.
So I implemented a string function to match a BMPSTRING with a UTF8STRING in strongswan/src/libstrongswan/utils/utils/string.c . I regard BMPSTRING as UTF-16, including handling of characters out of the basic multilingual plane represented. This should be the most general and safe support.
The code tries to be as safe as possible. It does not finish early in case of mismatch, in order to avoid helping an attacker to guess the value of stored IDs of certificates by timing attacks. However, it cannot be timing independent of secret data, because the information about which ID is secret, and which one is provided by the peer is not known.
Best regards.","Well, you are so far the first and only one who has this problem (but I suppose using Windows clients with Linux servers with transport mode SAs is a rare setup).

Perhaps I did not explain well the use case. One has a network with Linux and Windows machines, and would like to secure the communications among them. Windows provides a simple to use mechanism, with IPSec rules that can be applied to workstations via active directory. In a very straightforward way, one can encrypt all the network traffic among Windows machines.
The purpose of this patch is to make Linux machines take part in this encrypted communications.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,52,2016-10-06T14:15:56Z,2016-10-06T16:10:03Z,2016-10-06T16:10:06Z,CLOSED,False,1,2,1,https://github.com/y-cann,Fix crash in case of empty LDAP response for CRL,3,[],https://github.com/strongswan/strongswan/pull/52,https://github.com/y-cann,1,https://github.com/strongswan/strongswan/pull/52,"In case of empty LDAP result during CRL fetch (for example, due to wrong filter attribute in LDAP URI , or invalid LDAP configuration), call to ldap_result2error() with NULL value for ""entry"" lead to Strongswan crash.
See assertion on http://www.openldap.org/devel/gitweb.cgi?p=openldap.git;a=blob;f=libraries/libldap/error.c;hb=HEAD#l256","In case of empty LDAP result during CRL fetch (for example, due to wrong filter attribute in LDAP URI , or invalid LDAP configuration), call to ldap_result2error() with NULL value for ""entry"" lead to Strongswan crash.
See assertion on http://www.openldap.org/devel/gitweb.cgi?p=openldap.git;a=blob;f=libraries/libldap/error.c;hb=HEAD#l256",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,52,2016-10-06T14:15:56Z,2016-10-06T16:10:03Z,2016-10-06T16:10:06Z,CLOSED,False,1,2,1,https://github.com/y-cann,Fix crash in case of empty LDAP response for CRL,3,[],https://github.com/strongswan/strongswan/pull/52,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/52#issuecomment-252010669,"In case of empty LDAP result during CRL fetch (for example, due to wrong filter attribute in LDAP URI , or invalid LDAP configuration), call to ldap_result2error() with NULL value for ""entry"" lead to Strongswan crash.
See assertion on http://www.openldap.org/devel/gitweb.cgi?p=openldap.git;a=blob;f=libraries/libldap/error.c;hb=HEAD#l256","Applied, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,53,2016-10-25T06:28:29Z,2016-10-25T07:48:12Z,2016-10-25T07:48:12Z,CLOSED,False,6,0,1,https://github.com/timkent,Add CAP_NET_RAW to capabilities keep list,1,[],https://github.com/strongswan/strongswan/pull/53,https://github.com/timkent,1,https://github.com/strongswan/strongswan/pull/53,"Fix for ""Permission denied (you must be root)"" error when calling iptc_init. This occurs when built with ""--with-capabilities=libcap"".
Issue could be created on:

Debian testing (kernel 3.16.0, strongswan 5.5.0)
Debian testing (kernel 4.7.0, strongswan 5.5.0)
Ubuntu 16.04 (kernel 4.4.0, strongswan 5.3.5)

The options charon.user and charon.group are both not defined, and charon is running as root.
Having 'mark=%unique' in a connection definition results in the following:

charon: 10[CFG] initializing iptables failed: Permission denied (you must be root)","Fix for ""Permission denied (you must be root)"" error when calling iptc_init. This occurs when built with ""--with-capabilities=libcap"".
Issue could be created on:

Debian testing (kernel 3.16.0, strongswan 5.5.0)
Debian testing (kernel 4.7.0, strongswan 5.5.0)
Ubuntu 16.04 (kernel 4.4.0, strongswan 5.3.5)

The options charon.user and charon.group are both not defined, and charon is running as root.
Having 'mark=%unique' in a connection definition results in the following:

charon: 10[CFG] initializing iptables failed: Permission denied (you must be root)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,54,2016-11-14T21:02:16Z,2019-04-01T10:13:56Z,2019-04-01T10:13:56Z,CLOSED,False,8,0,1,https://github.com/acd16,send local certificate subject to ext_auth script.,1,[],https://github.com/strongswan/strongswan/pull/54,https://github.com/acd16,1,https://github.com/strongswan/strongswan/pull/54,"Needed local certificate subject for my ext_auth script, added required code and upstreaming it. Please let me know if the changes are acceptable or would need any changes.","Needed local certificate subject for my ext_auth script, added required code and upstreaming it. Please let me know if the changes are acceptable or would need any changes.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,54,2016-11-14T21:02:16Z,2019-04-01T10:13:56Z,2019-04-01T10:13:56Z,CLOSED,False,8,0,1,https://github.com/acd16,send local certificate subject to ext_auth script.,1,[],https://github.com/strongswan/strongswan/pull/54,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/54#issuecomment-260677063,"Needed local certificate subject for my ext_auth script, added required code and upstreaming it. Please let me know if the changes are acceptable or would need any changes.",Can't you set the local identity to the subject DN of the certificate?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,55,2016-11-24T08:27:07Z,2016-11-24T08:35:08Z,2017-01-16T06:26:41Z,CLOSED,False,30,30,2,https://github.com/Ferryworld,1243 trap prio,3,[],https://github.com/strongswan/strongswan/pull/55,https://github.com/Ferryworld,1,https://github.com/strongswan/strongswan/pull/55,Is there any plan to merge to branch to master?,Is there any plan to merge to branch to master?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,55,2016-11-24T08:27:07Z,2016-11-24T08:35:08Z,2017-01-16T06:26:41Z,CLOSED,False,30,30,2,https://github.com/Ferryworld,1243 trap prio,3,[],https://github.com/strongswan/strongswan/pull/55,https://github.com/Ferryworld,2,https://github.com/strongswan/strongswan/pull/55#issuecomment-272783182,Is there any plan to merge to branch to master?,"This branch has been closed, but these codes can not be found in master branch.
Are these modifications dropped by some reason?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,56,2016-12-13T02:27:10Z,2016-12-14T10:37:02Z,2016-12-14T10:37:09Z,CLOSED,False,4,1,1,https://github.com/optix2000,vici: Check for strongswan closing connection in Python,1,[],https://github.com/strongswan/strongswan/pull/56,https://github.com/optix2000,1,https://github.com/strongswan/strongswan/pull/56,"The Python vici library does not check if the socket is closed.
If strongswan closes the connection, recv_all() spins forever.","The Python vici library does not check if the socket is closed.
If strongswan closes the connection, recv_all() spins forever.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,56,2016-12-13T02:27:10Z,2016-12-14T10:37:02Z,2016-12-14T10:37:09Z,CLOSED,False,4,1,1,https://github.com/optix2000,vici: Check for strongswan closing connection in Python,1,[],https://github.com/strongswan/strongswan/pull/56,https://github.com/optix2000,2,https://github.com/strongswan/strongswan/pull/56#issuecomment-266833773,"The Python vici library does not check if the socket is closed.
If strongswan closes the connection, recv_all() spins forever.","Sorry my mistake, silly oversight on my part.
Fixed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,56,2016-12-13T02:27:10Z,2016-12-14T10:37:02Z,2016-12-14T10:37:09Z,CLOSED,False,4,1,1,https://github.com/optix2000,vici: Check for strongswan closing connection in Python,1,[],https://github.com/strongswan/strongswan/pull/56,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/56#issuecomment-267000915,"The Python vici library does not check if the socket is closed.
If strongswan closes the connection, recv_all() spins forever.","Applied, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,57,2016-12-14T07:50:44Z,2020-02-14T13:54:52Z,2020-02-14T13:54:52Z,CLOSED,False,71,4,3,https://github.com/browsnet,NetworkManger-strongswan: user can custom remote identery when use CA certificate,4,[],https://github.com/strongswan/strongswan/pull/57,https://github.com/browsnet,1,https://github.com/strongswan/strongswan/pull/57,"Android VPN Client can custom server identity, but linux users cannot do it.
Some iKEv2 VPN Service need this, if user not custom server identity,  error occurred.
""constraint check failed: identity * required""","Android VPN Client can custom server identity, but linux users cannot do it.
Some iKEv2 VPN Service need this, if user not custom server identity,  error occurred.
""constraint check failed: identity * required""",True,{'THUMBS_UP': ['https://github.com/Asgoret']}
strongswan/strongswan,https://github.com/strongswan/strongswan,57,2016-12-14T07:50:44Z,2020-02-14T13:54:52Z,2020-02-14T13:54:52Z,CLOSED,False,71,4,3,https://github.com/browsnet,NetworkManger-strongswan: user can custom remote identery when use CA certificate,4,[],https://github.com/strongswan/strongswan/pull/57,https://github.com/Asgoret,2,https://github.com/strongswan/strongswan/pull/57#issuecomment-566096028,"Android VPN Client can custom server identity, but linux users cannot do it.
Some iKEv2 VPN Service need this, if user not custom server identity,  error occurred.
""constraint check failed: identity * required""",@martinwilli HI! Can you plz look at this?),True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,57,2016-12-14T07:50:44Z,2020-02-14T13:54:52Z,2020-02-14T13:54:52Z,CLOSED,False,71,4,3,https://github.com/browsnet,NetworkManger-strongswan: user can custom remote identery when use CA certificate,4,[],https://github.com/strongswan/strongswan/pull/57,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/57#issuecomment-567109422,"Android VPN Client can custom server identity, but linux users cannot do it.
Some iKEv2 VPN Service need this, if user not custom server identity,  error occurred.
""constraint check failed: identity * required""",I pushed something to the gh57-nm-remote-id branch.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,58,2017-01-16T06:28:25Z,2017-01-16T09:57:34Z,2017-01-16T09:57:34Z,CLOSED,False,30,30,2,https://github.com/Ferryworld,1243 trap prio,3,[],https://github.com/strongswan/strongswan/pull/58,https://github.com/Ferryworld,1,https://github.com/strongswan/strongswan/pull/58,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,59,2017-01-26T06:24:22Z,2017-02-14T17:36:09Z,2017-02-14T17:36:09Z,CLOSED,False,4,4,1,https://github.com/ebirger,child-sa: Do not install mark on inbound kernel SA,1,[],https://github.com/strongswan/strongswan/pull/59,https://github.com/ebirger,1,https://github.com/strongswan/strongswan/pull/59,"The SA ID (src, dst, proto, spi, encaps) is unique on ingress.
As such, explicit inbound marking is not needed to match an SA.
On the other hand, requiring inbound SAs to use marks forces the
installation of a mechanism for marking traffic (e.g. iptables) based
on some criteria.
Defining the criteria becomes complicated, for example when required to
support multiple SAs from the same src, especially when traffic is UDP
encapsulated.
This commit removes the assignment of the child_sa mark_in to the inbound SA.
Policies can be arbitrated by existing means - e.g, via netfilter policy
matching or using VTI interfaces - without the need to classify the flows prior
to state matching.
Since the reqid allocator regards the mark value, there is no risk of matching
the wrong policy.
And as explicit marking was required for route-based VPN to work before this
change, it should not cause regressions in existing setups.","The SA ID (src, dst, proto, spi, encaps) is unique on ingress.
As such, explicit inbound marking is not needed to match an SA.
On the other hand, requiring inbound SAs to use marks forces the
installation of a mechanism for marking traffic (e.g. iptables) based
on some criteria.
Defining the criteria becomes complicated, for example when required to
support multiple SAs from the same src, especially when traffic is UDP
encapsulated.
This commit removes the assignment of the child_sa mark_in to the inbound SA.
Policies can be arbitrated by existing means - e.g, via netfilter policy
matching or using VTI interfaces - without the need to classify the flows prior
to state matching.
Since the reqid allocator regards the mark value, there is no risk of matching
the wrong policy.
And as explicit marking was required for route-based VPN to work before this
change, it should not cause regressions in existing setups.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,59,2017-01-26T06:24:22Z,2017-02-14T17:36:09Z,2017-02-14T17:36:09Z,CLOSED,False,4,4,1,https://github.com/ebirger,child-sa: Do not install mark on inbound kernel SA,1,[],https://github.com/strongswan/strongswan/pull/59,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/59#issuecomment-275443918,"The SA ID (src, dst, proto, spi, encaps) is unique on ingress.
As such, explicit inbound marking is not needed to match an SA.
On the other hand, requiring inbound SAs to use marks forces the
installation of a mechanism for marking traffic (e.g. iptables) based
on some criteria.
Defining the criteria becomes complicated, for example when required to
support multiple SAs from the same src, especially when traffic is UDP
encapsulated.
This commit removes the assignment of the child_sa mark_in to the inbound SA.
Policies can be arbitrated by existing means - e.g, via netfilter policy
matching or using VTI interfaces - without the need to classify the flows prior
to state matching.
Since the reqid allocator regards the mark value, there is no risk of matching
the wrong policy.
And as explicit marking was required for route-based VPN to work before this
change, it should not cause regressions in existing setups.","Thanks, looks good. I guess the expectation might initially have been that the kernel would actually set the mark on inbound packets after decryption. Sadly that's not how it works, instead, the kernel requires the mark on the ESP packets in order to match them. So I suppose adding the marks really doesn't serve much purpose and only complicates things. I changed the patch a bit (no need to set the marks except in install()). Will probably be included in the next release.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,59,2017-01-26T06:24:22Z,2017-02-14T17:36:09Z,2017-02-14T17:36:09Z,CLOSED,False,4,4,1,https://github.com/ebirger,child-sa: Do not install mark on inbound kernel SA,1,[],https://github.com/strongswan/strongswan/pull/59,https://github.com/ebirger,3,https://github.com/strongswan/strongswan/pull/59#issuecomment-275447900,"The SA ID (src, dst, proto, spi, encaps) is unique on ingress.
As such, explicit inbound marking is not needed to match an SA.
On the other hand, requiring inbound SAs to use marks forces the
installation of a mechanism for marking traffic (e.g. iptables) based
on some criteria.
Defining the criteria becomes complicated, for example when required to
support multiple SAs from the same src, especially when traffic is UDP
encapsulated.
This commit removes the assignment of the child_sa mark_in to the inbound SA.
Policies can be arbitrated by existing means - e.g, via netfilter policy
matching or using VTI interfaces - without the need to classify the flows prior
to state matching.
Since the reqid allocator regards the mark value, there is no risk of matching
the wrong policy.
And as explicit marking was required for route-based VPN to work before this
change, it should not cause regressions in existing setups.",Thank you very much for the quick response!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,59,2017-01-26T06:24:22Z,2017-02-14T17:36:09Z,2017-02-14T17:36:09Z,CLOSED,False,4,4,1,https://github.com/ebirger,child-sa: Do not install mark on inbound kernel SA,1,[],https://github.com/strongswan/strongswan/pull/59,https://github.com/ebirger,4,https://github.com/strongswan/strongswan/pull/59#issuecomment-275457859,"The SA ID (src, dst, proto, spi, encaps) is unique on ingress.
As such, explicit inbound marking is not needed to match an SA.
On the other hand, requiring inbound SAs to use marks forces the
installation of a mechanism for marking traffic (e.g. iptables) based
on some criteria.
Defining the criteria becomes complicated, for example when required to
support multiple SAs from the same src, especially when traffic is UDP
encapsulated.
This commit removes the assignment of the child_sa mark_in to the inbound SA.
Policies can be arbitrated by existing means - e.g, via netfilter policy
matching or using VTI interfaces - without the need to classify the flows prior
to state matching.
Since the reqid allocator regards the mark value, there is no risk of matching
the wrong policy.
And as explicit marking was required for route-based VPN to work before this
change, it should not cause regressions in existing setups.",Accidentally closed PR. need to keep open for your tracking?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,59,2017-01-26T06:24:22Z,2017-02-14T17:36:09Z,2017-02-14T17:36:09Z,CLOSED,False,4,4,1,https://github.com/ebirger,child-sa: Do not install mark on inbound kernel SA,1,[],https://github.com/strongswan/strongswan/pull/59,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/59#issuecomment-275687503,"The SA ID (src, dst, proto, spi, encaps) is unique on ingress.
As such, explicit inbound marking is not needed to match an SA.
On the other hand, requiring inbound SAs to use marks forces the
installation of a mechanism for marking traffic (e.g. iptables) based
on some criteria.
Defining the criteria becomes complicated, for example when required to
support multiple SAs from the same src, especially when traffic is UDP
encapsulated.
This commit removes the assignment of the child_sa mark_in to the inbound SA.
Policies can be arbitrated by existing means - e.g, via netfilter policy
matching or using VTI interfaces - without the need to classify the flows prior
to state matching.
Since the reqid allocator regards the mark value, there is no risk of matching
the wrong policy.
And as explicit marking was required for route-based VPN to work before this
change, it should not cause regressions in existing setups.",I'll close it when I push the commit to master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,60,2017-02-07T12:39:43Z,2017-02-07T12:42:09Z,2017-02-07T12:42:09Z,CLOSED,False,2927,410,60,https://github.com/FancyMariusz,Fancyfon release 1 2 0,44,[],https://github.com/strongswan/strongswan/pull/60,https://github.com/FancyMariusz,1,https://github.com/strongswan/strongswan/pull/60,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tanzeeb,1,https://github.com/strongswan/strongswan/pull/61,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/61#issuecomment-278265712,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","which does not support subnet ranges as traffic selectors in transport mode.

What exactly do you mean? Transport mode is inherently host-to-host. So how did you configure this? Or doesn't it even support narrowing from 0.0.0.0/0 i.e. %dynamic to single IPs? Is there a NAT involved?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tanzeeb,3,https://github.com/strongswan/strongswan/pull/61#issuecomment-278368223,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","@tobiasbrunner yes, the windows IKEv2 implementation doesn't support traffic selector narrowing in transport mode. We sent a trace to Microsoft support, they sent us this snippet from the logs:
[3] 04C4.0F10::01/19/17-23:55:38.8773304 [ikeext] IkeValidateIkeV2Address() - 110|10.0.16.4|TS processing failure: IkeV2 transport mode implementation can only handle a single IP address. IP Ranges not handled

In our test network, we have a few Linux hosts (10.x.x.x) and Windows hosts (172.31.x.x), and want to enable host-to-host encryption between them on demand. We also have some hosts that are excluded (eg. 10.0.16.1).
Linux ipsec.conf:
conn no-ipsec-10.0.16.1/32
    auto=route
    type=passthrough
    right=10.0.16.1/32
    rightsubnet=10.0.16.1/32

conn ipsec-10.0.0.0/8
   # auth and other config snipped
    auto=route
    keyexchange=ike
    type=transport
    right=10.0.0.0/8
    rightsubnet=10.0.0.0/8

conn ipsec-172.31.0.0/16
   # auth and other config snipped
    auto=route
    keyexchange=ike
    ike=aes128-sha1-modp1024!
    esp=aes128-sha1!
    type=transport
    right=172.31.0.0/16
    rightsubnet=172.31.0.0/16

Linux strongswan.conf:
charon {
  # other config snipped
  ignore_acquire_ts = yes
  force_host_ts = yes
}

On Windows, we setup one host with StrongSwan Windows and another with New-NetIPsecRule -KeyModule=IKEv2. The firewalls have a rule to allow all traffic between the two subnets. We have tried configurations with both the remote subnet ranges (eg. 10.0.16.0/24) and specific IPs (eg. 10.0.16.4) and the results were the same.
The behaviour is as follows:

When we initiate a ping from Windows to Linux, the ping goes through.
When we initiate a ping from Linux to Windows, the ping hangs. From the syslog on Linux and Wireshark on Windows, we can see the IKE_SA being established, but the CHILD_SA cannot be established because Windows rejects the traffic selector (172.31.0.0/16) and does not send a TSr payload back.

We've also tried the following configuration changes:

rightsubnet=%dynamic on Linux: This works because StrongSwan sends the specific remote IP as the TSr, but the trap it installs captures all traffic to and from the machine and assumes it should be encrypted. We want some connections to be passthrough and others to use stronger encryption algorithms if supported (eg. linux-to-linux).
keyexchange=ikev1 and New-NetIPsecRule -KeyModule=IKEv1: This works fine, but we would prefer to use IKEv2

We have opened a support ticket with Microsoft, and they confirmed that their IKEv2 transport mode implementation does not support traffic selector narrowing, and provided the logs above. With the patch, initiating a connection from Linux-Windows works with both Strongswan Windows and New-NetIPsecRule.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tanzeeb,4,https://github.com/strongswan/strongswan/pull/61#issuecomment-280692965,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","@tobiasbrunner We've tried the following config with the subnets being %dynamic:
conn no-ipsec-10.0.16.1/32
    auto=route
    type=passthrough
    right=10.0.16.1/32

conn ipsec-10.0.0.0/8
   # auth and other config snipped
    auto=route
    keyexchange=ike
    type=transport
    right=10.0.0.0/8

conn ipsec-172.31.0.0/16
   # auth and other config snipped
    auto=route
    keyexchange=ike
    ike=aes128-sha1-modp1024!
    esp=aes128-sha1!
    type=transport
    right=172.31.0.0/16

But this traps all the traffic, not just traffic within the range specified in the right field.
Is there a better way for us to approach the issue?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/61#issuecomment-281104847,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","Sorry, for the delay.
Usually, with transport mode the traffic selectors are not specified explicitly (i.e. left|rightsubnet is implicitly set to %dynamic), which means that the source and destination traffic selectors are replaced with the actual endpoint addresses.
What you use, though, are wildcard trap policies, i.e. you specify a remote subnet together with auto=route and without a specific IP address/hostname in right (only allowed for transport mode), which causes the installation of trap policies, and only when the kernel triggers an acquire based on matching traffic will the actual endpoints be known. But since the remote TS is not %dynamic but a subnet it currently does not get replaced with the peer's IP address.
With strongSwan at the remote end that's not a problem if the peer's leftsubnet is %dynamic as that gets replaced with the remote's IP address and that in turn will narrow the proposed traffic selector.
But I think proposing a subnet for a transport mode SA does not really make sense in the first place. So a new option might not actually be required, instead we could simply always do what we already do for dynamic traffic selectors, i.e. set them to the endpoint's addresses.
I pushed a couple of commits to the gh61-transport-narrow branch. Would be great if you could test them.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tanzeeb,6,https://github.com/strongswan/strongswan/pull/61#issuecomment-281520175,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","The commits in gh61-transport-narrow work perfectly with our rightsubnet/auto=route configuration.
Thank you!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,61,2017-02-07T22:40:18Z,2017-02-27T17:25:33Z,2017-02-27T17:25:33Z,CLOSED,False,53,0,2,https://github.com/tanzeeb,Add option to force remote host as remote ts,1,[],https://github.com/strongswan/strongswan/pull/61,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/61#issuecomment-282788552,"This option forces the remote traffic selectors to be converted from subnet
ranges to the remote host when initiating a connection. It is useful for
making connections to the Windows IKEv2 implementation, which does not
support subnet ranges as traffic selectors in transport mode.","OK, great. Thanks for testing the changes.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,62,2017-02-08T08:23:23Z,2017-02-08T09:04:42Z,2017-02-08T09:04:42Z,CLOSED,False,1,1,1,https://github.com/abrasive,forecast: mark correct port in UDP NAT-T,1,[],https://github.com/strongswan/strongswan/pull/62,https://github.com/abrasive,1,https://github.com/strongswan/strongswan/pull/62,"The current code sets up a mark rule with rport:lport as the source port range, which breaks routing (unless rport < lport).","The current code sets up a mark rule with rport:lport as the source port range, which breaks routing (unless rport < lport).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,62,2017-02-08T08:23:23Z,2017-02-08T09:04:42Z,2017-02-08T09:04:42Z,CLOSED,False,1,1,1,https://github.com/abrasive,forecast: mark correct port in UDP NAT-T,1,[],https://github.com/strongswan/strongswan/pull/62,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/62#issuecomment-278270746,"The current code sets up a mark rule with rport:lport as the source port range, which breaks routing (unless rport < lport).","Applied, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,63,2017-02-14T23:58:08Z,2018-06-27T08:07:59Z,2018-06-27T08:07:59Z,CLOSED,False,12,0,1,https://github.com/stephengroat,Add Tea-CI,1,[],https://github.com/strongswan/strongswan/pull/63,https://github.com/stephengroat,1,https://github.com/strongswan/strongswan/pull/63,"Add Tea-CI to build strongswan in mingw shells (32 and 64 bit)
Could also add windows command line tests in the future
example build: https://tea-ci.org/stephengroat/strongswan","Add Tea-CI to build strongswan in mingw shells (32 and 64 bit)
Could also add windows command line tests in the future
example build: https://tea-ci.org/stephengroat/strongswan",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,63,2017-02-14T23:58:08Z,2018-06-27T08:07:59Z,2018-06-27T08:07:59Z,CLOSED,False,12,0,1,https://github.com/stephengroat,Add Tea-CI,1,[],https://github.com/strongswan/strongswan/pull/63,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/63#issuecomment-279978700,"Add Tea-CI to build strongswan in mingw shells (32 and 64 bit)
Could also add windows command line tests in the future
example build: https://tea-ci.org/stephengroat/strongswan","Could also add windows command line tests in the future

Without that I don't really see an advantage over the current build on Travis-CI. I guess you could check for DRONE in scripts/test.sh and don't reset TARGET in that case to run the tests?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,1,https://github.com/strongswan/strongswan/pull/64,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/64#issuecomment-283693177,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.",Could you write more about the use case for this?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,3,https://github.com/strongswan/strongswan/pull/64#issuecomment-283706568,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","@tobiasbrunner Sure!
Given we've got a cluster of machines (machine-1, machine-2, and machine-3) and we want to add transport-mode IPsec to all of them, we can use the optional policy flag to add IPsec with minimal downtime.
Currently, the procedure for adding IPsec to the cluster is as follows:

Add strongSwan to machine-1. It won't be able to talk to machine-2 and machine-3.
Add strongSwan to machine-2. It will be able to talk to machine-1 but wont be able to talk to machine-3.
Add strongSwan to machine-3. It will be able to talk to machine-1 and machine-2.

As you can see, the cluster won't be able to communicate fully until IPsec is enabled on all machines.
With the policy_optional flag, the procedure would be as follows:

Add strongSwan to machine-1 with policy_optional = yes . It will be able to talk to machine-2 and machine-3.
Add strongSwan to machine-2 with policy_optional = yes. It will be able to talk to machine-1 and machine-3.
Add strongSwan to machine-3 with policy_optional = yes. It will be able to talk to machine-1 and machine-2.
Set policy_optional = no to machine-1. It will still be able to talk to machine-2 and machine-3.
Set policy_optional = no to machine-2. It will still be able to talk to machine-1 and machine-3.
Set policy_optional = no to machine-3. It will still be able to talk to machine-1 and machine-2.

Even though there are more steps to the deployment, we are able to do it with minimal downtime in communication between the machines.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/64#issuecomment-283976982,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Couldn't you achieve the same thing, and even more controlled, with passthrough policies? Either configured with strongSwan or manually installed via ip xfrm policy. It would also not require a restart or a global option.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,5,https://github.com/strongswan/strongswan/pull/64#issuecomment-284045536,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Do you mean something like this?

Add strongSwan to machine-1, passthrough to machine-2 and machine-3. It will be able to talk to machine-2 and machine-3.
Add strongSwan to  machine-2, IPsec to machine-1 and passthrough to machine-3. It will not be able to machine-1, but will be able to talk to machine-3.
On machine-1, switch from passthrough to IPsec for machine-2. It will now be able to talk to machine-2 again.
Add strongSwan to machine-3, IPsec to machine-1 and machine-2. It will be not be able to talk to machine-1 or machine-2.
On machine-1, switch from passthrough to IPsec for machine-3. It will now be able to talk to machine-3 again.
On machine-2, switch from passthrough to IPsec for machine-3. It will now be able to talk to machine-3 again.

Is there a way to do this without incurring the downtime between steps 2-3, and 4-6?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/64#issuecomment-284417375,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","If you install the passthrough policies manually they will just be replaced by the actual IPsec policies installed by strongSwan once the connections get established (given the selectors match). You'd see a message like policy already exists, try to update it when this happens (strongSwan will then just replace and ""adopt"" the manually installed policies).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,7,https://github.com/strongswan/strongswan/pull/64#issuecomment-284542677,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Manually installing the passthrough policy before starting strongSwan is not working for us. We are using auto=route, which makes strongSwan install the IPsec policy as soon as it starts. Is there something we're missing?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,8,https://github.com/strongswan/strongswan/pull/64#issuecomment-284555821,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Also, would it be better to configure this through ipsec.conf / swanctl.conf instead of strongswan.conf?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/64#issuecomment-284663616,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","We are using auto=route, which makes strongSwan install the IPsec policy as soon as it starts. Is there something we're missing?

Aren't you using the wildcard trap policies you used before anymore? That is, do you now have specific host-host trap policies that would match the passthrough policies?
Would it be an option to use auto=add instead of auto=route while you install strongSwan on all hosts and then use ipsec route once that's done to actually install the trap policies? (Or change the config to auto=route and run ipsec update.) Since you won't actually have any protection until you disable policy_optional (optional trap policies just act like passthrough policies) that would have about the same effect.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,10,https://github.com/strongswan/strongswan/pull/64#issuecomment-284764390,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Thanks for your suggestion, we will try auto=add. If this makes strongSwan respond to incoming IKE requests but not try to initiate outgoing IKE requests, it can work for us. Will report back.
(Following is reference for anyone else reading this thread)
We're using the following configuration:
# specific hosts that will never have IPsec
conn no-ipsec-10.0.16.1/32
    auto=route
    type=passthrough
    right=10.0.16.1/32
    rightsubnet=10.0.16.1/32
    leftsubnet=10.0.16.4/32    # ip of current host

# Subnets that should have host-to-host ipsec
conn ipsec-10.0.16.0/24
    # <auth snipped>
    auto=route
    keyexchange=ike
    type=transport

    right=10.0.16.0/24
    rightid=%any
    rightsubnet=10.0.16.0/24
    leftsubnet=10.0.16.4/32  # ip of current host

The crux of the problem is that we aren't able to go on to each machine and change the configuration (ie. enforce IPsec) before the software on the machines try to talk to each other.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,11,https://github.com/strongswan/strongswan/pull/64#issuecomment-285050187,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","@tobiasbrunner auto=add worked perfectly, we didn't even need the passthrough policies. Thanks for your help!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tobiasbrunner,12,https://github.com/strongswan/strongswan/pull/64#issuecomment-285050640,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","OK, great.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,64,2017-03-02T15:43:52Z,,2017-05-22T10:01:06Z,OPEN,False,13,2,2,https://github.com/tanzeeb,Add option to install optionally-enforced polices,1,[],https://github.com/strongswan/strongswan/pull/64,https://github.com/tanzeeb,13,https://github.com/strongswan/strongswan/pull/64#issuecomment-302559065,"Add an option to kernel-netlink to install policies with the level 'use'
instead of 'required'.
This is useful for introducing IPsec to an existing cluster.","Hi @tobiasbrunner ,
We've run into an issue where auto=add doesn't suffice.
Given optional-machine is configured with auto=add and mandatory-machine is configured with auto=route:
If optional-machine pings mandatory-machine first, the ping fails because the outgoing connection will be attempted without IPsec. On failure, no attempt is made to establish an IPsec connection.
The reverse, pinging from mandatory-machine to optional-machine first, works as expected. The IPsec connection gets established, and subsequent pings from optional-machine to mandatory-machine use the IPsec connection.
With our patch, we configure both machines with auto=route, and optional-machine also gets charon.plugins.kernel-netlink.policy_optional = yes:
If optional-machine pings mandatory-machine first, it will attempt to send the packets unencrypted and also try to establish an IPsec connection. Once the IPsec connection is established, the packets go through successfully.
The main difference we see between auto=add and creating an optional policy is that in the latter, charon is notified and will attempt to establish a secure connection, but in the former, charon is not notified at all.
Is there another way to make this work without using optional policies?",True,"{'THUMBS_UP': ['https://github.com/oozie', 'https://github.com/Thermi']}"
strongswan/strongswan,https://github.com/strongswan/strongswan,65,2017-03-23T22:18:41Z,2017-03-27T09:08:42Z,2017-03-27T09:08:42Z,CLOSED,False,19,2,1,https://github.com/JiriHorky,Avoid O(n^2) copy operations when concatenating netlink responses to one result struct,1,[],https://github.com/strongswan/strongswan/pull/65,https://github.com/JiriHorky,1,https://github.com/strongswan/strongswan/pull/65,"When constructing the result, all respones from netlink were concatenated
iterativelly, i.e. for each response, the previously acquired result was
copied to newly allocated place and current response appended to it.
This results in O(n^2) copy operations. Instead, we now check for the
total final length of the result struct and copy the individual
responses to it in one pass, i.e. in O(n) copy operations.
In particular, this issue caused very high CPU usage in memcpy()
function as the result struct is copied over and over. Common way
how to hit the issue is when having 1000+ ipsec routes and 5+
connecting clients a second. In that case, the memcpy() function can
take 50%+ of one CPU thread on a decent CPU and the whole charon daemon
is stuck just reading routes and concatenating them together (connecting
clients are blocked in that particular case as this is done under mutex).
After applying the patch, the CPU consumption of charon daemon dropped from 100% to 4% on some of our servers.  Similar issues were described in https://wiki.strongswan.org/issues/2055 and also mentioned in https://wiki.strongswan.org/issues/1491. Disabling insert_routes helps in some cases (where possible), but the trouble is not obtaining the rules from kernel, but rather very suboptimal way of handling multiple responses from netlink.","When constructing the result, all respones from netlink were concatenated
iterativelly, i.e. for each response, the previously acquired result was
copied to newly allocated place and current response appended to it.
This results in O(n^2) copy operations. Instead, we now check for the
total final length of the result struct and copy the individual
responses to it in one pass, i.e. in O(n) copy operations.
In particular, this issue caused very high CPU usage in memcpy()
function as the result struct is copied over and over. Common way
how to hit the issue is when having 1000+ ipsec routes and 5+
connecting clients a second. In that case, the memcpy() function can
take 50%+ of one CPU thread on a decent CPU and the whole charon daemon
is stuck just reading routes and concatenating them together (connecting
clients are blocked in that particular case as this is done under mutex).
After applying the patch, the CPU consumption of charon daemon dropped from 100% to 4% on some of our servers.  Similar issues were described in https://wiki.strongswan.org/issues/2055 and also mentioned in https://wiki.strongswan.org/issues/1491. Disabling insert_routes helps in some cases (where possible), but the trouble is not obtaining the rules from kernel, but rather very suboptimal way of handling multiple responses from netlink.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,65,2017-03-23T22:18:41Z,2017-03-27T09:08:42Z,2017-03-27T09:08:42Z,CLOSED,False,19,2,1,https://github.com/JiriHorky,Avoid O(n^2) copy operations when concatenating netlink responses to one result struct,1,[],https://github.com/strongswan/strongswan/pull/65,https://github.com/JiriHorky,2,https://github.com/strongswan/strongswan/pull/65#issuecomment-288949904,"When constructing the result, all respones from netlink were concatenated
iterativelly, i.e. for each response, the previously acquired result was
copied to newly allocated place and current response appended to it.
This results in O(n^2) copy operations. Instead, we now check for the
total final length of the result struct and copy the individual
responses to it in one pass, i.e. in O(n) copy operations.
In particular, this issue caused very high CPU usage in memcpy()
function as the result struct is copied over and over. Common way
how to hit the issue is when having 1000+ ipsec routes and 5+
connecting clients a second. In that case, the memcpy() function can
take 50%+ of one CPU thread on a decent CPU and the whole charon daemon
is stuck just reading routes and concatenating them together (connecting
clients are blocked in that particular case as this is done under mutex).
After applying the patch, the CPU consumption of charon daemon dropped from 100% to 4% on some of our servers.  Similar issues were described in https://wiki.strongswan.org/issues/2055 and also mentioned in https://wiki.strongswan.org/issues/1491. Disabling insert_routes helps in some cases (where possible), but the trouble is not obtaining the rules from kernel, but rather very suboptimal way of handling multiple responses from netlink.",It seem the travis-ci tests timed out on running unrelated tls-mult test suite. I am not sure what I can do about it.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,65,2017-03-23T22:18:41Z,2017-03-27T09:08:42Z,2017-03-27T09:08:42Z,CLOSED,False,19,2,1,https://github.com/JiriHorky,Avoid O(n^2) copy operations when concatenating netlink responses to one result struct,1,[],https://github.com/strongswan/strongswan/pull/65,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/65#issuecomment-288989841,"When constructing the result, all respones from netlink were concatenated
iterativelly, i.e. for each response, the previously acquired result was
copied to newly allocated place and current response appended to it.
This results in O(n^2) copy operations. Instead, we now check for the
total final length of the result struct and copy the individual
responses to it in one pass, i.e. in O(n) copy operations.
In particular, this issue caused very high CPU usage in memcpy()
function as the result struct is copied over and over. Common way
how to hit the issue is when having 1000+ ipsec routes and 5+
connecting clients a second. In that case, the memcpy() function can
take 50%+ of one CPU thread on a decent CPU and the whole charon daemon
is stuck just reading routes and concatenating them together (connecting
clients are blocked in that particular case as this is done under mutex).
After applying the patch, the CPU consumption of charon daemon dropped from 100% to 4% on some of our servers.  Similar issues were described in https://wiki.strongswan.org/issues/2055 and also mentioned in https://wiki.strongswan.org/issues/1491. Disabling insert_routes helps in some cases (where possible), but the trouble is not obtaining the rules from kernel, but rather very suboptimal way of handling multiple responses from netlink.","Nice, thanks. I pushed a slightly cleaned up version to the netlink-concat branch.

It seem the travis-ci tests timed out on running unrelated tls-mult test suite. I am not sure what I can do about it.

Yes, the certificates used in these tests expired yesterday.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,66,2017-04-14T14:42:00Z,2017-04-19T08:07:01Z,2017-04-19T08:07:14Z,CLOSED,False,1,1,1,https://github.com/odi79,Fix type error exception in Python3,2,[],https://github.com/strongswan/strongswan/pull/66,https://github.com/odi79,1,https://github.com/strongswan/strongswan/pull/66,"Line 66 yields ""TypeError: can't concat bytes to str"" using Python 3.4. Changing ""request"" to ""requestdata"" which is already prepared in line 65 fixes this. After the change, the code is still working in Python 2.7","Line 66 yields ""TypeError: can't concat bytes to str"" using Python 3.4. Changing ""request"" to ""requestdata"" which is already prepared in line 65 fixes this. After the change, the code is still working in Python 2.7",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,66,2017-04-14T14:42:00Z,2017-04-19T08:07:01Z,2017-04-19T08:07:14Z,CLOSED,False,1,1,1,https://github.com/odi79,Fix type error exception in Python3,2,[],https://github.com/strongswan/strongswan/pull/66,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/66#issuecomment-294172114,"Line 66 yields ""TypeError: can't concat bytes to str"" using Python 3.4. Changing ""request"" to ""requestdata"" which is already prepared in line 65 fixes this. After the change, the code is still working in Python 2.7","Codecov Report

Merging #66 into master will increase coverage by 0.07%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #66      +/-   ##
==========================================
+ Coverage   52.91%   52.99%   +0.07%     
==========================================
  Files         288      289       +1     
  Lines       38079    38322     +243     
==========================================
+ Hits        20150    20307     +157     
- Misses      17929    18015      +86



Impacted Files
Coverage Δ





src/libcharon/encoding/parser.c
63.88% <0%> (-3.6%)
⬇️


src/libcharon/plugins/vici/vici_socket.c
82.77% <0%> (-0.85%)
⬇️


src/libcharon/encoding/message.c
44.35% <0%> (-0.07%)
⬇️


src/libstrongswan/utils/utils/memory.c
100% <0%> (ø)
⬆️


src/libstrongswan/utils/optionsfrom.c
0% <0%> (ø)
⬆️


src/libcharon/plugins/kernel_netlink/tests.c
93.75% <0%> (ø)



src/libstrongswan/utils/identification.c
97.68% <0%> (ø)
⬆️


...rc/libcharon/encoding/payloads/encrypted_payload.c
48.63% <0%> (ø)
⬆️


src/libstrongswan/credentials/auth_cfg.c
47.29% <0%> (+0.13%)
⬆️


...rc/libstrongswan/plugins/bliss/bliss_private_key.c
93.32% <0%> (+0.18%)
⬆️


... and 4 more






Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update bb2ba9f...0257d2c. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,66,2017-04-14T14:42:00Z,2017-04-19T08:07:01Z,2017-04-19T08:07:14Z,CLOSED,False,1,1,1,https://github.com/odi79,Fix type error exception in Python3,2,[],https://github.com/strongswan/strongswan/pull/66,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/66#issuecomment-295152965,"Line 66 yields ""TypeError: can't concat bytes to str"" using Python 3.4. Changing ""request"" to ""requestdata"" which is already prepared in line 65 fixes this. After the change, the code is still working in Python 2.7",Thanks. I squashed the two commits and applied the result to master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,67,2017-04-24T19:50:30Z,2017-04-29T22:11:40Z,2017-04-29T22:11:40Z,CLOSED,False,9,7,1,https://github.com/defunctio,"Enable AES_GCM_ICV16, PRF_HMAC_SHA2_512, ECP_256_BIT in default proposal ESP.",2,[],https://github.com/strongswan/strongswan/pull/67,https://github.com/defunctio,1,https://github.com/strongswan/strongswan/pull/67,"I'm one of the developers for Algo VPN.

Algo VPN is a set of Ansible scripts that simplify the setup of a personal IPSEC VPN. It uses the most secure defaults available, works with common cloud providers, and does not require client software on most devices.

We recently ran into the issue (trailofbits/algo#263) that charon-nm does not permit custom cipher proposals. Unfortunately the default proposals for libcharon do not enable ciphers that meet our requirements.
Due to this it makes it impossible to use the NetworkManager strongswan plugin to establish connections to Algo deployments resulting in a poor user experience on Linux desktop clients. While I would like to implement custom proposal selection in charon-nm and the network manager strongswan plugin in the future; this initial PR focuses on a minimally invasive approach to solving the issue of supporting stronger proposal defaults.","I'm one of the developers for Algo VPN.

Algo VPN is a set of Ansible scripts that simplify the setup of a personal IPSEC VPN. It uses the most secure defaults available, works with common cloud providers, and does not require client software on most devices.

We recently ran into the issue (trailofbits/algo#263) that charon-nm does not permit custom cipher proposals. Unfortunately the default proposals for libcharon do not enable ciphers that meet our requirements.
Due to this it makes it impossible to use the NetworkManager strongswan plugin to establish connections to Algo deployments resulting in a poor user experience on Linux desktop clients. While I would like to implement custom proposal selection in charon-nm and the network manager strongswan plugin in the future; this initial PR focuses on a minimally invasive approach to solving the issue of supporting stronger proposal defaults.",True,{'THUMBS_UP': ['https://github.com/dguido']}
strongswan/strongswan,https://github.com/strongswan/strongswan,67,2017-04-24T19:50:30Z,2017-04-29T22:11:40Z,2017-04-29T22:11:40Z,CLOSED,False,9,7,1,https://github.com/defunctio,"Enable AES_GCM_ICV16, PRF_HMAC_SHA2_512, ECP_256_BIT in default proposal ESP.",2,[],https://github.com/strongswan/strongswan/pull/67,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/67#issuecomment-296815565,"I'm one of the developers for Algo VPN.

Algo VPN is a set of Ansible scripts that simplify the setup of a personal IPSEC VPN. It uses the most secure defaults available, works with common cloud providers, and does not require client software on most devices.

We recently ran into the issue (trailofbits/algo#263) that charon-nm does not permit custom cipher proposals. Unfortunately the default proposals for libcharon do not enable ciphers that meet our requirements.
Due to this it makes it impossible to use the NetworkManager strongswan plugin to establish connections to Algo deployments resulting in a poor user experience on Linux desktop clients. While I would like to implement custom proposal selection in charon-nm and the network manager strongswan plugin in the future; this initial PR focuses on a minimally invasive approach to solving the issue of supporting stronger proposal defaults.","Codecov Report

Merging #67 into master will decrease coverage by 0.01%.
The diff coverage is 0%.


@@            Coverage Diff             @@
##           master      #67      +/-   ##
==========================================
- Coverage   52.97%   52.95%   -0.02%     
==========================================
  Files         289      289              
  Lines       38322    38325       +3     
==========================================
- Hits        20301    20296       -5     
- Misses      18021    18029       +8



Impacted Files
Coverage Δ





src/libcharon/config/proposal.c
81.68% <0%> (-1%)
⬇️


...rc/libstrongswan/plugins/bliss/bliss_private_key.c
92.05% <0%> (-1.09%)
⬇️


src/libstrongswan/collections/enumerator.c
76.52% <0%> (-0.22%)
⬇️


src/libstrongswan/threading/thread.c
81.95% <0%> (+0.75%)
⬆️


src/libstrongswan/plugins/bliss/bliss_utils.c
91.93% <0%> (+3.22%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 069bf10...f672567. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,67,2017-04-24T19:50:30Z,2017-04-29T22:11:40Z,2017-04-29T22:11:40Z,CLOSED,False,9,7,1,https://github.com/defunctio,"Enable AES_GCM_ICV16, PRF_HMAC_SHA2_512, ECP_256_BIT in default proposal ESP.",2,[],https://github.com/strongswan/strongswan/pull/67,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/67#issuecomment-296980318,"I'm one of the developers for Algo VPN.

Algo VPN is a set of Ansible scripts that simplify the setup of a personal IPSEC VPN. It uses the most secure defaults available, works with common cloud providers, and does not require client software on most devices.

We recently ran into the issue (trailofbits/algo#263) that charon-nm does not permit custom cipher proposals. Unfortunately the default proposals for libcharon do not enable ciphers that meet our requirements.
Due to this it makes it impossible to use the NetworkManager strongswan plugin to establish connections to Algo deployments resulting in a poor user experience on Linux desktop clients. While I would like to implement custom proposal selection in charon-nm and the network manager strongswan plugin in the future; this initial PR focuses on a minimally invasive approach to solving the issue of supporting stronger proposal defaults.","The first few changes make no sense as they just copy code that is already there (you might want to look up how switch statements work in C :-).
Regarding the change to proposal_create_default_aead. Did you read the comment there? (ECP-256 is also only supported if the openssl plugin is enabled). So I won't apply this change. You are free to submit that part of the patch downstream (Ubuntu, Fedora etc.) as they know what algorithms their kernel supports and whether they enabled the openssl plugin. But if you do it might be preferable to change how the proposal is built in nm_service.c (i.e. don't use proposal_create_default* but create custom proposals, like we do for the Android app).

While I would like to implement custom proposal selection in charon-nm and the network manager strongswan plugin in the future

This is definitely the better approach. I guess to simplify the implementation this could be a global option in strongswan.conf  (e.g. charon-nm.esp_proposals). See the nm-proposals branch for some prototypical code. Making this configurable per connection in the GUI would be more flexible, but is also significantly more work.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,67,2017-04-24T19:50:30Z,2017-04-29T22:11:40Z,2017-04-29T22:11:40Z,CLOSED,False,9,7,1,https://github.com/defunctio,"Enable AES_GCM_ICV16, PRF_HMAC_SHA2_512, ECP_256_BIT in default proposal ESP.",2,[],https://github.com/strongswan/strongswan/pull/67,https://github.com/defunctio,4,https://github.com/strongswan/strongswan/pull/67#issuecomment-297075736,"I'm one of the developers for Algo VPN.

Algo VPN is a set of Ansible scripts that simplify the setup of a personal IPSEC VPN. It uses the most secure defaults available, works with common cloud providers, and does not require client software on most devices.

We recently ran into the issue (trailofbits/algo#263) that charon-nm does not permit custom cipher proposals. Unfortunately the default proposals for libcharon do not enable ciphers that meet our requirements.
Due to this it makes it impossible to use the NetworkManager strongswan plugin to establish connections to Algo deployments resulting in a poor user experience on Linux desktop clients. While I would like to implement custom proposal selection in charon-nm and the network manager strongswan plugin in the future; this initial PR focuses on a minimally invasive approach to solving the issue of supporting stronger proposal defaults.","Ack, that is clearly my mistake with the dup code. 🤦‍♂️
I did notice the comment about kernel support and I agree the best place for this quick patch is downstream where these conditions are already known. I expected this would be rejected due to compatibility issues but thought it best that it's reviewed members of strongswan.
I do have unfinished changes towards charon-nm that implement custom ike/esp proposals in nm_service.c via nm_setting_vpn_get_data_item but not changes to the strongwan nm plugin. So it is only configurable via nmcli, etc but is functional and does not introduce the same compatibility problems. As you said though, this will take more time and effort.
Appreciate the feedback and information.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,68,2017-04-26T05:48:55Z,2017-04-28T01:53:58Z,2017-04-28T01:53:58Z,CLOSED,False,244,1,3,https://github.com/Ferryworld,swanctl: Add --list_conn_reqid command,1,[],https://github.com/strongswan/strongswan/pull/68,https://github.com/Ferryworld,1,https://github.com/strongswan/strongswan/pull/68,list currently active connection name and reqid map,list currently active connection name and reqid map,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,68,2017-04-26T05:48:55Z,2017-04-28T01:53:58Z,2017-04-28T01:53:58Z,CLOSED,False,244,1,3,https://github.com/Ferryworld,swanctl: Add --list_conn_reqid command,1,[],https://github.com/strongswan/strongswan/pull/68,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/68#issuecomment-297251279,list currently active connection name and reqid map,"Codecov Report

Merging #68 into master will decrease coverage by <.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #68      +/-   ##
==========================================
- Coverage   52.97%   52.96%   -0.01%     
==========================================
  Files         289      289              
  Lines       38322    38322              
==========================================
- Hits        20301    20298       -3     
- Misses      18021    18024       +3



Impacted Files
Coverage Δ





src/libstrongswan/networking/streams/stream.c
80% <0%> (-1.12%)
⬇️


src/libcharon/plugins/vici/vici_socket.c
81.93% <0%> (-0.85%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 069bf10...a0b362d. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,68,2017-04-26T05:48:55Z,2017-04-28T01:53:58Z,2017-04-28T01:53:58Z,CLOSED,False,244,1,3,https://github.com/Ferryworld,swanctl: Add --list_conn_reqid command,1,[],https://github.com/strongswan/strongswan/pull/68,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/68#issuecomment-297296295,list currently active connection name and reqid map,What exactly is the purpose of this command? Why not just use one of the bindings and directly do this via VICI.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,68,2017-04-26T05:48:55Z,2017-04-28T01:53:58Z,2017-04-28T01:53:58Z,CLOSED,False,244,1,3,https://github.com/Ferryworld,swanctl: Add --list_conn_reqid command,1,[],https://github.com/strongswan/strongswan/pull/68,https://github.com/Ferryworld,4,https://github.com/strongswan/strongswan/pull/68#issuecomment-297601679,list currently active connection name and reqid map,"connection name and reqid mapping is important for fastpath design.
reqid is the keyword to find a special connection in fastpath, then useful information can be located for statistics in communications.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,68,2017-04-26T05:48:55Z,2017-04-28T01:53:58Z,2017-04-28T01:53:58Z,CLOSED,False,244,1,3,https://github.com/Ferryworld,swanctl: Add --list_conn_reqid command,1,[],https://github.com/strongswan/strongswan/pull/68,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/68#issuecomment-297634203,list currently active connection name and reqid map,"But I don't really see the point in adding such a specialized command, which only outputs information already available to users via --list-sas, to swanctl. And when some kind of automated querying is the goal then you have to parse this output again anyway, when you can much more easily use one of the VICI bindings and integrate this kind of query directly into your application or workflow.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,68,2017-04-26T05:48:55Z,2017-04-28T01:53:58Z,2017-04-28T01:53:58Z,CLOSED,False,244,1,3,https://github.com/Ferryworld,swanctl: Add --list_conn_reqid command,1,[],https://github.com/strongswan/strongswan/pull/68,https://github.com/Ferryworld,6,https://github.com/strongswan/strongswan/pull/68#issuecomment-297886114,list currently active connection name and reqid map,"Indeed, it is duplicate in the swanctl point of view.
What this request accomplished is to facilitate application.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/defunctio,1,https://github.com/strongswan/strongswan/pull/69,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/69#issuecomment-298251320,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","Codecov Report

Merging #69 into master will decrease coverage by 0.04%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #69      +/-   ##
==========================================
- Coverage   52.99%   52.95%   -0.05%     
==========================================
  Files         289      289              
  Lines       38322    38322              
==========================================
- Hits        20309    20292      -17     
- Misses      18013    18030      +17



Impacted Files
Coverage Δ





src/libstrongswan/plugins/bliss/bliss_utils.c
88.7% <0%> (-3.23%)
⬇️


src/libcharon/plugins/vici/vici_socket.c
81.93% <0%> (-1.69%)
⬇️


...rc/libstrongswan/plugins/bliss/bliss_private_key.c
91.87% <0%> (-1.45%)
⬇️


src/libstrongswan/networking/streams/stream.c
80% <0%> (-1.12%)
⬇️


src/libstrongswan/processing/processor.c
76.31% <0%> (-1.06%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update d38d1fc...81d192d. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/69#issuecomment-298304189,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.

I'd actually prefer if this was changed to the semantics of swanctl.conf. That is, a custom proposal is always exclusive, only if default is explicitly added to the list will the default proposal be added (that option might not even be necessary). Because usually if a custom proposal is configured it's done to actually use exactly that proposal (and ipsec.conf is a legacy interface anyway). Also, make sure proposal_create_from_string() does not return NULL and that a proposal was added (and if not add the default proposal), otherwise, if the configured proposals are invalid no proposals would be sent (see e.g. the nm-proposals branch). It will also allow users to only change one of the two proposals by leaving the other text field empty (which raises the question whether the check box is required, but perhaps it makes it clearer to the user).
There are also some code style issues (see our wiki).

Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.

That's unfortunate. Is this documented somewhere? (Because it seems that e.g. DNS servers and search domains may be passed as comma separated list in the NM IP settings).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/defunctio,4,https://github.com/strongswan/strongswan/pull/69#issuecomment-298345888,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","I'd actually prefer if this was changed to the semantics of swanctl.conf. That is, a custom proposal is always exclusive, only if default is explicitly added to the list will the default proposal be added (that option might not even be necessary). Because usually if a custom proposal is configured it's done to actually use exactly that proposal (and ipsec.conf is a legacy interface anyway).

Sounds good to me, especially if it's considered legacy and will eventually be phased out.

Also, make sure proposal_create_from_string() does not return NULL and that a proposal was added (and if not add the default proposal), otherwise, if the configured proposals are invalid no proposals would be sent (see e.g. the nm-proposals branch).

Would it not be better to generate an error instead of falling back to the default proposal? Accepting the default proposal in this event would be undesirable from my perspective. It could even result in issues where a typo or mistake is made in the user provided proposal not being caught and falling back to defaults instead of properly being enforced.

It will also allow users to only change one of the two proposals by leaving the other text field empty (which raises the question whether the check box is required, but perhaps it makes it clearer to the user).

I considered the necessity of the checkbox as well. Originally I didn't add one but it seemed like a bad UX decision as it could lead users to think it is a requirement or just add to confusion. I assume the likelihood that someone would want to change only one of the proposals was probably not that high. We could add a default to the proposal if the box is checked and the input is blank. But this is just my perspective, let me know what you think is best.

There are also some code style issues (see our wiki).

👍

That's unfortunate. Is this documented somewhere? (Because it seems that e.g. DNS servers and search domains may be passed as comma separated list in the NM IP settings).

I don't believe it is documented. ipv4.dns is a simple text input while vpn.data is a csv key/value store for vpn options. Unfortunately since it uses a comma to delimit it, one can't be used in the values. From testing it didn't appear that values could be escaped either.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/defunctio,5,https://github.com/strongswan/strongswan/pull/69#issuecomment-298657248,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","@tobiasbrunner updated, awaiting review.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/69#issuecomment-298936910,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","Would it not be better to generate an error instead of falling back to the default proposal? Accepting the default proposal in this event would be undesirable from my perspective. It could even result in issues where a typo or mistake is made in the user provided proposal not being caught and falling back to defaults instead of properly being enforced.

Agreed. There is some cleanup code missing, though, when you return there (e.g. destroying the ike_cfg_t and later the child/peer_cfg_t objects).

Originally I didn't add one but it seemed like a bad UX decision as it could lead users to think it is a requirement or just add to confusion.

Yes, the checkbox definitely makes it clearer to the users that this is optional.

I assume the likelihood that someone would want to change only one of the proposals was probably not that high.

Well, the default IKE proposal includes all the (relatively strong) algorithms supported by the daemon (or rather by the plugins it has loaded). But that's not the case for ESP (we can't query the kernel for the supported algorithms via Netlink). So it could be that someone only wants to change the ESP proposal (in particular because the default does not include any DH groups).

We could add a default to the proposal if the box is checked and the input is blank.

Yeah, just add the default proposals, i.e. what you do in the update look fine.

I don't believe it is documented. ipv4.dns is a simple text input while vpn.data is a csv key/value store for vpn options. Unfortunately since it uses a comma to delimit it, one can't be used in the values. From testing it didn't appear that values could be escaped either.

Actually, while the input in the DNS text field is separated by commas, the plugin (or whoever) stores it separated with semicolons (i.e. if you look at the stored settings in /etc/NetworkManager/system-connections). Back in the GUI the values are separated by commas again. That's at least the case in the older version I'm using (perhaps they changed something with NM 1.2). Maybe we could somehow do the same. That would allow users to copy proposal strings from other configs without having to replace all commas with semicolons themselves.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/defunctio,7,https://github.com/strongswan/strongswan/pull/69#issuecomment-299004757,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","Agreed. There is some cleanup code missing, though, when you return there (e.g. destroying the ike_cfg_t and later the child/peer_cfg_t objects).

I think that should take care of it, though I haven't tested it yet.
Also to note; nm_service.c#L643 and nm_service.c#L670

Actually, while the input in the DNS text field is separated by commas, the plugin (or whoever) stores it separated with semicolons (i.e. if you look at the stored settings in /etc/NetworkManager/system-connections). Back in the GUI the values are separated by commas again. That's at least the case in the older version I'm using (perhaps they changed something with NM 1.2). Maybe we could somehow do the same. That would allow users to copy proposal strings from other configs without having to replace all commas with semicolons themselves.

I'll change to alter that on the plugin side so the underlying processing in charon-nm will remain the same. This makes it still possible to function with nmcli but transparent to users of the plugin so they can just paste the original proposal strings from elsewhere.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/69#issuecomment-299416649,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.","I think that should take care of it, though I haven't tested it yet.
Also to note; nm_service.c#L643 and nm_service.c#L670

Actually, these objects (e.g. gateway, user or auth) are passed to other objects and are their responsibility afterwards. So depending on where you report the error you really only have to clean up the root object of that hierarchy (e.g. peer_cfg). Otherwise, you are causing double frees.

I'll change to alter that on the plugin side so the underlying processing in charon-nm will remain the same. This makes it still possible to function with nmcli but transparent to users of the plugin so they can just paste the original proposal strings from elsewhere.

Sounds good.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,69,2017-04-30T18:47:00Z,2017-05-08T12:36:02Z,2017-05-08T12:36:08Z,CLOSED,False,55,5,1,https://github.com/defunctio,charon-nm IKE/ESP proposal support,4,[],https://github.com/strongswan/strongswan/pull/69,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/69#issuecomment-299854812,"Adds support for IKE/ESP proposals passed via vpn data.
vpn data parameters;

proposal

[ yes / no ]


esp / ike

A ; delimited list of proposals, supporting the ! suffix



Similar to ipsec.conf a ! is accepted as a suffix to restrict proposals.
Note: A ; is used instead of a , as a delimiter due to nmcli's inability to pass , in values.",Thanks for your work on this. I've pulled the changes here and in #70 to master (with some squashing and cleanups) so this will be included in our next release.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,70,2017-04-30T18:49:25Z,2017-05-08T12:36:02Z,2017-05-08T12:36:02Z,CLOSED,False,190,0,2,https://github.com/defunctio,network manager strongswan IKE/ESP proposal support,3,[],https://github.com/strongswan/strongswan/pull/70,https://github.com/defunctio,1,https://github.com/strongswan/strongswan/pull/70,"Adds custom IKE/ESP proposal support for the strongswan network manager plugin.
This PR relies on changes made in PR #69.","Adds custom IKE/ESP proposal support for the strongswan network manager plugin.
This PR relies on changes made in PR #69.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,70,2017-04-30T18:49:25Z,2017-05-08T12:36:02Z,2017-05-08T12:36:02Z,CLOSED,False,190,0,2,https://github.com/defunctio,network manager strongswan IKE/ESP proposal support,3,[],https://github.com/strongswan/strongswan/pull/70,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/70#issuecomment-298253131,"Adds custom IKE/ESP proposal support for the strongswan network manager plugin.
This PR relies on changes made in PR #69.","Codecov Report

Merging #70 into master will decrease coverage by 0.04%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #70      +/-   ##
==========================================
- Coverage   52.99%   52.95%   -0.05%     
==========================================
  Files         289      289              
  Lines       38322    38322              
==========================================
- Hits        20309    20292      -17     
- Misses      18013    18030      +17



Impacted Files
Coverage Δ





src/libstrongswan/plugins/bliss/bliss_utils.c
88.7% <0%> (-3.23%)
⬇️


src/libcharon/plugins/vici/vici_socket.c
81.93% <0%> (-1.69%)
⬇️


...rc/libstrongswan/plugins/bliss/bliss_private_key.c
91.87% <0%> (-1.45%)
⬇️


src/libstrongswan/networking/streams/stream.c
80% <0%> (-1.12%)
⬇️


src/libstrongswan/plugins/ntru/ntru_convert.c
98.02% <0%> (-0.99%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update d38d1fc...9d9272d. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,70,2017-04-30T18:49:25Z,2017-05-08T12:36:02Z,2017-05-08T12:36:02Z,CLOSED,False,190,0,2,https://github.com/defunctio,network manager strongswan IKE/ESP proposal support,3,[],https://github.com/strongswan/strongswan/pull/70,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/70#issuecomment-298304209,"Adds custom IKE/ESP proposal support for the strongswan network manager plugin.
This PR relies on changes made in PR #69.","Looks pretty good. Requires some changes once #69 is updated (there are also some minor code style issues, e.g. missing spaces around if, but as you can see from the existing code the style is not enforced as strictly here).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/sch-m,1,https://github.com/strongswan/strongswan/pull/71,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/71#issuecomment-300695667,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","Codecov Report

Merging #71 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master      #71      +/-   ##
==========================================
- Coverage   52.97%   52.95%   -0.02%     
==========================================
  Files         289      289              
  Lines       38322    38322              
==========================================
- Hits        20300    20295       -5     
- Misses      18022    18027       +5



Impacted Files
Coverage Δ





src/libstrongswan/plugins/bliss/bliss_utils.c
88.7% <0%> (-3.23%)
⬇️


src/libstrongswan/plugins/ntru/ntru_convert.c
98.02% <0%> (-0.99%)
⬇️


...rc/libstrongswan/plugins/bliss/bliss_private_key.c
91.87% <0%> (-0.19%)
⬇️


src/libcharon/plugins/vici/vici_socket.c
82.77% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a5f7a4c...fc050bd. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/sch-m,3,https://github.com/strongswan/strongswan/pull/71#issuecomment-301380363,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","I don't know what's the problem with this codecov/project check, but I think this has nothing to do with my commit. :-)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/71#issuecomment-301493338,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","One problem I see with this is that it creates such a rule for every connection, where it is way easier and efficient to just add one simple rule that covers all clients (which, in this scenario, are usually roadwarriors and may connect in large numbers). While the same applies to the other rules added by the script, these here are not really security relevant and only needed if an SNAT is in place. So there isn't any benefit in making them so specific and adding/removing them with each client connection. I'd actually rather remove the note in the man page than applying this patch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/sch-m,5,https://github.com/strongswan/strongswan/pull/71#issuecomment-301704751,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","I chose the way to add a rule for every connection analogous to the filter rules because i thought this would be the ""cleanest"" way . But yes, you are right. At least on the host side it would be much more efficient to just add one simple rule that covers all clients.
But I still think that the updown script would be the best solution to set this rule(s), so that the user just have to set the left|rightfirewall option to yes to get the vpn connection working without having to handle any firewall rules.
what about handling this by-connection based rules in the ""up|down-client:iptables"" cases like I did in my patch and simple add the generic rule in the ""up-host:iptables"" case?
Or maybe add the generic rule for client and host side?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/71#issuecomment-303096977,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","what about handling this by-connection based rules in the ""up|down-client:iptables"" cases like I did in my patch and simple add the generic rule in the ""up-host:iptables"" case?

The difference between *-client and *-host is that the latter is called if the local traffic selector is a single host. It's not necessarily a distinction between client and server (but in the usual roadwarrior scenario, with virtual IPs for clients and tunneling everything to the server, *-host is called on the client and *-client on the server).
And adding generic rules (i.e. rules that are only needed once for all connections) with the updown script is not easy as you'd have to add some kind of reference counting (the script is called for every combination of local and remote subnet), otherwise the first client disconnecting will remove the rule again.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,71,2017-05-11T05:56:34Z,,2017-05-29T06:21:08Z,OPEN,False,20,0,1,https://github.com/sch-m,updown: Add rules (ipv4) to fix masquerading issues,1,[],https://github.com/strongswan/strongswan/pull/71,https://github.com/sch-m,7,https://github.com/strongswan/strongswan/pull/71#issuecomment-304581563,"This patch implements the feature already documented by the
left|rightfirewall option to exclude the ipsec related traffic from
masquerading.
Signed-off-by: Martin Schiller ms@dev.tdt.de","Oh, ok. so I missunderstood this *-client and *-host design.
But I'm still searching for a solution where the user doesn't have to set any kind of ipsec-related firewall rules, because strongswan should do it for him when the left|rightfirewall option is used.
What about just adding the generic rule without removing it at all. I know this seems not a really clean way, but the rule shouldn't hurt anything else and is only added if the left|rightfirewall option is used. So no refcounting would be needed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,72,2017-05-11T11:13:19Z,2017-05-15T14:34:28Z,2017-05-15T14:34:28Z,CLOSED,False,2,2,1,https://github.com/baruchsiach,af_alg: fix crypt() definition conflict,1,[],https://github.com/strongswan/strongswan/pull/72,https://github.com/baruchsiach,1,https://github.com/strongswan/strongswan/pull/72,"Rename the crypt() method to avoid conflict with POSIX crypt(). Fixes the
following build failure with musl libc:
In file included from ../../../../src/libstrongswan/utils/utils.h:53:0,
from ../../../../src/libstrongswan/library.h:101,
from af_alg_ops.h:24,
from af_alg_ops.c:16:
af_alg_ops.c:110:22: error: conflicting types for 'crypt'
METHOD(af_alg_ops_t, crypt, bool,
^
../../../../src/libstrongswan/utils/utils/object.h:99:13: note: in definition of macro 'METHOD'
static ret name(union {iface *_public; this;} 
^
In file included from af_alg_ops.c:18:0:
.../host/usr/x86_64-buildroot-linux-musl/sysroot/usr/include/unistd.h:144:7: note: previous declaration of 'crypt' was here
char *crypt(const char *, const char *);
^","Rename the crypt() method to avoid conflict with POSIX crypt(). Fixes the
following build failure with musl libc:
In file included from ../../../../src/libstrongswan/utils/utils.h:53:0,
from ../../../../src/libstrongswan/library.h:101,
from af_alg_ops.h:24,
from af_alg_ops.c:16:
af_alg_ops.c:110:22: error: conflicting types for 'crypt'
METHOD(af_alg_ops_t, crypt, bool,
^
../../../../src/libstrongswan/utils/utils/object.h:99:13: note: in definition of macro 'METHOD'
static ret name(union {iface *_public; this;} 
^
In file included from af_alg_ops.c:18:0:
.../host/usr/x86_64-buildroot-linux-musl/sysroot/usr/include/unistd.h:144:7: note: previous declaration of 'crypt' was here
char *crypt(const char *, const char *);
^",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,72,2017-05-11T11:13:19Z,2017-05-15T14:34:28Z,2017-05-15T14:34:28Z,CLOSED,False,2,2,1,https://github.com/baruchsiach,af_alg: fix crypt() definition conflict,1,[],https://github.com/strongswan/strongswan/pull/72,https://github.com/codecov-io,2,https://github.com/strongswan/strongswan/pull/72#issuecomment-300765929,"Rename the crypt() method to avoid conflict with POSIX crypt(). Fixes the
following build failure with musl libc:
In file included from ../../../../src/libstrongswan/utils/utils.h:53:0,
from ../../../../src/libstrongswan/library.h:101,
from af_alg_ops.h:24,
from af_alg_ops.c:16:
af_alg_ops.c:110:22: error: conflicting types for 'crypt'
METHOD(af_alg_ops_t, crypt, bool,
^
../../../../src/libstrongswan/utils/utils/object.h:99:13: note: in definition of macro 'METHOD'
static ret name(union {iface *_public; this;} 
^
In file included from af_alg_ops.c:18:0:
.../host/usr/x86_64-buildroot-linux-musl/sysroot/usr/include/unistd.h:144:7: note: previous declaration of 'crypt' was here
char *crypt(const char *, const char *);
^","Codecov Report

Merging #72 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master      #72   +/-   ##
=======================================
  Coverage   52.97%   52.97%           
=======================================
  Files         289      289           
  Lines       38322    38322           
=======================================
  Hits        20300    20300           
  Misses      18022    18022



Impacted Files
Coverage Δ





src/libstrongswan/plugins/bliss/bliss_utils.c
88.7% <0%> (-3.23%)
⬇️


src/libstrongswan/networking/streams/stream.c
80% <0%> (-1.12%)
⬇️


src/libstrongswan/processing/processor.c
76.31% <0%> (-1.06%)
⬇️


src/libcharon/plugins/vici/vici_socket.c
81.93% <0%> (-0.85%)
⬇️


src/libstrongswan/threading/thread.c
81.2% <0%> (-0.76%)
⬇️


...ron/plugins/kernel_netlink/kernel_netlink_shared.c
62.55% <0%> (+0.88%)
⬆️


...rc/libstrongswan/plugins/bliss/bliss_private_key.c
93.14% <0%> (+1.08%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a5f7a4c...a28196d. Read the comment docs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,72,2017-05-11T11:13:19Z,2017-05-15T14:34:28Z,2017-05-15T14:34:28Z,CLOSED,False,2,2,1,https://github.com/baruchsiach,af_alg: fix crypt() definition conflict,1,[],https://github.com/strongswan/strongswan/pull/72,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/72#issuecomment-301494012,"Rename the crypt() method to avoid conflict with POSIX crypt(). Fixes the
following build failure with musl libc:
In file included from ../../../../src/libstrongswan/utils/utils.h:53:0,
from ../../../../src/libstrongswan/library.h:101,
from af_alg_ops.h:24,
from af_alg_ops.c:16:
af_alg_ops.c:110:22: error: conflicting types for 'crypt'
METHOD(af_alg_ops_t, crypt, bool,
^
../../../../src/libstrongswan/utils/utils/object.h:99:13: note: in definition of macro 'METHOD'
static ret name(union {iface *_public; this;} 
^
In file included from af_alg_ops.c:18:0:
.../host/usr/x86_64-buildroot-linux-musl/sysroot/usr/include/unistd.h:144:7: note: previous declaration of 'crypt' was here
char *crypt(const char *, const char *);
^","Applied, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,73,2017-05-19T00:23:07Z,,2017-06-12T16:13:23Z,OPEN,False,81,3,6,https://github.com/Thermi,Store configure arguments in libstrongswan and extend swanctl to print it out,4,[],https://github.com/strongswan/strongswan/pull/73,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/73,"This PR implements the following changes:

Declare the configuration arguments as a preprocessor definition in config.h
Store the arguments in an attribute to the private interface of libstrongswan
Declare a method to get the configure arguments from libstrongswan
Extend swanctl to print out the configure arguments using ""--get-config-args"" (-o)","This PR implements the following changes:

Declare the configuration arguments as a preprocessor definition in config.h
Store the arguments in an attribute to the private interface of libstrongswan
Declare a method to get the configure arguments from libstrongswan
Extend swanctl to print out the configure arguments using ""--get-config-args"" (-o)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,73,2017-05-19T00:23:07Z,,2017-06-12T16:13:23Z,OPEN,False,81,3,6,https://github.com/Thermi,Store configure arguments in libstrongswan and extend swanctl to print it out,4,[],https://github.com/strongswan/strongswan/pull/73,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/73#issuecomment-304909166,"This PR implements the following changes:

Declare the configuration arguments as a preprocessor definition in config.h
Store the arguments in an attribute to the private interface of libstrongswan
Declare a method to get the configure arguments from libstrongswan
Extend swanctl to print out the configure arguments using ""--get-config-args"" (-o)","Sure, we could store them in /usr/share instead. The question is if the distros that ship strongSwan would need to make any changes to their files to support this single command. I decided to store it in libstrongswan, because that's what was configured with the args. Storing it there would also make it possible to write a VICI command for that later, if it's required, and adding the functionality for ipsec stroke. Should I use strdup() instead of returning the char *?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,73,2017-05-19T00:23:07Z,,2017-06-12T16:13:23Z,OPEN,False,81,3,6,https://github.com/Thermi,Store configure arguments in libstrongswan and extend swanctl to print it out,4,[],https://github.com/strongswan/strongswan/pull/73,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/73#issuecomment-304912431,"This PR implements the following changes:

Declare the configuration arguments as a preprocessor definition in config.h
Store the arguments in an attribute to the private interface of libstrongswan
Declare a method to get the configure arguments from libstrongswan
Extend swanctl to print out the configure arguments using ""--get-config-args"" (-o)","The question is if the distros that ship strongSwan would need to make any changes to their files to support this single command.

So? On Debian/Ubuntu you'd e.g. get a warning if an installed file is not packed up.

I decided to store it in libstrongswan, because that's what was configured with the args.

Not really. Many options have effects on other libraries or programs (e.g. all the plugins that are not in libstrongswan or CFLAGS passed to the script or cross-compile options).

Storing it there would also make it possible to write a VICI command for that later, if it's required, and adding the functionality for ipsec stroke.

All other commands should easily be able to read a file in /usr/share.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,73,2017-05-19T00:23:07Z,,2017-06-12T16:13:23Z,OPEN,False,81,3,6,https://github.com/Thermi,Store configure arguments in libstrongswan and extend swanctl to print it out,4,[],https://github.com/strongswan/strongswan/pull/73,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/73#issuecomment-304932666,"This PR implements the following changes:

Declare the configuration arguments as a preprocessor definition in config.h
Store the arguments in an attribute to the private interface of libstrongswan
Declare a method to get the configure arguments from libstrongswan
Extend swanctl to print out the configure arguments using ""--get-config-args"" (-o)","The question is if the distros that ship strongSwan would need to make any changes to their files to support this single command.



So? On Debian/Ubuntu you'd e.g. get a warning if an installed file is not packed up.

Okay, so that's not a problem.


I decided to store it in libstrongswan, because that's what was configured with the args.



Not really. Many options have effects on other libraries or programs (e.g. all the plugins that are not in libstrongswan or CFLAGS passed to the script or cross-compile options).

Well, sure, but libstrongswan is the central lib of strongswan and I think the arguments that were used to configure strongSwan should be stored in something that directly relates to strongSwan. So I chose the lib.


Storing it there would also make it possible to write a VICI command for that later, if it's required, and adding the functionality for ipsec stroke.



All other commands should easily be able to read a file in /usr/share.

Yes. VICI can be spoken about TCP though (So from other systems) and I am concerned that it could cause confusion about what's configuration line is actually printed if one executes get_stored_arguments() from a remote system, if it's just read from a file by the local binary. I'd expect the remote peer's arguments to be printed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,74,2017-06-19T09:04:39Z,2019-04-01T10:13:04Z,2019-04-01T10:13:04Z,CLOSED,False,1,7,1,https://github.com/avinoamm,Update task_manager_v1.c,1,[],https://github.com/strongswan/strongswan/pull/74,https://github.com/avinoamm,1,https://github.com/strongswan/strongswan/pull/74,"Instead of  deleting  redundent CHILD SA on rekey, just ignore the rekey and wait for hard expiration time.","Instead of  deleting  redundent CHILD SA on rekey, just ignore the rekey and wait for hard expiration time.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,74,2017-06-19T09:04:39Z,2019-04-01T10:13:04Z,2019-04-01T10:13:04Z,CLOSED,False,1,7,1,https://github.com/avinoamm,Update task_manager_v1.c,1,[],https://github.com/strongswan/strongswan/pull/74,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/74#issuecomment-478520029,"Instead of  deleting  redundent CHILD SA on rekey, just ignore the rekey and wait for hard expiration time.",Handled in 2358 on the issue tracker. Since 083208e this depends on the charon.delete_rekeyed option.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,75,2017-06-20T11:28:36Z,2017-06-20T12:03:21Z,2017-06-20T12:03:21Z,CLOSED,False,2,1,1,https://github.com/securitykernel,Add coverage flags for openssl plugin,1,[],https://github.com/strongswan/strongswan/pull/75,https://github.com/securitykernel,1,https://github.com/strongswan/strongswan/pull/75,We want to look into the coverage of the openssl plugin.,We want to look into the coverage of the openssl plugin.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,75,2017-06-20T11:28:36Z,2017-06-20T12:03:21Z,2017-06-20T12:03:21Z,CLOSED,False,2,1,1,https://github.com/securitykernel,Add coverage flags for openssl plugin,1,[],https://github.com/strongswan/strongswan/pull/75,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/75#issuecomment-309731054,We want to look into the coverage of the openssl plugin.,I guess we could also extend PLUGIN_CFLAGS to enable coverage in all plugins if compiled with --enable-coverage. I did so in the plugins-coverage branch. Let me know if that works for you too.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,75,2017-06-20T11:28:36Z,2017-06-20T12:03:21Z,2017-06-20T12:03:21Z,CLOSED,False,2,1,1,https://github.com/securitykernel,Add coverage flags for openssl plugin,1,[],https://github.com/strongswan/strongswan/pull/75,https://github.com/securitykernel,3,https://github.com/strongswan/strongswan/pull/75#issuecomment-309732204,We want to look into the coverage of the openssl plugin.,"Works fine for us, thanks! Closing here.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,76,2017-06-30T03:24:02Z,2017-06-30T03:25:07Z,2017-06-30T03:25:07Z,CLOSED,False,0,0,0,https://github.com/rossoneri91,Merge pull request #1 from strongswan/master,1,[],https://github.com/strongswan/strongswan/pull/76,https://github.com/rossoneri91,1,https://github.com/strongswan/strongswan/pull/76,Update latest strongSwan source code,Update latest strongSwan source code,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,77,2017-07-07T06:03:04Z,2017-07-10T05:51:36Z,2017-07-10T05:51:36Z,CLOSED,False,66,0,16,https://github.com/Ferryworld,make nopmtudisc function configurable,1,[],https://github.com/strongswan/strongswan/pull/77,https://github.com/Ferryworld,1,https://github.com/strongswan/strongswan/pull/77,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,77,2017-07-07T06:03:04Z,2017-07-10T05:51:36Z,2017-07-10T05:51:36Z,CLOSED,False,66,0,16,https://github.com/Ferryworld,make nopmtudisc function configurable,1,[],https://github.com/strongswan/strongswan/pull/77,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/77#issuecomment-313595893,,Why would you want to disable PMTUD?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,77,2017-07-07T06:03:04Z,2017-07-10T05:51:36Z,2017-07-10T05:51:36Z,CLOSED,False,66,0,16,https://github.com/Ferryworld,make nopmtudisc function configurable,1,[],https://github.com/strongswan/strongswan/pull/77,https://github.com/Ferryworld,3,https://github.com/strongswan/strongswan/pull/77#issuecomment-313614253,,PMTUD will fragment the package and some parts will be lost in some case.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,77,2017-07-07T06:03:04Z,2017-07-10T05:51:36Z,2017-07-10T05:51:36Z,CLOSED,False,66,0,16,https://github.com/Ferryworld,make nopmtudisc function configurable,1,[],https://github.com/strongswan/strongswan/pull/77,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/77#issuecomment-313619079,,"PMTUD will fragment the package and some parts will be lost in some case.

No, it's actually disabling PMTUD (which is what that flag indirectly does) that might potentially cause the ESP (or ESP-in-UDP) packet to get fragmented (as the DF flag will not be set, if it was set on the original packet, which might depend on different sysctl options in the first place). Disabling it will only work in cases where ICMPs are dropped (i.e. PMTUD won't work) but packets are then actually fragmented on the way if they are too big (not just dropped, which some routers/ISPs do even if the DF flag is not set) and these fragments are then also properly forwarded (and not dropped, which seems to happen a lot, judging by the reports we see regarding too large IKE_AUTH messages).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/ebirger,1,https://github.com/strongswan/strongswan/pull/78,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/78#issuecomment-319663062,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","Thanks for the patch. Could you please describe a possible use case for this in more detail?
The ! suffix is not really ideal (too easy to overlook). I pushed a modified version to the gh78-mark-unique-dir branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/ebirger,3,https://github.com/strongswan/strongswan/pull/78#issuecomment-319750756,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","Hi Tobias,
Thanks for the review and changes! I definitely find 'unique-dir' to be more understandable.
I noticed you hadn't changed the 'MARK_UNIQUE_STRICT' macro name to reflect that change,
Would you like me to rename it (et al.) to MARK_UNIQUE_DIR?
Re use-case, I will add the following description to the commit message:
When implementing a site-to-site route-based VPN without VTI devices, the use of
0.0.0.0/0-0.0.0.0/0 traffic selector with identical marks for the in and out directions
leads to packet drops.
The reason is that the 'out' and 'fwd' policies overlap (same TSs and marks) but the
underlay 'template' mismatches - the 'fwd' template is from 'remote' to 'local' whereas
the 'out' template is from 'local' to 'remote. When outbound traffic is matched against the
'fwd' policy, it is dropped.
Using different marks for each direction provides a way to distinguish between the
'out' and 'fwd' policies.
Thanks!
Eyal.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/ebirger,4,https://github.com/strongswan/strongswan/pull/78#issuecomment-319867732,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.",I have altered the original commit message and added an additional commit for renaming MARK_UNIQUE_STRICT to MARK_UNIQUE_DIR - to be squashed or discarded of at your liking.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/78#issuecomment-320188418,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","I noticed you hadn't changed the 'MARK_UNIQUE_STRICT' macro name to reflect that change

Yeah, I didn't think it was necessary because STRICT in the constant seemed to work equally well. But I've no problem with changing it either.

The reason is that the 'out' and 'fwd' policies overlap (same TSs and marks)

Hm, but that's not true. The FWD policy looks like the IN policy, not the OUT policy (with regards to the traffic selectors and templates).

When outbound traffic is matched against the 'fwd' policy, it is dropped.

There is the policies_fwd_out option in swanctl.conf to explicitly install FWD policies that look like OUT policies (i.e. two FWD policies will be installed). Does that work for your use case too (i.e. without separate marks)?
Also, usually the missing outbound FWD policy is only an issue when there is a FWD drop policy that would match the traffic (the additional FWD policy will then just act as passthrough policy). Because if there is no drop policy, the Linux kernel only cares for them when forwarding after decryption, hence the IN-FWD policy, but not when forwarding plain traffic (which will just match the OUT policy). I guess that could be due to the VTI device if it enforces FWD policies. What kernel version do you use?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/ebirger,6,https://github.com/strongswan/strongswan/pull/78#issuecomment-320213129,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","The reason is that the 'out' and 'fwd' policies overlap (same TSs and marks)



Hm, but that's not true. The FWD policy looks like the IN policy, not the OUT policy (with regards to the traffic selectors and templates).

Indeed the templates are different, and since the traffic selectors of the FWD policy do match the outbound traffic, the traffic is dropped.
I can see the 'XfrmInTmplMismatch' counter going up in /proc/net/xfrm_stat

There is the policies_fwd_out option in swanctl.conf to explicitly install FWD policies that look like OUT policies (i.e. two FWD policies will be installed). Does that work for your use case too (i.e. without separate marks)?

I can check, though as the traffic selectors will still match both FWD policies, will the correct one be picked?

Also, usually the missing outbound FWD policy is only an issue when there is a FWD drop policy that would match the traffic (the additional FWD policy will then just act as passthrough policy). Because if there is no drop policy, the Linux kernel only cares for them when forwarding after decryption, hence the IN-FWD policy, but not when forwarding plain traffic (which will just match the OUT policy). I guess that could be due to the VTI device if it enforces FWD policies. What kernel version do you use?

I'm using kernel 4.10. I think it also happened on 4.8 and 4.4.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/ebirger,7,https://github.com/strongswan/strongswan/pull/78#issuecomment-320218155,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","Note I'm not using a VTI device, so can't disable policy check on FWD.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,78,2017-07-28T06:32:40Z,2017-08-07T12:23:52Z,2017-08-07T12:23:52Z,CLOSED,False,51,12,6,https://github.com/ebirger,child-sa: allow requesting different unique marks for in/out,3,[],https://github.com/strongswan/strongswan/pull/78,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/78#issuecomment-320617533,"When requiring unique flags for CHILD_SAs, allow the configuration to
request different marks for each direction by adding an exclamation point
to the %unique keyword.
This is useful when different marks are desired for each direction (e.g.
when 0.0.0.0/0 - 0.0.0.0/0 traffic selectors are used) but the number
of peers is not predefined.","I can check, though as the traffic selectors will still match both FWD policies, will the correct one be picked?

No, with 0.0.0.0/0 on both ends (or with any equal TS) only one FWD policy is installed anyway (looking like the IN policy).

Note I'm not using a VTI device, so can't disable policy check on FWD.

I see. Yeah, with VTI devices policy matching is usually disabled (for that device) as it enforces the IN/OUT policy directly (via e.g. sysctl -w net.ipv4.conf.<vtiname>.disable_policy=1).
I'll apply the change to master. Thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,79,2017-08-30T00:52:35Z,2017-10-10T09:17:20Z,2017-10-10T09:17:20Z,CLOSED,False,127,0,4,https://github.com/aszlig,Add basic stream service for systemd sockets,1,[],https://github.com/strongswan/strongswan/pull/79,https://github.com/aszlig,1,https://github.com/strongswan/strongswan/pull/79,"This systemd socket activation by passing URIs such as systemd://foo to plugins such as VICI.
For example setting charon.plugins.vici.socket = systemd://vici, a systemd socket file descriptor with the name vici will be picked up.
So these would be the corresponding unit options:
[Socket]
FileDescriptorName=vici
Service=strongswan.service

ListenStream=/run/openswan.vici
The implementation currently is very basic and right now only the first file descriptor for a particular identifier is picked up if there are multiple socket units with the same FileDescriptorName.","This systemd socket activation by passing URIs such as systemd://foo to plugins such as VICI.
For example setting charon.plugins.vici.socket = systemd://vici, a systemd socket file descriptor with the name vici will be picked up.
So these would be the corresponding unit options:
[Socket]
FileDescriptorName=vici
Service=strongswan.service

ListenStream=/run/openswan.vici
The implementation currently is very basic and right now only the first file descriptor for a particular identifier is picked up if there are multiple socket units with the same FileDescriptorName.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,79,2017-08-30T00:52:35Z,2017-10-10T09:17:20Z,2017-10-10T09:17:20Z,CLOSED,False,127,0,4,https://github.com/aszlig,Add basic stream service for systemd sockets,1,[],https://github.com/strongswan/strongswan/pull/79,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/79#issuecomment-325930801,"This systemd socket activation by passing URIs such as systemd://foo to plugins such as VICI.
For example setting charon.plugins.vici.socket = systemd://vici, a systemd socket file descriptor with the name vici will be picked up.
So these would be the corresponding unit options:
[Socket]
FileDescriptorName=vici
Service=strongswan.service

ListenStream=/run/openswan.vici
The implementation currently is very basic and right now only the first file descriptor for a particular identifier is picked up if there are multiple socket units with the same FileDescriptorName.","Thanks for the patch.
Is the main point of this the service activation by sending a VICI message to that socket? If so, when exactly is that useful (compared to just starting the daemon on system boot)? Or what is the use case for this?
The example in the commit message uses the wrong *swan, and the default path (which clients like swanctl use by default) is /var/run/charon.vici (otherwise this has to be configured via swanctl.socket or --uri). Ideally, there would be an easy way for clients to lookup the socket via name as well, so a single configuration via libstrongswan.plugins.vici.socket = systemd://vici would work in the plugin and swanctl (that'd require a stream_create_systemd() constructor).
Please have a look at our wiki page regarding contributions. Would be great if you considered resubmitting under the mentioned license.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,79,2017-08-30T00:52:35Z,2017-10-10T09:17:20Z,2017-10-10T09:17:20Z,CLOSED,False,127,0,4,https://github.com/aszlig,Add basic stream service for systemd sockets,1,[],https://github.com/strongswan/strongswan/pull/79,https://github.com/aszlig,3,https://github.com/strongswan/strongswan/pull/79#issuecomment-326386515,"This systemd socket activation by passing URIs such as systemd://foo to plugins such as VICI.
For example setting charon.plugins.vici.socket = systemd://vici, a systemd socket file descriptor with the name vici will be picked up.
So these would be the corresponding unit options:
[Socket]
FileDescriptorName=vici
Service=strongswan.service

ListenStream=/run/openswan.vici
The implementation currently is very basic and right now only the first file descriptor for a particular identifier is picked up if there are multiple socket units with the same FileDescriptorName.","Is the main point of this the service activation by sending a VICI message to that socket? If so, when exactly is that useful (compared to just starting the daemon on system boot)? Or what is the use case for this?

It is useful for privilege separation. For example I'm running charon as normal user who has no network access other than UDP and netlink and the user also doesn't own the socket.

The example in the commit message uses the wrong *swan

Oh, right, I wanted to write /run/charon.vici (/var/run is symlinked to /run on systemd systems).

Please have a look at our wiki page regarding contributions. Would be great if you considered resubmitting under the mentioned license.

Sure, I'll do.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,79,2017-08-30T00:52:35Z,2017-10-10T09:17:20Z,2017-10-10T09:17:20Z,CLOSED,False,127,0,4,https://github.com/aszlig,Add basic stream service for systemd sockets,1,[],https://github.com/strongswan/strongswan/pull/79,https://github.com/aszlig,4,https://github.com/strongswan/strongswan/pull/79#issuecomment-326387657,"This systemd socket activation by passing URIs such as systemd://foo to plugins such as VICI.
For example setting charon.plugins.vici.socket = systemd://vici, a systemd socket file descriptor with the name vici will be picked up.
So these would be the corresponding unit options:
[Socket]
FileDescriptorName=vici
Service=strongswan.service

ListenStream=/run/openswan.vici
The implementation currently is very basic and right now only the first file descriptor for a particular identifier is picked up if there are multiple socket units with the same FileDescriptorName.",@tobiasbrunner: Amended the commit with the points you mentioned.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,79,2017-08-30T00:52:35Z,2017-10-10T09:17:20Z,2017-10-10T09:17:20Z,CLOSED,False,127,0,4,https://github.com/aszlig,Add basic stream service for systemd sockets,1,[],https://github.com/strongswan/strongswan/pull/79,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/79#issuecomment-326565806,"This systemd socket activation by passing URIs such as systemd://foo to plugins such as VICI.
For example setting charon.plugins.vici.socket = systemd://vici, a systemd socket file descriptor with the name vici will be picked up.
So these would be the corresponding unit options:
[Socket]
FileDescriptorName=vici
Service=strongswan.service

ListenStream=/run/openswan.vici
The implementation currently is very basic and right now only the first file descriptor for a particular identifier is picked up if there are multiple socket units with the same FileDescriptorName.","It is useful for privilege separation. For example I'm running charon as normal user who has no network access other than UDP and netlink and the user also doesn't own the socket.

I see, nice. Pushed to the gh79-stream-service-systemd branch, with some minor changes. I'll close the PR once it's applied to master. Thanks again!",True,{'THUMBS_UP': ['https://github.com/aszlig']}
strongswan/strongswan,https://github.com/strongswan/strongswan,80,2017-08-31T04:38:16Z,2017-09-18T09:15:15Z,2017-09-18T09:15:15Z,CLOSED,False,1,1,1,https://github.com/rossoneri91,"libipsec: Fix ""packet too short"" error when parsing fragmented packets",1,[],https://github.com/strongswan/strongswan/pull/80,https://github.com/rossoneri91,1,https://github.com/strongswan/strongswan/pull/80,Should only parse the transport header of an IP packet if it's not fragmented or is the first fragment,Should only parse the transport header of an IP packet if it's not fragmented or is the first fragment,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,80,2017-08-31T04:38:16Z,2017-09-18T09:15:15Z,2017-09-18T09:15:15Z,CLOSED,False,1,1,1,https://github.com/rossoneri91,"libipsec: Fix ""packet too short"" error when parsing fragmented packets",1,[],https://github.com/strongswan/strongswan/pull/80,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/80#issuecomment-326556520,Should only parse the transport header of an IP packet if it's not fragmented or is the first fragment,"Hm, wouldn't the ip_off field be non-zero in the first fragment, because the MF flag is set (which is part of the 16-bit field)? I pushed an alternative patch to the gh80-libipsec-ip-frag branch (also includes a change for IPv6, where there was no such error but the next header was not correct for fragmented packets). Let me know if that works for you.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,81,2017-09-14T09:02:49Z,2017-09-14T09:03:14Z,2017-09-14T09:03:14Z,CLOSED,False,1,0,1,https://github.com/mavis-yang,test,1,[],https://github.com/strongswan/strongswan/pull/81,https://github.com/mavis-yang,1,https://github.com/strongswan/strongswan/pull/81,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,82,2017-09-28T08:08:10Z,,2017-09-28T11:03:16Z,OPEN,False,213,24,10,https://github.com/hessu,#2077: mem_pool address reassignment grace period,6,[],https://github.com/strongswan/strongswan/pull/82,https://github.com/hessu,1,https://github.com/strongswan/strongswan/pull/82,"This pull request should implement https://wiki.strongswan.org/issues/2077 - a configurable timer to prevent a recently-freed pool address from being assigned quickly to a different client. Currently defaults to 0 seconds/off, but a small positive value might be safe too.
I'm not sure what would be a good name for the configuration parameter, currently using left/rightreassignafter=N. I think it certainly needs to be configurable, since a preferred setting will depend on local circumstances (NAT timeouts, pool size, amount of unique clients using the pool).
I would prefer assignment of Least Recently Used addresses, but even then, with a small pool, a hard limit like implemented here might be good to have in some setups.
Missing swanctl config options and manual page changes for now; will add them if this looks good otherwise.","This pull request should implement https://wiki.strongswan.org/issues/2077 - a configurable timer to prevent a recently-freed pool address from being assigned quickly to a different client. Currently defaults to 0 seconds/off, but a small positive value might be safe too.
I'm not sure what would be a good name for the configuration parameter, currently using left/rightreassignafter=N. I think it certainly needs to be configurable, since a preferred setting will depend on local circumstances (NAT timeouts, pool size, amount of unique clients using the pool).
I would prefer assignment of Least Recently Used addresses, but even then, with a small pool, a hard limit like implemented here might be good to have in some setups.
Missing swanctl config options and manual page changes for now; will add them if this looks good otherwise.",True,"{'THUMBS_UP': ['https://github.com/dannyk81', 'https://github.com/Thermi', 'https://github.com/Galaxy0419']}"
strongswan/strongswan,https://github.com/strongswan/strongswan,83,2017-11-28T09:52:12Z,2017-11-29T04:41:11Z,2017-12-01T11:53:05Z,CLOSED,False,2,1,1,https://github.com/HenadziMatuts,Version field in TBSRequest section of OSCP Request.,1,[],https://github.com/strongswan/strongswan/pull/83,https://github.com/HenadziMatuts,1,https://github.com/strongswan/strongswan/pull/83,"RFC 6960 describes TBSRequest section of OSCP Request as:
TBSRequest ::= SEQUENCE {
       version             [0]     EXPLICIT Version DEFAULT v1,
       requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
       requestList                 SEQUENCE OF Request,
       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }

This pull request adds missing version field.","RFC 6960 describes TBSRequest section of OSCP Request as:
TBSRequest ::= SEQUENCE {
       version             [0]     EXPLICIT Version DEFAULT v1,
       requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
       requestList                 SEQUENCE OF Request,
       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }

This pull request adds missing version field.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,83,2017-11-28T09:52:12Z,2017-11-29T04:41:11Z,2017-12-01T11:53:05Z,CLOSED,False,2,1,1,https://github.com/HenadziMatuts,Version field in TBSRequest section of OSCP Request.,1,[],https://github.com/strongswan/strongswan/pull/83,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/83#issuecomment-347476003,"RFC 6960 describes TBSRequest section of OSCP Request as:
TBSRequest ::= SEQUENCE {
       version             [0]     EXPLICIT Version DEFAULT v1,
       requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
       requestList                 SEQUENCE OF Request,
       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }

This pull request adds missing version field.",It's not missing. Default values are usually omitted in ASN.1 encodings.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,83,2017-11-28T09:52:12Z,2017-11-29T04:41:11Z,2017-12-01T11:53:05Z,CLOSED,False,2,1,1,https://github.com/HenadziMatuts,Version field in TBSRequest section of OSCP Request.,1,[],https://github.com/strongswan/strongswan/pull/83,https://github.com/HenadziMatuts,3,https://github.com/strongswan/strongswan/pull/83#issuecomment-347751144,"RFC 6960 describes TBSRequest section of OSCP Request as:
TBSRequest ::= SEQUENCE {
       version             [0]     EXPLICIT Version DEFAULT v1,
       requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
       requestList                 SEQUENCE OF Request,
       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }

This pull request adds missing version field.",My bad. Thought it should be defined explicitly.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,83,2017-11-28T09:52:12Z,2017-11-29T04:41:11Z,2017-12-01T11:53:05Z,CLOSED,False,2,1,1,https://github.com/HenadziMatuts,Version field in TBSRequest section of OSCP Request.,1,[],https://github.com/strongswan/strongswan/pull/83,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/83#issuecomment-348476395,"RFC 6960 describes TBSRequest section of OSCP Request as:
TBSRequest ::= SEQUENCE {
       version             [0]     EXPLICIT Version DEFAULT v1,
       requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
       requestList                 SEQUENCE OF Request,
       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }

This pull request adds missing version field.","No problem. The EXPLICIT (if that's what confused you) refers to the encoding/tagging if the value is given, as opposed to IMPLICIT (where the type of the value is not explicitly encoded).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,84,2017-11-29T12:57:02Z,2017-12-22T09:27:02Z,2017-12-22T11:14:00Z,CLOSED,False,613,6,37,https://github.com/RobinMcCorkell,Add some route-based VPN test scenarios,5,[],https://github.com/strongswan/strongswan/pull/84,https://github.com/RobinMcCorkell,1,https://github.com/strongswan/strongswan/pull/84,"To complement https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN, I've created some route-based VPN test scenarios. I also fixed a small issue with the PATH environment variable in the testing build chroot, which was stopping me from running the tests on my machine.
Let me know if putting these tests in a new directory was the wrong decision, and they should instead be distributed amongst {ikev2,ipv6}. I may add more tests later, e.g. VTI6 tests (IPv6 IPsec), or GRE tests.","To complement https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN, I've created some route-based VPN test scenarios. I also fixed a small issue with the PATH environment variable in the testing build chroot, which was stopping me from running the tests on my machine.
Let me know if putting these tests in a new directory was the wrong decision, and they should instead be distributed amongst {ikev2,ipv6}. I may add more tests later, e.g. VTI6 tests (IPv6 IPsec), or GRE tests.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,84,2017-11-29T12:57:02Z,2017-12-22T09:27:02Z,2017-12-22T11:14:00Z,CLOSED,False,613,6,37,https://github.com/RobinMcCorkell,Add some route-based VPN test scenarios,5,[],https://github.com/strongswan/strongswan/pull/84,https://github.com/RobinMcCorkell,2,https://github.com/strongswan/strongswan/pull/84#issuecomment-348771429,"To complement https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN, I've created some route-based VPN test scenarios. I also fixed a small issue with the PATH environment variable in the testing build chroot, which was stopping me from running the tests on my machine.
Let me know if putting these tests in a new directory was the wrong decision, and they should instead be distributed amongst {ikev2,ipv6}. I may add more tests later, e.g. VTI6 tests (IPv6 IPsec), or GRE tests.","Along with adding a net2net-vti scenario, I changed the other scenarios to use PH_IP_* instead of hardcoded IP addresses. I know there's a lot of technical debt regarding that anyway, but I figured it's easier to get it right for these scenarios now than leave it.
I also won't add a GRE scenario in this PR, since I'm not too familiar with how GRE tunnels work",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,84,2017-11-29T12:57:02Z,2017-12-22T09:27:02Z,2017-12-22T11:14:00Z,CLOSED,False,613,6,37,https://github.com/RobinMcCorkell,Add some route-based VPN test scenarios,5,[],https://github.com/strongswan/strongswan/pull/84,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/84#issuecomment-348940876,"To complement https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN, I've created some route-based VPN test scenarios. I also fixed a small issue with the PATH environment variable in the testing build chroot, which was stopping me from running the tests on my machine.
Let me know if putting these tests in a new directory was the wrong decision, and they should instead be distributed amongst {ikev2,ipv6}. I may add more tests later, e.g. VTI6 tests (IPv6 IPsec), or GRE tests.","GRE tunnels are very simple.
You create one via ""ip tunnel [...]"" using a key that is the same on the other side. Then you use IPsec to protect it (the GRE protocol) between the two hosts. You obviously do not need to protect only GRE. Just route your networks over the tunnel device (just a simple network interface). It is a layer 3 tunnel though, so you don't need to set any next hops.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,84,2017-11-29T12:57:02Z,2017-12-22T09:27:02Z,2017-12-22T11:14:00Z,CLOSED,False,613,6,37,https://github.com/RobinMcCorkell,Add some route-based VPN test scenarios,5,[],https://github.com/strongswan/strongswan/pull/84,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/84#issuecomment-349647308,"To complement https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN, I've created some route-based VPN test scenarios. I also fixed a small issue with the PATH environment variable in the testing build chroot, which was stopping me from running the tests on my machine.
Let me know if putting these tests in a new directory was the wrong decision, and they should instead be distributed amongst {ikev2,ipv6}. I may add more tests later, e.g. VTI6 tests (IPv6 IPsec), or GRE tests.","Great, thanks! I've pushed the commits, with some small changes (e.g. renaming the scenario to ...ip6-in-ip4, fixing some checks in evaltest.dat - which were actually wrong in several other swanctl-based scenarios, disabling the policy lookup on the VTI device), to the testing-route-based branch. I also added a site-to-site GRE scenario (basically a combination of your swanctl-based net2net-vti scenario and my original net2net-gre scenario).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,84,2017-11-29T12:57:02Z,2017-12-22T09:27:02Z,2017-12-22T11:14:00Z,CLOSED,False,613,6,37,https://github.com/RobinMcCorkell,Add some route-based VPN test scenarios,5,[],https://github.com/strongswan/strongswan/pull/84,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/84#issuecomment-353558494,"To complement https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN, I've created some route-based VPN test scenarios. I also fixed a small issue with the PATH environment variable in the testing build chroot, which was stopping me from running the tests on my machine.
Let me know if putting these tests in a new directory was the wrong decision, and they should instead be distributed amongst {ikev2,ipv6}. I may add more tests later, e.g. VTI6 tests (IPv6 IPsec), or GRE tests.",Merged to master. Thanks again!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/lkundrak,1,https://github.com/strongswan/strongswan/pull/85,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/lkundrak,2,https://github.com/strongswan/strongswan/pull/85#issuecomment-348174602,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","Please note that this might not be ready for merging yet. I basically just compile-tested it, didn't give it any real test.
I eventually plan to do some testing, but I figured out it just might be a good idea to share this early.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/85#issuecomment-348471394,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","Great, there already is a bug report for the Debian package concerning this. Looking forward to your update.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/lkundrak,4,https://github.com/strongswan/strongswan/pull/85#issuecomment-349718510,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","Gave it some testing now.
Worked fine, apart from a hang on connection error -- the disconnect() method is now called on failure even when the plugin is not yet successfully connected.
I've added a condition in the disconnect() method which effectively restores the previous behaviour, but I'm not familiar with the code base enough to understand why the hang happened. Given the behaviour is same as previously, I guess that shouldn't be considered a blocker.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/85#issuecomment-350040451,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","Worked fine, apart from a hang on connection error -- the disconnect() method is now called on failure even when the plugin is not yet successfully connected.

When exactly is it called (i.e. what triggers it)? If it's triggered via e.g. ike_state_change() and signal_failure() then this could create a deadlock if the SA is still checked out and can't again by disconnect() (e.g. if any of the calls in signal_failure() are blocking until disconnect() returns). If that's the problem we could perhaps queue a job that does what signal_failure() does in a different thread so the caller can release the SA.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/lkundrak,6,https://github.com/strongswan/strongswan/pull/85#issuecomment-350209185,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","When exactly is it called (i.e. what triggers it)? If it's triggered via e.g. ike_state_change() and signal_failure() then this could create a deadlock if the SA is still checked out and can't again by disconnect() (e.g. if any of the calls in signal_failure() are blocking until disconnect() returns). If that's the problem we could perhaps queue a job that does what signal_failure() does in a different thread so the caller can release the SA.

Yes, that's indeed the case.
I've modified the patch to enqueue the actual disconnection and it works well now.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/85#issuecomment-350270745,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","Great, thanks. I've pushed this to the nm-charon-libnm branch. Can disconnect() be called multiple times? Even then, I guess disconnect_id is not strictly necessary. Calling do_disconnect() multiple times should not be a problem as the calls are queued to the main loop i.e. they will run sequentially and terminate_ike() will actually block until the IKE_SA is terminated, i.e. should there be a second call the SA will simply not found anymore, and since disconnect_id is reset early before calling terminate_ike that might also happen with the current code (unless the disconnect() calls happen in quick succession before any of them run).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/lkundrak,8,https://github.com/strongswan/strongswan/pull/85#issuecomment-351070130,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.","I guess disconnect_id is not strictly necessary.

Correct, not necessary. I thought makes the a bit more idiomatic while potentially avoiding extra work. I'm not sure if you're asking me to remove it, but I don't mind removing it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,85,2017-11-30T12:27:47Z,2017-12-22T09:06:50Z,2017-12-22T09:06:56Z,CLOSED,False,80,64,4,https://github.com/lkundrak,charon-nm: port to libnm,1,[],https://github.com/strongswan/strongswan/pull/85,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/85#issuecomment-353554869,"libnm-glib is deprecated for several years and reaching the end of its
life. Let's switch to the more up-to-date library.",Applied to master. Thanks again!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,86,2017-11-30T12:27:47Z,2017-12-06T10:13:37Z,2017-12-06T10:13:49Z,CLOSED,False,23,8,3,https://github.com/lkundrak,nm: allow disabling libnm-glib,1,[],https://github.com/strongswan/strongswan/pull/86,https://github.com/lkundrak,1,https://github.com/strongswan/strongswan/pull/86,"The distros are eventually going to drop it, allow omitting it.","The distros are eventually going to drop it, allow omitting it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,86,2017-11-30T12:27:47Z,2017-12-06T10:13:37Z,2017-12-06T10:13:49Z,CLOSED,False,23,8,3,https://github.com/lkundrak,nm: allow disabling libnm-glib,1,[],https://github.com/strongswan/strongswan/pull/86,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/86#issuecomment-348471498,"The distros are eventually going to drop it, allow omitting it.",I guess this could already be applied? Or should we wait until #85 is finalized? When exactly are the two plugins used (libnm-vpn-plugin-strongswan vs. libnm-strongswan-properties)? Does that depend on the NM version? Or the GUI used?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,86,2017-11-30T12:27:47Z,2017-12-06T10:13:37Z,2017-12-06T10:13:49Z,CLOSED,False,23,8,3,https://github.com/lkundrak,nm: allow disabling libnm-glib,1,[],https://github.com/strongswan/strongswan/pull/86,https://github.com/lkundrak,3,https://github.com/strongswan/strongswan/pull/86#issuecomment-349299058,"The distros are eventually going to drop it, allow omitting it.","I guess this could already be applied? Or should we wait until #85 is finalized?

No dependency on #85.

When exactly are the two plugins used (libnm-vpn-plugin-strongswan vs. libnm-strongswan-properties)? Does that depend on the NM version? Or the GUI used?

Mostly on the GUI used.
The GNOME Control Center and the nm-connection-editor (both for some time already, no idea for how long) use only the new .so file for the editor widget. (There's no other known users of this -- KDE reimplements the functionality).
The GNOME Shell and the nm-applet also use libnm or libnm-glib for locating the authentication dialog. GNOME Shell is not yet ported, but that will hopefully happen for GNOME 3.28. The migration not being 100% complete is the reason this leaves the libnm-glib version enabled by default.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,86,2017-11-30T12:27:47Z,2017-12-06T10:13:37Z,2017-12-06T10:13:49Z,CLOSED,False,23,8,3,https://github.com/lkundrak,nm: allow disabling libnm-glib,1,[],https://github.com/strongswan/strongswan/pull/86,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/86#issuecomment-349594594,"The distros are eventually going to drop it, allow omitting it.","OK, great. Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,87,2017-12-03T08:37:12Z,2017-12-07T16:32:26Z,2017-12-07T16:32:27Z,CLOSED,False,13,4,2,https://github.com/ebirger,ipsec_types: do not mask the configured mark value if it is one of th…,1,[],https://github.com/strongswan/strongswan/pull/87,https://github.com/ebirger,1,https://github.com/strongswan/strongswan/pull/87,"…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.","…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,87,2017-12-03T08:37:12Z,2017-12-07T16:32:26Z,2017-12-07T16:32:27Z,CLOSED,False,13,4,2,https://github.com/ebirger,ipsec_types: do not mask the configured mark value if it is one of th…,1,[],https://github.com/strongswan/strongswan/pull/87,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/87#issuecomment-348962868,"…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.","Looks good, thanks! I pushed this, slightly modified, to the gh87-mark-mask-unique branch. While I appreciate the macro hack to remove the braces it's really not that clear (i.e. why _STRINGIFY s and not _STRINGIFY(s)) and I'm not sure how portable it is. We don't gain that much with it anyway.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,87,2017-12-03T08:37:12Z,2017-12-07T16:32:26Z,2017-12-07T16:32:27Z,CLOSED,False,13,4,2,https://github.com/ebirger,ipsec_types: do not mask the configured mark value if it is one of th…,1,[],https://github.com/strongswan/strongswan/pull/87,https://github.com/ebirger,3,https://github.com/strongswan/strongswan/pull/87#issuecomment-348983015,"…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.","Thanks! indeed I wasn't too sure about the STRINGIFY hack. I wanted the test to be indifferent to the keyword value.
Looking at it a bit more, perhaps we should pass the keyword in the test string? something like:
{""%unique/0x0000ffff"",	TRUE, { MARK_UNIQUE, 0x0000ffff }}
What do you think?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,87,2017-12-03T08:37:12Z,2017-12-07T16:32:26Z,2017-12-07T16:32:27Z,CLOSED,False,13,4,2,https://github.com/ebirger,ipsec_types: do not mask the configured mark value if it is one of th…,1,[],https://github.com/strongswan/strongswan/pull/87,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/87#issuecomment-349651655,"…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.","Looking at it a bit more, perhaps we should pass the keyword in the test string? something like:
{""%unique/0x0000ffff"", TRUE, { MARK_UNIQUE, 0x0000ffff }}
What do you think?

Now that you mention it, that would definitely make sense. I guess doing both can't hurt either, I've updated the branch. Looks like nobody checked the test coverage of that function in a while (or ever).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,87,2017-12-03T08:37:12Z,2017-12-07T16:32:26Z,2017-12-07T16:32:27Z,CLOSED,False,13,4,2,https://github.com/ebirger,ipsec_types: do not mask the configured mark value if it is one of th…,1,[],https://github.com/strongswan/strongswan/pull/87,https://github.com/ebirger,5,https://github.com/strongswan/strongswan/pull/87#issuecomment-349685451,"…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.",Looks excellent. Thanks!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,87,2017-12-03T08:37:12Z,2017-12-07T16:32:26Z,2017-12-07T16:32:27Z,CLOSED,False,13,4,2,https://github.com/ebirger,ipsec_types: do not mask the configured mark value if it is one of th…,1,[],https://github.com/strongswan/strongswan/pull/87,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/87#issuecomment-350021488,"…e 'unique' values
Support for mark=%unique/%unique-dir is implemented by using designated
magic mark values.
Use of masks is orthogonal to the 'unique' feature, as it is useful to be
able to designate portions of the packet mark for other purposes, while
still using different marks for different connections.
When these magic values are masked, their magic meaning is lost.
Perform masking only on explicit mark values.",Applied to master. Thanks again.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,1,https://github.com/strongswan/strongswan/pull/88,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/88#issuecomment-361191445,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","Hm, this seems kinda hackish :) I'd rather use all the rules and their priorities to order the routes (obviously a lot more work than this, though).
However, there is also a simple workaround as you can simply use the kernel's route lookup, with full support for routing rules, by setting charon.plugins.kernel-netlink.fwmark = !mark (with an arbitrary mark not used for anything else on the system). That sets up the routing rule for table 220 (where strongSwan installs it's routes) to exclude traffic with that mark and we can therefore set the mark in our routing lookups to ignore our own routes and therefore can avoid dumping the routing table and having to do the lookup for the best route ourselves. If you set it up like that is the roam job for rule updates still necessary?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,3,https://github.com/strongswan/strongswan/pull/88#issuecomment-361207981,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","Hi!
Thanks for your detailed feedback, it is much appreciated.
My goal with this PR was to add support for controlling which network is used for IPsec (and change it on the fly) according to some policy, when multiple networks are available. The reason I chose to monitor a rule, was to have a solution that integrates well with what seems like the most common way of configuring policy routing. I will not make any claims to have seen all policy routing configurations in the world, but, for example, on my OpenWRT router the output of ip rule looks as follows (with two active internet connections):
0:      from all lookup local 
10000:  from 10.0.0.11 lookup 257 
10000:  from 10.0.0.66 lookup 10000 
20000:  from all to 10.0.0.11/24 lookup 257 
20000:  from all to 10.0.0.66/24 lookup 10000 
32766:  from all lookup main 
32767:  from all lookup default 
70001:  from all fwmark 0x3000000/0xff000000 lookup 220 
90020:  from all iif lo lookup 257 
90034:  from all iif lo lookup 10000

The first rules match on traffic to/from the local networks of my two internet-connections, the main rule contains the route to my LAN, and then there are two ""default"" rules for traffic not bound to any interface. If we assume that there is one IPsec tunnel configured, the tunnel is not bound to a specific interface, and that there are no firewalls blocking IPsec, then the tunnel will currently be established over either of the two interfaces.
If we add a rule with say priority 90001 and configure this as the preferred rule, then we can change which network the tunnel uses by replacing this rule. There are other ways to accomplish what I want, for example changing route metrics also seems to work. However, at least in my opinion, replacing a rule is the easiest and ""cleanest"" way. With for example the metric solution, the tool implementing the policy would need to be aware of which metric is set for different routes, and then update the metric for several routes.
Also, all rules/routes are still considered and prioritized as before. The ""only"" change made is that rules in the table pointed to by the preferred rule is placed first in the list (but sorted internally).
I have to admit I don't fully understand your proposed work-around. This is probably due to me not understanding something, but isn't table 220 only used to control which traffic will go into the tunnel? I don't quite get how I can do some tricks with this table + rule to control which network is used by Strongswan?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/88#issuecomment-361214751,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","but isn't table 220 only used to control which traffic will go into the tunnel?

Not really, that is determined by the IPsec policies. Routes are only needed if virtual IPs are used (to force a specific source IP so packets match the policies), or if there are no routes otherwise that would match the tunneled traffic (as the kernel won't forward the traffic otherwise). So they might not actually be needed at all. And the manual route lookup in the kernel-netlink plugin is only done so we can avoid the routes we install ourselves when determining the source IP we use for IKE packets or when deciding whether we need to trigger MOBIKE updates because the current path can't be used anymore etc.
In certain situations we don't need to do this lookup manually and can simply let the kernel decide which route/source IP we should use. One is the described workaround where we set a negative mark match on the routing rule for table 220, which allows us to easily avoid the table with our own routes when doing lookups (by setting that mark in the lookup request the kernel will exclude our own table which will only be used for packets that don't have that mark set). And there is actually an even easier way to use this more efficient and powerful lookup, disable route installation completely (i.e. set charon.install_routes = no). Then strongSwan won't install any routes in table 220 and always use the kernel's route lookup.
I suppose, if the only thing changing is the priority of the routing rule then we'd need the roam event trigger based on such changes to properly trigger a MOBIKE update (depends on the events actually triggered by the kernel during such a switch).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,5,https://github.com/strongswan/strongswan/pull/88#issuecomment-361244456,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","Thanks for another detailed explanation!

And there is actually an even easier way to use this more efficient and powerful lookup, disable route installation completely (i.e. set charon.install_routes = no). Then strongSwan won't install any routes in table 220 and always use the kernel's route lookup.

This explains why I sometimes saw that handover based on priority sometimes seemed to work. If I disconnected and then connected the link with the highest priority (according to my policy), the tunnel would most of the time switch back. This is of course because the order of the routes returned by kernel happened to match.

I suppose, if the only thing changing is the priority of the routing rule then we'd need the roam event trigger based on such changes to properly trigger a MOBIKE update (depends on the events actually triggered by the kernel during such a switch).

Yes, at least in my case, the only change is that the routing rule is replaced. Both networks are still up and the routing tables, etc. are not modified, so there is only DELRULE/NEWRULE messages. How should we progress with this PR (besides fixing Travis-complaints), if a feature like what I propose is acceptable? In my initial solution I triggered a roam event on every NEWRULE, but that is a bit excessive, and the ""filter"" that made most sense to me was priority.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/88#issuecomment-361272535,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","In my initial solution I triggered a roam event on every NEWRULE, but that is a bit excessive, and the ""filter"" that made most sense to me was priority.

Are updates to these rules that common that this would be a problem? (Kernel events triggered within ROAM_DELAY do not trigger more than one roam event, defaults to 100 ms.)
I've pushed an optional roam trigger based on rule updates to the 2518-mobike-nat branch (works only with the kernel-based route lookup), together with other commits that try to address MOBIKE the issues from your wiki ticket (see there for details).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,7,https://github.com/strongswan/strongswan/pull/88#issuecomment-361537305,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","Are updates to these rules that common that this would be a problem? (Kernel events triggered within ROAM_DELAY do not trigger more than one roam event, defaults to 100 ms.)

No, not really, at least not on my system. While the rules are updated fairly frequently, it is not hundreds of times per seconds. So unconditionally triggering an event on rule-updates should be fine.
I tested the code you added in the 2518-branch (will test the MOBIKE-part properly later today) and it looks fine. However, there is still the issue of configuring which network to prioritize when multiple networks are active. With your change, we depend on the ordering of the routes returned by the kernel. I have to admit that I don't exactly know how the kernel sorts routes before/while sending them to userspace, but when checking this earlier at least, it did not for example depend on the order of the rules.
The only way I found to solve the ordering problem, was to instruct Strongswan to prioritize routes in one table over the other. And the only way I found to dynamically get which table to prioritize, was to have Strongswan check one specific rule.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/88#issuecomment-361542769,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","However, there is still the issue of configuring which network to prioritize when multiple networks are active. With your change, we depend on the ordering of the routes returned by the kernel.

As mentioned above, in the commit message and the documentation of the new option it only works with the kernel-based route lookup. So you either have to disable route installation by strongSwan or let strongSwan set an inverted mark its own routing rule (see above for details).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,9,https://github.com/strongswan/strongswan/pull/88#issuecomment-361551824,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","As mentioned above, in the commit message and the documentation of the new option it only works with the kernel-based route lookup. So you either have to disable route installation by strongSwan or let strongSwan set an inverted mark its own routing rule (see above for details).

Yes, I saw that. However, I have assumed that the policy is implemented outside of the routing demon, so that order of routes/rules does not necessarily reflect the priority of interfaces. Though, if I make sure that the priority rule is always placed earlier than the other ""default""-rules, I guess I should be fine.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/tobiasbrunner,10,https://github.com/strongswan/strongswan/pull/88#issuecomment-361553037,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","However, I have assumed that the policy is implemented outside of the routing demon, so that order of routes/rules does not necessarily reflect the priority of interfaces.

What do you mean?

Though, if I make sure that the priority rule is always placed earlier than the other ""default""-rules, I guess I should be fine.

Wouldn't that be necessary anyway to control over which interface traffic is routed?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,11,https://github.com/strongswan/strongswan/pull/88#issuecomment-361565743,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","What do you mean?

For example, I am using my OpenWRT router in a car that is moving. That means that modems can change mode, for example from LTE to 2G, without disconnecting. If the modem does not disconnect, looses adress, etc., then the routing and so on remains constant.
However, you are right that my priority rule would anyway have to be placed before the other default rules to have the desired effect (this is in fact how it works on my router). I just didn't tjink about it. Thus, my patch is too complicated and your change should be sufficient.
I will do some tests just in case and let you know.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/kristrev,12,https://github.com/strongswan/strongswan/pull/88#issuecomment-362243413,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","I was finally able to test the rule-change you made in the branch connected to my ticket in the wiki. It seems to do the job, when changing my priority interface then the tunnel follows.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,88,2018-01-26T18:19:04Z,2018-02-01T16:37:20Z,2018-02-01T16:37:20Z,CLOSED,False,180,7,2,https://github.com/kristrev,Update SA based on change in priority routing rule,1,[],https://github.com/strongswan/strongswan/pull/88,https://github.com/tobiasbrunner,13,https://github.com/strongswan/strongswan/pull/88#issuecomment-362323764,"On multihomed hosts, it is common to prioritize one network over the
other(s). For example, an LTE modem over a 2G modem, or a fixed
connection over a satellite connection. Typically, the system has no way
of knowing which interface to prioritize, as the actual network
interfaces looks the same (naming follows the same pattern, etc.). Also,
policies for selecting the preferred interface can be complex and use
multiple inputs (metadata, active checks, configuration options, etc.,
etc.)
Policy routing is commonly used on  multihomed hosts. The routes for the
different interfaces are placed in separate tables, and rules are used
to select which routing table(s) to check for a packet. This PR adds
support for specifying the priority of what I have called a preferred
rule. This rule will always point to the routing table of the preferred
network interface, and the rule is assumed to be updated by the tool
responsible for enforcing the network selection policy.
The feature is currently only available on Linux, and requires MOBIKE to
be enabled and ""prefer_best_path"" to be set to yes. When a rule with the
given priority is updated (i.e., a NEWRULE is received), a roam event is
triggered. Before the preferred route lookup is performed, a lookup for
the current priority table is done. Routes in this table is placed at
the front of the list that is used to select the preferred route.
The reason for not acting on DELRULE messages, is that I have assumed
that there can only be one preferred rule. Thus, if the rule is deleted,
then there is no preferred network and we can stay with the current one.
Signed-off-by: Kristian Evensen kristian.evensen@gmail.com","Thanks for testing. I'm closing this PR and will merge the new trigger together with the MOBIKE fixes, once we have these finalized.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,89,2018-02-12T02:51:48Z,2018-02-12T10:17:36Z,2018-02-12T10:17:46Z,CLOSED,False,11,11,1,https://github.com/liuqun,Fix up one typo mistake,2,[],https://github.com/strongswan/strongswan/pull/89,https://github.com/liuqun,1,https://github.com/strongswan/strongswan/pull/89,"Fix up a pki command in section Generating a Host or User End Entity Certificate of the top level README
/etc/swanctl/priv --> /etc/swanctl/private","Fix up a pki command in section Generating a Host or User End Entity Certificate of the top level README
/etc/swanctl/priv --> /etc/swanctl/private",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,89,2018-02-12T02:51:48Z,2018-02-12T10:17:36Z,2018-02-12T10:17:46Z,CLOSED,False,11,11,1,https://github.com/liuqun,Fix up one typo mistake,2,[],https://github.com/strongswan/strongswan/pull/89,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/89#issuecomment-364880410,"Fix up a pki command in section Generating a Host or User End Entity Certificate of the top level README
/etc/swanctl/priv --> /etc/swanctl/private","Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,90,2018-02-14T14:37:58Z,2018-02-14T14:39:16Z,2018-02-14T14:39:17Z,CLOSED,False,1,1,1,https://github.com/lofvir,increase recv buffer side on the ha_socket,1,[],https://github.com/strongswan/strongswan/pull/90,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/90,otherwise some message are truncated and thus incomplete.,otherwise some message are truncated and thus incomplete.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,90,2018-02-14T14:37:58Z,2018-02-14T14:39:16Z,2018-02-14T14:39:17Z,CLOSED,False,1,1,1,https://github.com/lofvir,increase recv buffer side on the ha_socket,1,[],https://github.com/strongswan/strongswan/pull/90,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/90#issuecomment-365626617,otherwise some message are truncated and thus incomplete.,Already in the ha-buflen branch.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/91,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.","the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/lofvir,2,https://github.com/strongswan/strongswan/pull/91#issuecomment-370826193,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.",I suspect that the python binding and maybe the ruby binding is also affected by the problems reading the STREAM based unix socket.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/91#issuecomment-371086711,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.","Thanks. I pushed a fix for the recv() handling to the gh91-vici-perl branch. This is basically how we already do this in the other two bindings.
I'm no Perl guy at all, but exception handling seems easily possible using eval {} and $@ (see die).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/d12fk,4,https://github.com/strongswan/strongswan/pull/91#issuecomment-371107845,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.","Thanks for accepting the recv patch.
However, I feel the urge to contribute my 2¢ on topic of die()ing in Perl modules. =) Here we go:
While it is possible to use eval here, I would consider it a shortcoming of a module that I have to. Especially because there is an established way to signal failure. The die/eval combination is Perl's way of doing ""exception handling"", but it is rather a poor man's solution in my opinion. I think modules should not force this construct on their users, when there's better ways of communicating failure. While die()ing is elegant for the author of the the module, it's not so elegant for its users.
Also take into consideration that use of eval is considered harmful in interpreted languages in general (not so much for catching errors in Perl, though). So, there could be situations where use of eval is restricted by company coding guidelines.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/91#issuecomment-371135016,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.","It just looks nicer using exceptions and we can avoid returning magic values (or multiple values), there is also no need to check return values of every called method. Using other functions from the Carp module might be even more useful, or using actual exception objects. Searching around some also showed that there are modules that provide easy to use try {} catch {} semantics that are well-known from other languages (see e.g. Error.pm or Try::Tiny). And Perl 6 actually has exception handling built-in.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/lofvir,6,https://github.com/strongswan/strongswan/pull/91#issuecomment-372565765,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.",@tobiasbrunner is there any plan to merge gh91-vici-perl into master?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,91,2018-03-06T15:45:55Z,2018-03-20T12:42:11Z,2018-03-20T12:42:11Z,CLOSED,False,65,22,3,https://github.com/lofvir,perl/Vici-Session: fix recv code and improve error handling,1,[],https://github.com/strongswan/strongswan/pull/91,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/91#issuecomment-372588254,"the recv code now considers the situation of incomplete reads
(e.g. due to some interrupts).
error handling is improved to avoid termination of perl programs that
use the vici perl module.","Yes, will definitely be included in the next release.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,92,2018-03-19T09:25:23Z,2018-03-19T10:01:51Z,2018-03-19T10:21:31Z,CLOSED,False,1,1,1,https://github.com/matfabia,libipsec: fix ip_packet_create_from_data version field in IPv6 header,1,[],https://github.com/strongswan/strongswan/pull/92,https://github.com/matfabia,1,https://github.com/strongswan/strongswan/pull/92,"Version field of IPv6 header in ip_packet_create_from_data should be set as ""ip6_flow = htonl(6 << 28)"" instead of ""ip6_flow = htonl(6)""","Version field of IPv6 header in ip_packet_create_from_data should be set as ""ip6_flow = htonl(6 << 28)"" instead of ""ip6_flow = htonl(6)""",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,92,2018-03-19T09:25:23Z,2018-03-19T10:01:51Z,2018-03-19T10:21:31Z,CLOSED,False,1,1,1,https://github.com/matfabia,libipsec: fix ip_packet_create_from_data version field in IPv6 header,1,[],https://github.com/strongswan/strongswan/pull/92,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/92#issuecomment-374159130,"Version field of IPv6 header in ip_packet_create_from_data should be set as ""ip6_flow = htonl(6 << 28)"" instead of ""ip6_flow = htonl(6)""",Applied to master. Thanks!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,93,2018-03-20T10:32:39Z,2018-03-20T12:42:29Z,2018-04-09T15:20:10Z,CLOSED,False,39,3,4,https://github.com/lofvir,child-delete: avoid duplicate calls of child_updown,2,[],https://github.com/strongswan/strongswan/pull/93,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/93,"if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.","if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,93,2018-03-20T10:32:39Z,2018-03-20T12:42:29Z,2018-04-09T15:20:10Z,CLOSED,False,39,3,4,https://github.com/lofvir,child-delete: avoid duplicate calls of child_updown,2,[],https://github.com/strongswan/strongswan/pull/93,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/93#issuecomment-374555394,"if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.",That's an ugly hack I won't apply. Please find the root cause for this and fix that.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,93,2018-03-20T10:32:39Z,2018-03-20T12:42:29Z,2018-04-09T15:20:10Z,CLOSED,False,39,3,4,https://github.com/lofvir,child-delete: avoid duplicate calls of child_updown,2,[],https://github.com/strongswan/strongswan/pull/93,https://github.com/lofvir,3,https://github.com/strongswan/strongswan/pull/93#issuecomment-374556098,"if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.",The root cause is explained in the commit description. This can happen because child rekeyeing can happen while ike_reauth is ongoing. Therefore such situations can occur if mbb is configured together with delete_rekeyed_delay. An alternative could be to not change the state to DELETING when sending out the child delete message but later on when the delayed job executes.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,93,2018-03-20T10:32:39Z,2018-03-20T12:42:29Z,2018-04-09T15:20:10Z,CLOSED,False,39,3,4,https://github.com/lofvir,child-delete: avoid duplicate calls of child_updown,2,[],https://github.com/strongswan/strongswan/pull/93,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/93#issuecomment-374569443,"if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.","Both your descriptions are inaccurate. The problem is not that the rekeying happens during a reauthentication, or setting the state to CHILD_DELETING when deleting the SA.
The problem is that after deleting the rekeyed CHILD_SA and with charon.delete_rekeyed_delay set to a higher value the CHILD_SA may remain in state CHILD_DELETING until the IKE_SA is deleted (no matter whether it happens during a reauthentication or not). So instead of adding a new flag with getter and setter, we could e.g. add a new state (e.g. CHILD_DELETED) for such SAs (SAs that were deleted via IKE but have not yet been destroyed), or e.g. check the state of the outbound SA to see whether we should ignore SAs in state CHILD_DELETING when triggering child_updown() (as e.g. done in child_rekey). I think the former is a bit cleaner so I implemented that in the gh93-child-deleted branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,93,2018-03-20T10:32:39Z,2018-03-20T12:42:29Z,2018-04-09T15:20:10Z,CLOSED,False,39,3,4,https://github.com/lofvir,child-delete: avoid duplicate calls of child_updown,2,[],https://github.com/strongswan/strongswan/pull/93,https://github.com/lofvir,5,https://github.com/strongswan/strongswan/pull/93#issuecomment-374582574,"if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.","Introducing a new state provides the same functionality in a clean way. Thanks, will test this soon.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,93,2018-03-20T10:32:39Z,2018-03-20T12:42:29Z,2018-04-09T15:20:10Z,CLOSED,False,39,3,4,https://github.com/lofvir,child-delete: avoid duplicate calls of child_updown,2,[],https://github.com/strongswan/strongswan/pull/93,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/93#issuecomment-379789876,"if a CHILD_SA is rekeyed after the beginning of a ike_reauth()
there is a chance that the rekeyed CHILD_SA ends up in state DELETING.
This is due to charon.delete_rekeyed_delay being set to a high
value (like 100) in combination with make_before_break = yes.
In the course of completing ike_reauth() the old IKE_SA
gets destroyed via a call to ike_updown(). This implies calls to
child_updown() but in this situation the fact that the CHILD_SA
is already rekeyed cannot be identified anymore because the state
is already DELETING.",I've merged this to master. Let me know if you encounter any issues during testing.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,94,2018-03-26T13:54:34Z,,2018-04-03T11:37:33Z,OPEN,False,830,0,7,https://github.com/rdlr,wincapi: Added plugin to access Windows certificate store private keys,1,[],https://github.com/strongswan/strongswan/pull/94,https://github.com/rdlr,1,https://github.com/strongswan/strongswan/pull/94,Wincapi is a PRIVKEY plugin for libstrongswan that uses the Windows CryptoAPI to provide access to private keys in the Windows local machine certificate store.,Wincapi is a PRIVKEY plugin for libstrongswan that uses the Windows CryptoAPI to provide access to private keys in the Windows local machine certificate store.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,94,2018-03-26T13:54:34Z,,2018-04-03T11:37:33Z,OPEN,False,830,0,7,https://github.com/rdlr,wincapi: Added plugin to access Windows certificate store private keys,1,[],https://github.com/strongswan/strongswan/pull/94,https://github.com/rdlr,2,https://github.com/strongswan/strongswan/pull/94#issuecomment-378217727,Wincapi is a PRIVKEY plugin for libstrongswan that uses the Windows CryptoAPI to provide access to private keys in the Windows local machine certificate store.,"We used CryptoAPI functions because our implementation executes Charon as a local machine service that is initialised before user login, on system start. According to the MSDN documentation for NCryptOpenKey:

A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding.

Thank you for the recommendations, I will review and update our code.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,94,2018-03-26T13:54:34Z,,2018-04-03T11:37:33Z,OPEN,False,830,0,7,https://github.com/rdlr,wincapi: Added plugin to access Windows certificate store private keys,1,[],https://github.com/strongswan/strongswan/pull/94,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/94#issuecomment-378219762,Wincapi is a PRIVKEY plugin for libstrongswan that uses the Windows CryptoAPI to provide access to private keys in the Windows local machine certificate store.,"We used CryptoAPI functions because our implementation executes Charon as a local machine service that is initialised before user login, on system start.

Do you need to call it in StartService? (How exactly would that even happen exactly with how the daemon is started and configs are loaded?)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,95,2018-03-27T15:01:26Z,2018-04-09T13:08:35Z,2018-04-09T13:08:35Z,CLOSED,False,14,4,1,https://github.com/lofvir,unify child_updown calls when having duplicate QMs,1,[],https://github.com/strongswan/strongswan/pull/95,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/95,"If a Quick mode is initated for a CHILD_SA that is already installed
we can identify this situation and rekey the already installed CHILD_SA.
Otherwise we end up with several CHILD_SAs in state INSTALLED which
means multiple calls of child_updown are done. Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even). Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz. Then a uneven number of calls to child_updown can be
observed on the responder side.","If a Quick mode is initated for a CHILD_SA that is already installed
we can identify this situation and rekey the already installed CHILD_SA.
Otherwise we end up with several CHILD_SAs in state INSTALLED which
means multiple calls of child_updown are done. Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even). Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz. Then a uneven number of calls to child_updown can be
observed on the responder side.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,95,2018-03-27T15:01:26Z,2018-04-09T13:08:35Z,2018-04-09T13:08:35Z,CLOSED,False,14,4,1,https://github.com/lofvir,unify child_updown calls when having duplicate QMs,1,[],https://github.com/strongswan/strongswan/pull/95,https://github.com/lofvir,2,https://github.com/strongswan/strongswan/pull/95#issuecomment-378190717,"If a Quick mode is initated for a CHILD_SA that is already installed
we can identify this situation and rekey the already installed CHILD_SA.
Otherwise we end up with several CHILD_SAs in state INSTALLED which
means multiple calls of child_updown are done. Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even). Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz. Then a uneven number of calls to child_updown can be
observed on the responder side.","Hi @tobiasbrunner,
could you please consider this PR to be merged?
without the change the number of updown calls can become out of sync. This happens in
the unlikely but possible situation when initiating a tunnel twice.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,95,2018-03-27T15:01:26Z,2018-04-09T13:08:35Z,2018-04-09T13:08:35Z,CLOSED,False,14,4,1,https://github.com/lofvir,unify child_updown calls when having duplicate QMs,1,[],https://github.com/strongswan/strongswan/pull/95,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/95#issuecomment-378634197,"If a Quick mode is initated for a CHILD_SA that is already installed
we can identify this situation and rekey the already installed CHILD_SA.
Otherwise we end up with several CHILD_SAs in state INSTALLED which
means multiple calls of child_updown are done. Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even). Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz. Then a uneven number of calls to child_updown can be
observed on the responder side.","Thanks, pushed to the gh-95-qm-dedup branch with some minor changes.

Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even).

That's on purpose, child_rekey() is called for rekeyed CHILD_SAs instead.

Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz.
Then a uneven number of calls to child_updown can be observed on the responder side.

How so? And the responder already called check_for_rekeyed_child(), so how does this patch change the behavior?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,95,2018-03-27T15:01:26Z,2018-04-09T13:08:35Z,2018-04-09T13:08:35Z,CLOSED,False,14,4,1,https://github.com/lofvir,unify child_updown calls when having duplicate QMs,1,[],https://github.com/strongswan/strongswan/pull/95,https://github.com/lofvir,4,https://github.com/strongswan/strongswan/pull/95#issuecomment-379314913,"If a Quick mode is initated for a CHILD_SA that is already installed
we can identify this situation and rekey the already installed CHILD_SA.
Otherwise we end up with several CHILD_SAs in state INSTALLED which
means multiple calls of child_updown are done. Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even). Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz. Then a uneven number of calls to child_updown can be
observed on the responder side.","Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz.
Then a uneven number of calls to child_updown can be observed on the responder side.



How so? And the responder already called check_for_rekeyed_child(), so how does this patch change ?>the behavior?

After rethinking this, i cannot remember the exact scenario. The important part of this changeset is that the number of child_updown() calls gets symmetric on the initiator side.
If left initiates childs c1 and c2, previously both ended up in state INSTALLED which implies 2 calls to child_updown. If now rekeying comes into play the duplicate INSTALLED SA's are deduplicated and only one INSTALLED SA is left. When tearing down the tunnel only one call to child_updown occurs. The second one got eaten up.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,95,2018-03-27T15:01:26Z,2018-04-09T13:08:35Z,2018-04-09T13:08:35Z,CLOSED,False,14,4,1,https://github.com/lofvir,unify child_updown calls when having duplicate QMs,1,[],https://github.com/strongswan/strongswan/pull/95,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/95#issuecomment-379745480,"If a Quick mode is initated for a CHILD_SA that is already installed
we can identify this situation and rekey the already installed CHILD_SA.
Otherwise we end up with several CHILD_SAs in state INSTALLED which
means multiple calls of child_updown are done. Unfortunatly
the deduplication code does not call child_updown() (up and down were not
even). Another problem occurs if the newer CHILD_SA has a shorter
lifetime due to rekey fuzz. Then a uneven number of calls to child_updown can be
observed on the responder side.","OK, I removed that part from the commit message and pushed it to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,96,2018-03-27T20:57:04Z,2018-03-29T15:19:37Z,2018-03-29T15:19:37Z,CLOSED,False,1,1,1,https://github.com/ambiso,Use unused return value of C_GetMechanismList,1,[],https://github.com/strongswan/strongswan/pull/96,https://github.com/ambiso,1,https://github.com/strongswan/strongswan/pull/96,"The pkcs11 plugin does not use the return value of the second C_GetMechanismList call, and thus won't detect if it failed.","The pkcs11 plugin does not use the return value of the second C_GetMechanismList call, and thus won't detect if it failed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,96,2018-03-27T20:57:04Z,2018-03-29T15:19:37Z,2018-03-29T15:19:37Z,CLOSED,False,1,1,1,https://github.com/ambiso,Use unused return value of C_GetMechanismList,1,[],https://github.com/strongswan/strongswan/pull/96,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/96#issuecomment-377270252,"The pkcs11 plugin does not use the return value of the second C_GetMechanismList call, and thus won't detect if it failed.","Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,97,2018-03-30T05:38:47Z,2018-04-03T07:56:58Z,2018-04-03T12:33:18Z,CLOSED,False,2,2,2,https://github.com/selsky,Typos,1,[],https://github.com/strongswan/strongswan/pull/97,https://github.com/selsky,1,https://github.com/strongswan/strongswan/pull/97,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,98,2018-04-12T05:07:19Z,2018-04-12T09:55:33Z,2018-04-12T09:55:33Z,CLOSED,False,3,3,1,https://github.com/selsky,dhcp: Fix typos in comments,1,[],https://github.com/strongswan/strongswan/pull/98,https://github.com/selsky,1,https://github.com/strongswan/strongswan/pull/98,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,98,2018-04-12T05:07:19Z,2018-04-12T09:55:33Z,2018-04-12T09:55:33Z,CLOSED,False,3,3,1,https://github.com/selsky,dhcp: Fix typos in comments,1,[],https://github.com/strongswan/strongswan/pull/98,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/98#issuecomment-380746315,,"Thanks, applied to the dhcp-fixes branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,99,2018-04-17T20:55:38Z,2019-04-25T13:35:55Z,2019-04-25T13:35:55Z,CLOSED,False,134,20,8,https://github.com/llogar,Add RFC6023 support,8,[],https://github.com/strongswan/strongswan/pull/99,https://github.com/llogar,1,https://github.com/strongswan/strongswan/pull/99,"Childless IKEv2 SA can now be established by issuing (note missing --child parameter)
$ swanctl --initiate -ike [name]
Also, a connection 'name' defined in swanctl.conf must not contain any children,
i.e. children {...} should be empty or absent.
RFC6023 support can be disabled by setting charon.childless_ikev2 = no in strongswan.conf","Childless IKEv2 SA can now be established by issuing (note missing --child parameter)
$ swanctl --initiate -ike [name]
Also, a connection 'name' defined in swanctl.conf must not contain any children,
i.e. children {...} should be empty or absent.
RFC6023 support can be disabled by setting charon.childless_ikev2 = no in strongswan.conf",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,99,2018-04-17T20:55:38Z,2019-04-25T13:35:55Z,2019-04-25T13:35:55Z,CLOSED,False,134,20,8,https://github.com/llogar,Add RFC6023 support,8,[],https://github.com/strongswan/strongswan/pull/99,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/99#issuecomment-382302689,"Childless IKEv2 SA can now be established by issuing (note missing --child parameter)
$ swanctl --initiate -ike [name]
Also, a connection 'name' defined in swanctl.conf must not contain any children,
i.e. children {...} should be empty or absent.
RFC6023 support can be disabled by setting charon.childless_ikev2 = no in strongswan.conf","Thanks for these patches. I have not reviewed the changes thoroughly yet, but some of them would definitely be required for any such solution (e.g. condition/extension flags, some code in the tasks).

Also, a connection 'name' defined in swanctl.conf must not contain any children,
i.e. children {...} should be empty or absent.

That seems like quite a limitation, what's the point of creating an IKE_SA if there are no children at all that could later be established? Or would you add them later and rely on charon.reuse_ikesa?
I did some brainstorming regarding a possible configuration option for childless IKE_SAs a while ago and the following was a possibility I came up with as extension on ike_cfg_t, here as configuration option for a connection in swanctl.conf:
childless = accept | never | prefer | force

accept (default): Create CHILD_SA with IKE_AUTH exchange but
	accept childless IKE_SAs as responder
never: Create CHILD_SA with IKE_AUTH exchange and don't allow
	childless IKE_SAs as responder (i.e. don't send the
	notify in IKE_SA_INIT and don't allow initiators to omit required
	payloads in IKE_AUTH), fail initiation if only the IKE_SA was
	 initiated (e.g. via swanctl --initiate --ike)
prefer: Try to initiate a childless IKE_SA and create the first
	CHILD_SA, if any, with a separate CREATE_CHILD_SA
	exchange.  Don't fail if the peer does not support it,
	just create the CHILD_SA with the IKE_AUTH exchange.
	As responder this is the same as accept.
	# Probably only required to migrate to a childless initiation
force: Initiate a childless IKE_SA and create the first
	CHILD_SA, if any, with a separate CREATE_CHILD_SA
	exchange.  Fail if the responder does not support
	childless IKE_SAs. Fail as responder if the initiator does not
	create a childless IKE_SA.

With the never option a global setting to disable support would not be required. This is not completely thought through and maybe is total overkill. The idea was to provide an option for the use case of using a separate DH exchange for the first CHILD_SA (i.e. set it to force on the client). What do you think about this?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,99,2018-04-17T20:55:38Z,2019-04-25T13:35:55Z,2019-04-25T13:35:55Z,CLOSED,False,134,20,8,https://github.com/llogar,Add RFC6023 support,8,[],https://github.com/strongswan/strongswan/pull/99,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/99#issuecomment-479039268,"Childless IKEv2 SA can now be established by issuing (note missing --child parameter)
$ swanctl --initiate -ike [name]
Also, a connection 'name' defined in swanctl.conf must not contain any children,
i.e. children {...} should be empty or absent.
RFC6023 support can be disabled by setting charon.childless_ikev2 = no in strongswan.conf",I pushed changes to implement this feature to the gh99-childless branch. Feedback welcome.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/cedi,1,https://github.com/strongswan/strongswan/pull/100,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/cedi,2,https://github.com/strongswan/strongswan/pull/100#issuecomment-384271530,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","Please note: i also suspect that there might be another issue with MOBIKE:
We already have set the mobike config flag to no globally. But it tries to do mobike anyway.
As far as i have seen, the mobike parameter is only respected in the task_manager_v2, so it would also be an good idea to check the mobike config flag in the case of kernel_iph_net",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/100#issuecomment-384286224,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.

MOBIKE is not used for IKEv1 (supports_extension(this, EXT_MOBIKE) will return FALSE), instead the IKE_SA is reauthenticated when the connection changes to a different IP (see the code in ike_sa_t::roam()). However, that is probably problematic for IKEv1, where this only affects the IKE_SA, so we might want to consider reestablishing the IKE and all CHILD_SAs instead. There is also a check that makes sure that the local IP is not changed if it is statically configured. But it's specific to IKEv2 for some reason. Anyway, we could also just return SUCCESS from roam() for IKEv1 SAs (I wouldn't want to do that in the job, which should be kept fairly simple), I pushed a change that does that to the gh100-ikev1-roam branch.

The roam_job is scheduled from the kernel_iph_net.c in case static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.

You are running on Windows?

We already have set the mobike config flag to no globally. But it tries to do mobike anyway.

There is no global mobike flag. What are you referring to?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/cedi,4,https://github.com/strongswan/strongswan/pull/100#issuecomment-384303284,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","Hey @tobiasbrunner,

There is no global mobike flag. What are you referring to?

Sorry for confusion. I'm talking about
conn %default
    mobike = no

in ipsec.conf

You are running on Windows?

Nope, Linux (3.14.22)

Anyway, we could also just return SUCCESS from roam() for IKEv1 SAs (I wouldn't want to do that in the job, which should be kept fairly simple)

Hehe, we had the same Idea. I originally have done that in roam(), but my workmate (Afschin) thought it would be better to move that out of roam() to the place where roam() is called.

I pushed a change that does that to the gh100-ikev1-roam branch.

I will look into your code, thanks

There is also a check that makes sure that the local IP is not changed if it is statically configured. But it's specific to IKEv2 for some reason

Wouldn't it be a good thing to implement this check for IKEv1 too? If you have no concerns about this, i would volunteer to provide that patch 😄",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/100#issuecomment-384308050,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","Sorry for confusion. I'm talking about
conn %default
mobike = no
in ipsec.conf

OK, this should definitely disable MOBIKE (support for it is not announce anymore, and therefore should not be negotiated and also not be in the list of supported extensions of the IKE_SA anymore).

You are running on Windows?

Nope, Linux (3.14.22)

So why would you think kernel_iph_net.c is involved in any of this? On Linux you'll be using the kernel-netlink plugin as interface to the kernel i.e. kernel_netlink_net.c for roaming events. The kernel-iph plugin provides the kernel_net_t implementation on Windows.

Anyway, we could also just return SUCCESS from roam() for IKEv1 SAs (I wouldn't want to do that in the job, which should be kept fairly simple)

Hehe, we had the same Idea. I originally have done that in roam(), but my workmate (Afschin) thought it would be better to move that out of roam() to the place where roam() is called.

I don't think so, because then we'd have the decisions when to roam and when not in different places making this a bit confusing.

There is also a check that makes sure that the local IP is not changed if it is statically configured. But it's specific to IKEv2 for some reason

Wouldn't it be a good thing to implement this check for IKEv1 too? If you have no concerns about this, i would volunteer to provide that patch smile

Not really necessary anymore if we don't do any roaming for IKEv1 (see my patch, which also touches the mentioned check).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/cedi,6,https://github.com/strongswan/strongswan/pull/100#issuecomment-384316568,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","So why would you think kernel_iph_net.c is involved in any of this? On Linux you'll be using the kernel-netlink plugin as interface to the kernel i.e. kernel_netlink_net.c for roaming events. The kernel-iph plugin provides the kernel_net_t implementation on Windows.

Sorry, that was my fault. You are right, i just copied the wrong file-name from my shell ;-)

(see my patch, which also touches the mentioned check)

yea. Didn't had the time to look into your branch till now. Awesome!
I initially thought that check might be a bit more complex / involve a bit more code changes.
How to proceed from here on? Should i close this PR and you merge your fix into mainline?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,100,2018-04-25T12:32:47Z,2018-04-27T09:13:59Z,2018-04-27T09:13:59Z,CLOSED,False,7,1,1,https://github.com/cedi,Disable roaming (MOBIKE) for IKEv1,4,[],https://github.com/strongswan/strongswan/pull/100,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/100#issuecomment-384321147,"Hey guys,
I've encountered a problem where charon tries to roam a IKEv1 connection to another WAN Uplink.
Setup:

I have two WAN Uplinks:


static IP
DHCP assigned IP
*I configure an IKEv1 connection with the config value for left with the IP address of the DHCP assigned interface.


charon correctly established the connection with the DHCP-assigned IP as source
I force a DHCP-lease renewal for the DHCP-WAN interface
charon tries to roam the connection to the second WAN Interface with the static IP

This leads to problems in our setups, since WAN1 and WAN2 are in different vlans.
Also RFC4555 (MOBIKE) is only specified for IKEv2, so i think this is a bug in charons IKEv1 implementation when it tries to roam IKEv1 too.
The roam_job is scheduled from the kernel_iph_net.c in case  static void update_addrs(private_kernel_iph_net_t*, iface_t*, IP_ADAPTER_ADDRESSES*, bool) is called (eg. when i force a DHCP-lease renewal on the WAN-Interface.
To prevent this, i submit this patch, which skips IKEv1 IKE-SAs in the roam_job->execute() method.
Kind Regards,
Cedric Kienzler
Software Engineer, Sophos
For further Questions, feel free to contact me at any time using cedric.kienzler@sophos.com","How to proceed from here on? Should i close this PR and you merge your fix into mainline?

Sure, sounds good. I hope nobody has any objections regarding this (didn't really work before anyway, as far as I can tell).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,101,2018-06-05T06:28:08Z,2018-06-05T08:16:04Z,2018-06-05T08:16:04Z,CLOSED,False,3,3,1,https://github.com/Links2004,starter: dont lose signals ,2,[],https://github.com/strongswan/strongswan/pull/101,https://github.com/Links2004,1,https://github.com/strongswan/strongswan/pull/101,"The starter will lose update / reload commands when there is a second signal coming in when the previous is still processed.
this can happen more easily with big configurations.","The starter will lose update / reload commands when there is a second signal coming in when the previous is still processed.
this can happen more easily with big configurations.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,101,2018-06-05T06:28:08Z,2018-06-05T08:16:04Z,2018-06-05T08:16:04Z,CLOSED,False,3,3,1,https://github.com/Links2004,starter: dont lose signals ,2,[],https://github.com/strongswan/strongswan/pull/101,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/101#issuecomment-394607565,"The starter will lose update / reload commands when there is a second signal coming in when the previous is still processed.
this can happen more easily with big configurations.","I guess unsetting the flags earlier makes sense, however, it doesn't prevent races completely. Also note that starter/stroke are deprecated. Use vici/swanctl instead.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,101,2018-06-05T06:28:08Z,2018-06-05T08:16:04Z,2018-06-05T08:16:04Z,CLOSED,False,3,3,1,https://github.com/Links2004,starter: dont lose signals ,2,[],https://github.com/strongswan/strongswan/pull/101,https://github.com/Links2004,3,https://github.com/strongswan/strongswan/pull/101#issuecomment-394611750,"The starter will lose update / reload commands when there is a second signal coming in when the previous is still processed.
this can happen more easily with big configurations.","yes, it is not perfect save against races but better then before.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,101,2018-06-05T06:28:08Z,2018-06-05T08:16:04Z,2018-06-05T08:16:04Z,CLOSED,False,3,3,1,https://github.com/Links2004,starter: dont lose signals ,2,[],https://github.com/strongswan/strongswan/pull/101,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/101#issuecomment-394622402,"The starter will lose update / reload commands when there is a second signal coming in when the previous is still processed.
this can happen more easily with big configurations.","Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,102,2018-06-05T06:34:34Z,2018-06-05T08:12:03Z,2018-06-05T08:12:03Z,CLOSED,False,13,2,1,https://github.com/Links2004,starter: check if modprobe exists and load all modules,1,[],https://github.com/strongswan/strongswan/pull/102,https://github.com/Links2004,1,https://github.com/strongswan/strongswan/pull/102,check for existence of modprobe and load all Kernel Modules for strongswan,check for existence of modprobe and load all Kernel Modules for strongswan,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,102,2018-06-05T06:34:34Z,2018-06-05T08:12:03Z,2018-06-05T08:12:03Z,CLOSED,False,13,2,1,https://github.com/Links2004,starter: check if modprobe exists and load all modules,1,[],https://github.com/strongswan/strongswan/pull/102,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/102#issuecomment-394605815,check for existence of modprobe and load all Kernel Modules for strongswan,"I don't think there is a need to do any calls to modprobe, these modules are loaded automatically when necessary on modern kernels. I'd actually rather remove the complete function.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,102,2018-06-05T06:34:34Z,2018-06-05T08:12:03Z,2018-06-05T08:12:03Z,CLOSED,False,13,2,1,https://github.com/Links2004,starter: check if modprobe exists and load all modules,1,[],https://github.com/strongswan/strongswan/pull/102,https://github.com/Links2004,3,https://github.com/strongswan/strongswan/pull/102#issuecomment-394608573,check for existence of modprobe and load all Kernel Modules for strongswan,"on a 3.12 Kernel I head problems with not loaded modules, for IPv6.
yes the Kernel is a bit older, but that is was the Machine is running ;)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,102,2018-06-05T06:34:34Z,2018-06-05T08:12:03Z,2018-06-05T08:12:03Z,CLOSED,False,13,2,1,https://github.com/Links2004,starter: check if modprobe exists and load all modules,1,[],https://github.com/strongswan/strongswan/pull/102,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/102#issuecomment-394621269,check for existence of modprobe and load all Kernel Modules for strongswan,"I see. Yes, that's quite old. Besides not being necessary on newer kernels, it doesn't really make sense to always load all of them, if they are eventually not required. If missing modules are a problem, please load them outside of strongSwan.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,103,2018-06-05T13:20:55Z,2018-08-29T09:35:37Z,2018-08-29T09:35:37Z,CLOSED,False,22,12,1,https://github.com/lofvir,vici perl: improve message parsing performance,1,[],https://github.com/strongswan/strongswan/pull/103,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/103,"During a test with ~12000 established SAs it was noted that vici
related operations hung.
The operations took over 16 minutes to finish. The time was spent in
the vici message parser, which was assigning the message over and over
again, to get rid of the already parsed portions.
First fixed by cutting the consumed parts off without copying the message.
Runtime for ~12000 SAs is now around 20 seconds.
Further optimization brought the runtime down to roughly 1-2 seconds
by using an fd to read through the message variable.","During a test with ~12000 established SAs it was noted that vici
related operations hung.
The operations took over 16 minutes to finish. The time was spent in
the vici message parser, which was assigning the message over and over
again, to get rid of the already parsed portions.
First fixed by cutting the consumed parts off without copying the message.
Runtime for ~12000 SAs is now around 20 seconds.
Further optimization brought the runtime down to roughly 1-2 seconds
by using an fd to read through the message variable.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,103,2018-06-05T13:20:55Z,2018-08-29T09:35:37Z,2018-08-29T09:35:37Z,CLOSED,False,22,12,1,https://github.com/lofvir,vici perl: improve message parsing performance,1,[],https://github.com/strongswan/strongswan/pull/103,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/103#issuecomment-394781661,"During a test with ~12000 established SAs it was noted that vici
related operations hung.
The operations took over 16 minutes to finish. The time was spent in
the vici message parser, which was assigning the message over and over
again, to get rid of the already parsed portions.
First fixed by cutting the consumed parts off without copying the message.
Runtime for ~12000 SAs is now around 20 seconds.
Further optimization brought the runtime down to roughly 1-2 seconds
by using an fd to read through the message variable.","Thanks for the patch.  I guess, technically, there should be some error checking when reading the data, in case the message is too short or otherwise invalid, but we might consider vici (and UNIX sockets) trustworthy enough to ignore that. I pushed your patch and a possible patch that adds some error handling to the gh103-vici-perl-performance branch. Let me know if that works for you (or if you think it's unnecessary to add that).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/Links2004,1,https://github.com/strongswan/strongswan/pull/104,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/104#issuecomment-395332763,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","Thanks for the patch. There are some problems with it.
First, there are some code style issues (specifically in the kernel-netlink plugin), please see our wiki.
Second, I wouldn't make these options XFRM specific (the flags can actually also be set via the PF_KEYv2 interface on Linux, although, that interface is deprecated, so it's OK not to set them there) and generally control behavior that's defined in RFC 4301, so other kernel interfaces could support them too.
Also, XFRM_STATE_NOPMTUDISC, in accordance with that RFC, only has an effect on IPv4 tunnel mode SAs, and it simply controls whether the DF bit is copied to the outer header, or gets cleared (there is no option to force setting the bit, which the RFC mentions), so that should be documented (and maybe the option's name could reflect that too).
Third, an additional and similar flag that might be interesting is XFRM_SA_XFLAG_DONT_ENCAP_DSCP, which controls whether DSCP information is copied to the outer header in tunnel mode (like ECN for both families, although ECN is applied in both directions). Maybe we could name the options copy_df, copy_ecn, and copy_dscp all with a default value of yes.
Fourth, I won't apply the changes to starter/stroke, even if you provide patches (no new features are added to that interface, we want people moving to the vici/swanctl backend). So you'd have to maintain those changes in your own fork if you need them.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/Links2004,3,https://github.com/strongswan/strongswan/pull/104#issuecomment-395341433,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","makes nocopy_df, nocopy_ecn and nocopy_dscp more sense?
since the default value is no, otherwise the new flag will change existing configurations,
or is there a way to set default to yes?
how does ipv4_clear_pmtudisc sound for XFRM_STATE_NOPMTUDISC?
looks like XFRM_SA_XFLAG_DONT_ENCAP_DSCP == XFRM_STATE_NOECN,
or do I miss something.
#define XFRM_STATE_NOECN	1
#define XFRM_STATE_DECAP_DSCP	2
#define XFRM_STATE_NOPMTUDISC	4
#define XFRM_STATE_WILDRECV	8
#define XFRM_STATE_ICMP		16
#define XFRM_STATE_AF_UNSPEC	32
#define XFRM_STATE_ALIGN4	64
#define XFRM_STATE_ESN		128

#define XFRM_SA_XFLAG_DONT_ENCAP_DSCP	1
https://elixir.bootlin.com/linux/v4.17/source/include/uapi/linux/xfrm.h",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/104#issuecomment-395358396,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","makes nocopy_df, nocopy_ecn and nocopy_dscp more sense?

Doesn't look that readable to me, maybe no_copy_df, but copy_df seems simpler to me.

since the default value is no, otherwise the new flag will change existing configurations,
or is there a way to set default to yes?

I guess you'd have to modify parse_option() a bit (to indicate whether the child_cfg_option_t flag, which will be called OPT_NO_..., should be added if the configured value is TRUE or FALSE).

how does ipv4_clear_pmtudisc sound for XFRM_STATE_NOPMTUDISC?

Maybe clear_df could work, not sure if the ipv4 prefix is necessary if it's documented to only affect outbound IPv4 tunnel mode SAs. clear_ecn doesn't seem entirely fitting, though, as it really controls whether data is copied from/to the headers (in both directions). clear_dscp, on the other hand, could work too I guess (it only affects the outer IP header).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/Links2004,5,https://github.com/strongswan/strongswan/pull/104#issuecomment-396137789,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.",anything to change on the PR?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/104#issuecomment-396201522,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","looks like XFRM_SA_XFLAG_DONT_ENCAP_DSCP == XFRM_STATE_NOECN,
or do I miss something.

You do :) That's an extra flag (configured via XFRMA_SA_EXTRA_FLAGS attribute), not a regular flag (configured in struct xfrm_usersa_info::flags). However, there is also  XFRM_STATE_DECAP_DSCP (which is a regular flag) that controls the other direction for DSCP (the more critical one). (Two flags aren't really necessary, as an SA is used in only one direction, but that's how it is.) So maybe that needs a more advanced setting to control in which direction DSCP is copied (copy_dscp = no | in | out | yes). Thinking about this, the same could be done for ECN.
I pushed some (yet untested) patches to the gh104-sa-flags branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/Links2004,7,https://github.com/strongswan/strongswan/pull/104#issuecomment-396233244,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","ok, now XFRM_SA_XFLAG_DONT_ENCAP_DSCP makes sense.
for copy_dscp a multi state makes sense.
but for copy_ecn I am not so sure, the only possible use case where a in / out out control is needed for ECN is when the network has a Asymmetric Routing and one direction can not handle the ECN flag.
but in this case Its better to disable ECN fully since the tunnel will fail if the route change and all traffic goes via devices that not support ECN.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,104,2018-06-07T06:11:10Z,2018-08-29T09:51:17Z,2018-08-29T09:51:17Z,CLOSED,False,53,8,5,https://github.com/Links2004,add config options to set NOPMTUDISC and NOECN via xfrm,4,[],https://github.com/strongswan/strongswan/pull/104,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/104#issuecomment-396503716,"xfrm_nopmtudisc = (no | yes)
XFRM_STATE_NOPMTUDISC is used to disable PMTU (Path Maximum Transmission Unit)
discovery, in cases where the discovery is not supported by all Devices on the
Network Path or a fixed MTU should be used.
xfrm_noecn = (no | yes)
XFRM_STATE_NOECN is used to disable the use of ECN (Explicit Congestion Notification).
This is usefull when the remote endpoint or the underlying network / involved routers
not support this.
https://tools.ietf.org/html/rfc3168
https://en.wikipedia.org/wiki/Explicit_Congestion_Notification
Note:
both flags are no by default, there will no behavior change for existing configs.
this implemntation will only work with linux / netlink.","but for copy_ecn I am not so sure, the only possible use case where a in / out out control is needed for ECN is when the network has a Asymmetric Routing and one direction can not handle the ECN flag.
but in this case Its better to disable ECN fully since the tunnel will fail if the route change and all traffic goes via devices that not support ECN.

OK, thanks for the explanation. I removed that part of the second patch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,105,2018-06-08T19:05:33Z,2018-06-12T08:27:38Z,2018-06-13T08:22:17Z,CLOSED,False,27,6,2,https://github.com/micah-morton,Allow charon to change group on files before dropping caps,1,[],https://github.com/strongswan/strongswan/pull/105,https://github.com/micah-morton,1,https://github.com/strongswan/strongswan/pull/105,"Allow charon to start as a non-root user without CAP_CHOWN and still be
able to change the group on files that need to be accessed by charon
after capabilities have been dropped. This requires user charon starts
as to have access to socket/pidfile directory as well as belong to the
group that charon will run as after dropping capabilities.","Allow charon to start as a non-root user without CAP_CHOWN and still be
able to change the group on files that need to be accessed by charon
after capabilities have been dropped. This requires user charon starts
as to have access to socket/pidfile directory as well as belong to the
group that charon will run as after dropping capabilities.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,105,2018-06-08T19:05:33Z,2018-06-12T08:27:38Z,2018-06-13T08:22:17Z,CLOSED,False,27,6,2,https://github.com/micah-morton,Allow charon to change group on files before dropping caps,1,[],https://github.com/strongswan/strongswan/pull/105,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/105#issuecomment-396508888,"Allow charon to start as a non-root user without CAP_CHOWN and still be
able to change the group on files that need to be accessed by charon
after capabilities have been dropped. This requires user charon starts
as to have access to socket/pidfile directory as well as belong to the
group that charon will run as after dropping capabilities.","Thanks. There were some code style issues, and the code in stream_service_unix.c wasn't fully correct (the group was changed again if the first chown() call was successful). I pushed a modified version to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,105,2018-06-08T19:05:33Z,2018-06-12T08:27:38Z,2018-06-13T08:22:17Z,CLOSED,False,27,6,2,https://github.com/micah-morton,Allow charon to change group on files before dropping caps,1,[],https://github.com/strongswan/strongswan/pull/105,https://github.com/micah-morton,3,https://github.com/strongswan/strongswan/pull/105#issuecomment-396753103,"Allow charon to start as a non-root user without CAP_CHOWN and still be
able to change the group on files that need to be accessed by charon
after capabilities have been dropped. This requires user charon starts
as to have access to socket/pidfile directory as well as belong to the
group that charon will run as after dropping capabilities.","Oops. I had it right in the original ChromeOS patch but tried to get too cute with cleaning it up :)
https://chromium-review.googlesource.com/c/chromiumos/overlays/chromiumos-overlay/+/1044968
Thanks",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,105,2018-06-08T19:05:33Z,2018-06-12T08:27:38Z,2018-06-13T08:22:17Z,CLOSED,False,27,6,2,https://github.com/micah-morton,Allow charon to change group on files before dropping caps,1,[],https://github.com/strongswan/strongswan/pull/105,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/105#issuecomment-396855866,"Allow charon to start as a non-root user without CAP_CHOWN and still be
able to change the group on files that need to be accessed by charon
after capabilities have been dropped. This requires user charon starts
as to have access to socket/pidfile directory as well as belong to the
group that charon will run as after dropping capabilities.","Oops. I had it right in the original ChromeOS patch but tried to get too cute with cleaning it up :)

Hehe, yeah, I've been there.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,106,2018-06-12T08:18:01Z,,2018-06-12T08:18:01Z,OPEN,False,44,5,1,https://github.com/Links2004,add support for typed ASN.1 DN strings,1,[],https://github.com/strongswan/strongswan/pull/106,https://github.com/Links2004,1,https://github.com/strongswan/strongswan/pull/106,"This change extends the atodn() function so it is capable of parsing
ASCII ASN.1 DN strings that tag the RDNs with its type.
Distinguished name strings of that sort can be produced with openssl:
openssl x509 -nameopt RFC2253,show_type ...

this is needed if the guessed type by charon is wrong,
which will result in a not working connection.","This change extends the atodn() function so it is capable of parsing
ASCII ASN.1 DN strings that tag the RDNs with its type.
Distinguished name strings of that sort can be produced with openssl:
openssl x509 -nameopt RFC2253,show_type ...

this is needed if the guessed type by charon is wrong,
which will result in a not working connection.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,107,2018-07-05T16:25:02Z,2018-07-06T08:29:53Z,2018-07-06T08:29:58Z,CLOSED,False,3,0,1,https://github.com/angryzor,Enable macOS native AES_GCM_ICV16 support,1,[],https://github.com/strongswan/strongswan/pull/107,https://github.com/angryzor,1,https://github.com/strongswan/strongswan/pull/107,"macOS seems to support AES_GCM_ICV16 natively using pfkey.
This change enables AES_GCM if the corresponding definition is detected in the ipsec headers.
With this change it is no longer necessary to use the libipsec module to use AES_GCM_ICV16 on macOS.
NOTE:
Because the Apple Configurator section for the native IKEv2 implementation had an option for AES_GCM I tried selecting this pfkey encryption method for AES_GCM_ICV16 and concluded that it worked after some simple testing. I tested this on an IPv4 tunnel, saw that the peer on the other side correctly identified my connection as aes-gcm-256, and was able to ping and ssh various computers on the remote network.
If there is some limitation to this implementation that makes it unfit to be included with strongswan yet, please disregard this PR.","macOS seems to support AES_GCM_ICV16 natively using pfkey.
This change enables AES_GCM if the corresponding definition is detected in the ipsec headers.
With this change it is no longer necessary to use the libipsec module to use AES_GCM_ICV16 on macOS.
NOTE:
Because the Apple Configurator section for the native IKEv2 implementation had an option for AES_GCM I tried selecting this pfkey encryption method for AES_GCM_ICV16 and concluded that it worked after some simple testing. I tested this on an IPv4 tunnel, saw that the peer on the other side correctly identified my connection as aes-gcm-256, and was able to ping and ssh various computers on the remote network.
If there is some limitation to this implementation that makes it unfit to be included with strongswan yet, please disregard this PR.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,107,2018-07-05T16:25:02Z,2018-07-06T08:29:53Z,2018-07-06T08:29:58Z,CLOSED,False,3,0,1,https://github.com/angryzor,Enable macOS native AES_GCM_ICV16 support,1,[],https://github.com/strongswan/strongswan/pull/107,https://github.com/angryzor,2,https://github.com/strongswan/strongswan/pull/107#issuecomment-402961930,"macOS seems to support AES_GCM_ICV16 natively using pfkey.
This change enables AES_GCM if the corresponding definition is detected in the ipsec headers.
With this change it is no longer necessary to use the libipsec module to use AES_GCM_ICV16 on macOS.
NOTE:
Because the Apple Configurator section for the native IKEv2 implementation had an option for AES_GCM I tried selecting this pfkey encryption method for AES_GCM_ICV16 and concluded that it worked after some simple testing. I tested this on an IPv4 tunnel, saw that the peer on the other side correctly identified my connection as aes-gcm-256, and was able to ping and ssh various computers on the remote network.
If there is some limitation to this implementation that makes it unfit to be included with strongswan yet, please disregard this PR.",Maybe it would be better to add a guard on APPLE being defined? Because now the algorithm will be registered twice if SADB_X_EALG_AES_GCM_ICV16 is also defined...,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,107,2018-07-05T16:25:02Z,2018-07-06T08:29:53Z,2018-07-06T08:29:58Z,CLOSED,False,3,0,1,https://github.com/angryzor,Enable macOS native AES_GCM_ICV16 support,1,[],https://github.com/strongswan/strongswan/pull/107,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/107#issuecomment-402965455,"macOS seems to support AES_GCM_ICV16 natively using pfkey.
This change enables AES_GCM if the corresponding definition is detected in the ipsec headers.
With this change it is no longer necessary to use the libipsec module to use AES_GCM_ICV16 on macOS.
NOTE:
Because the Apple Configurator section for the native IKEv2 implementation had an option for AES_GCM I tried selecting this pfkey encryption method for AES_GCM_ICV16 and concluded that it worked after some simple testing. I tested this on an IPv4 tunnel, saw that the peer on the other side correctly identified my connection as aes-gcm-256, and was able to ping and ssh various computers on the remote network.
If there is some limitation to this implementation that makes it unfit to be included with strongswan yet, please disregard this PR.","Thanks. Looks like macOS also supports ChaCha20/Poly1305. I've pushed your commit (slightly modified) and one that adds the latter to master.

Maybe it would be better to add a guard on APPLE being defined? Because now the algorithm will be registered twice if SADB_X_EALG_AES_GCM_ICV16 is also defined...

Yes, I noticed that too. While I think it's unlikely that there will be a header defining both, I changed your #ifdef to an #elif defined. The variant with 16-byte ICV is the only one that's recommended anyway, so I don't think Apple will add the shorter variants later.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,108,2018-07-09T10:05:34Z,2018-07-09T10:25:07Z,2018-07-09T10:25:07Z,CLOSED,False,1,1,1,https://github.com/lsc36,charon-nm: Parse any type of private key in need_secrets,1,[],https://github.com/strongswan/strongswan/pull/108,https://github.com/lsc36,1,https://github.com/strongswan/strongswan/pull/108,"Using the NetworkManager plugin, when the user supplies an ECDSA key for key authentication, the user is always asked to provide a password, even if the key is not encrypted. This patch fixes the issue.
Complement of 954f73e.","Using the NetworkManager plugin, when the user supplies an ECDSA key for key authentication, the user is always asked to provide a password, even if the key is not encrypted. This patch fixes the issue.
Complement of 954f73e.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,108,2018-07-09T10:05:34Z,2018-07-09T10:25:07Z,2018-07-09T10:25:07Z,CLOSED,False,1,1,1,https://github.com/lsc36,charon-nm: Parse any type of private key in need_secrets,1,[],https://github.com/strongswan/strongswan/pull/108,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/108#issuecomment-403433051,"Using the NetworkManager plugin, when the user supplies an ECDSA key for key authentication, the user is always asked to provide a password, even if the key is not encrypted. This patch fixes the issue.
Complement of 954f73e.","Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,1,https://github.com/strongswan/strongswan/pull/109,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit",True,{'HOORAY': ['https://github.com/randombit']}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/109#issuecomment-408086464,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Thanks a lot! I'll have a closer look at this after my vacation.
Some quick comments:

but not MD5

Which is required for RADIUS and obviously EAP-MD5, and also for non-PKCS#8 encoded, encrypted private keys. Even worse, EAP-MSCHAPv2 (e.g. on a client, servers could use EAP-RADIUS, if MD5 was supported) requires MD4 and DES-ECB.
I guess users could always enable our own implementations, if necessary. But if the library supports these algorithms, I don't really see a reason not to support them in the plugin (adding them to e.g. the IKE proposals is a different thing - they are not added to the default proposal, by the way - but that's not something a crypto plugin, which just provides the primitives, has to care about).
If there are scenarios in which you still wanted to avoid loading the algorithms you could probably add a setting to disable them, or simply build Botan without support for them (I guess Botan does not have something like OpenSSL's FIPS-mode in which using such algorithms simply fails).

We also added SHA-1, as it seems to be a hard requirement for strongswan.

It's a requirement for IKEv2 (e.g. for NAT-D payloads or the Hash and URI functionality) and for X.509 (key IDs), and we also use it for some other applications (e.g. COOKIE payloads or message hashes for retransmission detection).

We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).

I've no problem with that. Actually, I think there is really no point in supporting such weak keys anymore (not even for backwards compatibly). So we could probably remove support for it in all other plugins too.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,3,https://github.com/strongswan/strongswan/pull/109#issuecomment-408087046,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Regarding CI: IMHO it would be useful if we add CI jobs with Botan similar to the ones for openssl and gcrypt. The plugin needs a very recent Botan, even the 2.7.0 is not recent enough, because I added ffi functions for PKCS#1 to Botan just a few weeks ago. A 2.7.0 with this patch would work out, or a recent master of course.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,4,https://github.com/strongswan/strongswan/pull/109#issuecomment-408130402,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5.

IMO for MD5 at least it makes sense to enable it in the plugin if it enabled within the library. That would work in either stock or BSI configurations.

I guess Botan does not have something like OpenSSL's FIPS-mode in which using such algorithms simply fails

Actually for FFI layer this is exactly how it works; calling say botan_hash_init with a unknown algorithm (either due to it being not compiled into the library or simply absent in the version currently being used) it simply returns an error (BOTAN_FFI_ERROR_NOT_IMPLEMENTED). So it is possible to check at runtime if a feature is available or not.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,5,https://github.com/strongswan/strongswan/pull/109#issuecomment-408339454,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","IMO for MD5 at least it makes sense to enable it in the plugin if it enabled within the library. That would work in either stock or BSI configurations.

Agree. 57bbcfd adds support for MD5 in the hasher. I assume we don't want to support MD5 signatures, do we?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,6,https://github.com/strongswan/strongswan/pull/109#issuecomment-408443396,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","I assume we don't want to support MD5 signatures, do we?

I hope not? But I don't know what IPsec needs here.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/109#issuecomment-411815192,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Thanks again, also to your fellow co-workers.
I now reviewed the code and it looks really good. I still found some stuff to change :)
Before providing some details on some of the changes, I have a few questions/points regarding the code:

Is it necessary to call botan_mp_clear() before calling botan_mp_destroy() for sensitive data? Or is the data of all objects allocated by Botan cleared before freeing it?
When generating RSA and ECDSA keys you create ""user"" type botan_rng_t instances. However, in the rng_t implementation you mapped RNG_TRUE, which we usually use for private keys, to a ""system"" type botan_rng_t. So shouldn't the latter also be used when generating private keys?
In therng_t implementation a new botan_rng_t instance is created for every call to get_bytes(). Would it be possible to create this instance in the constructor so it is bound to the lifetime of the rng_t? Or is there a specific reason for not doing that?
I guess, from an API standpoint the BOTAN_FFI_ERROR_INSUFFICIENT_BUFFER_SPACE double-calls are fine (it's what we already know from OpenSSL). However, due to how these functions are currently implemented in Botan this is highly inefficient. DH secrets are derived twice, signatures are created twice, both very costly asymmetric crypto operations, and data is encoded/hashed twice.
Are there plans to improve this in Botan? Either by adding new getters for the length of these outputs, similar to botan_hash_output_length(), or by changing the implementation, for instance, adding an early check if output must be provided and otherwise just determine and return the length (an even more convenient API would be an allocation by Botan if a pointer to a NULL pointer is provided - i.e. not a NULL pointer, but a pointer to a variable that points to NULL). Otherwise, it might be better to use reasonably sized buffers on the stack, calling these functions once and then copying the buffered data to a properly sized chunk after the actual length is known.

I pushed your patches with some fixups and refactorings to the gh109-botan-plugin branch. Some notes on these changes:

I changed the return value of utility functions from int to bool because that's what we usually use.
The DH constructor for MODP_CUSTOM has to be variadic (compatibility with Apple's ARM64 implementation). I removed the redundant constructor for other groups.
The fingerprinting and public key encoding has been moved to utility functions as the code is shared by RSA and ECDSA (also doesn't require the pkcs1 plugin anymore for this).
Likewise was the signature creation moved to a utility function that's shared by RSA and ECDSA.
Another utility function maps our hash identifiers to Botan strings (used by the hasher and for PSS signatures).
I also simplified the generation of the strings used for EMSA PSS RSA signatures.
To the ECDSA private key encoding I added the named curve OID (was actually required to parse such keys again) and also the public key (necessary for older OpenSSL versions). This required keeping track of the OID as there is no way to get that out of Botan (i.e. there is no FFI wrapper for get_curve_oid()).
The last commit changes how public and private keys are parsed, which allows parsing via KEY_ANY (--type priv/pub in pki), loads unencrypted PKCS#8 encoded keys directly without pkcs8 plugin (same for other keys and the pkcs1 plugin), and simplifies private_key_t::get_public_key().

I also added some builds on Travis CI (currently building against Botan's master branch, I guess until 2.8.0 is released). However, in order to run the unit tests with our own memory leak detective two Botan features had to be disabled for that build:

The threads OS feature, which causes frees of ""unknown"" memory in pthread_create() (via std::async when generating signatures), i.e. memory not allocated by our malloc() override is passed to our free() override - strangely this is no issue when we call that function ourselves in our threading unit tests (they run before the Botan-related tests), however, the first test that runs afterwards and creates a thread will also trigger such an error, later tests are again fine (so it seems some memory is replaced when a thread is created and when the C++ standard library does this it somehow bypasses our allocator, but not when destroying the data). I did push a possible workaround for this issue, but I'm not yet sure if that's the right approach (I think I'd first like to understand what exactly happens here).
The locking_allocator module, which is implemented by a static singleton (this is reported as leak because it will never be freed). As this is triggered by the first function that uses it to allocate memory, potentially a lot of functions would have to be whitelisted to avoid reports (not so much for the unit-tests, but more the regression tests) and due to C++'s name mangling we can only whitelist FFI functions, which prevents us from actually detecting leaks in our own code caused by calling these functions, so that's not ideal.
Still I had to whitelist two ECC related FFI functions because of the static EC group hashtable that is allocated by them (and can't be disabled).
I guess we could later further reduce the module list to improve the build time (e.g. pkcs11 is not necessary on Travis).

So far I only tested this with pki and the unit tests (test vectors), but I think Andreas intends to add regression tests similar to those for openssl and gcrypt.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,8,https://github.com/strongswan/strongswan/pull/109#issuecomment-411838734,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","I can help answer a few of these which are more related to the Botan library vs the plugin implementation:

Is it necessary to call botan_mp_clear() before calling botan_mp_destroy()

Not necessary, destroying the object will cause it to be zeroed. (This should be true for all object types)

This required keeping track of the OID as there is no way to get that out of Botan (i.e. there is no FFI wrapper for get_curve_oid()).

I can add this for 2.8. What is most useful format for the output? A string representation of the OID? It could be represented as a sequence of uint32_t but that is a little awkward to use.

Problems with BOTAN_FFI_ERROR_INSUFFICIENT_BUFFER_SPACE

You are correct the current design is very inefficient because there is no way to know what the correct size should be. I am running into problems with this in the Rust binding right now. Addressing this exhaustively requires a good deal of support elsewhere in the library but I do plan to address at least some of the cases (eg PK signatures+ciphertext values) in time for 2.8.

an even more convenient API would be an allocation by Botan if a pointer to a NULL pointer is provided - i.e. not a NULL pointer, but a pointer to a variable that points to NULL

The C API avoids passing ownership of any memory across the calling boundary because this is also used for FFI and most other languages have their own allocator/heap. What you propose would certainly be the most efficient and easy to use situation when using the library from C, but it raises the risk of allocator mismatches and subsequent memory corruption for other langs.

The locking_allocator module, which is implemented by a static singleton (this is reported as leak because it will never be freed).

Well, it will eventually be freed but only on program shutdown, which is probably tricking your leak detector. You can prevent this by setting env variable BOTAN_MLOCK_POOL_SIZE to ""0"". (Or of course just continue to leave the module disabled).

memory not allocated by our malloc() override is passed to our free() override

Wow that is very strange. Let me know if there is anything we should change upstream to prevent this.

Still I had to whitelist two ECC related FFI functions because of the static EC group hashtable that is allocated by them

There is an API to clear this table but it is not exposed to FFI right now.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,9,https://github.com/strongswan/strongswan/pull/109#issuecomment-411866958,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","I just created a PR to Botan that adds botan_pk_op_sign_output_length to query the signature length. I also have patches for getting PK ciphertext+plaintext lengths, but Botan's support for ECIES/DLIES complicates things so I need further work there.
For DH/ECDH, it seems simpler to me for the calling code to use its knowledge of the key parameters; DH knows the output will be at most p bytes, and ECDH is at most 521 bits == 65 bytes.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,10,https://github.com/strongswan/strongswan/pull/109#issuecomment-411989501,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Thanks for your replies.

Is it necessary to call botan_mp_clear() before calling botan_mp_destroy()
Not necessary, destroying the object will cause it to be zeroed. (This should be true for all object types)

Good to know.

I can add this for 2.8. What is most useful format for the output? A string representation of the OID? It could be represented as a sequence of uint32_t but that is a little awkward to use.

A string would work for us, but we'd have to parse it again as we need the binary ASN.1 encoding (not that much of an issue, just requires two function calls).
But I realize now that we don't actually need this. It's only required because the plugin tries to be consistent with other plugins and produces the simple ECPrivateKey encoding for ECDSA private keys (which requires the OID to be parsed again), but we don't really specify in our API that this must be the case. The encoding is just either binary DER or PEM, however, what exactly is encoded is basically up to the plugins as long as they can parse it again. So I think we can just stick with PKCS#8 encoding and simplify the private key exporting a lot by just calling botan_privkey_export(). I'll change this in the branch.

memory not allocated by our malloc() override is passed to our free() override
Wow that is very strange. Let me know if there is anything we should change upstream to prevent this.

I don't think it's anything your code does, you simply use std::async, which spawns the thread. But yeah, it's quite strange.

I just created a PR to Botan that adds botan_pk_op_sign_output_length to query the signature length. I also have patches for getting PK ciphertext+plaintext lengths, but Botan's support for ECIES/DLIES complicates things so I need further work there.

Awesome, thanks a lot.

For DH/ECDH, it seems simpler to me for the calling code to use its knowledge of the key parameters; DH knows the output will be at most p bytes, and ECDH is at most 521 bits == 65 bytes.

Makes sense, I'll change the code accordingly.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,11,https://github.com/strongswan/strongswan/pull/109#issuecomment-412028705,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","I've updated the branch. I also disabled some of the larger Botan modules on Travis to make the build a bit faster. However, I noticed that the ffi module currently has a dependency on the x509 module, which we currently don't use (and I think it would require several FFI additions to match our API). Is this strictly necessary? Or would it be an option to make it an optional addition to the API (similar to the TLS API)?
A configure option to disable building the CLI, which we also don't need for the unit tests, would also be great (and disabling building the tests too, although I understand if that's not an option).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,12,https://github.com/strongswan/strongswan/pull/109#issuecomment-412085623,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Thanks for your review!

When generating RSA and ECDSA keys you create ""user"" type botan_rng_t instances. However, in the rng_t implementation you mapped RNG_TRUE, which we usually use for private keys, to a ""system"" type botan_rng_t. So shouldn't the latter also be used when generating private keys?

In this case, yes.

In the rng_t implementation a new botan_rng_t instance is created for every call to get_bytes(). Would it be possible to create this instance in the constructor so it is bound to the lifetime of the rng_t? Or is there a specific reason for not doing that?

Actually this was our first shot for the implementation, but our appliance QA run failed with an error in this area. I cannot remember though what the error messages were. Maybe a race condition? Does strongswan require the rng to be threadsafe? Because neither Botan's System_RNG nor HMAC_DRBG are threadsafe by default. You have to wrap them in a Serialized_RNG object.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,13,https://github.com/strongswan/strongswan/pull/109#issuecomment-412108984,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","However, I noticed that the ffi module currently has a dependency on the x509 module, which we currently don't use

I just pushed a change to allow x509 to be optional for ffi, if not enabled all functions just return not implemented error code.

and I think it would require several FFI additions to match our API

If you decide you want to start using the X509 support within the plugin and need additional FFI functions just let me know.

A configure option to disable building the CLI, which we also don't need for the unit tests, would also be great

This is reasonable suggestion. For your purposes though, perhaps you just need to make libs test?

Because neither Botan's System_RNG nor HMAC_DRBG are threadsafe by default.

The System RNG should be threadsafe. Or, I guess to be more precise, we assume the underlying action (be it reading from /dev/urandom or calling RtlGenRandom or arc4random) is serialized by the operating system or runtime library.
If this is not true then there is a bigger problem because all instances of Botan::System_RNG actually refer to a singleton object which queries the system RNG. So even if two different threads allocate different Botan::System_RNG objects, they are still referring to the same underlying data structure.
For userspace, I just add an option to FFI so ""user-threadsafe"" requests a serialized RNG. This might help.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,14,https://github.com/strongswan/strongswan/pull/109#issuecomment-412128769,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","When generating RSA and ECDSA keys you create ""user"" type botan_rng_t instances. However, in the rng_t implementation you mapped RNG_TRUE, which we usually use for private keys, to a ""system"" type botan_rng_t. So shouldn't the latter also be used when generating private keys?
In this case, yes.

The question is whether it makes that much of a difference in the end. ""system"" seems to default to /dev/urandom, whereas in our random plugin we use /dev/random for RNG_TRUE (in practice that probably makes not that much of a difference, though, unless the system entropy is low, I guess). And the DRBG created with ""user"" is seeded by the ""system"" RNG too by default (although strictly limited to 256 bits entropy for the initial seed, but that probably also doesn't matter much in practice). But I guess using ""system"" would be more consistent, so I'll change that.

Actually this was our first shot for the implementation, but our appliance QA run failed with an error in this area. I cannot remember though what the error messages were. Maybe a race condition? Does strongswan require the rng to be threadsafe? Because neither Botan's System_RNG nor HMAC_DRBG are threadsafe by default. You have to wrap them in a Serialized_RNG object.

Interesting. Could you try to find out what the issue was? Because to me it makes more sense to bind botan_rng_t instances to the lifetime of rng_t instances (in particular for DRBGs).
I don't think they have to be thread-safe in the sense that multiple threads will operate on a single rng_t instance concurrently. But there are at all times multiple instances on which different threads operate (some might be used by multiple threads because they are held in shared objects, but not concurrently). But those are pretty much exclusively ""user"" instances, which should be independent anyway (except for the initial seeding, but if you create a new instance with each call to  allocate/get_bytes() there are probably even more chances for races).

I just pushed a change to allow x509 to be optional for ffi, if not enabled all functions just return not implemented error code.

Perfect, thanks.

If you decide you want to start using the X509 support within the plugin and need additional FFI functions just let me know.

Great, thanks. Although it's not our first priority (we'll probably focus on wrapping additional algorithms e.g. curve25519/ed25519 or chacha20poly1305).

For your purposes though, perhaps you just need to make libs test?

You're absolutely right, didn't realize there are separate make targets for these. This and disabling x509 reduced the build time of the library from ~360 to ~230 seconds (full build was ~410 seconds).

For userspace, I just add an option to FFI so ""user-threadsafe"" requests a serialized RNG. This might help.

Nice, but as mentioned above, we'll hopefully not need it. However, this is missing a #if defined(BOTAN_TARGET_OS_HAS_THREADS) wrapper around it (our build without threads OS feature currently fails).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,15,https://github.com/strongswan/strongswan/pull/109#issuecomment-412131671,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","However, this is missing a #if defined(BOTAN_TARGET_OS_HAS_THREADS)

Sorry about that, fixed now. (Building without thread support is not currently checked by our CI, I should add that.)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,16,https://github.com/strongswan/strongswan/pull/109#issuecomment-412239940,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","botan_pk_op_encrypt_output_length and botan_pk_op_decrypt_output_length are now available in Botan master. They return an upper bound on the output lengths. In some cases it is exact, in others (especially for decrypt) it is just a strict upper bound.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,17,https://github.com/strongswan/strongswan/pull/109#issuecomment-412377943,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","While in the context of how botan is used in the plugin it is possible to deduce from the parameters the size of the output of a key agreement, I realized that is not possible in the general case. So I just added to botan master a botan_pk_op_key_agreement_size which returns the size of the value that a raw (un-KDFed) DH or ECDH key agreement will produce.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,18,https://github.com/strongswan/strongswan/pull/109#issuecomment-412792279,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Interesting. Could you try to find out what the issue was? Because to me it makes more sense to bind botan_rng_t instances to the lifetime of rng_t instances (in particular for DRBGs).

We are working on that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,19,https://github.com/strongswan/strongswan/pull/109#issuecomment-415077944,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit",Thanks @randombit.  I've updated the branch to make use of these functions (including DH/ECDH). Now the only open issue I see is where botan_rng_t instances are initialized in rng_t. Looking forward to your findings @securitykernel.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/randombit,20,https://github.com/strongswan/strongswan/pull/109#issuecomment-415111398,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","WRT the random number generators, I recently added also to the C interface the ability to request RNG type ""user-threadsafe"" which guards all access to the PRNG object with a mutex. However this option is only available in the event that threading support is enabled at build time.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,21,https://github.com/strongswan/strongswan/pull/109#issuecomment-415380977,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","I recently added also to the C interface the ability to request RNG type ""user-threadsafe"" which guards all access to the PRNG object with a mutex.

Thanks, I saw that above. But as mentioned, I don't think it should be necessary.
By the way, building Botan's master without x509 module currently fails (seems like merge issue, i.e. the #if defined checks are missing in functions that were added with randombit/botan@dc85761).
Edit: randombit/botan#1658",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,22,https://github.com/strongswan/strongswan/pull/109#issuecomment-416851398,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Re RNG: After running the first 3-5 QA scenarios, strongswan crashes. Most of the time, it's in get_bytes(). If we put the botan_rng_get() call in a mutex, everything is fine.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,23,https://github.com/strongswan/strongswan/pull/109#issuecomment-416860677,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Re RNG: After running the first 3-5 QA scenarios, strongswan crashes. Most of the time, it's in get_bytes(). If we put the botan_rng_get() call in a mutex, everything is fine.

What QA scenarios are these exactly (i.e. can we reproduce this somehow)? The only call in get_bytes(), after moving the botan_rng_t initialization, is botan_rng_get(), so what exactly causes the crash? Is the pointer invalid (segmentation fault)? Something else? Can you determine for what purpose the RNG that causes this was created? You say most of the time it's in get_bytes(), are there other crashes? Could you provide backtraces?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/securitykernel,24,https://github.com/strongswan/strongswan/pull/109#issuecomment-418721314,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","Our QA setup involves n<5 appliances which build up IKE SAs. During the scenarios we execute, we constantly change keys and certificates and build up new IKE SAs. After some time during the QA run, strongswan crashes and restarts. We can not identify the one scenario that causes the crash, this really happens at different times during the QA run.
Here is one backtrace:
    -> ??:?
  /usr/lib64/libbotan-2.so.4 @ 0x7ffff4e0f000 (_ZN5Botan9HMAC_DRBG6updateEPKhm+0x20d) [0x7ffff4fe4e0d]
    -> ??:?
  /usr/lib64/libbotan-2.so.4 @ 0x7ffff4e0f000 (_ZN5Botan9HMAC_DRBG20randomize_with_inputEPhmPKhm+0xd1) [0x7ffff4fe5131]
    -> ??:?
  /usr/lib64/libbotan-2.so.4 @ 0x7ffff4e0f000 (_ZN5Botan21RandomNumberGenerator23randomize_with_ts_inputEPhm+0x6c) [0x7ffff4fe5e0c]
    -> ??:?
  /usr/lib64/libbotan-2.so.4 @ 0x7ffff4e0f000 (botan_rng_get+0x2c) [0x7ffff4f09ccc]
    -> ??:?
  /usr/lib64/ipsec/plugins/libstrongswan-botan.so @ 0x7ffff5373000 [0x7ffff5376105]
    -> strongswan/src/libstrongswan/plugins/botan/botan_rng.c:51
  /usr/lib64/ipsec/libcharon.so.0 @ 0x7ffff78b7000 [0x7ffff78f8c91]
    -> strongswan/src/libcharon/sa/ike_sa_manager.c:1007 (discriminator 1)
  /usr/lib64/ipsec/libcharon.so.0 @ 0x7ffff78b7000 [0x7ffff78f95bc]
    -> strongswan/src/libcharon/sa/ike_sa_manager.c:1201
  /usr/lib64/ipsec/libcharon.so.0 @ 0x7ffff78b7000 [0x7ffff78fa067]
    -> strongswan/src/libcharon/sa/ike_sa_manager.c:1464
  /usr/lib64/ipsec/libcharon.so.0 @ 0x7ffff78b7000 [0x7ffff78cd212]
    -> strongswan/src/libcharon/control/controller.c:415
  /usr/lib64/ipsec/libcharon.so.0 @ 0x7ffff78b7000 [0x7ffff78cde4d]
    -> strongswan/src/libcharon/control/controller.c:532
  /usr/lib64/ipsec/plugins/libstrongswan-vici.so @ 0x7ffff2f1e000 [0x7ffff2f2b75b]
    -> strongswan/src/libcharon/plugins/vici/vici_control.c:205
  /usr/lib64/ipsec/plugins/libstrongswan-vici.so @ 0x7ffff2f1e000 (process_request+0xe5) [0x7ffff2f255e5]
    -> strongswan/src/libcharon/plugins/vici/vici_dispatcher.c:291
  /usr/lib64/ipsec/plugins/libstrongswan-vici.so @ 0x7ffff2f1e000 [0x7ffff2f259c1]
    -> strongswan/src/libcharon/plugins/vici/vici_dispatcher.c:347
  /usr/lib64/ipsec/plugins/libstrongswan-vici.so @ 0x7ffff2f1e000 [0x7ffff2f21cfe]
    -> strongswan/src/libcharon/plugins/vici/vici_socket.c:509
  /usr/lib64/ipsec/libstrongswan.so.0 @ 0x7ffff7b5e000 [0x7ffff7b9d611]
    -> strongswan/src/libstrongswan/processing/jobs/callback_job.c:78
  /usr/lib64/ipsec/libstrongswan.so.0 @ 0x7ffff7b5e000 [0x7ffff7b9e2cb]
    -> strongswan/src/libstrongswan/processing/processor.c:235
  /usr/lib64/ipsec/libstrongswan.so.0 @ 0x7ffff7b5e000 [0x7ffff7bb35c6]
    -> strongswan/src/libstrongswan/threading/thread.c:332 (discriminator 3)
  /lib64/libpthread.so.0 @ 0x7ffff718f000 [0x7ffff71962d0]
    -> ??:?
  /lib64/libc.so.6 @ 0x7ffff6be8000 (clone+0x6d) [0x7ffff6cd5f4d]
    -> ??:?

This is our botan_rng.c: botan_rng.c.txt",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,25,https://github.com/strongswan/strongswan/pull/109#issuecomment-418729022,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","/usr/lib64/ipsec/libcharon.so.0 @ 0x7ffff78b7000 [0x7ffff78f8c91] -> strongswan/src/libcharon/sa/ike_sa_manager.c:1007 (discriminator 1)

I see. The rng_t instance here, which is used to allocate IKE SPIs, is used under the read lock of an rwlock, i.e. there could, in fact, be multiple threads calling get_bytes for the same instance concurrently. I suppose using user-threadsafe would fix this (as Jack mentioned, this only works if threading is enabled - so it will currently not work in our unit tests, so maybe a fallback to user might be necessary - and there is no system-threadsafe, however, RNG_TRUE is only really used by the single-threaded pki --gen, so that's not really an issue), or as you suggested using a mutex in get_bytes. Maybe we should have an additional flag, besides the strength, to indicate if this is actually necessary, as it really shouldn't be for most instances.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,26,https://github.com/strongswan/strongswan/pull/109#issuecomment-419115826,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit","I've update the branch again. If Botan is built with threading support, user-threadsafe is now used. For the tests with leak-detective (i.e. if threading is disabled) user is used instead.",True,{'THUMBS_UP': ['https://github.com/securitykernel']}
strongswan/strongswan,https://github.com/strongswan/strongswan,109,2018-07-26T11:09:58Z,2018-09-12T14:47:29Z,2018-09-12T14:49:08Z,CLOSED,False,5258,1,30,https://github.com/securitykernel,Add Botan plugin to libstrongswan,3,[],https://github.com/strongswan/strongswan/pull/109,https://github.com/tobiasbrunner,27,https://github.com/strongswan/strongswan/pull/109#issuecomment-420676962,"Adds a plugin for the Botan crypto library to libstrongswan. Botan is a C++ library, buth with C wrapper functions (""ffi"").
The plugin implements the following interfaces:

crypter
dh
ecdh
ec
gcm
hasher
hmac
rng
rsa

The plugin current only supports algorithms that are recommended by the BSI in its technical guidelines, e.g., for hashing SHA-2, but not MD5. We also added SHA-1, as it seems to be a hard requirement for strongswan.
We had to remove tests for generating 768 bit RSA keys, as Botan only allows >=1,024 bit RSA keys to be generated (everything <1,024 bits is considered too weak).
/cc @randombit",Merged to master. Thanks again!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,110,2018-08-06T11:24:35Z,2018-08-06T14:58:04Z,2018-08-06T14:58:15Z,CLOSED,False,2,2,1,https://github.com/tomschlenkhoff,Fix typos,1,[],https://github.com/strongswan/strongswan/pull/110,https://github.com/tomschlenkhoff,1,https://github.com/strongswan/strongswan/pull/110,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,110,2018-08-06T11:24:35Z,2018-08-06T14:58:04Z,2018-08-06T14:58:15Z,CLOSED,False,2,2,1,https://github.com/tomschlenkhoff,Fix typos,1,[],https://github.com/strongswan/strongswan/pull/110,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/110#issuecomment-410737596,,Applied to master. Thanks!,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,111,2018-08-09T05:29:10Z,2018-08-10T08:10:40Z,2018-08-10T08:10:44Z,CLOSED,False,2,2,1,https://github.com/vishr,Fixed libtpmtss/Android.mk,1,[],https://github.com/strongswan/strongswan/pull/111,https://github.com/vishr,1,https://github.com/strongswan/strongswan/pull/111,Signed-off-by: Vishal Rana vr@labstack.com,Signed-off-by: Vishal Rana vr@labstack.com,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,111,2018-08-09T05:29:10Z,2018-08-10T08:10:40Z,2018-08-10T08:10:44Z,CLOSED,False,2,2,1,https://github.com/vishr,Fixed libtpmtss/Android.mk,1,[],https://github.com/strongswan/strongswan/pull/111,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/111#issuecomment-412009948,Signed-off-by: Vishal Rana vr@labstack.com,"Applied to master, thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,112,2018-09-03T12:33:21Z,2018-10-16T22:17:02Z,2021-04-11T04:26:07Z,CLOSED,False,86,22,1,https://github.com/Thermi,mysql: Replace in_use bool with rwlock,3,[],https://github.com/strongswan/strongswan/pull/112,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/112,"This fixes a race condition in the driver which causes segfaults and mysql client libary errors due to uncoordinated usage of MYSQL structs.
There is a second issue that I discovered, that this patch does not deal with:
Some versions of the mysql client library (libmysqlclient and libmariadbclient) do not write to the buffer, even though the SELECT query executed successfully. Debugging that is hard, because the buffer then contains unitialised memory. To ""fix"" that, one could replace the malloc() calls for the buffers with calloc() and then, before returning the virtual IP in attr-sql, check if the IP is all zeroes and if it is (so the mysql client library is faulty), return an error instead.","This fixes a race condition in the driver which causes segfaults and mysql client libary errors due to uncoordinated usage of MYSQL structs.
There is a second issue that I discovered, that this patch does not deal with:
Some versions of the mysql client library (libmysqlclient and libmariadbclient) do not write to the buffer, even though the SELECT query executed successfully. Debugging that is hard, because the buffer then contains unitialised memory. To ""fix"" that, one could replace the malloc() calls for the buffers with calloc() and then, before returning the virtual IP in attr-sql, check if the IP is all zeroes and if it is (so the mysql client library is faulty), return an error instead.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,113,2018-10-02T04:58:39Z,2018-10-02T07:30:47Z,2018-10-02T07:31:16Z,CLOSED,False,2,2,2,https://github.com/selsky,swanctl: Fix typos in usage for swanctl rekey/terminate commands,1,[],https://github.com/strongswan/strongswan/pull/113,https://github.com/selsky,1,https://github.com/strongswan/strongswan/pull/113,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,113,2018-10-02T04:58:39Z,2018-10-02T07:30:47Z,2018-10-02T07:31:16Z,CLOSED,False,2,2,2,https://github.com/selsky,swanctl: Fix typos in usage for swanctl rekey/terminate commands,1,[],https://github.com/strongswan/strongswan/pull/113,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/113#issuecomment-426176526,,"Applied to master, thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,114,2018-10-06T23:37:01Z,2018-10-06T23:39:07Z,2018-10-08T08:43:28Z,CLOSED,False,1,1,1,https://github.com/selsky,"dhcp: use ""knl"" subsystem for logging of RNG failure, not ""cfg""",1,[],https://github.com/strongswan/strongswan/pull/114,https://github.com/selsky,1,https://github.com/strongswan/strongswan/pull/114,"Follow example set in src/charon-tkm/src/tkm/tkm_kernel_ipsec.c
This is not a configuration error.","Follow example set in src/charon-tkm/src/tkm/tkm_kernel_ipsec.c
This is not a configuration error.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,114,2018-10-06T23:37:01Z,2018-10-06T23:39:07Z,2018-10-08T08:43:28Z,CLOSED,False,1,1,1,https://github.com/selsky,"dhcp: use ""knl"" subsystem for logging of RNG failure, not ""cfg""",1,[],https://github.com/strongswan/strongswan/pull/114,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/114#issuecomment-427759707,"Follow example set in src/charon-tkm/src/tkm/tkm_kernel_ipsec.c
This is not a configuration error.",It also has nothing to do with the IPsec/network kernel interface (for which KNL is used). CFG is used here because the plugin is a configuration backend (providing IP addresses).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,115,2018-10-10T09:16:55Z,2018-11-20T09:25:59Z,2018-11-20T09:25:59Z,CLOSED,False,6,6,1,https://github.com/lofvir,task_manager_v1: ensure DPD_ACK is sent in time,2,[],https://github.com/strongswan/strongswan/pull/115,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/115,"If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.","If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,115,2018-10-10T09:16:55Z,2018-11-20T09:25:59Z,2018-11-20T09:25:59Z,CLOSED,False,6,6,1,https://github.com/lofvir,task_manager_v1: ensure DPD_ACK is sent in time,2,[],https://github.com/strongswan/strongswan/pull/115,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/115#issuecomment-428979707,"If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.","Looks OK.

Instead of giving DPD in general precedence over QUICK_MODE tasks,

Is that actually a concern? If Quick Modes are still actively established, no DPD will be queued (because the task manager is ""busy""). So why wouldn't we generally give DPD tasks precedence over QM tasks?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,115,2018-10-10T09:16:55Z,2018-11-20T09:25:59Z,2018-11-20T09:25:59Z,CLOSED,False,6,6,1,https://github.com/lofvir,task_manager_v1: ensure DPD_ACK is sent in time,2,[],https://github.com/strongswan/strongswan/pull/115,https://github.com/lofvir,3,https://github.com/strongswan/strongswan/pull/115#issuecomment-431060906,"If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.","That was just a precaution to avoid changing existing behaviour for outgoing DPD requests.
Assuming we have 200 QUICK_MODE tasks queued, a slow peer on the right and a pretty short DPD interval: would charon queue up a DPD task while processing the 200 QUICK_MODE requests (e.g. in between two of those tasks)?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,115,2018-10-10T09:16:55Z,2018-11-20T09:25:59Z,2018-11-20T09:25:59Z,CLOSED,False,6,6,1,https://github.com/lofvir,task_manager_v1: ensure DPD_ACK is sent in time,2,[],https://github.com/strongswan/strongswan/pull/115,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/115#issuecomment-431274618,"If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.","would charon queue up a DPD task while processing the 200 QUICK_MODE requests (e.g. in between two of those tasks)?

No, because each of the Quick Mode exchanges will act as DPD exchange, there is a check for active tasks in ike_sa_t::send_dpd(): 
  
    
      strongswan/src/libcharon/sa/ike_sa.c
    
    
        Lines 769 to 773
      in
      f18945d
    
  
  
    

        
          
           if (this->task_manager->busy(this->task_manager)) 
        

        
          
           { 
        

        
          
           	/* an exchange is in the air, no need to start a DPD check */ 
        

        
          
           	diff = 0; 
        

        
          
           } 
        
    
  


That's why I think this could be simplified (i.e. just move the existing if-block before the QM if-block).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,115,2018-10-10T09:16:55Z,2018-11-20T09:25:59Z,2018-11-20T09:25:59Z,CLOSED,False,6,6,1,https://github.com/lofvir,task_manager_v1: ensure DPD_ACK is sent in time,2,[],https://github.com/strongswan/strongswan/pull/115,https://github.com/lofvir,5,https://github.com/strongswan/strongswan/pull/115#issuecomment-431459781,"If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.","Given your feedback i'll update the PR.
Thank you for the clarification.

Tobias Brunner <notifications@github.com> schrieb am Fr., 19. Okt. 2018,
09:43:
…
 would charon queue up a DPD task while processing the 200 QUICK_MODE
 requests (e.g. in between two of those tasks)?

 No, because each of the Quick Mode exchanges will act as DPD exchange,
 there is a check for active tasks in ike_sa_t::send_dpd():
 https://github.com/strongswan/strongswan/blob/f18945dfea5d12566aa010513a8fa584910a5e26/src/libcharon/sa/ike_sa.c#L769-L773
 That's why I think this could be simplified (i.e. just move the existing
 if-block before the QM if-block).

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#115 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/APTOJAXjApQ5rQlnTEzB_PNYTLoyFrIsks5umYKxgaJpZM4XU6B8>
 .",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,115,2018-10-10T09:16:55Z,2018-11-20T09:25:59Z,2018-11-20T09:25:59Z,CLOSED,False,6,6,1,https://github.com/lofvir,task_manager_v1: ensure DPD_ACK is sent in time,2,[],https://github.com/strongswan/strongswan/pull/115,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/115#issuecomment-440202756,"If allot of QUICK_MODE tasks is queued and other side
sends a DPD request, there is a good chance for timeouts.
Observerd this in cases where other side is quite slow in responding to
QUICK_MODE requests (e.g. Cisco ASA v8.x) and about 100 CHILD_SA's are to be spawn.
Instead of giving DPD in general precedence over QUICK_MODE tasks,
the task has been split up. Now it is possible to execute the DPD_ACK
task next, while the regular initiation of DPD requests remains lower
precedented than QUICK_MODE tasks.",Thanks. Squashed and pushed to master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,116,2018-10-23T21:30:12Z,2018-10-24T08:12:21Z,2018-10-24T08:12:21Z,CLOSED,False,3,3,1,https://github.com/ambiso,OpenSSL plugin invalid bounds check,3,[],https://github.com/strongswan/strongswan/pull/116,https://github.com/ambiso,1,https://github.com/strongswan/strongswan/pull/116,"The openssl plugin contains an invalid length check.
It checks if a given keyid would fit into the keyname buffer in base64 encoding, however then the keyid is serialized in hex, resulting in a possible buffer overflow:
       if (sizeof(keyname) - strlen(keyname) <= keyid.len * 4 / 3 + 1)
       {
                return NULL;
       }
       chunk_to_hex(keyid, keyname + strlen(keyname), FALSE);
Additionally I removed the keyid.len > 40 bounds check as it's done implicitly by checking if the keyid would fit in the buffer.
Furthermore I removed the extra semicolon on line 373.","The openssl plugin contains an invalid length check.
It checks if a given keyid would fit into the keyname buffer in base64 encoding, however then the keyid is serialized in hex, resulting in a possible buffer overflow:
       if (sizeof(keyname) - strlen(keyname) <= keyid.len * 4 / 3 + 1)
       {
                return NULL;
       }
       chunk_to_hex(keyid, keyname + strlen(keyname), FALSE);
Additionally I removed the keyid.len > 40 bounds check as it's done implicitly by checking if the keyid would fit in the buffer.
Furthermore I removed the extra semicolon on line 373.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,116,2018-10-23T21:30:12Z,2018-10-24T08:12:21Z,2018-10-24T08:12:21Z,CLOSED,False,3,3,1,https://github.com/ambiso,OpenSSL plugin invalid bounds check,3,[],https://github.com/strongswan/strongswan/pull/116,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/116#issuecomment-432556918,"The openssl plugin contains an invalid length check.
It checks if a given keyid would fit into the keyname buffer in base64 encoding, however then the keyid is serialized in hex, resulting in a possible buffer overflow:
       if (sizeof(keyname) - strlen(keyname) <= keyid.len * 4 / 3 + 1)
       {
                return NULL;
       }
       chunk_to_hex(keyid, keyname + strlen(keyname), FALSE);
Additionally I removed the keyid.len > 40 bounds check as it's done implicitly by checking if the keyid would fit in the buffer.
Furthermore I removed the extra semicolon on line 373.","Thanks for the patches, applied to master.

resulting in a possible buffer overflow

Fortunately, the length check you removed prevented that (at least since b226628). The buffer has a size of 512 bytes and at most 92 bytes are written to it (40 hex bytes plus the - theoretically negative - slot number and colon). However, at the time this code was added (0b8b664), the buffer was only 64 bytes long so the incorrect Base64 length check was more problematic then (the 40 byte check seemed to be intended to prevent overflowing the 64 byte buffer under the assumption of a Base64 encoding). Since this code operates on configuration data it's not that much of an issue, though.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,117,2018-11-21T11:09:54Z,2018-12-07T09:41:19Z,2018-12-07T09:41:19Z,CLOSED,False,71,5,6,https://github.com/lofvir,Adopt child tasks,3,[],https://github.com/strongswan/strongswan/pull/117,https://github.com/lofvir,1,https://github.com/strongswan/strongswan/pull/117,"@tobiasbrunner Could you please review the changes, in my tests adoption of tasks is working now.
Whats required?
Configure a connection with about 100 CHILD_SA's. While the initiator is processing the QUICK_MODE tasks, trigger an IKE rekeying/reauth on responder side.
The new IKE_SA should adopt the outstanding QUICK_MODE tasks and take over their processing from its predecessor.","@tobiasbrunner Could you please review the changes, in my tests adoption of tasks is working now.
Whats required?
Configure a connection with about 100 CHILD_SA's. While the initiator is processing the QUICK_MODE tasks, trigger an IKE rekeying/reauth on responder side.
The new IKE_SA should adopt the outstanding QUICK_MODE tasks and take over their processing from its predecessor.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,117,2018-11-21T11:09:54Z,2018-12-07T09:41:19Z,2018-12-07T09:41:19Z,CLOSED,False,71,5,6,https://github.com/lofvir,Adopt child tasks,3,[],https://github.com/strongswan/strongswan/pull/117,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/117#issuecomment-442469313,"@tobiasbrunner Could you please review the changes, in my tests adoption of tasks is working now.
Whats required?
Configure a connection with about 100 CHILD_SA's. While the initiator is processing the QUICK_MODE tasks, trigger an IKE rekeying/reauth on responder side.
The new IKE_SA should adopt the outstanding QUICK_MODE tasks and take over their processing from its predecessor.","I went with a more generic approach, adding a method to remove any enumerated tasks from queues. Pushed to the adopt-child-tasks branch. Let me know if that works for you.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,117,2018-11-21T11:09:54Z,2018-12-07T09:41:19Z,2018-12-07T09:41:19Z,CLOSED,False,71,5,6,https://github.com/lofvir,Adopt child tasks,3,[],https://github.com/strongswan/strongswan/pull/117,https://github.com/lofvir,3,https://github.com/strongswan/strongswan/pull/117#issuecomment-442786200,"@tobiasbrunner Could you please review the changes, in my tests adoption of tasks is working now.
Whats required?
Configure a connection with about 100 CHILD_SA's. While the initiator is processing the QUICK_MODE tasks, trigger an IKE rekeying/reauth on responder side.
The new IKE_SA should adopt the outstanding QUICK_MODE tasks and take over their processing from its predecessor.","I went with a more generic approach, adding a method to remove any enumerated tasks from queues. Pushed to the adopt-child-tasks branch. Let me know if that works for you.

Your approach works likewise and i have tested it successfully for IKEv1.
Have you planned to merge this somehow soon into master?
Thanks for the effort 👍",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,117,2018-11-21T11:09:54Z,2018-12-07T09:41:19Z,2018-12-07T09:41:19Z,CLOSED,False,71,5,6,https://github.com/lofvir,Adopt child tasks,3,[],https://github.com/strongswan/strongswan/pull/117,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/117#issuecomment-443167831,"@tobiasbrunner Could you please review the changes, in my tests adoption of tasks is working now.
Whats required?
Configure a connection with about 100 CHILD_SA's. While the initiator is processing the QUICK_MODE tasks, trigger an IKE rekeying/reauth on responder side.
The new IKE_SA should adopt the outstanding QUICK_MODE tasks and take over their processing from its predecessor.",You're welcome. I guess it will be included in the next release.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,118,2018-12-05T14:29:39Z,,2019-04-23T10:53:46Z,OPEN,False,1005,2,5,https://github.com/semihalf-Duleba-Kornel,Extend Strongswan to support IBM TSS,1,[],https://github.com/strongswan/strongswan/pull/118,https://github.com/semihalf-Duleba-Kornel,1,https://github.com/strongswan/strongswan/pull/118,"This path adds support for the IBM TSS library.
The main advantage of which is that it works on FreeBSD, whereas the currently supported one does not.
Create new tss plugin basing on tpm_tss_tss2_v2.c.
Modify configure.ac to recognize the new plugin.","This path adds support for the IBM TSS library.
The main advantage of which is that it works on FreeBSD, whereas the currently supported one does not.
Create new tss plugin basing on tpm_tss_tss2_v2.c.
Modify configure.ac to recognize the new plugin.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,118,2018-12-05T14:29:39Z,,2019-04-23T10:53:46Z,OPEN,False,1005,2,5,https://github.com/semihalf-Duleba-Kornel,Extend Strongswan to support IBM TSS,1,[],https://github.com/strongswan/strongswan/pull/118,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/118#issuecomment-444815591,"This path adds support for the IBM TSS library.
The main advantage of which is that it works on FreeBSD, whereas the currently supported one does not.
Create new tss plugin basing on tpm_tss_tss2_v2.c.
Modify configure.ac to recognize the new plugin.","I don't like the code duplication. There are already two versions because the System API (SAPI) or even the base TSS/TPM2 specs changed over time (constants, structs). The problem is that the IBM TSS implements neither version, it's similar to the v1 implementation, yet uses different (never standardized by the TCG) functions and has other minor differences.
The v2 implementation uses the current SAPI, as it is implemented by libtss2-sys. So to me it seems that instead of adding another near-copy, the better approach would be to get the IBM TSS developers to actually implement the SAPI/TSS/TPM2 specs properly, so the v2 implementation would only have to be modified slightly to work with either TSS library (that's the whole point of having a standardized interface).
In regards to FreeBSD, it might be possible to get libtss2-sys working with an appropriate TCTI implementation (maybe from IBM's TSS, if they actually implement that interface).
And two notes regarding your implementation, it's missing quote(), which is quite essential for several use cases, and please refer to the developer documentation on our wiki for code style and license information.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,118,2018-12-05T14:29:39Z,,2019-04-23T10:53:46Z,OPEN,False,1005,2,5,https://github.com/semihalf-Duleba-Kornel,Extend Strongswan to support IBM TSS,1,[],https://github.com/strongswan/strongswan/pull/118,https://github.com/semihalf-Duleba-Kornel,3,https://github.com/strongswan/strongswan/pull/118#issuecomment-485754248,"This path adds support for the IBM TSS library.
The main advantage of which is that it works on FreeBSD, whereas the currently supported one does not.
Create new tss plugin basing on tpm_tss_tss2_v2.c.
Modify configure.ac to recognize the new plugin.","Sorry for not responding for so long.
Basing on your comment above I deducted that you're quite reluctant about merging this PR.
Would you consider doing so if I addressed all your concerns regarding style, missing PCR related functionality and anything else that would come up later.
As for running libtss2-sys on FreeBSD.
Before deciding to go with IBM TSS I spent some time trying to get it to work, but with no success.
Also the TPM driver in FreeBSD handles concurrent requests, it pretty much works in a similar way to /dev/tpmrm0 on Linux.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,119,2018-12-07T12:32:23Z,2018-12-12T11:01:18Z,2018-12-12T11:01:30Z,CLOSED,False,3,0,1,https://github.com/arvedarved,add missing calls to ENGINE_finish(),1,[],https://github.com/strongswan/strongswan/pull/119,https://github.com/arvedarved,1,https://github.com/strongswan/strongswan/pull/119,"see https://www.openssl.org/docs/man1.1.0/crypto/ENGINE_finish.html
for details.
Without calls to ENGINE_finish() memory is leaked.","see https://www.openssl.org/docs/man1.1.0/crypto/ENGINE_finish.html
for details.
Without calls to ENGINE_finish() memory is leaked.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,119,2018-12-07T12:32:23Z,2018-12-12T11:01:18Z,2018-12-12T11:01:30Z,CLOSED,False,3,0,1,https://github.com/arvedarved,add missing calls to ENGINE_finish(),1,[],https://github.com/strongswan/strongswan/pull/119,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/119#issuecomment-446212300,"see https://www.openssl.org/docs/man1.1.0/crypto/ENGINE_finish.html
for details.
Without calls to ENGINE_finish() memory is leaked.","Thanks for the report. Instead of just adding calls to ENGINE_finish(), I think we can just replace the later calls to ENGINE_free() with that (according to the docs ENGINE_init() acquires a functional reference, which also holds an implicit structural reference, which is released by ENGINE_finish()). See gh119-openssl-engine branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,119,2018-12-07T12:32:23Z,2018-12-12T11:01:18Z,2018-12-12T11:01:30Z,CLOSED,False,3,0,1,https://github.com/arvedarved,add missing calls to ENGINE_finish(),1,[],https://github.com/strongswan/strongswan/pull/119,https://github.com/arvedarved,3,https://github.com/strongswan/strongswan/pull/119#issuecomment-446312221,"see https://www.openssl.org/docs/man1.1.0/crypto/ENGINE_finish.html
for details.
Without calls to ENGINE_finish() memory is leaked.","looks good to me, thanks. (haven't tested it)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,119,2018-12-07T12:32:23Z,2018-12-12T11:01:18Z,2018-12-12T11:01:30Z,CLOSED,False,3,0,1,https://github.com/arvedarved,add missing calls to ENGINE_finish(),1,[],https://github.com/strongswan/strongswan/pull/119,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/119#issuecomment-446547961,"see https://www.openssl.org/docs/man1.1.0/crypto/ENGINE_finish.html
for details.
Without calls to ENGINE_finish() memory is leaked.","Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,120,2018-12-12T00:45:56Z,2018-12-14T08:12:40Z,2018-12-14T08:12:40Z,CLOSED,False,133,38,7,https://github.com/sunghew,swanctl: Add env var for swanctl conf dir,1,[],https://github.com/strongswan/strongswan/pull/120,https://github.com/sunghew,1,https://github.com/strongswan/strongswan/pull/120,"Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.","Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,120,2018-12-12T00:45:56Z,2018-12-14T08:12:40Z,2018-12-14T08:12:40Z,CLOSED,False,133,38,7,https://github.com/sunghew,swanctl: Add env var for swanctl conf dir,1,[],https://github.com/strongswan/strongswan/pull/120,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/120#issuecomment-446544343,"Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.","This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd.

How so exactly?
Also, since the path to swanctl.conf is configurable for each command, we could maybe just make these paths relative to that file. I pushed something to that end to the gh120-swanctl-dir branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,120,2018-12-12T00:45:56Z,2018-12-14T08:12:40Z,2018-12-14T08:12:40Z,CLOSED,False,133,38,7,https://github.com/sunghew,swanctl: Add env var for swanctl conf dir,1,[],https://github.com/strongswan/strongswan/pull/120,https://github.com/sunghew,3,https://github.com/strongswan/strongswan/pull/120#issuecomment-446796793,"Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.",@tobiasbrunner thanks for the feedback. The commit you pushed looks good to me.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,120,2018-12-12T00:45:56Z,2018-12-14T08:12:40Z,2018-12-14T08:12:40Z,CLOSED,False,133,38,7,https://github.com/sunghew,swanctl: Add env var for swanctl conf dir,1,[],https://github.com/strongswan/strongswan/pull/120,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/120#issuecomment-446924210,"Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.","Thanks, I'll probably merge it soon. Would you mind responding to my question, I'm really interested in what problems you ran into during ""distribution"" of the binaries (was that just an issue because the binaries were incorrectly configured? or really something unavoidable?).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,120,2018-12-12T00:45:56Z,2018-12-14T08:12:40Z,2018-12-14T08:12:40Z,CLOSED,False,133,38,7,https://github.com/sunghew,swanctl: Add env var for swanctl conf dir,1,[],https://github.com/strongswan/strongswan/pull/120,https://github.com/sunghew,5,https://github.com/strongswan/strongswan/pull/120#issuecomment-447213407,"Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.","Ah, sorry. I compiled strongswan on some arbitrary path in my dev environment, and then I copied the binaries to some other machine. I ran charon-systemd, but then it would crash since it couldn't find the swanctl config files/directories. I didn't realize that the -f flag was nested under some of the swanctl commands, but that would have solved my problem. My issue was avoidable.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,120,2018-12-12T00:45:56Z,2018-12-14T08:12:40Z,2018-12-14T08:12:40Z,CLOSED,False,133,38,7,https://github.com/sunghew,swanctl: Add env var for swanctl conf dir,1,[],https://github.com/strongswan/strongswan/pull/120,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/120#issuecomment-447248774,"Currently, SWANCTLDIR is set at compile time. This hinders the distribution of any strongswan binary utilizing swanctl e.g charon-systemd. In contrast, STRONGSWAN_CONF, which holds the path to strongswan.conf, is set at runtime.
To fix this, this PR adds the environment variable SWANCTL_DIR to hold the path to the swanctl directory. This variable overrides SWANCTLDIR.","I see, thanks. Pushed the patch to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,121,2019-01-20T13:53:40Z,2019-01-21T10:54:40Z,2019-01-21T17:10:58Z,CLOSED,False,20,2,2,https://github.com/krinfels,libtpmtss: Read public key exponent instead of assuming its value.,1,[],https://github.com/strongswan/strongswan/pull/121,https://github.com/krinfels,1,https://github.com/strongswan/strongswan/pull/121,"Up to now it was assumed that the RSA public key exponent is equal to 2^16+1. Although this is probably true in the most if not all cases, it is not correct according to the TPM specification.
This patch fixes that by reading the exponent from an appropriate of the structure returned by TPM2_ReadPublic.
The above mentioned standard can be find here.","Up to now it was assumed that the RSA public key exponent is equal to 2^16+1. Although this is probably true in the most if not all cases, it is not correct according to the TPM specification.
This patch fixes that by reading the exponent from an appropriate of the structure returned by TPM2_ReadPublic.
The above mentioned standard can be find here.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,121,2019-01-20T13:53:40Z,2019-01-21T10:54:40Z,2019-01-21T17:10:58Z,CLOSED,False,20,2,2,https://github.com/krinfels,libtpmtss: Read public key exponent instead of assuming its value.,1,[],https://github.com/strongswan/strongswan/pull/121,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/121#issuecomment-456032424,"Up to now it was assumed that the RSA public key exponent is equal to 2^16+1. Although this is probably true in the most if not all cases, it is not correct according to the TPM specification.
This patch fixes that by reading the exponent from an appropriate of the structure returned by TPM2_ReadPublic.
The above mentioned standard can be find here.","Thanks, applied to master. Was this an issue in practice?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,121,2019-01-20T13:53:40Z,2019-01-21T10:54:40Z,2019-01-21T17:10:58Z,CLOSED,False,20,2,2,https://github.com/krinfels,libtpmtss: Read public key exponent instead of assuming its value.,1,[],https://github.com/strongswan/strongswan/pull/121,https://github.com/krinfels,3,https://github.com/strongswan/strongswan/pull/121#issuecomment-456143674,"Up to now it was assumed that the RSA public key exponent is equal to 2^16+1. Although this is probably true in the most if not all cases, it is not correct according to the TPM specification.
This patch fixes that by reading the exponent from an appropriate of the structure returned by TPM2_ReadPublic.
The above mentioned standard can be find here.","Was this an issue in practice?

No, I've found it while reading the source code.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/Links2004,1,https://github.com/strongswan/strongswan/pull/122,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/maroviher,2,https://github.com/strongswan/strongswan/pull/122#issuecomment-457657552,,"I would like to try your patch. What should I configure in my system? Should I create a virtual network interface manually befor I start a VPN connection? How to add that interface? iproute2? Should I pass an if_id of that virtual interface to {ipsec,strongswan}.conf?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/Links2004,3,https://github.com/strongswan/strongswan/pull/122#issuecomment-458020300,,"Hi,
i currently use:
export IF_NAME=xfrm42
./ip link add xfrm42 type xfrm dev eth0 if_id 42
./ip link set ""${IF_NAME}"" up
./ip addr add ""192.168.234.2"" dev ""${IF_NAME}"" 
./ip route add ""192.168.234.0/24"" dev ""${IF_NAME}"" 

sysctl -w ""net.ipv4.ip_forward=1""

to create the interface.
Note:
you need a iproute2 with xfrm interface support.
https://www.spinics.net/lists/netdev/msg542275.html",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/maroviher,4,https://github.com/strongswan/strongswan/pull/122#issuecomment-458049645,,Strongswan should somwhow know that if_id 42. How to pass it to Strongswan ?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/Links2004,5,https://github.com/strongswan/strongswan/pull/122#issuecomment-458085614,,via the child parameter if_id in a swanctl config,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/maroviher,6,https://github.com/strongswan/strongswan/pull/122#issuecomment-458106729,,It would be nice if you attach the patch for iproute here in discussion and configuration files for strongswan in your test setup.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/maroviher,7,https://github.com/strongswan/strongswan/pull/122#issuecomment-458635171,,"./ip route add ""192.168.234.0/24"" dev ""${IF_NAME}""

strongswan installs routes automatically in to the table 220, should it be disabled?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/maroviher,8,https://github.com/strongswan/strongswan/pull/122#issuecomment-461515169,,"XFRMA_IF_ID attribute passed to kernel only in XFRM_MSG_NEWSA but not in XFRM_MSG_NEWPOLICY. The following condition in kernel is not met:
Missing similar changes in add_policy ?
Or is that the intention?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/122#issuecomment-463134236,,See my update on the strongSwan issue tracker.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,122,2019-01-21T13:44:52Z,2019-04-25T13:38:14Z,2019-04-25T13:38:14Z,CLOSED,False,42,1,9,https://github.com/Links2004,adding basic virtual XFRM interface support,1,[],https://github.com/strongswan/strongswan/pull/122,https://github.com/tobiasbrunner,10,https://github.com/strongswan/strongswan/pull/122#issuecomment-486676243,,Support for XFRM interfaces was merged with c334cd9.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,123,2019-01-21T21:31:10Z,2019-01-22T09:31:23Z,2019-01-22T18:39:59Z,CLOSED,False,1,0,1,https://github.com/jeremyvisser,Support reloading in strongswan.service,1,[],https://github.com/strongswan/strongswan/pull/123,https://github.com/jeremyvisser,1,https://github.com/strongswan/strongswan/pull/123,"strongSwan supports reloading config without disrupting connections via ipsec reload. Outside of strongSwan, the most popular service–agnostic way to reload a service is via systemctl reload <foo>.service.
By adding an ExecReload= line to the systemd unit file, we can trivially support this use case too.","strongSwan supports reloading config without disrupting connections via ipsec reload. Outside of strongSwan, the most popular service–agnostic way to reload a service is via systemctl reload <foo>.service.
By adding an ExecReload= line to the systemd unit file, we can trivially support this use case too.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,123,2019-01-21T21:31:10Z,2019-01-22T09:31:23Z,2019-01-22T18:39:59Z,CLOSED,False,1,0,1,https://github.com/jeremyvisser,Support reloading in strongswan.service,1,[],https://github.com/strongswan/strongswan/pull/123,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/123#issuecomment-456330691,"strongSwan supports reloading config without disrupting connections via ipsec reload. Outside of strongSwan, the most popular service–agnostic way to reload a service is via systemctl reload <foo>.service.
By adding an ExecReload= line to the systemd unit file, we can trivially support this use case too.","strongSwan supports reloading config without disrupting connections via ipsec reload.

Unfortunately, that's not true. You can read up on why using reload as compared to update might not be a good idea (and why updating configs via stroke interface might affect existing connections either way) on our issue tracker. And reload/update also do not affect the loaded secrets, so other commands might be necessary too (maybe including some that flush caches).
Also, this is the unit file that crudely integrates the legacy config backend (starter/stroke) into systemd. Except for the start/stop commands the ipsec script is still very much required to control the daemon. And by doing so users can opt for using either of the reloading commands (plus whatever else is require to update the config/credentials).
For proper integration into systemd use the charon-systemd daemon with the vici/swanctl config backend and the associated strongswan-swanctl systemd unit. This backend also does not suffer from the reloading issue mentioned above.
The bottom line is I'm not going to apply this patch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,123,2019-01-21T21:31:10Z,2019-01-22T09:31:23Z,2019-01-22T18:39:59Z,CLOSED,False,1,0,1,https://github.com/jeremyvisser,Support reloading in strongswan.service,1,[],https://github.com/strongswan/strongswan/pull/123,https://github.com/jeremyvisser,3,https://github.com/strongswan/strongswan/pull/123#issuecomment-456513746,"strongSwan supports reloading config without disrupting connections via ipsec reload. Outside of strongSwan, the most popular service–agnostic way to reload a service is via systemctl reload <foo>.service.
By adding an ExecReload= line to the systemd unit file, we can trivially support this use case too.","Thank you for the detailed explanation. It makes sense, and I learnt something new today.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,124,2019-01-29T14:34:58Z,2019-04-01T10:25:57Z,2019-04-01T10:25:57Z,CLOSED,False,76,29,4,https://github.com/gollub,ikev1: don't trigger updown events for redundant QMs,1,[],https://github.com/strongswan/strongswan/pull/124,https://github.com/gollub,1,https://github.com/strongswan/strongswan/pull/124,"With charon.delete_rekeyed=no redundant QMs might result
in an unenven number of updown calls. E.g. too many down
calls.
To solve this, the idea is update the state for redundant
Child SA to CHILD_REKEYED only if charon.delete_rekeyed is
enabled. This should also maintain the original behavior
as intended by commit a01eb5e, to avoid another updown
hook trigger.
Additionally a redundant QM check is required for incoming QM
delete requests, to avoid again an unintended updown call.
Fixes #2902.","With charon.delete_rekeyed=no redundant QMs might result
in an unenven number of updown calls. E.g. too many down
calls.
To solve this, the idea is update the state for redundant
Child SA to CHILD_REKEYED only if charon.delete_rekeyed is
enabled. This should also maintain the original behavior
as intended by commit a01eb5e, to avoid another updown
hook trigger.
Additionally a redundant QM check is required for incoming QM
delete requests, to avoid again an unintended updown call.
Fixes #2902.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,124,2019-01-29T14:34:58Z,2019-04-01T10:25:57Z,2019-04-01T10:25:57Z,CLOSED,False,76,29,4,https://github.com/gollub,ikev1: don't trigger updown events for redundant QMs,1,[],https://github.com/strongswan/strongswan/pull/124,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/124#issuecomment-478524126,"With charon.delete_rekeyed=no redundant QMs might result
in an unenven number of updown calls. E.g. too many down
calls.
To solve this, the idea is update the state for redundant
Child SA to CHILD_REKEYED only if charon.delete_rekeyed is
enabled. This should also maintain the original behavior
as intended by commit a01eb5e, to avoid another updown
hook trigger.
Additionally a redundant QM check is required for incoming QM
delete requests, to avoid again an unintended updown call.
Fixes #2902.","Discussed in 2902 of the issue tracker, fixed with 451c2e7.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,125,2019-02-05T13:50:52Z,2019-02-06T12:47:36Z,2019-02-06T12:47:36Z,CLOSED,False,4,0,1,https://github.com/codemonkeylabs-de,workaround for MySQL problem where mysql_stmt_fetch_column() fails to…,1,[],https://github.com/strongswan/strongswan/pull/125,https://github.com/codemonkeylabs-de,1,https://github.com/strongswan/strongswan/pull/125,"… retrieve fields from a set row previously fetched but not stored locally
Hello folks,
I ran into the following issue, for which this pull request would provide a solution. A simple attempt to use the sql plugin based on the example sql configuration provided under strongswan data.sql resulted in the following problem:
Feb  5 12:46:13 ip-172-24-1-179 charon: 17[LIB] resolving '?' failed: Temporary failure in name resolution

This is referring to the local and remote addresses configured in the ike_configs table. Then I checked the configured connections as pulled from the SQL database:
Connections:
           ?:  ?...?  IKEv2, dpddelay=120s
           ?:   local:  [%any] uses public key authentication
           ?:   remote: [80:00:00:b0:d6] uses any authentication
          @?:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear
Security Associations (0 up, 0 connecting):
  none

Those ? threw me off.. so I dug deeper.. I could see that the SQL query issued to the database:
mysql> SELECT c.id, c.certreq, c.force_encap, c.local, c.remote FROM ike_configs AS c;
+----+---------+-------------+---------+---------+
| id | certreq | force_encap | local   | remote  |
+----+---------+-------------+---------+---------+
|  1 |       1 |           0 | 0.0.0.0 | 0.0.0.0 |
+----+---------+-------------+---------+---------+

Looks fine for my test purposes.. so.. digging deeper, it appears that the problem was here:
src/libstrongswan/plugins/mysql/mysql_database.c:507:
                        {
                                char **value = va_arg(args, char**);
                                this->bind[i].buffer = malloc(this->length[i]+1);
                                this->bind[i].buffer_length = this->length[i];
                                *value = this->bind[i].buffer;
                                mysql_stmt_fetch_column(this->stmt, &this->bind[i], i, 0);
                                ((char*)this->bind[i].buffer)[this->length[i]] = '\0';
                                break;
                        }

I could see that the call to mysql_stmt_fetch_column didn't fill in the value of the string into the bound buffer.  After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option. Indeed, I did that and voila!:
         mac:  0.0.0.0...0.0.0.0  IKEv2, dpddelay=120s
         mac:   local:  [%any] uses public key authentication
         mac:   remote: [erick] uses any authentication
         mac:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear

The local and remote addresses are retrieved as configured in the SQL database.
So this pull request sets this option. The only thing I don't understand is why is this happening only to me and no one else has noticed.. the example I am trying is straight from the example set and my sql version is anything but obscure
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper
Thanks!","… retrieve fields from a set row previously fetched but not stored locally
Hello folks,
I ran into the following issue, for which this pull request would provide a solution. A simple attempt to use the sql plugin based on the example sql configuration provided under strongswan data.sql resulted in the following problem:
Feb  5 12:46:13 ip-172-24-1-179 charon: 17[LIB] resolving '?' failed: Temporary failure in name resolution

This is referring to the local and remote addresses configured in the ike_configs table. Then I checked the configured connections as pulled from the SQL database:
Connections:
           ?:  ?...?  IKEv2, dpddelay=120s
           ?:   local:  [%any] uses public key authentication
           ?:   remote: [80:00:00:b0:d6] uses any authentication
          @?:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear
Security Associations (0 up, 0 connecting):
  none

Those ? threw me off.. so I dug deeper.. I could see that the SQL query issued to the database:
mysql> SELECT c.id, c.certreq, c.force_encap, c.local, c.remote FROM ike_configs AS c;
+----+---------+-------------+---------+---------+
| id | certreq | force_encap | local   | remote  |
+----+---------+-------------+---------+---------+
|  1 |       1 |           0 | 0.0.0.0 | 0.0.0.0 |
+----+---------+-------------+---------+---------+

Looks fine for my test purposes.. so.. digging deeper, it appears that the problem was here:
src/libstrongswan/plugins/mysql/mysql_database.c:507:
                        {
                                char **value = va_arg(args, char**);
                                this->bind[i].buffer = malloc(this->length[i]+1);
                                this->bind[i].buffer_length = this->length[i];
                                *value = this->bind[i].buffer;
                                mysql_stmt_fetch_column(this->stmt, &this->bind[i], i, 0);
                                ((char*)this->bind[i].buffer)[this->length[i]] = '\0';
                                break;
                        }

I could see that the call to mysql_stmt_fetch_column didn't fill in the value of the string into the bound buffer.  After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option. Indeed, I did that and voila!:
         mac:  0.0.0.0...0.0.0.0  IKEv2, dpddelay=120s
         mac:   local:  [%any] uses public key authentication
         mac:   remote: [erick] uses any authentication
         mac:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear

The local and remote addresses are retrieved as configured in the SQL database.
So this pull request sets this option. The only thing I don't understand is why is this happening only to me and no one else has noticed.. the example I am trying is straight from the example set and my sql version is anything but obscure
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper
Thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,125,2019-02-05T13:50:52Z,2019-02-06T12:47:36Z,2019-02-06T12:47:36Z,CLOSED,False,4,0,1,https://github.com/codemonkeylabs-de,workaround for MySQL problem where mysql_stmt_fetch_column() fails to…,1,[],https://github.com/strongswan/strongswan/pull/125,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/125#issuecomment-460668651,"… retrieve fields from a set row previously fetched but not stored locally
Hello folks,
I ran into the following issue, for which this pull request would provide a solution. A simple attempt to use the sql plugin based on the example sql configuration provided under strongswan data.sql resulted in the following problem:
Feb  5 12:46:13 ip-172-24-1-179 charon: 17[LIB] resolving '?' failed: Temporary failure in name resolution

This is referring to the local and remote addresses configured in the ike_configs table. Then I checked the configured connections as pulled from the SQL database:
Connections:
           ?:  ?...?  IKEv2, dpddelay=120s
           ?:   local:  [%any] uses public key authentication
           ?:   remote: [80:00:00:b0:d6] uses any authentication
          @?:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear
Security Associations (0 up, 0 connecting):
  none

Those ? threw me off.. so I dug deeper.. I could see that the SQL query issued to the database:
mysql> SELECT c.id, c.certreq, c.force_encap, c.local, c.remote FROM ike_configs AS c;
+----+---------+-------------+---------+---------+
| id | certreq | force_encap | local   | remote  |
+----+---------+-------------+---------+---------+
|  1 |       1 |           0 | 0.0.0.0 | 0.0.0.0 |
+----+---------+-------------+---------+---------+

Looks fine for my test purposes.. so.. digging deeper, it appears that the problem was here:
src/libstrongswan/plugins/mysql/mysql_database.c:507:
                        {
                                char **value = va_arg(args, char**);
                                this->bind[i].buffer = malloc(this->length[i]+1);
                                this->bind[i].buffer_length = this->length[i];
                                *value = this->bind[i].buffer;
                                mysql_stmt_fetch_column(this->stmt, &this->bind[i], i, 0);
                                ((char*)this->bind[i].buffer)[this->length[i]] = '\0';
                                break;
                        }

I could see that the call to mysql_stmt_fetch_column didn't fill in the value of the string into the bound buffer.  After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option. Indeed, I did that and voila!:
         mac:  0.0.0.0...0.0.0.0  IKEv2, dpddelay=120s
         mac:   local:  [%any] uses public key authentication
         mac:   remote: [erick] uses any authentication
         mac:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear

The local and remote addresses are retrieved as configured in the SQL database.
So this pull request sets this option. The only thing I don't understand is why is this happening only to me and no one else has noticed.. the example I am trying is straight from the example set and my sql version is anything but obscure
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper
Thanks!","After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option.

Could you please document this and provide information about the root cause of the issue and why this would even be a stable workaround. If the plugin is currently doing something wrong, then please provide documentation and a fix for that, not some obscure workaround.

The only thing I don't understand is why is this happening only to me and no one else has noticed.

Exactly (although there is this, maybe it's related, Noel hasn't provided more information, though).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,125,2019-02-05T13:50:52Z,2019-02-06T12:47:36Z,2019-02-06T12:47:36Z,CLOSED,False,4,0,1,https://github.com/codemonkeylabs-de,workaround for MySQL problem where mysql_stmt_fetch_column() fails to…,1,[],https://github.com/strongswan/strongswan/pull/125,https://github.com/codemonkeylabs-de,3,https://github.com/strongswan/strongswan/pull/125#issuecomment-460693710,"… retrieve fields from a set row previously fetched but not stored locally
Hello folks,
I ran into the following issue, for which this pull request would provide a solution. A simple attempt to use the sql plugin based on the example sql configuration provided under strongswan data.sql resulted in the following problem:
Feb  5 12:46:13 ip-172-24-1-179 charon: 17[LIB] resolving '?' failed: Temporary failure in name resolution

This is referring to the local and remote addresses configured in the ike_configs table. Then I checked the configured connections as pulled from the SQL database:
Connections:
           ?:  ?...?  IKEv2, dpddelay=120s
           ?:   local:  [%any] uses public key authentication
           ?:   remote: [80:00:00:b0:d6] uses any authentication
          @?:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear
Security Associations (0 up, 0 connecting):
  none

Those ? threw me off.. so I dug deeper.. I could see that the SQL query issued to the database:
mysql> SELECT c.id, c.certreq, c.force_encap, c.local, c.remote FROM ike_configs AS c;
+----+---------+-------------+---------+---------+
| id | certreq | force_encap | local   | remote  |
+----+---------+-------------+---------+---------+
|  1 |       1 |           0 | 0.0.0.0 | 0.0.0.0 |
+----+---------+-------------+---------+---------+

Looks fine for my test purposes.. so.. digging deeper, it appears that the problem was here:
src/libstrongswan/plugins/mysql/mysql_database.c:507:
                        {
                                char **value = va_arg(args, char**);
                                this->bind[i].buffer = malloc(this->length[i]+1);
                                this->bind[i].buffer_length = this->length[i];
                                *value = this->bind[i].buffer;
                                mysql_stmt_fetch_column(this->stmt, &this->bind[i], i, 0);
                                ((char*)this->bind[i].buffer)[this->length[i]] = '\0';
                                break;
                        }

I could see that the call to mysql_stmt_fetch_column didn't fill in the value of the string into the bound buffer.  After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option. Indeed, I did that and voila!:
         mac:  0.0.0.0...0.0.0.0  IKEv2, dpddelay=120s
         mac:   local:  [%any] uses public key authentication
         mac:   remote: [erick] uses any authentication
         mac:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear

The local and remote addresses are retrieved as configured in the SQL database.
So this pull request sets this option. The only thing I don't understand is why is this happening only to me and no one else has noticed.. the example I am trying is straight from the example set and my sql version is anything but obscure
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper
Thanks!","Could you please document this and provide information about the root cause of the issue and why this would even be a stable workaround.
If the plugin is currently doing something wrong, then please provide documentation and a fix for that, not some obscure workaround.

Well, here is some background on the issue which I appear to be running into:
https://jira.mariadb.org/browse/CONC-281?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel&showAll=true
I verified that prefetching all rows ( with mysql_stmt_store_result() ) locally after binding the buffers but before the call above (as described in the issue I just linked above) also eliminates the problem. This however is IMHO not the right way to solve it since fetching the rows one at a time as needed by the enumerator is not only more elegant but also more efficient in the case not all entries are needed etc. Hence I opted for the ""obscure"" workaround, which isn't all that wild actually. As the name implies it simply instructs the library to not report this error, which the library is erroneously reporting, allowing for the fetch_column operation to fill the buffer and all is afterwards as it should be.


The only thing I don't understand is why is this happening only to me and no one else has noticed.

Exactly (although there is this, maybe it's related, Noel hasn't provided more information, though).

Well, it probably depends on which version of MySQL one has installed I dare to speculate. Fact remains that some users of the strongswan sql plugin will install a version with this ""quirk"" and the plugin simply will not work at all.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,125,2019-02-05T13:50:52Z,2019-02-06T12:47:36Z,2019-02-06T12:47:36Z,CLOSED,False,4,0,1,https://github.com/codemonkeylabs-de,workaround for MySQL problem where mysql_stmt_fetch_column() fails to…,1,[],https://github.com/strongswan/strongswan/pull/125,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/125#issuecomment-461010212,"… retrieve fields from a set row previously fetched but not stored locally
Hello folks,
I ran into the following issue, for which this pull request would provide a solution. A simple attempt to use the sql plugin based on the example sql configuration provided under strongswan data.sql resulted in the following problem:
Feb  5 12:46:13 ip-172-24-1-179 charon: 17[LIB] resolving '?' failed: Temporary failure in name resolution

This is referring to the local and remote addresses configured in the ike_configs table. Then I checked the configured connections as pulled from the SQL database:
Connections:
           ?:  ?...?  IKEv2, dpddelay=120s
           ?:   local:  [%any] uses public key authentication
           ?:   remote: [80:00:00:b0:d6] uses any authentication
          @?:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear
Security Associations (0 up, 0 connecting):
  none

Those ? threw me off.. so I dug deeper.. I could see that the SQL query issued to the database:
mysql> SELECT c.id, c.certreq, c.force_encap, c.local, c.remote FROM ike_configs AS c;
+----+---------+-------------+---------+---------+
| id | certreq | force_encap | local   | remote  |
+----+---------+-------------+---------+---------+
|  1 |       1 |           0 | 0.0.0.0 | 0.0.0.0 |
+----+---------+-------------+---------+---------+

Looks fine for my test purposes.. so.. digging deeper, it appears that the problem was here:
src/libstrongswan/plugins/mysql/mysql_database.c:507:
                        {
                                char **value = va_arg(args, char**);
                                this->bind[i].buffer = malloc(this->length[i]+1);
                                this->bind[i].buffer_length = this->length[i];
                                *value = this->bind[i].buffer;
                                mysql_stmt_fetch_column(this->stmt, &this->bind[i], i, 0);
                                ((char*)this->bind[i].buffer)[this->length[i]] = '\0';
                                break;
                        }

I could see that the call to mysql_stmt_fetch_column didn't fill in the value of the string into the bound buffer.  After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option. Indeed, I did that and voila!:
         mac:  0.0.0.0...0.0.0.0  IKEv2, dpddelay=120s
         mac:   local:  [%any] uses public key authentication
         mac:   remote: [erick] uses any authentication
         mac:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear

The local and remote addresses are retrieved as configured in the SQL database.
So this pull request sets this option. The only thing I don't understand is why is this happening only to me and no one else has noticed.. the example I am trying is straight from the example set and my sql version is anything but obscure
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper
Thanks!","I'm reluctant to add a patch that suppresses some errors just because it somehow works around this issue (why doing so magically fixes the problem in the first place seems strange, the documentation of the option does not indicate anything to that effect). The bug report is also officially closed, so not sure what the official stance on this is by the devs, but it seems to be a regression in that library and not the plugin.

This however is IMHO not the right way to solve it since fetching the rows one at a time as needed by the enumerator is not only more elegant but also more efficient in the case not all entries are needed etc.

Agreed.

Well, it probably depends on which version of MySQL one has installed I dare to speculate. Fact remains that some users of the strongswan sql plugin will install a version with this ""quirk"" and the plugin simply will not work at all.

Exactly, so please ask the maintainers of the distribution you are using to perhaps patch strongSwan packages if they ship MySQL/MariaDB client libraries that have this issue. It does not seem to be something we should ""fix"" upstream with such a crude workaround.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,125,2019-02-05T13:50:52Z,2019-02-06T12:47:36Z,2019-02-06T12:47:36Z,CLOSED,False,4,0,1,https://github.com/codemonkeylabs-de,workaround for MySQL problem where mysql_stmt_fetch_column() fails to…,1,[],https://github.com/strongswan/strongswan/pull/125,https://github.com/codemonkeylabs-de,5,https://github.com/strongswan/strongswan/pull/125#issuecomment-461011031,"… retrieve fields from a set row previously fetched but not stored locally
Hello folks,
I ran into the following issue, for which this pull request would provide a solution. A simple attempt to use the sql plugin based on the example sql configuration provided under strongswan data.sql resulted in the following problem:
Feb  5 12:46:13 ip-172-24-1-179 charon: 17[LIB] resolving '?' failed: Temporary failure in name resolution

This is referring to the local and remote addresses configured in the ike_configs table. Then I checked the configured connections as pulled from the SQL database:
Connections:
           ?:  ?...?  IKEv2, dpddelay=120s
           ?:   local:  [%any] uses public key authentication
           ?:   remote: [80:00:00:b0:d6] uses any authentication
          @?:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear
Security Associations (0 up, 0 connecting):
  none

Those ? threw me off.. so I dug deeper.. I could see that the SQL query issued to the database:
mysql> SELECT c.id, c.certreq, c.force_encap, c.local, c.remote FROM ike_configs AS c;
+----+---------+-------------+---------+---------+
| id | certreq | force_encap | local   | remote  |
+----+---------+-------------+---------+---------+
|  1 |       1 |           0 | 0.0.0.0 | 0.0.0.0 |
+----+---------+-------------+---------+---------+

Looks fine for my test purposes.. so.. digging deeper, it appears that the problem was here:
src/libstrongswan/plugins/mysql/mysql_database.c:507:
                        {
                                char **value = va_arg(args, char**);
                                this->bind[i].buffer = malloc(this->length[i]+1);
                                this->bind[i].buffer_length = this->length[i];
                                *value = this->bind[i].buffer;
                                mysql_stmt_fetch_column(this->stmt, &this->bind[i], i, 0);
                                ((char*)this->bind[i].buffer)[this->length[i]] = '\0';
                                break;
                        }

I could see that the call to mysql_stmt_fetch_column didn't fill in the value of the string into the bound buffer.  After some googling, it appears that I ran into a MySQL problem where unless one fetches the entire result set into local memory with mysql_stmt_store_result() after the call to mysql_stmt_bind() , the above mentioned function will fail to fill in the data as expected. One workaround appears to be turning off the MYSQL_REPORT_DATA_TRUNCATION connection option. Indeed, I did that and voila!:
         mac:  0.0.0.0...0.0.0.0  IKEv2, dpddelay=120s
         mac:   local:  [%any] uses public key authentication
         mac:   remote: [erick] uses any authentication
         mac:   child:  10.1.0.0/16 === dynamic TUNNEL, dpdaction=clear

The local and remote addresses are retrieved as configured in the SQL database.
So this pull request sets this option. The only thing I don't understand is why is this happening only to me and no one else has noticed.. the example I am trying is straight from the example set and my sql version is anything but obscure
mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper
Thanks!","Fair enough. Closing the request then.
Cheers",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,126,2019-02-07T16:10:53Z,2019-02-28T16:32:31Z,2019-02-28T16:32:31Z,CLOSED,False,179,96,1,https://github.com/krinfels,Replace the CA in load_tester.,1,[],https://github.com/strongswan/strongswan/pull/126,https://github.com/krinfels,1,https://github.com/strongswan/strongswan/pull/126,"The previous one expired in December.
Also increase its size from 1024 to 2048 bits.
It was tested by simply running the plugin.","The previous one expired in December.
Also increase its size from 1024 to 2048 bits.
It was tested by simply running the plugin.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,126,2019-02-07T16:10:53Z,2019-02-28T16:32:31Z,2019-02-28T16:32:31Z,CLOSED,False,179,96,1,https://github.com/krinfels,Replace the CA in load_tester.,1,[],https://github.com/strongswan/strongswan/pull/126,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/126#issuecomment-461735379,"The previous one expired in December.
Also increase its size from 1024 to 2048 bits.
It was tested by simply running the plugin.","Thanks. I updated the CA certificate in the load-tester-cert branch, but kept the key (it's 1024 bits for performance reasons).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,127,2019-02-19T13:09:10Z,2019-02-19T16:04:12Z,2019-02-19T16:04:17Z,CLOSED,False,2,2,1,https://github.com/sladkani,vici: clear_start_action: Fix wrong arguments order for terminate_ike(),1,[],https://github.com/strongswan/strongswan/pull/127,https://github.com/sladkani,1,https://github.com/strongswan/strongswan/pull/127,"In 7b72909 (""controller: Add option to force destruction of an IKE_SA"")
the 'force' option was added as 3rd parameter to controller_t::terminate_ike.
However in vici's 'clear_start_action', the argument was incorrectly
placed as the 2nd parameter - constantly sending 0 (FALSE) as the
'unique_id' to terminate, rendering calls to 'handle_start_actions'
having undo=TRUE being unable to terminate the relevant conn.
For example, this is log of such a bogus 'unload-conn':
strongswan[498]: 13[CFG] vici client 96 requests: unload-conn
strongswan[498]: 13[CFG] closing IKE_SA #9
strongswan[498]: 13[IKE] unable to terminate IKE_SA: ID 0 not found
strongswan[498]: 09[CFG] vici client 96 disconnected
here, the unloaded conn's IKE id was 9, alas 'terminate_ike_execute'
reports failure to terminate ""ID 0"".
Fix by passing 'id, FALSE' arguments in the correct order.
Fixes: 7b72909 (""controller: Add option to force destruction of an IKE_SA"")
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","In 7b72909 (""controller: Add option to force destruction of an IKE_SA"")
the 'force' option was added as 3rd parameter to controller_t::terminate_ike.
However in vici's 'clear_start_action', the argument was incorrectly
placed as the 2nd parameter - constantly sending 0 (FALSE) as the
'unique_id' to terminate, rendering calls to 'handle_start_actions'
having undo=TRUE being unable to terminate the relevant conn.
For example, this is log of such a bogus 'unload-conn':
strongswan[498]: 13[CFG] vici client 96 requests: unload-conn
strongswan[498]: 13[CFG] closing IKE_SA #9
strongswan[498]: 13[IKE] unable to terminate IKE_SA: ID 0 not found
strongswan[498]: 09[CFG] vici client 96 disconnected
here, the unloaded conn's IKE id was 9, alas 'terminate_ike_execute'
reports failure to terminate ""ID 0"".
Fix by passing 'id, FALSE' arguments in the correct order.
Fixes: 7b72909 (""controller: Add option to force destruction of an IKE_SA"")
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,127,2019-02-19T13:09:10Z,2019-02-19T16:04:12Z,2019-02-19T16:04:17Z,CLOSED,False,2,2,1,https://github.com/sladkani,vici: clear_start_action: Fix wrong arguments order for terminate_ike(),1,[],https://github.com/strongswan/strongswan/pull/127,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/127#issuecomment-465193945,"In 7b72909 (""controller: Add option to force destruction of an IKE_SA"")
the 'force' option was added as 3rd parameter to controller_t::terminate_ike.
However in vici's 'clear_start_action', the argument was incorrectly
placed as the 2nd parameter - constantly sending 0 (FALSE) as the
'unique_id' to terminate, rendering calls to 'handle_start_actions'
having undo=TRUE being unable to terminate the relevant conn.
For example, this is log of such a bogus 'unload-conn':
strongswan[498]: 13[CFG] vici client 96 requests: unload-conn
strongswan[498]: 13[CFG] closing IKE_SA #9
strongswan[498]: 13[IKE] unable to terminate IKE_SA: ID 0 not found
strongswan[498]: 09[CFG] vici client 96 disconnected
here, the unloaded conn's IKE id was 9, alas 'terminate_ike_execute'
reports failure to terminate ""ID 0"".
Fix by passing 'id, FALSE' arguments in the correct order.
Fixes: 7b72909 (""controller: Add option to force destruction of an IKE_SA"")
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,128,2019-02-22T17:49:27Z,2019-03-14T12:57:02Z,2019-03-14T12:57:02Z,CLOSED,False,1,1,1,https://github.com/ZabelTech,sqlplugin fails on unspecified Remote Id,1,[],https://github.com/strongswan/strongswan/pull/128,https://github.com/ZabelTech,1,https://github.com/strongswan/strongswan/pull/128,"Hi,
I'm facing a problem while using the sql plugin.
In my case strongswan acts as a responder and should fetch a pre-shared-key from MySQL.
The problem arises if the sender lets the Remote Identity unspecified in IKE AUTH.
i.e
 charon: 07[CFG] looking for peer configs matching 192.168.26.55[%any]...172.24.0.91[172.24.0.91]

the sql plugin issues then a query like this:
SELECT s.type, s.data FROM shared_secrets AS s JOIN shared_secret_identity AS sm ON s.id = sm.shared_secret JOIN identities AS m ON sm.identity = m.id JOIN shared_secret_identity AS so ON s.id = so.shared_secret JOIN identities AS o ON so.identity = o.id WHERE m.type = 0 AND m.data = NULL AND o.type = 1 AND o.data = '�\0[' AND (0 OR s.type = 1) 
note the m.data = NULL here, which prevents the query from returning the psk.
Subsequently the authentication fails
charon: 13[IKE] no shared key found for '%any' - '172.24.0.91'

This patch takes advantage of the IFNULL function which is available in both SQLite and MySQL.
I suspect that there are different situations that might fail in the same way and there might be better ways to fix this than this.
However since I'm fairly new to the strongswan codebase, I'm thinking that it's better to have someone with more insight looking over this early.","Hi,
I'm facing a problem while using the sql plugin.
In my case strongswan acts as a responder and should fetch a pre-shared-key from MySQL.
The problem arises if the sender lets the Remote Identity unspecified in IKE AUTH.
i.e
 charon: 07[CFG] looking for peer configs matching 192.168.26.55[%any]...172.24.0.91[172.24.0.91]

the sql plugin issues then a query like this:
SELECT s.type, s.data FROM shared_secrets AS s JOIN shared_secret_identity AS sm ON s.id = sm.shared_secret JOIN identities AS m ON sm.identity = m.id JOIN shared_secret_identity AS so ON s.id = so.shared_secret JOIN identities AS o ON so.identity = o.id WHERE m.type = 0 AND m.data = NULL AND o.type = 1 AND o.data = '�\0[' AND (0 OR s.type = 1) 
note the m.data = NULL here, which prevents the query from returning the psk.
Subsequently the authentication fails
charon: 13[IKE] no shared key found for '%any' - '172.24.0.91'

This patch takes advantage of the IFNULL function which is available in both SQLite and MySQL.
I suspect that there are different situations that might fail in the same way and there might be better ways to fix this than this.
However since I'm fairly new to the strongswan codebase, I'm thinking that it's better to have someone with more insight looking over this early.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,128,2019-02-22T17:49:27Z,2019-03-14T12:57:02Z,2019-03-14T12:57:02Z,CLOSED,False,1,1,1,https://github.com/ZabelTech,sqlplugin fails on unspecified Remote Id,1,[],https://github.com/strongswan/strongswan/pull/128,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/128#issuecomment-466944700,"Hi,
I'm facing a problem while using the sql plugin.
In my case strongswan acts as a responder and should fetch a pre-shared-key from MySQL.
The problem arises if the sender lets the Remote Identity unspecified in IKE AUTH.
i.e
 charon: 07[CFG] looking for peer configs matching 192.168.26.55[%any]...172.24.0.91[172.24.0.91]

the sql plugin issues then a query like this:
SELECT s.type, s.data FROM shared_secrets AS s JOIN shared_secret_identity AS sm ON s.id = sm.shared_secret JOIN identities AS m ON sm.identity = m.id JOIN shared_secret_identity AS so ON s.id = so.shared_secret JOIN identities AS o ON so.identity = o.id WHERE m.type = 0 AND m.data = NULL AND o.type = 1 AND o.data = '�\0[' AND (0 OR s.type = 1) 
note the m.data = NULL here, which prevents the query from returning the psk.
Subsequently the authentication fails
charon: 13[IKE] no shared key found for '%any' - '172.24.0.91'

This patch takes advantage of the IFNULL function which is available in both SQLite and MySQL.
I suspect that there are different situations that might fail in the same way and there might be better ways to fix this than this.
However since I'm fairly new to the strongswan codebase, I'm thinking that it's better to have someone with more insight looking over this early.","This is only a problem if you are using the plugin with IKEv1 (which should be avoided anyway if possible). With IKEv2 both identities are well-defined when looking up secrets.
I'm not sure about the fix. First, %any is actually stored as type 0 without an encoding in the database, not as ""%any"" (at least the id2sql script does it like that). So the problem is mainly that the non-existing encoding is mapped to NULL and not an empty string.
However, I don't think matching that identity in the first place would be ideal (%any essentially means match anything, not just exactly that). So I'd rather change the existing identity checks in create_shared_enumerator() to not only check for NULL but also whether the identity type is actually ID_ANY (similar to how it's done in the other enumerators in this file). I pushed something like that to the gh128-sql-shared-any branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,129,2019-03-04T03:33:14Z,2019-03-04T08:40:06Z,2019-03-04T08:40:14Z,CLOSED,False,1,1,1,https://github.com/carlgsmith,Remove temporary DROP policy using same parameters as when added.,1,[],https://github.com/strongswan/strongswan/pull/129,https://github.com/carlgsmith,1,https://github.com/strongswan/strongswan/pull/129,"A temporary DROP policy is added to avoid traffic leak
while the SA is being updated. It is added with
manual_prio set but when the temporary policy is removed
it is removed with manual_prio parameter set to 0.
The call to del_policies_outbound does not match the original
policy and we end up with an ever increasing refcount.
If we try to manually remove the policy, it is not removed
due to the positive refcount. Then new SA requests fail with
""unable to install policy out for reqid 1618,
the same policy for reqid 1528 exists""","A temporary DROP policy is added to avoid traffic leak
while the SA is being updated. It is added with
manual_prio set but when the temporary policy is removed
it is removed with manual_prio parameter set to 0.
The call to del_policies_outbound does not match the original
policy and we end up with an ever increasing refcount.
If we try to manually remove the policy, it is not removed
due to the positive refcount. Then new SA requests fail with
""unable to install policy out for reqid 1618,
the same policy for reqid 1528 exists""",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,129,2019-03-04T03:33:14Z,2019-03-04T08:40:06Z,2019-03-04T08:40:14Z,CLOSED,False,1,1,1,https://github.com/carlgsmith,Remove temporary DROP policy using same parameters as when added.,1,[],https://github.com/strongswan/strongswan/pull/129,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/129#issuecomment-469165001,"A temporary DROP policy is added to avoid traffic leak
while the SA is being updated. It is added with
manual_prio set but when the temporary policy is removed
it is removed with manual_prio parameter set to 0.
The call to del_policies_outbound does not match the original
policy and we end up with an ever increasing refcount.
If we try to manually remove the policy, it is not removed
due to the positive refcount. Then new SA requests fail with
""unable to install policy out for reqid 1618,
the same policy for reqid 1528 exists""","Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,130,2019-03-14T13:37:16Z,,2019-03-19T09:23:19Z,OPEN,False,23,0,2,https://github.com/selsky,dhcp: Add release_on_delete parameter to allow not releasing an IP ad…,1,[],https://github.com/strongswan/strongswan/pull/130,https://github.com/selsky,1,https://github.com/strongswan/strongswan/pull/130,"…dress
Some DHCP servers will always grant us a different address after a DHCPRELEASE, and we may prefer to allow the server to expire leases (giving the client a good chance to receive the same address on next connection) rather than generating a DHCPRELEASE each time the IKE_SA goes down.","…dress
Some DHCP servers will always grant us a different address after a DHCPRELEASE, and we may prefer to allow the server to expire leases (giving the client a good chance to receive the same address on next connection) rather than generating a DHCPRELEASE each time the IKE_SA goes down.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,130,2019-03-14T13:37:16Z,,2019-03-19T09:23:19Z,OPEN,False,23,0,2,https://github.com/selsky,dhcp: Add release_on_delete parameter to allow not releasing an IP ad…,1,[],https://github.com/strongswan/strongswan/pull/130,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/130#issuecomment-473961086,"…dress
Some DHCP servers will always grant us a different address after a DHCPRELEASE, and we may prefer to allow the server to expire leases (giving the client a good chance to receive the same address on next connection) rather than generating a DHCPRELEASE each time the IKE_SA goes down.",Is there an actual use case for this (if you want the same IP assigned to the client you could just use static leases) or is it more a workaround for the make-before-break reauthentication issue (IKE_SAs created overlapping by the same peer causing a DHCPRELEASE when the old IKE_SA is terminated while the new SA is still actually in use).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,130,2019-03-14T13:37:16Z,,2019-03-19T09:23:19Z,OPEN,False,23,0,2,https://github.com/selsky,dhcp: Add release_on_delete parameter to allow not releasing an IP ad…,1,[],https://github.com/strongswan/strongswan/pull/130,https://github.com/selsky,3,https://github.com/strongswan/strongswan/pull/130#issuecomment-474174156,"…dress
Some DHCP servers will always grant us a different address after a DHCPRELEASE, and we may prefer to allow the server to expire leases (giving the client a good chance to receive the same address on next connection) rather than generating a DHCPRELEASE each time the IKE_SA goes down.","Our use case is:
A user closes their laptop in one conference room, goes to another floor and reopens their laptop.  Their IPsec tunnel has closed.  We want their ssh session that was inside the tunnel to resume when they reopen the laptop and the tunnel is re-established.  In order for that to happen, they need to get the same IP address inside the tunnel, so we need to avoid the DHCPRELEASE being sent.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,130,2019-03-14T13:37:16Z,,2019-03-19T09:23:19Z,OPEN,False,23,0,2,https://github.com/selsky,dhcp: Add release_on_delete parameter to allow not releasing an IP ad…,1,[],https://github.com/strongswan/strongswan/pull/130,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/130#issuecomment-474261709,"…dress
Some DHCP servers will always grant us a different address after a DHCPRELEASE, and we may prefer to allow the server to expire leases (giving the client a good chance to receive the same address on next connection) rather than generating a DHCPRELEASE each time the IKE_SA goes down.",That's what MOBIKE is for (no need to close the IKE/IPsec SA).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,131,2019-03-25T20:39:51Z,2019-03-27T08:39:17Z,2019-03-27T08:39:17Z,CLOSED,False,5,0,1,https://github.com/srsmiraato,trap-manager: Wait for install to finish before uninstalling,1,[],https://github.com/strongswan/strongswan/pull/131,https://github.com/srsmiraato,1,https://github.com/strongswan/strongswan/pull/131,"There was a race condition between install() and uninstall()
where one thread was in the process of installing a trap
entry, and the child_sa destroyed previously, while the other
thread was uninstalling the same trap entry and ended up
trying to destroy the already destroyed child_sa, resulting
in a segmentation fault in the destroy_entry() function.
The uninstall() function needs to wait until all the threads
are done with the installing before proceeding to uninstall
a trap entry.","There was a race condition between install() and uninstall()
where one thread was in the process of installing a trap
entry, and the child_sa destroyed previously, while the other
thread was uninstalling the same trap entry and ended up
trying to destroy the already destroyed child_sa, resulting
in a segmentation fault in the destroy_entry() function.
The uninstall() function needs to wait until all the threads
are done with the installing before proceeding to uninstall
a trap entry.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,131,2019-03-25T20:39:51Z,2019-03-27T08:39:17Z,2019-03-27T08:39:17Z,CLOSED,False,5,0,1,https://github.com/srsmiraato,trap-manager: Wait for install to finish before uninstalling,1,[],https://github.com/strongswan/strongswan/pull/131,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/131#issuecomment-476538623,"There was a race condition between install() and uninstall()
where one thread was in the process of installing a trap
entry, and the child_sa destroyed previously, while the other
thread was uninstalling the same trap entry and ended up
trying to destroy the already destroyed child_sa, resulting
in a segmentation fault in the destroy_entry() function.
The uninstall() function needs to wait until all the threads
are done with the installing before proceeding to uninstall
a trap entry.",Please create a separate pull request for the configure option.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,131,2019-03-25T20:39:51Z,2019-03-27T08:39:17Z,2019-03-27T08:39:17Z,CLOSED,False,5,0,1,https://github.com/srsmiraato,trap-manager: Wait for install to finish before uninstalling,1,[],https://github.com/strongswan/strongswan/pull/131,https://github.com/srsmiraato,3,https://github.com/strongswan/strongswan/pull/131#issuecomment-476819230,"There was a race condition between install() and uninstall()
where one thread was in the process of installing a trap
entry, and the child_sa destroyed previously, while the other
thread was uninstalling the same trap entry and ended up
trying to destroy the already destroyed child_sa, resulting
in a segmentation fault in the destroy_entry() function.
The uninstall() function needs to wait until all the threads
are done with the installing before proceeding to uninstall
a trap entry.",Removed the configure option commit and created a separate pull request for it.  Thanks.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,131,2019-03-25T20:39:51Z,2019-03-27T08:39:17Z,2019-03-27T08:39:17Z,CLOSED,False,5,0,1,https://github.com/srsmiraato,trap-manager: Wait for install to finish before uninstalling,1,[],https://github.com/strongswan/strongswan/pull/131,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/131#issuecomment-477038746,"There was a race condition between install() and uninstall()
where one thread was in the process of installing a trap
entry, and the child_sa destroyed previously, while the other
thread was uninstalling the same trap entry and ended up
trying to destroy the already destroyed child_sa, resulting
in a segmentation fault in the destroy_entry() function.
The uninstall() function needs to wait until all the threads
are done with the installing before proceeding to uninstall
a trap entry.","Applied to master, thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,132,2019-03-26T19:47:20Z,2019-05-28T08:55:27Z,2019-05-28T08:55:33Z,CLOSED,False,55,5,5,https://github.com/srsmiraato,configure: Add config option for external signal handling,2,[],https://github.com/strongswan/strongswan/pull/132,https://github.com/srsmiraato,1,https://github.com/strongswan/strongswan/pull/132,"By default, charon internally handles the SIGSEGV,
SIGILL, and SIGBUS signals raised by threads
(segv_handler). Make this configurable so that the
signal handling can be done either internally or
externally.","By default, charon internally handles the SIGSEGV,
SIGILL, and SIGBUS signals raised by threads
(segv_handler). Make this configurable so that the
signal handling can be done either internally or
externally.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,132,2019-03-26T19:47:20Z,2019-05-28T08:55:27Z,2019-05-28T08:55:33Z,CLOSED,False,55,5,5,https://github.com/srsmiraato,configure: Add config option for external signal handling,2,[],https://github.com/strongswan/strongswan/pull/132,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/132#issuecomment-477037391,"By default, charon internally handles the SIGSEGV,
SIGILL, and SIGBUS signals raised by threads
(segv_handler). Make this configurable so that the
signal handling can be done either internally or
externally.","Several issues with this:

Could you explain more about why this would be useful or how you use it exactly.
I wonder if it really has to be a configure option or if this couldn't just be a compile option (i.e. just add something like -DDISABLE_SIGNAL_HANDLER to the CFLAGS to disable the internal signal handler for fatal signals), because I really don't see many users enabling this.
A lot more than just the sigaction() calls could be part of ifdefs (including the definition of segv_handler).
If at all, it should probably be added to all charon derivatives (e.g. charon-systemd or charon-nm).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,132,2019-03-26T19:47:20Z,2019-05-28T08:55:27Z,2019-05-28T08:55:33Z,CLOSED,False,55,5,5,https://github.com/srsmiraato,configure: Add config option for external signal handling,2,[],https://github.com/strongswan/strongswan/pull/132,https://github.com/srsmiraato,3,https://github.com/strongswan/strongswan/pull/132#issuecomment-477745553,"By default, charon internally handles the SIGSEGV,
SIGILL, and SIGBUS signals raised by threads
(segv_handler). Make this configurable so that the
signal handling can be done either internally or
externally.","Hi Tobias,
Our system has its own core file handler and we'd like our system to handle the core file of strongswan.  Without this change, one of the threads in the stacktrace would point to the segv_handler() function when a segmentation fault happens.  Unfortunately, we couldn't get any other useful information in the stacktrace.  By removing this internal handling, we were able to get more useful information from the stacktrace during the segmentation fault and allowed us to pinpoint the cause of the problem.
I will get back to you regarding your next 3 concerns, as I will try them and test it on our system.
Thanks for the feedback.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,132,2019-03-26T19:47:20Z,2019-05-28T08:55:27Z,2019-05-28T08:55:33Z,CLOSED,False,55,5,5,https://github.com/srsmiraato,configure: Add config option for external signal handling,2,[],https://github.com/strongswan/strongswan/pull/132,https://github.com/srsmiraato,4,https://github.com/strongswan/strongswan/pull/132#issuecomment-496325464,"By default, charon internally handles the SIGSEGV,
SIGILL, and SIGBUS signals raised by threads
(segv_handler). Make this configurable so that the
signal handling can be done either internally or
externally.","The new commit addresses the next 3 concerns.  I've changed it from configure option to compile option.  Charon derivatives affected are charon-nm, charon-cmd, charon-tkm and charon-systemd.
Thanks",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,132,2019-03-26T19:47:20Z,2019-05-28T08:55:27Z,2019-05-28T08:55:33Z,CLOSED,False,55,5,5,https://github.com/srsmiraato,configure: Add config option for external signal handling,2,[],https://github.com/strongswan/strongswan/pull/132,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/132#issuecomment-496427413,"By default, charon internally handles the SIGSEGV,
SIGILL, and SIGBUS signals raised by threads
(segv_handler). Make this configurable so that the
signal handling can be done either internally or
externally.","Looks good, thanks. Applied to master with some minor modifications.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/SparkiDev,1,https://github.com/strongswan/strongswan/pull/133,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/SparkiDev,2,https://github.com/strongswan/strongswan/pull/133#issuecomment-479744597,,"wolfSSL needs to be installed and configured with the following options:
C_EXTRA_FLAGS=""-DWOLFSSL_PUBLIC_MP"" --enable-keygen --enable-rsapss
Other algorithms not compiled by default can be enabled with:
--enable-aesccm
--enable-aesctr
--enable-des3
C_EXTRA_FLAGS=""-DWOLFSSL_DES_ECB""
--enable-ed25519
--enalbe-camellia
Sean",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/133#issuecomment-479788766,,"Thanks a lot, Sean.
I haven't looked at it in detail, but noticed the GPL headers. Would you consider (re-)submitting the plugin under the MIT X11 license (see Contributions on our wiki for details)?
And the two commits could be squashed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/SparkiDev,4,https://github.com/strongswan/strongswan/pull/133#issuecomment-479791630,,"Sure, I can change the license for you.
I read the Contributions page and it said it was fine for plugins to be GPL and other cryptographic plugins are also GPL so I stuck with that.
I’ll squash all the commits.
I would have liked to have a Curve25519 test but you don't optionally compile in tests.
So, I’ll leave the test out.

Sean
—
Sean Parkinson
sean@wolfssl.com
wolfSSL Inc
https://github.com/wolfssl
http://twitter.com/wolfSSL

…
 On 4 Apr 2019, at 5:46 pm, Tobias Brunner ***@***.***> wrote:

 Thanks a lot, Sean.

 I haven't looked at it in detail, but noticed the GPL headers. Would you consider (re-)submitting the plugin under the MIT X11 license (see Contributions <https://wiki.strongswan.org/projects/strongswan/wiki/Contributions> on our wiki for details)?

 And the two commits could be squashed.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#133 (comment)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ARJkXsV39XVmWDU-sYQH7QnpPUr4GC6tks5vda3ygaJpZM4cbiJK>.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/133#issuecomment-479798856,,"Sure, I can change the license for you.

Awesome, thanks.

I read the Contributions page and it said it was fine for plugins to be GPL and other cryptographic plugins are also GPL so I stuck with that.

Most were written by us, so we have all the rights anyway. But larger contributions e.g. in the openssl plugin were under the MIT X11 license as is, for instance, the complete botan plugin.

I would have liked to have a Curve25519 test but you don't optionally compile in tests.

There are test vectors for it in the test-vectors plugin (see here). Edit: Just noticed that these are the same you had in your test.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/SparkiDev,6,https://github.com/strongswan/strongswan/pull/133#issuecomment-480091275,,"The curve25519 test was based on the test vectors.
I didn’t want to keep turning off and on the configuration to run the test vectors it but it doesn’t matter.

I’ve updated the license to the version on the website.
Let me know if you have issues with installing/configuring wolfSSL.

Thanks,
Sean
—
Sean Parkinson
sean@wolfssl.com
wolfSSL Inc
https://github.com/wolfssl
http://twitter.com/wolfSSL

…
 On 4 Apr 2019, at 6:19 pm, Tobias Brunner ***@***.***> wrote:

 Sure, I can change the license for you.

 Awesome, thanks.

 I read the Contributions page and it said it was fine for plugins to be GPL and other cryptographic plugins are also GPL so I stuck with that.

 Most were written by us, so we have all the rights anyway. But larger contributions e.g. in the openssl plugin were under the MIT X11 license as is, for instance, the complete botan plugin.

 I would have liked to have a Curve25519 test but you don't optionally compile in tests.

 There are test vectors for it in the test-vectors plugin (see here <https://github.com/strongswan/strongswan/blob/f43302dc10020b721ad07aa7aeaf5161e95b70d7/src/libstrongswan/plugins/test_vectors/test_vectors/curve25519.c>).

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#133 (comment)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ARJkXl_Z3ju05eE3I9aEf_0lLNABw2fQks5vdbWEgaJpZM4cbiJK>.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/133#issuecomment-481238816,,"I didn’t want to keep turning off and on the configuration to run the test vectors it but it doesn’t matter.

There are environment variables that control which plugins the test runners load or which test suites are in-/excluded.
This looks pretty good, thanks again. I pushed your commit and some additional changes to the gh133-wolfssl branch in our repository (major issues were the Ed25519 public key, calculating p and q for RSA and the generation of fingerprints for keys). Let me know if you have feedback on those modifications (I might add some more e.g. remove all the unnecessary public interfaces, similar to the newer stuff like x/Ed25519).
Some questions:

Is there an advantage in using a global RNG_WEAK if it has to be protected by a mutex anyway? Besides, it's not actually necessary to implement an RNG_WEAK - if none is available, RNG_STRONG is used automatically for such instances.
Is there a particular reason you didn't use mp_count_bits(&this->rsa.n) to implement get_keysize() for the RSA keys?
In the x25519 implementation in set_private_value() you fix the result of wc_curve25519_shared_secret_ex() if it is larger than 0. What's the reason? I didn't find anything about this in the API documentation (it only mentions error codes and 0 if successful).
There are several magic length values (+ 10, + 20, * 4 etc.) that are not explained. Some are relatively clear, but others not so much. Is there a better way to determine these lengths (helper functions or perhaps stuff similar to MAX_ENCODED_SIG_SZ)? At least some explanation would be nice. (I guess it's not that much of an issue with functions that take the length of the buffer, but e.g. wc_EncodeSignature doesn't, which is why I used the mentioned constant there.)
Is the dependency of --enable-harden on FIPS-mode if RSA is enabled on purpose when deciding to issue a compile warning in settings.h? This prevented me from using that option in order to build with -Werror on Travis. To avoid a compile error I had to add -DWC_NO_HARDEN to the CFLAGS of our own build instead. Is that the right approach?
The OpenSSL and wolfSSL FIPS-modes don't exactly match, so I wondered if re-using the --with-fips-mode configure option actually makes sense. And seeing that FIPS-mode can't seem to be en-/disabled at runtime in wolfSSL, the strongswan.conf option would probably serve more as a safeguard to ensure FIPS-mode is actually enabled. I pushed something to that effect in the last commit.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/SparkiDev,8,https://github.com/strongswan/strongswan/pull/133#issuecomment-482395462,,"Hi Tobias,
I've looked through your branch. First, thanks for all the changes you made. I copied from other plugins and was wary of changing their patterns and the code is better.
Thanks for fixing the p and q generation in RSA. The fingerprint code was an issue I came back to many times - thanks for fixing it.
I can't see the issue you had with Ed25519.
RNG_WEAK uses a global with locking as this may be faster than creating a new random number generator and tearing it down again. I don't know the contexts of use.
get_keysize() uses wc_RsaEncryptSize() as this is the public API. I would rather not use mp APIs as they are meant to be internal use only for shared libraries.
wc_curve25519_shared_secret_ex() does only return 0 on success - my mistake. I got it right up the top!
MAX_ENCODED_SIG_SZ is the size of the encrypted signature. MAX_DER_DIGEST_SZ is what I should have used.
wolfSSL doesn't have defines for encoded key sizes. The APIs for encoding don't allow querying of the size either. This is because it is designed for embedded platforms where static buffers will be used. So I used constants that I didn't explain. Please change the constants RSA constants to reflect that they are the ASN.1 encoding lengths.
For ECC signature length I should have used: wc_ecc_sig_size(). ECC public key DER encoding '+ 30' needs to be: MAX_SEQ_SZ + 2 * MAX_ALGO_SZ + MAX_SEQ_SZ + TRAILING_ZERO. (Though this is excessive)
For Ed25519 the '+ 40' should be '+ MAX_SEQ_SZ + MAX_ALGO_SZ + MAX_SEQ_SZ + TRAILING_ZERO'.
Let me know if that doesn't work.
The hardening should be on by default. Seeing this error indicates that options.h is not being included before including settings.h. Where was the error coming up?
You are correct. FIPS mode is either built in and on or not built-in and off. The only change I saw was to the debug output and they make sense.
Thanks,
Sean, wolfSSL",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/133#issuecomment-482606649,,"Thanks for the feedback.

I copied from other plugins and was wary of changing their patterns and the code is better.

Yeah, I noticed that. Some of the code, e.g. in the OpenSSL plugin, is quite old and would look a bit differently today.

The fingerprint code was an issue I came back to many times - thanks for fixing it.

No problem, the lack of unit tests didn't make that easier.

I can't see the issue you had with Ed25519.

The problem is that after calling wc_Ed25519PrivateKeyDecode() the public key is not set if only the private key was encoded, which is e.g. the case in our Ed25519 unit test. That's why I extracted the code you added after wc_ed25519_import_private_only() into a separate function that is now called after both possible paths.

RNG_WEAK uses a global with locking as this may be faster than creating a new random number generator and tearing it down again. I don't know the contexts of use.

RNG_WEAK is used all over the place (for nonces, IVs etc.), way more often than any other type actually (in particular if DH secrets are allocated with plugin-internal RNGs). Some instances are rather short-lived (e.g. to generate padding for a single IKE message), others longer (e.g. during complete IKE exchanges) and one, in particular, is used to allocate IKE SPIs and is kept around for the whole running time of the daemon. The amount of requested random data is usually small, though (32-byte nonces are probably the largest blocks). So I guess it comes down to whether the overhead for the allocation of RNGs outweighs all of these instances having to compete for the same mutex. How expensive is wc_InitRng()?

get_keysize() uses wc_RsaEncryptSize() as this is the public API. I would rather not use mp APIs as they are meant to be internal use only for shared libraries.

I noticed you used it in verify_emsa_pss_signature() and it would theoretically be more accurate (e.g. 2047 bit keys have been seen in the wild). I guess in practice it doesn't matter much, so we can also leave it as is.

MAX_ENCODED_SIG_SZ is the size of the encrypted signature. MAX_DER_DIGEST_SZ is what I should have used.

That was actually my change (took it from the example in the apidoc for wc_EncodeSignature()). You originally had dgst.len + 20 :) But I see that MAX_DER_DIGEST_SZ is more accurate here.

Please change the RSA constants to reflect that they are the ASN.1 encoding lengths.

I did that similarly to the stuff below.

For ECC signature length I should have used: wc_ecc_sig_size(). ECC public key DER encoding '+ 30' needs to be: MAX_SEQ_SZ + 2 * MAX_ALGO_SZ + MAX_SEQ_SZ + TRAILING_ZERO. (Though this is excessive)

Hehe, yeah I guess, but at least it's also more expressive.  I modified Ed25519 similarly. Also noticed that the buffer for the ECDSA private key was way too large (and the length was not adjusted, added some tests for this too).

The hardening should be on by default. Seeing this error indicates that options.h is not being included before including settings.h. Where was the error coming up?

When running our configure script.  The header check with AC_CHECK_HEADER for wolfssl/ssl.h fails when building with -Werror. However, as you noted, it does work if #include <wolfssl/options.h> is explicitly added to the check. I guess alternatively we could just look for wolfssl/options.h?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/SparkiDev,10,https://github.com/strongswan/strongswan/pull/133#issuecomment-483065112,,"OK, I see the fix for Ed25519.
The cost of wc_initRng varies depending on build. If it is built to use Intel's RD_RAND and the chip supports it then the init is cheap and the generate is stateless. If not, then using HashDRBG performs health tests and locking is needed for a shared random.
If the size of the key to bits is important then by all means use the mp API.
I understand the problem with hardening now. A user can either use configure to generate options.h or construct their own user_settings.h. I think that using configure is the most logical for this product. In that case, checking for options.h makes more sense.
Sean",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,133,2019-04-03T22:05:14Z,2019-04-24T11:57:27Z,2019-04-24T11:57:27Z,CLOSED,False,7309,7,45,https://github.com/SparkiDev,wolfSSL plugin for cryptographic implementations.,1,[],https://github.com/strongswan/strongswan/pull/133,https://github.com/tobiasbrunner,11,https://github.com/strongswan/strongswan/pull/133#issuecomment-483204340,,"The cost of wc_initRng varies depending on build. If it is built to use Intel's RD_RAND and the chip supports it then the init is cheap and the generate is stateless. If not, then using HashDRBG performs health tests and locking is needed for a shared random.

I see. Let's keep it as it is for now, we can always change it later if there are issues.

In that case, checking for options.h makes more sense.

OK, changed that.  In case the file doesn't exist, it's always possible to override the check by passing ac_cv_header_wolfssl_options_h=yes to the configure script.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/sladkani,1,https://github.com/strongswan/strongswan/pull/134,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/134#issuecomment-481136453,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.",That's actually what spi_cb_t and set_spi_cb() is for. It allows a plugin to generate IKE SPIs however it pleases.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/ebirger,3,https://github.com/strongswan/strongswan/pull/134#issuecomment-481149482,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","Hi Tobias,
Thanks for the quick review!

I think this functionality would be useful  regardless of the spi allocation mechanism
we wanted to avoid the overhead of maintaining a full plugin for this specific functionality which is one LoC essentially",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/134#issuecomment-481152565,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","I think this functionality would be useful regardless of the spi allocation mechanism

What exactly is the use case?

we wanted to avoid the overhead of maintaining a full plugin for this specific functionality

There is not that much overhead (you can easily create out-of-tree plugins, see e.g. redirect-plugin).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/ebirger,5,https://github.com/strongswan/strongswan/pull/134#issuecomment-481153840,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","The use case is being able to partition the spi space to support HA deployments.
Similar to the way the ESP spi space can be sharded.
In such case, the spi ‘label’ is an orchestrated property which is unrelated to the allocation scheme.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/134#issuecomment-481339070,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","In such case, the spi ‘label’ is an orchestrated property which is unrelated to the allocation scheme.

I don't fully agree with that, it changes the composition and range of the SPI values and if that doesn't match the mask/label this will not work (IKE SPIs technically don't have to be random, just locally unique, although, in charon it's generally assumed the local SPI is random).
Anyway, to confirm the point of my initial comment, have a look at tkm_spi_generator.c, which is basically an implementation of this feature via spi_cb_t. It's not really specific to TKM, though, it was just requested by the customer that commissioned charon-tkm, and deemed of little use for others, so it was integrated there. I guess if this is useful to other people, we could move that code to the IKE_SA manager, which is what I did in the gh134-spi-label branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/sladkani,7,https://github.com/strongswan/strongswan/pull/134#issuecomment-481655541,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","I've tested gh134-spi-label, looks good.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/ebirger,8,https://github.com/strongswan/strongswan/pull/134#issuecomment-481959939,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","I see your point with regards to the fact that the SPI range must be synchronized between the generator and the labeling mechanism, so they cannot be completely independent. So I guess it's up to the administrator to make sure the configuration is sane.
Thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,134,2019-04-08T18:41:26Z,2019-04-11T07:52:52Z,2019-04-11T07:52:57Z,CLOSED,False,34,0,2,https://github.com/sladkani,ike-sa-manager: Introduce charon.ike_spi_label[_mask],1,[],https://github.com/strongswan/strongswan/pull/134,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/134#issuecomment-482008003,"This allows one to configure a fixed ""label"" to be set into some bits
(as defined by charon.ike_spi_label_mask) of IKE SPI value generated for
new IKE SAs.","I've tested gh134-spi-label, looks good.

Thanks for testing. I've pushed the commit to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,135,2019-04-25T06:41:46Z,2019-04-25T07:43:40Z,2019-04-25T07:44:35Z,CLOSED,False,1,1,1,https://github.com/suishixingkong,Update proposal_substructure.c,1,[],https://github.com/strongswan/strongswan/pull/135,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/135,fix a wrong in proposal_substructure_create_from_proposal_v2,fix a wrong in proposal_substructure_create_from_proposal_v2,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,135,2019-04-25T06:41:46Z,2019-04-25T07:43:40Z,2019-04-25T07:44:35Z,CLOSED,False,1,1,1,https://github.com/suishixingkong,Update proposal_substructure.c,1,[],https://github.com/strongswan/strongswan/pull/135,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/135#issuecomment-486556917,fix a wrong in proposal_substructure_create_from_proposal_v2,"Thanks, applied to master. Luckily, the type is not really used when generating payloads and the encoding rules for IKEv1 and IKEv2 are basically the same for the substructure (I guess we would have noticed this mistake a long time ago if that wasn't the case).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,136,2019-04-29T06:20:42Z,2019-04-29T06:21:36Z,2019-04-29T06:21:36Z,CLOSED,False,3,3,2,https://github.com/suishixingkong,fix a wrong in test_ecdsa.c,5,[],https://github.com/strongswan/strongswan/pull/136,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/136,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,137,2019-04-29T06:34:19Z,2019-04-29T07:57:22Z,2019-04-29T07:57:40Z,CLOSED,False,2,2,1,https://github.com/suishixingkong,Update test_ecdsa.c,1,[],https://github.com/strongswan/strongswan/pull/137,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/137,fix a wrong,fix a wrong,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,137,2019-04-29T06:34:19Z,2019-04-29T07:57:22Z,2019-04-29T07:57:40Z,CLOSED,False,2,2,1,https://github.com/suishixingkong,Update test_ecdsa.c,1,[],https://github.com/strongswan/strongswan/pull/137,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/137#issuecomment-487483388,fix a wrong,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,138,2019-05-09T07:21:22Z,2019-05-09T08:08:24Z,2019-05-09T08:08:29Z,CLOSED,False,5,2,2,https://github.com/suishixingkong,fix a wrong,2,[],https://github.com/strongswan/strongswan/pull/138,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/138,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,138,2019-05-09T07:21:22Z,2019-05-09T08:08:24Z,2019-05-09T08:08:29Z,CLOSED,False,5,2,2,https://github.com/suishixingkong,fix a wrong,2,[],https://github.com/strongswan/strongswan/pull/138,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/138#issuecomment-490798064,,"Please use separate branches for future pull requests. I applied the second commit (with a more useful message) to master, thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,139,2019-05-15T07:29:43Z,2019-05-28T16:37:38Z,2019-05-28T16:37:38Z,CLOSED,False,69,36,3,https://github.com/gollub,ikev1: Don't trigger child_updown UP event on redundant Child_SAs,2,[],https://github.com/strongswan/strongswan/pull/139,https://github.com/gollub,1,https://github.com/strongswan/strongswan/pull/139,"Avoids calling updown child-up script for redundant CHILD_SAs after IKEv1
QM collision.
In constrast to 7f5cef5 this handles non-rekey QM collisions, which
might on the initial connection attempt, right after establishin MainMode.
fixes #3060","Avoids calling updown child-up script for redundant CHILD_SAs after IKEv1
QM collision.
In constrast to 7f5cef5 this handles non-rekey QM collisions, which
might on the initial connection attempt, right after establishin MainMode.
fixes #3060",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,140,2019-05-20T09:01:47Z,2019-05-20T10:33:41Z,2019-05-20T10:33:42Z,CLOSED,False,12,2,3,https://github.com/suishixingkong,fix some wrong,5,[],https://github.com/strongswan/strongswan/pull/140,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/140,"fix a wrong in certs_filter. When traversing a certificate, if you specify a public key type but do not specify  id, a certificate with a different public key type is returned.","fix a wrong in certs_filter. When traversing a certificate, if you specify a public key type but do not specify  id, a certificate with a different public key type is returned.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,140,2019-05-20T09:01:47Z,2019-05-20T10:33:41Z,2019-05-20T10:33:42Z,CLOSED,False,12,2,3,https://github.com/suishixingkong,fix some wrong,5,[],https://github.com/strongswan/strongswan/pull/140,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/140#issuecomment-493931054,"fix a wrong in certs_filter. When traversing a certificate, if you specify a public key type but do not specify  id, a certificate with a different public key type is returned.",Please start writing proper commit messages and use separate branches/pull requests for separate fixes.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,141,2019-05-21T01:32:48Z,2019-05-21T08:25:02Z,2019-05-21T08:25:31Z,CLOSED,False,10,0,2,https://github.com/suishixingkong,fix an error,2,[],https://github.com/strongswan/strongswan/pull/141,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/141,"If the key type is specified but the id is null, it is possible to return a certificate that does not match the parameter key type.","If the key type is specified but the id is null, it is possible to return a certificate that does not match the parameter key type.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,141,2019-05-21T01:32:48Z,2019-05-21T08:25:02Z,2019-05-21T08:25:31Z,CLOSED,False,10,0,2,https://github.com/suishixingkong,fix an error,2,[],https://github.com/strongswan/strongswan/pull/141,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/141#issuecomment-494292314,"If the key type is specified but the id is null, it is possible to return a certificate that does not match the parameter key type.","You should really learn more about Git (branching, writing descriptive commit messages). Anyway, I pushed the fixes to master (for simplicity in one commit and with modified message). Thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,142,2019-05-23T01:29:07Z,2019-05-23T06:23:53Z,2019-05-23T06:23:53Z,CLOSED,False,1,0,1,https://github.com/suishixingkong,Update credential_manager.c,1,[],https://github.com/strongswan/strongswan/pull/142,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/142,Fix memory leaks,Fix memory leaks,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,142,2019-05-23T01:29:07Z,2019-05-23T06:23:53Z,2019-05-23T06:23:53Z,CLOSED,False,1,0,1,https://github.com/suishixingkong,Update credential_manager.c,1,[],https://github.com/strongswan/strongswan/pull/142,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/142#issuecomment-495084111,Fix memory leaks,That's not a leak. get_fingerprint() returns a globally cached chunk_t (see cred_encoding_t and the public key implementations).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/orgads,1,https://github.com/strongswan/strongswan/pull/143,"On some builds, the source file is built before the header is created/copied to the shadow directory.","On some builds, the source file is built before the header is created/copied to the shadow directory.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/143#issuecomment-496141998,"On some builds, the source file is built before the header is created/copied to the shadow directory.","What is a ""shadow"" build or the ""shadow"" directory? And how/why exactly does this patch fix it?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/orgads,3,https://github.com/strongswan/strongswan/pull/143#issuecomment-496158980,"On some builds, the source file is built before the header is created/copied to the shadow directory.","Shadow build is a build that is done out-of-source.
mkdir build
cd build
../strongswan/configure
make

When building from the tar distribution without preserving its timestamps (in our case, we imported the tar into another git repository), there seems to be a timing/dependency issue in the Makefiles. Sometimes flex/bison are running and sometimes they don't. If you build in parallel, then the lexer source is sometimes built before the parser's header is created in the target directory.
Makefile.am in libstrongswan has:
AM_CPPFLAGS = \
        -I$(top_srcdir)/src/libstrongswan \

and there's a similar entry in starter.
but the nested libstrongswan/settings or starter/parser directories are not in the include path, so if the header is not created yet, #include ""settings_parser.h"" fails.
I'm still not sure this fixes the issue. We'll need some time to see if it still reproduces.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/fmartinsons,4,https://github.com/strongswan/strongswan/pull/143#issuecomment-496189453,"On some builds, the source file is built before the header is created/copied to the shadow directory.","I confirmed the same problem (pretty random but definitely due to parallel build), we do the same fix as in the PR.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/143#issuecomment-496196768,"On some builds, the source file is built before the header is created/copied to the shadow directory.","OK, closing this.
If this is a problem for you, try building in two steps. Run make distdir first to build the generated source/header files (gperf, bison/flex etc.) and then run make [install] (and optionally delete the generated distribution directory).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/orgads,6,https://github.com/strongswan/strongswan/pull/143#issuecomment-496200687,"On some builds, the source file is built before the header is created/copied to the shadow directory.","Until now, it seems to fix the problem for us.
Can you explain why do you reject it? Even if there's a workaround, why not accept something that works, and doesn't seem to break anything?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/143#issuecomment-496201582,"On some builds, the source file is built before the header is created/copied to the shadow directory.","Can you explain why do you reject it?

You just wrote above that it doesn't fix the issue.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/143#issuecomment-496201694,"On some builds, the source file is built before the header is created/copied to the shadow directory.","Wait, that was another guy? What are you people doing?
Edit: Just a note, out-of-tree builds from a (clean) repository work fine here with make -j. I always build like that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/orgads,9,https://github.com/strongswan/strongswan/pull/143#issuecomment-496202109,"On some builds, the source file is built before the header is created/copied to the shadow directory.","I wrote that I'm still not sure it fixes the issue, because it reproduces randomly, so we need some time to test it.
And @fmartinsons wrote that he uses the same fix, and it works for him.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/orgads,10,https://github.com/strongswan/strongswan/pull/143#issuecomment-496203289,"On some builds, the source file is built before the header is created/copied to the shadow directory.","Regarding out-of-tree, do you build from the tar file or from git?
It might be caused by timestamps of generated c/h files, for which there are missing dependencies in the Makefile, but tracking that down is harder than the fix I proposed here.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/tobiasbrunner,11,https://github.com/strongswan/strongswan/pull/143#issuecomment-496213401,"On some builds, the source file is built before the header is created/copied to the shadow directory.","As I wrote, the Git repository. The point of including these files in the tarball is precisely to avoid having to build them (i.e. to avoid dependencies on gperf, bison/flex etc. for regular users). And why import a tarball into a Git repository if you could just work with Git (each release is tagged)? Can you reproduce the issue if you do a (clean) out-of-tree build from the (clean) Git repository? If so, does the patch help (again, using clean dirs)?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/fmartinsons,12,https://github.com/strongswan/strongswan/pull/143#issuecomment-496267759,"On some builds, the source file is built before the header is created/copied to the shadow directory.","Personnaly, we use git repository but I didn't test to clean it (remove the generated file) before doing a make install. We came up with the fix (workaround) suggested by @orgads and live with it for almost a year without any noticed issues.
Note: We use a yocto (https://www.yoctoproject.org/)  build environment to cross compil on different targets (our build machines has 24 or 32 vcpu so 24 or 32 possible parallel make targets but we experienced the problem not so often)
@tobiasbrunner did you think the suggested fix (workaround) will break something for users which doesn't have any issue with pre-generated files ? If so, fine by me, I can cleaning the the pre-generated files before a 'from scratch' build (I think it is even better in a cross compil environment where we try to use the less possible host binaries)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,143,2019-05-27T07:01:52Z,2019-05-27T12:30:18Z,2019-05-28T08:32:30Z,CLOSED,False,2,2,2,https://github.com/orgads,flex: Fix parallel shadow build,1,[],https://github.com/strongswan/strongswan/pull/143,https://github.com/tobiasbrunner,13,https://github.com/strongswan/strongswan/pull/143#issuecomment-496418952,"On some builds, the source file is built before the header is created/copied to the shadow directory.","I'd really like to understand what's going on and why this particular patch fixes it. It basically causes the compiler to search the header not relative to the compilation unit (first), but instead searches it in the with -I configured include directories. Thanks to autotools, which adds additional relative and absolute paths via -I, the latter searches in both the build and the source directory. The former, though, will only be successful in the build directory where the generated files of the parser/lexer are located, because while the other directories are searched, the file won't be found there without the settings/ prefix.
So my current guess is that the patch could only possibly make a difference if there are multiple versions of the header file around, i.e. one in the source directory and one in the out-of-tree build directory (the latter maybe created delayed, in which case the file in the source directory is found and used).  That's why I asked if this still worked from a clean repository (i.e. where there is no second header file, which is usually the case if there never was a build directly in the source directory or it isn't an unpacked tarball).
To answer your question, no I don't think it should break anything for regular users. But I also don't see it fix anything unless two versions of the header file are around, which isn't automatically the case and which could theoretically cause problems if the parser ever changes and the header file in the source tree is outdated.
As mentioned above, you can safely pre-generate the files in the build directory via make distdir (the header file should theoretically be generated first anyway, as it is listed in BUILT_SOURCES, but I guess there could be race conditions, which running this command definitely avoids).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,144,2019-06-18T00:36:00Z,2019-06-18T08:24:55Z,2019-06-18T08:24:56Z,CLOSED,False,2,2,1,https://github.com/hbrv-wd,line 832 server was not defined,1,[],https://github.com/strongswan/strongswan/pull/144,https://github.com/hbrv-wd,1,https://github.com/strongswan/strongswan/pull/144,"gateway = identification_create_from_string(server);
in this line server is not defined so I change it to gateway but I do not know it is true or not
and in line 749 foce_encap was wrong I changed that to force_encap but I am not sure it is true or not
Help me please.","gateway = identification_create_from_string(server);
in this line server is not defined so I change it to gateway but I do not know it is true or not
and in line 749 foce_encap was wrong I changed that to force_encap but I am not sure it is true or not
Help me please.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,144,2019-06-18T00:36:00Z,2019-06-18T08:24:55Z,2019-06-18T08:24:56Z,CLOSED,False,2,2,1,https://github.com/hbrv-wd,line 832 server was not defined,1,[],https://github.com/strongswan/strongswan/pull/144,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/144#issuecomment-503001707,"gateway = identification_create_from_string(server);
in this line server is not defined so I change it to gateway but I do not know it is true or not
and in line 749 foce_encap was wrong I changed that to force_encap but I am not sure it is true or not
Help me please.",Thanks for the report. I've fixed these issues in master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,145,2019-06-19T18:23:06Z,2020-01-28T10:45:24Z,2020-01-28T10:45:24Z,CLOSED,False,2,24,2,https://github.com/tnoell,Remove the minimum character limitation for pre-shared keys,2,[],https://github.com/strongswan/strongswan/pull/145,https://github.com/tnoell,1,https://github.com/strongswan/strongswan/pull/145,"This removes the minimum character limitation for pre-shared keys.
Reason: (taken from Augustin Rivero https://bugs.launchpad.net/ubuntu/+source/network-manager-strongswan/+bug/1697536):
This a client configuration not a server configuration. In a server you could enforce the user not to use an insecure password. But is it insecure to configure the client wrongly? It's like not allowing a login prompt to enter a short password. Security must be implemented when setting the password in the server, not when logging in!
A client shouldn't impose restrictions in configuration, otherwise it's not a generic client, it's just a client that works in some cases.
Other people having this problem:
https://ubuntuforums.org/showthread.php?t=2388118
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=896086","This removes the minimum character limitation for pre-shared keys.
Reason: (taken from Augustin Rivero https://bugs.launchpad.net/ubuntu/+source/network-manager-strongswan/+bug/1697536):
This a client configuration not a server configuration. In a server you could enforce the user not to use an insecure password. But is it insecure to configure the client wrongly? It's like not allowing a login prompt to enter a short password. Security must be implemented when setting the password in the server, not when logging in!
A client shouldn't impose restrictions in configuration, otherwise it's not a generic client, it's just a client that works in some cases.
Other people having this problem:
https://ubuntuforums.org/showthread.php?t=2388118
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=896086",True,"{'THUMBS_UP': ['https://github.com/cosmin-staicu', 'https://github.com/Thermi']}"
strongswan/strongswan,https://github.com/strongswan/strongswan,145,2019-06-19T18:23:06Z,2020-01-28T10:45:24Z,2020-01-28T10:45:24Z,CLOSED,False,2,24,2,https://github.com/tnoell,Remove the minimum character limitation for pre-shared keys,2,[],https://github.com/strongswan/strongswan/pull/145,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/145#issuecomment-578439278,"This removes the minimum character limitation for pre-shared keys.
Reason: (taken from Augustin Rivero https://bugs.launchpad.net/ubuntu/+source/network-manager-strongswan/+bug/1697536):
This a client configuration not a server configuration. In a server you could enforce the user not to use an insecure password. But is it insecure to configure the client wrongly? It's like not allowing a login prompt to enter a short password. Security must be implemented when setting the password in the server, not when logging in!
A client shouldn't impose restrictions in configuration, otherwise it's not a generic client, it's just a client that works in some cases.
Other people having this problem:
https://ubuntuforums.org/showthread.php?t=2388118
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=896086",Kindly requesting feedback from @tobiasbrunner,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,145,2019-06-19T18:23:06Z,2020-01-28T10:45:24Z,2020-01-28T10:45:24Z,CLOSED,False,2,24,2,https://github.com/tnoell,Remove the minimum character limitation for pre-shared keys,2,[],https://github.com/strongswan/strongswan/pull/145,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/145#issuecomment-579185976,"This removes the minimum character limitation for pre-shared keys.
Reason: (taken from Augustin Rivero https://bugs.launchpad.net/ubuntu/+source/network-manager-strongswan/+bug/1697536):
This a client configuration not a server configuration. In a server you could enforce the user not to use an insecure password. But is it insecure to configure the client wrongly? It's like not allowing a login prompt to enter a short password. Security must be implemented when setting the password in the server, not when logging in!
A client shouldn't impose restrictions in configuration, otherwise it's not a generic client, it's just a client that works in some cases.
Other people having this problem:
https://ubuntuforums.org/showthread.php?t=2388118
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=896086",See the discussion here (you actually linked back here from there).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,146,2019-06-25T18:50:12Z,2019-06-26T15:49:06Z,2019-06-26T15:49:06Z,CLOSED,False,37,0,1,https://github.com/krinfels,libtpmtss: Fix concurrency issue in libtpmtss.,1,[],https://github.com/strongswan/strongswan/pull/146,https://github.com/krinfels,1,https://github.com/strongswan/strongswan/pull/146,"When a private key from TPM is ""loaded"" strongswan
creates a context structure used for communication
with the TSS.
When multiple tunnels are established at the same time
and using the same private key, it is possible to make
concurrent calls to the TSS with the same context
which results in a multiple threads writing in the same
place in memory and undefined behaviour.
Fix this by protecting calls to the TSS with a mutex
unique for every private key.","When a private key from TPM is ""loaded"" strongswan
creates a context structure used for communication
with the TSS.
When multiple tunnels are established at the same time
and using the same private key, it is possible to make
concurrent calls to the TSS with the same context
which results in a multiple threads writing in the same
place in memory and undefined behaviour.
Fix this by protecting calls to the TSS with a mutex
unique for every private key.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,146,2019-06-25T18:50:12Z,2019-06-26T15:49:06Z,2019-06-26T15:49:06Z,CLOSED,False,37,0,1,https://github.com/krinfels,libtpmtss: Fix concurrency issue in libtpmtss.,1,[],https://github.com/strongswan/strongswan/pull/146,https://github.com/strongX509,2,https://github.com/strongswan/strongswan/pull/146#issuecomment-505934211,"When a private key from TPM is ""loaded"" strongswan
creates a context structure used for communication
with the TSS.
When multiple tunnels are established at the same time
and using the same private key, it is possible to make
concurrent calls to the TSS with the same context
which results in a multiple threads writing in the same
place in memory and undefined behaviour.
Fix this by protecting calls to the TSS with a mutex
unique for every private key.",The pull request has been included with one major modification (protect a Tss2_Sys_HashSequence with a single lock over several Tss2_Sys calls) in the strongSwan 5.8.1dr1 release.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,147,2019-06-28T06:07:47Z,2019-06-28T07:09:37Z,2019-06-28T07:09:37Z,CLOSED,False,18,7,2,https://github.com/suishixingkong,libipsec can work on configuring auto=route,3,[],https://github.com/strongswan/strongswan/pull/147,https://github.com/suishixingkong,1,https://github.com/strongswan/strongswan/pull/147,libipsec can work on configuring auto=route,libipsec can work on configuring auto=route,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,147,2019-06-28T06:07:47Z,2019-06-28T07:09:37Z,2019-06-28T07:09:37Z,CLOSED,False,18,7,2,https://github.com/suishixingkong,libipsec can work on configuring auto=route,3,[],https://github.com/strongswan/strongswan/pull/147,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/147#issuecomment-506628831,libipsec can work on configuring auto=route,"There are several issues with this:

There must not be a dependency on libcharon (look at how expires are treated, actually, I had an old implementation of the relaying of an acquire event in a private branch, which I now pushed to the libipsec-trap branch).
Even though duplicate acquires are ignored by the trap manager, ideally, it should be avoided somehow that each further non-matching packet triggers another one (maybe it would even be possible to queue the packets, up to a limit perhaps, so they could be sent once the SA is established).
The traffic selectors in the event are not those from the policy, but derived from the packet that matched the policy (i.e. they are very specific, single IPs and including ports and protocol).
Trying to check out the SA again right away is unlikely to be successful (at least in real world scenarios).

Anyway, if this works for you, fine, but we can't accept it upstream like this.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,148,2019-07-19T21:03:04Z,2019-08-13T13:43:48Z,2019-08-13T13:43:48Z,CLOSED,False,136,124,37,https://github.com/raviyer,Android 9 Support + Fix Crash,1,[],https://github.com/strongswan/strongswan/pull/148,https://github.com/raviyer,1,https://github.com/strongswan/strongswan/pull/148,"Moved to Target version 28.
https://developer.android.com/about/versions/pie/android-9.0-migration
Added FOREGROUND_SERVICE permission to manifest file.
Moved to AndroidX from legacy support libraries.
https://developer.android.com/jetpack/androidx/migrate
Fixed some deprecation warnings associated with this. Only addressed deprection
warnings that do not affect minSdkVersion.
Fixed crash in TextInputLayoutHelper","Moved to Target version 28.
https://developer.android.com/about/versions/pie/android-9.0-migration
Added FOREGROUND_SERVICE permission to manifest file.
Moved to AndroidX from legacy support libraries.
https://developer.android.com/jetpack/androidx/migrate
Fixed some deprecation warnings associated with this. Only addressed deprection
warnings that do not affect minSdkVersion.
Fixed crash in TextInputLayoutHelper",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,148,2019-07-19T21:03:04Z,2019-08-13T13:43:48Z,2019-08-13T13:43:48Z,CLOSED,False,136,124,37,https://github.com/raviyer,Android 9 Support + Fix Crash,1,[],https://github.com/strongswan/strongswan/pull/148,https://github.com/raviyer,2,https://github.com/strongswan/strongswan/pull/148#issuecomment-513522080,"Moved to Target version 28.
https://developer.android.com/about/versions/pie/android-9.0-migration
Added FOREGROUND_SERVICE permission to manifest file.
Moved to AndroidX from legacy support libraries.
https://developer.android.com/jetpack/androidx/migrate
Fixed some deprecation warnings associated with this. Only addressed deprection
warnings that do not affect minSdkVersion.
Fixed crash in TextInputLayoutHelper",@tobiasbrunner Can you please review and approve these changes? W/o it does not currently run on Android 9. i.e. the minimum change for android 9 is the added FOREGROUND_SERVICE permission. But I also read someplace that as of August all play store apps need to be on API 28.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,148,2019-07-19T21:03:04Z,2019-08-13T13:43:48Z,2019-08-13T13:43:48Z,CLOSED,False,136,124,37,https://github.com/raviyer,Android 9 Support + Fix Crash,1,[],https://github.com/strongswan/strongswan/pull/148,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/148#issuecomment-520840214,"Moved to Target version 28.
https://developer.android.com/about/versions/pie/android-9.0-migration
Added FOREGROUND_SERVICE permission to manifest file.
Moved to AndroidX from legacy support libraries.
https://developer.android.com/jetpack/androidx/migrate
Fixed some deprecation warnings associated with this. Only addressed deprection
warnings that do not affect minSdkVersion.
Fixed crash in TextInputLayoutHelper","Thanks for the information. I've addressed these issues in the android-updates branch. What's not currently fixed is the deprecation of ConnectivityManager.CONNECTIVITY_ACTION (probably requires using network callbacks on newer API levels), I'll look into that at a later date.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,149,2019-08-18T22:55:17Z,2019-08-19T08:22:13Z,2019-08-19T08:22:14Z,CLOSED,False,253730,103707,7321,https://github.com/Sina-Ghaderi,Add Speed (Upload/Download) Limit  Attribute For Radius ,2923,[],https://github.com/strongswan/strongswan/pull/149,https://github.com/Sina-Ghaderi,1,https://github.com/strongswan/strongswan/pull/149,"Hi
Please add Attribute to limit rate of Download and Upload Speed.
Thanks.","Hi
Please add Attribute to limit rate of Download and Upload Speed.
Thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,149,2019-08-18T22:55:17Z,2019-08-19T08:22:13Z,2019-08-19T08:22:14Z,CLOSED,False,253730,103707,7321,https://github.com/Sina-Ghaderi,Add Speed (Upload/Download) Limit  Attribute For Radius ,2923,[],https://github.com/strongswan/strongswan/pull/149,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/149#issuecomment-522465295,"Hi
Please add Attribute to limit rate of Download and Upload Speed.
Thanks.",Please submit feature requests via issue tracker.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,150,2019-09-16T16:11:40Z,2019-09-17T08:33:48Z,2019-09-17T11:20:06Z,CLOSED,False,1,1,1,https://github.com/worldofpeace,Move D-Bus conf file to $(datadir)/dbus-1/system.d,1,[],https://github.com/strongswan/strongswan/pull/150,https://github.com/worldofpeace,1,https://github.com/strongswan/strongswan/pull/150,"Since D-Bus 1.9.18 configuration files installed by third-party should
go in share/dbus-1/system.d. The old location is for sysadmin overrides.","Since D-Bus 1.9.18 configuration files installed by third-party should
go in share/dbus-1/system.d. The old location is for sysadmin overrides.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,150,2019-09-16T16:11:40Z,2019-09-17T08:33:48Z,2019-09-17T11:20:06Z,CLOSED,False,1,1,1,https://github.com/worldofpeace,Move D-Bus conf file to $(datadir)/dbus-1/system.d,1,[],https://github.com/strongswan/strongswan/pull/150,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/150#issuecomment-532120338,"Since D-Bus 1.9.18 configuration files installed by third-party should
go in share/dbus-1/system.d. The old location is for sysadmin overrides.","Thanks. I guess this change isn't compatible with older D-Bus releases. However, since our NM plugin targets newer NM versions (I think >= 1.1), distros shipping that will probably also ship a compatible D-Bus version. So that shouldn't be a problem.",True,{'HOORAY': ['https://github.com/worldofpeace']}
strongswan/strongswan,https://github.com/strongswan/strongswan,151,2019-09-24T18:39:28Z,2019-09-26T02:21:27Z,2019-09-26T07:08:42Z,CLOSED,False,75,54,18,https://github.com/dgarske,Fixes for building with wolfSSL,1,[],https://github.com/strongswan/strongswan/pull/151,https://github.com/dgarske,1,https://github.com/strongswan/strongswan/pull/151,"Resolves conflicts with building against wolfSSL when --enable-opensslextra is set. Fixes WOLFSSL_HMAC_H_, RNG and ASN1 name conflicts.","Resolves conflicts with building against wolfSSL when --enable-opensslextra is set. Fixes WOLFSSL_HMAC_H_, RNG and ASN1 name conflicts.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,151,2019-09-24T18:39:28Z,2019-09-26T02:21:27Z,2019-09-26T07:08:42Z,CLOSED,False,75,54,18,https://github.com/dgarske,Fixes for building with wolfSSL,1,[],https://github.com/strongswan/strongswan/pull/151,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/151#issuecomment-535095476,"Resolves conflicts with building against wolfSSL when --enable-opensslextra is set. Fixes WOLFSSL_HMAC_H_, RNG and ASN1 name conflicts.",Thanks. I pushed a modified version to the gh151-wolfssl-compat branch. Let me know if that's OK for you.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,151,2019-09-24T18:39:28Z,2019-09-26T02:21:27Z,2019-09-26T07:08:42Z,CLOSED,False,75,54,18,https://github.com/dgarske,Fixes for building with wolfSSL,1,[],https://github.com/strongswan/strongswan/pull/151,https://github.com/dgarske,3,https://github.com/strongswan/strongswan/pull/151#issuecomment-535301886,"Resolves conflicts with building against wolfSSL when --enable-opensslextra is set. Fixes WOLFSSL_HMAC_H_, RNG and ASN1 name conflicts.",@tobiasbrunner : Yes the gh151-wolfssl-compat branch works! Thank you! I will mark this PR closed and assume you'll handle via the new branch. Thank you for the fast response.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,151,2019-09-24T18:39:28Z,2019-09-26T02:21:27Z,2019-09-26T07:08:42Z,CLOSED,False,75,54,18,https://github.com/dgarske,Fixes for building with wolfSSL,1,[],https://github.com/strongswan/strongswan/pull/151,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/151#issuecomment-535370398,"Resolves conflicts with building against wolfSSL when --enable-opensslextra is set. Fixes WOLFSSL_HMAC_H_, RNG and ASN1 name conflicts.","Great, thanks for testing. The fix is now in master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,152,2019-10-04T00:37:49Z,2019-10-04T07:38:38Z,2019-10-04T10:18:24Z,CLOSED,False,6,0,1,https://github.com/danc86,install libvici.h with dev headers,1,[],https://github.com/strongswan/strongswan/pull/152,https://github.com/danc86,1,https://github.com/strongswan/strongswan/pull/152,This installs libvici.h as /usr/include/strongswan/vici/libvici.h so that other programs can build against it.,This installs libvici.h as /usr/include/strongswan/vici/libvici.h so that other programs can build against it.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,152,2019-10-04T00:37:49Z,2019-10-04T07:38:38Z,2019-10-04T10:18:24Z,CLOSED,False,6,0,1,https://github.com/danc86,install libvici.h with dev headers,1,[],https://github.com/strongswan/strongswan/pull/152,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/152#issuecomment-538283038,This installs libvici.h as /usr/include/strongswan/vici/libvici.h so that other programs can build against it.,"As we wrote before (e.g. on the dev mailing list here, and here), libvici is only intended for internal use. The davici library provides several advantages over it (less restrictive license, independent of any strongSwan libraries, asynchronous API). And as we stated before, --with-dev-headers shouldn't be used in general at all, because we don't provide a stable API for our libraries.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,152,2019-10-04T00:37:49Z,2019-10-04T07:38:38Z,2019-10-04T10:18:24Z,CLOSED,False,6,0,1,https://github.com/danc86,install libvici.h with dev headers,1,[],https://github.com/strongswan/strongswan/pull/152,https://github.com/danc86,3,https://github.com/strongswan/strongswan/pull/152#issuecomment-538332102,This installs libvici.h as /usr/include/strongswan/vici/libvici.h so that other programs can build against it.,"Okay. You might want to update the wording on the Vici wiki page, particularly where it says:

libvici provides a stable low-level C API to exchange messages using the VICI protocol. While it depends on libstrongswan, it uses a stable, coding-style neutral API and should work for many applications.

I took that to mean that third-party applications are encouraged to build against libvici. But it sounds like you are saying you consider libvici an internal implementation detail and you want third parties to build against davici instead.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,152,2019-10-04T00:37:49Z,2019-10-04T07:38:38Z,2019-10-04T10:18:24Z,CLOSED,False,6,0,1,https://github.com/danc86,install libvici.h with dev headers,1,[],https://github.com/strongswan/strongswan/pull/152,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/152#issuecomment-538340033,This installs libvici.h as /usr/include/strongswan/vici/libvici.h so that other programs can build against it.,"Yes, we should probably clarify that. You are obviously still free to use it, just copy or reference the header directly.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/fxkr,1,https://github.com/strongswan/strongswan/pull/153,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/153#issuecomment-538280265,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","Unfortunately the child-updown command wasn't updated to match.

Because it's not necessary there. The child-updown event is always triggered for a single CHILD_SA so there is no need to use a unique name for the section.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/fxkr,3,https://github.com/strongswan/strongswan/pull/153#issuecomment-538284998,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","It is actually a problem for API users that want to track all child SA's that StrongSwan has (for health monitoring purposes - this is a real-world use btw). There can be multiple child SA's for an SA, and currently you cannot use the key to distinguish them.
Additionally, to monitor in a race condition free way, you need to:

subscribe to child-updown
call list_sas once to dump the initial list
track the results from both the commands as they come in. So you have to correlate ID's of list-sas and child-updown with each other. Right now they are inconsistent.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/153#issuecomment-538287734,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","and currently you cannot use the key to distinguish them.

Which you shouldn't, the section name in list-sas is only ""unique"" to make sending multiple CHILD_SAs with the same name possible at all (child-rekey, for instance, doesn't use the name in the section name at all). It's not intended to be used as key. Use the name and uniqueid attributes (or only the latter) for that if you need it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/fxkr,5,https://github.com/strongswan/strongswan/pull/153#issuecomment-538290692,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","It contradicts the documentation. It literally says ""same data"".

And besides, no interest in fixing a glaring inconsistency? Is there any underlying reason for shooting this PR down that I'm missing? I just don't get it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/fxkr,6,https://github.com/strongswan/strongswan/pull/153#issuecomment-538291769,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","(Anyway, as with the other PR, I respect your decision whatever it is in the end. Thanks for maintaining a great open source project for all of us! For the third and larger PR I wanted to do I'll ask on the mailing list if there's any chance of it getting in before I waste too much time on it.)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,153,2019-10-04T07:13:03Z,2019-10-04T08:14:50Z,2019-10-04T08:14:50Z,CLOSED,False,6,1,1,https://github.com/fxkr,vici: Use unique names for CHILD_SAs in the child-updown event too,1,[],https://github.com/strongswan/strongswan/pull/153,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/153#issuecomment-538292678,"The unique names were introduced for the list-sas command in commit
04c0219. Unfortunately
the child-updown command wasn't updated to match.
The original name is already being returned in the ""name"" attribute,
so it'll still be available.
Example:
>>> import vici, json
>>> s = vici.Session()

# First, for comparison, the list-sas command:
>>> print(json.dumps(list(s.list_sas()), sort_keys=True, indent=4, separators=(',', ': ')))
[
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {
                    ...

# A child-updown event before the change:
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0"": {   # <-- wrong: inconsistent with list-sas
                    ...

# A child-updown event after the change:
>>> s = vici.Session()
>>> for x in s.listen([""child-updown""]): print(json.dumps(x, sort_keys=True, indent=4, separators=(',', ': ')))
[
    ""child-updown"",
    {
        ""vti0"": {
            ""child-sas"": {
                ""vti0-1"": {  # <-- fixed","It literally says ""same data"".

Agreed. Let's apply this change for consistency's sake.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/fxkr,1,https://github.com/strongswan/strongswan/pull/154,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/154#issuecomment-538279291,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","It's not a dependency that is required to build from the repository, the others are.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/fxkr,3,https://github.com/strongswan/strongswan/pull/154#issuecomment-538281880,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","Right now, if you follow the exact steps in HACKING:
For interested developers, we have a public repository. To check out and compile
the code, you need the following tools:

    - Git
    - a recent GNU C compiler (>= 3.x)
    - automake
    - autoconf
    - libtool
    - pkg-config
    - gettext
    - perl
    - python
    - lex/flex
    - yacc/bison
    - gperf

    Optionally:
    - lcov/genhtml
    - Doxygen

To check out the master branch, use:

    git clone git://git.strongswan.org/strongswan.git

or using HTTP:

    git clone https://git.strongswan.org/strongswan.git

After a successful check out, give the autotools a try:

    cd strongswan/
    ./autogen.sh

Then you're in, start the build as usual:

    ./configure [options]
    make
    make install

the build will fail with the error I gave.
So the documentation as it is right now is incorrect.
Are you sure you do not want a HACKING file that will actually give you a working build?
Would it be an acceptable compromise to add - libgmp3-dev (needed if using default ./configure options, but optional in general)?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/154#issuecomment-538284709,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","Are you sure you do not want a HACKING file that will actually give you a working build?

I've no problem with that. HACKING is not intended for regular users but for devs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/fxkr,5,https://github.com/strongswan/strongswan/pull/154#issuecomment-538286097,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","I thought it's to ramp up new developers, who can surely benefit from a complete/correct example. Why even have docs if they're wrong? I'm disappointed - I really cannot understand why you are rejecting this -, but I respect your decision. Thanks for HACKING on StrongSwan anyway.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/154#issuecomment-538299508,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","The whole point of the configure script is doing these dependency checks, so I really don't see a problem if there is an error that depends on the variable configure options (also see this page on the wiki). However, for most of the dependencies listed in HACKING there isn't a hard check in the script because they are not required when building from a tarball. For instance, autotools and gettext are needed to build the script itself, and the script won't fail if perl, python, flex/bison and gperf are not found because the generated files are part of the tarball, yet a build from the repository will later fail without them.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,154,2019-10-04T07:21:23Z,2019-10-04T07:27:03Z,2019-10-04T09:06:40Z,CLOSED,False,1,0,1,https://github.com/fxkr,"HACKING: add libgmp3-dev to dependencies list, because the default config requires it",1,[],https://github.com/strongswan/strongswan/pull/154,https://github.com/fxkr,7,https://github.com/strongswan/strongswan/pull/154#issuecomment-538316741,"Steps to repro:
Run an AWS EC2 (free tier is fine) with Amazon's Ubuntu 18.04 AMI.

git clone ...
sudo apt-get update
sudo apt-get install automake autoconf libtool pkg-config gettext perl python flex bison
./autogen.sh
./configure

Error:
configure: error: GNU Multi Precision library gmp not found","Thanks for the explanation.
The next dev will also figure out that if they only have the listed dependencies, the options aren't optional.
To be fair, HACKING does mention the [options], and ./configure does tell what's missing, so it's no big deal.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,155,2019-10-14T10:23:06Z,2019-10-14T16:05:24Z,2019-10-14T16:06:31Z,CLOSED,False,8,0,1,https://github.com/semihalf-duda-patryk,kernel_pfkey: Pass ESN flag to kernel if ESN is enabled,1,[],https://github.com/strongswan/strongswan/pull/155,https://github.com/semihalf-duda-patryk,1,https://github.com/strongswan/strongswan/pull/155,"Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com","Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,155,2019-10-14T10:23:06Z,2019-10-14T16:05:24Z,2019-10-14T16:06:31Z,CLOSED,False,8,0,1,https://github.com/semihalf-duda-patryk,kernel_pfkey: Pass ESN flag to kernel if ESN is enabled,1,[],https://github.com/strongswan/strongswan/pull/155,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/155#issuecomment-541631909,"Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com","What platform supports this? FreeBSD and macOS don't as far as I can tell, and the Linux kernel neither (the PF_KEY interface is deprecated there, though). I saw it mentioned in OpenBSD's version of pfkeyv2.h, is that where you use it?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,155,2019-10-14T10:23:06Z,2019-10-14T16:05:24Z,2019-10-14T16:06:31Z,CLOSED,False,8,0,1,https://github.com/semihalf-duda-patryk,kernel_pfkey: Pass ESN flag to kernel if ESN is enabled,1,[],https://github.com/strongswan/strongswan/pull/155,https://github.com/semihalf-duda-patryk,3,https://github.com/strongswan/strongswan/pull/155#issuecomment-541634580,"Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com","I'm preparing patches for FreeBSD kernel which adds support for ESN. Strongswan doesn't support OpenBSD, so it was tested against FreeBSD only.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,155,2019-10-14T10:23:06Z,2019-10-14T16:05:24Z,2019-10-14T16:06:31Z,CLOSED,False,8,0,1,https://github.com/semihalf-duda-patryk,kernel_pfkey: Pass ESN flag to kernel if ESN is enabled,1,[],https://github.com/strongswan/strongswan/pull/155,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/155#issuecomment-541674978,"Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com","I see, great. I pushed a modified version of this to the gh155-pfkey-esn branch. Let me know if that works for you.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,155,2019-10-14T10:23:06Z,2019-10-14T16:05:24Z,2019-10-14T16:06:31Z,CLOSED,False,8,0,1,https://github.com/semihalf-duda-patryk,kernel_pfkey: Pass ESN flag to kernel if ESN is enabled,1,[],https://github.com/strongswan/strongswan/pull/155,https://github.com/semihalf-duda-patryk,5,https://github.com/strongswan/strongswan/pull/155#issuecomment-541730074,"Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com","I have tested both scenarios:
Strongswan compiled when SADB_X_SAFLAGS_ESN is not present in pfkeyv2.h and running with ESN enabed in configuration. Strongswan correctly reported that ESN is not supported by kernel.
Second scenario was compiling it with SADB_X_SAFLAGS_ESN present in pfkeyv2.h and running with ESN enabled in configuration. Tunnel was established correctly, so for me it works perfectly.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,155,2019-10-14T10:23:06Z,2019-10-14T16:05:24Z,2019-10-14T16:06:31Z,CLOSED,False,8,0,1,https://github.com/semihalf-duda-patryk,kernel_pfkey: Pass ESN flag to kernel if ESN is enabled,1,[],https://github.com/strongswan/strongswan/pull/155,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/155#issuecomment-541768749,"Current behaviour is that ESN can be negotiated even when kernel doesn't
support ESN. Pfkey plugin have ESN flag provided but this information is
not propagated to kernel.
This patch adds passing ESN flag to kernel when ESN was negotiated and
appropriate flag is present in kernel headers.
Signed-off-by: Patryk Duda pdk@semihalf.com","OK, great. Thanks for testing. Applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,156,2019-10-18T23:24:15Z,2019-10-21T07:57:51Z,2019-10-21T07:58:00Z,CLOSED,False,2,0,1,https://github.com/dgarske,Fix for issue with blinding not defined,1,[],https://github.com/strongswan/strongswan/pull/156,https://github.com/dgarske,1,https://github.com/strongswan/strongswan/pull/156,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,156,2019-10-18T23:24:15Z,2019-10-21T07:57:51Z,2019-10-21T07:58:00Z,CLOSED,False,2,0,1,https://github.com/dgarske,Fix for issue with blinding not defined,1,[],https://github.com/strongswan/strongswan/pull/156,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/156#issuecomment-544395809,,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/ratcashdev,1,https://github.com/strongswan/strongswan/pull/157,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/157#issuecomment-545776842,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.",Could you please provide a bit more information on this? Who/what tool created the certificate with this signature algorithm identifier? Was there an option to use a different identifier? Was there an option to use SHA-256 (SHA-1 shouldn't be used anymore)?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/ratcashdev,3,https://github.com/strongswan/strongswan/pull/157#issuecomment-545906004,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","Certificates are generated in windows, using:
""C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\makecert"" -sky exchange -r -n ""CN=Azure-ZONE-DMZ-VPN"" -pe -a sha1 -len 2048 -ss My ""Azure-ZONE-DMZ-VPN.cer""

The person using these arguments stated that some sources recommended using sha1 for LINUX...",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/157#issuecomment-545911228,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","Does the tool support -a sha256? If yes, use it. If no, you might want to consider using a proper tool to create certificates.

The person using these arguments stated that some sources recommended using sha1 for LINUX...

I don't see why that would be the case (in particular if the tool encodes the signature with a legacy OID that nobody else uses).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/ratcashdev,5,https://github.com/strongswan/strongswan/pull/157#issuecomment-545913952,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","Yes, I am also trying to push through using openssl for certificate generation.
Regardless of that, what do you think of this PR?
It took me quite some time to track down the quite meaningless ""unable to parse signature algorithm"" message.
If your objective is to drive away ppl from using these signatures, please use a more friendly message, like ""The signature is using a deprecated algorithm (OID HERE) that should not be used and is not supported by this tool"".
Alternatively, simple merge this PR...",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/157#issuecomment-545917133,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","If your objective is to drive away ppl from using these signatures

Absolutely. But adding an extra error message for this rare issue (you are the first one to report this and I'm sure Microsoft's tool never did this correctly) is not worth the effort, especially because nobody nowadays uses SHA-1 to issue certificates.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/ratcashdev,7,https://github.com/strongswan/strongswan/pull/157#issuecomment-545928864,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","@tobiasbrunner it's not about the signature, but the OID. OpenSSL still does accept it, so I am wondering why strongswan shouldn't.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,157,2019-10-23T22:07:27Z,2019-10-24T13:26:54Z,2019-10-24T14:07:33Z,CLOSED,False,1,0,1,https://github.com/ratcashdev,Support the deprecated sha-1WithRSASignature 1.3.14.3.2.29. Needed to…,1,[],https://github.com/strongswan/strongswan/pull/157,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/157#issuecomment-545935013,"… avoid ""unable to parse signature algorithm"" when parsing an X.509 AZURE generated VPN gateway certificate.","it's not about the signature, but the OID.

Yes, the OID of the signature algortihm.

OpenSSL still does accept it, so I am wondering why strongswan shouldn't.

So? I don't see why we should add support for an obsolete identifier (since at least 21 years) for an obsolete algorithm (moving away from SHA-1 has been recommended for about 10 years now, and web browsers, for instance, stopped supporting SHA-1 for certificate signatures altogether nearly three years ago).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,158,2019-10-28T18:49:05Z,2019-10-29T09:51:04Z,2019-10-29T09:51:08Z,CLOSED,False,1,1,1,https://github.com/kenyon,"ipsec.conf.5.in: correct typo of ""uniqueids"" in closeaction",1,[],https://github.com/strongswan/strongswan/pull/158,https://github.com/kenyon,1,https://github.com/strongswan/strongswan/pull/158,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,158,2019-10-28T18:49:05Z,2019-10-29T09:51:04Z,2019-10-29T09:51:08Z,CLOSED,False,1,1,1,https://github.com/kenyon,"ipsec.conf.5.in: correct typo of ""uniqueids"" in closeaction",1,[],https://github.com/strongswan/strongswan/pull/158,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/158#issuecomment-547340379,,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,159,2019-11-04T00:34:52Z,2019-11-04T14:26:24Z,2019-11-04T14:26:24Z,CLOSED,False,3,3,1,https://github.com/samzeter,Fix typos in proposals.h,1,[],https://github.com/strongswan/strongswan/pull/159,https://github.com/samzeter,1,https://github.com/strongswan/strongswan/pull/159,"This patch fixes a small number of typos found in
proposals.h.","This patch fixes a small number of typos found in
proposals.h.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,159,2019-11-04T00:34:52Z,2019-11-04T14:26:24Z,2019-11-04T14:26:24Z,CLOSED,False,3,3,1,https://github.com/samzeter,Fix typos in proposals.h,1,[],https://github.com/strongswan/strongswan/pull/159,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/159#issuecomment-549377664,"This patch fixes a small number of typos found in
proposals.h.",Thanks. I used this as a starting point and fixed several other things and even extended some of the comments (see 0708378).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,160,2019-11-06T01:47:03Z,2019-11-07T10:36:41Z,2019-11-07T10:36:41Z,CLOSED,False,1,13,2,https://github.com/zhangkaiheb,testing: fix sha description in esp-alg-null,2,[],https://github.com/strongswan/strongswan/pull/160,https://github.com/zhangkaiheb,1,https://github.com/strongswan/strongswan/pull/160,change the sha1 to sha256 according the ipsec.conf file.,change the sha1 to sha256 according the ipsec.conf file.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,160,2019-11-06T01:47:03Z,2019-11-07T10:36:41Z,2019-11-07T10:36:41Z,CLOSED,False,1,13,2,https://github.com/zhangkaiheb,testing: fix sha description in esp-alg-null,2,[],https://github.com/strongswan/strongswan/pull/160,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/160#issuecomment-551022258,change the sha1 to sha256 according the ipsec.conf file.,"Thanks, applied to master (fixed the first one also for the IKEv1 version of the scenario).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,161,2019-11-30T06:18:01Z,2019-12-06T03:03:09Z,2019-12-06T03:03:21Z,CLOSED,False,11,9,2,https://github.com/wataash,configure: Abort if gperf not found though needed,2,[],https://github.com/strongswan/strongswan/pull/161,https://github.com/wataash,1,https://github.com/strongswan/strongswan/pull/161,"If src/libstrongswan/crypto/proposal/proposal_keywords_static.c doesn't exist (i.e. git cloned, not tar.gz) and gperf is not installed, the build fails with a strange error:
Making all in libstrongswan
make[3]: Entering directory '/home/wsh/qc/strongswan/src/libstrongswan'
\
  (cd ./asn1/ && /usr/bin/perl oid.pl)
\
  sed \
  -e ""s:\@GPERF_LEN_TYPE\@::"" \
  crypto/proposal/proposal_keywords_static.h.in > crypto/proposal/proposal_keywords_static.h
\
   -N proposal_get_token_static -m 10 -C -G -c -t -D < \
                      ./crypto/proposal/proposal_keywords_static.txt > crypto/proposal/proposal_keywords_static.c
/bin/bash: line 1: -N: command not found
This patch makes it easy to understand what is required:
$ ./configure
...
checking for perl... /usr/local/bin/perl
checking for gperf... no
configure: error: gperf version >= 3.0.0 is needed
Tests
If src/libstrongswan/crypto/proposal/proposal_keywords_static.c exists:
$ ./configure
...
checking for gperf... no
checking for stdbool.h that conforms to C99... yes
...
If gperf installed:
$ ./configure
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... yes
checking for stdbool.h that conforms to C99... yes
...
If gperf is actually /bin/echo and proposal_keywords_static.c exists:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
checking for stdbool.h that conforms to C99... yes
If gperf is actually /bin/echo and proposal_keywords_static.c doesn't exist:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
configure: error: gperf version >= 3.0.0 is needed","If src/libstrongswan/crypto/proposal/proposal_keywords_static.c doesn't exist (i.e. git cloned, not tar.gz) and gperf is not installed, the build fails with a strange error:
Making all in libstrongswan
make[3]: Entering directory '/home/wsh/qc/strongswan/src/libstrongswan'
\
  (cd ./asn1/ && /usr/bin/perl oid.pl)
\
  sed \
  -e ""s:\@GPERF_LEN_TYPE\@::"" \
  crypto/proposal/proposal_keywords_static.h.in > crypto/proposal/proposal_keywords_static.h
\
   -N proposal_get_token_static -m 10 -C -G -c -t -D < \
                      ./crypto/proposal/proposal_keywords_static.txt > crypto/proposal/proposal_keywords_static.c
/bin/bash: line 1: -N: command not found
This patch makes it easy to understand what is required:
$ ./configure
...
checking for perl... /usr/local/bin/perl
checking for gperf... no
configure: error: gperf version >= 3.0.0 is needed
Tests
If src/libstrongswan/crypto/proposal/proposal_keywords_static.c exists:
$ ./configure
...
checking for gperf... no
checking for stdbool.h that conforms to C99... yes
...
If gperf installed:
$ ./configure
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... yes
checking for stdbool.h that conforms to C99... yes
...
If gperf is actually /bin/echo and proposal_keywords_static.c exists:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
checking for stdbool.h that conforms to C99... yes
If gperf is actually /bin/echo and proposal_keywords_static.c doesn't exist:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
configure: error: gperf version >= 3.0.0 is needed",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,161,2019-11-30T06:18:01Z,2019-12-06T03:03:09Z,2019-12-06T03:03:21Z,CLOSED,False,11,9,2,https://github.com/wataash,configure: Abort if gperf not found though needed,2,[],https://github.com/strongswan/strongswan/pull/161,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/161#issuecomment-562166437,"If src/libstrongswan/crypto/proposal/proposal_keywords_static.c doesn't exist (i.e. git cloned, not tar.gz) and gperf is not installed, the build fails with a strange error:
Making all in libstrongswan
make[3]: Entering directory '/home/wsh/qc/strongswan/src/libstrongswan'
\
  (cd ./asn1/ && /usr/bin/perl oid.pl)
\
  sed \
  -e ""s:\@GPERF_LEN_TYPE\@::"" \
  crypto/proposal/proposal_keywords_static.h.in > crypto/proposal/proposal_keywords_static.h
\
   -N proposal_get_token_static -m 10 -C -G -c -t -D < \
                      ./crypto/proposal/proposal_keywords_static.txt > crypto/proposal/proposal_keywords_static.c
/bin/bash: line 1: -N: command not found
This patch makes it easy to understand what is required:
$ ./configure
...
checking for perl... /usr/local/bin/perl
checking for gperf... no
configure: error: gperf version >= 3.0.0 is needed
Tests
If src/libstrongswan/crypto/proposal/proposal_keywords_static.c exists:
$ ./configure
...
checking for gperf... no
checking for stdbool.h that conforms to C99... yes
...
If gperf installed:
$ ./configure
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... yes
checking for stdbool.h that conforms to C99... yes
...
If gperf is actually /bin/echo and proposal_keywords_static.c exists:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
checking for stdbool.h that conforms to C99... yes
If gperf is actually /bin/echo and proposal_keywords_static.c doesn't exist:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
configure: error: gperf version >= 3.0.0 is needed","Thanks.

If gperf is actually /bin/echo

I don't think it's necessary to handle that case. Also, checking the version number (or mentioning it) isn't really necessary anymore as gperf version 3.x has been around since 2003.
I pushed some alternative commits to the gh161-gperf branch. Let me know what you think.",True,{'THUMBS_UP': ['https://github.com/wataash']}
strongswan/strongswan,https://github.com/strongswan/strongswan,161,2019-11-30T06:18:01Z,2019-12-06T03:03:09Z,2019-12-06T03:03:21Z,CLOSED,False,11,9,2,https://github.com/wataash,configure: Abort if gperf not found though needed,2,[],https://github.com/strongswan/strongswan/pull/161,https://github.com/wataash,3,https://github.com/strongswan/strongswan/pull/161#issuecomment-562412424,"If src/libstrongswan/crypto/proposal/proposal_keywords_static.c doesn't exist (i.e. git cloned, not tar.gz) and gperf is not installed, the build fails with a strange error:
Making all in libstrongswan
make[3]: Entering directory '/home/wsh/qc/strongswan/src/libstrongswan'
\
  (cd ./asn1/ && /usr/bin/perl oid.pl)
\
  sed \
  -e ""s:\@GPERF_LEN_TYPE\@::"" \
  crypto/proposal/proposal_keywords_static.h.in > crypto/proposal/proposal_keywords_static.h
\
   -N proposal_get_token_static -m 10 -C -G -c -t -D < \
                      ./crypto/proposal/proposal_keywords_static.txt > crypto/proposal/proposal_keywords_static.c
/bin/bash: line 1: -N: command not found
This patch makes it easy to understand what is required:
$ ./configure
...
checking for perl... /usr/local/bin/perl
checking for gperf... no
configure: error: gperf version >= 3.0.0 is needed
Tests
If src/libstrongswan/crypto/proposal/proposal_keywords_static.c exists:
$ ./configure
...
checking for gperf... no
checking for stdbool.h that conforms to C99... yes
...
If gperf installed:
$ ./configure
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... yes
checking for stdbool.h that conforms to C99... yes
...
If gperf is actually /bin/echo and proposal_keywords_static.c exists:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
checking for stdbool.h that conforms to C99... yes
If gperf is actually /bin/echo and proposal_keywords_static.c doesn't exist:
checking for gperf... /usr/bin/gperf
checking gperf version >= 3.0.0... ../configure: line 18360: test: : integer expression expected
no
configure: error: gperf version >= 3.0.0 is needed","Thanks for reviewing!

checking the version number (or mentioning it)

Yes, bin/echo was just a dummy, simulating gperf 2.

gperf version 3.x has been around since 2003

Oh, I didn't know that.
gh161-gperf looks good to me!
Thanks again for your effort.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/driesmp,1,https://github.com/strongswan/strongswan/pull/162,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.","Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/driesmp,2,https://github.com/strongswan/strongswan/pull/162#issuecomment-573342927,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.","Also, the module seems to work fine with higher Python version, so I also added them (which is also out of date for the PyPi module).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/162#issuecomment-573697524,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.","setup.py is created by the Makefile (it sets the version number based on the configure script). Unfortunately, your proposed changes are deprecated. So other than the version updates I don't see us applying these changes upstream.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/driesmp,4,https://github.com/strongswan/strongswan/pull/162#issuecomment-573807300,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.",Oh yeah I see now. To be honest changing the supported versions and making the PyPi package include the test dir and its files in its src ball would already help a lot. :-). Closing this PR as it doesn't provide any value except the version changes. I don't think a new PR makes sense as you are already informed about the supported python versions.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/162#issuecomment-574200565,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.","FYI, I pushed some changes to the vici-python branch. Let me know what you think.",True,{'ROCKET': ['https://github.com/driesmp']}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/driesmp,6,https://github.com/strongswan/strongswan/pull/162#issuecomment-574225438,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.",Looking good! Looking forward to the updated package in PyPi & thanks for the rapid response.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,162,2020-01-11T18:35:39Z,2020-01-13T18:36:24Z,2020-01-14T16:04:10Z,CLOSED,False,7,0,2,https://github.com/driesmp,Support running tests through setuptools,3,[],https://github.com/strongswan/strongswan/pull/162,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/162#issuecomment-574246640,"Could after this PR it be possible to update the PyPi package of this module to also include the test folder and Python files in that folder? I saw that it was not included in the sources fetched from PyPi.
This PR helps in porting this module to FreeBSD, as FreeBSD does not use PyPi for modules but the ports tree.",Merged and released.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,163,2020-01-26T11:06:13Z,2020-01-28T14:36:02Z,2020-01-28T14:36:09Z,CLOSED,False,1,1,1,https://github.com/trofi,swanctl: fix build failure against gcc-10,1,[],https://github.com/strongswan/strongswan/pull/163,https://github.com/trofi,1,https://github.com/strongswan/strongswan/pull/163,"On gcc-10 (and gcc-9 -fno-common) build fails as:
libtool: link: gcc ... -o .libs/swanctl ...
ld: commands/load_authorities.o:strongswan/src/swanctl/./swanctl.h:33:
  multiple definition of `swanctl_dir'; commands/load_all.o:strongswan/src/swanctl/./swanctl.h:33: first defined here

gcc-10 will change the default from -fcommon to fno-common:
https://gcc.gnu.org/PR85678.
The error also happens if CFLAGS=-fno-common passed explicitly.
Reported-by: Toralf Förster
Bug: https://bugs.gentoo.org/706408","On gcc-10 (and gcc-9 -fno-common) build fails as:
libtool: link: gcc ... -o .libs/swanctl ...
ld: commands/load_authorities.o:strongswan/src/swanctl/./swanctl.h:33:
  multiple definition of `swanctl_dir'; commands/load_all.o:strongswan/src/swanctl/./swanctl.h:33: first defined here

gcc-10 will change the default from -fcommon to fno-common:
https://gcc.gnu.org/PR85678.
The error also happens if CFLAGS=-fno-common passed explicitly.
Reported-by: Toralf Förster
Bug: https://bugs.gentoo.org/706408",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,163,2020-01-26T11:06:13Z,2020-01-28T14:36:02Z,2020-01-28T14:36:09Z,CLOSED,False,1,1,1,https://github.com/trofi,swanctl: fix build failure against gcc-10,1,[],https://github.com/strongswan/strongswan/pull/163,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/163#issuecomment-579275027,"On gcc-10 (and gcc-9 -fno-common) build fails as:
libtool: link: gcc ... -o .libs/swanctl ...
ld: commands/load_authorities.o:strongswan/src/swanctl/./swanctl.h:33:
  multiple definition of `swanctl_dir'; commands/load_all.o:strongswan/src/swanctl/./swanctl.h:33: first defined here

gcc-10 will change the default from -fcommon to fno-common:
https://gcc.gnu.org/PR85678.
The error also happens if CFLAGS=-fno-common passed explicitly.
Reported-by: Toralf Förster
Bug: https://bugs.gentoo.org/706408","Thanks for the report. The problem is not really GCC 10 or -fno-common, but the incorrectly missing extern. I pushed a fix to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,164,2020-02-05T11:16:08Z,2020-02-11T17:24:34Z,2022-03-13T07:20:51Z,CLOSED,False,287,287,201,https://github.com/jsoref,Spelling,2,[],https://github.com/strongswan/strongswan/pull/164,https://github.com/jsoref,1,https://github.com/strongswan/strongswan/pull/164,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.","Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,164,2020-02-05T11:16:08Z,2020-02-11T17:24:34Z,2022-03-13T07:20:51Z,CLOSED,False,287,287,201,https://github.com/jsoref,Spelling,2,[],https://github.com/strongswan/strongswan/pull/164,https://github.com/jsoref,2,https://github.com/strongswan/strongswan/pull/164#issuecomment-582883621,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.","I'm not sure I'll have time tonight, in which case I'll get to this on the weekend.
I'm not terribly surprised at the amount of finds even with your use of codespell, as I've run this tool on other projects that use it. It's obviously better than nothing. And until fairly recently, I haven't offered a user friendly way to integrate my tooling. (I'm finally writing my third round of integrations this week. The first was for checkstyle, the second was removed as it was too painful for a group, and the third I just turned on for my employer yesterday.) As I'm improving my tooling, I'm probably at the point where I could easily generate a table and statistics for suggesting additions to codespell.
Fwiw, for a project of this size and age, I'd say your codebase is about where I'd expect.
And thanks for the prompt response, I know it can be pretty daunting to get such a large PR.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,164,2020-02-05T11:16:08Z,2020-02-11T17:24:34Z,2022-03-13T07:20:51Z,CLOSED,False,287,287,201,https://github.com/jsoref,Spelling,2,[],https://github.com/strongswan/strongswan/pull/164,https://github.com/jsoref,3,https://github.com/strongswan/strongswan/pull/164#issuecomment-583950731,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.",@tobiasbrunner; I think I've addressed everything...,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,164,2020-02-05T11:16:08Z,2020-02-11T17:24:34Z,2022-03-13T07:20:51Z,CLOSED,False,287,287,201,https://github.com/jsoref,Spelling,2,[],https://github.com/strongswan/strongswan/pull/164,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/164#issuecomment-584084500,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.","Thanks, looks good. I think it should be fine to squash all changes into a single commit, except perhaps the ""routability"" fix (because of the code changes). Would you mind preparing this?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,164,2020-02-05T11:16:08Z,2020-02-11T17:24:34Z,2022-03-13T07:20:51Z,CLOSED,False,287,287,201,https://github.com/jsoref,Spelling,2,[],https://github.com/strongswan/strongswan/pull/164,https://github.com/jsoref,5,https://github.com/strongswan/strongswan/pull/164#issuecomment-584249385,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.",@tobiasbrunner: done,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,164,2020-02-05T11:16:08Z,2020-02-11T17:24:34Z,2022-03-13T07:20:51Z,CLOSED,False,287,287,201,https://github.com/jsoref,Spelling,2,[],https://github.com/strongswan/strongswan/pull/164,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/164#issuecomment-584753526,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Notes:

I try to tag things I'm less sure of w/ ??
I'm usually more thorough about figuring out which items are third party libraries. For this repo, I didn't. If code comes from an upstream, let me know and I'll shift the changes from this PR to a PR/similar for that upstream
@defgroup some instances of this are of the form @defgroup foo foo and others were of the form @defgroup foot foo -- I didn't see any particular indication as to why there was a divergence and some fraction of the time I dropped the trailing t and I think I generally included ?? in my commit messages
I generally try to enforce a single spelling for a word. (In some cases for this repo, I let multiple spellings remain as one was dominant and another appeared to be coming from a dependency.)
I generally express a preference between en-US and en-GB, although I didn't apply it much here (mostly synchroniz*)
I do try to ignore files (you can see what I ignored by looking at https://github.com/strongswan/strongswan/compare/master...jsoref:ignore?expand=1) -- if there are additional files/paths I should ignore, let me know, I just add them (i.e. remove them) in that branch and rebase my work and then rebase back onto master
Sometimes I try to address indentation damage when I make changes, I didn't for this repository. I'd rather do that once people are happy w/ the general changes as such things increase the pain of merging/rebasing while I'm working on a PR.
Names, email addresses, brands, domains: I generally assume people aren't intentionally misspelling an entity, e.g. strongwan / stronswan. My preference is that for samples things be clearly distinct as opposed to ""oh, that's a typo"".
Yes, I've changed function names, defines, local variables, as well as comments, documentation, and the occasional license header.
I'm willing to split things into a limited number of distinct PRs as requested
I prefer to squash at the very end, as it's much harder to deal w/ merge conflicts once my changes are squashed.",Thanks a lot for your work on this.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/165,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/165#issuecomment-590914314,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","Thanks. There were some issue (code style, but also some bugs), and several changes didn't seem necessary to me (some could maybe get added later e.g. make the source IP optional in any route). I pushed a commit with fixes on top of your (original) commit to the 3118-throw-type-routes branch. Let me know what you think.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/165#issuecomment-590915488,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","The PR currently still has the problem that the route entries for the passthrough routes aren't found when searched through for deleting. That's probably because the routes don't have a source IP. We could either solve this by making route_entry_equals() don't care about the src_ip if either is NULL or we make del_route aware of passthrough policies so we can explicitely set the src_ip to NULL there.
A good way to check if this works is by configuring a passthrough policy and then stopping strongswan. Then check table 220. if the code works, it's empty. If it's not, there'll still be the passthrough route.
Please let me know what you think about that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/165#issuecomment-590917086,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","A major point of why I implemented this is so we can install routes when we don't have a source IP in the network yet. With the changes, my own problem (strongSwan doesn't create passthrough policies when my box boots) is solved. It also solves those issues above. I suspect my own problem is caused by the fact that the network is down and strongSwan doesn't get any RTM_NEWROUTE messages from netlink at that time. The code ""elegantly"" solves this issue too.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/165#issuecomment-590932863,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","The delete issue should be fixed now (the type, UNICAST or THROW, has to be the same in the two requests). As for the other problem, we could probably just make the source IP optional for these routes (if the local TS includes localhost, e.g. if it is 0.0.0.0/0, it kinda already is, it's just not NULL but 0.0.0.0/0). I pushed another commit that does that.
By the way, I get weird routes for IPv6 (... dev lo ... metric 1024 error -11 ...), but that could also just be iproute2.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,6,https://github.com/strongswan/strongswan/pull/165#issuecomment-591424260,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","With that code, I get a throw route for 0.0.0.0/0 in that table and that's definitely not wanted.
After a couple of seconds, the issue is somehow resolved and the ususal route is in there.
I added a log file in feature 3118.
EDIT: I can't reproduce the IPv6 issue:
ip -6 r s t all
default dev wlp2s0 table 220 proto static src 2a03:4000:20:10c::1:2 metric 1024 mtu 1200 advmss 1240 pref medium
::1 dev lo proto kernel metric 256 pref medium
2a03:4000:20:10c::1:2 dev dummy-vip proto kernel metric 256 pref medium
fe80::/64 dev dummy-vip proto kernel metric 256 pref medium
fe80::/64 dev docker0 proto kernel metric 256 linkdown pref medium
fe80::/64 dev wlp2s0 proto kernel metric 600 pref medium
local ::1 dev lo table local proto kernel metric 0 pref medium
local 2a03:4000:20:10c::1:2 dev dummy-vip table local proto kernel metric 0 pref medium
local fe80::42:b5ff:fe75:5a72 dev docker0 table local proto kernel metric 0 pref medium
local fe80::1b36:cd2b:5f89:dc38 dev wlp2s0 table local proto kernel metric 0 pref medium
local fe80::1c1d:16ff:fe33:92f9 dev dummy-vip table local proto kernel metric 0 pref medium
ff00::/8 dev dummy-vip table local metric 256 pref medium
ff00::/8 dev wlp2s0 table local metric 256 pref medium
ff00::/8 dev docker0 table local metric 256 linkdown pref medium

connections {
	vserver {
		local_port = 0
		remote_addrs = sds.thermi.consulting
		version = 2
		mobike = yes
		vips = 0.0.0.0,::
		fragmentation = yes
		encap = yes
		proposals = chacha20poly1305-aes256gcm16-prfsha512-curve25519
		local {
			auth = eap-tls
			certs = laptop-bc1505.pem
		}
		remote {
			auth = pubkey
			id = thermi.consulting
		}
		children {
			mobile-eap-tls {
				ipcomp = yes
				dpd_action = restart
				esp_proposals = chacha20poly1305-curve25519
				remote_ts = 192.168.178.0/24, 172.16.20.0/22, 172.16.24.0/24, 172.16.25.1/32, 2000::/3, 3000::/3
				# start_action = trap
			}
			mobile-eap-tls-all {
				ipcomp = no
				dpd_action = restart
				esp_proposals = chacha20poly1305-curve25519
				remote_ts = 0.0.0.0/0, ::/0
				start_action = trap
			}
		}
	}
	bypasses {
		remote_addrs = 127.0.0.1
		children {
			mercure-hotel-bypass {
				local_ts = 10.141.74.0/23
				remote_ts = 10.141.74.0/23
				start_action = trap
				mode = pass
			}
			33c3-bypass {
				local_ts = 151.217.0.0/16
				remote_ts = 151.217.0.0/16
				start_action = trap
				mode = pass
			}
			ipv6-ll {
				local_ts = fe80::/10
				remote_ts = fe80::/10
				start_action = trap
				mode = pass
			}
			local-lan {
				local_ts = 192.168.178.0/24
				remote_ts = 192.168.178.0/24
				start_action = trap
				mode = pass
			}
			bmw-schmid-gast {
				local_ts = 192.168.1.1/24
				remote_ts = 192.168.1.1/24
				start_action = trap
				mode = pass
			}
			parkhoteldavid-worldwlan {
				local_ts = 192.168.110.0/24
				remote_ts = 192.168.110.0/24
				start_action = trap
				mode = pass
			}
                        dhcp-client-v4 {
                                local_ts = 0.0.0.0/0[udp/67]
                                remote_ts = 0.0.0.0/0[udp/68]
                                mode = pass
				start_action = trap
                        }
                        dhcp-server-v4 {
                                local_ts = 0.0.0.0/0[udp/68]
                                remote_ts = 0.0.0.0/0[udp/67]
				start_action = trap
                                mode = pass
                        }

                        dhcp-client-v6 {
                                local_ts = ::/0[udp/67]
                                remote_ts = ::/0[udp/68]
				start_action = trap
                                mode = pass
                        }
			dns-pass {
				local_ts = 0.0.0.0/0
				remote_ts = 0.0.0.0/0
				mark_out = 0x12
				mark_in = 0x12
				priority = 800000
				start_action = trap
				mode = pass
			}
                        dhcp-server-v6 {
                                local_ts = ::/0[udp/68]
                                remote_ts = ::/0[udp/67]
				start_action = trap
                                mode = pass
                        }
			thermicorp-dns {
				remote_ts = 172.16.25.1/32
				local_ts = 0.0.0.0/0
				start_action = trap
				mode = drop
				priority = 500000
			}
			worldwlan {
				remote_ts = 192.168.100.0/24
				local_ts = 192.168.100.0/24
				start_action = trap
				mode = pass
			}
			yalloHome {
				remote_ts = 192.168.8.0/24
				local_ts = 192.168.8.0/24
				start_action = trap
				mode = pass
			}
			vboxnet0 {
				remote_ts = 192.168.56.0/24
				local_ts = 192.168.56.0/24
				start_action = trap
				mode = pass
			}
			multicast-out {
				remote_ts = 224.0.0.0/4
				local_ts = 0.0.0.0/0
				mark_in = 0x0				
				mark_out = 0x0
				start_action = trap
				mode = pass
				priority = 500
			}
			multicast-in {
				remote_ts = 0.0.0.0/0
				local_ts = 224.0.0.0/4
				mark_in = 0x0
				mark_out = 0x0
				start_action = trap
				mode = pass
				priority = 500
			}
			contauro {
				remote_ts = 10.12.0.0/16
				local_ts = 10.12.0.0/16
				start_action = trap
				mode = pass
			}
			docker0 {
				remote_ts = 172.17.0.0/16
				local_ts = 172.17.0.0/16
				start_action = trap
				priority = 100000
				mode = pass
			}
			virbr0 {
				local_ts = 192.168.122.0/24
				remote_ts = 192.168.122.0/24
				start_action = trap
				mode = pass
			}
		}
	}
}

secrets {
	include secrets/*
}


ip r s t 220
throw default proto static 
throw 10.12.0.0/16 proto static 
throw 10.141.74.0/23 proto static 
throw 151.217.0.0/16 proto static 
throw 172.17.0.0/16 proto static 
throw 192.168.1.0/24 proto static 
throw 192.168.8.0/24 proto static 
throw 192.168.56.0/24 proto static 
throw 192.168.100.0/24 proto static 
throw 192.168.110.0/24 proto static 
throw 192.168.122.0/24 proto static 
throw 192.168.178.0/24 proto static 
throw 224.0.0.0/4 proto static",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/165#issuecomment-591438016,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","With that code, I get a throw route for 0.0.0.0/0 in that table and that's definitely not wanted.

What problem do you see with that? And wasn't that the case before? Anyway, it's caused by your dns-pass connection (only policies with port/protocol are ignored when installing routes, like e.g. dhcp-server-v4).

I can't reproduce the IPv6 issue:

Try configuring a bypass policy for an IPv6 subnet.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,8,https://github.com/strongswan/strongswan/pull/165#issuecomment-591447841,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","What problem do you see with that? And wasn't that the case before? Anyway, it's caused by your /dns-pass/ connection (only policies with port/protocol are ignored when installing routes, like e.g. /dhcp-server-v4/).
That wasn't the case before. Before, the trap policy for 0.0.0.0/0 from mobile-eap-tls-all provided a route. Is that the case now? Oh, right, with VIPs we use a policy for 0.0.0.0/0 == remote_ts and later change that route. I guess that is why it works.
So your implementation makes that behave exactly the same as a passthrough policy (and its routes).

I just observed that when the tunnel is up, at some point I get a passthrough policy for 0.0.0.0/0 again and that breaks the tunnel.
 > Try configuring a bypass policy for an IPv6 subnet.
I did, it's not happening for me. I tried with fd00::/64 and there's no throw route for it either in the IPv6 routing table, just the one from the trap policy for mobile-eap-tls-all.

Kind regards

Noel

Am 26.02.20 um 14:56 schrieb Tobias Brunner:
…
     With that code, I get a throw route for 0.0.0.0/0 in that table and that's definitely not wanted.

 What problem do you see with that? And wasn't that the case before? Anyway, it's caused by your /dns-pass/ connection (only policies with port/protocol are ignored when installing routes, like e.g. /dhcp-server-v4/).

     I can't reproduce the IPv6 issue:

 Try configuring a bypass policy for an IPv6 subnet.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub <#165?email_source=notifications&email_token=AA3QSQMYQZW6O47DVISMHETREZYHTA5CNFSM4K2IMF6KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOENAKBQA#issuecomment-591438016>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AA3QSQOJARQ7GJWVDMPU6TTREZYHTANCNFSM4K2IMF6A>.


-- 
GPG Key ID: 0x63EC6658
Fingerprint: 23CA BB60 2146 05E7 7278 6592 3839 298F 63EC 6658",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/165#issuecomment-591473371,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","Before, the trap policy for 0.0.0.0/0 from mobile-eap-tls-all provided a route. Is that the case now? Oh, right, with VIPs we use a policy for 0.0.0.0/0 == remote_ts and later change that route. I guess that is why it works.

Yes, those two routes will conflict (same destination net). The effect should be the same (as long as there is a route to fall back on). The policies are ordered, but due to the marks, two separate policies are tracked. So this results in two routes for the same destination, which are not really ordered (so I suppose whichever is installed last wins). Later, the route that references the VIP as source IP will replace it.  I guess, before, there just wasn't any difference between the routes installed for the passthrough and the wildcard trap policies.

I just observed that when the tunnel is up, at some point I get a passthrough policy for 0.0.0.0/0 again and that breaks the tunnel.

Route or policy? The policy should always be there (but only apply to marked packets anyway), the route shouldn't suddenly change, though (the one with the VIP should be more specific and be kept installed).

I tried with fd00::/64 and there's no throw route for it either in the IPv6 routing table, just the one from the trap policy for mobile-eap-tls-all.

I think this happens if no interface can be determined in install_route() (basically if you don't already have a route to that subnet).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,10,https://github.com/strongswan/strongswan/pull/165#issuecomment-591485983,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","Yes, those two routes will conflict (same destination net). The effect should be the same (as long as there is a route to fall back on). The policies are ordered, but due to the marks, two separate policies are tracked. So this results in two routes for the same destination, which are not really ordered (so I suppose whichever is installed last wins). Later, the route that references the VIP as source IP will replace it. I guess, before, there just wasn't any difference between the routes installed for the passthrough and the wildcard trap policies.



I just observed that when the tunnel is up, at some point I get a passthrough policy for 0.0.0.0/0 again and that breaks the tunnel.

Route or policy? The policy should always be there (but only apply to marked packets anyway), the route shouldn't suddenly change, though (the one with the VIP should be more specific and be kept installed).

Route.


I tried with fd00::/64 and there's no throw route for it either in the IPv6 routing table, just the one from the trap policy for mobile-eap-tls-all.

I think this happens if no interface can be determined in install_route() (basically if you don't already have a route to that subnet).

I tested it and it work if the parent of the child that specifies the passthrough policies points at an IPv6 address with remote_addrs. If it's 127.0.0.1, it doesn't work. It also works if you have a route to that net. In the other cases a throw route is not installed.
Also, there the route needs to be there before strongswan starts. Adding the route after starting strongswan and reloading the config via swanctl doesn't make it add that throw route.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,11,https://github.com/strongswan/strongswan/pull/165#issuecomment-591493319,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","I tested it and it works only if the parent of the child that specifies the passthrough policies points at an IPv6 address with remote_addrs. If it's 127.0.0.1, it doesn't work.

Hm, that address can't have any effect on bypass/drop policies (it's not even passed to the shunt manager, only the child config is).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,12,https://github.com/strongswan/strongswan/pull/165#issuecomment-591497235,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","Hmmh. Could be a fluke then.
EDIT: Was a fluke.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,13,https://github.com/strongswan/strongswan/pull/165#issuecomment-591501717,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.",I pushed a commit that should fix the issue with the interface/nexthop.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,14,https://github.com/strongswan/strongswan/pull/165#issuecomment-591533959,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","Thank you, that commit also fixed the issue I wanted to solve with this PR. :)
LGTM now.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/tobiasbrunner,15,https://github.com/strongswan/strongswan/pull/165#issuecomment-591988241,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.",What about the issue with the route changing while the tunnel with VIP is up? Does that still happen (e.g. when routes/addresses or perhaps the config change)? Do you have a log of that?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,165,2020-02-24T13:36:56Z,2020-03-10T11:55:45Z,2020-03-10T11:55:45Z,CLOSED,False,179,133,10,https://github.com/Thermi,Implement passthrough type routes and use them on Linux,2,[],https://github.com/strongswan/strongswan/pull/165,https://github.com/Thermi,16,https://github.com/strongswan/strongswan/pull/165#issuecomment-592963988,"Enables us to ignore any future kernel features for routes unless
we actually need to consider them for the source IP routes.
Also enables us to actually really skip IPsec processing for those networks
(Because even the routes don't touch those packets). It's more what
users expect.","I haven't encountered that again, luckily. And no, no logs of that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,166,2020-03-25T17:33:22Z,2020-03-27T11:29:28Z,2020-03-27T11:29:28Z,CLOSED,False,5,3,1,https://github.com/rkunze,charon-nm: Allow fixed values for charon-nm.port and charon-nm.port_nat_t,1,[],https://github.com/strongswan/strongswan/pull/166,https://github.com/rkunze,1,https://github.com/strongswan/strongswan/pull/166,"This change allows to optionally set charon-nm.port and/or charon-nm.port_nat_t to a fixed value, while retaining the default of using a random port.
My use case for this is a roadwarrior VPN connection over IPv6 (with MOBIKE enabled), where the client sits behind a customer grade router with a packet filter firewall (Fritz!Box in my case, but should not really matter).
In this scenario, initiating the VPN works because the firewall detects the outgoing packets to ports 500/4500 on the server and allows answer packets. Likewise, ESP works because the firewall detects an active connection initiated by the client side. But when the server tries to rekey the child SA, the firewall has already timed out the initial UDP connection, and the CREATE_CHILD_SA request fails.
The simple solution here is to configure the firewall to allow incoming packets to the client on the UDP port(s) used by Strongswan, but the random ports used by charon-nm make this impractical.","This change allows to optionally set charon-nm.port and/or charon-nm.port_nat_t to a fixed value, while retaining the default of using a random port.
My use case for this is a roadwarrior VPN connection over IPv6 (with MOBIKE enabled), where the client sits behind a customer grade router with a packet filter firewall (Fritz!Box in my case, but should not really matter).
In this scenario, initiating the VPN works because the firewall detects the outgoing packets to ports 500/4500 on the server and allows answer packets. Likewise, ESP works because the firewall detects an active connection initiated by the client side. But when the server tries to rekey the child SA, the firewall has already timed out the initial UDP connection, and the CREATE_CHILD_SA request fails.
The simple solution here is to configure the firewall to allow incoming packets to the client on the UDP port(s) used by Strongswan, but the random ports used by charon-nm make this impractical.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,166,2020-03-25T17:33:22Z,2020-03-27T11:29:28Z,2020-03-27T11:29:28Z,CLOSED,False,5,3,1,https://github.com/rkunze,charon-nm: Allow fixed values for charon-nm.port and charon-nm.port_nat_t,1,[],https://github.com/strongswan/strongswan/pull/166,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/166#issuecomment-604286414,"This change allows to optionally set charon-nm.port and/or charon-nm.port_nat_t to a fixed value, while retaining the default of using a random port.
My use case for this is a roadwarrior VPN connection over IPv6 (with MOBIKE enabled), where the client sits behind a customer grade router with a packet filter firewall (Fritz!Box in my case, but should not really matter).
In this scenario, initiating the VPN works because the firewall detects the outgoing packets to ports 500/4500 on the server and allows answer packets. Likewise, ESP works because the firewall detects an active connection initiated by the client side. But when the server tries to rekey the child SA, the firewall has already timed out the initial UDP connection, and the CREATE_CHILD_SA request fails.
The simple solution here is to configure the firewall to allow incoming packets to the client on the UDP port(s) used by Strongswan, but the random ports used by charon-nm make this impractical.","Thanks. I pushed a simpler change to the gh166-nm-ports branch.

But when the server tries to rekey the child SA, the firewall has already timed out the initial UDP connection, and the CREATE_CHILD_SA request fails.

I guess an alternative would be to force sending NAT keep-alives even if no NAT is detected. That might prevent the firewall from blocking inbound traffic. I suppose you could also send regular DPDs from the server to achieve a similar effect (the NM client currently does not send any DPDs).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,166,2020-03-25T17:33:22Z,2020-03-27T11:29:28Z,2020-03-27T11:29:28Z,CLOSED,False,5,3,1,https://github.com/rkunze,charon-nm: Allow fixed values for charon-nm.port and charon-nm.port_nat_t,1,[],https://github.com/strongswan/strongswan/pull/166,https://github.com/rkunze,3,https://github.com/strongswan/strongswan/pull/166#issuecomment-604951037,"This change allows to optionally set charon-nm.port and/or charon-nm.port_nat_t to a fixed value, while retaining the default of using a random port.
My use case for this is a roadwarrior VPN connection over IPv6 (with MOBIKE enabled), where the client sits behind a customer grade router with a packet filter firewall (Fritz!Box in my case, but should not really matter).
In this scenario, initiating the VPN works because the firewall detects the outgoing packets to ports 500/4500 on the server and allows answer packets. Likewise, ESP works because the firewall detects an active connection initiated by the client side. But when the server tries to rekey the child SA, the firewall has already timed out the initial UDP connection, and the CREATE_CHILD_SA request fails.
The simple solution here is to configure the firewall to allow incoming packets to the client on the UDP port(s) used by Strongswan, but the random ports used by charon-nm make this impractical.","Thanks. I pushed a simpler change to the gh166-nm-ports branch.

Great, thank you!

I guess an alternative would be to force sending NAT keep-alives even if no NAT is detected.

Probably, yes. But setting a static port was easier to figure out for me (as a complete Strongswan newbie, I've only ever used it until now).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,167,2020-04-10T19:42:56Z,2020-05-07T07:20:31Z,2020-05-07T07:20:31Z,CLOSED,False,2,0,1,https://github.com/ffontaine,src/Makefile.am: fix build with netlink but without libcharon,1,[],https://github.com/strongswan/strongswan/pull/167,https://github.com/ffontaine,1,https://github.com/strongswan/strongswan/pull/167,"xfrmi has been moved to a separate directory since version 5.8.0 and d74ddd7
However, build of xfrmi will fail without libcharon:
make[4]: *** No rule to make target '../../src/libcharon/plugins/kernel_netlink/libstrongswan-kernel-netlink.la', needed by 'xfrmi'.  Stop.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","xfrmi has been moved to a separate directory since version 5.8.0 and d74ddd7
However, build of xfrmi will fail without libcharon:
make[4]: *** No rule to make target '../../src/libcharon/plugins/kernel_netlink/libstrongswan-kernel-netlink.la', needed by 'xfrmi'.  Stop.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,167,2020-04-10T19:42:56Z,2020-05-07T07:20:31Z,2020-05-07T07:20:31Z,CLOSED,False,2,0,1,https://github.com/ffontaine,src/Makefile.am: fix build with netlink but without libcharon,1,[],https://github.com/strongswan/strongswan/pull/167,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/167#issuecomment-613309916,"xfrmi has been moved to a separate directory since version 5.8.0 and d74ddd7
However, build of xfrmi will fail without libcharon:
make[4]: *** No rule to make target '../../src/libcharon/plugins/kernel_netlink/libstrongswan-kernel-netlink.la', needed by 'xfrmi'.  Stop.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","We can probably just move the if USE_KERNEL_NETLINK block into the existing if USE_LIBCHARON block (see gh167-xfrmi-libcharon branch).
May I ask, what exactly do you build if you build without libcharon (the core component of the strongSwan project)?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,167,2020-04-10T19:42:56Z,2020-05-07T07:20:31Z,2020-05-07T07:20:31Z,CLOSED,False,2,0,1,https://github.com/ffontaine,src/Makefile.am: fix build with netlink but without libcharon,1,[],https://github.com/strongswan/strongswan/pull/167,https://github.com/ffontaine,3,https://github.com/strongswan/strongswan/pull/167#issuecomment-613320165,"xfrmi has been moved to a separate directory since version 5.8.0 and d74ddd7
However, build of xfrmi will fail without libcharon:
make[4]: *** No rule to make target '../../src/libcharon/plugins/kernel_netlink/libstrongswan-kernel-netlink.la', needed by 'xfrmi'.  Stop.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","I'm trying to bump the strongswan that we have on buildroot: https://git.buildroot.net/buildroot/tree/package/strongswan and I stumbled on this issue. We're still on 5.6.3 which is getting old. We have backported some CVE patches but having an up to date package is always better.
Since the very beginning, we have an option to allow our users to enable/disable charon as allowed by your configure script. However, I don't know if many of our users enable strongswan without charon.
I fully agree that your proposal in gh167-xfrmi-libcharon branch is better than mine.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,167,2020-04-10T19:42:56Z,2020-05-07T07:20:31Z,2020-05-07T07:20:31Z,CLOSED,False,2,0,1,https://github.com/ffontaine,src/Makefile.am: fix build with netlink but without libcharon,1,[],https://github.com/strongswan/strongswan/pull/167,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/167#issuecomment-613323843,"xfrmi has been moved to a separate directory since version 5.8.0 and d74ddd7
However, build of xfrmi will fail without libcharon:
make[4]: *** No rule to make target '../../src/libcharon/plugins/kernel_netlink/libstrongswan-kernel-netlink.la', needed by 'xfrmi'.  Stop.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Thanks for the context.

Since the very beginning, we have an option to allow our users to enable/disable charon as allowed by your configure script. However, I don't know if many of our users enable strongswan without charon.

charon is only one user of libcharon (basically a small wrapper around it). Others are e.g. charon-systemd, charon-cmd or charon-nm, which is why you can build without charon daemon just fine and e.g. use charon-systemd instead. But it generally makes not much sense to build strongSwan without any user of libcharon. The fix still makes sense, of course.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/mskalski,1,https://github.com/strongswan/strongswan/pull/168,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/168#issuecomment-623470587,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","Thanks.

Some PKCS#11 libraries do not support combined hashing and signature creation.

You mean the tokens don't support these mechanisms and neither does the middleware/libraries for them provide them in software so PKCS#11 clients don't have to bother? Could you provide any details on what kind of tokens/libraries you are referring to? (I'm just wondering because this never has been an issue in all the years the pkcs11 plugin existed.)

Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.

The default shouldn't change. However, I don't think a config option is necessary for this. Instead we should query the token's supported mechanisms and fall back to software hashing automatically. I pushed such a change to the gh168-pkcs11-sig-hash branch.

Also added mechanisms with SHA-224.

I don't think that's necessary, I doubt anybody has been missing it (using at least SHA-256 should be the default nowadays for signatures).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/mskalski,3,https://github.com/strongswan/strongswan/pull/168#issuecomment-624354212,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","Thanks.

Some PKCS#11 libraries do not support combined hashing and signature creation.

You mean the tokens don't support these mechanisms and neither does the middleware/libraries for them provide them in software so PKCS#11 clients don't have to bother? Could you provide any details on what kind of tokens/libraries you are referring to? (I'm just wondering because this never has been an issue in all the years the pkcs11 plugin existed.)

Yes, I mean PKCS#11 middleware, as pkcs11-plugin does not know about underlying hardware.
I have some smartcards (particularly named ENCARD) we use internally in my company, and PKCS#11 library does not support hashing at all. As you can see this patch was made over 3 years ago for use pkcs11 plugin with these cards. I think I might had send this patch few years ago to strongswan-users list, but it was missed.
In fact in was not so uncommon for other PKCS#11 libraries I worked with to have no support for hashing, as they give mainly support for digital signature performed by card. On the other hand I did not find any PKCS#11 library which does hashing on card, so in my opinion there is no point to use mechanisms with hashing, especially when strongswan have great hasher plugins.


Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.

The default shouldn't change. However, I don't think a config option is necessary for this. Instead we should query the token's supported mechanisms and fall back to software hashing automatically. I pushed such a change to the gh168-pkcs11-sig-hash branch.

Yes it could be done like that, the only drawback I can see is slowing signature a little bit, as it makes extra calls into PKCS#11 library and implementations vary. Sometimes querying supported mechanisms makes access to underlying hardware and smartcards are generally slow.
But your gh168-pkcs11-sig-hash branch is something I had in my mind when tried to make pkcs11 plugin to work with our smartcards. My only concern is that creating every time mechanism_enumerator for checking if every next algorithm on table is supported is suboptimal from the point of view calls into PKCS#11 library. But it is compact and elegant :-)


Also added mechanisms with SHA-224.

I don't think that's necessary, I doubt anybody has been missing it (using at least SHA-256 should be the default nowadays for signatures).

Yes, you're right, it was for completness, but implementation is almost at no cost at all and SHA-224 is available in strongswan hasher plugins.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/mskalski,4,https://github.com/strongswan/strongswan/pull/168#issuecomment-624355048,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","I'll check if it your gh168-pkcs11-sig-hash branch is working with our cards, I don't expect it doesn't.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/168#issuecomment-624516884,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","On the other hand I did not find any PKCS#11 library which does hashing on card, so in my opinion there is no point to use mechanisms with hashing, especially when strongswan have great hasher plugins.

There definitely are cards that support hashing on-card (at least according to the OpenSC sources). But I've little practical experience with this. And if the card or middleware supports hashing it allows removing some of the plugins. Also, because CKM_RSA_PKCS is likely also supported if mechanisms with hashing are, checking in this order seemed more logical to me (in particular because we'd have to check if a hasher can be instantiated if we first selected CKM_RSA_PKCS  and then check mechanisms with hashing as fallback, which would complicate the code quite a bit).

Sometimes querying supported mechanisms makes access to underlying hardware and smartcards are generally slow.

I've only looked at OpenSC, which doesn't do that (the list of mechanisms is created once during initialization of the card).

My only concern is that creating every time mechanism_enumerator for checking if every next algorithm on table is supported is suboptimal from the point of view calls into PKCS#11 library.

At most two such calls are required per signature, and since creating the signature via PKCS#11 is relatively slow anyway the overhead might not be that significant.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/mskalski,6,https://github.com/strongswan/strongswan/pull/168#issuecomment-624555122,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","On the other hand I did not find any PKCS#11 library which does hashing on card, so in my opinion there is no point to use mechanisms with hashing, especially when strongswan have great hasher plugins.

There definitely are cards that support hashing on-card (at least according to the OpenSC sources). But I've little practical experience with this. And if the card or middleware supports hashing it allows removing some of the plugins. Also, because CKM_RSA_PKCS is likely also supported if mechanisms with hashing are, checking in this order seemed more logical to me (in particular because we'd have to check if a hasher can be instantiated if we first selected CKM_RSA_PKCS and then check mechanisms with hashing as fallback, which would complicate the code quite a bit).

Yes, I know most of today cards support hashing, but in my observations no PKCS#11 library use hashing on card.


Sometimes querying supported mechanisms makes access to underlying hardware and smartcards are generally slow.

I've only looked at OpenSC, which doesn't do that (the list of mechanisms is created once during initialization of the card).

Problem is not with mechanism caching or not, but usually every call into PKCS#11 library with arguments  of type CK_SLOT_ID or CK_SESSION_HANDLE should involve checking if token (card) is still present and was not replaced in the meantime. So this is the case where calling PKCS#11 functions can be slow, especially for hashing large data input. But it depends on many factors i.e. smartcard reader speed, and of course PKCS#11 implementation details.


My only concern is that creating every time mechanism_enumerator for checking if every next algorithm on table is supported is suboptimal from the point of view calls into PKCS#11 library.

At most two such calls are required per signature, and since creating the signature via PKCS#11 is relatively slow anyway the overhead might not be that significant.

OK, seems legit.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/mskalski,7,https://github.com/strongswan/strongswan/pull/168#issuecomment-624579527,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.","As your branch gh168-pkcs11-sig-hash (0a67ab5) works well with our smartcards, I think this PR can be closed.
Thanks again :-)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,168,2020-04-28T22:05:36Z,2020-05-07T07:12:56Z,2020-05-07T07:13:11Z,CLOSED,False,207,27,5,https://github.com/mskalski,pkcs11-plugin: Add support for tokens which don't support hashing with signature,1,[],https://github.com/strongswan/strongswan/pull/168,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/168#issuecomment-625074484,"Some PKCS#11 libraries do not support combined hashing and signature creation.
For now only RSA signature is performed (hashing is done using external hasher i.e. openssl or gnutls), as virtually all PKCS#11 libraries support this kind of operation.
Added option in strongswan.conf: pkcs11.use_sign_hasher for enabling old behaviour - using signature mechanism with hashing done using PKCS#11 library.
Also added mechanisms with SHA-224.",Thanks for testing. I pushed the change to master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,169,2020-05-03T21:32:43Z,2020-05-04T07:08:01Z,2020-05-07T12:52:28Z,CLOSED,False,17,3,2,https://github.com/miadz,Can one use a MySQL backend for user authentication in a strongswan VPN server (new)?,1,[],https://github.com/strongswan/strongswan/pull/169,https://github.com/miadz,1,https://github.com/strongswan/strongswan/pull/169,"hi
We have installed and configured a strongswan VPN server with username / password authentication. Is it possible to store the users' credentials in a MySQL backend and configure strongswan to use the backend for this purpose?
this is old question but , I don't know what settings to add in the database ?
login method : EAP this is my user credentials ex: username: test pass : test
INSERT INTO identities (type, data) VALUES (2, X'74657374'); INSERT INTO shared_secrets (type, data) VALUES (2, X'74657374'); INSERT INTO shared_secret_identity (shared_secret, identity) VALUES (1, 1);
and not worked!
charon log:
07[IKE] no EAP key found for hosts 'CN=mydomain.com' - 'test'
what other setting must add to database ? can any one say exactly ?
wiki not enough for me !
https://serverfault.com/questions/1015477/can-one-use-a-mysql-backend-for-user-authentication-in-a-strongswan-vpn-server","hi
We have installed and configured a strongswan VPN server with username / password authentication. Is it possible to store the users' credentials in a MySQL backend and configure strongswan to use the backend for this purpose?
this is old question but , I don't know what settings to add in the database ?
login method : EAP this is my user credentials ex: username: test pass : test
INSERT INTO identities (type, data) VALUES (2, X'74657374'); INSERT INTO shared_secrets (type, data) VALUES (2, X'74657374'); INSERT INTO shared_secret_identity (shared_secret, identity) VALUES (1, 1);
and not worked!
charon log:
07[IKE] no EAP key found for hosts 'CN=mydomain.com' - 'test'
what other setting must add to database ? can any one say exactly ?
wiki not enough for me !
https://serverfault.com/questions/1015477/can-one-use-a-mysql-backend-for-user-authentication-in-a-strongswan-vpn-server",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,169,2020-05-03T21:32:43Z,2020-05-04T07:08:01Z,2020-05-07T12:52:28Z,CLOSED,False,17,3,2,https://github.com/miadz,Can one use a MySQL backend for user authentication in a strongswan VPN server (new)?,1,[],https://github.com/strongswan/strongswan/pull/169,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/169#issuecomment-623295838,"hi
We have installed and configured a strongswan VPN server with username / password authentication. Is it possible to store the users' credentials in a MySQL backend and configure strongswan to use the backend for this purpose?
this is old question but , I don't know what settings to add in the database ?
login method : EAP this is my user credentials ex: username: test pass : test
INSERT INTO identities (type, data) VALUES (2, X'74657374'); INSERT INTO shared_secrets (type, data) VALUES (2, X'74657374'); INSERT INTO shared_secret_identity (shared_secret, identity) VALUES (1, 1);
and not worked!
charon log:
07[IKE] no EAP key found for hosts 'CN=mydomain.com' - 'test'
what other setting must add to database ? can any one say exactly ?
wiki not enough for me !
https://serverfault.com/questions/1015477/can-one-use-a-mysql-backend-for-user-authentication-in-a-strongswan-vpn-server",This is not an issue tracker. Please refer to our support page.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,170,2020-05-10T15:07:34Z,2020-05-11T08:05:08Z,2020-05-11T08:05:08Z,CLOSED,False,1,1,1,https://github.com/ConiKost,Makefile.am: store appdata to /usr/share/metainfo,1,[],https://github.com/strongswan/strongswan/pull/170,https://github.com/ConiKost,1,https://github.com/strongswan/strongswan/pull/170,"The path '/usr/share/appdata' is deprecated and
should be changed to '/usr/share/metainfo'.
See section: 2.1.2. Filesystem locations
https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html
Signed-off-by: Conrad Kostecki conrad@kostecki.com","The path '/usr/share/appdata' is deprecated and
should be changed to '/usr/share/metainfo'.
See section: 2.1.2. Filesystem locations
https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html
Signed-off-by: Conrad Kostecki conrad@kostecki.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,170,2020-05-10T15:07:34Z,2020-05-11T08:05:08Z,2020-05-11T08:05:08Z,CLOSED,False,1,1,1,https://github.com/ConiKost,Makefile.am: store appdata to /usr/share/metainfo,1,[],https://github.com/strongswan/strongswan/pull/170,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/170#issuecomment-626542211,"The path '/usr/share/appdata' is deprecated and
should be changed to '/usr/share/metainfo'.
See section: 2.1.2. Filesystem locations
https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html
Signed-off-by: Conrad Kostecki conrad@kostecki.com",Thanks. I've pushed a commit to that effect to master (73b6033).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/sladkani,1,https://github.com/strongswan/strongswan/pull/171,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.","Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/171#issuecomment-630662814,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.","This really seems an anomaly - as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.

Although, reestablishing (which creates a new IKE_SA object from scratch) can't be fully compared to restarting the current IKE_SA, I agree. We should retry connecting to the original host. I pushed a fix to the gh171-redirect-reset branch (theoretically, remote_host could initially have been set to a value, which we can't restore when resetting, but that's generally only the case with mobile IPv6, so not sure if that's really an issue). Let me know if that works for you.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/sladkani,3,https://github.com/strongswan/strongswan/pull/171#issuecomment-630692702,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.","I pushed a fix to the gh171-redirect-reset branch

I saw you augmented reset() to perform the clearing of this->remote_host in the redirected case.
Alas there is one case which I'm concerned with (not tested though):
			case INVALID_KE_PAYLOAD:
			{
			        ... 
				DBG1(DBG_IKE, ""peer didn't accept DH group %N, ""
					 ""it requested %N"", diffie_hellman_group_names,
					 bad_group, diffie_hellman_group_names, this->dh_group);

				if (this->old_sa == NULL)
				{	/* reset the IKE_SA if we are not rekeying */
					this->ike_sa->reset(this->ike_sa, FALSE);
				}

In case (after redirect) responder returned the initiator an ""invalide ke"", the initiator should probably continue with the redirect peer (and not start with the original remote).
I'm not sure I'm reading this properly though. What does this->old_sa == NULL mean?
If I'm correct, please consider passing a flag to reset().",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/sladkani,4,https://github.com/strongswan/strongswan/pull/171#issuecomment-630697462,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.","In case (after redirect) responder returned the initiator an ""invalide ke"", the initiator should probably continue with the redirect peer (and not start with the original remote).
If I'm correct, please consider passing a flag to reset().

This may also be the case for processing a COOKIE notification.  Restart with new redirected peer.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/171#issuecomment-630844613,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.","This may also be the case for processing a COOKIE notification. Restart with new redirected peer.

Good catch, thanks. I think we can use the new_spi flag as that is not set when retrying due to notifies. I updated the commit.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/sladkani,6,https://github.com/strongswan/strongswan/pull/171#issuecomment-630884282,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.","This may also be the case for processing a COOKIE notification. Restart with new redirected peer.

Good catch, thanks. I think we can use the new_spi flag as that is not set when retrying due to notifies. I updated the commit.

Thanks Tobias.
Tested. Confirmed this works as expected in the ""redirected-to a peer which is not responding, let's re-initiate with the original peer"" case.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,171,2020-05-19T07:43:09Z,2020-05-19T15:35:15Z,2020-05-19T15:35:25Z,CLOSED,False,65,1,14,https://github.com/sladkani,ike keying retry while redirected: Re-initiate with either the redirected peer or with the configured remote,3,[],https://github.com/strongswan/strongswan/pull/171,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/171#issuecomment-630902224,"Currently, if an initiator has been redirected, and it fails to reach the redirected peer during IKE_CONNECTING (and keying_tries is set), then re-initiation begins directly to the IP of the redirected peer (ignoring the original remote peer configured).
There might be situations when an admin would like to enforce the re-initiation to the the originally configured remote (which is the entity responsible arbitration using redirection) - for example, a different or more appropriate redirect answer might be returned.
Add a flag which controls the behavior of keying_tries: whether to re-initiate with the redirected peer (default), or with the configured remote.
swanctl.conf:
connections..keyingtry_redirected
ipsec.conf Conn sestion:
keyingtry_redirected

This really seems an anomaly -  as in other situations (e.g. DPD failure after being established), re-initiation is performed with the originally configured remote.
If so, we can consider eliminating this new 'conn' flag and just fix the IKE_CONNECTING retry code as suggested.",Thanks for testing. Pushed to master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,172,2020-05-20T02:06:07Z,2020-07-20T12:23:55Z,2020-07-20T12:23:55Z,CLOSED,False,50,1,5,https://github.com/raviyer,Remove a certificate installed by a vici authority on unload,1,[],https://github.com/strongswan/strongswan/pull/172,https://github.com/raviyer,1,https://github.com/strongswan/strongswan/pull/172,"vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded","vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,172,2020-05-20T02:06:07Z,2020-07-20T12:23:55Z,2020-07-20T12:23:55Z,CLOSED,False,50,1,5,https://github.com/raviyer,Remove a certificate installed by a vici authority on unload,1,[],https://github.com/strongswan/strongswan/pull/172,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/172#issuecomment-631478669,"vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded","This doesn't seem ideal. If for some reason two authority sections reference the same CA certificate, removing one section would also remove the CA certificate of the other from the credential set. While I suppose that's not very common, it will also happen if an authority section is renamed and the new one is loaded before the old one is removed (that's how e.g. swanctl operates). And the same certificate might also be loaded directly via load-cert() command e.g. via swanctl if it is stored in x509ca, so removing the authority section, which might onlybe used to add URIs to a CA and not to load the certificate from somewhere else, would then also remove that CA certificate completely from the credential set.
The latter actually reveals a potential issue with the existing implementation, where the certificates associated with authority sections are stored in vici_cred_t. If CA certificates in authority sections are not stored in the same location as those loaded via load-cert(), the clear-creds() command is problematic as it will also clear those CA certificates loaded exclusively with authority sections, which are then not added again to the credential set. Only if they are re-added via load-cert(), e.g. from swanctl's x509ca directory, or the authority sections are reloaded, would the certificates still be available afterwards. I think the credential set is primarily shared to save memory and to avoid enumerating the same CA certificate multiple times (duplicate certificates are currently not filtered, so e.g. duplicate certificate requests might be sent - see e.g. issue 2560 on our issue tracker).
What exactly is your use case here? Do you load CA certificates only via load-authority() or also via load-cert()?
Anyway, I pushed a fix for the existing clear-creds() conflict to the gh172-vici-authority branch. If CA certificates are only loaded via authority section, this also ""unloads"" the CA certificate of an unloaded authority section. It also includes the patch to avoid duplicate certificate requests I mentioned in the issue linked above.
If it would be preferable to avoid the potential memory overhead and enumerating duplicate CA certificates from the two vici credential sets altogether, a slightly different approach would be to store all CA certificates in vici_authority_t with reference counting and tracking if they were loaded with an authority section. Then we could keep only one reference per CA certificate, no matter from where it was loaded. Since there usually are not that many authority sections, this might be overkill, though.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,172,2020-05-20T02:06:07Z,2020-07-20T12:23:55Z,2020-07-20T12:23:55Z,CLOSED,False,50,1,5,https://github.com/raviyer,Remove a certificate installed by a vici authority on unload,1,[],https://github.com/strongswan/strongswan/pull/172,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/172#issuecomment-631581205,"vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded","a slightly different approach would be to store all CA certificates in vici_authority_t with reference counting and tracking if they were loaded with an authority section.

I pushed such a change to the gh172-vici-ca-certs branch (includes the changes of the other branch except the one regarding certificate requests as generally no duplicate CA certificates will be enumerated here).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,172,2020-05-20T02:06:07Z,2020-07-20T12:23:55Z,2020-07-20T12:23:55Z,CLOSED,False,50,1,5,https://github.com/raviyer,Remove a certificate installed by a vici authority on unload,1,[],https://github.com/strongswan/strongswan/pull/172,https://github.com/raviyer,4,https://github.com/strongswan/strongswan/pull/172#issuecomment-631622311,"vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded","Thanks for the detailed reply.

This doesn't seem ideal. If for some reason two authority sections reference the same CA certificate, removing one section would also remove the CA certificate of the other from the credential set. While I suppose that's not very common, it will also happen if an authority section is renamed and the new one is loaded before the old one is removed (that's how e.g. swanctl operates). And the same certificate might also be loaded directly via load-cert() command e.g. via swanctl if it is stored in x509ca, so removing the authority section, which might onlybe used to add URIs to a CA and not to load the certificate from somewhere else, would then also remove that CA certificate completely from the credential set.
Agreed I will look into these scenarios.


What exactly is your use case here? Do you load CA certificates only via load-authority() or also via load-cert()?

We only load via load-authority (programmatically using vici APIs and unload-authority when we want to not trust the cert any longer.

If it would be preferable to avoid the potential memory overhead and enumerating duplicate CA certificates from the two vici credential sets altogether, a slightly different approach would be to store all CA certificates in vici_authority_t with reference counting and tracking if they were loaded with an authority section. Then we could keep only one reference per CA certificate, no matter from where it was loaded. Since there usually are not that many authority sections, this might be overkill, though.

Sounds good I may look into doing that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,172,2020-05-20T02:06:07Z,2020-07-20T12:23:55Z,2020-07-20T12:23:55Z,CLOSED,False,50,1,5,https://github.com/raviyer,Remove a certificate installed by a vici authority on unload,1,[],https://github.com/strongswan/strongswan/pull/172,https://github.com/raviyer,5,https://github.com/strongswan/strongswan/pull/172#issuecomment-631622727,"vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded","a slightly different approach would be to store all CA certificates in vici_authority_t with reference counting and tracking if they were loaded with an authority section.

I pushed such a change to the gh172-vici-ca-certs branch (includes the changes of the other branch except the one regarding certificate requests as generally no duplicate CA certificates will be enumerated here).

Thanks again. I will see the change and also study to see how ref-counting can be employed",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,172,2020-05-20T02:06:07Z,2020-07-20T12:23:55Z,2020-07-20T12:23:55Z,CLOSED,False,50,1,5,https://github.com/raviyer,Remove a certificate installed by a vici authority on unload,1,[],https://github.com/strongswan/strongswan/pull/172,https://github.com/raviyer,6,https://github.com/strongswan/strongswan/pull/172#issuecomment-631623732,"vici.load-authority installed certificates were not removed when
the authority was unloaded. The underlying mem_cred has no support
to remove certs. This change adds this support to mem_cred, vici_cred
and removes and destroys the certificate if required when the authority
is unloaded","Another thought is that since there is no unload-cert and clear-creds also removes all authorities, how about simply fail a load-cert or load-authority if the certificate already exists?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,173,2020-05-24T11:56:29Z,2020-05-25T09:52:51Z,2020-05-25T09:54:12Z,CLOSED,False,18,4,1,https://github.com/heldchen,charon-nm: allow configurable remote traffic selectors,1,[],https://github.com/strongswan/strongswan/pull/173,https://github.com/heldchen,1,https://github.com/strongswan/strongswan/pull/173,"this change allows to customize the previously hard-coded remote traffic selectors. it corresponds to ipsec.conf's rightsubnet and charon-cmd's --remote-ts parameters, but keeps the comfort of being able to toggle the connection through gnome's gui.
this does not actually write the newly added ""remote-ts"" configuration node into the NetworkManager configuration file, but will use an existing value. exposing the config setting in the gui could be done in an amended or followup PR if this is a desired change.
use case: remote firewall appliance wrongly accepts the 0.0.0.0/0 but does not actually route external traffic, leaving the user with a partially working internet connection.","this change allows to customize the previously hard-coded remote traffic selectors. it corresponds to ipsec.conf's rightsubnet and charon-cmd's --remote-ts parameters, but keeps the comfort of being able to toggle the connection through gnome's gui.
this does not actually write the newly added ""remote-ts"" configuration node into the NetworkManager configuration file, but will use an existing value. exposing the config setting in the gui could be done in an amended or followup PR if this is a desired change.
use case: remote firewall appliance wrongly accepts the 0.0.0.0/0 but does not actually route external traffic, leaving the user with a partially working internet connection.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,173,2020-05-24T11:56:29Z,2020-05-25T09:52:51Z,2020-05-25T09:54:12Z,CLOSED,False,18,4,1,https://github.com/heldchen,charon-nm: allow configurable remote traffic selectors,1,[],https://github.com/strongswan/strongswan/pull/173,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/173#issuecomment-633459186,"this change allows to customize the previously hard-coded remote traffic selectors. it corresponds to ipsec.conf's rightsubnet and charon-cmd's --remote-ts parameters, but keeps the comfort of being able to toggle the connection through gnome's gui.
this does not actually write the newly added ""remote-ts"" configuration node into the NetworkManager configuration file, but will use an existing value. exposing the config setting in the gui could be done in an amended or followup PR if this is a desired change.
use case: remote firewall appliance wrongly accepts the 0.0.0.0/0 but does not actually route external traffic, leaving the user with a partially working internet connection.","Thanks, looks good. I've pushed it with some error handling and whitespace/commit message changes to the gh173-nm-remote-ts branch. Let me know if that works for you.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,173,2020-05-24T11:56:29Z,2020-05-25T09:52:51Z,2020-05-25T09:54:12Z,CLOSED,False,18,4,1,https://github.com/heldchen,charon-nm: allow configurable remote traffic selectors,1,[],https://github.com/strongswan/strongswan/pull/173,https://github.com/heldchen,3,https://github.com/strongswan/strongswan/pull/173#issuecomment-633463350,"this change allows to customize the previously hard-coded remote traffic selectors. it corresponds to ipsec.conf's rightsubnet and charon-cmd's --remote-ts parameters, but keeps the comfort of being able to toggle the connection through gnome's gui.
this does not actually write the newly added ""remote-ts"" configuration node into the NetworkManager configuration file, but will use an existing value. exposing the config setting in the gui could be done in an amended or followup PR if this is a desired change.
use case: remote firewall appliance wrongly accepts the 0.0.0.0/0 but does not actually route external traffic, leaving the user with a partially working internet connection.","thanks tobias for your code improvements, appreciated! works well for me - looking forward to see this in a future release version :-)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,173,2020-05-24T11:56:29Z,2020-05-25T09:52:51Z,2020-05-25T09:54:12Z,CLOSED,False,18,4,1,https://github.com/heldchen,charon-nm: allow configurable remote traffic selectors,1,[],https://github.com/strongswan/strongswan/pull/173,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/173#issuecomment-633488241,"this change allows to customize the previously hard-coded remote traffic selectors. it corresponds to ipsec.conf's rightsubnet and charon-cmd's --remote-ts parameters, but keeps the comfort of being able to toggle the connection through gnome's gui.
this does not actually write the newly added ""remote-ts"" configuration node into the NetworkManager configuration file, but will use an existing value. exposing the config setting in the gui could be done in an amended or followup PR if this is a desired change.
use case: remote firewall appliance wrongly accepts the 0.0.0.0/0 but does not actually route external traffic, leaving the user with a partially working internet connection.",Applied to master.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,174,2020-06-27T08:36:21Z,2020-06-29T07:44:59Z,2020-06-29T07:45:03Z,CLOSED,False,1,1,1,https://github.com/borisVanhoof,Small spelling fix,1,[],https://github.com/strongswan/strongswan/pull/174,https://github.com/borisVanhoof,1,https://github.com/strongswan/strongswan/pull/174,The change says it all.,The change says it all.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,174,2020-06-27T08:36:21Z,2020-06-29T07:44:59Z,2020-06-29T07:45:03Z,CLOSED,False,1,1,1,https://github.com/borisVanhoof,Small spelling fix,1,[],https://github.com/strongswan/strongswan/pull/174,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/174#issuecomment-650991355,The change says it all.,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,175,2020-07-01T11:26:58Z,2020-07-01T14:31:55Z,2020-07-01T14:32:15Z,CLOSED,False,4,3,1,https://github.com/VVIsaev,Terminate empty IKE-SA on unload,1,[],https://github.com/strongswan/strongswan/pull/175,https://github.com/VVIsaev,1,https://github.com/strongswan/strongswan/pull/175,"It is possible that IKE-SA in CONNECTING state won't be removed even after calling 'unload-conn'.
In following example we have connection configured as initiator, but without responder, so IKE-SA will stuck in the CONNECTING state:
Before this patch:
[root@pb1 python]# python
Python 2.7.5 (default, Apr  2 2020, 13:16:51) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import vici
>>> s = vici.Session()
>>> def print_conns():
...   for c in s.list_conns():
...     print c
... 
>>> def print_sas():
...   for c in s.list_sas():
...     print c
... 
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])

After:
...
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '16177725842992919556'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
>>> 

After some time this IKE-SA will be destroyed because of retransmissions, but I think it is more correct to drop such connections in unload-conn.
And one more question: does unload-conn guarantee that all conections/IKEs/childs is removed after return?","It is possible that IKE-SA in CONNECTING state won't be removed even after calling 'unload-conn'.
In following example we have connection configured as initiator, but without responder, so IKE-SA will stuck in the CONNECTING state:
Before this patch:
[root@pb1 python]# python
Python 2.7.5 (default, Apr  2 2020, 13:16:51) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import vici
>>> s = vici.Session()
>>> def print_conns():
...   for c in s.list_conns():
...     print c
... 
>>> def print_sas():
...   for c in s.list_sas():
...     print c
... 
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])

After:
...
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '16177725842992919556'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
>>> 

After some time this IKE-SA will be destroyed because of retransmissions, but I think it is more correct to drop such connections in unload-conn.
And one more question: does unload-conn guarantee that all conections/IKEs/childs is removed after return?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,175,2020-07-01T11:26:58Z,2020-07-01T14:31:55Z,2020-07-01T14:32:15Z,CLOSED,False,4,3,1,https://github.com/VVIsaev,Terminate empty IKE-SA on unload,1,[],https://github.com/strongswan/strongswan/pull/175,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/175#issuecomment-652377984,"It is possible that IKE-SA in CONNECTING state won't be removed even after calling 'unload-conn'.
In following example we have connection configured as initiator, but without responder, so IKE-SA will stuck in the CONNECTING state:
Before this patch:
[root@pb1 python]# python
Python 2.7.5 (default, Apr  2 2020, 13:16:51) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import vici
>>> s = vici.Session()
>>> def print_conns():
...   for c in s.list_conns():
...     print c
... 
>>> def print_sas():
...   for c in s.list_sas():
...     print c
... 
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])

After:
...
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '16177725842992919556'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
>>> 

After some time this IKE-SA will be destroyed because of retransmissions, but I think it is more correct to drop such connections in unload-conn.
And one more question: does unload-conn guarantee that all conections/IKEs/childs is removed after return?","After some time this IKE-SA will be destroyed because of retransmissions, but I think it is more correct to drop such connections in unload-conn.

Yeah, I guess that makes sense. We can simplify this a bit by just using the existing getter, see the commit in the gh175-vici-unload branch.

And one more question: does unload-conn guarantee that all conections/IKEs/childs is removed after return?

No, generally not. First, it depends on the config. The command (or load-conn when a config is updated) really only terminates SAs if the start_action is set to start (and an IKE_SA can have multiple CHILD_SAs with different start actions). Otherwise, unloading configs does not have an effect on active IKE_SAs or CHILD_SAs (neither does updating; existing connections always have to be terminated to use modified settings). Second, the SAs are terminated in the background using regular deletes, so if the peer is not reachable anymore, retransmits will be sent (forcing a termination, with or without timeout, is possible only via terminate() command). However, in CONNECTING state, IKE_SAs will just be destroyed, so those are gone once the command returns.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,175,2020-07-01T11:26:58Z,2020-07-01T14:31:55Z,2020-07-01T14:32:15Z,CLOSED,False,4,3,1,https://github.com/VVIsaev,Terminate empty IKE-SA on unload,1,[],https://github.com/strongswan/strongswan/pull/175,https://github.com/VVIsaev,3,https://github.com/strongswan/strongswan/pull/175#issuecomment-652391306,"It is possible that IKE-SA in CONNECTING state won't be removed even after calling 'unload-conn'.
In following example we have connection configured as initiator, but without responder, so IKE-SA will stuck in the CONNECTING state:
Before this patch:
[root@pb1 python]# python
Python 2.7.5 (default, Apr  2 2020, 13:16:51) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import vici
>>> s = vici.Session()
>>> def print_conns():
...   for c in s.list_conns():
...     print c
... 
>>> def print_sas():
...   for c in s.list_sas():
...     print c
... 
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])

After:
...
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '16177725842992919556'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
>>> 

After some time this IKE-SA will be destroyed because of retransmissions, but I think it is more correct to drop such connections in unload-conn.
And one more question: does unload-conn guarantee that all conections/IKEs/childs is removed after return?","Yeah, I guess that makes sense. We can simplify this a bit by just using the existing getter, see the commit in the gh175-vici-unload branch.

Yes, your version is much simpler, lets use it. Should I close this MR or change it?

No, generally not. First, it depends on the config. The command (or load-conn when a config is updated) really only terminates SAs if the start_action is set to start (and an IKE_SA can have multiple CHILD_SAs with different start actions). Otherwise, unloading configs does not have an effect on active IKE_SAs or CHILD_SAs (neither does updating; existing connections always have to be terminated to use modified settings). Second, the SAs are terminated in the background using regular deletes, so if the peer is not reachable anymore, retransmits will be sent (forcing a termination, with or without timeout, is possible only via terminate() command). However, in CONNECTING state, IKE_SAs will just be destroyed, so those are gone once the command returns.

So to be sure that config is updated I should terminate related IKE/CHILD_SAs, then do load-conn and then create new SAs. Thank you for the quick response!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,175,2020-07-01T11:26:58Z,2020-07-01T14:31:55Z,2020-07-01T14:32:15Z,CLOSED,False,4,3,1,https://github.com/VVIsaev,Terminate empty IKE-SA on unload,1,[],https://github.com/strongswan/strongswan/pull/175,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/175#issuecomment-652454539,"It is possible that IKE-SA in CONNECTING state won't be removed even after calling 'unload-conn'.
In following example we have connection configured as initiator, but without responder, so IKE-SA will stuck in the CONNECTING state:
Before this patch:
[root@pb1 python]# python
Python 2.7.5 (default, Apr  2 2020, 13:16:51) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import vici
>>> s = vici.Session()
>>> def print_conns():
...   for c in s.list_conns():
...     print c
... 
>>> def print_sas():
...   for c in s.list_sas():
...     print c
... 
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '1820005609252098575'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])

After:
...
>>> print_conns()
OrderedDict([(u'ipip0', OrderedDict([(u'local_addrs', ['10.255.0.10']), (u'remote_addrs', ['10.255.0.20']), (u'version', 'IKEv1'), (u'reauth_time', '25920'), (u'rekey_time', '0'), (u'unique', 'UNIQUE_NO'), (u'local-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.10'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'remote-1', OrderedDict([(u'class', 'pre-shared key'), (u'id', '10.255.0.20'), (u'groups', []), (u'cert_policy', []), (u'certs', []), (u'cacerts', [])])), (u'children', OrderedDict([(u'child0', OrderedDict([(u'mode', 'TUNNEL'), (u'rekey_time', '324'), (u'rekey_bytes', '0'), (u'rekey_packets', '0'), (u'dpd_action', 'clear'), (u'close_action', 'clear'), (u'local-ts', ['0.0.0.0/0']), (u'remote-ts', ['0.0.0.0/0'])]))]))]))])
>>> print_sas()
OrderedDict([(u'ipip0', OrderedDict([(u'uniqueid', '1'), (u'version', '1'), (u'state', 'CONNECTING'), (u'local-host', '10.255.0.10'), (u'local-port', '500'), (u'local-id', '%any'), (u'remote-host', '10.255.0.20'), (u'remote-port', '500'), (u'remote-id', '%any'), (u'initiator', 'yes'), (u'initiator-spi', '16177725842992919556'), (u'responder-spi', '0'), (u'tasks-queued', ['QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE', 'QUICK_MODE']), (u'tasks-active', ['ISAKMP_VENDOR', 'ISAKMP_CERT_PRE', 'MAIN_MODE', 'ISAKMP_CERT_POST', 'ISAKMP_NATD']), (u'child-sas', OrderedDict())]))])
>>> s.unload_conn({'name':'ipip0'})
>>> print_conns()
>>> print_sas()
>>> 

After some time this IKE-SA will be destroyed because of retransmissions, but I think it is more correct to drop such connections in unload-conn.
And one more question: does unload-conn guarantee that all conections/IKEs/childs is removed after return?","Thanks, pushed it to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,176,2020-07-02T08:55:49Z,,2020-10-07T17:16:17Z,OPEN,False,5132,14,26,https://github.com/choppsv1,VPP support 5.8.2,11,[],https://github.com/strongswan/strongswan/pull/176,https://github.com/choppsv1,1,https://github.com/strongswan/strongswan/pull/176,"Add support for VPP (https://wiki.fd.io/view/VPP)
Tested with VPP versions 19.08 (LTS), 20.01 and 20.05 (latest release)","Add support for VPP (https://wiki.fd.io/view/VPP)
Tested with VPP versions 19.08 (LTS), 20.01 and 20.05 (latest release)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,176,2020-07-02T08:55:49Z,,2020-10-07T17:16:17Z,OPEN,False,5132,14,26,https://github.com/choppsv1,VPP support 5.8.2,11,[],https://github.com/strongswan/strongswan/pull/176,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/176#issuecomment-652972174,"Add support for VPP (https://wiki.fd.io/view/VPP)
Tested with VPP versions 19.08 (LTS), 20.01 and 20.05 (latest release)",Not sure when I'll have time to review this. Would you consider submitting those plugins under the MIT X11 license (see Contributions)?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,176,2020-07-02T08:55:49Z,,2020-10-07T17:16:17Z,OPEN,False,5132,14,26,https://github.com/choppsv1,VPP support 5.8.2,11,[],https://github.com/strongswan/strongswan/pull/176,https://github.com/choppsv1,3,https://github.com/strongswan/strongswan/pull/176#issuecomment-653073760,"Add support for VPP (https://wiki.fd.io/view/VPP)
Tested with VPP versions 19.08 (LTS), 20.01 and 20.05 (latest release)","I didn't originate the changes (but significantly modified them to finish/update them to newer VPP versions). From code forensics (presence of ""netlink"" and ""winsock"" in a couple comments in the initial changes/commits) I gathered the original author copied the kernel netlink files and socket winsock files as templates. Given that fact, I copied the copyright/licenses from the corresponding files from those plugins, adding his company and then mine to the top.

Given the original copied files were already GPLd I'm not sure it makes sense to add an MIT license on top of that, as they are already encumbered with the GPL, right?  It's all API goo anyway, just trying to help out by contributing the changes back. There has been interest expressed on the VPP lists for these at least.

Thanks,
Chris.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,176,2020-07-02T08:55:49Z,,2020-10-07T17:16:17Z,OPEN,False,5132,14,26,https://github.com/choppsv1,VPP support 5.8.2,11,[],https://github.com/strongswan/strongswan/pull/176,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/176#issuecomment-653090089,"Add support for VPP (https://wiki.fd.io/view/VPP)
Tested with VPP versions 19.08 (LTS), 20.01 and 20.05 (latest release)","I didn't originate the changes (but significantly modified them to finish/update them to newer VPP versions).

Yeah, I saw that there were other authors. That there were no headers/copyrights for those changes may make this problematic anyway (but IANAL). Did you contact them before this PR? It might be a good idea to contact them and ask how they (or their employer) think about this.

Given the original copied files were already GPLd I'm not sure it makes sense to add an MIT license on top of that, as they are already encumbered with the GPL, right?

No, we (or rather our university) have the rights to most of the codebase (as described on the page I linked above), which allows  us to also license it commercially (which is a considerable income stream). So it's always preferable for us if external contributions are made under the MIT X11 license, so we can offer that code to corporate customers. If this plugin was GPL only, such a customer could only use it and the whole codebase, including any other plugins they might have developed, under the GPL.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,176,2020-07-02T08:55:49Z,,2020-10-07T17:16:17Z,OPEN,False,5132,14,26,https://github.com/choppsv1,VPP support 5.8.2,11,[],https://github.com/strongswan/strongswan/pull/176,https://github.com/choppsv1,5,https://github.com/strongswan/strongswan/pull/176#issuecomment-653095584,"Add support for VPP (https://wiki.fd.io/view/VPP)
Tested with VPP versions 19.08 (LTS), 20.01 and 20.05 (latest release)","Yes, I've sent mail (as far as I could) to the authors. The primary no longer works for PANTHEON.tech, according to their linkedin page. I also sent an email to Kyle Mestery's email as indicated on github, who appears to still work at cisco.

The only reason I felt comfortable with taking this route is that it was derived from GPL'd files so there was no new license being granted and only carrying forward the one required by derivative works. I would not feel comfortable with doing anything else w/o the original authors consent. So I guess this will need to stall here until we hear from them or their corporate representatives.

Thanks,
Chris.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,177,2020-07-03T19:19:05Z,2020-07-21T19:09:58Z,2020-07-21T19:11:10Z,CLOSED,False,1035,0,7,https://github.com/sddj,Create charon plugin that adds and removes proxy ARP entries,2,[],https://github.com/strongswan/strongswan/pull/177,https://github.com/sddj,1,https://github.com/strongswan/strongswan/pull/177,The FARP plugin uses linux specific packet filters and so is not compatible with macos. This plugin adds and removes proxy ARP entries to the host routing as VPN connections go up and down.,The FARP plugin uses linux specific packet filters and so is not compatible with macos. This plugin adds and removes proxy ARP entries to the host routing as VPN connections go up and down.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,177,2020-07-03T19:19:05Z,2020-07-21T19:09:58Z,2020-07-21T19:11:10Z,CLOSED,False,1035,0,7,https://github.com/sddj,Create charon plugin that adds and removes proxy ARP entries,2,[],https://github.com/strongswan/strongswan/pull/177,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/177#issuecomment-661725822,The FARP plugin uses linux specific packet filters and so is not compatible with macos. This plugin adds and removes proxy ARP entries to the host routing as VPN connections go up and down.,"Thanks for your efforts, but what exactly is the advantage of this plugin over simply calling arp -s <vip> <ether addr or auto> pub from a vici or updown script? Seems like a lot of code to replicate that command. (Note that due to its dynamic nature, the farp plugin has a different scope, it can e.g. proxy ARP for multiple IPs, ranges or even complete remote subnets.) Also, what's the point of the Linux specific code when we can simply use the farp plugin there?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,177,2020-07-03T19:19:05Z,2020-07-21T19:09:58Z,2020-07-21T19:11:10Z,CLOSED,False,1035,0,7,https://github.com/sddj,Create charon plugin that adds and removes proxy ARP entries,2,[],https://github.com/strongswan/strongswan/pull/177,https://github.com/sddj,3,https://github.com/strongswan/strongswan/pull/177#issuecomment-661871470,The FARP plugin uses linux specific packet filters and so is not compatible with macos. This plugin adds and removes proxy ARP entries to the host routing as VPN connections go up and down.,Thanks for the review.  You make really good points.  I only added the Linux specific code to get past the CI checks. It was a good exercise for me to learn more about how to build a plugin and get it to work in StrongSwan.  Just thought it might be useful to try to contribute.  Should I close the pull request?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,177,2020-07-03T19:19:05Z,2020-07-21T19:09:58Z,2020-07-21T19:11:10Z,CLOSED,False,1035,0,7,https://github.com/sddj,Create charon plugin that adds and removes proxy ARP entries,2,[],https://github.com/strongswan/strongswan/pull/177,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/177#issuecomment-661906139,The FARP plugin uses linux specific packet filters and so is not compatible with macos. This plugin adds and removes proxy ARP entries to the host routing as VPN connections go up and down.,"I only added the Linux specific code to get past the CI checks.

Ah, I see. You could have disabled it for those builds and enabled it for the FreeBSD/macOS builds (like we do with e.g. the kernel-pfroute plugin, see scripts/test.sh).

Just thought it might be useful to try to contribute. Should I close the pull request?

Let me assure you that that's really appreciated.  But I've currently no plans to adopt this plugin. A solution using arp(8) and a script could perhaps be documented on our wiki. For instance, on forwarding and split-tunneling or perhaps just on the page for the farp plugin that's already linked there, or simply as a comment to issue 3498 (similar to the snippets in issue 1008 for proxy NDP), which could then be linked from the farp plugin page until we manage to port the plugin to BSD-based systems (a note about its incompatibility is missing there anyway).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,177,2020-07-03T19:19:05Z,2020-07-21T19:09:58Z,2020-07-21T19:11:10Z,CLOSED,False,1035,0,7,https://github.com/sddj,Create charon plugin that adds and removes proxy ARP entries,2,[],https://github.com/strongswan/strongswan/pull/177,https://github.com/sddj,5,https://github.com/strongswan/strongswan/pull/177#issuecomment-662053297,The FARP plugin uses linux specific packet filters and so is not compatible with macos. This plugin adds and removes proxy ARP entries to the host routing as VPN connections go up and down.,Thanks again for the review.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,179,2020-07-15T08:26:22Z,2021-01-18T16:43:38Z,2021-01-18T16:43:38Z,CLOSED,False,7,8,3,https://github.com/socketpair,SN and OID,1,[],https://github.com/strongswan/strongswan/pull/179,https://github.com/socketpair,1,https://github.com/strongswan/strongswan/pull/179,https://tools.ietf.org/html/rfc4519#section-2.31,https://tools.ietf.org/html/rfc4519#section-2.31,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,179,2020-07-15T08:26:22Z,2021-01-18T16:43:38Z,2021-01-18T16:43:38Z,CLOSED,False,7,8,3,https://github.com/socketpair,SN and OID,1,[],https://github.com/strongswan/strongswan/pull/179,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/179#issuecomment-722254675,https://tools.ietf.org/html/rfc4519#section-2.31,"I did some digging. This mapping has its origins in the X.509 patch for FreeS/WAN on which parts of strongSwan are based, which was started back in 2000. It was aligned with how OpenSSL did this in earlier versions. However, there it was changed already in March of 2002 (see openssl/openssl@ffbe98b) to make it compatible with RFC 2256 (the predecessor of RFC 4519). Unfortunately, that change apparently went unnoticed by any of us or our users so it never made it into our code base.
We'll probably include this change in one of our next releases, I've pushed it to the gh179-sn-rdn branch for now (changed the commit message a bit and added a fix for our testing environment).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/180,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.","Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/180#issuecomment-663890412,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.",Check failures are unrelated to the PR.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/180#issuecomment-687038537,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.","Thanks, Noel. I've pushed a modified version of your patch to the cisco-flexvpn-vendor-id branch (renamed the option to match that for Cisco Unity and modified description and commit message).
Do you know of any documentation of this feature/vendor ID from Cisco? While I found some documentation of FlexVPN, this particular vendor ID is never mentioned.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/180#issuecomment-687666986,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.","Thank you for pushing it to that branch.
Other than that, which I just found, I have no documentation.
The behaviour was discovered by observing behaviour and checking against the sent vendor IDs.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/180#issuecomment-690125983,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.","Other than that, which I just found, I have no documentation.

Thanks. Interesting, the workaround (only visible after logging in) actually refers to strongSwan and sending the VID payload to fake support for FlexVPN.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/johnfzc,6,https://github.com/strongswan/strongswan/pull/180#issuecomment-697685944,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.","That bug was was opened in response to a support ticket I created with Cisco about the issue, you can use this public link for a more cursory description of the issue without a Cisco support account. It's a request for an improvement that would allow a Cisco side configuration to permit clients to use the 0.0.0.0/0 tunnel selector instead of forcing the remote side selector to use of the assigned IP when the VID is not received.
There is no other public documentation of this behaviour that I am aware of; there was another bug but I can't locate it. I believe the support team identified the cause of the issue from the IOS source code. I'll update the issue if I can obtain any other public information about it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,180,2020-07-24T20:24:03Z,2020-09-10T10:02:31Z,2021-04-11T04:26:02Z,CLOSED,False,10,1,2,https://github.com/Thermi,Send CISCO FLexVPN vendor ID,1,[],https://github.com/strongswan/strongswan/pull/180,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/180#issuecomment-698156013,"Send CISCO FLexVPN vendor ID if send_cisco_flexvpn_vendor_id is set to ""yes"".
Option description:
Send the CISCO FlexVPN vendor ID. It is required in order to make CISCO brand devices allow negotiating a local_ts (from strongSwan's point of view) that is not the assigned ""virtual"" IP address, if a ""virtual"" IP address is requested by strongSwan. Sending the CISCO FlexVPN vendor ID makes the CISCO peer allow this peer to negotiate a TS of 0.0.0.0/0 == 0.0.0.0/0 instead (unknow if it works for IPv6 too). This has been tested with a ""tunnel mode ipsec ipv4"" CISCO template but should also work for GRE encapsulation.",Thanks for the update.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,181,2020-09-23T08:22:49Z,2020-09-30T10:51:47Z,2020-09-30T10:51:47Z,CLOSED,False,0,1,1,https://github.com/Mingli-Yu,Remove obsolete setting regarding the Standard Output,1,[],https://github.com/strongswan/strongswan/pull/181,https://github.com/Mingli-Yu,1,https://github.com/strongswan/strongswan/pull/181,"The Standard output type ""syslog"" is obsolete, causing a warning since systemd
version 246 [1].
Please consider using ""journal"" or ""journal+console""
[1] https://github.com/systemd/systemd/blob/master/NEWS#L202
Signed-off-by: Mingli Yu mingli.yu@windriver.com","The Standard output type ""syslog"" is obsolete, causing a warning since systemd
version 246 [1].
Please consider using ""journal"" or ""journal+console""
[1] https://github.com/systemd/systemd/blob/master/NEWS#L202
Signed-off-by: Mingli Yu mingli.yu@windriver.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,181,2020-09-23T08:22:49Z,2020-09-30T10:51:47Z,2020-09-30T10:51:47Z,CLOSED,False,0,1,1,https://github.com/Mingli-Yu,Remove obsolete setting regarding the Standard Output,1,[],https://github.com/strongswan/strongswan/pull/181,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/181#issuecomment-697394440,"The Standard output type ""syslog"" is obsolete, causing a warning since systemd
version 246 [1].
Please consider using ""journal"" or ""journal+console""
[1] https://github.com/systemd/systemd/blob/master/NEWS#L202
Signed-off-by: Mingli Yu mingli.yu@windriver.com","If your system uses systemd, please consider using charon-systemd, which logs directly to the journal, and the corresponding strongswan.service unit, not the legacy starter/charon combination.
I guess by removing the setting this will most likely default to journal (via DefaultStandardOutput), which apparently was the fallback now. So setting it explicitly does not seem necessary. I pushed the commit with a modified message to the gh181-systemd-stdout branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/shrestha-tripathi,1,https://github.com/strongswan/strongswan/pull/182,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.","Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/182#issuecomment-700713804,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.","The code is basically the same as in all the other libcharon wrappers and allows easy extension e.g. to also handle SIGHUP or to change the behavior for a specific signal. But I guess the two cases could be combined, but that should be done in all the other wrappers too, see the gh182-shutdown-signals branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/shrestha-tripathi,3,https://github.com/strongswan/strongswan/pull/182#issuecomment-701140175,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.",Made the changes in all libcharon wrappers.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/182#issuecomment-701230000,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.",I don't get it? You just copied the changes from my branch.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/shrestha-tripathi,5,https://github.com/strongswan/strongswan/pull/182#issuecomment-701242406,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.","I just wanted to contribute to the project, and you mentioned about extension for other signals like SIGHUP . So I made the changes in all Charon wrappers",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/182#issuecomment-701314136,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.","I just wanted to contribute to the project,

That's appreciated, but you now just (badly) copied my changes in said branch. Anyway, I've pushed my commit to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,182,2020-09-29T04:02:13Z,2020-09-30T10:49:19Z,2020-09-30T11:01:34Z,CLOSED,False,10,28,5,https://github.com/shrestha-tripathi,code improvement for charon-tkm.c file to avoid duplicate code block,2,[],https://github.com/strongswan/strongswan/pull/182,https://github.com/shrestha-tripathi,7,https://github.com/strongswan/strongswan/pull/182#issuecomment-701319331,"Reference Issues/PRs
None
What does this improvement fix?
A better way to handle both SIGINT and SIGTERM signals in charon-tkm.c file, without code block duplication. This will also prevent unnecessary entry into the switch block incase the sigprocmask call fails for some reason.",Lol ok no problem ... I thought that’s what you wanted me to do.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,183,2020-10-16T00:46:09Z,2020-10-19T16:39:56Z,2020-10-20T08:49:26Z,CLOSED,False,15,15,1,https://github.com/dbotwinick,Update python vici - command_wrappers.py,1,[],https://github.com/strongswan/strongswan/pull/183,https://github.com/dbotwinick,1,https://github.com/strongswan/strongswan/pull/183,"added missing return statements in python vici library. some were actually optional, but some were required to effectively use the library. adding return statements to all functions should have no negative repercussions.","added missing return statements in python vici library. some were actually optional, but some were required to effectively use the library. adding return statements to all functions should have no negative repercussions.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,183,2020-10-16T00:46:09Z,2020-10-19T16:39:56Z,2020-10-20T08:49:26Z,CLOSED,False,15,15,1,https://github.com/dbotwinick,Update python vici - command_wrappers.py,1,[],https://github.com/strongswan/strongswan/pull/183,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/183#issuecomment-710036064,"added missing return statements in python vici library. some were actually optional, but some were required to effectively use the library. adding return statements to all functions should have no negative repercussions.","but some were required

Which ones?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,183,2020-10-16T00:46:09Z,2020-10-19T16:39:56Z,2020-10-20T08:49:26Z,CLOSED,False,15,15,1,https://github.com/dbotwinick,Update python vici - command_wrappers.py,1,[],https://github.com/strongswan/strongswan/pull/183,https://github.com/dbotwinick,3,https://github.com/strongswan/strongswan/pull/183#issuecomment-712289607,"added missing return statements in python vici library. some were actually optional, but some were required to effectively use the library. adding return statements to all functions should have no negative repercussions.","Actually I take it back that they're required... a bit embarrassing, but the original issues that led me to decide it was needed were actually corrected way back in c5113c8. I reviewed the current state of the code again and I think it should make sense as is right now. Probably still wouldn't hurt to return from those items... but I don't think there is much to be gained from doing it. Closing the pull request.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,183,2020-10-16T00:46:09Z,2020-10-19T16:39:56Z,2020-10-20T08:49:26Z,CLOSED,False,15,15,1,https://github.com/dbotwinick,Update python vici - command_wrappers.py,1,[],https://github.com/strongswan/strongswan/pull/183,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/183#issuecomment-712697101,"added missing return statements in python vici library. some were actually optional, but some were required to effectively use the library. adding return statements to all functions should have no negative repercussions.","Ah, I see. No problem, thanks for looking into it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,184,2020-10-30T01:48:44Z,,2020-11-04T18:39:33Z,OPEN,False,40,18,4,https://github.com/juhovh,Allow defining the EAP identity when using SQL plugin.,1,[],https://github.com/strongswan/strongswan/pull/184,https://github.com/juhovh,1,https://github.com/strongswan/strongswan/pull/184,"Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table. This will break backwards compatibility with existing databases, but the addition of one single column is not very invasive and should be easy to perform.
A side effect that was identified during the testing was the complications coming from using user defined identities. More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server. This is a security hole, so an additional check was added (the m.id != o.id part) to make sure that the server and user identities are in fact distinct. I'm not 100% sure if this is the best fix, since it seems to me like the CHAPv2 user identities might be better off having a distinct identity type, but that kind of a change would be even a bit more invasive so I left it out.","Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table. This will break backwards compatibility with existing databases, but the addition of one single column is not very invasive and should be easy to perform.
A side effect that was identified during the testing was the complications coming from using user defined identities. More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server. This is a security hole, so an additional check was added (the m.id != o.id part) to make sure that the server and user identities are in fact distinct. I'm not 100% sure if this is the best fix, since it seems to me like the CHAPv2 user identities might be better off having a distinct identity type, but that kind of a change would be even a bit more invasive so I left it out.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,184,2020-10-30T01:48:44Z,,2020-11-04T18:39:33Z,OPEN,False,40,18,4,https://github.com/juhovh,Allow defining the EAP identity when using SQL plugin.,1,[],https://github.com/strongswan/strongswan/pull/184,https://github.com/juhovh,2,https://github.com/strongswan/strongswan/pull/184#issuecomment-720053208,"Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table. This will break backwards compatibility with existing databases, but the addition of one single column is not very invasive and should be easy to perform.
A side effect that was identified during the testing was the complications coming from using user defined identities. More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server. This is a security hole, so an additional check was added (the m.id != o.id part) to make sure that the server and user identities are in fact distinct. I'm not 100% sure if this is the best fix, since it seems to me like the CHAPv2 user identities might be better off having a distinct identity type, but that kind of a change would be even a bit more invasive so I left it out.","Since I see I have some errors from decreasing the code coverage, I just want to let you know that I had some trouble running the tests on my local environment and didn't write tests for the functionality. If I can just get a green light that this PR is doing the right thing, I can definitely invest some time in writing tests for it as well. I just needed this change in my personal hobby project and thought to push it here for review.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,184,2020-10-30T01:48:44Z,,2020-11-04T18:39:33Z,OPEN,False,40,18,4,https://github.com/juhovh,Allow defining the EAP identity when using SQL plugin.,1,[],https://github.com/strongswan/strongswan/pull/184,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/184#issuecomment-720342022,"Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table. This will break backwards compatibility with existing databases, but the addition of one single column is not very invasive and should be easy to perform.
A side effect that was identified during the testing was the complications coming from using user defined identities. More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server. This is a security hole, so an additional check was added (the m.id != o.id part) to make sure that the server and user identities are in fact distinct. I'm not 100% sure if this is the best fix, since it seems to me like the CHAPv2 user identities might be better off having a distinct identity type, but that kind of a change would be even a bit more invasive so I left it out.","Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table.

That seems only to be a problem if the client requires an EAP-Identity exchange (I guess some like Windows do), i.e. you'd configure ID_ANY as EAP-Identity. Because configuring an actual identity (in particular in multiple connections) does not have the effect one might think (the sql plugin is no different from other config backends in this regard).
Also, what's the advantage of configuring such static roadwarrior connections in an SQL database anyway? (You could still configure credentials in the database while configuring the connection via swanctl/vici.)

More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server.

Good catch. Could you please create a separate PR for this? I also wonder if it should be possible to associate the secrets only with the user identities (like it is with other backends). That is, the query, if both identities are available, could maybe use LEFT JOINs to the shared_secret_identity table (while ensuring that at least one is matched and maybe ordered so that multiple matches are preferred).

Since I see I have some errors from decreasing the code coverage, I just want to let you know that I had some trouble running the tests on my local environment and didn't write tests for the functionality.

That's OK as there are no unit tests for the sql plugin, which are separate from the regression tests that don't influence the coverage.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,184,2020-10-30T01:48:44Z,,2020-11-04T18:39:33Z,OPEN,False,40,18,4,https://github.com/juhovh,Allow defining the EAP identity when using SQL plugin.,1,[],https://github.com/strongswan/strongswan/pull/184,https://github.com/juhovh,4,https://github.com/strongswan/strongswan/pull/184#issuecomment-721517507,"Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table. This will break backwards compatibility with existing databases, but the addition of one single column is not very invasive and should be easy to perform.
A side effect that was identified during the testing was the complications coming from using user defined identities. More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server. This is a security hole, so an additional check was added (the m.id != o.id part) to make sure that the server and user identities are in fact distinct. I'm not 100% sure if this is the best fix, since it seems to me like the CHAPv2 user identities might be better off having a distinct identity type, but that kind of a change would be even a bit more invasive so I left it out.","Thank you for your time to have a look at this and give feedback, it's much appreciated since I'm mainly working with my personal use case here, and there's so many different ways to configure strongSwan.

That seems only to be a problem if the client requires an EAP-Identity exchange (I guess some like Windows do), i.e. you'd configure ID_ANY as EAP-Identity. Because configuring an actual identity (in particular in multiple connections) does not have the effect one might think (the sql plugin is no different from other config backends in this regard).

I must say I haven't experimented with configuring an actual identity, since configuring ID_ANY was my main use case as you guessed, what would be the effect of that if not what one might think? I guess if we're certain configuring an actual identity doesn't make sense, having a way to configure the AUTH_RULE_EAP_IDENTITY as a boolean could work as well, but wouldn't align well with the other backends.

Also, what's the advantage of configuring such static roadwarrior connections in an SQL database anyway? (You could still configure credentials in the database while configuring the connection via swanctl/vici.)

This is a valid question, I'm still very much in an experimentation stage myself. Basically I'm building a sort of REST API / Web UI that would allow me to configure my VPN remotely without having to access the server filesystem. I also want to do server public key authentication using a commonly trusted CA and handle certificate renewals automatically. Now, naturally I could do all this by modifying the filesystem and send reload requests to the daemon, but using the SQL backend for all persistent data as a single source of truth and if necessary VICI only for signaling to the daemon (to e.g. terminate a SA if necessary) would seem tempting. Also the ability to spin up instances from a static disk image and get all their configuration from the SQL db seems desirable.
Can you maybe shed a bit more light on what was the original motivation for the SQL backend? The documentation on it is a little bit thin, but would be interesting to hear more.


More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server.

Good catch. Could you please create a separate PR for this? I also wonder if it should be possible to associate the secrets only with the user identities (like it is with other backends). That is, the query, if both identities are available, could maybe use LEFT JOINs to the shared_secret_identity table (while ensuring that at least one is matched and maybe ordered so that multiple matches are preferred).

Yes, it was a bit confusing for me in the beginning that for SQL the secrets are associated to both the local and remote identities. It does come with an interesting upside though, which is that one can have multiple user identities in the same db, some of which connected to server identity A and some of which connected to B. That way it could work as a sort of ""user database"" for a specific VPN service.
So, just to confirm that I understand this right, what you're suggesting is that I would open up a separate PR where I would keep the current change (making sure that the identities are distinct), but in addition allow shared secrets that are only connected to either the local or remote identity, not necessarily both? Basically this would mean that once a shared secret is connected to any identity, then that identity is allowed to connect (at least in the EAP-Identity case with user defined identities).


Since I see I have some errors from decreasing the code coverage, I just want to let you know that I had some trouble running the tests on my local environment and didn't write tests for the functionality.

That's OK as there are no unit tests for the sql plugin, which are separate from the regression tests that don't influence the coverage.

👍 All clear.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,184,2020-10-30T01:48:44Z,,2020-11-04T18:39:33Z,OPEN,False,40,18,4,https://github.com/juhovh,Allow defining the EAP identity when using SQL plugin.,1,[],https://github.com/strongswan/strongswan/pull/184,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/184#issuecomment-721904630,"Currently there doesn't seem to be any way to do EAP-MS-CHAPv2 authentication using the SQL configuration plugin as a backend. The missing piece is the lack of ability to define AUTH_RULE_EAP_IDENTITY and the suggested fix is to add a eap_id field to the peer_configs table. This will break backwards compatibility with existing databases, but the addition of one single column is not very invasive and should be easy to perform.
A side effect that was identified during the testing was the complications coming from using user defined identities. More specifically, since shared secrets are used for the CHAPv2 password authentication, and the shared secrets are linked to both the server identity and the user identity, it was possible to simply set the server FQDN as the username (for example vpn.example.org) and log in with any password configured for that server. This is a security hole, so an additional check was added (the m.id != o.id part) to make sure that the server and user identities are in fact distinct. I'm not 100% sure if this is the best fix, since it seems to me like the CHAPv2 user identities might be better off having a distinct identity type, but that kind of a change would be even a bit more invasive so I left it out.","what would be the effect of that if not what one might think?

See issue 1057  and related.

but wouldn't align well with the other backends

I agree, in particular if actual identities were to be supported in the future.

Basically I'm building a sort of REST API / Web UI that would allow me to configure my VPN remotely without having to access the server filesystem.

Did you have a look at strongMan? Or the VICI interface?

I also want to do server public key authentication using a commonly trusted CA and handle certificate renewals automatically.

As you mentioned, you can easily do that via swanctl (or directly via VICI). In particular, if you use Let's Encrypt via certbot as you can hook into the update process and simply reload the config via swanctl to use the new certificate/key.

Can you maybe shed a bit more light on what was the original motivation for the SQL backend?

I think it was primarily created as a prototype to demonstrate the modular configuration/attribute/credential backends (added together in March 2008, there were others like smp/manger and of course the stroke and vici plugins). It has only seen minor development since then as there never was much interest in it.

It does come with an interesting upside though, which is that one can have multiple user identities in the same db, some of which connected to server identity A and some of which connected to B. That way it could work as a sort of ""user database"" for a specific VPN service.

Yes, that's true. If that wasn't the case, i.e. if matching the client identity was enough, and the database was shared by multiple ""services"" on the same host, a user of service A could authenticate at service B if there was a user with the same name (I guess that could be avoided by assigning service specific usernames).
But note that this it not how other config backends behave. For instance, with vici, you can assign an arbitrary number of identities with a secret and just one of them has to match (no matter if it's the local or the remote identity). Secrets that match both are preferred. But, configuring the local (i.e. server) identity there would obviously be a bad idea because all of these secrets would be tried during client authentication and any user could authenticate with any other username (mainly a problem if there are e.g. different groups of users that have access to different remote subnets or something similar).

So, just to confirm that I understand this right, what you're suggesting is that I would open up a separate PR where I would keep the current change (making sure that the identities are distinct), but in addition allow shared secrets that are only connected to either the local or remote identity, not necessarily both? Basically this would mean that once a shared secret is connected to any identity, then that identity is allowed to connect (at least in the EAP-Identity case with user defined identities).

I guess your fix is enough for now, I'd just prefer it in a separate commit and PR. The second part was a suggestion to align the sql plugin with the other credential sets, where a single match is enough. But considering that matching both identities could be an advantage here, we might not want to change that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/sladkani,1,https://github.com/strongswan/strongswan/pull/185,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/185#issuecomment-721147560,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","I wonder if this is actually on purpose to allow differentiating between actual termination (forced or due to the SA's state, or after waiting for the response) and just initiating an exchange (in which case the IKE_SA has most likely not yet been terminated when the call returns, so e.g. counting it in terminated is not entirely correct). Note that termination with a timeout will also result in an error if the SA has not yet been destroyed when the timeout expires, even with force set (OUT_OF_RES is returned in either case, which vici treats as failure, as documented in the README).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/sladkani,3,https://github.com/strongswan/strongswan/pull/185#issuecomment-721217965,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","I wonder if this is actually on purpose to allow differentiating between actual termination (forced or due to the SA's state, or after waiting for the response) and just initiating an exchange (in which case the IKE_SA has most likely not yet been terminated when the call returns, so e.g. counting it in terminated is not entirely correct).

Not sure I follow your question here.
Currently, vici, passing a NULL callback (e.g. when given a negative timeout), reports ""terminating SA failed"", ALTHOUGH the terminate is perfectly initiated (and in all normal cases, succeeds when due) - see this snip from vici_control.c:
	while (enumerator->enumerate(enumerator, &del))
	{
		if (child || child_id)
		{
		    ...
		}
		else
		{
			if (charon->controller->terminate_ike(charon->controller, *del, force,
											log_cb, &log, timeout) == SUCCESS)
			{
				done++;
			}
		}
	}
	
	...
	
	else if (done < array_count(ids))
	{
		if (array_count(ids) == 1)
		{
			errmsg = ""terminating SA failed"";
		}
		else
		{
			errmsg = ""not all matching SAs could be terminated"";
		}
	}

Since the return code in the non-callback case is FAILED, how can one differentiate between the scenarios?
BTW: similar ""error"" reporting is also done in charon-xpc/xpc_channels.c stop_connection (which also passes NULL callback and tests the return code).
My claim is that if one issues controller->terminate_ike() with a NULL callback, he wishes NOT to wait for the terminate result, and as such, we aren't allowed to return a FAILED indication for his ""fire and forget"" request.
Whats your idea for differentiating this cases, and how do you think the call-sites need to be amended?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/185#issuecomment-721230118,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","Since the return code in the non-callback case is FAILED, how can one differentiate between the scenarios?

What do you mean?

My claim is that if one issues controller->terminate_ike() with a NULL callback, he wishes NOT to wait for the terminate result, and as such, we aren't allowed to return a FAILED indication for his ""fire and forget"" request.

It might still be of interest if the SA was actually immediately destroyed (and is gone afterwards), or only a delete was queued (and the SA and its CHILD_SAs might still exist for a while). Not sure if there is an actual use case for this, though. But it was always like that, hence my questioning whether it might have been on purpose.
One could also look at this like an instant timeout, which, by definition, fails if termination did not succeed before, which is only the case here if the SA can be destroyed immediately.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/sladkani,5,https://github.com/strongswan/strongswan/pull/185#issuecomment-721254257,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","My claim is that if one issues controller->terminate_ike() with a NULL callback, he wishes NOT to wait for the terminate result, and as such, we aren't allowed to return a FAILED indication for his ""fire and forget"" request.

It might still be of interest if the SA was actually immediately destroyed (and is gone afterwards), or only a delete was queued (and the SA and its CHILD_SAs might still exist for a while).

Note that if the caller wishes an immediate destruction, he would set force = TRUE
(if a NULL callback is specified, and force is TRUE, then SA gets immediately destroyed, ike_sa->delete() returns DESTROY_ME and status is set to SUCCESS).
If the caller sets force = FALSE, then the delete is just queued.

Not sure if there is an actual use case for this, though. But it was always like that, hence my questioning whether it might have been on purpose.

OTOH if we consider the FAILED report for the case where the ""delete is just queued"" was on purpose, how can the user know the resulting ""terminating SA failed"" is not a real error but signals a ""successful queue""?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/185#issuecomment-721290845,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com","Note that if the caller wishes an immediate destruction, he would set force = TRUE

Yes, I was arguing that the result might still be of interest to the caller for some reason. And it also allows to accurately set the counter in the response if terminated should denote the number of SAs gone after the call returns and not also include those with just a queued delete (for which a different counter could be used, I guess).

If the caller sets force = FALSE, then the delete is just queued.

Unless, the SA is in a state that doesn't allow queuing the delete and it gets destroyed immediately, which is what can be detected if there is a different status. Whether using FAILED is a good idea, is a different question (NEED_MORE would fit better, but for some reason that's already used for when the callback returns FALSE, other existing status values don't really fit).

how can the user know the resulting ""terminating SA failed"" is not a real error but signals a ""successful queue""?

Termination can only really fail if the SA is not found (which could be distinguished via the number of matches in the response, at least if the number of expected SAs is known - however, in the Python bindings that's currently not actually an option as the response is not available in the exception, or even when returning successfully, as streamed_request() does not return the response). The other ""failure"" cases (timeout, queued exchange) could be handled by vici appropriately (e.g. with separate counters). But if there is no real use case for this, it seems like over-engineering.
To be honest, I really don't have anything against changing this. I just wondered about the current code and wanted to discuss whether there might be a reason/use case for a different return value. The change could even be simplified because both paths will set the status to SUCCESS if no callback is set (see the commit in the gh185-vici-terminate branch).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,185,2020-11-02T16:15:13Z,2020-11-04T18:44:24Z,2020-11-04T18:44:24Z,CLOSED,False,12,2,1,https://github.com/sladkani,controller: Fix terminate_ike's returned status in case no 'callback' is specified,1,[],https://github.com/strongswan/strongswan/pull/185,https://github.com/sladkani,7,https://github.com/strongswan/strongswan/pull/185#issuecomment-721297501,"When 'callback == NULL', terminate_ike_execute() is invoked without the
listener waiting on the ike state change.
Now, if 'force' is false, then ike_sa->delete() just queues an
IKE_DELETE task, and returns SUCCESS - indicating successful task
manager initiation.
However, terminate_ike_execute() ignores this success and sets
'listener->status = FAILED'.
This is incorrect, as this will be the overall return code of
terminate_ike(), although no failure did occur. This eventually leads
vici's ""terminate"" to return ""Command failed: terminating SA failed"",
as seen in this example:
In [9]: list(session.terminate({'ike-id': 2960, 'timeout': -1}))
---------------------------------------------------------------------------
CommandException                          Traceback (most recent call last)
<ipython-input-9-5f95b5cea88f> in <module>()
----> 1 list(session.terminate({'ike-id': 2960, 'timeout': -1}))

vici/session.pyc in streamed_request(self, command, event_stream_type, message)
    136                 raise CommandException(
    137                     ""Command failed: {errmsg}"".format(
--> 138                         errmsg=command_response[""errmsg""]
    139                     )
    140                 )

CommandException: Command failed: terminating SA failed

Fix: In case no 'callback' is specified (i.e. caller intends NOT to
wait for the result of the deletion), and ike_sa->delete() returns
SUCCESS, also set 'listener->status = SUCCESS' to indicate the
IKE_DELETE was queued succesfully.
Signed-off-by: Shmulik Ladkani shmulik@metanetworks.com",Thanks @tobiasbrunner  for your comments and assistance.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,186,2020-11-30T22:20:32Z,2021-01-20T17:04:19Z,2021-01-20T17:04:19Z,CLOSED,False,33,19,1,https://github.com/mahantesh-nvidia,openssl: Use ECDH_compute_key() for 'x-coordinate only' setting,1,[],https://github.com/strongswan/strongswan/pull/186,https://github.com/mahantesh-nvidia,1,https://github.com/strongswan/strongswan/pull/186,"ECDH_compute_key() was not used because it only gives
x-coordinate of the result. However, the default setting,
as per the errata mentioned, is to use x-coordinate only.
Use ECDH_compute_key() for this setting as it additionally
allows hw offload of the computation using dynamic engine
feature in OpenSSL.
EC_POINT_mul() doesn't allow hw offload.

Signed-off-by: Mahantesh Salimath mahantesh@nvidia.com","ECDH_compute_key() was not used because it only gives
x-coordinate of the result. However, the default setting,
as per the errata mentioned, is to use x-coordinate only.
Use ECDH_compute_key() for this setting as it additionally
allows hw offload of the computation using dynamic engine
feature in OpenSSL.
EC_POINT_mul() doesn't allow hw offload.

Signed-off-by: Mahantesh Salimath mahantesh@nvidia.com",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,186,2020-11-30T22:20:32Z,2021-01-20T17:04:19Z,2021-01-20T17:04:19Z,CLOSED,False,33,19,1,https://github.com/mahantesh-nvidia,openssl: Use ECDH_compute_key() for 'x-coordinate only' setting,1,[],https://github.com/strongswan/strongswan/pull/186,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/186#issuecomment-736322543,"ECDH_compute_key() was not used because it only gives
x-coordinate of the result. However, the default setting,
as per the errata mentioned, is to use x-coordinate only.
Use ECDH_compute_key() for this setting as it additionally
allows hw offload of the computation using dynamic engine
feature in OpenSSL.
EC_POINT_mul() doesn't allow hw offload.

Signed-off-by: Mahantesh Salimath mahantesh@nvidia.com","Thanks. Note that ECDH_compute_key() is deprecated and will apparently be removed with OpenSSL 3.0. So this whole thing will have to be refactored to use the EVP interface. For now, I pushed the commit, with some changes (like error handling), to the gh186-openssl-ecp branch and will try to work on refactoring this to the EVP interface. I also don't think the ecp_x_coordinate_only option is still necessary, so I'll remove that too.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,186,2020-11-30T22:20:32Z,2021-01-20T17:04:19Z,2021-01-20T17:04:19Z,CLOSED,False,33,19,1,https://github.com/mahantesh-nvidia,openssl: Use ECDH_compute_key() for 'x-coordinate only' setting,1,[],https://github.com/strongswan/strongswan/pull/186,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/186#issuecomment-736403974,"ECDH_compute_key() was not used because it only gives
x-coordinate of the result. However, the default setting,
as per the errata mentioned, is to use x-coordinate only.
Use ECDH_compute_key() for this setting as it additionally
allows hw offload of the computation using dynamic engine
feature in OpenSSL.
EC_POINT_mul() doesn't allow hw offload.

Signed-off-by: Mahantesh Salimath mahantesh@nvidia.com",I pushed additional commits to the branch to refactor this (mostly) to the EVP interface. Let me know if this still works with HW offloading.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,186,2020-11-30T22:20:32Z,2021-01-20T17:04:19Z,2021-01-20T17:04:19Z,CLOSED,False,33,19,1,https://github.com/mahantesh-nvidia,openssl: Use ECDH_compute_key() for 'x-coordinate only' setting,1,[],https://github.com/strongswan/strongswan/pull/186,https://github.com/mahantesh-nvidia,4,https://github.com/strongswan/strongswan/pull/186#issuecomment-736665659,"ECDH_compute_key() was not used because it only gives
x-coordinate of the result. However, the default setting,
as per the errata mentioned, is to use x-coordinate only.
Use ECDH_compute_key() for this setting as it additionally
allows hw offload of the computation using dynamic engine
feature in OpenSSL.
EC_POINT_mul() doesn't allow hw offload.

Signed-off-by: Mahantesh Salimath mahantesh@nvidia.com","Thanks @tobiasbrunner , I tested with your additional commits and it still works with HW offloading.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,186,2020-11-30T22:20:32Z,2021-01-20T17:04:19Z,2021-01-20T17:04:19Z,CLOSED,False,33,19,1,https://github.com/mahantesh-nvidia,openssl: Use ECDH_compute_key() for 'x-coordinate only' setting,1,[],https://github.com/strongswan/strongswan/pull/186,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/186#issuecomment-737110765,"ECDH_compute_key() was not used because it only gives
x-coordinate of the result. However, the default setting,
as per the errata mentioned, is to use x-coordinate only.
Use ECDH_compute_key() for this setting as it additionally
allows hw offload of the computation using dynamic engine
feature in OpenSSL.
EC_POINT_mul() doesn't allow hw offload.

Signed-off-by: Mahantesh Salimath mahantesh@nvidia.com","OK, thanks for testing. I'll close the PR once I merge the branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,187,2020-12-02T15:45:38Z,2021-02-12T14:32:53Z,2021-02-12T14:32:53Z,CLOSED,False,20,1,2,https://github.com/sladkani,libtls: Add 'tls.send_certreq_authorities' configuration knob,1,[],https://github.com/strongswan/strongswan/pull/187,https://github.com/sladkani,1,https://github.com/strongswan/strongswan/pull/187,"Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.","Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,187,2020-12-02T15:45:38Z,2021-02-12T14:32:53Z,2021-02-12T14:32:53Z,CLOSED,False,20,1,2,https://github.com/sladkani,libtls: Add 'tls.send_certreq_authorities' configuration knob,1,[],https://github.com/strongswan/strongswan/pull/187,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/187#issuecomment-737340638,"Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.","Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.

Seems strange. How long was the list?
Anyway, this might be something to consider, but some of the affected code might change when adding TLS 1.3 support (tls13 branch, plus current work for server-side support over at ryru/strongswan). So I'll review it once I merge that code.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,187,2020-12-02T15:45:38Z,2021-02-12T14:32:53Z,2021-02-12T14:32:53Z,CLOSED,False,20,1,2,https://github.com/sladkani,libtls: Add 'tls.send_certreq_authorities' configuration knob,1,[],https://github.com/strongswan/strongswan/pull/187,https://github.com/sladkani,3,https://github.com/strongswan/strongswan/pull/187#issuecomment-737347809,"Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.","Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.

Seems strange. How long was the list?

Didn't pinpoint to the exact threshold, but strongSwan had ~270 CAs loaded.
Client was windows (both 7 and 10), cert based ikev2 in eap-tls mode.

Anyway, this might be something to consider, but some of the affected code might change when adding TLS 1.3 support (tls13 branch, plus current work for server-side support over at ryru/strongswan). So I'll review it once I merge that code.

Thanks. Do note that in certain server configurations or deployments, specifying the CA ""hints"" in the certificate_authorities list is pointless as the server in such deployments does not need to ""describe known roots/desired authorization space"".",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,187,2020-12-02T15:45:38Z,2021-02-12T14:32:53Z,2021-02-12T14:32:53Z,CLOSED,False,20,1,2,https://github.com/sladkani,libtls: Add 'tls.send_certreq_authorities' configuration knob,1,[],https://github.com/strongswan/strongswan/pull/187,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/187#issuecomment-737356779,"Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.","but strongSwan had ~270 CAs loaded.

On a server? That seems very risky as without further restrictions (e.g. on identities) it would allow anybody with a client or server certificate from any of these (presumably commercial) CAs to connect to that server.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,187,2020-12-02T15:45:38Z,2021-02-12T14:32:53Z,2021-02-12T14:32:53Z,CLOSED,False,20,1,2,https://github.com/sladkani,libtls: Add 'tls.send_certreq_authorities' configuration knob,1,[],https://github.com/strongswan/strongswan/pull/187,https://github.com/sladkani,5,https://github.com/strongswan/strongswan/pull/187#issuecomment-737369193,"Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.","but strongSwan had ~270 CAs loaded.

On a server? That seems very risky as without further restrictions (e.g. on identities) it would allow anybody with a client or server certificate from any of these (presumably commercial) CAs to connect to that server.

Yes, numerous restrictions apply. The CAs are from a private chain of trust. Identities are also being restricted. And there are other forms of restrictions.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,187,2020-12-02T15:45:38Z,2021-02-12T14:32:53Z,2021-02-12T14:32:53Z,CLOSED,False,20,1,2,https://github.com/sladkani,libtls: Add 'tls.send_certreq_authorities' configuration knob,1,[],https://github.com/strongswan/strongswan/pull/187,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/187#issuecomment-760962352,"Formerly, when tls server builds the Certificate Request message, all
loaded X509_CA certificates are written into the certificate_authorities
list.
Alas, certain EAP-TLS clients fail to process this message if the
certificate_authorities list is too long, returning fatal TLS alert
'illegal parameter'.
Allow configuring whether the tls server fills the
certificate_authorities list with its known CAs or not; Providing an
empty list is a valid configuration according to TLS spec:
certificate_authorities
A list of the distinguished names [X501] of acceptable
certificate_authorities, represented in DER-encoded format.  These
distinguished names may specify a desired distinguished name for a
root CA or for a subordinate CA; thus, this message can be used to
describe known roots as well as a desired authorization space.  If
the certificate_authorities list is empty, then the client MAY
send any certificate of the appropriate ClientCertificateType,
unless there is some external arrangement to the contrary.
The default is TRUE which preserves former behavior.",A modified version of your patch is now in the tls13 branch.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/ayungman,1,https://github.com/strongswan/strongswan/pull/188,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/188#issuecomment-745310039,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","Why does this require a separate option? Is there a reason not to use it (i.e. configure yes) if the hardware supports full offloading? Is it possible to always add the XFRM flag if offloading is enabled to use the most efficient offloading available (or would that result in a kernel error if full offloading is not supported by the hardware)? Similarly, how does this interact with auto (i.e. can we detect the hardware's abilities for full/partial offload and enable the most efficient form automatically)?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/ayungman,3,https://github.com/strongswan/strongswan/pull/188#issuecomment-746322046,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","One reason not to use the other values is backward compatibility.
Other is kernel raise error if full offloading is not supported by the hardware.
Yes is already known and used as crypto only. Might confuse and fail connection.
Auto is documented and used as try crypto but do not fail if no available, so again the user is not expected to different behavior.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/188#issuecomment-746410175,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","One reason not to use the other values is backward compatibility.

What do you mean?

Other is kernel raise error if full offloading is not supported by the hardware.

Hence my question whether we can detect what kind of offloading the hardware supports and enable the most efficient.

Yes is already known and used as crypto only. Might confuse and fail connection.

What's known? Confuse what and fail how?

Auto is documented and used as try crypto but do not fail if no available, so again the user is not expected to different behavior.

As user, I'd expect auto to configure the ""best"" offloading available (or gracefully fall back to the software implementation if none is available). Why should auto or even yes be limited to offloading crypto only?
A possible reason for new values (full and maybe crypto, but again, why would you want to offload crypto only if the hardware supports full offloading) I can see is to request a specific mode explicitly and force a failure if the hardware does not support that specific mode. But if you don't care whether it's full offloading or crypto only (which is dependent on the hardware and kernel in use, so forcing a mode that's not supported seems not really useful), that's already covered by yes.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/ayungman,5,https://github.com/strongswan/strongswan/pull/188#issuecomment-746644374,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","What your saying ""As user, I'd expect"" sound logical, but it luck the option to force Crypto only for kernel that does not support it. if we set the flag XFRM_OFFLOAD_FULL on Yes then kernel might fail the SA if it does not support full and will not try to do Crypto only. So need to tell it what to do. I do agree auto should do it, not sure kernel has that fall logic.
maybe the best value were explicit:  no, crypto, full.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/188#issuecomment-747335026,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","but it luck the option to force Crypto only for kernel that does not support it

Sorry, I don't understand.

if we set the flag XFRM_OFFLOAD_FULL on Yes then kernel might fail the SA if it does not support full and will not try to do Crypto only

Adding the flag shouldn't matter if the kernel does not know it (i.e. if it's an older kernel that has no support for full offloading yet) as binary flags are usually simply checked with & so additional flags don't matter.
The problem is if the kernel knows it but the hardware doesn't support full offloading. So again my question regarding querying the level of support from the hardware in netlink_find_offload_feature()/netlink_detect_offload(). How do the device features differ if the hardware supports full offloading as compared to crypto only? If there is no difference, that would be disappointing and should probably be changed on the kernel/driver level.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/BorisPis,7,https://github.com/strongswan/strongswan/pull/188#issuecomment-751785373,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","There may be reasons for the user to control whether one offload is used and not the other. For example, if the administrator trusts the crypto offload implementation only for some SAs, but not for others. So, we want to expose fine-grained control of these features rather than sticking to auto alone. The question is how to expose fine-grained control?
Let's say that auto should always use the best option, i.e. full offload (new) falls back to cyrpto offload (existing) which falls back to software.  Then how do we accommodate users who desire crypto offload for one and full offload for another SA, where HW can use full offload for both?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/188#issuecomment-754090119,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","For example, if the administrator trusts the crypto offload implementation only for some SAs, but not for others.

It's already possible to disable offloading per SA. But is there a use case to use full offloading for one SA and limit offloading to crypto only for another (if the interfaces that they use support full offloading and/or might even be the same)? That is, if you don't trust the full offload feature, would you trust the crypto offload feature of the same device? (Maybe because the full offload feature implementation is incomplete and crypto offload with software framing provides missing features?)
But could that maybe also be solved with a global strongswan.conf option that enables full offloading (or disables it, depending on what we can detect and the default should be)? Or is it likely that there are several interfaces used by different SAs and on some you want to use full offload while on others you only want to offload crypto (even if full offload is supported, because otherwise  we don't have a problem provided we can we can detect the supported offload level for each interface)? Considering that, why is this even an option per SA and not on the driver/interface level?

Then how do we accommodate users who desire crypto offload for one and full offload for another SA, where HW can use full offload for both?

As long as auto and yes (without fallback to software) uses the best available option (i.e. we can detect what that is for each interface), I've no problem with adding additional settings that limit and require offloading at a specific level (e.g. full and crypto) if there is a use case for that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,188,2020-12-15T13:47:11Z,,2021-01-07T08:04:03Z,OPEN,False,16,3,5,https://github.com/ayungman,ipsec: Adding full hw-offload configuration support,1,[],https://github.com/strongswan/strongswan/pull/188,https://github.com/BorisPis,9,https://github.com/strongswan/strongswan/pull/188#issuecomment-755954614,"Full offload does both crypto and encapsulation in HW, reducing SW overhead.
In this mode HW fully offloads the ESP data-path including: crypto, transport mode encapsulation, replay protection, ESP sequence number generation, ESN, error reporting.
This commit introduces a new configuration mode: hw_offload = full
Until now the configuration available to user for HW offload were:

hw_offload = no
hw_offload = yes
hw_offload = auto

With this commit users will be able to configure full-offload using:

hw_offload = full

Changes:
new flag HW_OFFLOAD_FULL added
modified config_hw_offload() to support the new flag
new value in swanctl.conf connections:children:hw_offload=full","It's already  #possible to disable offloading per SA.

We don't want to disable it, but rather choose crypto or full offload explicitly.

But is there a use case to use full offloading for one SA and limit offloading to crypto only for another (if the interfaces that they use support full offloading and/or might even be the same)? That is, if you don't trust the full offload feature, would you trust the crypto offload feature of the same device? (Maybe because the full offload feature implementation is incomplete and crypto offload with software framing provides missing features?)

Exactly as you suggested, sometimes full offload will be too restrictive on either (1) reply-protection, (2) framing, (3) selectors, (4) sequence number generation, (5) soft/hard limits, (6) packet fragmentation causing loss, etc. Therefore, providing flexibility to the user is important.
To be more specific, a major use-case we envision for full offload involves virtualization: suppose some VM communicates with another over the network. The hypervisor tunnels VM packets within an overlay (e.g., VXLAN, GRE, etc.). We want to protect this tunnel. The NIC already can offload overlays, and with full offload it can also offload IPsec. The performance gains of this approach are an order of magnitude better compared to existing software-based solutions, especially if the CPU is not very powerful (e.g., ARM-based smartNIC). Additionally, overlays often employ the IP don't fragment bit, and this helps avoid case (6) above.
Now, suppose the user wants to offload only VM encapsulated traffic with full-offload, while other traffic, such as SSH session from the Internet to the hypervisor should use crypto offload, as Intenet traffic is more likely to be fragmented. How should we approach this using strongswan?
Per-SA configuration works fine as the user knows what is needed. But, global configuration is tricky, as it may be hard to determine automatically, what is an overlay and what is directed to the internet, right?

But could that maybe also be solved with a global strongswan.conf option that enables full offloading (or disables it, depending on what we can detect and the default should be)? Or is it likely that there are several interfaces used by different SAs and on some you want to use full offload while on others you only want to offload crypto (even if full offload is supported, because otherwise we don't have a problem provided we can we can detect the supported offload level for each interface)? Considering that, why is this even an option per SA and not on the driver/interface level?

For simplicity, we can provide an easy automatic configuration for: try full-offload, otherwise fallback to crypto, and otherwise fallback to software. However, it may struggle to capture the use-case described above. This can be managed in kernel XFRM.


Then how do we accommodate users who desire crypto offload for one and full offload for another SA, where HW can use full offload for both?

As long as auto and yes (without fallback to software) uses the best available option (i.e. we can detect what that is for each interface), I've no problem with adding additional settings that limit and require offloading at a specific level (e.g. full and crypto) if there is a use case for that.

So we will expand auto to capture the (full or crypto) case and add an option to choose whether full or crypto is disabled for some SA.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,189,2020-12-20T02:35:52Z,2021-01-22T09:44:46Z,2021-01-22T15:25:13Z,CLOSED,False,549,2,1,https://github.com/sddj,Implement the farp plugin on macos,6,[],https://github.com/strongswan/strongswan/pull/189,https://github.com/sddj,1,https://github.com/strongswan/strongswan/pull/189,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,189,2020-12-20T02:35:52Z,2021-01-22T09:44:46Z,2021-01-22T15:25:13Z,CLOSED,False,549,2,1,https://github.com/sddj,Implement the farp plugin on macos,6,[],https://github.com/strongswan/strongswan/pull/189,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/189#issuecomment-754078009,,"Interesting. Please see Contributions and ProgrammingStyle on our wiki.
Also, is that macOS only or would that BPF approach also work on FreeBSD?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,189,2020-12-20T02:35:52Z,2021-01-22T09:44:46Z,2021-01-22T15:25:13Z,CLOSED,False,549,2,1,https://github.com/sddj,Implement the farp plugin on macos,6,[],https://github.com/strongswan/strongswan/pull/189,https://github.com/sddj,3,https://github.com/strongswan/strongswan/pull/189#issuecomment-757353665,,"Interesting. Please see Contributions and ProgrammingStyle on our wiki.
Also, is that macOS only or would that BPF approach also work on FreeBSD?

Updated based on Contributions and ProgrammingStyle.  I still need to look into FreeBSD.
update: 2021-01-17 -- I compiled and ran in a FreeBSD VM, fixing one initialization issue. With those changes, this patch works on macOS and FreeBSD.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,189,2020-12-20T02:35:52Z,2021-01-22T09:44:46Z,2021-01-22T15:25:13Z,CLOSED,False,549,2,1,https://github.com/sddj,Implement the farp plugin on macos,6,[],https://github.com/strongswan/strongswan/pull/189,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/189#issuecomment-763022233,,"Great, thanks.
I've squashed your commits together and pushed them along with several refactorings and fixups to the gh189-farp-bpf branch. It compiles on macOS and FreeBSD on our build hosts, but I could not test the actual functionality. Could you verify that I didn't break anything?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,189,2020-12-20T02:35:52Z,2021-01-22T09:44:46Z,2021-01-22T15:25:13Z,CLOSED,False,549,2,1,https://github.com/sddj,Implement the farp plugin on macos,6,[],https://github.com/strongswan/strongswan/pull/189,https://github.com/sddj,5,https://github.com/strongswan/strongswan/pull/189#issuecomment-765022380,,"I have reviewed the changes and found two small issues.  The loop searching through handlers needs to continue iterating until a matching interface_name is found.  setup_handlers() needs to return FALSE when getifaddrs() fails.  I've attached a patch with fixes.  I successfully tested with these changes.
2020-01-21.patch.txt",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,189,2020-12-20T02:35:52Z,2021-01-22T09:44:46Z,2021-01-22T15:25:13Z,CLOSED,False,549,2,1,https://github.com/sddj,Implement the farp plugin on macos,6,[],https://github.com/strongswan/strongswan/pull/189,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/189#issuecomment-765279041,,"Great, thanks. I've merged the changes to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,190,2021-01-18T15:18:48Z,2021-01-20T15:25:35Z,2021-01-20T15:25:35Z,CLOSED,False,6321,1199,38,https://github.com/ryru,TLS 1.3 downgrade protection patch,97,[],https://github.com/strongswan/strongswan/pull/190,https://github.com/ryru,1,https://github.com/strongswan/strongswan/pull/190,This patch add downgrade protection as specified in RFC 8446 section 4.1.3.,This patch add downgrade protection as specified in RFC 8446 section 4.1.3.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,190,2021-01-18T15:18:48Z,2021-01-20T15:25:35Z,2021-01-20T15:25:35Z,CLOSED,False,6321,1199,38,https://github.com/ryru,TLS 1.3 downgrade protection patch,97,[],https://github.com/strongswan/strongswan/pull/190,https://github.com/ryru,2,https://github.com/strongswan/strongswan/pull/190#issuecomment-762899308,This patch add downgrade protection as specified in RFC 8446 section 4.1.3.,"I addaped your requests and tested downgrade functionality:


Case 1: set original_max_version to TLS_1_3 and start a server with ./scripts/tls_test --listen localhost --port 8443 --key caKey.der --cert cert.der --debug 2 --max-version 1.2. Client ends connection with a illegal parameter fatal alert as expected.


Case 2: set original_max_version to TLS_1_2 and start a server with ./scripts/tls_test --listen localhost --port 8443 --key caKey.der --cert cert.der --debug 2 --max-version 1.1. Client ends connection with a illegal parameter fatal alert as expected.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,190,2021-01-18T15:18:48Z,2021-01-20T15:25:35Z,2021-01-20T15:25:35Z,CLOSED,False,6321,1199,38,https://github.com/ryru,TLS 1.3 downgrade protection patch,97,[],https://github.com/strongswan/strongswan/pull/190,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/190#issuecomment-763708219,This patch add downgrade protection as specified in RFC 8446 section 4.1.3.,"Great, thanks a lot. I've pushed the commit with some minor changes (mainly renamed the variables so they match the other code and the name of the method) to the tls13 branch (interesting that GitHub added this as an event to this PR).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,191,2021-01-21T14:33:27Z,2021-01-21T14:34:07Z,2021-01-21T14:34:13Z,CLOSED,False,55,0,2,https://github.com/tobiasbrunner,Update issue templates,1,[],https://github.com/strongswan/strongswan/pull/191,https://github.com/tobiasbrunner,1,https://github.com/strongswan/strongswan/pull/191,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/securitykernel,1,https://github.com/strongswan/strongswan/pull/192,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/apps/lgtm-com,2,https://github.com/strongswan/strongswan/pull/192#issuecomment-765388702,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","This pull request introduces 1 alert when merging 358f704 into 8d8739a - view on LGTM.com
new alerts:

1 for Implicit function declaration",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/192#issuecomment-765390099,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","Looks interesting. Wouldn't a destructor (that receives the context) make sense for botan_rng_init_custom() (the original draft in the issue had that)? That would allow simplifying the code quite a bit as botan_get_strongswan_rng() could handle the creation of the rng_t object and botan_rng_destroy() could automatically destroy that instance again.

This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.

Yes, a fallback is definitely necessary (would be a lot easier with the above as everything could be handled in botan_get_strongswan_rng() or whatever we call it). If a define like BOTAN_HAS_CUSTOM_RNG was available, that could easily be done (otherwise, we could perhaps add a configure check for it).
I also wonder if a config option would make sense to force the plugin to use the internal RNG even if other plugins providing RNGs are loaded.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/securitykernel,4,https://github.com/strongswan/strongswan/pull/192#issuecomment-769653186,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","@tobiasbrunner Good idea, added back the destructor and refactor the plugin. Removed quite a bit of duplicated code. Now the only thing missing is the fallback for older Botan versions. Unfortunately, there's no BOTAN_HAS_CUSTOM_RNG definition from Botan. For the C API, you can only query the API version at runtime using botan_ffi_api_version(). Its probably the best way to add a configure check to strongswan.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/apps/lgtm-com,5,https://github.com/strongswan/strongswan/pull/192#issuecomment-769664086,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","This pull request introduces 1 alert when merging 3ab2e0d into 4525233 - view on LGTM.com
new alerts:

1 for Implicit function declaration",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/securitykernel,6,https://github.com/strongswan/strongswan/pull/192#issuecomment-769687599,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","I may have inadvertently broke ed25519 signatures in the Botan plugin, but looking at the diff now, I can not spot the error. If you have a hint ...
 Passed all 2 'prf_plus' test cases
  Running suite 'ed25519':
    Running case 'ed25519_sign': -----
      Failure in 'test_ed25519_sign': pubkey != NULL (suites/test_ed25519.c:326, i = 0)
      Failure in 'test_ed25519_sign': pubkey != NULL (suites/test_ed25519.c:326, i = 1)
      Failure in 'test_ed25519_sign': pubkey != NULL (suites/test_ed25519.c:326, i = 2)
      Failure in 'test_ed25519_sign': pubkey != NULL (suites/test_ed25519.c:326, i = 3)
      Failure in 'test_ed25519_sign': pubkey != NULL (suites/test_ed25519.c:326, i = 4)
    Running case 'ed25519_gen': -
      Failure in 'test_ed25519_gen': pubkey->get_encoding(pubkey, PUBKEY_PEM, &encoding) (suites/test_ed25519.c:395, i = 0)
    Running case 'ed25519_fail': -
      Failure in 'test_ed25519_fail': pubkey != NULL (suites/test_ed25519.c:529, i = 0)
    Running case 'ed25519_speed': +
  Passed 1/4 'ed25519' test cases",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,192,2021-01-22T12:45:43Z,2021-02-15T08:30:42Z,2021-02-15T08:30:42Z,CLOSED,False,101,12,10,https://github.com/securitykernel,Use strongswan RNG interface in Botan plugin,6,[],https://github.com/strongswan/strongswan/pull/192,https://github.com/apps/lgtm-com,7,https://github.com/strongswan/strongswan/pull/192#issuecomment-769699369,"Uses a new API introduced in randombit/botan#2600 to register the internal RNG crypto API as a random number generator for use in all Botan API calls that require a random number generator. With this in place, users using the Botan plugin can make it use an different random number generator via another plugin instead of being forced to use Botan's RNG.
This API functions is likely introduced in one of the upcoming versions of Botan, so we need to decide what to do until then, e.g., provide some kind of fallback to the old behaviour.","This pull request introduces 1 alert when merging b3a3efc into 4525233 - view on LGTM.com
new alerts:

1 for Implicit function declaration",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,193,2021-01-24T20:21:56Z,2021-01-27T15:38:39Z,2021-01-27T15:38:39Z,CLOSED,False,11,2,3,https://github.com/mskalski,"plugins pkcs11, kernel_iph: Windows build fixes",3,[],https://github.com/strongswan/strongswan/pull/193,https://github.com/mskalski,1,https://github.com/strongswan/strongswan/pull/193,"pkcs11: allow compile plugin for Windows - add DLL loading compat macros
kernel_iph: fixes build when -DNOCRYPT compiler option  is given, as
suggested by openssl plugin compilation for Windows because of
conflicting definitions of X509_EXTENSIONS","pkcs11: allow compile plugin for Windows - add DLL loading compat macros
kernel_iph: fixes build when -DNOCRYPT compiler option  is given, as
suggested by openssl plugin compilation for Windows because of
conflicting definitions of X509_EXTENSIONS",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,193,2021-01-24T20:21:56Z,2021-01-27T15:38:39Z,2021-01-27T15:38:39Z,CLOSED,False,11,2,3,https://github.com/mskalski,"plugins pkcs11, kernel_iph: Windows build fixes",3,[],https://github.com/strongswan/strongswan/pull/193,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/193#issuecomment-768371387,"pkcs11: allow compile plugin for Windows - add DLL loading compat macros
kernel_iph: fixes build when -DNOCRYPT compiler option  is given, as
suggested by openssl plugin compilation for Windows because of
conflicting definitions of X509_EXTENSIONS","Alright, great. I've pushed the changes to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,194,2021-01-29T18:34:30Z,,2021-02-01T15:54:22Z,OPEN,False,315,17,3,https://github.com/mskalski,3684-generic-glob: glob enumerator using only built-in functions (not platform specific),3,[],https://github.com/strongswan/strongswan/pull/194,https://github.com/mskalski,1,https://github.com/strongswan/strongswan/pull/194,"Implementation of enumerator_create_glob() using only other functions
from strongswan's core, not using any platform specific functions
Supports '*' and '?' wildcards, no character ranges nor escapes
(as '\' character is used on windows path separator)
Probably would be good to include also path_is_sep() and two more
functions to generic path manipulations in <path.h> also possibly pattern
matching function would be useful.","Implementation of enumerator_create_glob() using only other functions
from strongswan's core, not using any platform specific functions
Supports '*' and '?' wildcards, no character ranges nor escapes
(as '\' character is used on windows path separator)
Probably would be good to include also path_is_sep() and two more
functions to generic path manipulations in <path.h> also possibly pattern
matching function would be useful.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,195,2021-02-02T08:48:58Z,2021-02-12T14:32:28Z,2021-02-12T14:32:28Z,CLOSED,False,6592,1204,41,https://github.com/ryru,TLS 1.3 configuration file enhancements,108,[],https://github.com/strongswan/strongswan/pull/195,https://github.com/ryru,1,https://github.com/strongswan/strongswan/pull/195,"This PR addresses two configuration file enhancements and additions regarding TLS 1.3 DH group and signature scheme configuration.

DH group configuration by the config specifier ke_group
Approach to filter signature schemes in configuration files","This PR addresses two configuration file enhancements and additions regarding TLS 1.3 DH group and signature scheme configuration.

DH group configuration by the config specifier ke_group
Approach to filter signature schemes in configuration files",True,{'HEART': ['https://github.com/gfwbgg']}
strongswan/strongswan,https://github.com/strongswan/strongswan,195,2021-02-02T08:48:58Z,2021-02-12T14:32:28Z,2021-02-12T14:32:28Z,CLOSED,False,6592,1204,41,https://github.com/ryru,TLS 1.3 configuration file enhancements,108,[],https://github.com/strongswan/strongswan/pull/195,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/195#issuecomment-772716706,"This PR addresses two configuration file enhancements and additions regarding TLS 1.3 DH group and signature scheme configuration.

DH group configuration by the config specifier ke_group
Approach to filter signature schemes in configuration files","Thanks, looks good. Applied the two commits to the tls13 branch with minor changes (one was only registering the credential set once).
I think we go with the TLS strings, as using the existing pubkey constraints would complicate the parsing, would require several additional changes (e.g. a way to convert a signature scheme to a parsable config string), and is kinda awkward (at least currently, a hash algorithm is always necessary, even for EdDSA). In the future, we maybe could add support for the constraints we use for IKE also for EAP-TLS (e.g. when configured via remote.auth in the config), which is currently only supported for certificate chain validation. But that wouldn't directly involve this global option (filtering would additionally be done based on an existing auth_config_t), so supporting the same syntax would mainly be for consistency (and could still be added if necessary).
By the way, I noticed another issue related to ECC. While we use/accept TLS 1.2 suites with KEY_ECDSA even if we only have an EdDSA key available, the same is not the case if we only have X25519 available (i.e. no ECP groups). All suites that list a ECP group will be filtered even though X25519 should work with them. RFC 8422 also does not tie DH groups/curves to specific cipher suites. While it might make sense as client to select a (default) group/curve that's consistent with the strength of the other algorithms in the suite, it seems a bit too rigid when filtering/matching them.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,195,2021-02-02T08:48:58Z,2021-02-12T14:32:28Z,2021-02-12T14:32:28Z,CLOSED,False,6592,1204,41,https://github.com/ryru,TLS 1.3 configuration file enhancements,108,[],https://github.com/strongswan/strongswan/pull/195,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/195#issuecomment-777658779,"This PR addresses two configuration file enhancements and additions regarding TLS 1.3 DH group and signature scheme configuration.

DH group configuration by the config specifier ke_group
Approach to filter signature schemes in configuration files",I've added some commits to address the ECDH/cipher suite issue.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,197,2021-02-15T19:10:39Z,2021-02-16T07:58:29Z,2021-02-16T07:58:34Z,CLOSED,False,1,1,1,https://github.com/fkorotkov,FreeBSD 12.2,1,[],https://github.com/strongswan/strongswan/pull/197,https://github.com/fkorotkov,1,https://github.com/strongswan/strongswan/pull/197,Seems it's fixing the installation. 12.2 is the new CURRENT and the packages are frequently updated under the hood so that might have been the issue.,Seems it's fixing the installation. 12.2 is the new CURRENT and the packages are frequently updated under the hood so that might have been the issue.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,197,2021-02-15T19:10:39Z,2021-02-16T07:58:29Z,2021-02-16T07:58:34Z,CLOSED,False,1,1,1,https://github.com/fkorotkov,FreeBSD 12.2,1,[],https://github.com/strongswan/strongswan/pull/197,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/197#issuecomment-779657152,Seems it's fixing the installation. 12.2 is the new CURRENT and the packages are frequently updated under the hood so that might have been the issue.,Great! Thanks a lot for looking into this.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,200,2021-02-16T16:19:54Z,,2021-02-16T16:19:54Z,OPEN,False,4208,127,63,https://github.com/cwinkler-marvell,RFC FC-SP-2,6,[],https://github.com/strongswan/strongswan/pull/200,https://github.com/cwinkler-marvell,1,https://github.com/strongswan/strongswan/pull/200,Changes proposed to strongSwan core to support FC-SP-2.  Solution allows coexistence of IPSec and FC-SP-2 connections on the same server with a single instance of strongSwan.  Changes have been fully tested.,Changes proposed to strongSwan core to support FC-SP-2.  Solution allows coexistence of IPSec and FC-SP-2 connections on the same server with a single instance of strongSwan.  Changes have been fully tested.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/201,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/201#issuecomment-780892153,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","Eh, well, I didn't touch libptls or others, so there's still work to be done.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/201#issuecomment-781138837,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.",Did you miss callback_cred_t?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/201#issuecomment-781171834,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","No, because callback_cred_t doesn't support dynamic or any kind of callback mechanism that provides either ID information, or anything received by the xauth or eap plugins.
Or am I wrong? I don't see how anything like that is possible with callback_cred_t, or their use in credentials_manager_t (because there they are in thread local sets).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/201#issuecomment-781189164,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","Not sure what you are referring to. The callback receives the same information that's passed to the create_shared_enumerator() of a full credential set (type, local and remote identity).  By the way, in the android-pw-callback branch I integrated similar on-demand functionality into an instance of the latter (""android: Query user if no password is configured"" commit).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/Thermi,6,https://github.com/strongswan/strongswan/pull/201#issuecomment-781343153,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","Well, okay, I did not know about the type. At the very least, to get the peer's text message to the callback, it needs to be passed to the credentials manager, so some code change in libcharon is needed anyway. Would it be acceptable to rewrite the code to make use of callback_cred_t? It'd result in swanctl and VICI gaining the ability to provide credentials dynamically and the server message (might be customized on specific commercial VPN peers). If several authentication rounds are used, the message can be important (e.g. if the account uses MFA, the second round on the initiator side might prompt for a TOTP. The user needs to know a TOTP secret is wanted, not the password for the user account).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/201#issuecomment-781355379,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","At the very least, to get the peer's text message to the callback, it needs to be passed to the credentials manager, so some code change in libcharon is needed anyway.

Can't the message be determined before and passed to the callback as data? Or could it be generated as needed in the callback (e.g. based on the passed data and maybe context information that could be retrieved via bus_t::get_sa)? Where secrets are enumerated it might not be obvious what purpose they have (in the larger picture) or what format/language the message should be (and requiring every call site/plugin to provide potentially the same messages doesn't seem ideal). Also, blindly passing messages/data received from the server (what authentication methods even provide that?) to a vici client/console sounds like a potential security issue.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/Thermi,8,https://github.com/strongswan/strongswan/pull/201#issuecomment-781646007,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","No, the message is dynamically generated by the server. E.g. eap-gtc supports that. And so does XAUTH (but IKEv1 is deprecated anyway). The message is part of the challenge, so it's available at the time the challenge is processed.
The context and language should be evident from the message sent by the other peer, so that's no issue. I think we can safely assume only UTF-8 or ASCII is part of the message, no UTF-16. We only need to make sure no weird formatting characters are in there, or NULL bytes. At the moment, the message is simply not processed by strongSwan and strongSwan itself sends out a static message. See https://tools.ietf.org/html/rfc3748#section-5.6:
     The Generic Token Card Type is defined for use with various Token
      Card implementations which require user input.  The Request
      contains a displayable message and the Response contains the Token
      Card information necessary for authentication.  Typically, this
      would be information read by a user from the Token card device and
      entered as ASCII text.

For XAUTH, this is relevant https://tools.ietf.org/html/draft-beaulieu-ike-xauth-02#section-5.2 and https://tools.ietf.org/html/draft-beaulieu-ike-xauth-02#section-6.2, specifically the  XAUTH-MESSAGE attribute.
Generally, other authentication methods might need user visible messages, too.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,201,2021-02-17T22:03:51Z,,2021-02-28T07:09:39Z,OPEN,False,1045,134,57,https://github.com/Thermi,Vici prompt,12,[],https://github.com/strongswan/strongswan/pull/201,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/201#issuecomment-781958987,"Quick'n dirty implementation of a callback for VICI in credential_manager_t so VICI clients can provide shared credentials, e.g. PINs and passwords via VICI. Useful and necessary for implementing a desktop client that supports TOTP.","Yeah, I saw that we print the XAuth message to the log (after running it through chunk_printable()). As you noted, the message in EAP-GTC requests is currently just ignored. I guess we could sanitize that too and pass it to the get_shared() (this is the main entry for user passwords) and create_shared_enumerator() (called by the former and where the secrets are provided) methods of credential_manager_t and credential_set_t.  There could still be issues regarding the formatting (e.g. whether the message ends with a : and/or spaces). I pushed something to that effect to the gh201-shared-msg branch. The only user so far charon-cmd.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/mskalski,1,https://github.com/strongswan/strongswan/pull/215,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/215#issuecomment-784000900,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","These use identifiers from the private range (they are only defined as internal identifiers for use in TLS or PKCS#12). So I wonder what point there is to add support for them as they would only work between strongSwan instances (potentially only of the same version as the identifier values might change). The truncation also does have potential security benefits (see RFC 4868, which defines the truncated variants, for details) and the overhead without it is quite significant for ESP. If you need a 256-bit ICV, just use regular, truncated SHA-512, which generally is also faster to calculate than SHA-256 on 64-bit CPUs.
Thanks for the fix in the af-alg plugin, though. I've applied that to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/mskalski,3,https://github.com/strongswan/strongswan/pull/215#issuecomment-784059484,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","Yes, I'm aware of private range of hmac-sha2-full identifiers. But these might be useful for negotiating ESP algorithms which are forced to be full-sized for some devices.
I think it could be convenient for plugins / devices using these algorithms (especially when passing to kernel for ESP/AH) to have them already defined, as code changes in this PR are rather simple.
Please note, that some other algorithms from private range (i.e AUTH_CAMELLIA_XCBC_96, AUTH_HMAC_SHA1_128 ENCR_TWOFISH_CBC or ENCR_SERPENT_CBC) already have defined proposal keywords and are supported by e.g. linux kernel_netlink plugin.
Thanks for looking at it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/215#issuecomment-784073388,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","But these might be useful for negotiating ESP algorithms which are forced to be full-sized for some devices.

What do you mean?

Please note, that some other algorithms from private range (i.e AUTH_CAMELLIA_XCBC_96, AUTH_HMAC_SHA1_128 ENCR_TWOFISH_CBC or ENCR_SERPENT_CBC) already have defined proposal keywords and are supported by e.g. linux kernel_netlink plugin.

Yes, but these are for legacy reasons (from a time where AES or the modern AEAD algorithms were not yet well established) and mostly interoperable with other FreeS/WAN forks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/mskalski,5,https://github.com/strongswan/strongswan/pull/215#issuecomment-784084488,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","But these might be useful for negotiating ESP algorithms which are forced to be full-sized for some devices.

What do you mean?

Well, I just have to cooperate with some devices (among other) using sha-256_256 ESP algorithm. Also for legacy compability reasons.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/215#issuecomment-784165092,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","Well, I just have to cooperate with some devices (among other) using sha-256_256 ESP algorithm. Also for legacy compability reasons.

What devices are this that use non-standardized algorithms for ESP? And for what purpose (there really doesn't seem to be any benefit to use the full length)? And are these the only algorithms they support? And why legacy compatibility? Which legacy IPsec implementations use these algorithms that were never defined (or is this something like the 96-bit SHA-256 Linux bug)? And also, for those use cases our private identifiers won't be useful anyway, right?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/mskalski,7,https://github.com/strongswan/strongswan/pull/215#issuecomment-784184635,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","Well, I just have to cooperate with some devices (among other) using sha-256_256 ESP algorithm. Also for legacy compability reasons.

What devices are this that use non-standardized algorithms for ESP? And for what purpose (there really doesn't seem to be any benefit to use the full length)? And are these the only algorithms they support? And why legacy compatibility? Which legacy IPsec implementations use these algorithms that were never defined (or is this something like the 96-bit SHA-256 Linux bug)? And also, for those use cases our private identifiers won't be useful anyway, right?

Sorry I wasn't clear enough. These are some classified IKEv1 devices which are still in use now, but I want to support them apart of new ones implementing IKEv2 correctly. So this is (for me) the meaning of  legacy :-).
Yes - the algorithm sha256_256 is the only one auth algorithm the device supports. I've read about potential security benefits and rationales for choosing specific auth lengths, but auth sha256_256 just was done before SHA256 was standardised.
And you're right, private identifiers are not useful at all (as are not useful at all for IKEv1 because translation made inside IKEv1 encoding), but possibility of adding full-sized ESP algorithm would be really appreciated.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/215#issuecomment-784212936,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","I feel really sorry for you that you have to work with such crap. I guess I can live with the changes to keymat.c and the kernel-netlink plugin (mainly because there is currently no easy way to extend these things from a plugin). But to avoid interoperability issues, I don't want people configuring them, so no new keywords (if you need them, can define them yourself from a plugin via lib->proposal->register_token()). Finally, the changes in the save-keys plugin seem of not much use (considering the plugin is rarely built and Wireshark, rightly so, doesn't support the algorithms). I've pushed the modified commits to the gh215-sha2-no-trunc branch. Let me know if that's OK for you.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/mskalski,9,https://github.com/strongswan/strongswan/pull/215#issuecomment-784222718,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","LGTM, And I agree with proposals, as using register_token is what I've already done.
I would rather keep also changes in save_keys plugin - as you said this plugin is mainly for development, so its inclusion does not decrease any security more :-). But it would help me a lot if this was in upstream code. If not - it is also OK.
Thank you very much for your help.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/tobiasbrunner,10,https://github.com/strongswan/strongswan/pull/215#issuecomment-784249813,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","I don't like the commented out entries there (I guess Wireshark would just refuse to load the file if we'd write ANY 384 bit ...?). But I agree that adding the SHA-256 entry doesn't do any harm, even if Wireshark will just ignore it. I also found a bug, so there would be changes to the plugin anyway. I pushed these changes to the branch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/mskalski,11,https://github.com/strongswan/strongswan/pull/215#issuecomment-784312031,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","The branch gh215-sha2-no-trunc looks perfect :-), Thank you again",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,215,2021-02-22T16:14:59Z,2021-02-23T16:31:39Z,2021-02-23T16:31:53Z,CLOSED,False,27,1,5,https://github.com/mskalski,Add IKE and ESP support for full-sized HMAC_SHA2 algorithms,4,[],https://github.com/strongswan/strongswan/pull/215,https://github.com/tobiasbrunner,12,https://github.com/strongswan/strongswan/pull/215#issuecomment-784330960,"Add support for IKE (proposals) and ESP (for Linux netlink) for following proprietary algorithms:

AUTH_HMAC_SHA2_256_256
AUTH_HMAC_SHA2_384_384
AUTH_HMAC_SHA2_512_512

Also enables saving ESP keys for AUTH_HMAC_SHA2_256_256 algorithm (other are too long to be supported in Wireshark).
Fixed typo in af_alg strongswan plugin.","Thanks, merged to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,217,2021-02-25T16:22:18Z,2021-09-02T09:07:07Z,2021-10-12T16:31:32Z,CLOSED,False,2,1,1,https://github.com/Thermi,vici: Add DBG4 for IKE that prints loaded PSKs with their Identities …,1,[],https://github.com/strongswan/strongswan/pull/217,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/217,"…and the secret, and PINs
The stroke backend prints PSKs and PINs when CFG is set to 4, but vici doesn't.
This commit adds code that does that for vici.","…and the secret, and PINs
The stroke backend prints PSKs and PINs when CFG is set to 4, but vici doesn't.
This commit adds code that does that for vici.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,217,2021-02-25T16:22:18Z,2021-09-02T09:07:07Z,2021-10-12T16:31:32Z,CLOSED,False,2,1,1,https://github.com/Thermi,vici: Add DBG4 for IKE that prints loaded PSKs with their Identities …,1,[],https://github.com/strongswan/strongswan/pull/217,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/217#issuecomment-907346487,"…and the secret, and PINs
The stroke backend prints PSKs and PINs when CFG is set to 4, but vici doesn't.
This commit adds code that does that for vici.",I edited the commit to use the changes you requested.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,217,2021-02-25T16:22:18Z,2021-09-02T09:07:07Z,2021-10-12T16:31:32Z,CLOSED,False,2,1,1,https://github.com/Thermi,vici: Add DBG4 for IKE that prints loaded PSKs with their Identities …,1,[],https://github.com/strongswan/strongswan/pull/217,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/217#issuecomment-909127428,"…and the secret, and PINs
The stroke backend prints PSKs and PINs when CFG is set to 4, but vici doesn't.
This commit adds code that does that for vici.","I've pushed this to the 217-shared-dbg branch with a minor change (besides the commit message): I moved the PIN log message to where the PIN is actually stored persistently (so both messages are before the add_shared_unqiue call), so we don't get the message if the private key can't be ""loaded"" from the token and the PIN is destroyed. If that's OK for you, I'll apply it to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,217,2021-02-25T16:22:18Z,2021-09-02T09:07:07Z,2021-10-12T16:31:32Z,CLOSED,False,2,1,1,https://github.com/Thermi,vici: Add DBG4 for IKE that prints loaded PSKs with their Identities …,1,[],https://github.com/strongswan/strongswan/pull/217,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/217#issuecomment-910525638,"…and the secret, and PINs
The stroke backend prints PSKs and PINs when CFG is set to 4, but vici doesn't.
This commit adds code that does that for vici.","Sure, it's okay for me.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,217,2021-02-25T16:22:18Z,2021-09-02T09:07:07Z,2021-10-12T16:31:32Z,CLOSED,False,2,1,1,https://github.com/Thermi,vici: Add DBG4 for IKE that prints loaded PSKs with their Identities …,1,[],https://github.com/strongswan/strongswan/pull/217,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/217#issuecomment-911442906,"…and the secret, and PINs
The stroke backend prints PSKs and PINs when CFG is set to 4, but vici doesn't.
This commit adds code that does that for vici.","Applied to master, thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,250,2021-03-11T13:36:39Z,2021-03-20T10:13:31Z,2021-03-20T10:13:31Z,CLOSED,False,3,3,1,https://github.com/wasy168,Update openssl_ec_diffie_hellman.c,1,['bug'],https://github.com/strongswan/strongswan/pull/250,https://github.com/wasy168,1,https://github.com/strongswan/strongswan/pull/250,Use openssl normal functions instead of deprecated functions,Use openssl normal functions instead of deprecated functions,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,250,2021-03-11T13:36:39Z,2021-03-20T10:13:31Z,2021-03-20T10:13:31Z,CLOSED,False,3,3,1,https://github.com/wasy168,Update openssl_ec_diffie_hellman.c,1,['bug'],https://github.com/strongswan/strongswan/pull/250,https://github.com/strongX509,2,https://github.com/strongswan/strongswan/pull/250#issuecomment-801028794,Use openssl normal functions instead of deprecated functions,"If I look at the ec.h openssl header file
https://github.com/openssl/openssl/blob/master/include/openssl/ec.h#L609
it seems the other way around:
int EC_POINT_set_affine_coordinates()

is the regular function and
OSSL_DEPRECATEDIN_3_0 int EC_POINT_set_affine_coordinates_GFp()

will be deprecated with Openssl 3.0.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,250,2021-03-11T13:36:39Z,2021-03-20T10:13:31Z,2021-03-20T10:13:31Z,CLOSED,False,3,3,1,https://github.com/wasy168,Update openssl_ec_diffie_hellman.c,1,['bug'],https://github.com/strongswan/strongswan/pull/250,https://github.com/wasy168,3,https://github.com/strongswan/strongswan/pull/250#issuecomment-801737865,Use openssl normal functions instead of deprecated functions,"Yes, in version 5.9.2 are the functions xxx_GFp using in openssl_ec_diffie_hellman.c, will be better if the regular functions:

EC_POINT_set_affine_coordinates and EC_POINT_get_affine_coordinates can be used.
…
________________________________
Von: Andreas Steffen ***@***.***>
Gesendet: Mittwoch, 17. März 2021 12:04
An: strongswan/strongswan ***@***.***>
Cc: wasy168 ***@***.***>; Author ***@***.***>
Betreff: Re: [strongswan/strongswan] Update openssl_ec_diffie_hellman.c (#250)


If I look at the ec.h openssl header file

https://github.com/openssl/openssl/blob/master/include/openssl/ec.h#L609

it seems the other way around:

int EC_POINT_set_affine_coordinates()


is the regular function and

OSSL_DEPRECATEDIN_3_0 int EC_POINT_set_affine_coordinates_GFp()


will be deprecated with Openssl 3.0.

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#250 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AIFW7SFUBSFSKZBVSJICCDLTECLGVANCNFSM4ZAJNQKQ>.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,250,2021-03-11T13:36:39Z,2021-03-20T10:13:31Z,2021-03-20T10:13:31Z,CLOSED,False,3,3,1,https://github.com/wasy168,Update openssl_ec_diffie_hellman.c,1,['bug'],https://github.com/strongswan/strongswan/pull/250,https://github.com/strongX509,4,https://github.com/strongswan/strongswan/pull/250#issuecomment-802624257,Use openssl normal functions instead of deprecated functions,"I propose the following fix:
diff --git a/src/libstrongswan/plugins/openssl/openssl_ec_diffie_hellman.c b/src/libstrongswan/plugins/openssl/openssl_ec_diffie_hellman.c
index 53691205d..68a517035 100644
--- a/src/libstrongswan/plugins/openssl/openssl_ec_diffie_hellman.c
+++ b/src/libstrongswan/plugins/openssl/openssl_ec_diffie_hellman.c
@@ -506,7 +506,11 @@ EC_GROUP *ec_group_new_brainpool(bp_curve *curve)
                goto failed;
        }
        G = EC_POINT_new(group);
+#ifdef OPENSSL_VERSION_NUMBER >= 0x1010100fL
+       if (!G || !EC_POINT_set_affine_coordinates(group, G, x, y, ctx))
+#else
        if (!G || !EC_POINT_set_affine_coordinates_GFp(group, G, x, y, ctx))
+#endif
        {
                goto failed;
        }

since the first two occurences are restricted to Openssl versions < 1.1.0 anyway and Boringssl is still on the old format:
#if OPENSSL_VERSION_NUMBER < 0x1010000fL || defined(OPENSSL_IS_BORINGSSL)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,250,2021-03-11T13:36:39Z,2021-03-20T10:13:31Z,2021-03-20T10:13:31Z,CLOSED,False,3,3,1,https://github.com/wasy168,Update openssl_ec_diffie_hellman.c,1,['bug'],https://github.com/strongswan/strongswan/pull/250,https://github.com/strongX509,5,https://github.com/strongswan/strongswan/pull/250#issuecomment-803284232,Use openssl normal functions instead of deprecated functions,Committed fix bd323ae to master,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,316,2021-04-12T22:51:46Z,2021-05-10T16:56:57Z,2021-05-10T16:56:57Z,CLOSED,False,4,0,1,https://github.com/Thermi,vendor-id: VendorID for AVM FRITZ OS boxes,1,[],https://github.com/strongswan/strongswan/pull/316,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/316,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,316,2021-04-12T22:51:46Z,2021-05-10T16:56:57Z,2021-05-10T16:56:57Z,CLOSED,False,4,0,1,https://github.com/Thermi,vendor-id: VendorID for AVM FRITZ OS boxes,1,[],https://github.com/strongswan/strongswan/pull/316,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/316#issuecomment-819010217,,Ty,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,317,2021-04-12T23:01:23Z,2021-05-21T15:55:20Z,2021-05-21T23:12:12Z,CLOSED,False,103,49,4,https://github.com/Thermi,vendor-id: VendorID for Netscreen series devices (Juniper SSG),7,[],https://github.com/strongswan/strongswan/pull/317,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/317,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,317,2021-04-12T23:01:23Z,2021-05-21T15:55:20Z,2021-05-21T23:12:12Z,CLOSED,False,103,49,4,https://github.com/Thermi,vendor-id: VendorID for Netscreen series devices (Juniper SSG),7,[],https://github.com/strongswan/strongswan/pull/317,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/317#issuecomment-832660087,,"This won't work if something follows the initial blob (same applies to the Checkpoint VID, the AVM FB VID should be fine and the Windows one too as that includes the version number). Currently, the complete VID data has to match. Only for some IKEv1 VIDs is a manual prefix match done (after checking the full length): 
  
    
      strongswan/src/libcharon/sa/ikev1/tasks/isakmp_vendor.c
    
    
        Lines 178 to 199
      in
      09df86c
    
  
  
    

        
          
           switch (vendor_ids[i].extension) 
        

        
          
           { 
        

        
          
           	case EXT_IKE_FRAGMENTATION: 
        

        
          
           		if (data.len >= 16 && memeq(data.ptr, vendor_ids[i].id, 16)) 
        

        
          
           		{ 
        

        
          
           			switch (data.len) 
        

        
          
           			{ 
        

        
          
           				case 16: 
        

        
          
           					return TRUE; 
        

        
          
           				case 20: 
        

        
          
           					return untoh32(&data.ptr[16]) & fragmentation_ike; 
        

        
          
           			} 
        

        
          
           		} 
        

        
          
           		break; 
        

        
          
           	case EXT_MS_WINDOWS: 
        

        
          
           		return data.len == 20 && memeq(data.ptr, vendor_ids[i].id, 16); 
        

        
          
           	case EXT_CISCO_UNITY: 
        

        
          
           		return data.len == 16 && memeq(data.ptr, vendor_ids[i].id, 14); 
        

        
          
           	default: 
        

        
          
           		return chunk_equals(data, chunk_create(vendor_ids[i].id, 
        

        
          
           											   vendor_ids[i].len)); 
        

        
          
           } 
        
    
  


I guess we have several options:

add a field in the VID struct with the complete length, and set it to 0 to do a full match. Is the length of these VIDs constant? Is it known? (I saw some logs with the Checkpoint VID and it seems there are 20 bytes added to 20 bytes prefix.)
add a boolean flag to the struct to trigger a prefix match where necessary, i.e. ignore the exact length as long as it is equal or longer than the known value (could probably also be used for the existing two VIDs)
just always do a prefix match - not sure if that could be an issue (I guess false positives are theoretically possible, but most are 16 bytes or longer, so maybe not that likely and for those we don't actually keep track of not really relevant anyway)

What do you think?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,317,2021-04-12T23:01:23Z,2021-05-21T15:55:20Z,2021-05-21T23:12:12Z,CLOSED,False,103,49,4,https://github.com/Thermi,vendor-id: VendorID for Netscreen series devices (Juniper SSG),7,[],https://github.com/strongswan/strongswan/pull/317,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/317#issuecomment-832858260,,"I used the vendor ID list used in ike-scan as the basis. I'll see around to making it work better and trying to catch all cases.
If there are collisions or false positives because some jerk used the same beginning for their own vendor ID I guess we could just add a ""possibly"" in front of the name of the vendor IDs that we observed false positives on. Because at that point it's really just an educational guess and it has no bearing on the behaviour of the daemon.
It's just nice to see.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,317,2021-04-12T23:01:23Z,2021-05-21T15:55:20Z,2021-05-21T23:12:12Z,CLOSED,False,103,49,4,https://github.com/Thermi,vendor-id: VendorID for Netscreen series devices (Juniper SSG),7,[],https://github.com/strongswan/strongswan/pull/317,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/317#issuecomment-834880852,,I implemented a way to match the prefix using a new chunk function and extended the struct.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,322,2021-04-13T21:00:03Z,2021-05-10T16:57:24Z,2021-05-21T23:12:25Z,CLOSED,False,93,49,4,https://github.com/Thermi,vendor-id: VendorID for Checkpoint firewalls,5,[],https://github.com/strongswan/strongswan/pull/322,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/322,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,323,2021-04-14T04:17:17Z,2021-05-10T16:57:29Z,2021-05-10T16:57:29Z,CLOSED,False,2,0,1,https://github.com/Thermi,vendor-id: VendorID for Windows Server 2012,1,[],https://github.com/strongswan/strongswan/pull/323,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/323,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,326,2021-04-15T14:16:25Z,2021-05-05T07:48:35Z,2021-06-18T08:38:02Z,MERGED,True,10,17,4,https://github.com/Thermi,Doxygen fixes,2,['bug'],https://github.com/strongswan/strongswan/pull/326,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/326,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,327,2021-04-15T14:21:56Z,2021-05-05T16:17:48Z,2021-06-18T08:36:49Z,CLOSED,False,25,2,1,https://github.com/Thermi,github: Make it work with latest Ubuntu image (20.04),1,['bug'],https://github.com/strongswan/strongswan/pull/327,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/327,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,327,2021-04-15T14:21:56Z,2021-05-05T16:17:48Z,2021-06-18T08:36:49Z,CLOSED,False,25,2,1,https://github.com/Thermi,github: Make it work with latest Ubuntu image (20.04),1,['bug'],https://github.com/strongswan/strongswan/pull/327,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/327#issuecomment-832825620,,Thanks. I've adopted the os-release idea into the linked commit.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,328,2021-04-15T14:22:06Z,2021-05-05T16:17:48Z,2021-06-18T08:37:16Z,CLOSED,False,5,1,1,https://github.com/Thermi,test.sh: Only run lgtm if LGTM_TOKEN is set and test is set to lgtm,1,['enhancement'],https://github.com/strongswan/strongswan/pull/328,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/328,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,328,2021-04-15T14:22:06Z,2021-05-05T16:17:48Z,2021-06-18T08:37:16Z,CLOSED,False,5,1,1,https://github.com/Thermi,test.sh: Only run lgtm if LGTM_TOKEN is set and test is set to lgtm,1,['enhancement'],https://github.com/strongswan/strongswan/pull/328,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/328#issuecomment-832825655,,"Thanks, applied to master with some modifications.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,328,2021-04-15T14:22:06Z,2021-05-05T16:17:48Z,2021-06-18T08:37:16Z,CLOSED,False,5,1,1,https://github.com/Thermi,test.sh: Only run lgtm if LGTM_TOKEN is set and test is set to lgtm,1,['enhancement'],https://github.com/strongswan/strongswan/pull/328,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/328#issuecomment-832827472,,"Hmmmh. I dislike this because it means that currently no forked strongSwan repo can have completely passed test suites. That's because lgtm currently does not support forked repos.
EDIT: It also means it can never completeley pass any checks in a PR because the checks are taken from the forked repo.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,328,2021-04-15T14:22:06Z,2021-05-05T16:17:48Z,2021-06-18T08:37:16Z,CLOSED,False,5,1,1,https://github.com/Thermi,test.sh: Only run lgtm if LGTM_TOKEN is set and test is set to lgtm,1,['enhancement'],https://github.com/strongswan/strongswan/pull/328,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/328#issuecomment-832840905,,"That's because lgtm currently does not support forked repos.

What do you mean? What about this?

It also means it can never completeley pass any checks in a PR because the checks are taken from the forked repo

The SonarCloud and LGTM tests currently don't run for these anyway only for pushs (the LGTM test that is actually run for PRs is directly done by LGTM, not via Action).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,328,2021-04-15T14:22:06Z,2021-05-05T16:17:48Z,2021-06-18T08:37:16Z,CLOSED,False,5,1,1,https://github.com/Thermi,test.sh: Only run lgtm if LGTM_TOKEN is set and test is set to lgtm,1,['enhancement'],https://github.com/strongswan/strongswan/pull/328,https://github.com/Thermi,5,https://github.com/strongswan/strongswan/pull/328#issuecomment-832851076,,"That's not a fork, but a copy complete reuploaded copy of the repo on Gitlab. It's no tracked as a fork by Github.
Okay, so at least PRs won't error out. It's still not good.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,328,2021-04-15T14:22:06Z,2021-05-05T16:17:48Z,2021-06-18T08:37:16Z,CLOSED,False,5,1,1,https://github.com/Thermi,test.sh: Only run lgtm if LGTM_TOKEN is set and test is set to lgtm,1,['enhancement'],https://github.com/strongswan/strongswan/pull/328,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/328#issuecomment-832855506,,"I see, didn't know about the fork issue. I guess we can make it not error out.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,330,2021-04-17T06:52:59Z,2021-05-05T16:17:48Z,2021-06-18T08:37:08Z,CLOSED,False,10,0,1,https://github.com/Thermi,"test.sh: Fail sonarcloud test if SONAR_PROJECT, SONAR_ORGANIZATION, o…",1,['enhancement'],https://github.com/strongswan/strongswan/pull/330,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/330,…r SONAR_TOKEN aren't set,…r SONAR_TOKEN aren't set,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,330,2021-04-17T06:52:59Z,2021-05-05T16:17:48Z,2021-06-18T08:37:08Z,CLOSED,False,10,0,1,https://github.com/Thermi,"test.sh: Fail sonarcloud test if SONAR_PROJECT, SONAR_ORGANIZATION, o…",1,['enhancement'],https://github.com/strongswan/strongswan/pull/330,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/330#issuecomment-832825721,…r SONAR_TOKEN aren't set,"Thanks, applied to master with some modifications.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,331,2021-04-17T06:53:15Z,2021-05-05T07:48:35Z,2021-06-18T08:38:18Z,CLOSED,False,2,1,1,https://github.com/Thermi,forecast: restrict strncpy,1,['bug'],https://github.com/strongswan/strongswan/pull/331,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/331,Fixes an error at build time.,Fixes an error at build time.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,332,2021-04-17T11:13:50Z,2021-05-05T07:48:35Z,2021-06-18T08:37:30Z,CLOSED,False,1,1,1,https://github.com/Thermi,openssl: Fix preprocessor directive,1,['bug'],https://github.com/strongswan/strongswan/pull/332,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/332,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,340,2021-04-21T01:51:22Z,2021-05-10T08:05:29Z,2021-06-18T08:36:22Z,CLOSED,False,2,2,2,https://github.com/Thermi,testing: Use kvm64 instead of core2duo,1,['bug'],https://github.com/strongswan/strongswan/pull/340,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/340,"With that change you can use nested virtualization to run the test suite in a virtualized Ubuntu 20.04 (which then runs the debian based VMs that the test suite starts).
Without the changes, at the very least the ""monitor"" CPU feature isn't satisfied in the VM, which causes the core2duo specified VMs to not start. With kvm64 that issue does not occur.","With that change you can use nested virtualization to run the test suite in a virtualized Ubuntu 20.04 (which then runs the debian based VMs that the test suite starts).
Without the changes, at the very least the ""monitor"" CPU feature isn't satisfied in the VM, which causes the core2duo specified VMs to not start. With kvm64 that issue does not occur.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,340,2021-04-21T01:51:22Z,2021-05-10T08:05:29Z,2021-06-18T08:36:22Z,CLOSED,False,2,2,2,https://github.com/Thermi,testing: Use kvm64 instead of core2duo,1,['bug'],https://github.com/strongswan/strongswan/pull/340,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/340#issuecomment-831953364,"With that change you can use nested virtualization to run the test suite in a virtualized Ubuntu 20.04 (which then runs the debian based VMs that the test suite starts).
Without the changes, at the very least the ""monitor"" CPU feature isn't satisfied in the VM, which causes the core2duo specified VMs to not start. With kvm64 that issue does not occur.","Not sure if that's better as it's also deprecated according to the QEMU docs.
Martin added this when he developed the ChaCha20/Poly1305 kernel patches (I guess to compare against hardware accelerated AES-GCM). So the goal was to use hardware acceleration for AES-GCM on these two hosts without failing on CPUs that don't provide the required extensions. I think instead of explicitly setting a specific model, we could just set the mode attribute to host-passthrough (without requesting any specific features), which should give us the best performance/feature set on modern hardware.
I pushed such a change to the 340-kvm-cpu branch (also changed it for all guests). Could you try if that also works for the nested virtualization use case?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,340,2021-04-21T01:51:22Z,2021-05-10T08:05:29Z,2021-06-18T08:36:22Z,CLOSED,False,2,2,2,https://github.com/Thermi,testing: Use kvm64 instead of core2duo,1,['bug'],https://github.com/strongswan/strongswan/pull/340,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/340#issuecomment-835047286,"With that change you can use nested virtualization to run the test suite in a virtualized Ubuntu 20.04 (which then runs the debian based VMs that the test suite starts).
Without the changes, at the very least the ""monitor"" CPU feature isn't satisfied in the VM, which causes the core2duo specified VMs to not start. With kvm64 that issue does not occur.",Works.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,340,2021-04-21T01:51:22Z,2021-05-10T08:05:29Z,2021-06-18T08:36:22Z,CLOSED,False,2,2,2,https://github.com/Thermi,testing: Use kvm64 instead of core2duo,1,['bug'],https://github.com/strongswan/strongswan/pull/340,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/340#issuecomment-836335760,"With that change you can use nested virtualization to run the test suite in a virtualized Ubuntu 20.04 (which then runs the debian based VMs that the test suite starts).
Without the changes, at the very least the ""monitor"" CPU feature isn't satisfied in the VM, which causes the core2duo specified VMs to not start. With kvm64 that issue does not occur.",Thanks for testing.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,341,2021-04-22T07:04:48Z,,2021-05-07T19:09:25Z,OPEN,False,37,37,1,https://github.com/Thermi,"testing.conf: default all vars, so they can be overridden on command …",1,[],https://github.com/strongswan/strongswan/pull/341,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/341,…line,…line,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,341,2021-04-22T07:04:48Z,,2021-05-07T19:09:25Z,OPEN,False,37,37,1,https://github.com/Thermi,"testing.conf: default all vars, so they can be overridden on command …",1,[],https://github.com/strongswan/strongswan/pull/341,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/341#issuecomment-833599776,…line,A potential issue with this is that one of the variables might already be defined in the shell for some reason (in particular one of the shorter or more generic ones). Couldn't you use the testing.conf.local approach?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,341,2021-04-22T07:04:48Z,,2021-05-07T19:09:25Z,OPEN,False,37,37,1,https://github.com/Thermi,"testing.conf: default all vars, so they can be overridden on command …",1,[],https://github.com/strongswan/strongswan/pull/341,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/341#issuecomment-834708355,…line,I see. I didn't because I didn't know if I had to change more stuff on the fly to get around problems in the test suites. :P,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,343,2021-04-22T10:51:43Z,2021-05-27T15:44:41Z,2021-06-18T08:35:32Z,CLOSED,False,3,1,1,https://github.com/mtomaschewski,ccm: destroy iv_gen on crypter creation failure,1,['bug'],https://github.com/strongswan/strongswan/pull/343,https://github.com/mtomaschewski,1,https://github.com/strongswan/strongswan/pull/343,"The initialization creates a crypter and iv_gen, but checks only crypter creation failure and does not destroy iv_gen then.","The initialization creates a crypter and iv_gen, but checks only crypter creation failure and does not destroy iv_gen then.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,344,2021-04-22T12:33:12Z,2021-05-06T16:31:06Z,2021-06-18T08:36:16Z,CLOSED,False,1,0,1,https://github.com/Thermi,testing: mkdir -p $SHAREDDIR,1,['bug'],https://github.com/strongswan/strongswan/pull/344,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/344,Otherwise testing fails because the dir does not exist when trying to mount it.,Otherwise testing fails because the dir does not exist when trying to mount it.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,344,2021-04-22T12:33:12Z,2021-05-06T16:31:06Z,2021-06-18T08:36:16Z,CLOSED,False,1,0,1,https://github.com/Thermi,testing: mkdir -p $SHAREDDIR,1,['bug'],https://github.com/strongswan/strongswan/pull/344,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/344#issuecomment-833665433,Otherwise testing fails because the dir does not exist when trying to mount it.,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/345,Test suite and test scenarios passe with the changes.,Test suite and test scenarios passe with the changes.,True,"{'THUMBS_UP': ['https://github.com/sarthurdev', 'https://github.com/c-po']}"
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/sarthurdev,2,https://github.com/strongswan/strongswan/pull/345#issuecomment-853722876,Test suite and test scenarios passe with the changes.,"It would be great to see support for dmvpn, we've been having to use these patches in local builds.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/345#issuecomment-853726206,Test suite and test scenarios passe with the changes.,@sarthurdev Exactly these patches?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/sarthurdev,4,https://github.com/strongswan/strongswan/pull/345#issuecomment-853728660,Test suite and test scenarios passe with the changes.,"Not exactly your fork, but the patches by Timo Teras.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,5,https://github.com/strongswan/strongswan/pull/345#issuecomment-853738348,Test suite and test scenarios passe with the changes.,Could you kindly test my fork? Then I can be sure it's working alright. I don't have an existing test setup for DMVPN.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/zendulkaj,6,https://github.com/strongswan/strongswan/pull/345#issuecomment-853745191,Test suite and test scenarios passe with the changes.,"Could you kindly test my fork? Then I can be sure it's working alright. I don't have an existing test setup for DMVPN.

I also welcome these patches. I asked for it in the past at ticket https://wiki.strongswan.org/issues/3643. I going to test it with FRR/NHRP as well. When will it be part of the Strongswan release?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,7,https://github.com/strongswan/strongswan/pull/345#issuecomment-853746782,Test suite and test scenarios passe with the changes.,"I don't know that. Probably when they are merged. :P
I adapted the changes to the latest version. They did not apply cleanly to 5.9.2 because of changes in the upstream code.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/345#issuecomment-853751092,Test suite and test scenarios passe with the changes.,"As far as I remember, these patches were rejected years ago. And I've never seen a design document that describes the problem they are trying to solve, what alternatives were considered and why were dismissed, and why this set of patches should be the best approach.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,9,https://github.com/strongswan/strongswan/pull/345#issuecomment-853783627,Test suite and test scenarios passe with the changes.,Which patches exactly? The ones for VICI?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/sarthurdev,10,https://github.com/strongswan/strongswan/pull/345#issuecomment-853788828,Test suite and test scenarios passe with the changes.,"Found the original messages on the topic: https://lists.strongswan.org/pipermail/dev/2014-August/001017.html
Might actually be able to approach this differently now, for example vici does seem to support creating dynamic connections now with load-conn().",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,11,https://github.com/strongswan/strongswan/pull/345#issuecomment-853873921,Test suite and test scenarios passe with the changes.,"Found the original messages on the topic: https://lists.strongswan.org/pipermail/dev/2014-August/001017.html

That is extremely outdated, because all of these things already happened.
dmvpn is part of quagge and FRR.

Might actually be able to approach this differently now, for example vici does seem to support creating dynamic connections now with load-conn().
That's just for loading configs.
The issue is that the config lookup is linear, so it slows down with an increasing number of conns.
People with stupidly large amounts of sites to interconnect will get slowdowns if new connections are explicitely new configurations.
The patch instead allows overriding the remote and local addresses when initiating the connections. That way a common configuration can be used.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/sarthurdev,12,https://github.com/strongswan/strongswan/pull/345#issuecomment-853899310,Test suite and test scenarios passe with the changes.,"root@swan-dev# swanctl -i -c dmvpn -S 192.0.2.2 -R 192.0.2.1
[DMN] thread 13 received 11
[LIB]  dumping 7 stack frame addresses:
[LIB]   /lib/x86_64-linux-gnu/libpthread.so.0 @ 0x7fdca3c1f000 [0x7fdca3c31730]
[LIB]     -> 
[LIB]   /usr/lib/ipsec/libcharon.so.0 @ 0x7fdca3dcb000 [0x7fdca3e03575]
[LIB]     -> 
[LIB]   /usr/lib/ipsec/libcharon.so.0 @ 0x7fdca3dcb000 [0x7fdca3de0b9a]
[LIB]     -> 
[LIB]   /usr/lib/ipsec/libstrongswan.so.0 @ 0x7fdca3e6a000 [0x7fdca3ea66eb]
[LIB]     -> 
[LIB]   /usr/lib/ipsec/libstrongswan.so.0 @ 0x7fdca3e6a000 [0x7fdca3eb917b]
[LIB]     -> 
[LIB]   /lib/x86_64-linux-gnu/libpthread.so.0 @ 0x7fdca3c1f000 [0x7fdca3c26fa3]
[LIB]     -> 
[LIB]   /lib/x86_64-linux-gnu/libc.so.6 @ 0x7fdca3a59000 (clone+0x3f) [0x7fdca3b524cf]
[LIB]     -> 
initiate request failed: Success

I'm facing the above problem, you should be able to reproduce and test this without a dmvpn setup, by defining a connection in swanctl.conf and initiate it like above command.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,13,https://github.com/strongswan/strongswan/pull/345#issuecomment-854008046,Test suite and test scenarios passe with the changes.,Thank you for your quick response. I'll fix it when I have time allocated for it. :),True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/sarthurdev,14,https://github.com/strongswan/strongswan/pull/345#issuecomment-861632438,Test suite and test scenarios passe with the changes.,@Thermi It seems that Alpine Linux have working 5.9 patches for dmvpn support: https://gitlab.alpinelinux.org/alpine/aports/-/tree/master/main/strongswan,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,15,https://github.com/strongswan/strongswan/pull/345#issuecomment-864741549,Test suite and test scenarios passe with the changes.,"@Thermi It seems that Alpine Linux have working 5.9 patches for dmvpn support: https://gitlab.alpinelinux.org/alpine/aports/-/tree/master/main/strongswan

That's the patches that I based the changes in this commit on. Because of changes in strongSwan, the patches in that branch don't apply anymore. And strongSwan on Alpine already crashes when the the conns are reloaded using swanctl (if it's used in cojunction with quagga's nhrpd). So that's no good.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,345,2021-04-22T23:54:47Z,2021-07-11T00:11:14Z,2021-07-11T00:11:15Z,CLOSED,False,365,40,19,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/345,https://github.com/Thermi,16,https://github.com/strongswan/strongswan/pull/345#issuecomment-877720165,Test suite and test scenarios passe with the changes.,I fixed a bug and rebased for 5.9.3. See #502 please.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,347,2021-04-23T06:49:12Z,,2021-05-05T12:37:02Z,OPEN,False,2,0,1,https://github.com/Thermi,library: Initialize lib->leak_detective to NULL if the build is witho…,1,[],https://github.com/strongswan/strongswan/pull/347,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/347,"…ut leak detective.
Fixes at the very least a crash in the test cases when run with valgrind.","…ut leak detective.
Fixes at the very least a crash in the test cases when run with valgrind.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,347,2021-04-23T06:49:12Z,,2021-05-05T12:37:02Z,OPEN,False,2,0,1,https://github.com/Thermi,library: Initialize lib->leak_detective to NULL if the build is witho…,1,[],https://github.com/strongswan/strongswan/pull/347,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/347#issuecomment-831970953,"…ut leak detective.
Fixes at the very least a crash in the test cases when run with valgrind.","Hm, the complete struct is initialized to 0, so I don't really see why this would be necessary.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,347,2021-04-23T06:49:12Z,,2021-05-05T12:37:02Z,OPEN,False,2,0,1,https://github.com/Thermi,library: Initialize lib->leak_detective to NULL if the build is witho…,1,[],https://github.com/strongswan/strongswan/pull/347,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/347#issuecomment-832625971,"…ut leak detective.
Fixes at the very least a crash in the test cases when run with valgrind.","Without the change, at least one test case crashes because there's garbage in the field, so comparisons with NULL fail and other code that dereferences the invalid pointer access unmapped memory. With the change that doesn't happen anymore. I'll check the details later again.

Am May 4, 2021 2:08:30 PM UTC schrieb Tobias Brunner ***@***.***>:
…
Hm, the complete struct is initialized to 0, so I don't really see why
this would be necessary.

--
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub:
#347 (comment)


-- 
Sent from mobile",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,347,2021-04-23T06:49:12Z,,2021-05-05T12:37:02Z,OPEN,False,2,0,1,https://github.com/Thermi,library: Initialize lib->leak_detective to NULL if the build is witho…,1,[],https://github.com/strongswan/strongswan/pull/347,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/347#issuecomment-832652349,"…ut leak detective.
Fixes at the very least a crash in the test cases when run with valgrind.","Yeah, would be interesting to see where/how this happens. Because we use this struct initialization (via INIT macro and without) all over the place.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/deiger,1,https://github.com/strongswan/strongswan/pull/352,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tormentous,2,https://github.com/strongswan/strongswan/pull/352#issuecomment-826508598,,"a few more to look...
#349 (comment)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/352#issuecomment-832809452,,We don't use the upstream version of BoringSSL (and currently have no plans to support it).,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/deiger,4,https://github.com/strongswan/strongswan/pull/352#issuecomment-833354879,,"We don't use the upstream version of BoringSSL (and currently have no plans to support it).

Which versions are you using? These changes apply also to the recent Android versions, see here and here for Android 11.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/352#issuecomment-833360649,,The ndk-static branch from here.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/deiger,6,https://github.com/strongswan/strongswan/pull/352#issuecomment-833386880,,"Wow, that's 5 years old. I'm really surprised that these were the only changes needed to in order to compile against head.
Given that there were several CVEs over the years, would it make sense to update it?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/352#issuecomment-833390006,,"I've currently no plans to do so. AFAIK they changed the build system, so no idea if/how this could still be integrated in our build process and Google doesn't recommend using it anyway. So I guess it be better to switch to OpenSSL at some point in the future, but that has it's own issues.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/deiger,8,https://github.com/strongswan/strongswan/pull/352#issuecomment-833449971,,"I'm not sure what updating the build process would entail, as we have an internal build system, but the code changes would be very minimal.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,9,https://github.com/strongswan/strongswan/pull/352#issuecomment-833506451,,"Why do you use upstream BoringSSL (which, again, Google does not generally recommend) and not OpenSSL if you have your own build system etc.?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/deiger,10,https://github.com/strongswan/strongswan/pull/352#issuecomment-833635633,,I work for Google. For internal use it is strongly recommended...,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,11,https://github.com/strongswan/strongswan/pull/352#issuecomment-833658666,,"I see :) So lets apply these fixes then. The second isn't a problem. But the first is because our fork doesn't provide it and while I could move the macro to that fork, this would break the build with older strongSwan versions as I didn't put an #ifndef around it.
Edit: I guess we could keep the define but replace OPENSSL_IS_BORINGSSL with something like OPENSSL_IS_BORINGSSL_STRONGSWAN that we define in our fork.
Just note that the openssl plugin might not use newer features provided by current versions of BoringSSL as those are generally enabled via OPENSSL_VERSION. Only in some cases is there also a OPENSSL_IS_BORINGSSL but that's obviously only done for stuff our old fork already supports.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/deiger,12,https://github.com/strongswan/strongswan/pull/352#issuecomment-833831039,,"Thank you!
That makes perfect sense. I'll try to go over the OPENSSL_VERSION checks in the code, and see if there are further features that can be enabled by the recent BoringSSL.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/davidben,13,https://github.com/strongswan/strongswan/pull/352#issuecomment-864147939,,"BoringSSL maintainer here. (@deiger, please reach out to us when patching 3p libraries; we can help you with best practices.) There shouldn't be any need for OPENSSL_IS_BORINGSSL_STRONGSWAN. If projects need to support a range of BoringSSL revisions, the right way to do this is to check BORINGSSL_API_VERSION. So if you're worried about EVP_PKEY_base_id, use:
#if defined(OPENSSL_IS_BORINGSSL) && BORINGSSL_API_VERSION < 10
#define EVP_PKEY_base_id(p) EVP_PKEY_type(p->type)
#endif

In addition, this PR is missing at least one other necessary change: this ifdef should be dropped and instead call DH_set_length. Just as in OpenSSL, reaching into BoringSSL private structures isn't supported and will fail to compile in later revisions. If you want to handle older versions, use defined(OPENSSL_IS_BORINGSSL) && BORINGSSL_API_VERSION < 11 for that one.
https://github.com/strongswan/strongswan/blob/master/src/libstrongswan/plugins/openssl/openssl_diffie_hellman.c#L171
That said, note we don't support arbitrary old revisions of BoringSSL. The expectation is that all BORINGSSL_API_VERSION checks in downstream logic is temporary.
Regarding OPENSSL_VERSION_NUMBER, please leave all that alone. We intentionally adjust OPENSSL_VERSION_NUMBER to match the OpenSSL APIs we are roughly targeting. Second-guessing that is just pointless busywork for you that does nothing useful except add work for us to undo it later.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/CodeFetch,14,https://github.com/strongswan/strongswan/pull/352#issuecomment-865273856,,"@deiger Why is Google trying to enforce boringssl usage recently? Your development guidelines are not open-source friendly. You often introduce breaking changes to API/ABI compatibility and don't push your changes to other open-source projects upstream. In the best case you send an email with a lot of spaghetti code and don't reply to changes requested from maintainers.
Citing from https://boringssl.googlesource.com/boringssl/:
Although BoringSSL is an open source project, it is not intended for general use, as OpenSSL is. We don't recommend that third parties depend upon it. Doing so is likely to be frustrating because there are no guarantees of API or ABI stability.
Indeed nearly every encounter with Google developers I have witnessed so far ended in long discussions with no results. So maybe Google should rethink their policies and contribute to established open-source projects or otherwise stop bugging other projects with their unreliable hard-forks to save us all from this frustration. Open-source developers are not your slaves.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/davidben,15,https://github.com/strongswan/strongswan/pull/352#issuecomment-865411396,,"I think there may be some confusion here. We use BoringSSL internally, but we usually don't want open source developers to carry BoringSSL ifdefs. We prefer to manage the compatibility issues ourselves rather than burden the external project. Indeed the request is to remove unnecessary compatibility bits so that it runs the same code as in OpenSSL. Supporting multiple versions of OpenSSL is enough of ifdef soup as it is, and we certainly don't want to make it worse!
Sometimes the project does want to support BoringSSL, in which case we figure out what works best for everyone. Here, it sounds like strongswan wants to support some particular old revision, so the suggestion is to use BORINGSSL_API_VERSION to detect that old revision.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,16,https://github.com/strongswan/strongswan/pull/352#issuecomment-865779976,,"@davidben Thanks for your comment. Really appreciate the insight. Our version of BoringSSL is really old, though, so it doesn't actually define BORINGSSL_API_VERSION yet. But I guess we could just use that fact in an ifdef too if necessary.
I've pushed a commit to the 352-boringssl branch that removes many OPENSSL_IS_BORINGSSL checks (where there already are OPENSSL_VERSION checks) and adds BORINGSSL_API_VERSION checks to two of them (as suggested by you). @deiger could you maybe test if this works with the BoringSSL release you were using?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/iamsais,17,https://github.com/strongswan/strongswan/pull/352#issuecomment-901067730,,"@tobiasbrunner @davidben I'm trying to update BoringSSL (latest) for Strongswan 5.9.2 (Android), in thought of providing FIPS Compliance.
After reading your comment https://wiki.strongswan.org/issues/2979#note-1 (not recommended update Boring SSL), I have stopped updating BoringSSL. The current modified ndk-boringssl is old, what is your recommendation to update OpenSsl and removing weaker ciphers (with FIPS Compliant)?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,18,https://github.com/strongswan/strongswan/pull/352#issuecomment-901071998,,"The current modified ndk-boringssl is old, what is your recommendation to update OpenSsl and removing weaker ciphers (with FIPS Compliant)?

Just use OpenSSL (if FIPS compliance is your goal you need to follow strict procedures anyway).",True,{'THUMBS_UP': ['https://github.com/iamsais']}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/iamsais,19,https://github.com/strongswan/strongswan/pull/352#issuecomment-940825823,,"@tobiasbrunner I have tried to update OpenSSL 1.1.1k, but existing strongswan's Openssl plugin is older which throws many ""undefined symbol"" issue. Compared these symbols availability, OpenSSL 1.1.1k don't have have those symbols and OpenSSL 1.0.2u  have most of the symbols.
Do you have a patch/update for OpenSSL plugin which is compatible with Latest OpenSSL 1.1.1L?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,20,https://github.com/strongswan/strongswan/pull/352#issuecomment-940939112,,That doesn't sound right. Did you recompile against the newer version using matching header files? (The headers definitely have to match and you also can't use a binary version of the plugin built against a different version of OpenSSL.),True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/iamsais,21,https://github.com/strongswan/strongswan/pull/352#issuecomment-940990346,,"Okay.

Which version of OpenSSL is compatible with the OpenSSL plugin.
Can we use the libcrypto.so as PreShared Library?

Current Approach:
I have added libcrypto.so of OpenSSL1.1.1k (of all ABI's) as PREBUILT_SHARED_LIBRARY to the project.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,22,https://github.com/strongswan/strongswan/pull/352#issuecomment-940996449,,"Which version of OpenSSL is compatible with the OpenSSL plugin.

Basically all of them.

Can we use the libcrypto.so as PreShared Library?

Not in an Android app as that will most likely conflict with the BoringSSL library shipped by Android. You have to link it statically into the plugin. Have a look at the build recipe for F-Droid.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/iamsais,23,https://github.com/strongswan/strongswan/pull/352#issuecomment-946458749,,"Not in an Android app as that will most likely conflict with the BoringSSL library shipped by Android. You have to link it statically into the plugin. Have a look at the build recipe for F-Droid.

I tried this, have included .a file instead of .so file + the include directory in Android.mk,
include $(CLEAR_VARS)
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE := libcrypto_static
LOCAL_SRC_FILES := $(LOCAL_PATH)/libs111k/lib/$(TARGET_ARCH_ABI)/libcrypto.a
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/libs111k/include
include $(PREBUILT_STATIC_LIBRARY)

Still i'm facing the same issue (Log Attached: https://raw.githubusercontent.com/iamsais/attachement-sharing/master/openssl-1.1.1k-strongswan-1.log)
Test performed on libcrypto.a
$ strings libcrypto.a | grep ""^CRYPTO_THREADID_set_callback""

Result Openssl-1.1.1k:
Empty
Result Openssl-1.0.2u:
CRYPTO_THREADID_set_callback
CRYPTO_THREADID_set_callback",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/tobiasbrunner,24,https://github.com/strongswan/strongswan/pull/352#issuecomment-946496885,,"Sounds like you are not using the correct header files. CRYPTO_THREADID_set_callback() should only be used if OPENSSL_VERSION_NUMBER indicates that the plugin is built against OpenSSL < 1.1.0. Is there an include directory in the jni/openssl directory? If so, try removing it (not sure if that works or results in an error), or just put the correct files there (could be a symlink).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,352,2021-04-25T07:56:32Z,2021-08-24T12:37:01Z,2021-10-19T17:21:17Z,CLOSED,False,1,1,1,https://github.com/deiger,Fix compatibility issues with BoringSSL,3,[],https://github.com/strongswan/strongswan/pull/352,https://github.com/iamsais,25,https://github.com/strongswan/strongswan/pull/352#issuecomment-946937586,,"Yes include directory is the issue. After changing the openssl_PATH to correct include directory, now everything worked properly.
include $(CLEAR_VARS)
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE := libcrypto_static
LOCAL_SRC_FILES := $(LOCAL_PATH)/libs/$(TARGET_ARCH_ABI)/libcrypto.so
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include
include $(PREBUILT_SHARED_LIBRARY)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,1,https://github.com/strongswan/strongswan/pull/353,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,2,https://github.com/strongswan/strongswan/pull/353#issuecomment-826726097,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).",See also #342,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/353#issuecomment-831980714,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","Why the separate ccm_crypt() function? Seems completely unnecessary as crypt() already uses the generic EVP interface that works for AES-GCM and ChaPoly. If the generic EVP_CTRL_AEAD_ constants are a concern, add a preprocessor check that only enables CCM for OpenSSL 1.1.0+, which added them.
Also, please see Contributions regarding the license for contributions (in case more than trivial changes remain).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,4,https://github.com/strongswan/strongswan/pull/353#issuecomment-831997229,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","Why the separate ccm_crypt() function? Seems completely unnecessary as crypt() already uses the generic EVP interface that works for AES-GCM and ChaPoly.

The ccm mode seems to need the controls differently than AES-GCM -- it didn't worked (failed) while I've tried to just adopted the existing crypt function.
See https://wiki.openssl.org/index.php/EVP_Authenticated_Encryption_and_Decryption and https://www.openssl.org/docs/man1.1.0/man3/EVP_aes_256_ccm.html
CCM Mode

The behaviour of CCM mode ciphers is similar to GCM mode but with 
a few additional requirements and different ctrl values.

Instead to add several if/else making it complex (and store also algo to distinguish the cases), it seemed more reasonable to select ccm specific crypt function while init.

Also, please see Contributions regarding the license for contributions (in case more than trivial changes remain).

I see, ""we will require contributions to be under the GPL-compatible MIT X11 license"" and src/libstrongswan/plugins/openssl/openssl_aead.c is GPLv2+ -- both seems fine to me.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,5,https://github.com/strongswan/strongswan/pull/353#issuecomment-832015621,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","add a preprocessor check that only enables CCM for OpenSSL 1.1.0+, which added them.

The current code works with both, OpenSSL 1.1.0 and 1.1.1 -- no need for preprocessor.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,6,https://github.com/strongswan/strongswan/pull/353#issuecomment-832021963,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","The separate crypt function is there because of the call differences:

gcm:

            EVP_CipherInit_ex(ctx, this->cipher, NULL, NULL, NULL, enc)
            EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_IVLEN, this->salt_len + IV_LEN, NULL) 
            EVP_CipherInit_ex(ctx, NULL, NULL, this->key.ptr, nonce, enc)
    !enc && EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, this->icv_size, data.ptr + data.len)
assoc.len && EVP_CipherUpdate(ctx, NULL, &len, assoc.ptr, assoc.len)
            EVP_CipherUpdate(ctx, out, &len, data.ptr, data.len)
            EVP_CipherFinal_ex(ctx, out + len, &len)
     enc && EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG, this->icv_size, out + data.len)


ccm:

            EVP_CipherInit_ex(ctx, this->cipher, NULL, NULL, NULL, enc)
            EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_IVLEN, this->salt_len + IV_LEN, NULL)
     enc && EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, this->icv_size, NULL)
    !enc && EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, this->icv_size, data.ptr + data.len)
            EVP_CipherInit_ex(ctx, NULL, NULL, this->key.ptr, nonce, enc)
            EVP_CipherUpdate(ctx, NULL, &len, NULL, data.len)
assoc.len && EVP_CipherUpdate(ctx, NULL, &len, assoc.ptr, assoc.len)
            EVP_CipherUpdate(ctx, out, &len, data.ptr, data.len)
     enc && EVP_CipherFinal_ex(ctx, out + len, &len)
     enc && EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_GET_TAG, this->icv_size, data.ptr + data.len)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/353#issuecomment-832091182,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","I see. But it's actually not that bad. I've created my own patch (see the 353-openssl-ccm branch), and while it requires two mode checks and additional calls (one to set the ICV length, the other for the input length) and moving one call, I prefer this over a separate function.
However, there is a major problem, which might prevent us from applying this upstream. For some reason, OpenSSL (1.1.1 tested here) doesn't like empty input for CCM (it's not a problem for GCM and other ciphers), so four of our CCM test vectors fail with this patch. The failing call is the last EVP_CIPHER_CTX_ctrl() to retrieve the ICV. It's possible that it never is generated if no data is processed, so no idea how this can be fixed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/tobiasbrunner,8,https://github.com/strongswan/strongswan/pull/353#issuecomment-832504074,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","OK, that problem is fixed now. It wasn't the zero length but the NULL pointer. I've updated my patch.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,9,https://github.com/strongswan/strongswan/pull/353#issuecomment-832521426,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","OK, great! How we continue then? You'll create a new pull and we just close this one?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/tobiasbrunner,10,https://github.com/strongswan/strongswan/pull/353#issuecomment-832527014,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","If my patch works for you, I can close this PR via commit message when merging.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,11,https://github.com/strongswan/strongswan/pull/353#issuecomment-832528846,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","Going to retest using your patch, but I guess it will work :-)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,12,https://github.com/strongswan/strongswan/pull/353#issuecomment-832550445,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","Works fine for me (peer doesn't have it and is using the ccm module):
localhost:~/strongswan # ipsec listalgs | grep -i ccm
  aead:       AES_GCM_16[openssl] AES_GCM_12[openssl] AES_GCM_8[openssl] AES_CCM_16[openssl] AES_CCM_12[openssl]
              AES_CCM_8[openssl] CHACHA20_POLY1305[openssl]
localhost:~/strongswan # grep -E ""ESTABLISHED|IKE proposal"" screenlog.0 
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_8_128/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_8_192/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_8_256/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_12_128/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_12_192/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_12_256/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_16_128/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_16_192/PRF_HMAC_SHA2_256/MODP_4096
        test[1]: ESTABLISHED 2 seconds ago, 172.20.42.36[172.20.42.36]...172.20.40.11[172.20.40.11]
        test[1]: IKE proposal: AES_CCM_16_256/PRF_HMAC_SHA2_256/MODP_4096",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/tobiasbrunner,13,https://github.com/strongswan/strongswan/pull/353#issuecomment-832563853,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","Great, thanks for testing. I'll merge it to master once I got our CI fixed.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,353,2021-04-26T10:39:41Z,2021-05-06T16:31:06Z,2021-06-18T08:35:51Z,CLOSED,False,157,7,2,https://github.com/mtomaschewski,openssl: add support for AES CCM aead algorithms,1,['enhancement'],https://github.com/strongswan/strongswan/pull/353,https://github.com/mtomaschewski,14,https://github.com/strongswan/strongswan/pull/353#issuecomment-832573125,"The ccm plugin implements the AEAD CCM algorithms using CBC ciphers
and supports also Camelia CCM.
Openssl 1.1.x provides all RFC 5282 AES GCM and AES CCM algorithms,
what allows to disable the ccm plugin (e.g. for certification).","Great, thanks for your review + rework! Yes, keeping a CI up and running properly is a challenge.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,378,2021-05-07T23:25:36Z,2021-05-10T16:57:32Z,2021-05-21T23:11:12Z,CLOSED,False,98,49,4,https://github.com/Thermi,Cisco vpn 3000 client vid,7,[],https://github.com/strongswan/strongswan/pull/378,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/378,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,379,2021-05-07T23:25:51Z,2021-05-10T16:57:34Z,2021-05-21T23:11:23Z,CLOSED,False,98,49,4,https://github.com/Thermi,Racoon vid,7,[],https://github.com/strongswan/strongswan/pull/379,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/379,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,380,2021-05-07T23:26:00Z,2021-05-10T16:57:38Z,2021-05-21T23:11:29Z,CLOSED,False,103,49,4,https://github.com/Thermi,Heartbeat notify vid,7,[],https://github.com/strongswan/strongswan/pull/380,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/380,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,381,2021-05-07T23:26:10Z,2021-05-10T16:57:41Z,2021-05-21T23:11:31Z,CLOSED,False,134,49,4,https://github.com/Thermi,Sonicwall vid,7,[],https://github.com/strongswan/strongswan/pull/381,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/381,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,382,2021-05-07T23:26:19Z,2021-05-10T16:57:44Z,2021-05-21T23:11:35Z,CLOSED,False,98,49,4,https://github.com/Thermi,Fortigate vid,7,[],https://github.com/strongswan/strongswan/pull/382,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/382,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,383,2021-05-07T23:26:28Z,2021-05-10T16:57:47Z,2021-05-21T23:11:26Z,CLOSED,False,108,49,4,https://github.com/Thermi,Zyxel vid,7,[],https://github.com/strongswan/strongswan/pull/383,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/383,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,384,2021-05-07T23:26:35Z,2021-05-10T16:57:50Z,2021-05-21T23:11:15Z,CLOSED,False,98,49,4,https://github.com/Thermi,Cisco vpn concentrator vid,7,[],https://github.com/strongswan/strongswan/pull/384,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/384,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,385,2021-05-07T23:36:17Z,2021-05-10T09:15:23Z,2021-06-18T08:36:26Z,CLOSED,False,9,9,9,https://github.com/Thermi,testing: Replace qemu-kvm with qemu-system-x86_64 (because qemu-kvm d…,1,['bug'],https://github.com/strongswan/strongswan/pull/385,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/385,"…oes not exist on non-debian based distros)
Also, the ""kvm"" script in PATH is only a compatibility thing, says the man page:
man kvm:
The kvm wrapper script is used to provide compatibility with old qemu-kvm package which has been merged into qemu as of version 1.3.","…oes not exist on non-debian based distros)
Also, the ""kvm"" script in PATH is only a compatibility thing, says the man page:
man kvm:
The kvm wrapper script is used to provide compatibility with old qemu-kvm package which has been merged into qemu as of version 1.3.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,385,2021-05-07T23:36:17Z,2021-05-10T09:15:23Z,2021-06-18T08:36:26Z,CLOSED,False,9,9,9,https://github.com/Thermi,testing: Replace qemu-kvm with qemu-system-x86_64 (because qemu-kvm d…,1,['bug'],https://github.com/strongswan/strongswan/pull/385,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/385#issuecomment-836447362,"…oes not exist on non-debian based distros)
Also, the ""kvm"" script in PATH is only a compatibility thing, says the man page:
man kvm:
The kvm wrapper script is used to provide compatibility with old qemu-kvm package which has been merged into qemu as of version 1.3.","Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,393,2021-05-10T10:53:15Z,2021-05-21T15:54:33Z,2021-06-18T08:35:16Z,CLOSED,False,195,49,4,https://github.com/Thermi,Add additional Vendor IDs of third-party implementations,2,['enhancement'],https://github.com/strongswan/strongswan/pull/393,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/393,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,393,2021-05-10T10:53:15Z,2021-05-21T15:54:33Z,2021-06-18T08:35:16Z,CLOSED,False,195,49,4,https://github.com/Thermi,Add additional Vendor IDs of third-party implementations,2,['enhancement'],https://github.com/strongswan/strongswan/pull/393,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/393#issuecomment-838103902,,"These commits seem to be in the wrong order. Anyway, I pushed an alternative commit to the 393-vendor-ids branch, without the helper function.
I wonder about all these additional VIDs, though. For instance, what's with the ""Heartbeat"" VIDs? Who sends them and which one? And couldn't the Sonicwall VIDs be handled via a single prefix match? Also, does adding all of them to IKEv2 make sense. Are we sure any of these are actually sent by IKEv2 implementations?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,393,2021-05-10T10:53:15Z,2021-05-21T15:54:33Z,2021-06-18T08:35:16Z,CLOSED,False,195,49,4,https://github.com/Thermi,Add additional Vendor IDs of third-party implementations,2,['enhancement'],https://github.com/strongswan/strongswan/pull/393,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/393#issuecomment-838683753,,"Hello, 393-vendor-ids looks good.
Let's see when anybody implements such a helper anyway, because now there's effective code duplication in the IKEv1 and IKEv2 vendor-id handling code.
The Heartbeat VIDs, like all VIDs, are from https://github.com/royhills/ike-scan/blob/master/ike-vendor-ids. Googling for ""Heartbeat_Notify"" gives hits for openswan and libreswan source, as well as Cisco device logs here, so at the very least Cisco seems to use them.
I do not know if anything else uses what corresponds to the effective prefix for the Sonicwall VIDs, so I'd rather stick close to the original source for them, than apply the prefix.
We know that a lot of proprietary IKEv2 implementations are just revised IKEv1 ones. As such I remember seeing Google search results for IKEv2 implementations sending the XAUTH VID when negotiating IKEv2. I think thus that a lot of IKEv2 implementations also just send their proprietary IKEv1 VIDs as well.
Adding them to the IKEv2 VID list in strongSwan without making them effective changes at the very least makes sure these VIDs are correctly identified. They do not break anything. Thus I think it's okay. If there are changes desired later so they are identified in more detail, they can be done.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,393,2021-05-10T10:53:15Z,2021-05-21T15:54:33Z,2021-06-18T08:35:16Z,CLOSED,False,195,49,4,https://github.com/Thermi,Add additional Vendor IDs of third-party implementations,2,['enhancement'],https://github.com/strongswan/strongswan/pull/393,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/393#issuecomment-846055728,,"because now there's effective code duplication in the IKEv1 and IKEv2 vendor-id handling code.

Can't fully avoid that between the IKE versions (hopefully we can eliminate the IKEv1 code sometime in the future).

The Heartbeat VIDs, like all VIDs, are from https://github.com/royhills/ike-scan/blob/master/ike-vendor-ids. Googling for ""Heartbeat_Notify"" gives hits for openswan and libreswan source, as well as Cisco device logs here, so at the very least Cisco seems to use them.

Now that you mention it, the old pluto daemon had that one too (but seemed to be from Juniper Netscreen). So this is probably  something very old (maybe a precursor to DPD, which was a relatively late extension for IKEv1 and the pluto README talked about heartbeats). Not sure if there is any point in adding them (definitely not for IKEv2). By the way, the ""KAME/racoon"" VID is also useless for IKEv2 as racoon only support IKEv1.

I do not know if anything else uses what corresponds to the effective prefix for the Sonicwall VIDs, so I'd rather stick close to the original source for them, than apply the prefix.

Sure, but I doubt that a ""Sonicwall 1"" supported IKEv2. The earliest IKEv2 log I found was with ""Sonicwall 7"" and that was posted 8 years ago, so I'm going to remove the earlier ones from the IKEv2 list.

We know that a lot of proprietary IKEv2 implementations are just revised IKEv1 ones.

Unfortunately, true.

They do not break anything. Thus I think it's okay. If there are changes desired later so they are identified in more detail, they can be done.

Sure, they don't break anything. But I'm also not a fan of adding clutter just for the sake of it. In the future, I'd rather add additional ones when they are actually observed in the wild (or there might even be a reason to recognize a particular one).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,393,2021-05-10T10:53:15Z,2021-05-21T15:54:33Z,2021-06-18T08:35:16Z,CLOSED,False,195,49,4,https://github.com/Thermi,Add additional Vendor IDs of third-party implementations,2,['enhancement'],https://github.com/strongswan/strongswan/pull/393,https://github.com/tobiasbrunner,5,https://github.com/strongswan/strongswan/pull/393#issuecomment-856005124,,e166423 fixes an issue with IKEv1 NAT VIDs.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,393,2021-05-10T10:53:15Z,2021-05-21T15:54:33Z,2021-06-18T08:35:16Z,CLOSED,False,195,49,4,https://github.com/Thermi,Add additional Vendor IDs of third-party implementations,2,['enhancement'],https://github.com/strongswan/strongswan/pull/393,https://github.com/Thermi,6,https://github.com/strongswan/strongswan/pull/393#issuecomment-856409509,,"Seen. I thought I had double checked the order of the struct members when writing it and even changed it once because I thought I had it wrong, and in the end still managed to screw it up.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,418,2021-05-28T00:33:16Z,2021-06-01T17:56:53Z,2021-06-01T17:56:53Z,CLOSED,False,2,2,1,https://github.com/embhorn,Fix undefined call to shake256 when WOLFSSL_NO_SHAKE256 is defined,1,[],https://github.com/strongswan/strongswan/pull/418,https://github.com/embhorn,1,https://github.com/strongswan/strongswan/pull/418,"When testing the FIPS instructions from https://www.wolfssl.com/strongswan-wolfssl-fips-2/ , there were build failures during make in strongswan.
wolfssl_xof.c:41:2: error: unknown type name ‘wc_Shake’
   41 |  wc_Shake shake;
      |  ^~~~~~~~
wolfssl_xof.c: In function ‘get_bytes’:
wolfssl_xof.c:69:6: warning: implicit declaration of function ‘wc_Shake256_Update’; did you mean ‘wc_Sha3_256_Update’? [-Wimplicit-function-declaration]
   69 |  if (wc_Shake256_Update(&this->shake, this->seed.ptr, this->seed.len) == 0)
      |      ^~~~~~~~~~~~~~~~~~
      |      wc_Sha3_256_Update
wolfssl_xof.c:72:7: warning: implicit declaration of function ‘wc_Shake256_Final’; did you mean ‘wc_Sha3_256_Final’? [-Wimplicit-function-declaration]
   72 |   if (wc_Shake256_Final(&this->shake, data.ptr, data.len) == 0)
      |       ^~~~~~~~~~~~~~~~~
      |       wc_Sha3_256_Final
wolfssl_xof.c: In function ‘destroy’:
wolfssl_xof.c:114:2: warning: implicit declaration of function ‘wc_Shake256_Free’; did you mean ‘wc_Sha3_256_Free’? [-Wimplicit-function-declaration]
  114 |  wc_Shake256_Free(&this->shake);
      |  ^~~~~~~~~~~~~~~~
      |  wc_Sha3_256_Free
wolfssl_xof.c: In function ‘wolfssl_xof_create’:
wolfssl_xof.c:143:6: warning: implicit declaration of function ‘wc_InitShake256’; did you mean ‘wc_InitSha3_256’? [-Wimplicit-function-declaration]
  143 |  if (wc_InitShake256(&this->shake, NULL, 0) != 0)
      |      ^~~~~~~~~~~~~~~
      |      wc_InitSha3_256
make[5]: *** [Makefile:648: wolfssl_xof.lo] Error 1

wolfSSL FIPS defines WOLFSSL_NO_SHAKE256 because that algorithm is not certified.","When testing the FIPS instructions from https://www.wolfssl.com/strongswan-wolfssl-fips-2/ , there were build failures during make in strongswan.
wolfssl_xof.c:41:2: error: unknown type name ‘wc_Shake’
   41 |  wc_Shake shake;
      |  ^~~~~~~~
wolfssl_xof.c: In function ‘get_bytes’:
wolfssl_xof.c:69:6: warning: implicit declaration of function ‘wc_Shake256_Update’; did you mean ‘wc_Sha3_256_Update’? [-Wimplicit-function-declaration]
   69 |  if (wc_Shake256_Update(&this->shake, this->seed.ptr, this->seed.len) == 0)
      |      ^~~~~~~~~~~~~~~~~~
      |      wc_Sha3_256_Update
wolfssl_xof.c:72:7: warning: implicit declaration of function ‘wc_Shake256_Final’; did you mean ‘wc_Sha3_256_Final’? [-Wimplicit-function-declaration]
   72 |   if (wc_Shake256_Final(&this->shake, data.ptr, data.len) == 0)
      |       ^~~~~~~~~~~~~~~~~
      |       wc_Sha3_256_Final
wolfssl_xof.c: In function ‘destroy’:
wolfssl_xof.c:114:2: warning: implicit declaration of function ‘wc_Shake256_Free’; did you mean ‘wc_Sha3_256_Free’? [-Wimplicit-function-declaration]
  114 |  wc_Shake256_Free(&this->shake);
      |  ^~~~~~~~~~~~~~~~
      |  wc_Sha3_256_Free
wolfssl_xof.c: In function ‘wolfssl_xof_create’:
wolfssl_xof.c:143:6: warning: implicit declaration of function ‘wc_InitShake256’; did you mean ‘wc_InitSha3_256’? [-Wimplicit-function-declaration]
  143 |  if (wc_InitShake256(&this->shake, NULL, 0) != 0)
      |      ^~~~~~~~~~~~~~~
      |      wc_InitSha3_256
make[5]: *** [Makefile:648: wolfssl_xof.lo] Error 1

wolfSSL FIPS defines WOLFSSL_NO_SHAKE256 because that algorithm is not certified.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,418,2021-05-28T00:33:16Z,2021-06-01T17:56:53Z,2021-06-01T17:56:53Z,CLOSED,False,2,2,1,https://github.com/embhorn,Fix undefined call to shake256 when WOLFSSL_NO_SHAKE256 is defined,1,[],https://github.com/strongswan/strongswan/pull/418,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/418#issuecomment-850189024,"When testing the FIPS instructions from https://www.wolfssl.com/strongswan-wolfssl-fips-2/ , there were build failures during make in strongswan.
wolfssl_xof.c:41:2: error: unknown type name ‘wc_Shake’
   41 |  wc_Shake shake;
      |  ^~~~~~~~
wolfssl_xof.c: In function ‘get_bytes’:
wolfssl_xof.c:69:6: warning: implicit declaration of function ‘wc_Shake256_Update’; did you mean ‘wc_Sha3_256_Update’? [-Wimplicit-function-declaration]
   69 |  if (wc_Shake256_Update(&this->shake, this->seed.ptr, this->seed.len) == 0)
      |      ^~~~~~~~~~~~~~~~~~
      |      wc_Sha3_256_Update
wolfssl_xof.c:72:7: warning: implicit declaration of function ‘wc_Shake256_Final’; did you mean ‘wc_Sha3_256_Final’? [-Wimplicit-function-declaration]
   72 |   if (wc_Shake256_Final(&this->shake, data.ptr, data.len) == 0)
      |       ^~~~~~~~~~~~~~~~~
      |       wc_Sha3_256_Final
wolfssl_xof.c: In function ‘destroy’:
wolfssl_xof.c:114:2: warning: implicit declaration of function ‘wc_Shake256_Free’; did you mean ‘wc_Sha3_256_Free’? [-Wimplicit-function-declaration]
  114 |  wc_Shake256_Free(&this->shake);
      |  ^~~~~~~~~~~~~~~~
      |  wc_Sha3_256_Free
wolfssl_xof.c: In function ‘wolfssl_xof_create’:
wolfssl_xof.c:143:6: warning: implicit declaration of function ‘wc_InitShake256’; did you mean ‘wc_InitSha3_256’? [-Wimplicit-function-declaration]
  143 |  if (wc_InitShake256(&this->shake, NULL, 0) != 0)
      |      ^~~~~~~~~~~~~~~
      |      wc_InitSha3_256
make[5]: *** [Makefile:648: wolfssl_xof.lo] Error 1

wolfSSL FIPS defines WOLFSSL_NO_SHAKE256 because that algorithm is not certified.","Hm, this seems weird to me. How can WOLFSSL_SHAKE256 and WOLFSSL_NO_SHAKE256 both be defined? Is it intended like that by the wolfSSL configure script? Or is this a workaround for a bug there?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,418,2021-05-28T00:33:16Z,2021-06-01T17:56:53Z,2021-06-01T17:56:53Z,CLOSED,False,2,2,1,https://github.com/embhorn,Fix undefined call to shake256 when WOLFSSL_NO_SHAKE256 is defined,1,[],https://github.com/strongswan/strongswan/pull/418,https://github.com/embhorn,3,https://github.com/strongswan/strongswan/pull/418#issuecomment-852331501,"When testing the FIPS instructions from https://www.wolfssl.com/strongswan-wolfssl-fips-2/ , there were build failures during make in strongswan.
wolfssl_xof.c:41:2: error: unknown type name ‘wc_Shake’
   41 |  wc_Shake shake;
      |  ^~~~~~~~
wolfssl_xof.c: In function ‘get_bytes’:
wolfssl_xof.c:69:6: warning: implicit declaration of function ‘wc_Shake256_Update’; did you mean ‘wc_Sha3_256_Update’? [-Wimplicit-function-declaration]
   69 |  if (wc_Shake256_Update(&this->shake, this->seed.ptr, this->seed.len) == 0)
      |      ^~~~~~~~~~~~~~~~~~
      |      wc_Sha3_256_Update
wolfssl_xof.c:72:7: warning: implicit declaration of function ‘wc_Shake256_Final’; did you mean ‘wc_Sha3_256_Final’? [-Wimplicit-function-declaration]
   72 |   if (wc_Shake256_Final(&this->shake, data.ptr, data.len) == 0)
      |       ^~~~~~~~~~~~~~~~~
      |       wc_Sha3_256_Final
wolfssl_xof.c: In function ‘destroy’:
wolfssl_xof.c:114:2: warning: implicit declaration of function ‘wc_Shake256_Free’; did you mean ‘wc_Sha3_256_Free’? [-Wimplicit-function-declaration]
  114 |  wc_Shake256_Free(&this->shake);
      |  ^~~~~~~~~~~~~~~~
      |  wc_Sha3_256_Free
wolfssl_xof.c: In function ‘wolfssl_xof_create’:
wolfssl_xof.c:143:6: warning: implicit declaration of function ‘wc_InitShake256’; did you mean ‘wc_InitSha3_256’? [-Wimplicit-function-declaration]
  143 |  if (wc_InitShake256(&this->shake, NULL, 0) != 0)
      |      ^~~~~~~~~~~~~~~
      |      wc_InitSha3_256
make[5]: *** [Makefile:648: wolfssl_xof.lo] Error 1

wolfSSL FIPS defines WOLFSSL_NO_SHAKE256 because that algorithm is not certified.",@tobiasbrunner - Yes! Agreed. This should be fixed in wolfSSL by wolfSSL/wolfssl#4080,True,"{'THUMBS_UP': ['https://github.com/tobiasbrunner', 'https://github.com/kaleb-himes']}"
strongswan/strongswan,https://github.com/strongswan/strongswan,434,2021-06-06T15:06:41Z,2021-06-07T12:24:23Z,2021-06-07T12:24:23Z,CLOSED,False,6,1,2,https://github.com/deiger,Expose the dh_group on add_sa,1,[],https://github.com/strongswan/strongswan/pull/434,https://github.com/deiger,1,https://github.com/strongswan/strongswan/pull/434,This would enable add_sa implementations to validate and expose externally the used DH group.,This would enable add_sa implementations to validate and expose externally the used DH group.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,434,2021-06-06T15:06:41Z,2021-06-07T12:24:23Z,2021-06-07T12:24:23Z,CLOSED,False,6,1,2,https://github.com/deiger,Expose the dh_group on add_sa,1,[],https://github.com/strongswan/strongswan/pull/434,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/434#issuecomment-855794890,This would enable add_sa implementations to validate and expose externally the used DH group.,What purpose does this have?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,434,2021-06-06T15:06:41Z,2021-06-07T12:24:23Z,2021-06-07T12:24:23Z,CLOSED,False,6,1,2,https://github.com/deiger,Expose the dh_group on add_sa,1,[],https://github.com/strongswan/strongswan/pull/434,https://github.com/deiger,3,https://github.com/strongswan/strongswan/pull/434#issuecomment-855846197,This would enable add_sa implementations to validate and expose externally the used DH group.,We'd like to expose the selected DH group to the user. Currently that data is only available in the log.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,434,2021-06-06T15:06:41Z,2021-06-07T12:24:23Z,2021-06-07T12:24:23Z,CLOSED,False,6,1,2,https://github.com/deiger,Expose the dh_group on add_sa,1,[],https://github.com/strongswan/strongswan/pull/434,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/434#issuecomment-855854950,This would enable add_sa implementations to validate and expose externally the used DH group.,"We'd like to expose the selected DH group to the user.

In the kernel layer?

Currently that data is only available in the log.

Not sure what you are talking about exactly,  because that information is stored in the CHILD_SA object, so it could be retrieved from there (it's what vici etc. do to report this to users - why not use that interfaces?), it can also be retrieved via hooks (e.g. child_updown or child[_derived]_keys). In general, it doesn't provide any useful information to kernel plugins. Also note that the DH group is optional (in particular during IKE_AUTH where there never is one) and that MODP_NULL isn't the right value to indicate that.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,434,2021-06-06T15:06:41Z,2021-06-07T12:24:23Z,2021-06-07T12:24:23Z,CLOSED,False,6,1,2,https://github.com/deiger,Expose the dh_group on add_sa,1,[],https://github.com/strongswan/strongswan/pull/434,https://github.com/deiger,5,https://github.com/strongswan/strongswan/pull/434#issuecomment-855880551,This would enable add_sa implementations to validate and expose externally the used DH group.,"OK, thanks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/502,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/502#issuecomment-877872413,,appveyor failed because of a build timeout. 2 out of 3 tests passed.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/zpericic,3,https://github.com/strongswan/strongswan/pull/502#issuecomment-905780277,,"I have been rebaseing Timo's patches for few years and using it on fedora. There are few differences, namely you are missing changes for OpenWRT in src/libcharon/plugins/uci/uci_control.c and you squashed patches. I also have vyos-disconnect patch on my branch.
Timo's has been sending them to strongswan list for at least eight years.
Here is my conclusion:

Tobias insist that this is implemented as separate plugin.
Copyright notice was added on Tobias request as at first I thought copyright is showstopper.
Strongswan added some things based on Timo's patches, namely new events and connection loading as  sarthurdev mentioned on #345 .

Frr ships nhrp daemon (not dmvpn) for few years in stable releases, quagga also (but it has been deprecated) and it's a real shame this was not accepted or taken more seriously because most of SS usage on linux are on server to server basis. Even more because SS became main part of most distributions.
If only some of SS developer could find some time to review and do some work in direction in which it is acceptable to SS.
BTW. SS source is real large and IPsec/IKE is very complicated matter so it's not real that this is implemented by non SS developer.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/Thermi,4,https://github.com/strongswan/strongswan/pull/502#issuecomment-906674091,,"Not feasible to implement because the changes it requires
Solved for a long time now.
The patches already take that into account.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/zpericic,5,https://github.com/strongswan/strongswan/pull/502#issuecomment-906687099,,"So what would be correct course of action?
As Tobias stated this patches were rejected years ago and I don't see that they will ever be accepted. I especially don’t see that they could accepted in this squashed state.
Patches appeared on strongswan-dev list in 2014. Timo has resubmitted it few more times and they are ignored since.
Are we waiting for changes which would break this patches completely so we could throw away all nhrp code in Frr and Quagga?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/zpericic,6,https://github.com/strongswan/strongswan/pull/502#issuecomment-906697655,,BTW. This is original thread which partly answer's Tobias questions.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/pemensik,7,https://github.com/strongswan/strongswan/pull/502#issuecomment-965887221,,"We have received request to include this feature into Fedora strongswan package. But one of original arguments in mailing list were lack of design document. I have found something on FRR NHRPD, but I would think this deserves at least some README.md on strongswan side. I can find updated code, but I miss any documentation notes added along. Is it intentional?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,502,2021-07-11T00:10:30Z,,2021-11-14T23:28:20Z,OPEN,False,363,41,20,https://github.com/Thermi,src: Implement changes for dmvpn,1,[],https://github.com/strongswan/strongswan/pull/502,https://github.com/Thermi,8,https://github.com/strongswan/strongswan/pull/502#issuecomment-968385497,,"What kind of documentation do you want? There is essentially no user interaction needed after the IKE_SA and CHILD_SA configuration is provided, and frr nhrpd is connected to it (and the nhrpd configuration is obviously frr specific, and has nothing to do with strongSwan).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,503,2021-07-11T06:44:28Z,,2021-07-11T06:44:28Z,OPEN,False,78,15,3,https://github.com/atzm,sql: extend peer_configs and child_configs to support modern features,2,[],https://github.com/strongswan/strongswan/pull/503,https://github.com/atzm,1,https://github.com/strongswan/strongswan/pull/503,"This PR adds following configuration capabilities into the sql plugin:

connections.<conn>.if_id_{in,out}
connections.<conn>.children.<child>.if_id_{in,out}
connections.<conn>.children.<child>.mark_{in,out}
connections.<conn>.children.<child>.set_mark_{in,out}
connections.<conn>.children.<child>.inactivity
connections.<conn>.children.<child>.tfc_padding
connections.<conn>.children.<child>.interface
connections.<conn>.children.<child>.hw_offload
connections.<conn>.children.<child>.copy_dscp","This PR adds following configuration capabilities into the sql plugin:

connections.<conn>.if_id_{in,out}
connections.<conn>.children.<child>.if_id_{in,out}
connections.<conn>.children.<child>.mark_{in,out}
connections.<conn>.children.<child>.set_mark_{in,out}
connections.<conn>.children.<child>.inactivity
connections.<conn>.children.<child>.tfc_padding
connections.<conn>.children.<child>.interface
connections.<conn>.children.<child>.hw_offload
connections.<conn>.children.<child>.copy_dscp",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,505,2021-07-15T15:30:39Z,2021-07-26T08:45:41Z,2021-10-12T16:32:04Z,CLOSED,False,1,0,1,https://github.com/Thermi,gitignore: Add /nbproject,1,[],https://github.com/strongswan/strongswan/pull/505,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/505,/nbproject is the Apache Netbeans IDE project file directory. Lots of prople probably use Netbeans with the (simple) C plugin to work on strongSwan with it. It makes sense to add it into the .gitignore file here.,/nbproject is the Apache Netbeans IDE project file directory. Lots of prople probably use Netbeans with the (simple) C plugin to work on strongSwan with it. It makes sense to add it into the .gitignore file here.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,505,2021-07-15T15:30:39Z,2021-07-26T08:45:41Z,2021-10-12T16:32:04Z,CLOSED,False,1,0,1,https://github.com/Thermi,gitignore: Add /nbproject,1,[],https://github.com/strongswan/strongswan/pull/505,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/505#issuecomment-883242207,/nbproject is the Apache Netbeans IDE project file directory. Lots of prople probably use Netbeans with the (simple) C plugin to work on strongSwan with it. It makes sense to add it into the .gitignore file here.,"Would maybe nbproject/ be a better choice, in case somebody opens a subdir (e.g. src/frontends/gnome) in NetBeans?

Lots of prople probably use Netbeans with the (simple) C plugin to work on strongSwan with it.

Never heard of somebody doing that, but OK :) (IDEs I know people have used with strongSwan in the past are Eclipse, CLion and Qt Creator, I guess I have to add NetBeans to that list.)",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,505,2021-07-15T15:30:39Z,2021-07-26T08:45:41Z,2021-10-12T16:32:04Z,CLOSED,False,1,0,1,https://github.com/Thermi,gitignore: Add /nbproject,1,[],https://github.com/strongswan/strongswan/pull/505,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/505#issuecomment-885927661,/nbproject is the Apache Netbeans IDE project file directory. Lots of prople probably use Netbeans with the (simple) C plugin to work on strongSwan with it. It makes sense to add it into the .gitignore file here.,Done.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,505,2021-07-15T15:30:39Z,2021-07-26T08:45:41Z,2021-10-12T16:32:04Z,CLOSED,False,1,0,1,https://github.com/Thermi,gitignore: Add /nbproject,1,[],https://github.com/strongswan/strongswan/pull/505,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/505#issuecomment-886504602,/nbproject is the Apache Netbeans IDE project file directory. Lots of prople probably use Netbeans with the (simple) C plugin to work on strongSwan with it. It makes sense to add it into the .gitignore file here.,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/gollub,1,https://github.com/strongswan/strongswan/pull/526,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/gollub,2,https://github.com/strongswan/strongswan/pull/526#issuecomment-888215656,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","Labeled this as RFC, since I'm not entirely sure if the random plugin was supposed to not act as RNG_WEAK anymore.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/gollub,3,https://github.com/strongswan/strongswan/pull/526#issuecomment-888217565,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","b2c44ac - introduce ""get_features""
35852af - adds RNG_WEAK case, without making the random plugin registering as a feature which prodives RNG_WEAK
So I have the impression adding RNG_WEAK in get_features was just missed by accident.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/526#issuecomment-888243594,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","It's not an oversight. If an RNG_WEAK implementation is requested, any stronger RNG provided by a plugin is accepted. So there is no point in explicitly announcing an RNG_WEAK if the plugin does not provide a different implementation. That's different for e.g. the openssl plugin where RNG_WEAK and RNG_STRONG are different.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/gollub,5,https://github.com/strongswan/strongswan/pull/526#issuecomment-888259166,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","@tobiasbrunner , thanks for confirmation that this was not an oversight.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/gollub,6,https://github.com/strongswan/strongswan/pull/526#issuecomment-889151020,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","@tobiasbrunner , I had another look and noticed following:
# swanctl --stats | grep -i plugin
loaded plugins: charon-systemd random nonce x509 revocation constraints pubkey pkcs1 pkcs7 pkcs8 pkcs12 pem ext-fetcher resolve socket-default stroke vici eap-identity eap-gtc eap-tls addrblock counters openssl kernel-netlink
root@ra-vpn-server-scale:/home/vyatta# swanctl --list-algs | tail
  MODP_768[openssl]
  MODP_CUSTOM[openssl]
  CURVE_25519[openssl]
  CURVE_448[openssl]
rng:
  RNG_WEAK[openssl] <<<<<<<<<<< openssl?!
  RNG_STRONG[random]
  RNG_TRUE[random]
nonce-gen:
  NONCE_GEN[nonce]

Is that really the desired behavior?
With the random plugin patched:
# swanctl --list-algs | tail
  MODP_768[openssl]
  MODP_CUSTOM[openssl]
  CURVE_25519[openssl]
  CURVE_448[openssl]
rng:
  RNG_WEAK[random]
  RNG_STRONG[random]
  RNG_TRUE[random]
nonce-gen:
  NONCE_GEN[nonce]

I was under the impression that the plugin priority order should be taken here into account.
Without the random RNG_WEAK patch, linux-perf sample showing that the openssl plugin gets used for nonce generation:
charon-systemd 21087 [005] 124403.594222:     250000 cpu-clock:pppH: 
            7f8c4ea9aa32 __GI___pthread_once+0x2 (inlined)
            7f8c4de7fd08 CRYPTO_THREAD_run_once+0x8 (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
            7f8c4de40e4a RAND_get_rand_method+0x1a (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
            7f8c4de4113f RAND_bytes+0xf (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
--
        ffffffff81a0008c entry_SYSCALL_64_after_hwframe+0x44 ([kernel.kallsyms])
            7f8c4e98a477 getpid+0x7 (inlined)
            7f8c4de419ff [unknown] (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
            7f8c4de40680 [unknown] (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
            7f8c4de3f731 RAND_DRBG_bytes+0x41 (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
            7f8c4df92fd2 get_bytes+0x12 (/usr/lib/ipsec/plugins/libstrongswan-openssl.so)
            7f8c4df93011 allocate_bytes+0x21 (/usr/lib/ipsec/plugins/libstrongswan-openssl.so)
            7f8c4ed2fd3b generate_nonce+0x1b (/usr/lib/ipsec/libcharon.so.0.0.0)
            7f8c4ed30931 process_r+0x71 (/usr/lib/ipsec/libcharon.so.0.0.0)
            7f8c4ed20a56 process_message+0x11f6 (/usr/lib/ipsec/libcharon.so.0.0.0)
            7f8c4ed0e886 process_message+0xc6 (/usr/lib/ipsec/libcharon.so.0.0.0)
            7f8c4ed07d83 execute+0xc3 (/usr/lib/ipsec/libcharon.so.0.0.0)
            7f8c4edb7a2a process_job+0x1da (inlined)
            7f8c4edb7a2a process_jobs+0x1da (/usr/lib/ipsec/libstrongswan.so.0.0.0)
            7f8c4edca36a thread_main+0xba (/usr/lib/ipsec/libstrongswan.so.0.0.0)
            7f8c4ea92fa2 start_thread+0xf2 (/usr/lib/x86_64-linux-gnu/libpthread-2.28.so)
            7f8c4e9bc4ce clone+0x3e (inlined)

( this sample is from a build with #define NONCE_RNG_QUALITY RNG_WEAK )
Overall I was curious trying different RNG implementations and with the linux-perf run I still noticed RAND_bytes/OpenSSL calls, but expected the random plugin to be used with higher priority then the OpenSSL plugin. My motivation was to benchmark random/rdrand/openssl as RNG and keep using OpenSSL for the other crypto methods.
If this is not expected, I can take a deeper look why this is happening.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,526,2021-07-28T10:54:48Z,2021-07-28T11:45:32Z,2021-07-30T07:29:57Z,CLOSED,False,1,0,1,https://github.com/gollub,[RFC] random: provide RNG_WEAK,1,[],https://github.com/strongswan/strongswan/pull/526,https://github.com/tobiasbrunner,7,https://github.com/strongswan/strongswan/pull/526#issuecomment-889692193,"Looks like this was an oversight that the random plugin is not also
registering itself as a RNG source for RNG_WEAK.
There is code in random_rng.c which handels the RNG_WEAK case and
uses then /dev/urandom.","Is that really the desired behavior?

Yes.

I was under the impression that the plugin priority order should be taken here into account.

That's slightly different for RNG implementations as they are also ordered by strength, so that requesting RNG_WEAK gets you the first implementation of that strength (or a stronger one) etc.

Without the random RNG_WEAK patch, linux-perf sample showing that the openssl plugin gets used for nonce generation:

Exactly, it provides a specific implementation for that strength so that's used.

My motivation was to benchmark random/rdrand/openssl as RNG and keep using OpenSSL for the other crypto methods.

The openssl plugin does currently not use the RNG implementations provided by other plugins to allocate random data (e.g. for (EC)DH or even private keys).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,531,2021-07-29T17:30:49Z,,2021-07-29T17:30:49Z,OPEN,False,4,3,2,https://github.com/gollub,load-tester: support ECDSA certificates,1,[],https://github.com/strongswan/strongswan/pull/531,https://github.com/gollub,1,https://github.com/strongswan/strongswan/pull/531,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,541,2021-08-05T19:51:53Z,,2021-08-31T09:52:48Z,OPEN,False,51,8,8,https://github.com/Thermi,Support for trapping and restarting at the same time,7,[],https://github.com/strongswan/strongswan/pull/541,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/541,"Needed to tell strongSwan to trap and start a connection when the daemon starts.
Otherwise one needs to code that manually using a script and that sucks.","Needed to tell strongSwan to trap and start a connection when the daemon starts.
Otherwise one needs to code that manually using a script and that sucks.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,541,2021-08-05T19:51:53Z,,2021-08-31T09:52:48Z,OPEN,False,51,8,8,https://github.com/Thermi,Support for trapping and restarting at the same time,7,[],https://github.com/strongswan/strongswan/pull/541,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/541#issuecomment-907354401,"Needed to tell strongSwan to trap and start a connection when the daemon starts.
Otherwise one needs to code that manually using a script and that sucks.",@tobiasbrunner Thoughts?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,541,2021-08-05T19:51:53Z,,2021-08-31T09:52:48Z,OPEN,False,51,8,8,https://github.com/Thermi,Support for trapping and restarting at the same time,7,[],https://github.com/strongswan/strongswan/pull/541,https://github.com/tobiasbrunner,3,https://github.com/strongswan/strongswan/pull/541#issuecomment-909082004,"Needed to tell strongSwan to trap and start a connection when the daemon starts.
Otherwise one needs to code that manually using a script and that sucks.","Sorry, I've currently no time for a proper review. But this seems like a good recipe to create duplicate CHILD_SAs (similar to combining trap policies with dpd_action=restart or reauthentication), at least until we have something like the patch in the child-sa-dedup branch applied (which is more of a workaround).
I also don't like the name of the vici keyword (maybe trap-start or trap+start with a ...restart alias).
Some commits could probably also be squashed (e.g. documenting and adding the keyword(s)).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,577,2021-09-02T22:33:25Z,2021-09-03T09:43:11Z,2021-09-03T10:09:21Z,CLOSED,False,2040,133,56,https://github.com/steweg,Added EAP_ANYCONNECT support,8,[],https://github.com/strongswan/strongswan/pull/577,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/577,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,577,2021-09-02T22:33:25Z,2021-09-03T09:43:11Z,2021-09-03T10:09:21Z,CLOSED,False,2040,133,56,https://github.com/steweg,Added EAP_ANYCONNECT support,8,[],https://github.com/strongswan/strongswan/pull/577,https://github.com/Thermi,2,https://github.com/strongswan/strongswan/pull/577#issuecomment-912108154,,"Please make separate commits by functionality and rebase onto latest master.
The if_id support for ipsec.conf is unlikely to be merged because stroke (and hence ipsec.conf) are gone in the next major version.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,577,2021-09-02T22:33:25Z,2021-09-03T09:43:11Z,2021-09-03T10:09:21Z,CLOSED,False,2040,133,56,https://github.com/steweg,Added EAP_ANYCONNECT support,8,[],https://github.com/strongswan/strongswan/pull/577,https://github.com/steweg,3,https://github.com/strongswan/strongswan/pull/577#issuecomment-912407548,,"As suggested I will separate those commit into separate pull requests.
To answer your questions:

usage of IKEv1 fragmentation format in IKEv2: This is needed if you would wish to support Original Cisco Anyconnect Clients. Not necessarily needed when strongswan is a client. But it is needed when it is acting as a server (not necessarily for eap-anyconnect auth method)
usage of a random vendor id: To be honest I have no idea what this is for. It's completely non-standard as it is being send as encrypted as part of IKE_AUTH message (not as standard unencrypted vendor id within IKE_SA_INIT message). I build this based on using strongswan as MITM for IKE & IPsec. I have separate and really ugly patch for this feature. So I was able to read on the fly and forward packets from client to real server and vice-versa, and modify them as needed to pass the auth/crypto parts. Therefore I have seen that this vendor ID is always being changed for each IKE session for client and even for server. It is not used for any kind of auth/crypto mechanism. But if not present in first IKE_AUTH message, then the authentication will fail.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,580,2021-09-03T09:44:39Z,,2021-09-10T07:06:11Z,OPEN,False,46,2,1,https://github.com/steweg,Usage of agreed PRF function in pubkey auth,1,[],https://github.com/strongswan/strongswan/pull/580,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/580,This patch adjust pubkey authentication to use agreed PRF function for RSA KEY types.,This patch adjust pubkey authentication to use agreed PRF function for RSA KEY types.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,581,2021-09-03T09:45:31Z,,2021-09-03T12:16:45Z,OPEN,False,205,109,28,https://github.com/steweg,Refactor EAP vendor from uint32_t to eap_vendor_t,1,[],https://github.com/strongswan/strongswan/pull/581,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/581,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,581,2021-09-03T09:45:31Z,,2021-09-03T12:16:45Z,OPEN,False,205,109,28,https://github.com/steweg,Refactor EAP vendor from uint32_t to eap_vendor_t,1,[],https://github.com/strongswan/strongswan/pull/581,https://github.com/apps/lgtm-com,2,https://github.com/strongswan/strongswan/pull/581#issuecomment-912425771,,"This pull request introduces 1 alert when merging 7762874 into fbd4930 - view on LGTM.com
new alerts:

1 for Comparison result is always the same",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,582,2021-09-03T09:46:25Z,,2021-09-09T09:35:03Z,OPEN,False,11,2,1,https://github.com/steweg,Fix broken handling of fragmented packets,1,[],https://github.com/strongswan/strongswan/pull/582,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/582,"This patch fixes the issue for IKEv1 fragmentation,
when message id is not corresponding to fragment id","This patch fixes the issue for IKEv1 fragmentation,
when message id is not corresponding to fragment id",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,583,2021-09-03T09:47:19Z,,2021-09-23T10:54:53Z,OPEN,False,61,5,2,https://github.com/steweg,Adding Cisco AnyConnect Vendor IDs,1,[],https://github.com/strongswan/strongswan/pull/583,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/583,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,584,2021-09-03T09:48:10Z,,2021-09-09T11:12:46Z,OPEN,False,89,3,8,https://github.com/steweg,Allow IM certificates,1,[],https://github.com/strongswan/strongswan/pull/584,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/584,This patch allows loading of intermediate CA certificates,This patch allows loading of intermediate CA certificates,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,612,2021-09-23T11:11:56Z,,2021-09-23T11:11:56Z,OPEN,False,4,1,1,https://github.com/steweg,Fix of credential manager,1,[],https://github.com/strongswan/strongswan/pull/612,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/612,"This fixes the issue, when the same key is used for client
connection and at the same time it is received from other client
during authentication on server connection","This fixes the issue, when the same key is used for client
connection and at the same time it is received from other client
during authentication on server connection",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,613,2021-09-23T11:15:14Z,,2021-09-27T08:32:42Z,OPEN,False,63,4,5,https://github.com/steweg,Extend IKE_SA of other OCTET ID,1,[],https://github.com/strongswan/strongswan/pull/613,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/613,This enhancement allows various pubkey and eap authenticators to use different identification for keymat octets calculations then the one that is from received certificate,This enhancement allows various pubkey and eap authenticators to use different identification for keymat octets calculations then the one that is from received certificate,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,614,2021-09-23T11:15:43Z,,2021-09-23T11:15:43Z,OPEN,False,67,0,2,https://github.com/steweg,Adding chunk method to remove unprintable chars,1,[],https://github.com/strongswan/strongswan/pull/614,https://github.com/steweg,1,https://github.com/strongswan/strongswan/pull/614,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,632,2021-09-28T12:28:15Z,,2022-02-02T23:19:25Z,OPEN,False,334,2,7,https://github.com/jeanseb6wind,vici: add asynchronous session in python module,1,[],https://github.com/strongswan/strongswan/pull/632,https://github.com/jeanseb6wind,1,https://github.com/strongswan/strongswan/pull/632,"Add a new Python 3.6 package allowing vici to send asynchronous
requests. This feature is only available in Python 3 so we add a
condition in the setup.py in order to not break the Python 2 package.","Add a new Python 3.6 package allowing vici to send asynchronous
requests. This feature is only available in Python 3 so we add a
condition in the setup.py in order to not break the Python 2 package.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,632,2021-09-28T12:28:15Z,,2022-02-02T23:19:25Z,OPEN,False,334,2,7,https://github.com/jeanseb6wind,vici: add asynchronous session in python module,1,[],https://github.com/strongswan/strongswan/pull/632,https://github.com/apps/lgtm-com,2,https://github.com/strongswan/strongswan/pull/632#issuecomment-929184072,"Add a new Python 3.6 package allowing vici to send asynchronous
requests. This feature is only available in Python 3 so we add a
condition in the setup.py in order to not break the Python 2 package.","This pull request introduces 3 alerts when merging d5167d8 into 1b21a00 - view on LGTM.com
new alerts:

2 for Suspicious unused loop iteration variable
1 for Unused import",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,632,2021-09-28T12:28:15Z,,2022-02-02T23:19:25Z,OPEN,False,334,2,7,https://github.com/jeanseb6wind,vici: add asynchronous session in python module,1,[],https://github.com/strongswan/strongswan/pull/632,https://github.com/Thermi,3,https://github.com/strongswan/strongswan/pull/632#issuecomment-929184725,"Add a new Python 3.6 package allowing vici to send asynchronous
requests. This feature is only available in Python 3 so we add a
condition in the setup.py in order to not break the Python 2 package.",You missed the opportunity to call it avinci,True,{'THUMBS_UP': ['https://github.com/jeanseb6wind']}
strongswan/strongswan,https://github.com/strongswan/strongswan,632,2021-09-28T12:28:15Z,,2022-02-02T23:19:25Z,OPEN,False,334,2,7,https://github.com/jeanseb6wind,vici: add asynchronous session in python module,1,[],https://github.com/strongswan/strongswan/pull/632,https://github.com/jeanseb6wind,4,https://github.com/strongswan/strongswan/pull/632#issuecomment-931257941,"Add a new Python 3.6 package allowing vici to send asynchronous
requests. This feature is only available in Python 3 so we add a
condition in the setup.py in order to not break the Python 2 package.","Hello,
Can someone take a look at this PR ?
We are using this code in production and it works great.
Thanks",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,632,2021-09-28T12:28:15Z,,2022-02-02T23:19:25Z,OPEN,False,334,2,7,https://github.com/jeanseb6wind,vici: add asynchronous session in python module,1,[],https://github.com/strongswan/strongswan/pull/632,https://github.com/ismaillatona,5,https://github.com/strongswan/strongswan/pull/632#issuecomment-1028449235,"Add a new Python 3.6 package allowing vici to send asynchronous
requests. This feature is only available in Python 3 so we add a
condition in the setup.py in order to not break the Python 2 package.",It's been 4 months. Looks like you could make a fork project. I'd suggest you name it Aviici ;),True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,744,2021-11-10T21:54:00Z,,2022-01-26T11:59:35Z,OPEN,False,15,2,1,https://github.com/corngood,WIP: resolve: add search domain and resolveconf path settings,2,[],https://github.com/strongswan/strongswan/pull/744,https://github.com/corngood,1,https://github.com/strongswan/strongswan/pull/744,"I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.","I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,744,2021-11-10T21:54:00Z,,2022-01-26T11:59:35Z,OPEN,False,15,2,1,https://github.com/corngood,WIP: resolve: add search domain and resolveconf path settings,2,[],https://github.com/strongswan/strongswan/pull/744,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/744#issuecomment-966095264,"I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.","First, allowing the location of resolvconf to be specified.

I've no problem with that, but don't these other packages you mention provide a resolvconf symlink/script in PATH for compatibility? (Maybe only optionally?)

Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf. Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

That's not really what a search domain is, you are thinking about split-DNS (routing domain in systemd-resolved speak). Search domains are used as suffix for incomplete hostnames (e.g. makes vpn.example.org from vpn if example.org is a search domain). I'm not aware of an API that supports explicitly configuring split-DNS other than the D-Bus interface org.freedesktop.resolve1 provided by systemd-resolved, which we currently don't support and which is, unfortunately, interface bound of which there are none used/created by IPsec usually (and unlike resolvconf where we just pass a fake interface name, systemd-resolved insists on an existing interface). Or are you saying there is a mode/config option for dnsmasq where it treats search domains like routing domains and only uses the DNS server for the given search domains (it's technically not really the same, however, systemd-resolved seems to do the same if a complete name matching the search domain is passed)? Also note that RFC 8598 exchanges routing domains and not search domains (for which there are currently no config payloads defined in IKEv2), but I guess it's up to clients to treat them as search domains too.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,744,2021-11-10T21:54:00Z,,2022-01-26T11:59:35Z,OPEN,False,15,2,1,https://github.com/corngood,WIP: resolve: add search domain and resolveconf path settings,2,[],https://github.com/strongswan/strongswan/pull/744,https://github.com/corngood,3,https://github.com/strongswan/strongswan/pull/744#issuecomment-966529211,"I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.","I've no problem with that, but don't these other packages you mention provide a resolvconf symlink/script in PATH for compatibility? (Maybe only optionally?)

They typically do, but the resolve plugin currently uses stat to locate it at a fixed path and falls back to updating resolv.conf if it doesn't exist.  We'd need to add a flag to force it to exec resolvconf regardless of the existence of the file, or use a different method to determine if it's executable.  If you have a preference there I'd be happy to investigate it.

Or are you saying there is a mode/config option for dnsmasq where it treats search domains like routing domains and only uses the DNS server for the given search domains (it's technically not really the same, however, systemd-resolved seems to do the same if a complete name matching the search domain is passed)?

Yeah, so if you tell resolvconf that an interface is private, it will treat the search domain from the resolv.conf fragment as a routing domain when it configures certain 'subscribers'.  With dnsmasq this results in a config like server=/domain/address.  In this case the domain is not actually used as search domain, and is only used for the specified domain.
I'm happy to rename things, but technically what's being passed to resolveconf is a search domain:
search domain
nameserver address

This all adds up to a working split-DNS, but it's quite messy.
I'd be happy to move to systemd-resolved, but ran into the issue you mentioned, which I think is covered by systemd/systemd#5573.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,744,2021-11-10T21:54:00Z,,2022-01-26T11:59:35Z,OPEN,False,15,2,1,https://github.com/corngood,WIP: resolve: add search domain and resolveconf path settings,2,[],https://github.com/strongswan/strongswan/pull/744,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/744#issuecomment-967029560,"I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.","They typically do, but the resolve plugin currently uses stat to locate it at a fixed path and falls back to updating resolv.conf if it doesn't exist.

I guess that could be fixed with another symlink at that path (stat() should work fine on that). Or we could try multiple paths if there are other well known ones. What's the path in your case?

We'd need to add a flag to force it to exec resolvconf regardless of the existence of the file, or use a different method to determine if it's executable.

The former wouldn't work if we'd still call the absolute path so we'd have to switch to calling it just as resolvconf if such a flag was set (doesn't seem better than making the path configurable, though). Testing if it's executable would easiest be done by just executing it. Since our process wrappers don't provide a way to determine if executing a command failed because the executable didn't exist or it returned an error status, we'd have to call it in way that doesn't cause it to error out. However, that seems to be surprisingly difficult without side-effects (i.e. installing a DNS server).
For instance, the Debian version only provides support for very limited arguments (e.g. no --help/-h or --version/-v) and exits with an error for unknown ones (or no arguments). So we'd basically be left with passing -a or -d. Installing a DNS server just to test the availability of resolvconf is obviously not ideal. While we could omit passing anything or only comments via  STDIN, that might cause an error for implementations that explicitly check for proper input (it doesn't for the Debian version, but does for that provided by systemd). So we could instead try to delete a non-existent server/interface, but that might cause an error too (again, this isn't the case for the Debian version but the systemd version, which would ignore the error if -f was passed, however, that in turn causes the Debian version to fail). So I don't think actually calling resolvconf is an option.

Yeah, so if you tell resolvconf that an interface is private, it will treat the search domain from the resolv.conf fragment as a routing domain when it configures certain 'subscribers'.

Are you referring to the -p argument the openresolv version of resolvconf provides? (Which we currently don't pass, as neither the Debian, nor the systemd versions support it. As mentioned above, the former actually fails for unknown arguments.) Or is there another way (e.g. by naming the interfaces a specific way)? (I guess wrapping the actual resolvconf with a custom script could be an option.)

With dnsmasq this results in a config like server=/domain/address. In this case the domain is not actually used as search domain, and is only used for the specified domain.

Nice, does that support multiple domains? Because search apparently accepts multiple space/tab-separated domain names.

I'm happy to rename things, but technically what's being passed to resolveconf is a search domain:

No, that's OK (maybe make it search_domains, see above). But it could possibly be a non-resolvconf-specific option (i.e. remove .resolvconf and also use it when modifying resolv.conf). And not sure about it being a global option (although connection specific options are kinda tricky to implement for plugins). Ideally, we'd support the attributes defined by RFC 8598 (maybe with a global option to not request/process them). But that's a lot more work and it also affects several components outside the resolve plugin. So I guess as an initial solution such global setting would be fine.

I'd be happy to move to systemd-resolved, but ran into the issue you mentioned, which I think is covered by systemd/systemd#5573.

Ah, didn't know about that ticket. Would be great if there was an option to add DNS servers, domains etc. under a generic (i.e. non-interface) name.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,744,2021-11-10T21:54:00Z,,2022-01-26T11:59:35Z,OPEN,False,15,2,1,https://github.com/corngood,WIP: resolve: add search domain and resolveconf path settings,2,[],https://github.com/strongswan/strongswan/pull/744,https://github.com/corngood,5,https://github.com/strongswan/strongswan/pull/744#issuecomment-967217459,"I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.","I guess that could be fixed with another symlink at that path (stat() should work fine on that). Or we could try multiple paths if there are other well known ones. What's the path in your case?

The path in my case (NixOS) is /run/current-system/sw/bin/resolvconf, which is a symlink to either openresolv or systemd depending on the system configuration.  It's also in $PATH.  I think it would be a bad idea to hard-code this sort of nix-ism into the plugin.  At least /sbin/resolvconf makes sense in FHS.

However, that seems to be surprisingly difficult without side-effects (i.e. installing a DNS server).

Agreed.  This seems very fragile.
I think my preference would be to either:

add a setting like use_resolvconf to override the stat check
infer use_resolvconf if either file or exec are set (only stat if neither are set, error if both are?)

Either of these would allow exec to be set to resolvconf to allow use of $PATH.

Are you referring to the -p argument the openresolv version of resolvconf provides?

I actually set a configuration option in resolvconf.conf:
    private_interfaces=""lo.inet.ipsec.*""

I believe this does the same thing as -p.  Maybe we could add a setting for extra arguments, to avoid having to configure resolvconf separately?  It's not something we'd want to enable by default unless we implement RFC 8598.

Nice, does that support multiple domains? Because search apparently accepts multiple space/tab-separated domain names.

Yeah, it should.  I'd like to support that in the plugin, I just need to add the conversion logic and test it.

No, that's OK (maybe make it search_domains, see above). But it could possibly be a non-resolvconf-specific option (i.e. remove .resolvconf and also use it when modifying resolv.conf).

Makes sense.  I have yet to implement the resolv.conf handling.

And not sure about it being a global option (although connection specific options are kinda tricky to implement for plugins).

I'd like to find a way to configure this per-connection.  The closest thing I could fine was eap-radius, where you specify profiles and then reference them from e.g. rightauth, as in pinprofile here: https://wiki.strongswan.org/projects/strongswan/wiki/EapRadius.  What do you think?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,744,2021-11-10T21:54:00Z,,2022-01-26T11:59:35Z,OPEN,False,15,2,1,https://github.com/corngood,WIP: resolve: add search domain and resolveconf path settings,2,[],https://github.com/strongswan/strongswan/pull/744,https://github.com/tobiasbrunner,6,https://github.com/strongswan/strongswan/pull/744#issuecomment-969028188,"I'm just looking for feedback on this before I put any work into documentation/testing.
First, allowing the location of resolvconf to be specified.  This is to help with non-FHS systems (NixOS in my case).  An alternative here would be to depend on $PATH, but we'd then need to change how use_resolvconf is determined.  Currently nixpkgs patches strongswan to depend directly on openresolv, but this doesn't account for other implementations of resolvconf, such as systemd-resolved.
Secondly, allow a search domain to be specified in the configuration fragment passed to resolvconf.  Using this I can configure resolvconf to treat this as a private interface, which will in turn configure dnsmasq to use nameservers from charon only for the specified domain.

Is there a way I could configure search domains per-connection?  I couldn't find an example of a similar setting.
It looks like https://datatracker.ietf.org/doc/html/rfc8598 would cover this, but I don't see any signs of implementation.  Also, a client may still want to override it.","infer use_resolvconf if either file or exec are set (only stat if neither are set, error if both are?)


Sounds good to me, not sure about the error, might be simpler to just ignore file if not used. I've pushed a change to that effect to the 744-resolvconf branch (includes a log message stating what's going to be used).

Maybe we could add a setting for extra arguments, to avoid having to configure resolvconf separately?

I wonder if resolvconf -p -d would work (it's only documented for -a), because if so, the configured command could include that argument. But doing that via resolvconf.conf seems not that bad either.

Yeah, it should. I'd like to support that in the plugin, I just need to add the conversion logic and test it.

The option could just be documented to expect space-separated domain names, like it's documented for resolv.conf. No need to convert anything.

I'd like to find a way to configure this per-connection. The closest thing I could fine was eap-radius, where you specify profiles and then reference them from e.g. rightauth, as in pinprofile here: https://wiki.strongswan.org/projects/strongswan/wiki/EapRadius. What do you think?

What the radius plugin does is very specific to authentication methods (and required a lot of changes all over the place to support it).
There are two relatively easy approaches that plugins may use if they want to make something connection-specific (based on the connection's name). Both use settings in strongswan.conf, not swanctl.conf and there are very few examples at the moment.

One example is the p-cscf plugin that uses charon.plugins.p-cscf.enable.<conn> = yes|no to enable the functionality for a particular connection (so here it would be charon.plugins.resolve.search_domains.<conn> = ""specific search domains"", charon.plugins.resolve.search_domains could also be a value to define a default).
The other approach is used by the forecast plugin, where charon.plugins.forecast.reinject takes a list of connection names for which the plugin is enabled (instead of using charon.plugins.forecast.reinject.<conn> = yes|no). Here it would require using anonymous sub-sections, something like charon.plugins.resolve.<arbitrary-name-or-maybe-with-common-prefix>.conns = <list of connection names> and charon.plugins.resolve.<arbitrary-name>.search_domains = ""search domains"" (again, there could be a default value directly under resolve). This had the advantage that multiple connections could easily share the same search domains, but it's more complicated to parse and connection names can't be added via include or section references.

Not sure if doing either is worth the effort right now. We could easily add this at some point if there is a need for it (maybe until then we have some kind of facility to add plugin-usable key-value pairs in swanctl.conf).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,779,2021-11-23T03:48:35Z,2021-11-26T14:46:25Z,2021-11-26T14:46:32Z,CLOSED,False,77,77,2,https://github.com/275873859,feat: Improved simplified Chinese Translation/ 完善了简体中文翻译,1,[],https://github.com/strongswan/strongswan/pull/779,https://github.com/275873859,1,https://github.com/strongswan/strongswan/pull/779,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,779,2021-11-23T03:48:35Z,2021-11-26T14:46:25Z,2021-11-26T14:46:32Z,CLOSED,False,77,77,2,https://github.com/275873859,feat: Improved simplified Chinese Translation/ 完善了简体中文翻译,1,[],https://github.com/strongswan/strongswan/pull/779,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/779#issuecomment-980033356,,"Looks good, thanks. I've pushed this commit to master, but it might be a while until the next Android release.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,832,2021-12-30T09:31:18Z,2022-01-03T09:22:56Z,2022-01-20T14:47:24Z,CLOSED,False,1,1,1,https://github.com/Thermi,conf: fix typo (plugin -> plugins),1,[],https://github.com/strongswan/strongswan/pull/832,https://github.com/Thermi,1,https://github.com/strongswan/strongswan/pull/832,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,832,2021-12-30T09:31:18Z,2022-01-03T09:22:56Z,2022-01-20T14:47:24Z,CLOSED,False,1,1,1,https://github.com/Thermi,conf: fix typo (plugin -> plugins),1,[],https://github.com/strongswan/strongswan/pull/832,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/832#issuecomment-1003962627,,"Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,859,2022-01-20T16:01:17Z,2022-01-24T16:33:44Z,2022-01-24T16:33:55Z,CLOSED,False,38,6,4,https://github.com/martinwilli,sys-logger: Optionally support mapping strongSwan loglevels to syslog levels,1,[],https://github.com/strongswan/strongswan/pull/859,https://github.com/martinwilli,1,https://github.com/strongswan/strongswan/pull/859,"strongSwan logs all syslog messages using LOG_INFO for historical reasons,
regardless of the strongSwan loglevel used producing the log message.
In some setups with advanced logging infrastructure, it may be feasible
to be more verbose when logging in strongSwan, but then filter messages
on the syslog server. While this may be possible by custom syslog filtering
rules matching the log level included with the log_level setting, this is
not super convenient.
So add a new map_level setting, which can map strongSwan loglevels to
syslog loglevels. By default this is disabled, keeping the existing
behavior. If enabled, it maps strongSwan loglevels to syslog loglevels
at a given syslog loglevel offset.","strongSwan logs all syslog messages using LOG_INFO for historical reasons,
regardless of the strongSwan loglevel used producing the log message.
In some setups with advanced logging infrastructure, it may be feasible
to be more verbose when logging in strongSwan, but then filter messages
on the syslog server. While this may be possible by custom syslog filtering
rules matching the log level included with the log_level setting, this is
not super convenient.
So add a new map_level setting, which can map strongSwan loglevels to
syslog loglevels. By default this is disabled, keeping the existing
behavior. If enabled, it maps strongSwan loglevels to syslog loglevels
at a given syslog loglevel offset.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,860,2022-01-20T16:02:55Z,2022-01-24T16:32:27Z,2022-01-24T16:32:28Z,CLOSED,False,32,2,2,https://github.com/martinwilli,addrblock: Allow limiting validation depth of issuer addrblock extensions,1,[],https://github.com/strongswan/strongswan/pull/860,https://github.com/martinwilli,1,https://github.com/strongswan/strongswan/pull/860,"RFC3779 requires to validate the addrblocks of issuer certificates strictly,
that is, they must contain the extension and the claimed addrblock, up to
the root CA.
When working with third party root CAs that do not have the extension,
this makes using the plugin impossible. So add a depth setting that limits
the number of issuer certificates to check bottom-up towards the root CA.
A depth value of 0 disables any issuer check, the default value of -1
checks all issuers in the chain, keeping the existing behavior.","RFC3779 requires to validate the addrblocks of issuer certificates strictly,
that is, they must contain the extension and the claimed addrblock, up to
the root CA.
When working with third party root CAs that do not have the extension,
this makes using the plugin impossible. So add a depth setting that limits
the number of issuer certificates to check bottom-up towards the root CA.
A depth value of 0 disables any issuer check, the default value of -1
checks all issuers in the chain, keeping the existing behavior.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,868,2022-01-31T14:24:21Z,2022-02-01T12:12:01Z,2022-02-01T12:12:43Z,CLOSED,False,1,0,1,https://github.com/martinwilli,proposal: Add ESN transforms to default ESP AEAD proposal,1,[],https://github.com/strongswan/strongswan/pull/868,https://github.com/martinwilli,1,https://github.com/strongswan/strongswan/pull/868,"The commit mentioned below adds an AES-GCM default proposal for ESP. That
proposal does not include any ESN or non-ESN transform to indicate if extended
sequence numbers are supported.
A standards-compliant peer will include one or more ESN support transforms,
and will be unable to select this proposal due to a proposal mismatch.
Fix the default CGM proposal by adding both ESN and NOESN transforms. Given
that ESN is supported in Linux for more than ten years now, it probably
makes sense to indicate ESN support for use with AES-GCM.
Fixes: c7bef95 (""proposal: Add AES-GCM to the ESP default AEAD proposal"")","The commit mentioned below adds an AES-GCM default proposal for ESP. That
proposal does not include any ESN or non-ESN transform to indicate if extended
sequence numbers are supported.
A standards-compliant peer will include one or more ESN support transforms,
and will be unable to select this proposal due to a proposal mismatch.
Fix the default CGM proposal by adding both ESN and NOESN transforms. Given
that ESN is supported in Linux for more than ten years now, it probably
makes sense to indicate ESN support for use with AES-GCM.
Fixes: c7bef95 (""proposal: Add AES-GCM to the ESP default AEAD proposal"")",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,868,2022-01-31T14:24:21Z,2022-02-01T12:12:01Z,2022-02-01T12:12:43Z,CLOSED,False,1,0,1,https://github.com/martinwilli,proposal: Add ESN transforms to default ESP AEAD proposal,1,[],https://github.com/strongswan/strongswan/pull/868,https://github.com/martinwilli,2,https://github.com/strongswan/strongswan/pull/868#issuecomment-1026529545,"The commit mentioned below adds an AES-GCM default proposal for ESP. That
proposal does not include any ESN or non-ESN transform to indicate if extended
sequence numbers are supported.
A standards-compliant peer will include one or more ESN support transforms,
and will be unable to select this proposal due to a proposal mismatch.
Fix the default CGM proposal by adding both ESN and NOESN transforms. Given
that ESN is supported in Linux for more than ten years now, it probably
makes sense to indicate ESN support for use with AES-GCM.
Fixes: c7bef95 (""proposal: Add AES-GCM to the ESP default AEAD proposal"")","Thanks, Tobias. Yes, makes sense, I've updated the commit accordingly.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,868,2022-01-31T14:24:21Z,2022-02-01T12:12:01Z,2022-02-01T12:12:43Z,CLOSED,False,1,0,1,https://github.com/martinwilli,proposal: Add ESN transforms to default ESP AEAD proposal,1,[],https://github.com/strongswan/strongswan/pull/868,https://github.com/apps/sonarcloud,3,https://github.com/strongswan/strongswan/pull/868#issuecomment-1026544142,"The commit mentioned below adds an AES-GCM default proposal for ESP. That
proposal does not include any ESN or non-ESN transform to indicate if extended
sequence numbers are supported.
A standards-compliant peer will include one or more ESN support transforms,
and will be unable to select this proposal due to a proposal mismatch.
Fix the default CGM proposal by adding both ESN and NOESN transforms. Given
that ESN is supported in Linux for more than ten years now, it probably
makes sense to indicate ESN support for use with AES-GCM.
Fixes: c7bef95 (""proposal: Add AES-GCM to the ESP default AEAD proposal"")","Kudos, SonarCloud Quality Gate passed!    
  0 Bugs
  0 Vulnerabilities
  0 Security Hotspots
  0 Code Smells
 No Coverage information
 0.0% Duplication",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,868,2022-01-31T14:24:21Z,2022-02-01T12:12:01Z,2022-02-01T12:12:43Z,CLOSED,False,1,0,1,https://github.com/martinwilli,proposal: Add ESN transforms to default ESP AEAD proposal,1,[],https://github.com/strongswan/strongswan/pull/868,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/868#issuecomment-1026778054,"The commit mentioned below adds an AES-GCM default proposal for ESP. That
proposal does not include any ESN or non-ESN transform to indicate if extended
sequence numbers are supported.
A standards-compliant peer will include one or more ESN support transforms,
and will be unable to select this proposal due to a proposal mismatch.
Fix the default CGM proposal by adding both ESN and NOESN transforms. Given
that ESN is supported in Linux for more than ten years now, it probably
makes sense to indicate ESN support for use with AES-GCM.
Fixes: c7bef95 (""proposal: Add AES-GCM to the ESP default AEAD proposal"")","Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,896,2022-02-14T15:43:44Z,2022-02-14T15:46:15Z,2022-02-15T14:25:06Z,CLOSED,False,85,1,2,https://github.com/amdrsantos,error-notify: 876 Handle missing alerts,1,[],https://github.com/strongswan/strongswan/pull/896,https://github.com/amdrsantos,1,https://github.com/strongswan/strongswan/pull/896,Handle missing alerts notifications in error-notify plugin,Handle missing alerts notifications in error-notify plugin,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,916,2022-02-21T13:45:44Z,2022-03-14T14:48:55Z,2022-03-14T14:48:59Z,CLOSED,False,0,12,1,https://github.com/rleon,Remove not-implemented XFRM_OFFLOAD_IPV6 flag,1,[],https://github.com/strongswan/strongswan/pull/916,https://github.com/rleon,1,https://github.com/strongswan/strongswan/pull/916,"The XFRM_OFFLOAD_IPV6 flag was never implemented in the kernel and no
plans to do so. Remove it from the strongswan code either.
Link: https://lore.kernel.org/netdev/8e526e4814f0c4da5a965567d3b8dce3a9ac2470.1644329331.git.leonro@nvidia.com/","The XFRM_OFFLOAD_IPV6 flag was never implemented in the kernel and no
plans to do so. Remove it from the strongswan code either.
Link: https://lore.kernel.org/netdev/8e526e4814f0c4da5a965567d3b8dce3a9ac2470.1644329331.git.leonro@nvidia.com/",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,916,2022-02-21T13:45:44Z,2022-03-14T14:48:55Z,2022-03-14T14:48:59Z,CLOSED,False,0,12,1,https://github.com/rleon,Remove not-implemented XFRM_OFFLOAD_IPV6 flag,1,[],https://github.com/strongswan/strongswan/pull/916,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/916#issuecomment-1066893424,"The XFRM_OFFLOAD_IPV6 flag was never implemented in the kernel and no
plans to do so. Remove it from the strongswan code either.
Link: https://lore.kernel.org/netdev/8e526e4814f0c4da5a965567d3b8dce3a9ac2470.1644329331.git.leonro@nvidia.com/","Thanks, applied to master.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,924,2022-02-24T11:36:55Z,2022-02-24T11:39:18Z,2022-02-24T12:07:17Z,CLOSED,False,6512,213,29,https://github.com/nayakmadan,5.9.4 mrg,175,[],https://github.com/strongswan/strongswan/pull/924,https://github.com/nayakmadan,1,https://github.com/strongswan/strongswan/pull/924,merge strong swan 5.9.4 to master,merge strong swan 5.9.4 to master,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1041,2022-05-07T13:01:13Z,2022-05-10T07:10:10Z,2022-05-10T07:10:11Z,CLOSED,False,2,0,1,https://github.com/leonshaw,ikev1: Remove outbound policy of rekeyed CHILD_SA,1,[],https://github.com/strongswan/strongswan/pull/1041,https://github.com/leonshaw,1,https://github.com/strongswan/strongswan/pull/1041,"Remove outbound policy of rekeyed CHILD_SA since only one policy is
valid. Otherwise, during update-SA job (when NAT mapping changed),
CHILD_SA are updated and installed one by one, leaving a window where
old SAs are being used. There are also circumstances where the new SA is
not processed last.","Remove outbound policy of rekeyed CHILD_SA since only one policy is
valid. Otherwise, during update-SA job (when NAT mapping changed),
CHILD_SA are updated and installed one by one, leaving a window where
old SAs are being used. There are also circumstances where the new SA is
not processed last.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1041,2022-05-07T13:01:13Z,2022-05-10T07:10:10Z,2022-05-10T07:10:11Z,CLOSED,False,2,0,1,https://github.com/leonshaw,ikev1: Remove outbound policy of rekeyed CHILD_SA,1,[],https://github.com/strongswan/strongswan/pull/1041,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/1041#issuecomment-1120809343,"Remove outbound policy of rekeyed CHILD_SA since only one policy is
valid. Otherwise, during update-SA job (when NAT mapping changed),
CHILD_SA are updated and installed one by one, leaving a window where
old SAs are being used. There are also circumstances where the new SA is
not processed last.","Thanks. Probably makes sense to remove the old outbound SA. We really only keep a rekeyed CHILD_SA around to process inbound packets in case the other peer decides to continue to use it until it expires.

There are also circumstances where the new SA is not processed last.

What does that mean exactly? And what are these circumstances?
Also, why are you still using IKEv1?",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1041,2022-05-07T13:01:13Z,2022-05-10T07:10:10Z,2022-05-10T07:10:11Z,CLOSED,False,2,0,1,https://github.com/leonshaw,ikev1: Remove outbound policy of rekeyed CHILD_SA,1,[],https://github.com/strongswan/strongswan/pull/1041,https://github.com/leonshaw,3,https://github.com/strongswan/strongswan/pull/1041#issuecomment-1120947608,"Remove outbound policy of rekeyed CHILD_SA since only one policy is
valid. Otherwise, during update-SA job (when NAT mapping changed),
CHILD_SA are updated and installed one by one, leaving a window where
old SAs are being used. There are also circumstances where the new SA is
not processed last.","What does that mean exactly? And what are these circumstances?

We've experienced one-way down session after reauth/rekey and remote IP change. After piping ip xfrm monitor policy to logs, I see the policy of the new CHILD_SA overwritten by the old one. Looks like the order of CHILD_SA went wrong. Haven't figured out the root cause yet, but removing the old outbound policy seems to solve my issue.
The logs:
May  7 10:00:38 SHAR1 charon: 05[KNL] NAT mappings of CHILD_SA ESP/0xc512d4a4/x.x.x.x changed to y.y.y.y[22235], queuing update job
May  7 10:00:38 SHAR1 charon: 05[IKE] remote endpoint changed from z.z.z.z[15781] to y.y.y.y[22235]
May  7 10:00:38 SHAR1 root: Updated src 0.0.0.0/0 dst 100.64.0.104/32
May  7 10:00:38 SHAR1 root:     dir out action block priority 383615
May  7 10:00:38 SHAR1 root: Updated src 100.64.0.104/32 dst 0.0.0.0/0
May  7 10:00:38 SHAR1 root:     dir in priority 383615
May  7 10:00:38 SHAR1 root:     tmpl src y.y.y.y dst x.x.x.x
May  7 10:00:38 SHAR1 root:         proto esp reqid 4 mode tunnel
May  7 10:00:38 SHAR1 root: Updated src 100.64.0.104/32 dst 0.0.0.0/0
May  7 10:00:38 SHAR1 root:     dir fwd priority 383615
May  7 10:00:38 SHAR1 root:     tmpl src y.y.y.y dst x.x.x.x
May  7 10:00:38 SHAR1 root:         proto esp reqid 4 mode tunnel
May  7 10:00:38 SHAR1 root: Updated src 0.0.0.0/0 dst 100.64.0.104/32
May  7 10:00:38 SHAR1 root:     dir out priority 383615
May  7 10:00:38 SHAR1 root:     tmpl src x.x.x.x dst y.y.y.y
May  7 10:00:38 SHAR1 root:         proto esp spi 0x02b582de reqid 4 mode tunnel        <=== the new SPI
May  7 10:00:38 SHAR1 root: Updated src 0.0.0.0/0 dst 100.64.0.104/32
May  7 10:00:38 SHAR1 root:     dir out action block priority 383615
May  7 10:00:38 SHAR1 root: Updated src 100.64.0.104/32 dst 0.0.0.0/0
May  7 10:00:38 SHAR1 root:     dir in priority 383615
May  7 10:00:38 SHAR1 root:     tmpl src y.y.y.y dst x.x.x.x
May  7 10:00:38 SHAR1 root:         proto esp reqid 4 mode tunnel
May  7 10:00:38 SHAR1 root: Updated src 100.64.0.104/32 dst 0.0.0.0/0
May  7 10:00:38 SHAR1 root:     dir fwd priority 383615
May  7 10:00:38 SHAR1 root:     tmpl src y.y.y.y dst x.x.x.x
May  7 10:00:38 SHAR1 root:         proto esp reqid 4 mode tunnel
May  7 10:00:38 SHAR1 root: Updated src 0.0.0.0/0 dst 100.64.0.104/32
May  7 10:00:38 SHAR1 root:     dir out priority 383615
May  7 10:00:38 SHAR1 root:     tmpl src x.x.x.x dst y.y.y.y
May  7 10:00:38 SHAR1 root:         proto esp spi 0x0444d365 reqid 4 mode tunnel        <=== the old one


Also, why are you still using IKEv1?

We want to support connecting by username/password from OS built-in VPN clients, without configuring certificates.",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1041,2022-05-07T13:01:13Z,2022-05-10T07:10:10Z,2022-05-10T07:10:11Z,CLOSED,False,2,0,1,https://github.com/leonshaw,ikev1: Remove outbound policy of rekeyed CHILD_SA,1,[],https://github.com/strongswan/strongswan/pull/1041,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/1041#issuecomment-1120996737,"Remove outbound policy of rekeyed CHILD_SA since only one policy is
valid. Otherwise, during update-SA job (when NAT mapping changed),
CHILD_SA are updated and installed one by one, leaving a window where
old SAs are being used. There are also circumstances where the new SA is
not processed last.","I see the policy of the new CHILD_SA overwritten by the old one. Looks like the order of CHILD_SA went wrong.

Interesting. Looks like that's caused by this: 
  
    
      strongswan/src/libcharon/processing/jobs/adopt_children_job.c
    
    
        Lines 215 to 219
      in
      7022fdc
    
  
  
    

        
          
           while (children->remove_last(children, 
        

        
          
           							 (void**)&child_sa) == SUCCESS) 
        

        
          
           { 
        

        
          
           	ike_sa->add_child_sa(ike_sa, child_sa); 
        

        
          
           } 
        
    
  


That should be remove_first() instead, so the older SAs are added first to the new IKE_SA. I've pushed a fix to the 1041-ikev1-remove-rekeyed branch, which also contains your change.

We want to support connecting by username/password from OS built-in VPN clients, without configuring certificates.

You mean with PSK? Please don't do that for roadwarrior connections. If the server certificate is issued by a trusted third-party CA (e.g. Let's Encrypt), you won't need to configure/install any certificates on the clients. And even if not, this shouldn't be a reason to continue to use a severely inferior protocol (especially for mobile clients, see e.g. MOBIKE).",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1041,2022-05-07T13:01:13Z,2022-05-10T07:10:10Z,2022-05-10T07:10:11Z,CLOSED,False,2,0,1,https://github.com/leonshaw,ikev1: Remove outbound policy of rekeyed CHILD_SA,1,[],https://github.com/strongswan/strongswan/pull/1041,https://github.com/leonshaw,5,https://github.com/strongswan/strongswan/pull/1041#issuecomment-1121063998,"Remove outbound policy of rekeyed CHILD_SA since only one policy is
valid. Otherwise, during update-SA job (when NAT mapping changed),
CHILD_SA are updated and installed one by one, leaving a window where
old SAs are being used. There are also circumstances where the new SA is
not processed last.","That should be remove_first() instead, so the older SAs are added first to the new IKE_SA. I've pushed a fix to the 1041-ikev1-remove-rekeyed branch, which also contains your change.

Great.

You mean with PSK? Please [don't do that for roadwarrior connections]

Yes, PSK. We will consider getting a cert from trusted CA. Thanks!",True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1044,2022-05-09T14:33:20Z,2022-05-09T14:48:56Z,2022-05-10T07:06:22Z,CLOSED,False,1,0,1,https://github.com/simondeziel,proposal: Add explicit break in AUTH_HMAC_MD5_96 case,1,[],https://github.com/strongswan/strongswan/pull/1044,https://github.com/simondeziel,1,https://github.com/strongswan/strongswan/pull/1044,,,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1044,2022-05-09T14:33:20Z,2022-05-09T14:48:56Z,2022-05-10T07:06:22Z,CLOSED,False,1,0,1,https://github.com/simondeziel,proposal: Add explicit break in AUTH_HMAC_MD5_96 case,1,[],https://github.com/strongswan/strongswan/pull/1044,https://github.com/tobiasbrunner,2,https://github.com/strongswan/strongswan/pull/1044#issuecomment-1121192497,,Isn't the comment enough to silence compilers?,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1044,2022-05-09T14:33:20Z,2022-05-09T14:48:56Z,2022-05-10T07:06:22Z,CLOSED,False,1,0,1,https://github.com/simondeziel,proposal: Add explicit break in AUTH_HMAC_MD5_96 case,1,[],https://github.com/strongswan/strongswan/pull/1044,https://github.com/simondeziel,3,https://github.com/strongswan/strongswan/pull/1044#issuecomment-1121193876,,Yes but all the other case have the explicit break so I figured it might as well be added. Mostly cosmetic I agree.,True,{}
strongswan/strongswan,https://github.com/strongswan/strongswan,1044,2022-05-09T14:33:20Z,2022-05-09T14:48:56Z,2022-05-10T07:06:22Z,CLOSED,False,1,0,1,https://github.com/simondeziel,proposal: Add explicit break in AUTH_HMAC_MD5_96 case,1,[],https://github.com/strongswan/strongswan/pull/1044,https://github.com/tobiasbrunner,4,https://github.com/strongswan/strongswan/pull/1044#issuecomment-1121203342,,"Ah, I see, makes sense. Since I was updating some stuff around there in the last commit of the 1026-kdf-plugin-check branch anyway, I've added it to that commit.",True,{'THUMBS_UP': ['https://github.com/simondeziel']}
