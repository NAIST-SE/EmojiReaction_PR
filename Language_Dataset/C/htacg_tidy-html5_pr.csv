htacg/tidy-html5,https://github.com/htacg/tidy-html5,376,2016-02-18T16:43:44Z,2016-02-27T12:25:22Z,2017-02-23T14:36:28Z,CLOSED,False,6,4,3,https://github.com/geoffmcl,Issue 329,14,[],https://github.com/htacg/tidy-html5/pull/376,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/376,"Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...","Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,376,2016-02-18T16:43:44Z,2016-02-27T12:25:22Z,2017-02-23T14:36:28Z,CLOSED,False,6,4,3,https://github.com/geoffmcl,Issue 329,14,[],https://github.com/htacg/tidy-html5/pull/376,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/376#issuecomment-185819508,"Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...","Warning: This could introduce some regressions!
It allows a newline char to be fetched from the stream. This does wonders to correctly rendered as <p>a <em>b></em></p> from -
<p>a<em>
b</em></p>

Note the newline has been replaced with a space, and moved to before the <em>, making it render correctly in browsers, but this newline can then also move some things down in output. This will mostly not effect the browser display, but becomes a pretty print problem of not trimming leading spacey chars...
I think some further work is needed to complete this fix before merging!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,376,2016-02-18T16:43:44Z,2016-02-27T12:25:22Z,2017-02-23T14:36:28Z,CLOSED,False,6,4,3,https://github.com/geoffmcl,Issue 329,14,[],https://github.com/htacg/tidy-html5/pull/376,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/376#issuecomment-188418727,"Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...","@balthisar would you be able to show me, help me, tidy up this branch? Get it back to just one fix... well maybe two separate items...
Is is sort of only one small fix, commit f3de815, even without the debug line and col change, which can be dropped...
As stated this presently has other pretty print changes that are not good, but getting it back to a clean state, single fix, could help me move forward with that...
Maybe by writing a REBASE.md readme, and/or rebasing it, or something... thanks...
In other cases I have seen you are a wizard at getting rid of the development crud ;=))
And then I have confused it with a different issue commit 3e93d41 which should be in master anyway. It only avoids a warning output that should be done separately. Maybe cherry picking, which I have never tried... again hope you can help...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,376,2016-02-18T16:43:44Z,2016-02-27T12:25:22Z,2017-02-23T14:36:28Z,CLOSED,False,6,4,3,https://github.com/geoffmcl,Issue 329,14,[],https://github.com/htacg/tidy-html5/pull/376,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/376#issuecomment-188533546,"Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...","Can do... do you want issue-329 as-is, right now to be rebased against master, or a particular commit in issue-329 rebased against master?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,376,2016-02-18T16:43:44Z,2016-02-27T12:25:22Z,2017-02-23T14:36:28Z,CLOSED,False,6,4,3,https://github.com/geoffmcl,Issue 329,14,[],https://github.com/htacg/tidy-html5/pull/376,https://github.com/balthisar,5,https://github.com/htacg/tidy-html5/pull/376#issuecomment-188629086,"Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...","@geoffmcl, this was weird and tricky, and I'm not really satisfied with the
results. To be pragmatic, it's working, but I completely lost your commit
history. On the other hand despite the fact that it took longer than simply
doing it manually would have, it was a learning experience, and I seldom
shy away from those!
When I tried a standard rebase there were a few other merges present, from
branches that no longer exist (apparently). Thus a true rebase failed for me.
This is what I tried (and should work for you in the future barring missing branches):

First create a new branch. We shouldn’t push a rebased branch back to a public
repository. Assuming we're already in issue_329:
$git checkout -b issue-329_rebase

Just to be sure where we diverged, get SHA of that point:
$git merge-base master issue-329_rebase
8c13d270ede8d47b74b2373d818b2841f799ee23

To flatten this branch, I should be able to go back to this point. I like to
do this, interactively:
$git rebase -i 8c13d2

When you editor opens (mine is nano) leave the first line alone, then change
the remaining pick's to s (meaning squash). You can read the other options.
Note that if you use reword don't reword now; the editor will open up again
for later rewording.
That failed, so I
git rebase --abort


The issue I found during the rebasing session was that there were SHA's present
that I couldn't find anywhere, presumably from deleted branches. And so git
wasn't able to replay these changes.
What I did, though, was
git reset --soft 8c13d2

Which kept the current changes, staged, but reset us to the diverging point.
Committed that and them pushed to Github.

There are still merge conflicts vs master, so let me see if this is easier now.
git merge master

Fix version.txt and push to 329_rebased_merged
I'll leave all three branches as they are. Given that this delete the commit
history, I suggest you pull issue-329, use the reset soft trick, yourself,
and if you're ready to put it into master, simply merge it. Feel free to delete
the _rebased branches; if you don't delete them I'll do it in a couple of days.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,376,2016-02-18T16:43:44Z,2016-02-27T12:25:22Z,2017-02-23T14:36:28Z,CLOSED,False,6,4,3,https://github.com/geoffmcl,Issue 329,14,[],https://github.com/htacg/tidy-html5/pull/376,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/376#issuecomment-189628100,"Issue #329 - Proposed merge of issue-329 to master after rebasing to master
Edit: Please excuse the messy commit record, while I learned more about rebasing...","@balthisar wow, thanks for the efforts... sorry it was so weird and tricky!
I think I understood some of what you did, and for sure the 329_rebased_merged branch now correctly reflects the two simple fixes involved.
But these two things are totally unrelated to each other. But now they are clear and nicely separated and I will redo them again. They are very small...
The parser.c, issue #314 I will add to master soon. It is a good fix, and presents no problems.
The 'lexer.c', issue #329 is only a partial fix, and needs more attention, and I will maybe create a new clean issue_329 branch for this, where I can work on it, especially now that we have our tests repo looking good. It is regressions that I fear most about this fix! Now we have the tools...
Meantime, am closing this pull request as too much of a mess, and will eventually delete the issue-329 branch... and I think you can delete the two branches you created... Again thanks for your efforts on this... I think I learned something...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,382,2016-03-16T20:00:09Z,2016-03-19T18:28:55Z,2016-03-19T18:28:56Z,MERGED,True,34,20,4,https://github.com/geoffmcl,Merge Issue 378 and 380,6,['Bug'],https://github.com/htacg/tidy-html5/pull/382,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/382,"Has enough testing been done on these two issues?
If no objections, I will merge this into master this weekend...","Has enough testing been done on these two issues?
If no objections, I will merge this into master this weekend...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/seaburg,1,https://github.com/htacg/tidy-html5/pull/384,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/384#issuecomment-198148904,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","@seaburg, thank you for your PR. We love those ;=))
While your commit 7d28b21 certainly addresses an issue of fixing the bad html of <<a href=""http://example.com"">example</a>>, you seem to have also removed an earlier fix Bug 762102?
Now I have tried to reconstruct that old 762102, now sf 486, created 2003-06-27, by Igor Katraev, but I have not been very successful... not sure exactly what the input was supposed to be... too many 'escapes'!
Your fix certainly seems to produce a better output in the case of a duplicated leading <... and I certainly think the current output of &lt;&lt;a is quite stupid... and needs fixing... but your fix is not yet tried...
And maybe you have good reason why this old fix code was removed... in which case your PR is good... and will be merged... after testing...
Please explain...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/seaburg,3,https://github.com/htacg/tidy-html5/pull/384#issuecomment-198648737,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","Bug 762102 is solution of special case of the problem (& after <).
After an unsuccessful attempt to parse a symbol in LEX_GT state we should try to parse current symbol in LEX_CONTENT state (instead of parse a next symbol in LEX_CONTENT)
Example:

Parse first < in LEX_CONTENT state. Put first < to lexer buffer and switch to LEX_GT state
Read from stream a next symbol (second <)
Unsuccessful parsing second < in LEX_GT state. Switch to LEX_CONTENT state.
Put second < to lexer buffer and parse next a symbol (a) in LEX_CONTENT state. (Bad. We should not put a current symbol (second <) into lexer buffer. We should try to parse a current symbol (second <) in LEX_CONTENT state)",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/smirn0v,4,https://github.com/htacg/tidy-html5/pull/384#issuecomment-201348541,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","Proposed solution seems to be more general fix for aforementioned https://sourceforge.net/p/tidy/bugs/486/
@geoffmcl do you have plans to merge it ?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/384#issuecomment-201915454,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","@seaburg, @smirn0v, yes I can see this is a more general change for every < + non-letter case, and still testing the full consequences of that... but so far things are looking good, but want to do a little more testing before merging to master...
Hopefully, if I get the time, in just a few more days...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/384#issuecomment-202177447,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","@seaburg, @smirn0v, ok after some more testing, I am re-thinking this...
Really, all we want here is to put back certain characters following the <, and back up the lexer, so that that particular character can be fetched again and assessed in the `LEX_CONTENT' state.
Previously we only put back an & 2nd character, so, in LEX_CONTENT, an entity can be tested...
And this issue specifically identifies also if the second character is another <, then this should be also put back, lexer backed up, and let content handle it... that much is agreed!
But should every next non-letter be put back in the stream to be re-assessed? The state is already being changed to LEX_CONTENT anyway... It is just a question whether this 2nd non-letter character after a < need be pushed back, and the lexer backed up each and every time...
So, at this point I am leaning towards a simpler fix of the current if (c == '&') being expanded to if ((c == '&') || (c == '<')).
Are there any other 2nd non-letter characters that need to be re-assessed?
Seek, and appreciate, more comment and testing on this...
If we can resolve this quickly, it can make it into 5.2, otherwise I will move the milestone to 5.3, since we hope to shortly issue a new 5.2 release... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/seaburg,7,https://github.com/htacg/tidy-html5/pull/384#issuecomment-202549359,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","So, at this point I am leaning towards a simpler fix of the current if (c == '&') being expanded to if ((c == '&') || (c == '<')).

No, this is not enough. In this case necessary if ((c == '&') || (c == '<') || TY_(IsWhite)(c)) (""<  ""(< and two spaces) parsed as ""<  "" (two spaces after <) instead ""< ""(one space after <) when mode != Preformatted && mode != IgnoreMarkup)
But a excess condition complicate the logic. Therefore it is better to put any non-letter character back to buffer?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/384#issuecomment-202950680,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","@seaburg yes, on tracing through it all again, and again, I am coming around to agreeing ;=))
It does seem better to put it back, back up the lexer, and let LEX_CONTENT deal with it, whatever it is, rather than trying to decide what extra logic need be added... can now not see any bad consequences with this...
Nearly out of time today, but should be able to get around to merging this tomorrow... thanks for hanging in there...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,384,2016-03-17T20:52:49Z,2016-03-30T12:08:40Z,2016-03-30T12:21:18Z,MERGED,True,2,7,1,https://github.com/seaburg,Fix skipping parsing character,1,['Bug'],https://github.com/htacg/tidy-html5/pull/384,https://github.com/geoffmcl,9,https://github.com/htacg/tidy-html5/pull/384#issuecomment-203404970,"Hi!
Example:
<<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>>
After an unsuccessful attempt to parse <<  parsing  continues with a character (instead of <)
Оutput:
&lt;&lt;a href=""https://github.com/htacg/tidy-html5""&gt;tidy-html5&lt;/a&gt;&gt;
Instead of:
&lt;<a href=""https://github.com/htacg/tidy-html5"">tidy-html5</a>&gt;","@seaburg now merged... thanks... add comments, and bumped version to 5.1.49...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,387,2016-03-23T07:13:20Z,2016-03-24T02:52:35Z,2016-03-24T03:20:11Z,MERGED,True,585,95,9,https://github.com/balthisar,Lang help enhance,8,[],https://github.com/htacg/tidy-html5/pull/387,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/387,"This actually encompasses two other branches in addition to this one:
localize_tuneup to fix a couple of potool issues.
locale_fix which fixes the issue wherein a two-character language code wouldn't be set.
And this one, lang_help_enhance that adds the current locale to the --lang help output.","This actually encompasses two other branches in addition to this one:
localize_tuneup to fix a couple of potool issues.
locale_fix which fixes the issue wherein a two-character language code wouldn't be set.
And this one, lang_help_enhance that adds the current locale to the --lang help output.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,388,2016-03-26T19:24:18Z,2016-03-27T17:54:54Z,2016-03-30T13:26:56Z,MERGED,True,3460,9,5,https://github.com/geoffmcl,Merge fr.po to master,8,[],https://github.com/htacg/tidy-html5/pull/388,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/388,So far testing of this is looking good... will merge to master shortly...,So far testing of this is looking good... will merge to master shortly...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,388,2016-03-26T19:24:18Z,2016-03-27T17:54:54Z,2016-03-30T13:26:56Z,MERGED,True,3460,9,5,https://github.com/geoffmcl,Merge fr.po to master,8,[],https://github.com/htacg/tidy-html5/pull/388,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/388#issuecomment-202114136,So far testing of this is looking good... will merge to master shortly...,After another round of french testing have merged this...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,398,2016-04-09T07:28:57Z,2016-04-16T18:14:22Z,2016-04-16T18:18:28Z,MERGED,True,20,5,4,https://github.com/rtack,allow zero LI in UL when html5. fix for #396,1,[],https://github.com/htacg/tidy-html5/pull/398,https://github.com/rtack,1,https://github.com/htacg/tidy-html5/pull/398,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,398,2016-04-09T07:28:57Z,2016-04-16T18:14:22Z,2016-04-16T18:18:28Z,MERGED,True,20,5,4,https://github.com/rtack,allow zero LI in UL when html5. fix for #396,1,[],https://github.com/htacg/tidy-html5/pull/398,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/398#issuecomment-210868109,,"Now merged to master, and version bumped to 5.3.1... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,410,2016-05-17T20:45:09Z,2016-06-18T16:53:53Z,2016-06-19T19:52:10Z,MERGED,True,6,1,1,https://github.com/gagern,Pair va_copy calls with va_end,1,['Bug'],https://github.com/htacg/tidy-html5/pull/410,https://github.com/gagern,1,https://github.com/htacg/tidy-html5/pull/410,"According to the C99 spec, each va_copy call should be matched by a va_end call to ensure proper cleanup.  Furthermore, since message filters might iterate over the list of arguments, we should hand a new copy to each filter, for the unlikely event that some user installed more than one filter.","According to the C99 spec, each va_copy call should be matched by a va_end call to ensure proper cleanup.  Furthermore, since message filters might iterate over the list of arguments, we should hand a new copy to each filter, for the unlikely event that some user installed more than one filter.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,410,2016-05-17T20:45:09Z,2016-06-18T16:53:53Z,2016-06-19T19:52:10Z,MERGED,True,6,1,1,https://github.com/gagern,Pair va_copy calls with va_end,1,['Bug'],https://github.com/htacg/tidy-html5/pull/410,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/410#issuecomment-219896013,"According to the C99 spec, each va_copy call should be matched by a va_end call to ensure proper cleanup.  Furthermore, since message filters might iterate over the list of arguments, we should hand a new copy to each filter, for the unlikely event that some user installed more than one filter.","@gagern in a quick look I agree 100% with this fix...
All agreed?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,410,2016-05-17T20:45:09Z,2016-06-18T16:53:53Z,2016-06-19T19:52:10Z,MERGED,True,6,1,1,https://github.com/gagern,Pair va_copy calls with va_end,1,['Bug'],https://github.com/htacg/tidy-html5/pull/410,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/410#issuecomment-226952757,"According to the C99 spec, each va_copy call should be matched by a va_end call to ensure proper cleanup.  Furthermore, since message filters might iterate over the list of arguments, we should hand a new copy to each filter, for the unlikely event that some user installed more than one filter.",@gagern oops nearly missed this good patch... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/gagern,1,https://github.com/htacg/tidy-html5/pull/411,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/411#issuecomment-220420679,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","@gagern sorry, but do not understand?
You say ""As discussed in #409""? What was discussed? Anything agreed? Did I miss something?
As to the PR, so far all I can see is a lot of find and replace... ok, to what gain exactly?
How will this improve tidy? What bug does it address? What is the desired features added? What do you find difficult to read in the code, where this will make it easier?, etc, etc, etc... ?
And just as an aside, please target such a large proposed code change in a branch, maybe issue-409, or something... but not the master branch... this has to be tested, agreed, discussed, understood, ... before committing it to the master branch...
But it looks like you have an idea, but can not yet quite see what it is ;=)) thanks, I think...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/gagern,3,https://github.com/htacg/tidy-html5/pull/411#issuecomment-220454478,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","In #409 I suggested what I did here, and your reply didn't indicate any pressing reason against this, so I went forward and coded the changes to make further discussion more specific.
This does not address an existing bug. It does not add a new feature. It is about maintainability. In my opinion, the change addresses the following issues:

Converting between external and internal types adds noise: additional function calls, additional variables, for what's essentially a no-op at the level of compiled code. 194 lines less code means 194 lines less to understand and maintain, so things become simpler.
Having different names for external and internal types can make you forget how they relate, while having the same names throughout helps users who know the public API to become contributors who enhance the internal API.
The type conversion macros did cast to the target type, without verifying the source type. Therefore, the compiler wouldn't issue a warning if you happened to pass in an inappropriate pointer into one of these conversion macros. (The conversion functions don't have this problem, but those were NEVER used.)
I'm no expert on this, but the fact that the opaque structures had some dummy definition might make them run afoul of some strict pointer aliasing rules. While I can't think of a piece of code where actual aliasing would occur, the compiler makes no guarantees so we might end up with undefined behavior. This would be a real bug, so perhaps there is a bug to be fixed after all.
Many other projects use pointers to incomplete structures in their public API. The fact that Tidy does something more elaborate made me (and may make others) wonder as to the reason for that added complexity, while apparently there is none.
Having equal types means that it's easier to promote a previously internal function to public API without having to change its signature.

I did write this in a separate branch. Namely the one from which I'm proposing the merge. Feel free to test it from there. Feel free to discuss it here. If you need help setting up an additional git remote, I'll be glad to provide details. If you want things in the htacg repository, you'll have to duplicate the branch there, since I can only issue pull requests for existing branches.
I don't want you to merge this branch just because you trust me. Test and discuss as you see fit, ask questions, suggest changes. When you are satisfied, and convinced that this adds value, then merge this pull request. Since the change touches large portions of the code, I'll likely have to rebase it before you can merge it. But I'd like to do so only once, when you think it's ready for merging. I won't track every master commit here.
Most of the changes are indeed search and replace. And search and delete in the case of the conversion macro invocations. So let me direct your attention to the less trivial aspects.

The opaque_type macro in tidyplatform.h is now without definition, leading to an incomplete declaration. You can have pointers of those, but no other access to the structures.
The corresponding definitions in lexer.h and tidy-int.h now add a definition to the structure already declared in tidy.h.
In forward.h the declarations for the internal structures TidyDocImpl, AttVal and Node are gone.
The conversion macros in tidy-int.h and conversion functions in tidylib.c are gone.

That's the actual core of the change, the rest is just a consequence of that.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/gagern,4,https://github.com/htacg/tidy-html5/pull/411#issuecomment-220531282,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","I found some useful information on the strict aliasing rules. According to that, neither the old nor the new style of handling opaque types should be a problem, as long as noone attempts to access the (dummy) contents of the opaque type (i.e. dereferences the pointer). The only possible problem might come from alignment constraints.
On the other hand, some of the TidyIterator handling is likely relying on undefined behavior because conversion between integers and pointers isn't officially supported. But my change here doesn't improve that aspect; that would be a different issue.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/411#issuecomment-223458352,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","@gagern, have downloaded, built, and done some testing of the result... which I versioned 5.3.1-exposed :=))
While this PR has the diffs, a total diff I am reviewing is here - http:/geoffair.org/tmp/gagern.diff
And then paused a few weeks, waiting for comments from others... ok, none at this point... just you and me...
To be right up front, I do not like the merge yet! There are some good points, but to me it fails to reach the 50% plus swaying point... really sorry...
Just to make sure we are on the same page, what I see is essentially what you have done is made a TidyDoc doc usable in external and internal code! That seems to defeat some of the idea of a tidy defined opaque type, but ok, I understand you are offering an alternative, that also works somewhat simularly?
And done the same with some other pointers, like the node *, attr *... and I think added another... I do understand the different approaches to the same idea...
Just to put it in, hopefully, simple terms, currently an external app is passed a TidyDoc tdoc pointer. The fact that it is tidy defined opaque pointer means it can not address the structure, and equally important can not be use to call an internal library functions, not in the API, without most compilers complaining... aim achieved in current code...
When that opaque pointer is passed into the library it is converted to a TidyDcoImp *, which all/most internal libery services/functions use... Same with several other pointers...
After a fundimental header definition change, this leads to a mostly cut-and-paste, almost cosmetic, difference, like -
-void TY_(AccessibilityChecks)( TidyDocImpl* doc );
+void TY_(AccessibilityChecks)( TidyDoc doc );

So if we agree that is the discussion here, then to address your 6 points...

Yes, if your calculations are correct we could save a few hundred instructions, which are just stack a = b;... But I do not think it really effects readbility to an exterienced programmer, or code maintainability overall... No.
It could help new programmers, in that it is a tiny tidy code learning step. But once known, understood, is no problem... Yes.
If a coder happened to pass in an inappropriate pointer into the API, they should suffer the consequence of that error, which will not always be flagged by every compiler/linker, what ever we do, so can not see how this improves that... No.
I too know of no bug this fixes... sort of change with what gained? but open...
How other projects do this is their business... the tidy creators constructed their own maco... why are we now choosing to abandon this? for simplicity? If it is wrong fix it, otherwise leave it alone... open
... easier to promote an internal service to the API? Yes, since with this change all internal library functions become very close to public, just not yet in tidy.h, ie not published... open...

Then you point us to the less trivial, fundimental changes in the important definitions

tidyplatform.h yes, you changed the macro to a simpler macro, and changed the comment more to your choice!
lexer.h and tidy-int.h yes, we understand, one change means more...
forward.h as above, consequential to the first change...
tidy-int.h more consequence to the above choice...

So the choice remains - should we stick with the current implemetation, or switch a few important definitions, and then accept 2. 3. 4.? A very difficult yes/no choice, at least for me... open...
So, in summary, while I agree there is some reduced verbosity and noise on pointers, I do not yet see a real gain at this time, and again wonder why we should change something that was put there by the tidy founders, that works...
So to the central question here - Make internal and external types equivalent - I would suggest no!
But will certainly wait for other comments... thanks for the effort, and all the work done here... that is very great! Shows a fundimental understanding of tidy code...
I hope you will apply the same enthusiam and efforts to fixing some other tidy issues...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/gagern,6,https://github.com/htacg/tidy-html5/pull/411#issuecomment-223802196,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","[…] which I versioned 5.3.1-exposed

I'd consider that a misnomer, since it's not exposing any more than before.

While this PR has the diffs, a total diff I am reviewing is here - http:/geoffair.org/tmp/gagern.diff

That diff appears to be equivalent to what we have here in the “Files changed” tab, apart from end-of-line convention and path separator character following Windows. So I don't see the point of the distinction.

Just to make sure we are on the same page, what I see is essentially what you have done is made a TidyDoc doc usable in external and internal code!

Yes.

That seems to defeat some of the idea of a tidy defined opaque type, but ok, I understand you are offering an alternative, that also works somewhat simularly?

The data structures are opaque to the outside and transparent to the inside, both before and after my change. Previous code achieves the distinction by type casts, my code by incomplete types.

Just to put it in, hopefully, simple terms […]. So if we agree that is the discussion here […]

I think we agree.




Converting between external and internal types adds noise: additional function calls, additional variables, for what's essentially a no-op at the level of compiled code. 194 lines less code means 194 lines less to understand and maintain, so things become simpler.

Yes, if your calculations are correct we could save a few hundred instructions, which are just stack a = b;... But I do not think it really effects readbility to an exterienced programmer, or code maintainability overall... No.

I agree that performance is not an issue at this stage. Perhaps even the assignment you mention could be optimized away by compilers.
Things might be a bit different if we use this simplification to remove redundant code in a future commit. For example, the public tidySaveFile is now (with the casts gone away) a simple forwarding to the private tidyDocSaveFile. We could just use the name of the former and the code of the latter to get rid of one function to maintain, and one function call on the call stack and performance bill. And there are several such forwarding functions. If you consider these savings relevant, I can add a commit to get rid of these as well.




Having different names for external and internal types can make you forget how they relate, while having the same names throughout helps users who know the public API to become contributors who enhance the internal API.

It could help new programmers, in that it is a tiny tidy code learning step. But once known, understood, is no problem... Yes.





The type conversion macros did cast to the target type, without verifying the source type. Therefore, the compiler wouldn't issue a warning if you happened to pass in an inappropriate pointer into one of these conversion macros. (The conversion functions don't have this problem, but those were NEVER used.)

If a coder happened to pass in an inappropriate pointer into the API, they should suffer the consequence of that error, which will not always be flagged by every compiler/linker, what ever we do, so can not see how this improves that... No.

It's not an external user passing code to our API, but more about internal code. You are of course right that using wrong pointers should lead to broken runtime behavior, and that properly tested code should catch those in time. But personally I like the fact that a C compiler can detect many trivial mistakes before I even start testing code. Perhaps a matter of taste. Although seeing the state of affairs with respect to the tidyhtml test suite, I'd consider any help we can get pointing out mistakes to be a valuable one.


Strict aliasing should not be an issue, as I wrote.




Many other projects use pointers to incomplete structures in their public API. The fact that Tidy does something more elaborate made me (and may make others) wonder as to the reason for that added complexity, while apparently there is none.

How other projects do this is their business... the tidy creators constructed their own maco... why are we now choosing to abandon this? for simplicity? If it is wrong fix it, otherwise leave it alone... open

For simplicity, yes. To lower the burden for potential contributors. With my strict aliasing concerns dispelled, the existing code is not wrong, just not very idiomatic either.




Having equal types means that it's easier to promote a previously internal function to public API without having to change its signature.

... easier to promote an internal service to the API? Yes, since with this change all internal library functions become very close to public, just not yet in tidy.h, ie not published... open...

Right. Which doesn't mean one should make functions public without due consideration, but after that consideration things become easier.



I […] wonder why we should change something that was put there by the tidy founders, that works...

I wonder why the founders wrote it that way in the first place. It seems as though they didn't like to declare structures without defining them. Even the dummy structures used for the current opaque types come with a bogus definition. Perhaps there were some compilers not capable of properly handling such constructs back when the project started? I don't know, but I'm rather sure that these concepts are well-supported these days, and have been for quite some time.

I hope you will apply the same enthusiam and efforts to fixing some other tidy issues...

I tend to address issues that affect me. I wanted to tidy HTML in Node, so I started the node-libtidy project. I see that it has some problems with how arguments are handled in error reporting, and would like to address those concerns by introducing a new opaque type. And I'd have preferred to do so my way, i.e. using an incomplete type in the public API. But I guess I'll rather stay with the style currently in use, and not wait on this issue here since I don't see this here getting accepted any time soon.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/411#issuecomment-224598980,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","@gagern I do not think there would be any objection to a new opaque type being added, using the style currently in use...
And just a small negative to the suggested change here, when using the MSVC Visual C/C++ IDE, this opacity is very clear in the IDE local variable display, when debugging...
Presently the the tidy opaque pointer and the impl pointer show up visually different, making the situation very clean -
- tdoc  0x00000000004e64f0 {_opaque=0x00000000 }    const _TidyDoc *
    _opaque 0x00000000  int
- impl  0x00000000004e64f0 {root={...} lexer=0x0000000000000000 config={...} ...}   _TidyDocImpl *
 +  root    {parent=0x0000000000000000 prev=0x0000000000000000 next=0x0000000000000000 ...} _Node
 +  lexer   0x0000000000000000 {lines=??? columns=??? waswhite=??? ...} _Lexer *
 + ... etc

That seems good, and very clear...
In the proposed 5.3.1-exposed version there are not two pointers, they are the same, so the IDE will show the doc in full,  all the time - in and outside the library code - like -
- doc   0x00000000004e64f0 {root={...} lexer=0x0000000000000000 config={...} ...}   _TidyDocImpl *
 +  root    {parent=0x0000000000000000 prev=0x0000000000000000 next=0x0000000000000000 ...} _Node
 +  lexer   0x0000000000000000 {lines=??? columns=??? waswhite=??? ...} _Lexer *
 + ... etc

So there is is a loss of a visual clue to the opacity of the first, versus the real impl structure pointer... making it look like you have access to say doc->config.value[0].v... of course the compiler will still belch an error if outside the library...
So of course the compile guards are still there. If you try to write code like this outside the library, the IDE/compiler will quickly stop you... but it does now visually imply you could...
Maybe not so important to coders that do not have or use a visual IDE to write code... but MSVC coders get to reply on it...
Anyway, I think you have correctly assessed the situation - without further support, reasons, ... - this merge will not be made, and I hope we can move on... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,411,2016-05-18T22:08:58Z,2016-07-20T15:40:38Z,2016-07-20T15:40:38Z,CLOSED,False,1590,1784,35,https://github.com/gagern,Make internal and external types equivalent,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/411,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/411#issuecomment-233989374,"As discussed in #409, these changes turn the separate set of opaque types into equally opaque pointers to incomplete structures (i.e. declarations without definitions), with the complete definition added internally. In other words, the public API still doesn't know about the internal structure of any of these objects, but the tidy code can transparently operate them without any need to convert back and forth. As a consequence, the code allows more robust type-checking, is shorter and easier to read. Currently this diff removes 194 lines. There probably is some room for further improvements, since many of the public API functions are now just aliases for some private function, so that in a later commit we could eliminate the private names and instead implement the public functions directly. But the diff is long enough as it is, so I'll not do that just now.
TidyIterator doesn't actually name a single structure.  Often it's not a pointer at all, but an integer instead. So that will still be dealt with as before.
The TidyOption definition is somewhat special as well, since it contains the const qualifier, and the name of the structure doesn't follow the common schema. For that reason it doesn't make use of the opaque_type macro.","In the absence of further supporting comments, am closing this for the reasons given... but thanks for the work involved... it certainly shows another way to handle transparent types...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/bdesham,1,https://github.com/htacg/tidy-html5/pull/418,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/bdesham,2,https://github.com/htacg/tidy-html5/pull/418#issuecomment-224470872,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","Actually, this can be used with the ""img"", ""script"", and ""video"" elements too. I'll modify my branch.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/418#issuecomment-224591908,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","@bdesham thanks for this PR... in a quick review it looks great... I will certainly merge this in a day or so, unless there are any objections from others... and/or additions...
While we see developer.mozilla.org as an important informational source, we would prefer W3C references, and I have started to search for those... please advise any pointers you may have...
As stated, this looks good, and will probably merge directly to master... it certainly does not seem to pose any stability threat... but will pause a bit... thanks again...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/bdesham,4,https://github.com/htacg/tidy-html5/pull/418#issuecomment-224608723,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","Great! Here are links to the W3C’s latest documentation on HTML5, all of which mention the “crossorigin” attribute:

img
link
script
video",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/418#issuecomment-224684439,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","@bdesham, thanks for the great W3C link list...
Maybe I found one more?

audio?

That is W3CAttrsFor_AUDIO in libtidy. Should this be added? Are there any others? thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/bdesham,6,https://github.com/htacg/tidy-html5/pull/418#issuecomment-224767035,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","I added support for audio. This time I checked the index and verified that ""crossorigin"" is only used on those five tags.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/418#issuecomment-224776640,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","@bdesham thanks for the quick PR addition, and the index link...
Just a matter of a day, or so... allow others to comment... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/bdesham,8,https://github.com/htacg/tidy-html5/pull/418#issuecomment-226855231,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes",Any objection to getting this merged? 😃,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,9,https://github.com/htacg/tidy-html5/pull/418#issuecomment-226951500,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","@bdesham yes, sorry for the delay...
As noted bumped version.txt to 5.3.2 2016.06.18 for this change...
Thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,10,https://github.com/htacg/tidy-html5/pull/418#issuecomment-229955820,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","@bdesham  oops, we let the TidyAttrId enumeration get out of order with the dictionary table, attribute_defs[] - UGH! I should have checked!!!
A big note to libtidy programmers
That includes me ;=))
So that we can easily address an attribute within the attribute_defs[] table, in attrs.c, using just its ID, rather than the usual searching, these MUST be strictly kept in the enum TidyAttrId order, in tidyenum.h - ie 1:1.
In the beginning this enumeration started life alphabetically, but that no longer applies. Then they were sort of added by groups... But that also makes a mess sometimes...
Now all new enumerations, and thus additions to the table should always just be added next, above the final N_TIDY_ATTRIBS entry, which must be last, in both the enumeration and table. This should avoid this problem in future...
And as a note to self, must check the API documentation to see if there is a clear message about this...
Have pushed a small fix, and bumped version to 5.3.5
This means we must watch out for versions 5.3.2, 5.3.3, and 5.3.4. These versions have this fault.
Anyway, we are back on track with this 5.3.5... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,11,https://github.com/htacg/tidy-html5/pull/418#issuecomment-234733769,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes","@bdesham can you look at #441 ... did we miss some cases, or is this different?
Thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,418,2016-06-08T02:27:07Z,2016-06-18T16:23:37Z,2016-07-23T23:41:59Z,MERGED,True,7,0,3,https://github.com/bdesham,"Add support for the HTML5 ""crossorigin"" attribute",3,['Feature Request'],https://github.com/htacg/tidy-html5/pull/418,https://github.com/geoffmcl,12,https://github.com/htacg/tidy-html5/pull/418#issuecomment-234747386,"This attribute can only be used on ""link"" elements.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#Attributes",@bdesham ok it seems we missed the integrity attribute... #441... hope you can help... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/AdamMajer,1,https://github.com/htacg/tidy-html5/pull/420,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/420#issuecomment-226363071,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","@AdamMajer thank you for the PR... always welcome...
Yes, this was a tough decision for our first release in about 7+ years... see #223 and others... you will note the alternative of installing in like <tidy/tidy.h> was also considered, and rejected, at that time... could be reconsidered for future releases...
So while there will remains a possible conflict with other generic header names, if installed in /usr/include or /usr/local/include, it seems a benign cmake option... It defaults to OFF, and only users with the knowledge, and should know what they are doing, would set it ON...
But after 7+ years I doubt there would be much current software out there using those old headers... but maybe...
Other major packages, that are likely to have links with libtidy, like say PHP, and hopefully others... already use the re-named headers from using later tidy sources, maybe due to no distribution updates, to build their own distribution libraries and/or other binaries... so these are aware...
All known windows apps that use lib tidy DLL never depend on a globally installed Tidy DLL! It does not exist, yet! Most have updated from source, so this is not needed in windows... And that is good because the #warning ""ABC"" gcc macro used is not MSVC compatible... it is an error!
Will leave it for a little time, for others to comment, but looks ok to me, at this time...
If there is a use case, why not? Comments welcome...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/AdamMajer,3,https://github.com/htacg/tidy-html5/pull/420#issuecomment-226406138,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","On Wed, 15 Jun 2016 18:08:10 -0700
Geoff McLane notifications@github.com wrote:

So while there will remains a possible conflict with other generic
header names, if installed in /usr/include or /usr/local/include,
it seems a benign cmake option... It defaults to OFF, and only
users with the knowledge, and should know what they are doing, would
set it ON...
But after 7+ years I doubt there would be much current software
out there using those old headers... but maybe...

I think apache2 tidy mod broke along with others that now build
with old tidy. Maybe because I've installed headers
under /usr/include/tidy not /usr/include? Would have to check on that.

All known windows apps that use lib tidy DLL never depend on a
globally installed Tidy DLL! It does not exist, yet! Most have
updated from source, so this is not needed in windows... And that
is good because the #warning ""ABC"" gcc macro used is not MSVC
compatible... it is an error!

That pragma could be commented with a #ifdef GNUC for example. And
have special one for MSVC so it doesn't break :) I think MSC_VER
should work.
When I still ship programs for Windows, I always use DLLs, although
locally installed ones (in program's install directory, not some
global directory or as SxS). For Linux distributions, globally
installed libtidy is very important for various reasons, but security
updates is most important. This is why static linking for Linux distros
is generally not allowed.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/420#issuecomment-226953983,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","@AdamMajer yes, absolutely agree, even after 7+ years, there may be cases where compatible (old) headers may be required...

I think apache2 tidy mod broke along with others ...

If you are referring to - http://mod-tidy.sourceforge.net/ - yes, I note src/mod_tidy.c (2006) uses ""buffio.h"". But in the source I built in linux, and windows, had embedded an old tidy source, with the old headers, so does not use any installed tidy-dev headers... and in fact effectively uses tidy in a static like form, ie not using a shared library...
And also note that site has not been updated in quite a while, and still points people to our old historic dormant SF site... must add it to my TODO list to try to contact them...
But, like I say, there could be others, thus support this PR...
And yes there are various macros that can be used as a substitute for the gcc #warning ""ABC""... But in Windows people who build tidy from source would have no need to enable this option... Seldom, probably never would a windows user actually 'install' tidy, at least not to the meaningless Program Files folders in tidy's case...
In development, I do install tidy into a <some-root>\3rdParty, so I can test the FindTidy.cmake module correctly finds things, but of course all the test sources there already use the modified headers, so would never need these compatibility headers... and if by accident was compiling some old third party package, that still used these headers, prefer the compile error, so it can be fixed... rather than a soft warning message... so what is there is ok...
Will merge this shortly...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/danielhjames,5,https://github.com/htacg/tidy-html5/pull/420#issuecomment-227669613,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","Arch Linux is working around this with symlinks: https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/tidy&id=482ab3f78fcd66828214eafeb6b2d66c11306e1c
I've had a request to do the same for the Debian package of version 5.2.0, does that seem like a reasonable short-term solution?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/AdamMajer,6,https://github.com/htacg/tidy-html5/pull/420#issuecomment-227976234,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","On 06/18/2016 07:19 PM, Geoff McLane wrote:

linux, and windows, had embedded an old tidy source, with the old
headers, so does not use any installed tidy-dev headers... and in fact
effectively uses tidy in a static like form, ie not using a shared
library...

Just to be clear 100%,
NONE of Linux distributions would use static linking (maybe except
the one that rebuilds everything anyway :)
ALL Linux distributions use dynamic linking.
It's been like that since the beginning. There are major problems with
things like Go (programming language) that does not support dynamic linking.

Adam",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/oerdnj,7,https://github.com/htacg/tidy-html5/pull/420#issuecomment-228978485,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","But after 7+ years I doubt there would be much current software out there using those old headers

Out of this list (using codesearch.debian.org to lookup usages of buffio.h and filtered whether they build-depend on libtidy-dev):
libhtml-tidy-perl
psi-plus
edbrowse
xqilla
php5
kde-baseapps
elementtidy
libextractor
kdewebdev
abiword
pumpa
prayer
libopkele
php7.0

only edbrowse also has tidybuffio.h referenced in the source code.
So you broke 14 of packages that build-depend on libtidy-dev in Debian. That's 50%. Arch Linux already have compatibility symlinks in place. And Debian will have to follow just to avoid the headache of patching all those packages.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/AdamMajer,8,https://github.com/htacg/tidy-html5/pull/420#issuecomment-228985542,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","Updated header patch so that it will not cause errors on non-gnu (and non-clang) compilers, which basically means MSVC and niche compilers.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,420,2016-06-13T10:03:02Z,2016-07-10T22:23:01Z,2016-07-10T22:28:57Z,MERGED,True,18,0,3,https://github.com/AdamMajer,Add compatibility headers,1,"['Feature Request', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/420,https://github.com/geoffmcl,9,https://github.com/htacg/tidy-html5/pull/420#issuecomment-231614742,"In older versions of tidy, these headers were defined. Now, they are
renamed to tidybuffio.h and tidyplatform.h. This may be more of a
consistent naming scheme, but it breaks current software.
Re-add these headers and add compile time warning when such a header
is used.","While not totally happy! with this, do see a certain use case...
Anyway, now merged... thanks @AdamMajer
And version bumped to 5.3.6...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,421,2016-06-13T10:05:16Z,2016-07-20T15:44:18Z,2016-08-02T09:40:38Z,CLOSED,False,21,21,1,https://github.com/AdamMajer,Use dynamic linking as default and use standard define names,1,"['Build/Install', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/421,https://github.com/AdamMajer,1,https://github.com/htacg/tidy-html5/pull/421,"Most software distrubtions do not ship static libraries at all and
by policy, they refuse to ship software that is statically linked.
Hence default linking should be dynamic, with optional static for
niche cases.
Furthermore, standard %cmake macro in RPM package generation
relies on BUILD_STATIC_LIBS and BUILD_SHARED_LIBS - extra S. So change
the build package for least pain.
Reworked the build script to allow same name for static and dynamic
library. If this is a problem on some platforms, then that should be
done on case-by-case basis for those platforms. I think maybe only
Windows could affected here?","Most software distrubtions do not ship static libraries at all and
by policy, they refuse to ship software that is statically linked.
Hence default linking should be dynamic, with optional static for
niche cases.
Furthermore, standard %cmake macro in RPM package generation
relies on BUILD_STATIC_LIBS and BUILD_SHARED_LIBS - extra S. So change
the build package for least pain.
Reworked the build script to allow same name for static and dynamic
library. If this is a problem on some platforms, then that should be
done on case-by-case basis for those platforms. I think maybe only
Windows could affected here?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,421,2016-06-13T10:05:16Z,2016-07-20T15:44:18Z,2016-08-02T09:40:38Z,CLOSED,False,21,21,1,https://github.com/AdamMajer,Use dynamic linking as default and use standard define names,1,"['Build/Install', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/421,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/421#issuecomment-226950877,"Most software distrubtions do not ship static libraries at all and
by policy, they refuse to ship software that is statically linked.
Hence default linking should be dynamic, with optional static for
niche cases.
Furthermore, standard %cmake macro in RPM package generation
relies on BUILD_STATIC_LIBS and BUILD_SHARED_LIBS - extra S. So change
the build package for least pain.
Reworked the build script to allow same name for static and dynamic
library. If this is a problem on some platforms, then that should be
done on case-by-case basis for those platforms. I think maybe only
Windows could affected here?","@AdamMajer thank you for the PR... but it covers separate things... not usually good for a PR...
shared/static
We have been over this topic a few times - see #326, and others - We have provided an option to link the console app with the shared library... Case solved?
I really do not know what is a niche case ;=)) but all cases are important for us... we want to run in every distribution imaginable... including my arm7 raspbian rpi machine...
BTW: Over the last few days I participated in the update of the Tidy2.dll, used by Notepad++ (NPP), to provide a HTML Tidy functions - ie pretty print a documents - Now, in generating that special DLL (shared) plugin library, using the latest HTML Tidy source, I chose to link Tidy2.dll with the static lib tidys. Why? Because then, in the install of NPP I can add a one file plugin, rather that a two file set Tidy2.dll, and tidy.dll, which in this case required a special WIN32 UNICODE build, so was already not the standard build...
Yes, the use of a shared library, ie the install 2 DLLS idea, gains by the fact that a user could update tidy.dll to the latest... But does he know how to do that? Where does he get such a DLL from? To install in an app specific location, in this case C:\Program Files (x86)\Notepad++\plugins, more or less a private location... requires admin priviledges! And that would miss the update of C:\Program Files (x86)\Notepad++\plugins\doc\Tidy2\quickref.html, update cfg files, ... all of which is handled well in unix... I know...
And this tidy.dll is installed in a private place, so can never actually be used as a shared library... ie never be used by any other processes in the system... that seems a waste, bloat, etc... When you link with a static library, only the modules your app uses are written into your exe, so, in a way, it can be less bloat... at least never more...
So yes, I guess there are niche out there where the static library is important... agreed, maybe much, much less in unix/mac/..., which have an easy, in place, documented, understood, shared library install, that all processes have access to... even deals with dependancies... great!
But tidy provides an option for this. It defaults to OFF, because that is best for windows users. But that can be set ON by unix users, much more savvy to command line switches... Best of both worlds? Shared culture...
cmake macros
Yes, we are aware of the cmake macros - with extra S - and chose to not use those... deliberately, not by accident... see no reason to change that yet...
But as I have gained more cmake experience, since that decision, and do now wonder why not?... was that the best choice? so this is for sure open... comments please...
library names
There are several ways do deal with the clash in library names in windows... CURL chose to rename the DLL library libcurl_imp.lib... others, like you suggest here, a big -static.lib suffix... etc, etc...
We chose tidys.lib... which will be libtidys.a in unix... simple and elegent...
If this is really important to you, then maybe we can consider an option to set the static library name... I would certainly prefer the same naming convention be applied across unix/mac/windows... but could be persuaded otherwise... but it could be externally configurable... user selectable...
That would mess with some API documentation, ie the names used, and make the task of a cmake FindTidy.cmake script that much harder, and quite messy, but, just maybe... not sure... open
As usual, will leave some time for others to comment... but at this time, for the reasons given, and the previous discussions and decisions, suggest rejecting this PR as it presently stands...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,421,2016-06-13T10:05:16Z,2016-07-20T15:44:18Z,2016-08-02T09:40:38Z,CLOSED,False,21,21,1,https://github.com/AdamMajer,Use dynamic linking as default and use standard define names,1,"['Build/Install', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/421,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/421#issuecomment-233990526,"Most software distrubtions do not ship static libraries at all and
by policy, they refuse to ship software that is statically linked.
Hence default linking should be dynamic, with optional static for
niche cases.
Furthermore, standard %cmake macro in RPM package generation
relies on BUILD_STATIC_LIBS and BUILD_SHARED_LIBS - extra S. So change
the build package for least pain.
Reworked the build script to allow same name for static and dynamic
library. If this is a problem on some platforms, then that should be
done on case-by-case basis for those platforms. I think maybe only
Windows could affected here?",In the absence of further supporting comments am closing this for now... for the reasons given...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,421,2016-06-13T10:05:16Z,2016-07-20T15:44:18Z,2016-08-02T09:40:38Z,CLOSED,False,21,21,1,https://github.com/AdamMajer,Use dynamic linking as default and use standard define names,1,"['Build/Install', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/421,https://github.com/AdamMajer,4,https://github.com/htacg/tidy-html5/pull/421#issuecomment-236855208,"Most software distrubtions do not ship static libraries at all and
by policy, they refuse to ship software that is statically linked.
Hence default linking should be dynamic, with optional static for
niche cases.
Furthermore, standard %cmake macro in RPM package generation
relies on BUILD_STATIC_LIBS and BUILD_SHARED_LIBS - extra S. So change
the build package for least pain.
Reworked the build script to allow same name for static and dynamic
library. If this is a problem on some platforms, then that should be
done on case-by-case basis for those platforms. I think maybe only
Windows could affected here?","I guess I missed your comments. My comments are that it is policy of every distribution (maybe except Gentoo that rebuilds everything anyway, not sure) that static libraries are not only discouraged and shared libraries must be provided and preferred (Debian), they are not to be distributed at all (SUSE). There are some exceptions with some software, but none of these apply here.
The reason has nothing to do with bloat of one executable. The reasons are,

security
bloat of archive
security

And yes, security. If there is a bug that needs to be fixed in tidy, this only has to be done in one place not in 10 packages that use tidy.
Your comment about total executable size doesn't hold water when it comes to distributions. If I have 5 or 10 programs that link with tidy API, the size of one library is somewhat smaller than 5 or 10 copies of it inside executables. Furthermore, if these programs run concurrently, the size in the memory space is smaller too with dynamic linking (code segments are common to all programs).
Even when I wrote software for Windows, I always distributed DLLs for another reason - it's easier to track down bugs when your executable only contains your code, not 3rd party. It is much easier to follow executable code path in case of crash.
There are many more reasons for using dynamic libraries, but policies for all software distributions are quite clear that dynamic linking is to be used. The only case for static linking that I can think of you've brought out already - smaller total executable for one-of libraries.
As to cmake, using standard macros allows code to be build in a standard way, which is always nice for maintainers.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,422,2016-06-14T13:52:13Z,2016-06-30T16:32:55Z,2016-06-30T16:38:00Z,MERGED,True,1,1,1,https://github.com/sesom42,prevent buffer overflow in debug output,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/422,https://github.com/sesom42,1,https://github.com/htacg/tidy-html5/pull/422,This simple modification prevents a buffer overflow in debug output. Some debug output are larger than the defined M_MAX_SPRTF. vsnprintf checks the spezified size.,This simple modification prevents a buffer overflow in debug output. Some debug output are larger than the defined M_MAX_SPRTF. vsnprintf checks the spezified size.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,422,2016-06-14T13:52:13Z,2016-06-30T16:32:55Z,2016-06-30T16:38:00Z,MERGED,True,1,1,1,https://github.com/sesom42,prevent buffer overflow in debug output,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/422,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/422#issuecomment-226951673,This simple modification prevents a buffer overflow in debug output. Some debug output are larger than the defined M_MAX_SPRTF. vsnprintf checks the spezified size.,"@sesom42 thanks for this PR...
It looks good, but need to experiment a little...
Will get back soonest... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,422,2016-06-14T13:52:13Z,2016-06-30T16:32:55Z,2016-06-30T16:38:00Z,MERGED,True,1,1,1,https://github.com/sesom42,prevent buffer overflow in debug output,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/422,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/422#issuecomment-229715177,This simple modification prevents a buffer overflow in debug output. Some debug output are larger than the defined M_MAX_SPRTF. vsnprintf checks the spezified size.,"@sesom42 ok, have now tested it for a while... it certainly seems a better option to output truncated debug data, than potentially overrunning the fixed buffer... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,423,2016-06-24T21:48:00Z,2016-07-11T13:17:42Z,2016-07-12T04:28:36Z,MERGED,True,1,1,1,https://github.com/pinotree,Set HAS_FUTIME=0 on any GNU libc platform,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/423,https://github.com/pinotree,1,https://github.com/htacg/tidy-html5/pull/423,"GNU libc does not have <sys/utime.h> but <utime.h>, so set HAS_FUTIME=0 for it; fixes build on non-Linux platforms using GNU libc.","GNU libc does not have <sys/utime.h> but <utime.h>, so set HAS_FUTIME=0 for it; fixes build on non-Linux platforms using GNU libc.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,423,2016-06-24T21:48:00Z,2016-07-11T13:17:42Z,2016-07-12T04:28:36Z,MERGED,True,1,1,1,https://github.com/pinotree,Set HAS_FUTIME=0 on any GNU libc platform,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/423,https://github.com/danielhjames,2,https://github.com/htacg/tidy-html5/pull/423#issuecomment-228706187,"GNU libc does not have <sys/utime.h> but <utime.h>, so set HAS_FUTIME=0 for it; fixes build on non-Linux platforms using GNU libc.",Hi @geoffmcl could you review this please? Seems like the best solution for fixing https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=828632 Thanks! Daniel,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,423,2016-06-24T21:48:00Z,2016-07-11T13:17:42Z,2016-07-12T04:28:36Z,MERGED,True,1,1,1,https://github.com/pinotree,Set HAS_FUTIME=0 on any GNU libc platform,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/423,https://github.com/AdamMajer,3,https://github.com/htacg/tidy-html5/pull/423#issuecomment-229587333,"GNU libc does not have <sys/utime.h> but <utime.h>, so set HAS_FUTIME=0 for it; fixes build on non-Linux platforms using GNU libc.","There should be a better way of doing this than what is currently done.
https://cmake.org/Wiki/CMake:How_To_Write_Platform_Checks",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,423,2016-06-24T21:48:00Z,2016-07-11T13:17:42Z,2016-07-12T04:28:36Z,MERGED,True,1,1,1,https://github.com/pinotree,Set HAS_FUTIME=0 on any GNU libc platform,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/423,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/423#issuecomment-229726579,"GNU libc does not have <sys/utime.h> but <utime.h>, so set HAS_FUTIME=0 for it; fixes build on non-Linux platforms using GNU libc.","@pinotree, @danielhjames thanks for this PR... adding defined(__GLIBC__) to an already long list looks ok...
Is there a better way to do this, as @AdamMajer suggests?
Well, yes in CMake terms there is, using say -
in CMakeLists.txt
check_include_file(utime.h     HAVE_UTIME_H)
check_include_file(sys/utime.h  HAVE_SYS_UTIME_H)
if (HAVE_SYS_UTIME_H)
add_definitions( -DHAS_FUTIME=1 )
else ()
add_definitions( -DHAS_FUTIME=0 )
endif ()
then maybe in a config.h.in
#cmakedefine HAVE_UTIME_H 1
#cmakedefine HAVE_SYS_UTIME_H 1

This could be add to the tidy cmake build, and thus define HAS_FUTIME before the header tidyplatform.h is used... that would hide any problem in the current tidyplatform.h, but...
But that does not help users of the binary tidy-dev install, while this PR addition does address that user's needs more... Of course they too could also add a HAS_FUTIME define in their build system, and again step over the problem...
Will leave a little more time for any others to comment, but at this stage this looks fine to be merged... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,423,2016-06-24T21:48:00Z,2016-07-11T13:17:42Z,2016-07-12T04:28:36Z,MERGED,True,1,1,1,https://github.com/pinotree,Set HAS_FUTIME=0 on any GNU libc platform,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/423,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/423#issuecomment-231731252,"GNU libc does not have <sys/utime.h> but <utime.h>, so set HAS_FUTIME=0 for it; fixes build on non-Linux platforms using GNU libc.",Now merged to master... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,424,2016-06-27T14:18:18Z,2016-07-11T13:20:27Z,2016-07-11T13:20:55Z,MERGED,True,14,46,2,https://github.com/danielhjames,Update LICENSE.md,2,['Build/Install'],https://github.com/htacg/tidy-html5/pull/424,https://github.com/danielhjames,1,https://github.com/htacg/tidy-html5/pull/424,Change date to match LICENSE.txt,Change date to match LICENSE.txt,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,424,2016-06-27T14:18:18Z,2016-07-11T13:20:27Z,2016-07-11T13:20:55Z,MERGED,True,14,46,2,https://github.com/danielhjames,Update LICENSE.md,2,['Build/Install'],https://github.com/htacg/tidy-html5/pull/424,https://github.com/danielhjames,2,https://github.com/htacg/tidy-html5/pull/424#issuecomment-228776344,Change date to match LICENSE.txt,Files src/access* and parts of src/message.c are Copyright University of Toronto so you may wish to update this file for that also.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,424,2016-06-27T14:18:18Z,2016-07-11T13:20:27Z,2016-07-11T13:20:55Z,MERGED,True,14,46,2,https://github.com/danielhjames,Update LICENSE.md,2,['Build/Install'],https://github.com/htacg/tidy-html5/pull/424,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/424#issuecomment-229736762,Change date to match LICENSE.txt,"@danielhjames thanks for this date update in LICENSE.md...
I am not sure why we have both a LICENCE.md and LICENCE.txt in the first place... but certainly they should agree...
IIRC it was something about when the documentation build was in the source... doxygen, or some other tool, preferred one and not the other, and a copy was made... but documentation has been moved to its own repo, so may be one, or the other, should be deletd here... or something...
Anyway, this looks good to upddate the md file...
And yes, it looks like this could/should be done in many places... just about every src file I looked at needs the year changed... but maybe that can be a separate issue... it should maybe be a once a year event... or maybe even the year should be removed from every src?
I also saw a query somewhere about the Copyright University of Toronto notice, but really do not know the answer to that... maybe some others can step in and comment on that...
As usual will leave a little time for others, but looks no problem... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,424,2016-06-27T14:18:18Z,2016-07-11T13:20:27Z,2016-07-11T13:20:55Z,MERGED,True,14,46,2,https://github.com/danielhjames,Update LICENSE.md,2,['Build/Install'],https://github.com/htacg/tidy-html5/pull/424,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/424#issuecomment-229881201,Change date to match LICENSE.txt,"Copyright is hard. Also, it's now 2016.
The license is the original W3C license (I believe), and any contributions always continue to belong to the original contributor (barring a contributor agreement that Tidy has never had and that I would not support, e.g., an agreement assigning copyright to the W3C or HTACG).
Therefore the University of Toronto copyright doesn't poison anything per se; they contributed to an open source project under that open source license, and that open source licence still applies to us today. Not even we can change the licence, as all of the existing copyright holders (i.e., everyone who has ever contributed to Tidy) would have a valid legal complaint against us. (Well, we could change the license for future code contributions, but that's not really useful, and would only apply to future code).
Given that the license applies to the original W3C code, I would suggest we leave the original W3C copyright intact, including the 2003 date (unless there have been official W3C contributions since 2003, and of course, HTACG is a W3C community group).
However there have been innumerable contributors since then. Many we know about, many have been lost in the mists of time. I would add another line to the licence file giving us something like this in the end:
Copyright (c) 1998-2003 World Wide Web Consortium (Massachusetts Institute of Technology, European Research Consortium for Informatics and Mathematics, Keio University). All Rights Reserved.
Additional contributions (c) 2003-2016 University of Toronto, @geoffmcl, HTACG, and others.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,424,2016-06-27T14:18:18Z,2016-07-11T13:20:27Z,2016-07-11T13:20:55Z,MERGED,True,14,46,2,https://github.com/danielhjames,Update LICENSE.md,2,['Build/Install'],https://github.com/htacg/tidy-html5/pull/424,https://github.com/danielhjames,5,https://github.com/htacg/tidy-html5/pull/424#issuecomment-229898695,Change date to match LICENSE.txt,"Hi @geoffmcl, hi @balthisar,
I agree with Jim, as the HTACG is affiliated with the W3C there is no need to transfer any copyrights, and this transfer is not even possible in some countries. Therefore I see no need to put an 'end date' on the original copyright any earlier than 2016.
The reason that this issue came up was because in Debian, they noticed that there are copyrighted files (specifically the University of Toronto files) which are not mentioned in the main copyright notice.
Looking at the src/access* files, these say:
Copyright University of Toronto
Portions (c) 1998-2006 (W3C) MIT, ERCIM, Keio University
It seems that W3C were involved until at least 2006, and http://tidy.sourceforge.net/ shows changes up to 2008. As these files say 'Modifications by : Terry Teague (TRT)' I think that dates them to between 2001 when Terry became a co-maintainer, and 2005, when Terry died. So it looks like the University of Toronto work was concurrent with the W3C work, but that this university was not part of the W3C.
Anyway, the two license files have some other discrepancies, like the Markdown version not crediting Dave Raggett, so I'll merge the two files and update the pull request.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,424,2016-06-27T14:18:18Z,2016-07-11T13:20:27Z,2016-07-11T13:20:55Z,MERGED,True,14,46,2,https://github.com/danielhjames,Update LICENSE.md,2,['Build/Install'],https://github.com/htacg/tidy-html5/pull/424,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/424#issuecomment-231731899,Change date to match LICENSE.txt,Now merged to master... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,425,2016-06-28T07:47:23Z,2016-06-28T08:43:15Z,2016-06-28T08:43:15Z,CLOSED,False,22,21,16,https://github.com/oerdnj,Restore balance in the force and the old header names,2,[],https://github.com/htacg/tidy-html5/pull/425,https://github.com/oerdnj,1,https://github.com/htacg/tidy-html5/pull/425,"Hi, renaming header files broke a lot of software that needs to be manually fixed and it was not necessary. Simply moving the header files into subdirectory will do the same job and it's much simpler to fix at the compile time because instead of editing sources you just add -I/usr/include/tidy (which is what f.e. Debian was doing already).
I understand that you wanted to fix the generic header names in the /usr/include, but the solution chosen is not optimal.
The PR contains two commits - one that restores the old header names and the second that setups compatibility symlinks with the new names. I don't think the second patch is needed and I think it should not be applied, but if there are any apps that are already using the new names, it might break those.
Please apply this as soon as possible before more harm is done to software relying on tidy library.","Hi, renaming header files broke a lot of software that needs to be manually fixed and it was not necessary. Simply moving the header files into subdirectory will do the same job and it's much simpler to fix at the compile time because instead of editing sources you just add -I/usr/include/tidy (which is what f.e. Debian was doing already).
I understand that you wanted to fix the generic header names in the /usr/include, but the solution chosen is not optimal.
The PR contains two commits - one that restores the old header names and the second that setups compatibility symlinks with the new names. I don't think the second patch is needed and I think it should not be applied, but if there are any apps that are already using the new names, it might break those.
Please apply this as soon as possible before more harm is done to software relying on tidy library.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,425,2016-06-28T07:47:23Z,2016-06-28T08:43:15Z,2016-06-28T08:43:15Z,CLOSED,False,22,21,16,https://github.com/oerdnj,Restore balance in the force and the old header names,2,[],https://github.com/htacg/tidy-html5/pull/425,https://github.com/oerdnj,2,https://github.com/htacg/tidy-html5/pull/425#issuecomment-228988468,"Hi, renaming header files broke a lot of software that needs to be manually fixed and it was not necessary. Simply moving the header files into subdirectory will do the same job and it's much simpler to fix at the compile time because instead of editing sources you just add -I/usr/include/tidy (which is what f.e. Debian was doing already).
I understand that you wanted to fix the generic header names in the /usr/include, but the solution chosen is not optimal.
The PR contains two commits - one that restores the old header names and the second that setups compatibility symlinks with the new names. I don't think the second patch is needed and I think it should not be applied, but if there are any apps that are already using the new names, it might break those.
Please apply this as soon as possible before more harm is done to software relying on tidy library.",I am fine with #420 as an alternative solution. Closing for now.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,426,2016-06-29T14:12:42Z,2016-07-01T14:47:11Z,2016-07-01T14:47:11Z,CLOSED,False,5,3,1,https://github.com/nijel,Avoid crash in tidyCleanAndRepair if document was not loaded,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/426,https://github.com/nijel,1,https://github.com/htacg/tidy-html5/pull/426,"This can happen after attempt to load nonexisting file.
This used to work fine with old libtidy, but no longer works with html-tidy, so I think it is a regression. I'm not sure the fix is really correct, but it seems to do what is expected for me.","This can happen after attempt to load nonexisting file.
This used to work fine with old libtidy, but no longer works with html-tidy, so I think it is a regression. I'm not sure the fix is really correct, but it seems to do what is expected for me.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,426,2016-06-29T14:12:42Z,2016-07-01T14:47:11Z,2016-07-01T14:47:11Z,CLOSED,False,5,3,1,https://github.com/nijel,Avoid crash in tidyCleanAndRepair if document was not loaded,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/426,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/426#issuecomment-229746117,"This can happen after attempt to load nonexisting file.
This used to work fine with old libtidy, but no longer works with html-tidy, so I think it is a regression. I'm not sure the fix is really correct, but it seems to do what is expected for me.","@nijel ok, what I understand is that your app calls tidyDocCleanAndRepair(doc) even when no document loaded! And this causes a crash in the current library, what version?, while it was harmless in an older library version, what version?
Well, that would certainly be a regression bug. Thanks...
But looking at your patch, I do not think this is quite right, even though as you say it works for you...
We need to look at why we need an extra guard for CheckHTML5 and CheckHTMLTagsAttribsVersions... These calls should be harmless, like earlier List2BQ, and several others... with or without a loaded doc...
I think it might be the test if (doc->lexer->versionEmitted & VERS_HTML5) maybe the crash. Maybe there is no lexer if no document loaded...
It will take me a little time to setup a test for this... be back soonest... but look forward to any further information you can supply... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,426,2016-06-29T14:12:42Z,2016-07-01T14:47:11Z,2016-07-01T14:47:11Z,CLOSED,False,5,3,1,https://github.com/nijel,Avoid crash in tidyCleanAndRepair if document was not loaded,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/426,https://github.com/nijel,3,https://github.com/htacg/tidy-html5/pull/426#issuecomment-229862926,"This can happen after attempt to load nonexisting file.
This used to work fine with old libtidy, but no longer works with html-tidy, so I think it is a regression. I'm not sure the fix is really correct, but it seems to do what is expected for me.","It's uTidyLib which is doing this call even when file loading fails. It worked just fine with original Tidy and now leads to segfault.
To reproduce just invoke tidyParseFile on nonexisting file and then tidyCleanAndRepair.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,426,2016-06-29T14:12:42Z,2016-07-01T14:47:11Z,2016-07-01T14:47:11Z,CLOSED,False,5,3,1,https://github.com/nijel,Avoid crash in tidyCleanAndRepair if document was not loaded,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/426,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/426#issuecomment-229966210,"This can happen after attempt to load nonexisting file.
This used to work fine with old libtidy, but no longer works with html-tidy, so I think it is a regression. I'm not sure the fix is really correct, but it seems to do what is expected for me.","@nijel discussion and patch move to #429 ...
Meantime closing this as not being the correct patch... but thanks for pointing us to it...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,427,2016-06-29T16:15:01Z,2016-07-11T13:12:52Z,2016-07-11T13:16:23Z,MERGED,True,177,174,1,https://github.com/vargenau,Improve French translation.,1,"['Infrastructure', 'Feature Request']",https://github.com/htacg/tidy-html5/pull/427,https://github.com/vargenau,1,https://github.com/htacg/tidy-html5/pull/427,"Hi,
I improved some French translations and added others.","Hi,
I improved some French translations and added others.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,427,2016-06-29T16:15:01Z,2016-07-11T13:12:52Z,2016-07-11T13:16:23Z,MERGED,True,177,174,1,https://github.com/vargenau,Improve French translation.,1,"['Infrastructure', 'Feature Request']",https://github.com/htacg/tidy-html5/pull/427,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/427#issuecomment-229749091,"Hi,
I improved some French translations and added others.","@vargenau, wow, thank you for this...
I had used Google translate, I am Austrlian, and my french wife is always telling me it produces rubbish a lot of the time... I did go back and alter a few obvious things, but I am still learning french...
This will be merged shortly... but if you get the time to add a few more, then they can be added to this PR without problems... thanks again...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,427,2016-06-29T16:15:01Z,2016-07-11T13:12:52Z,2016-07-11T13:16:23Z,MERGED,True,177,174,1,https://github.com/vargenau,Improve French translation.,1,"['Infrastructure', 'Feature Request']",https://github.com/htacg/tidy-html5/pull/427,https://github.com/vargenau,3,https://github.com/htacg/tidy-html5/pull/427#issuecomment-229952554,"Hi,
I improved some French translations and added others.","Thank you for merging.
Yes, some translations did not mean anything.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,427,2016-06-29T16:15:01Z,2016-07-11T13:12:52Z,2016-07-11T13:16:23Z,MERGED,True,177,174,1,https://github.com/vargenau,Improve French translation.,1,"['Infrastructure', 'Feature Request']",https://github.com/htacg/tidy-html5/pull/427,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/427#issuecomment-231730749,"Hi,
I improved some French translations and added others.","@vargenau thanks for this much improved french translation... now merged to master...
Maybe @balthisar could run the header gen, and bump the version number at that time... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,433,2016-07-07T14:38:53Z,2016-07-11T13:22:08Z,2016-07-11T13:27:34Z,MERGED,True,12,3,1,https://github.com/nijel,Avoid crash in tidyCleanAndRepair if document was not loaded,1,"['Feature Request', 'Bug']",https://github.com/htacg/tidy-html5/pull/433,https://github.com/nijel,1,https://github.com/htacg/tidy-html5/pull/433,"These services can only be used when there is a document loaded, ie a
lexer created.  But really should not be calling a Clean and Repair
service with no doc!
See #429","These services can only be used when there is a document loaded, ie a
lexer created.  But really should not be calling a Clean and Repair
service with no doc!
See #429",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,433,2016-07-07T14:38:53Z,2016-07-11T13:22:08Z,2016-07-11T13:27:34Z,MERGED,True,12,3,1,https://github.com/nijel,Avoid crash in tidyCleanAndRepair if document was not loaded,1,"['Feature Request', 'Bug']",https://github.com/htacg/tidy-html5/pull/433,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/433#issuecomment-231732466,"These services can only be used when there is a document loaded, ie a
lexer created.  But really should not be calling a Clean and Repair
service with no doc!
See #429","@nijel wow, thanks for making this easy... now merged to master...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,438,2016-07-11T16:25:58Z,2016-07-20T15:12:45Z,2016-07-20T15:13:01Z,CLOSED,False,1,1,1,https://github.com/GaborWnuk,Update CMakeLists.txt,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/438,https://github.com/GaborWnuk,1,https://github.com/htacg/tidy-html5/pull/438,Fixed location of README.txt (removed) to README.md.,Fixed location of README.txt (removed) to README.md.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,438,2016-07-11T16:25:58Z,2016-07-20T15:12:45Z,2016-07-20T15:13:01Z,CLOSED,False,1,1,1,https://github.com/GaborWnuk,Update CMakeLists.txt,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/438,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/438#issuecomment-233980385,Fixed location of README.txt (removed) to README.md.,"@GaborWnuk thanks for this PR, but it seems I noted, and fixed this around the same day as you, with commit b26271e
Please rebase your fork to master... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,442,2016-07-24T14:29:05Z,2016-07-29T00:55:54Z,2016-07-29T01:14:29Z,MERGED,True,6,0,3,https://github.com/bdesham,"Add support for the ""integrity"" attribute",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/442,https://github.com/bdesham,1,https://github.com/htacg/tidy-html5/pull/442,"This attribute may be used on ""link"" and ""script"" elements. See the subresource integrity spec.
This fixes #441.","This attribute may be used on ""link"" and ""script"" elements. See the subresource integrity spec.
This fixes #441.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,442,2016-07-24T14:29:05Z,2016-07-29T00:55:54Z,2016-07-29T01:14:29Z,MERGED,True,6,0,3,https://github.com/bdesham,"Add support for the ""integrity"" attribute",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/442,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/442#issuecomment-235046597,"This attribute may be used on ""link"" and ""script"" elements. See the subresource integrity spec.
This fixes #441.","@bdesham in a quick view, this looks good... thanks...
Just did the free MS Windows 7 to 10 upgrade, and still exploring what I may have lost, or gained ;=)) aside from some very obvious color changes...
Will get to this tidy merge soonest... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,442,2016-07-24T14:29:05Z,2016-07-29T00:55:54Z,2016-07-29T01:14:29Z,MERGED,True,6,0,3,https://github.com/bdesham,"Add support for the ""integrity"" attribute",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/442,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/442#issuecomment-236069822,"This attribute may be used on ""link"" and ""script"" elements. See the subresource integrity spec.
This fixes #441.","@bdesham, sorry some small fights with Windows 10... but seems ok... living with it...
Have merged this... bumped to 5.3.8 for this support... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,445,2016-08-02T09:19:58Z,2016-08-04T13:50:58Z,2016-08-04T13:58:51Z,MERGED,True,11,11,1,https://github.com/AdamMajer,Fix static buffer overrrun (issue #443),1,['Bug'],https://github.com/htacg/tidy-html5/pull/445,https://github.com/AdamMajer,1,https://github.com/htacg/tidy-html5/pull/445,"result[6] is a fixed array of size 6, but in the process
of copying data into it, we clobber the last allocated byte.
Simplify some of the code by not calling redundant functions.","result[6] is a fixed array of size 6, but in the process
of copying data into it, we clobber the last allocated byte.
Simplify some of the code by not calling redundant functions.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,445,2016-08-02T09:19:58Z,2016-08-04T13:50:58Z,2016-08-04T13:58:51Z,MERGED,True,11,11,1,https://github.com/AdamMajer,Fix static buffer overrrun (issue #443),1,['Bug'],https://github.com/htacg/tidy-html5/pull/445,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/445#issuecomment-236946815,"result[6] is a fixed array of size 6, but in the process
of copying data into it, we clobber the last allocated byte.
Simplify some of the code by not calling redundant functions.","@AdamMajer thanks for the PR... eyeballing the code it certainly seems to avoid an overrun...
And the code feels cleaner, but wonder why result[i] = tolower( search[i] );... it seems it would already be in lower case from search = TY_(tmbstrtolower)(search);... but quite minor...
I have yet to test #443... but it certainly looks like this addresses that...
Will merge shortly, unless others see a problem... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,445,2016-08-02T09:19:58Z,2016-08-04T13:50:58Z,2016-08-04T13:58:51Z,MERGED,True,11,11,1,https://github.com/AdamMajer,Fix static buffer overrrun (issue #443),1,['Bug'],https://github.com/htacg/tidy-html5/pull/445,https://github.com/AdamMajer,3,https://github.com/htacg/tidy-html5/pull/445#issuecomment-237537491,"result[6] is a fixed array of size 6, but in the process
of copying data into it, we clobber the last allocated byte.
Simplify some of the code by not calling redundant functions.",maybe it is redundant but search can get overwritten by a lookup table and I didn't check if that lookup table is always lower case. I only removed crazy things like strncpy 1 char. :),True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,445,2016-08-02T09:19:58Z,2016-08-04T13:50:58Z,2016-08-04T13:58:51Z,MERGED,True,11,11,1,https://github.com/AdamMajer,Fix static buffer overrrun (issue #443),1,['Bug'],https://github.com/htacg/tidy-html5/pull/445,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/445#issuecomment-237561055,"result[6] is a fixed array of size 6, but in the process
of copying data into it, we clobber the last allocated byte.
Simplify some of the code by not calling redundant functions.","@AdamMajer well, it appear the table is in lowercase, but this protects against table changes...
Have now had a chance to add -fsanitize=address, test, and can repeat the bug, which seems fixed with your patch...
Accordingly, have merged it, and bumped to version 5.3.9 (2016.08.04)... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,446,2016-08-02T16:20:22Z,2016-09-11T15:06:32Z,2016-09-11T15:36:08Z,MERGED,True,3,3,2,https://github.com/geoffmcl,Merge PR for Issue #428,3,[],https://github.com/htacg/tidy-html5/pull/446,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/446,This seems a good change... any comments before it is merged... thanks...,This seems a good change... any comments before it is merged... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,450,2016-08-23T08:44:49Z,2016-09-11T13:46:38Z,2016-09-11T13:46:38Z,MERGED,True,6,0,3,https://github.com/marcoscaceres,Add support for link 'as' attribute (closes #449),1,[],https://github.com/htacg/tidy-html5/pull/450,https://github.com/marcoscaceres,1,https://github.com/htacg/tidy-html5/pull/450,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,450,2016-08-23T08:44:49Z,2016-09-11T13:46:38Z,2016-09-11T13:46:38Z,MERGED,True,6,0,3,https://github.com/marcoscaceres,Add support for link 'as' attribute (closes #449),1,[],https://github.com/htacg/tidy-html5/pull/450,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/450#issuecomment-242787752,,See discussion on #449 - thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,1,https://github.com/htacg/tidy-html5/pull/458,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,2,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251313318,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Actually, ignore this question:

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

It started working. No idea 👍",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,3,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251351610,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Ok, this is a rough version... let me know what you think about the general direction.
I still need to look up how to emit the warnings properly.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,4,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251625608,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@garvankeeley, stupid noob question:... but debugging in lldb seems to only show me assembler :( I've tried to get this to work with XCode, so I can debug a little bit more sanely... I can get xcode to build (as an external source), but getting it to debug would be awesome.
Any suggestions or will it just be a world of hurt?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,5,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251625892,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","(I'm ok to just use lldb, but debugging assembler is no fun)",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/garvankeeley,6,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251678155,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","For debugging, i suspect the build does not have -g -O0 (symbols on, zero optimization), each file needs to be compiled with those flags (dash-g is the critical one).
Found a good explanation (1st answer): https://stackoverflow.com/questions/36968721/lldb-not-showing-source-code
Edit: this project uses cmake so something like: config --debug, or cmake -DCMAKE_BUILD_TYPE=Debug should work. Ping me if neither of those seem to apply here.
Or, here is how to change the cmake config for yourself so that it only builds debug http://unix.stackexchange.com/a/188167",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251988422,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@marcoscaceres, @garvankeeley, sorry been busy on other things for a few days...
Have now had a chance to review the changes so far, and in general most looks good, but there are a few issues to be addressed...

memory allocation
C89 vs C99(11?)

The tidy library uses very indirect Memory Allocation. This allow libtidy users the ability to provide their own memory allocation and failure mechanisms.
This is important when libtidy is embedded in bigger application like say perl, php, etc, where that application may want to deal with memory allocation/reallocation failure more calmly than just aborting...
So this means there will be no malloc/calloc/free in the library, except in the default alllocators... Please change to using this mechanism... or maybe use a stack buffer, if we are sure of the maximum needed...
While it maybe nice to apply the C99(11?) compiler standard to libtidy, this has not yet been done. I think you can add the switch -std=c89 to gcc to set it back to that mode, and I think you will find the your lexer.c code will not compile.
In Windows I think any compiler before msvc140 (2015) will also bark at this... and in fact issue very difficult to understand error messages, like when using msvc100 -
  ..\..\src\lexer.c(1692): error C2143: syntax error : missing ';' before 'type' [F:\Projects\tidy-html5-charset\build\win64\tidy-static.vcxproj]
...
  ..\..\src\lexer.c(1694): error C2065: 'node' : undeclared identifier [F:\Projects\tidy-html5-charset\build\win64\tidy-static.vcxproj]
... and many more like this, ending with -
    42 Warning(s)
    79 Error(s)

In pure K&R like C, which libtidy is, you can not intermingle variable declarations, and code. All variable declaration must come before any code. And that includes for loops, like for (Node *node = head->content;......
And while inline comments, ie //, are allowed (I think) in c89 we do not use them in libtidy yet. Again I think you can add -ansi -pedantic? to gcc, to show these as an error. And am sure there is a similar switch for msvc in windows...
So while it may be time we discussed these changes for libtidy, that should be a separate discussion, and certainly not part of this PR. We do have a small CODESTYLE document, which certainly needs to be filled out more, but it is a start... As stated there, look at the current library coded in general for more...
And while this is still a WIP, which I understand, we have to eventually remove the printf statements, replacing them with the usual libtidy warning/error message system... which perhaps includes enumerating a new value, and adding the english output message, which can then be later translated...
Finally, when this is all sorted out, I would like it to be a clean PR, with very little internal history of change, but can help with that clean up when we get to that...
So as stated, really thanks for the effort and time. In general it all looks good. I may get some time this weekend to help further in this great effort... and hope you will keep going... you seem close... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251992577,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?",See issue #456 for initial discussion...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,9,https://github.com/htacg/tidy-html5/pull/458#issuecomment-251994730,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Sorry for the extra noise, but just experimenting with the newly offered review process...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/garvankeeley,10,https://github.com/htacg/tidy-html5/pull/458#issuecomment-252011100,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","thanks @geoffmcl!
@marcoscaceres feel free to ping me (in or off thread) if you want me to look at anything, mainly have to make sure compiler is setup to catch the requirements (easy to miss all the needed changes otherwise).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,11,https://github.com/htacg/tidy-html5/pull/458#issuecomment-252020667,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@marcoscaceres, continued on with my reviewing a little, using a C99 compatible compiler, and found a memory bug in these lines 1768-1770.
You are adding an attribute and value with TY_(AddAttribute)( doc, node, ""content"", ""text/html; charset="");, but the value buffer now has the length ""text/html; charset="" + 1, and you can not do a following TY_(tmbstrcat)(contentAttr->value, enc);...
That would lead to a buffer overrun, which my msvc140 flags, when this buffer is later freed, at program exit...
You have to give the full content value to AddAttribute, so you need to prepare that full value, before that call... but I like your correct switch on HTMLVersion document type...
And in this case, where you need a buffer to prepare the full value string, and the earlier case where you use calloc/free, why not use a Tidy Buffer, where you have functions like tidyBufAppend which will automatically grow the buffer to contain the final full string...
Anyway running out of time today to continue with more now... So far have only tried samples with no current meta charset... Do want to build up some samples where there is already such a meta, and check the code that attempts to change this if not the correct type... be back soonest...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,12,https://github.com/htacg/tidy-html5/pull/458#issuecomment-252029566,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@marcoscaceres,  in just a few more minutes, after declaring TidyBuffer buf; right at the top of the TidyMetaCharset(doc) function, c89 style ;=)), tried out some buffer code per the following patch -
diff --git a/src/lexer.c b/src/lexer.c
index 0a48e53..48005b4 100644
--- a/src/lexer.c
+++ b/src/lexer.c
@@ -1682,6 +1682,7 @@ Node *TY_(FindBody)( TidyDocImpl* doc )
  */
 Bool TY_(TidyMetaCharset)(TidyDocImpl* doc)
 {
+    TidyBuffer buf;
     Node *head = TY_(FindHEAD)( doc );
     ctmbstr enc = TY_(GetEncodingNameFromTidyId)(cfg(doc, TidyOutCharEncoding));
     Bool charsetFound = no;
@@ -1765,9 +1766,11 @@ Bool TY_(TidyMetaCharset)(TidyDocImpl* doc)
             break;
         default:
             TY_(AddAttribute)( doc, node, ""http-equiv"", ""content-type"");
-            TY_(AddAttribute)( doc, node, ""content"", ""text/html; charset="");
-            AttVal *contentAttr = TY_(AttrGetById)(node, TidyAttr_CONTENT);
-            TY_(tmbstrcat)(contentAttr->value, enc);
+            tidyBufInit(&buf);
+            tidyBufAppend(&buf, ""text/html; charset="", 19);
+            tidyBufAppend(&buf, enc, TY_(tmbstrlen)(enc));
+            TY_(AddAttribute)( doc, node, ""content"", buf.bp);
+            tidyBufFree(&buf);
     }
     TY_(InsertNodeAtStart)( head, node );
     return yes;
And it seems to work fine... hope this helps...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,13,https://github.com/htacg/tidy-html5/pull/458#issuecomment-252134346,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","This is great feedback, @geoffmcl! Thanks so much. I'll try to tackle everything over the weekend.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,14,https://github.com/htacg/tidy-html5/pull/458#issuecomment-254119871,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Just quick update: started making the requested changes.

Hoisted variable declarations to top of function.
now using TidyBuffer.
move the using c89 style comments - will hopefully not need those in the end. Just for my own sanity right now.
removed strcmp(), using tmbstrcmp

I have a question about this code, on line 1757... it is ok to do that dereference and cast?:
            if(TY_(tmbsubstr)(lcontent, (ctmbstr) &charsetString)){
                printf(""WARN ABOUT CLASH: %s \n"", contentAttr->value);
            }",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,15,https://github.com/htacg/tidy-html5/pull/458#issuecomment-254120080,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@geoffmcl also, when I target c89, I get a linker error (but seems unrelated to my code). The compiler flags a bunch of issues in the existing code base about incorrect comments (again, not my code) and strings longer than 512bytes (also not my code).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,16,https://github.com/htacg/tidy-html5/pull/458#issuecomment-254120188,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?",I'll hopefully get rid of the few remaining printfs soon too :),True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,17,https://github.com/htacg/tidy-html5/pull/458#issuecomment-256056737,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?",(doing a c++ course ATM... hoping to come back at this soon - excited to finish it),True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,18,https://github.com/htacg/tidy-html5/pull/458#issuecomment-279171363,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@marcoscaceres how are things going with this?
No problem about the timing, but since we are headed for a 5.4 release soon, moving this out to 5.5...
Can I help with anything more... thanks...",True,{'THUMBS_UP': ['https://github.com/Deledrius']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,19,https://github.com/htacg/tidy-html5/pull/458#issuecomment-279889537,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@geoffmcl, this was getting close... just needed to replace the printf() with actual tidy warnings. I was unsure how to add test cases for this also. I could use some help with both of those things.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/balthisar,20,https://github.com/htacg/tidy-html5/pull/458#issuecomment-279995512,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@marcoscaceres,
Check out the new README/MESSAGES.md in master to get started on where to add the strings.
Also take a look at message.c/h to try to use an existing output routine, which will ensure the message gets output to whereever CLI and LibTidy users expect them. If none of the existing output functions, e.g. TY_(ReportNotice) are suitable, feel free to write your own using one of the existing ones as a base. Don't be tempted to use message or messageNode or any of the non-namespaced functions directly.
You'll probably want to use TY_(ReportWarning).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,21,https://github.com/htacg/tidy-html5/pull/458#issuecomment-300089330,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Sadly, I have to concede defeat on this one :( I'm not finding enough time to work on it.
Someone could take it over, as it was nearly there.",True,{'THUMBS_DOWN': ['https://github.com/Deledrius']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,22,https://github.com/htacg/tidy-html5/pull/458#issuecomment-300873679,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@marcoscaceres sorry to hear you are not finding the time to work on this ;=((
I have pulled your fork, did a rebase to current 5.5.20 tidy next, actually only 3 conflicts, easily solved... and now have a meta-charset branch that is 163 commits ahead of your fork origin... I could push these if I had commit rights on your repo...
BUT we probably need to close, remove the current PR #458, since this is a merge to master. Since then we have moved all development to the next branch and any/all pull requests now need to be against that next default branch...
I have built a tidy version 5.5.20.I458 using your now updated fork code...
Now I have started checking your new service, TY_(TidyMetaCharset)(doc), using the 4 scenarios listed there -

if there is no meta charset, it adds one.
if there is a meta charset, it moves it to the top if HEAD.
if it doesn't match the output encoding, warn about that.
if there are duplicates, discard them.

In my first test html5 file in_458-1.html, which has no meta, your 5.5.20.I458 correctly adds <meta charset=""utf-8"">, unless I add --add-meta-charset no, so it seems 1. is ok for HTML5++...
My next test file is HTML 4.01 in_458-2.html, which has no meta, your 5.5.20.I458 correctly adds <meta content=""text/html; charset=utf-8"">, unless I add --add-meta-charset no, so it seems 1. is ok for HTML4--...
I have still to construct test files to test 2..4 combinations ... but this is a good start...
But of course I note that service still has 2 printf, and tidy messages need to be added to replace these...
    if(TY_(tmbsubstr)(lcontent, (ctmbstr) &charsetString))
        printf(""WARN ABOUT CLASH: %s \n"", contentAttr->value);
and
    if(httpEquivAttr && charsetAttr)
        printf(""WARN ABOUT HTTP EQUIV AND CHARSET ATTR! \n"");

And then fully test all the other combinations...
Now yes, I could cut all these changes into current tidy next, or probably a branch, and add the two missing messages, and do some more testing, but then your name on the commits would be lost...
Of course I would attribute the changes to you in the commit comments, but that is not the same thing... I would like to try to preserve your commits...
But, as stated, I would need commit access to your repo to do that, and to repeat, the first thing is to delete/close this current PR since that is against master... A new PR against next is needed...
So this seems so close to completion... what should we do next? how can I help? what little time can you offer? thanks...
PS: As I am suggesting we must close this, maybe we can move the discussion back to the open #456, which follows on from the closed #361...",True,{'HOORAY': ['https://github.com/Deledrius']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/balthisar,23,https://github.com/htacg/tidy-html5/pull/458#issuecomment-300884775,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","Let's move the conversation back to the issue. If you'd like to pull it and push it as a branch here, we can continue working on it without requiring rights on @marcoscaceres repository.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,24,https://github.com/htacg/tidy-html5/pull/458#issuecomment-301158517,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?",NOTE - All discussion moved to #456 ... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/geoffmcl,25,https://github.com/htacg/tidy-html5/pull/458#issuecomment-301253896,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","NOTE created an issue-456 branch, see #456, to continue work on this option... so closing this...
But @marcoscaceres again thanks for your efforts in this regard... and certainly hope you find the time to work on this or other parts of Tidy...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,458,2016-10-04T07:08:43Z,2017-05-13T15:05:19Z,2017-05-15T00:04:39Z,CLOSED,False,146,0,9,https://github.com/marcoscaceres,"WIP: Implement ""add-meta-charset"" option",9,['Feature Request'],https://github.com/htacg/tidy-html5/pull/458,https://github.com/marcoscaceres,26,https://github.com/htacg/tidy-html5/pull/458#issuecomment-301349202,"Covers initial implementation of ""add-meta-charset"".
@geoffmcl, this lays down the initial infrastructure.
I have a couple of follow up questions:

Even though tidy picks up the new option, Tidy's command line output still shows:

Config: unknown option: add-meta-charset=true
Anything obvious I've missed? The code is definitely working, as I can see the right element being added for HTML, and XHTML.

I'm getting null pointers when trying to match *charsetAttr and *httpEquivAttr in lexer.c, but can't work out why? Line 1691, 1692 below.

I'm worried about what to do when we hit something like:
<meta http-equiv=""content-type"" content=""text/html;charset=SOMETHING"">
Where SOMETHING doesn't match the output encoding. I think all we can do there is warn the developer - as they have opted into this option, we can only assume they know what they are doing.
The warning would be something like:
line X column X - Warning: found redundant charset declaration. 
Question is, should I still just insert the correct <meta charset>?
Lastly, if there is an valid declaration, that matches the output format, then it should be removed from the DOM. Then I can add the equivalent one to the document's head.
WDYT?","@geoffmcl, thanks! I hope so too. We (folks working on web standards) are highly dependent on tidy and really appreciate the work you and @balthisar have been doing in maintaining tidy.",True,{'HEART': ['https://github.com/Deledrius']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/marcoscaceres,1,https://github.com/htacg/tidy-html5/pull/463,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/marcoscaceres,2,https://github.com/htacg/tidy-html5/pull/463#issuecomment-256056330,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"Still getting noise from:
tidy-html5/src/message.c:233:9: warning: implicit declaration of function 'va_copy'
      [-Wimplicit-function-declaration]
        va_copy(args_copy, args);
        ^
1 warning generated.
A lot of noise from ones like this:
tidy-html5/src/language_en.h:109:9: warning: string literal of length 847 exceeds
      maximum length 509 that C90 compilers are required to support [-Woverlength-strings]
And this one is interesting too, as it uses a modern C99 feature?:
tidy-html5/src/language.c:30:25: warning: flexible array members are a C99 feature
      [-Wc99-extensions]
    languageDefinition *languages[];

(see also tidy-html5/src/language.c:30:25)",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/463#issuecomment-257196350,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"@marcoscaceres, wow, we have let things slip in this regard...
By the time I came back to tidy, I guess some of these slips had been done...
But is it the time to reject all the compiler advances since the -ansi option?
You have quite rightly highlighted many instances of where tidy has slipped a little... but are these wrong? Some maybe need to be looked at...
On the single issue of inline comments //, versus only /* ... */, I am very ambivalent... I do not see a problem accepting //... but that is just my view...
Code I write at the moment exclusively uses /*\ ... \*/, but that is a style I have adopted for tidy...
Look forward to further comments... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/marcoscaceres,4,https://github.com/htacg/tidy-html5/pull/463#issuecomment-257206268,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"I don't mind so much, but the problem is when building the first time with ""-ansi -pedantic"" it generates a lot of noise because of the comments and string literals that exceed 509 bytes (related to #460).
Also note that languageDefinition *languages[]; is already in violation of c89 (and tidy has been shipping that for a while, I assume) - so trying to compile with c89 breaks the linker.
So, this again raises the question about which c standard version to use (#460). Again, I'm really new to c, but It appears there is enough code currently in the project to say that this is a ""c99""-conforming project.
As someone who knows the code really well, could you maybe evaluate what is the right standard to use?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/463#issuecomment-265240522,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"See #460 for additional comment...
Will try to pull and test this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/463#issuecomment-267671089,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"@marcoscaceres have now carefully reviewed your ansi_compliance branch, and this all looks good...
Can you rebase your fork to master to ensure there are no conflicts, and will merge this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/marcoscaceres,7,https://github.com/htacg/tidy-html5/pull/463#issuecomment-268161544,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,@geoffmcl rebased. Thank you for the review.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/463#issuecomment-271296982,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"@marcoscaceres sorry for the brief delay...
Are we still good to go on this?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/marcoscaceres,9,https://github.com/htacg/tidy-html5/pull/463#issuecomment-271320618,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,Should be all good to merge.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,463,2016-10-25T14:43:06Z,2017-01-09T15:59:43Z,2017-01-09T16:00:50Z,MERGED,True,22,22,7,https://github.com/marcoscaceres,style: ansi conforming comments,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/463,https://github.com/geoffmcl,10,https://github.com/htacg/tidy-html5/pull/463#issuecomment-271324180,Makes compiling a little bit less noisy when compiling on *nix with -ansi option is set. Also now adheres to projects commenting conventions.,"Done, and thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,1,https://github.com/htacg/tidy-html5/pull/473,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268329059,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@eric-brechemier have reviewed this WIP, and it is looking great... some little points...
SYNOPSIS
I like you have reduced this to one(1) single simple line, as it should be... but maybe it should read like -
SYNOPSIS
   tidy [options] [file[ ...]] [[options] [file[ ...] ...]

But maybe the additional square braces are too much, too pedantic... what do you think?
And in fact maybe it could be reduced to just tidy [options] [file1[ file2[ ...]]], and the fact that this [options] [file(s)] can be repeated be only mentioned say in the description. Or not at all...
I have never really used, or tested, this multiple [options file], since as far as I can see, if tidy exits 1, you would not know, without actually reading the output, which file caused this warning... but assume it works... but what really is the use case?
In any batch, or scripted processing, I can understand having one set of options applied to a big list of files, although again, you do not know which actual file caused the exit value... but to then change the options for another file, or files, does not seem to make much sense...
But ok, maybe this is not the place or time to discuss this quite unique multiple options file(s) that tidy offers... but I would be ok with not suggesting, sort of promoting this...
As stated, I am happy with the single line, with, or without, the addition square braces, as it is...
OPTIONS
Again it is great that you have added a good description, clearly pointing out tidy has two types, -, and --. I suppose some might argue that in *nix systems two dashes, --, is more the 'regular', or 'standard', but we can wear that semantic difference... and your description makes the intention clear...
And I like that, for most single dash, -, you have added a double dash, --, form, which can then be put in a config file...
And maybe it would be too much if each double -- option mentioned a - option, where it exists... like say clean with a See also: -c... that is each is fully crossed referenced... but as I say, maybe too much?
Temporary Files
Yes, thanks for making this effort, to be able to read them in a non-nix system...
But in *nix I found I could just compile tidy in say build/cmake, and view the results with man -l tidy.1, without doing any install...
And I certainly hope others, espceially @jidanni, can do this, and offer his comments, since he opened #469. I do understand that he wants to use only released tidy in production, but as stated this great new man page change does not need to be installed - just in a few mintues -
$ cd some/tmp/work/dir
$ git clone git@github.com:htacg/tidy-html5.git
$ cd tidy-html5/build/cmake
$ cmake ../..
$ make
$ man -l tidy.1

So I think these 'temporary' files can be remove, but as stated, thanks for the thought...
Multiple, multiple commits
While I have no real problem with this as you were developing the change, but hopefully the final PR is essentially only one commit, since as far as I can see it only effects one file, man/tidy.xsl.in...
You would probably need copy your final modified tidy.xsl.in to say new-tidy.xsl.in... back up to master... make sure it is rebased to the current master... create a new branch, say man-final... overwrite tidy.xsl.in with your new... maybe commit with a multiline commit message... and push... otherwise I understand github just adds each new commit to this existing WIP PR...
But, as stated, not really a problem...
Other possible changes


Yes, we are always looking for better, more concise, suscinct descriptions, but these each can be raised as separate issues...


I wish we could remove internal only option, like gnu-emacs-file. Maybe these should not appear in any docs, even with a comment Used internally.. See #472 for some discussion on others like this... But again these could be dealt with as separate issues.


So, as stated, this is a sterling effort... look forward to the final... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,3,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268356969,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","SYNOPSIS

But maybe the additional square braces are too much, too pedantic... what do you think?

Maybe not pedantic, but definitely confusing in a lispy way. I'll think about it.

And in fact maybe it could be reduced to just tidy [options] [file1[ file2[ ...]]], and the fact that this [options] [file(s)] can be repeated be only mentioned say in the description. Or not at all...

This is the option taken by man curl:
curl [options] [URL...]

but then they have a special parameter to separate options that are related to one URL from the next:
-:, --next
              Tells curl to use a separate operation for the following URL and
              associated  options.  This  allows  you  to  send  several   URL
              requests,  each  with  their  own specific options, for example,
              such as different user names or custom requests for each. (Added
              in 7.36.0)

while in the case of tidy, an option applies to all the following files.

In any batch, or scripted processing, I can understand having one set of options applied to a big list of files, although again, you do not know which actual file caused the exit value... but to then change the options for another file, or files, does not seem to make much sense...

It may be useful when using a wildcard from the shell: *.html is expanded to the list of files that matches the pattern. Also, I remember a particular time when we had different files with different encodings, and used to include a hint for the encoding of the file in the file name, such as .utf8.html or .latin1.html. We could apply tidy to all these files in a single run with -latin1 *.latin1.html -utf8 *.utf8.html.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,4,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268358097,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","OPTIONS

And maybe it would be too much if each double -- option mentioned a - option, where it exists... like say clean with a See also: -c... that is each is fully crossed referenced... but as I say, maybe too much?

Ah, good point. Some options are available in both flavors. That deserves at least a mention when it is the case. I will look into it.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,5,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268360621,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","Temporary Files

Yes, thanks for making this effort, to be able to read them in a non-nix system...
But in *nix I found I could just compile tidy in say build/cmake, and view the results with man -l tidy.1, without doing any install...

I looked long and large for this option, which is simply not available in macOS's man :( I am glad to know that it exists though.
Multiple, multiple commits

While I have no real problem with this as you were developing the change, but hopefully the final PR is essentially only one commit, since as far as I can see it only effects one file, man/tidy.xsl.in...

Sure, I will squash the commits into one, leaving no trace of the temporary files. Apparently, it is also possible to do it directly from GitHub interface when you merge the branch.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,6,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268367861,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","Other possible changes


Yes, we are always looking for better, more concise, suscinct descriptions, but these each can be raised as separate issues...


It is not so much about the text that describes each option as the verbose format used to describe configuration options:
       add-xml-decl

              Type:    Boolean
              Default: no
              Example: y/n, yes/no, t/f, true/false, 1/0

              This option specifies if Tidy should add the XML declaration
              when outputting XML or XHTML.

              Note that if the input already includes an <?xml ... ?>
              declaration then this option will be ignored.

              If the encoding for the output is different from ascii, one of
              the utf* encodings, or raw, then the declaration is always added
              as required by the XML standard.

                                      See also: char-encoding, output-encoding

vs (for example)
       --add-xml-decl <boolean:no>
              This option specifies if Tidy should add the XML declaration
              when outputting XML or XHTML.

              Note that if the input already includes an <?xml ... ?>
              declaration then this option will be ignored.

              If the encoding for the output is different from ascii, one of
              the utf* encodings, or raw, then the declaration is always added
              as required by the XML standard.

              See also: char-encoding, output-encoding



I wish we could remove internal only option, like gnu-emacs-file. Maybe these should not appear in any docs, even with a comment Used internally.. See #472 for some discussion on others like this... But again these could be dealt with as separate issues.


I could test whether the <description> matches Used internally.  but a better way would be to remove the option from the output of ./tidy -xml-config (which is used to generate the file tidy-config.xml that is fed to the XSLT transformation).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,7,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268369556,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@geoffmcl I will move forward with three points in mind:

further enhancing the SYNOPSIS if possible
looking into cross-referencing of options available in both single and double dash flavors
compacting the configuration options",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268413247,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@eric-brechemier, wow, thank you for the detailed, and very thoughtful responses...
SYNOPSIS
Really, my additions here were only a suggestion... I basically agree with going forward with the single line SYNOPSIS proposed, as in the current first SYNOPSIS used...
Forget my additional square brackets as too confusing, but not sure what you mean in a lispy way... and yes, like curl, tidy does offer this multiple options file(s) possibility, so lets go forward with the single line synopsis as offered... ok?
more concise, succinct descriptions...
And yes, I would support not repeating such mundane information, like I do prefer, say -
       --add-xml-decl <boolean:no>
            description

versus our currently very repetitive, space using form of -
       add-xml-decl

              Type:    Boolean
              Default: no
              Example: y/n, yes/no, t/f, true/false, 1/0
              description

The main DESCRIPTION should take care of this type of multiple acceptable inputs of a config option type, which it nearly does already...
showing non-options
No, the tidy.1 build should not have to seek Used internally.! As you suggest, the ./tidy -xml-config should be adjusted to just not output these as options, so forget this here...
That is another issue about what the -xml-config output, that is fed to the XSLT transformation... agreed as a separate issue... the man page generation should absolutely use what it is fed...
compacting commits
Thank you for the links on this, and now I have seen that I can choose a Squash and merge commit that I did not know about before... look forward to trying this when you remove the WIP moniker from the PR... thanks...
Now I do think the cross referencing the extended, --, options back to those that have a single - option quite important, but not essential...
And now realize my suggested script to @jidanni, and others, was in error. They need to be cloning, and building your fork, and specific branch, not the htacg master, at this time... to test this change...
Again, thanks for your efforts on this... very much appreciated...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,9,https://github.com/htacg/tidy-html5/pull/473#issuecomment-268467284,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@geoffmcl All clear. Thank you for the feedback.

not sure what you mean in a lispy way...

I am currently reading the original paper on Lisp and the mental gymnastics involved in tracking opening and closing brackets in tidy [options] [file[ ...]] [[options] [file[ ...] ...] reminded me of the similar effort required to understand an expression such as apply[(LAMBDA,(X,Y),(CONS,(CAR,X),Y)); ((A,B),(C,D))].",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,10,https://github.com/htacg/tidy-html5/pull/473#issuecomment-270328809,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","(...) I suppose some might argue that in *nix systems two dashes, --, is more the 'regular', or 'standard', but we can wear that semantic difference... and your description makes the intention clear...

I revisited this issue and enhanced the wording in 29215e3. The terms are now in line with the descriptions of -xml-help and -xml-config: (purely) command-line options (single dash) and configuration options (double dash).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,11,https://github.com/htacg/tidy-html5/pull/473#issuecomment-270337972,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","And maybe it would be too much if each double -- option mentioned a - option, where it exists... like say clean with a See also: -c... that is each is fully crossed referenced... but as I say, maybe too much?

I gave more thought to this. I noticed that the documentation of some command-line options includes an equivalent configuration option and value, in the <eqconfig> element.
For example:
 <option class=""process-directives"">
  <name>-clean</name>
  <name>-c</name>
  <description>replace FONT, NOBR and CENTER tags by CSS</description>
  <eqconfig>clean: yes</eqconfig>
 </option>

Therefore, a configuration option alone is not equivalent to using a command-line option: it is a pair option+value that must be used.
This could justify having references only in one direction from command-line options to configuration options, and no references back.
If we do want to include the references from configuration options back to command-line options, mixing both kinds of options in the 'See also' section, we should use the same mechanism currently used to refer only to the double dash options, using <seealso> elements. Each <seealso> element includes the name of a single option, without the dashes:
  <seealso>input-encoding</seealso>
  <seealso>output-encoding</seealso>

We could change the format of <seealso> elements in the output of tidy -xml-config, adding the dashes to the option names:
  <seealso>--input-encoding</seealso>
  <seealso>--output-encoding</seealso>

This would allow to mix references to both kinds of options:
 <option class=""print"">
  <name>indent</name>
  <type>AutoBool</type>
  <default>no</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should indent block-level tags. If set to ""auto"", this option causes Tidy to decide whether or not to indent the content of tags such as TITLE, H1-H6, LI, TD, TD, or P depending on whether or not the content includes a block-level element. You are advised to avoid setting indent to yes as this can expose layout bugs in some browsers. </description>
   <seealso>-indent</seealso>
   <seealso>--indent-spaces</seealso>
 </option>

Which would result in:
See also: -indent, --indent-spaces",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,12,https://github.com/htacg/tidy-html5/pull/473#issuecomment-270577680,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.",@geoffmcl the PR is ready for review.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,13,https://github.com/htacg/tidy-html5/pull/473#issuecomment-270594950,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.",Note: I still need to delete the temporary tidy.1 and tidy.1.txt at the root before the merging.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/geoffmcl,14,https://github.com/htacg/tidy-html5/pull/473#issuecomment-270739085,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@eric-brechemier ok, have pulled your fork, issue-469 branch, built and reviewed this, in linux, and everything looks good, but really wish there were others mac/unix reviewers. Being a windows person, which does not have a $ man page command, do not feel totally comfortable with just my quick linux $ man -l tidy.1 review...
As far as I can see, so far this is only modification of one file, man/tidy1.xsl.in. And it seems to me you have completely removed the duplications, and improved the wording here and there... that effectively solved the #469 issue raised by @jidanni... As I say this looks good to me... and once you remove the two temporary files, and hopefully a positive review by at least one other, would be prepared to merge this... many thanks...
And if I read, and understand things correctly, as a further enhancement, you would now like to modify the xml output of tidy.c. That is the modify the xml fed to the transformation. If I am understanding this correctly then I would like that as a separate issue. I need to explore how that is done presently...
Like I see in the code - printf(""  <seealso>%s</seealso>\n"",tidyOptGetName(optLinked));, but presently do not immediately see how to know to add a single - or a double -- in front... The tidyOptGetName(optLinked) is a tidy API call, which probably can not be changed, but maybe another internal function could be added to do that... or something...
I certainly like the idea the we could have xml ouput of -
   ...
   <seealso>-i</seealso>
   <seealso>-indent</seealso>
   <seealso>--indent-spaces</seealso>
 </option>

which in turn would add See also: -i, -indent, --indent-spaces... to the tidy.1 page... That is fully cross-referencing the options... But as stated else where this is not essential that we have every cross-reference...
But is it convenient to separate this as a further, separate step?
Regards, geoff.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,15,https://github.com/htacg/tidy-html5/pull/473#issuecomment-271096265,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@geoffmcl Agreed. It's a wrap!
I noticed a few other things that I would like to improve; let's open separate issues for further enhancements.
I have removed the temporary files from the branch.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/geoffmcl,16,https://github.com/htacg/tidy-html5/pull/473#issuecomment-271097575,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@eric-brechemier yes, it's a wrap, even if we do not get another unix reviewer...
Just about out of time tonight, but tomorrow, or soonest, will merge this using the special Squash and merge option offered, which I think will pull in you some 47 commits as one... First time I have tried this, so hope it works out well...
Be back soonest... thanks
And look forward to your further enhancement as a separate issue... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/geoffmcl,17,https://github.com/htacg/tidy-html5/pull/473#issuecomment-271165223,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.",@eric-brechemier seems the SnM worked fine... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,473,2016-12-18T22:19:10Z,2017-01-08T17:19:38Z,2017-02-14T18:23:35Z,MERGED,True,219,203,1,https://github.com/eric-brechemier,"Merge documentation of ""command-line"" and ""configuration"" options (Issue #469)",47,['Feature Request'],https://github.com/htacg/tidy-html5/pull/473,https://github.com/eric-brechemier,18,https://github.com/htacg/tidy-html5/pull/473#issuecomment-279791466,"I have generalized the SYNOPSIS and the description of OPTIONS to cover both ""standard"" options and ""extended"" configuration options in the same sections of the documentation.
I have modified the XSLT transformation which generates the man page. I have also added two temporary files, the generated man page (source) and the formatted text (for display in terminal) generated by groff.
The latter is best viewed in a terminal, e.g. using less tidy.1.text to view the file, or git log -p tidy.1.txt to review the effect of individual commits on the resulting document.
This is a work in progress submitted for preliminary review and discussion.
Before this branch is merged, I intend to simplify the description of each configuration option to avoid repeating information, make entries shorter and similar in format to the description of standard options. I will also delete the temporary files once the review has been completed.","@geoffmcl
I finished opening new issues for the improvements that I wanted to suggest:

Generation of the man page should be done in two phases #484
Format  values of -xml-config in the same way as those of -xml-help #491
Indicate type of value instead of <%s> in  values #492
Format  values of -xml-config in the same way as  values of -xml-help #493
Do not include options 'Used internally' in -xml-config output #494",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,480,2017-01-08T23:41:19Z,2017-01-29T18:17:44Z,2017-01-29T18:48:33Z,MERGED,True,9,0,3,https://github.com/onnimonni,Add optional xmlns:xlink attributes as valid to support inline svg,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/480,https://github.com/onnimonni,1,https://github.com/htacg/tidy-html5/pull/480,"Add xmlns:xlink support as instructed by @geoffmcl.
I tested this build in debian docker container and the earlier false positive warning aboutxmlns:xlink being proprietary went away.
This fixes #478.","Add xmlns:xlink support as instructed by @geoffmcl.
I tested this build in debian docker container and the earlier false positive warning aboutxmlns:xlink being proprietary went away.
This fixes #478.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,480,2017-01-08T23:41:19Z,2017-01-29T18:17:44Z,2017-01-29T18:48:33Z,MERGED,True,9,0,3,https://github.com/onnimonni,Add optional xmlns:xlink attributes as valid to support inline svg,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/480,https://github.com/onnimonni,2,https://github.com/htacg/tidy-html5/pull/480#issuecomment-275464029,"Add xmlns:xlink support as instructed by @geoffmcl.
I tested this build in debian docker container and the earlier false positive warning aboutxmlns:xlink being proprietary went away.
This fixes #478.",@geoffmcl Are we still good to go with this?,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,480,2017-01-08T23:41:19Z,2017-01-29T18:17:44Z,2017-01-29T18:48:33Z,MERGED,True,9,0,3,https://github.com/onnimonni,Add optional xmlns:xlink attributes as valid to support inline svg,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/480,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/480#issuecomment-275934392,"Add xmlns:xlink support as instructed by @geoffmcl.
I tested this build in debian docker container and the earlier false positive warning aboutxmlns:xlink being proprietary went away.
This fixes #478.","Yes, done, thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,480,2017-01-08T23:41:19Z,2017-01-29T18:17:44Z,2017-01-29T18:48:33Z,MERGED,True,9,0,3,https://github.com/onnimonni,Add optional xmlns:xlink attributes as valid to support inline svg,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/480,https://github.com/onnimonni,4,https://github.com/htacg/tidy-html5/pull/480#issuecomment-275936224,"Add xmlns:xlink support as instructed by @geoffmcl.
I tested this build in debian docker container and the earlier false positive warning aboutxmlns:xlink being proprietary went away.
This fixes #478.",Thanks a lot!,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,488,2017-02-10T18:08:39Z,2017-02-13T13:51:41Z,2017-02-13T14:32:10Z,MERGED,True,8,2,1,https://github.com/balthisar,Pretty up output of empty script tags.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/488,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/488,"No longer break script tags up on two lines if there is content. However
output is still subject to the --wrap behavior.
Previous behavior intact if there is content.

I've committed myself to tidying up the pretty-print engine a bit in order to address several feature requests, and this one addresses a piece of low-hanging fruit without being intrusive.
Specifically some users are tying to pass so-call AMP validation, something Google is promoting for fast websites. Current handling of empty <script> tags always break them into two lines, e.g.,
<script ...>
</script>

This patch ensures they will remain on a single line.
I've not bumped the version number, and despite the commit comment I won't assign a new configuration option for this purely visual change.
Comments appreciated, else I'll merge it sometime soon (with a version bump).","No longer break script tags up on two lines if there is content. However
output is still subject to the --wrap behavior.
Previous behavior intact if there is content.

I've committed myself to tidying up the pretty-print engine a bit in order to address several feature requests, and this one addresses a piece of low-hanging fruit without being intrusive.
Specifically some users are tying to pass so-call AMP validation, something Google is promoting for fast websites. Current handling of empty <script> tags always break them into two lines, e.g.,
<script ...>
</script>

This patch ensures they will remain on a single line.
I've not bumped the version number, and despite the commit comment I won't assign a new configuration option for this purely visual change.
Comments appreciated, else I'll merge it sometime soon (with a version bump).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,488,2017-02-10T18:08:39Z,2017-02-13T13:51:41Z,2017-02-13T14:32:10Z,MERGED,True,8,2,1,https://github.com/balthisar,Pretty up output of empty script tags.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/488,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/488#issuecomment-279170348,"No longer break script tags up on two lines if there is content. However
output is still subject to the --wrap behavior.
Previous behavior intact if there is content.

I've committed myself to tidying up the pretty-print engine a bit in order to address several feature requests, and this one addresses a piece of low-hanging fruit without being intrusive.
Specifically some users are tying to pass so-call AMP validation, something Google is promoting for fast websites. Current handling of empty <script> tags always break them into two lines, e.g.,
<script ...>
</script>

This patch ensures they will remain on a single line.
I've not bumped the version number, and despite the commit comment I won't assign a new configuration option for this purely visual change.
Comments appreciated, else I'll merge it sometime soon (with a version bump).","@balthisar have quickly tried and tested this, with my input5\in_488.html - no attributes, and input5\in_488-1.html - with attributes...
Of course, this only effects <script ...>, i.e. with attributes, otherwise such blank script tags are dropped anyway, unless the option --drop-empty-elements no is added. But your patch puts the <script></script> on one line, and looks good to me...
One small suggested addition, would be that I note if I have -
<!DOCTYPE html>
<html>
<head>
<meta charset=""utf-8"">
<title>PR #488</title>
<script>
</script>
</head>
<body>
<p>Blank script tags</p>
<script>
</script>
</body>
</html>
and run $ tidy --drop-empty-element no input5\in_488.html I get a nasty newline after the <title>, before <script></script>. Maybe this should only happen if in tidy so called classic mode, i.e. --vertical-space yes, TidyClassicVS, and stupidly if I add this option this vertical space goes away, which seems opposite to the intent... but maybe this can be a separate issue...
And then thinking about this more, maybe your if ( node->content != NULL ) could also include a test for this classic mode, which in general means people do prefer more vertical space, like if ( ( node->content != NULL ) || TidyClassicVS ), but this is just a thought... and again could be separate...
As stated, generally agree with it as is... please merge and bump version when you like... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,488,2017-02-10T18:08:39Z,2017-02-13T13:51:41Z,2017-02-13T14:32:10Z,MERGED,True,8,2,1,https://github.com/balthisar,Pretty up output of empty script tags.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/488,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/488#issuecomment-279397952,"No longer break script tags up on two lines if there is content. However
output is still subject to the --wrap behavior.
Previous behavior intact if there is content.

I've committed myself to tidying up the pretty-print engine a bit in order to address several feature requests, and this one addresses a piece of low-hanging fruit without being intrusive.
Specifically some users are tying to pass so-call AMP validation, something Google is promoting for fast websites. Current handling of empty <script> tags always break them into two lines, e.g.,
<script ...>
</script>

This patch ensures they will remain on a single line.
I've not bumped the version number, and despite the commit comment I won't assign a new configuration option for this purely visual change.
Comments appreciated, else I'll merge it sometime soon (with a version bump).",I kept it as is; I plan to re-work the whole pretty printing soon.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,489,2017-02-10T19:22:22Z,2017-02-13T13:51:41Z,2017-02-13T14:32:07Z,MERGED,True,67,25,1,https://github.com/balthisar,VERSION.md cleanup.,1,"['Infrastructure', 'Feature Request']",https://github.com/htacg/tidy-html5/pull/489,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/489,"Added more verbose explanations of our version numbering scheme.
Issued as a PR for pre-merge comments, if any.","Added more verbose explanations of our version numbering scheme.
Issued as a PR for pre-merge comments, if any.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,489,2017-02-10T19:22:22Z,2017-02-13T13:51:41Z,2017-02-13T14:32:07Z,MERGED,True,67,25,1,https://github.com/balthisar,VERSION.md cleanup.,1,"['Infrastructure', 'Feature Request']",https://github.com/htacg/tidy-html5/pull/489,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/489#issuecomment-279171077,"Added more verbose explanations of our version numbering scheme.
Issued as a PR for pre-merge comments, if any.",@balthisar this reads really well... have no problem with it being merged any time... with or without a version bump... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,490,2017-02-11T17:38:15Z,2017-02-13T13:51:42Z,2017-02-26T15:06:20Z,MERGED,True,213,3,7,https://github.com/geoffmcl,Surrogates,8,['Bug'],https://github.com/htacg/tidy-html5/pull/490,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/490,"Issue #483, if someone could test would merge this... thanks...","Issue #483, if someone could test would merge this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,490,2017-02-11T17:38:15Z,2017-02-13T13:51:42Z,2017-02-26T15:06:20Z,MERGED,True,213,3,7,https://github.com/geoffmcl,Surrogates,8,['Bug'],https://github.com/htacg/tidy-html5/pull/490,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/490#issuecomment-279397796,"Issue #483, if someone could test would merge this... thanks...","Test and working on macOS, so merged.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,495,2017-02-17T20:36:44Z,2017-03-01T16:39:52Z,2017-03-01T17:39:29Z,CLOSED,False,3879,2894,29,https://github.com/balthisar,Several foundational changes preparing for release of 5.4 and future 5.5:,2,[],https://github.com/htacg/tidy-html5/pull/495,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/495,"Bringing sanity back to the formal API was a big focus of this one. Given that I'm the one who screwed them up, it seems fair.

Consolidated all output string definitions enums into tidyenum.h, which
is where they belong, and where they have proper visibility.
Re-arranged messages.c/h with several comments useful to developers.
Properly added the key lookup functions and the language localization
functions into tidy.h/tidylib.c with proper name-spacing.
Previous point restored a lot of sanity to the #include pollution that's
been introduced in light of these.
Note that opaque types have been (properly) introduced. Look at the updated
headers for language.h. In particular only an opaque structure is passed
outside of LibTidy, and so use TidyLangWindowsName and TidyLangPosixName
to poll these objects.
Console application updated as a result of this.
Removed dead code:

void TY_(UnknownOption)( TidyDocImpl* doc, char c );
void TY_(UnknownFile)( TidyDocImpl* doc, ctmbstr program, ctmbstr file );


Redundant strings were removed with the removal of this dead code.
Several enums were given fixed starting values. YOUR PROGRAMS SHOULD NEVER
depend on enum values. TidyReportLevel is an example of such.
Some enums were removed as a result of this. TidyReportLevel now has
matching strings, so the redundant TidyReportLevelStrings was removed.
All of the PO's and language header files were regenerated as a result of
the string cleanup and header cleanup.
Made the interface to the library version and release date consistent.
CMakeLists.txt now supports SUPPORT_CONSOLE_APP. The intention is to
be able to remove console-only code from LibTidy (for LibTidy users).
Updated README/MESSAGES.md, which is vastly more simple now.","Bringing sanity back to the formal API was a big focus of this one. Given that I'm the one who screwed them up, it seems fair.

Consolidated all output string definitions enums into tidyenum.h, which
is where they belong, and where they have proper visibility.
Re-arranged messages.c/h with several comments useful to developers.
Properly added the key lookup functions and the language localization
functions into tidy.h/tidylib.c with proper name-spacing.
Previous point restored a lot of sanity to the #include pollution that's
been introduced in light of these.
Note that opaque types have been (properly) introduced. Look at the updated
headers for language.h. In particular only an opaque structure is passed
outside of LibTidy, and so use TidyLangWindowsName and TidyLangPosixName
to poll these objects.
Console application updated as a result of this.
Removed dead code:

void TY_(UnknownOption)( TidyDocImpl* doc, char c );
void TY_(UnknownFile)( TidyDocImpl* doc, ctmbstr program, ctmbstr file );


Redundant strings were removed with the removal of this dead code.
Several enums were given fixed starting values. YOUR PROGRAMS SHOULD NEVER
depend on enum values. TidyReportLevel is an example of such.
Some enums were removed as a result of this. TidyReportLevel now has
matching strings, so the redundant TidyReportLevelStrings was removed.
All of the PO's and language header files were regenerated as a result of
the string cleanup and header cleanup.
Made the interface to the library version and release date consistent.
CMakeLists.txt now supports SUPPORT_CONSOLE_APP. The intention is to
be able to remove console-only code from LibTidy (for LibTidy users).
Updated README/MESSAGES.md, which is vastly more simple now.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,495,2017-02-17T20:36:44Z,2017-03-01T16:39:52Z,2017-03-01T17:39:29Z,CLOSED,False,3879,2894,29,https://github.com/balthisar,Several foundational changes preparing for release of 5.4 and future 5.5:,2,[],https://github.com/htacg/tidy-html5/pull/495,https://github.com/marcoscaceres,2,https://github.com/htacg/tidy-html5/pull/495#issuecomment-282635170,"Bringing sanity back to the formal API was a big focus of this one. Given that I'm the one who screwed them up, it seems fair.

Consolidated all output string definitions enums into tidyenum.h, which
is where they belong, and where they have proper visibility.
Re-arranged messages.c/h with several comments useful to developers.
Properly added the key lookup functions and the language localization
functions into tidy.h/tidylib.c with proper name-spacing.
Previous point restored a lot of sanity to the #include pollution that's
been introduced in light of these.
Note that opaque types have been (properly) introduced. Look at the updated
headers for language.h. In particular only an opaque structure is passed
outside of LibTidy, and so use TidyLangWindowsName and TidyLangPosixName
to poll these objects.
Console application updated as a result of this.
Removed dead code:

void TY_(UnknownOption)( TidyDocImpl* doc, char c );
void TY_(UnknownFile)( TidyDocImpl* doc, ctmbstr program, ctmbstr file );


Redundant strings were removed with the removal of this dead code.
Several enums were given fixed starting values. YOUR PROGRAMS SHOULD NEVER
depend on enum values. TidyReportLevel is an example of such.
Some enums were removed as a result of this. TidyReportLevel now has
matching strings, so the redundant TidyReportLevelStrings was removed.
All of the PO's and language header files were regenerated as a result of
the string cleanup and header cleanup.
Made the interface to the library version and release date consistent.
CMakeLists.txt now supports SUPPORT_CONSOLE_APP. The intention is to
be able to remove console-only code from LibTidy (for LibTidy users).
Updated README/MESSAGES.md, which is vastly more simple now.",Exciting stuff @balthisar! Thanks for doing all this.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,495,2017-02-17T20:36:44Z,2017-03-01T16:39:52Z,2017-03-01T17:39:29Z,CLOSED,False,3879,2894,29,https://github.com/balthisar,Several foundational changes preparing for release of 5.4 and future 5.5:,2,[],https://github.com/htacg/tidy-html5/pull/495,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/495#issuecomment-283394669,"Bringing sanity back to the formal API was a big focus of this one. Given that I'm the one who screwed them up, it seems fair.

Consolidated all output string definitions enums into tidyenum.h, which
is where they belong, and where they have proper visibility.
Re-arranged messages.c/h with several comments useful to developers.
Properly added the key lookup functions and the language localization
functions into tidy.h/tidylib.c with proper name-spacing.
Previous point restored a lot of sanity to the #include pollution that's
been introduced in light of these.
Note that opaque types have been (properly) introduced. Look at the updated
headers for language.h. In particular only an opaque structure is passed
outside of LibTidy, and so use TidyLangWindowsName and TidyLangPosixName
to poll these objects.
Console application updated as a result of this.
Removed dead code:

void TY_(UnknownOption)( TidyDocImpl* doc, char c );
void TY_(UnknownFile)( TidyDocImpl* doc, ctmbstr program, ctmbstr file );


Redundant strings were removed with the removal of this dead code.
Several enums were given fixed starting values. YOUR PROGRAMS SHOULD NEVER
depend on enum values. TidyReportLevel is an example of such.
Some enums were removed as a result of this. TidyReportLevel now has
matching strings, so the redundant TidyReportLevelStrings was removed.
All of the PO's and language header files were regenerated as a result of
the string cleanup and header cleanup.
Made the interface to the library version and release date consistent.
CMakeLists.txt now supports SUPPORT_CONSOLE_APP. The intention is to
be able to remove console-only code from LibTidy (for LibTidy users).
Updated README/MESSAGES.md, which is vastly more simple now.",I'll close this one in order to PR against next.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,495,2017-02-17T20:36:44Z,2017-03-01T16:39:52Z,2017-03-01T17:39:29Z,CLOSED,False,3879,2894,29,https://github.com/balthisar,Several foundational changes preparing for release of 5.4 and future 5.5:,2,[],https://github.com/htacg/tidy-html5/pull/495,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/495#issuecomment-283412717,"Bringing sanity back to the formal API was a big focus of this one. Given that I'm the one who screwed them up, it seems fair.

Consolidated all output string definitions enums into tidyenum.h, which
is where they belong, and where they have proper visibility.
Re-arranged messages.c/h with several comments useful to developers.
Properly added the key lookup functions and the language localization
functions into tidy.h/tidylib.c with proper name-spacing.
Previous point restored a lot of sanity to the #include pollution that's
been introduced in light of these.
Note that opaque types have been (properly) introduced. Look at the updated
headers for language.h. In particular only an opaque structure is passed
outside of LibTidy, and so use TidyLangWindowsName and TidyLangPosixName
to poll these objects.
Console application updated as a result of this.
Removed dead code:

void TY_(UnknownOption)( TidyDocImpl* doc, char c );
void TY_(UnknownFile)( TidyDocImpl* doc, ctmbstr program, ctmbstr file );


Redundant strings were removed with the removal of this dead code.
Several enums were given fixed starting values. YOUR PROGRAMS SHOULD NEVER
depend on enum values. TidyReportLevel is an example of such.
Some enums were removed as a result of this. TidyReportLevel now has
matching strings, so the redundant TidyReportLevelStrings was removed.
All of the PO's and language header files were regenerated as a result of
the string cleanup and header cleanup.
Made the interface to the library version and release date consistent.
CMakeLists.txt now supports SUPPORT_CONSOLE_APP. The intention is to
be able to remove console-only code from LibTidy (for LibTidy users).
Updated README/MESSAGES.md, which is vastly more simple now.",Look forward to it... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,497,2017-02-22T11:15:27Z,2017-02-24T13:30:40Z,2017-02-24T13:46:27Z,MERGED,True,1,1,1,https://github.com/seaburg,Fix leading white spaces trimming,1,[],https://github.com/htacg/tidy-html5/pull/497,https://github.com/seaburg,1,https://github.com/htacg/tidy-html5/pull/497,"Hi!
start - offset in lexer->lexbuf
len - length of name
As resultlen almost always less than start, and leading white spaces is't trimmed","Hi!
start - offset in lexer->lexbuf
len - length of name
As resultlen almost always less than start, and leading white spaces is't trimmed",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,497,2017-02-22T11:15:27Z,2017-02-24T13:30:40Z,2017-02-24T13:46:27Z,MERGED,True,1,1,1,https://github.com/seaburg,Fix leading white spaces trimming,1,[],https://github.com/htacg/tidy-html5/pull/497,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/497#issuecomment-282294617,"Hi!
start - offset in lexer->lexbuf
len - length of name
As resultlen almost always less than start, and leading white spaces is't trimmed","@seaburg thank you for the PR... we always like those...
This certainly looks like a good fix, in that, as you point out, start is an offset into the lexer->lexbuf, while len is the length of the last name, and thus len could/would almost always by less than start, and thus tidy would not enter that while leading white space trim ...
And thus while such leading white space would not be trimmed there, it none the less gets trimmed later in CheckAttributes, like CheckUrl, but this has bad consequences since there is then a warning - escaping malformed URI reference - which is not strictly correct... All that happened was the leading space was removed...
So I think this is a good move, and merged your PR... added a comment, and bumped version to 5.3.20... thanks for catching and fixing this...",True,{'THUMBS_UP': ['https://github.com/seaburg']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,500,2017-02-24T19:33:43Z,2017-03-01T13:37:00Z,2017-03-01T13:37:17Z,MERGED,True,318,296,15,https://github.com/balthisar,Update README documents with information for the upcoming 5.4.0 release.,1,[],https://github.com/htacg/tidy-html5/pull/500,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/500,"Updated all of the README's in preparation for the imminent 5.4 release.
Ready for the big, red, RELEASE button to be pressed.","Updated all of the README's in preparation for the imminent 5.4 release.
Ready for the big, red, RELEASE button to be pressed.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,502,2017-03-01T13:38:37Z,2017-03-01T13:47:41Z,2017-03-01T13:47:47Z,MERGED,True,15,2,1,https://github.com/geoffmcl,Issue #498 - parser.c - if a <table> in a <table> just close.,1,[],https://github.com/htacg/tidy-html5/pull/502,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/502,"The previous action was to discard the second, while it is the second
table that browsers will render.
This conforms to the principle that the html output by tidy should render
in a browser like the original html.","The previous action was to discard the second, while it is the second
table that browsers will render.
This conforms to the principle that the html output by tidy should render
in a browser like the original html.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,503,2017-03-01T16:39:18Z,2017-03-02T14:39:20Z,2017-03-06T12:11:19Z,MERGED,True,3894,2892,30,https://github.com/balthisar,Messages squashed,4,[],https://github.com/htacg/tidy-html5/pull/503,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/503,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,504,2017-03-02T14:43:12Z,2017-03-06T12:07:56Z,2017-03-06T12:09:22Z,MERGED,True,107,1285,27,https://github.com/balthisar,Clean deprecations,9,[],https://github.com/htacg/tidy-html5/pull/504,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/504,next should start to leave the deprecated stuff behind. This cleans things out quite nicely.,next should start to leave the deprecated stuff behind. This cleans things out quite nicely.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,504,2017-03-02T14:43:12Z,2017-03-06T12:07:56Z,2017-03-06T12:09:22Z,MERGED,True,107,1285,27,https://github.com/balthisar,Clean deprecations,9,[],https://github.com/htacg/tidy-html5/pull/504,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/504#issuecomment-283673220,next should start to leave the deprecated stuff behind. This cleans things out quite nicely.,"This will break LibTidy users who have ignored the deprecation notices for the last 10 years. If this affects you badly enough that patching your own code isn't feasible, please continue to use master until you can update your applications.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/507,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/507#issuecomment-285811919,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","@geoffmcl, have you had a chance to test this? I'm making great progress on our oldest issue, but unfortunately it's intertwined deeply with the changes this PR makes.
I've been running it stably, but mostly on macOS and Ubuntu... thanks!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/507#issuecomment-285837723,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","@balthisar, sorry, was off dealing with some other projects that hold my interest...
While I am sure this is ""great progress"", and really thank you for all the big work and time involved, but it represents so many changes, making a rational review almost impossible!
Please, please try to make incremental changes, split it into many commits, but ok, I do understand some changes are big, and requires lots and lots of changes, all at one time...
But again I find myself reading through some changes, while it might start with an important change, like +    TidyReportLevel_first = 350,, and also adds some new enums, but why all the just space/indent changes? This just make reviewing very, very difficult... no, impossible...
But ok, in checking out this branch, message_system, is does not compile in Windows 10 64-bit, using msvc140.x64!
One of the immediate things is the use of WCHAR, if WIN32! Now Tidy has never supported WCHAR, utf-16 like. It seems the only other place it is used is in my SPRTF modules. but please note it is under an #ifdef UNICODE switch! And this was never intended to be turned on, and I suspect would not work anyway...
I personally think WCHAR should be totally removed, even in my SPRTF modules... It simply has no place in a utf-8 world!
The next thing is the use of int32_t, uint32_t, int64_t, and uint64_t in the PrintfArg structure union, in messageobj.c. Yes, these can be supported, in Windows, with #include <stdint.h>, but are they really necessary?
Presently, message formats can include %d, or %u, but will it ever be necessary to support 64-bit values? That is output value over 2 million? Maybe... but much more work has to be done for this...
And that would also go for supporting a double, or pointers! Yes, maybe at some future time, perhaps, but that really gets into trying to support things format items like %p, or %I64u, ... in the format string... a giant can of worms...
Yes, there is nothing wrong with going for everything is supported, but could that not be left to some future date, when the need arises... Just an idea...
So even if I add the above include, I still see several warnings, of the type -
1>D:\Tidy\tidy-html5\src\messageobj.c(387): warning C4311: 'type cast': pointer truncation from 'TidyMessageArgument' to 'int'

Maybe these are benign, and could be suppressed, if they are not really a problem...
So, in the end I can get it to compile with the following patch -
diff --git a/src/messageobj.c b/src/messageobj.c
index 1c7b40f..f77006a 100644
--- a/src/messageobj.c
+++ b/src/messageobj.c
@@ -13,7 +13,9 @@
 #if !defined(NDEBUG) && defined(_MSC_VER)
 #include ""sprtf.h""
 #endif
-
+#ifdef _WIN32
+#include <stdint.h>
+#endif
 
 /*********************************************************************
  * BuildArgArray Support - declarations and forward declarations
@@ -44,7 +46,7 @@ struct printfArg {
         double d;
         const char *s;
         size_t *ip;
-#ifdef WIN32
+#if (defined(_WIN32) && defined(UNICODE))
         const WCHAR *ws;
 #endif
     } u;
@@ -718,7 +720,7 @@ static struct printfArg* BuildArgArray( TidyDocImpl *doc, ctmbstr fmt, va_list a
                 break;
                 
             case 'S':
-#ifdef WIN32
+#if (defined(_WIN32) && defined(UNICODE))
                 nas[ cn ].type = TYPE_WSTRING;
                 break;
 #endif
@@ -815,7 +817,7 @@ static struct printfArg* BuildArgArray( TidyDocImpl *doc, ctmbstr fmt, va_list a
                 nas[cn].u.s = va_arg( ap, char* );
                 break;
                 
-#ifdef WIN32
+#if (defined(_WIN32) && defined(UNICODE))
             case tidyFormatType_WSTRING:
                 nas[cn].u.ws = va_arg( ap, WCHAR* );
                 break;
Have not yet had a chance to run, and test the results, but, as asked, really do we need all the additions that cause this?
Regards, Geoff.
OT: In other projects, some Mac, and linux/unix, developers have been able to install a Windows 10, maybe they had to buy a licence, with msvc140 (free) and at least test a compile before pushing forward changes... Just an idea!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/507#issuecomment-285868788,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","Hi @geoffmcl,
Thanks for having a look. I completely understand ""other projects,"" and I get your point about small commits, which just wasn't possible in this case. For white space, I configure diff to ignore it. In a lot of cases, the white space changes were simply made to match the style of the rest of Tidy's code.
I really hated to include WCHAR support, and so this is one of the chief reasons I like to have a Windows developer take a look. I do have gcc and MSVC on a Win10 installation at home (my preference, however, is influence by being forced to use Windows all day at work). Having those does not make me a Windows developer with specialized knowledge about the Windows operating system, thus your comments on the Windows platform are especially important.
Likewise supporting larger ints and much of the rest of the printf formats was a big internal debate. Add them later? Keep them now? Personally I favor dropping them, but I left them in because these decisions can't be mine alone. It sounds like you concur with the lack of need, and so it's absolutely no skin off my back to simplify these. By way of example, you can see that I didn't even bother to specify an API for doubles and pointers!
Rather than your patch above to accommodate WCHAR, I'd propose simply cutting it out. If you, as a Windows dev say that it's not needed in Windows, then by all means, I'm ready to yank out platform specifics in a heartbeat!
Thanks for the feedback.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/507#issuecomment-285879038,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","@balthisar seems we agree ;=))
Yes, I do often configure diff to ignore white space changes, and in this case that removed about 11K from a 144K diff, but a 133K diff is still a lot to take in, but, as stated, also undertand sometimes it is needed...
Ok, let's kick out the WCHAR from Tidy. While it can not be said that is is not needed in Windows - the whole OS is using WCHAR! - but thankfully the parts of the OS used by tidy are presently taken care of in the system API, so for the moment we can continue to use char * in a fully portable way...
In general, Tidy has avoided including <windows.h> in most modules, and would like to keep it that way for as long as possible. And even in the mappedio.c case, which has to use the native Windows API, for memory mapping, we chose to specifically use CreateFileA, and thus use the common ctmbstr filnam... and would have preferred it not be included in tidy.c either, for the console change, but that's another story...
In another big unix app, someone decided they just had to use wchar_t for Windows, and wow, you should see the squiggly, ugly, switched, code that resulted, and it was weeks, months to get it near right! So, agreed, no WCHAR for Tidy, for the moment...
Not sure where you had a big internal debate over printf formats. I would be 100% for Tidy only needs to support what we use now. And given that we deal with html, I can not see us even needing int and uint. Since we would not been dealing with over 2 million lines, they are the same... but, ok, no problem...
So, yes let's remove WCHAR and larger ints, doubles and pointers, and none of my patch would be required!
That I would prefer...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/balthisar,6,https://github.com/htacg/tidy-html5/pull/507#issuecomment-285907082,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","@geoffmcl, thanks for the continued feedback. I am very happy with the cleanup by eliminating all of the types. The internal debate was mostly centred about people adding strings and using new types for whatever reason. The current code is much cleaner.
Still...

And given that we deal with html, I can not see us even needing int and uint.

There are exactly four uses of %d in the strings, and I know for a fact that they predate my involvement! ;-)
I went ahead and left doubles in there, as they're not causing any harm. Maybe we'll add benchmarking or something in the future, and want to report that Tidy took 0.0025 seconds to complete (although I'd use milliseconds myself...).
Also I spent a couple of hours cleaning up my Windows environment, and things look good on Windows now, too.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/507#issuecomment-286154511,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","Yes, your cleaned branch compiled in Windows, and I have had a chance to run some small tests, and all looked fine...
Can not see any reason why this is not merged to development next... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,507,2017-03-05T21:16:28Z,2017-03-13T17:33:13Z,2017-03-13T17:52:18Z,CLOSED,False,1930,875,14,https://github.com/balthisar,Message system refactoring and new API,9,[],https://github.com/htacg/tidy-html5/pull/507,https://github.com/balthisar,8,https://github.com/htacg/tidy-html5/pull/507#issuecomment-286182799,"This addresses #409, and should be considered after merging #504 first.
The lengthy commit notes aren't put here automatically by Github yet, but they can be read here: eaa9b33
This is a big positive change moving forward!","Hmmm... not sure why my command line merge didn't close this automatically, so I guess I'll close it myself.
Thanks for the check, @geoffmcl.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,509,2017-03-08T20:39:08Z,2017-03-09T18:00:57Z,2017-03-09T18:02:04Z,MERGED,True,27,7,2,https://github.com/balthisar,Address issue #472.,2,[],https://github.com/htacg/tidy-html5/pull/509,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/509,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,510,2017-03-08T21:54:41Z,2017-03-09T18:00:31Z,2017-03-09T18:02:09Z,MERGED,True,38,0,1,https://github.com/balthisar,Addresses #492.,1,[],https://github.com/htacg/tidy-html5/pull/510,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/510,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,513,2017-03-11T23:40:37Z,2017-03-13T17:51:28Z,2017-03-13T17:52:16Z,CLOSED,False,2664,1085,30,https://github.com/balthisar,Custom Tags,21,[],https://github.com/htacg/tidy-html5/pull/513,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/513,"Supporting #119, this PR addressed the issue of custom elements and the is attribute.
Don't try to read this PR until #507 is merged, as #507 is pretty massive. This PR will not merge cleanly into next by itself.
Please squash before merging to avoid all of the WIP commits.","Supporting #119, this PR addressed the issue of custom elements and the is attribute.
Don't try to read this PR until #507 is merged, as #507 is pretty massive. This PR will not merge cleanly into next by itself.
Please squash before merging to avoid all of the WIP commits.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,513,2017-03-11T23:40:37Z,2017-03-13T17:51:28Z,2017-03-13T17:52:16Z,CLOSED,False,2664,1085,30,https://github.com/balthisar,Custom Tags,21,[],https://github.com/htacg/tidy-html5/pull/513,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/513#issuecomment-286188533,"Supporting #119, this PR addressed the issue of custom elements and the is attribute.
Don't try to read this PR until #507 is merged, as #507 is pretty massive. This PR will not merge cleanly into next by itself.
Please squash before merging to avoid all of the WIP commits.",See #514 instead.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,514,2017-03-13T17:51:10Z,2017-03-19T12:08:59Z,2017-03-19T12:11:54Z,MERGED,True,851,217,25,https://github.com/balthisar,Support custom tags,11,['Feature Request'],https://github.com/htacg/tidy-html5/pull/514,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/514,"Add support for the is attribute.
Add support for autonomous custom elements.

This squashed version replaces previous RP.","Add support for the is attribute.
Add support for autonomous custom elements.

This squashed version replaces previous RP.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/516,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.",True,{'THUMBS_UP': ['https://github.com/AlbertWiersch']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/516#issuecomment-288999634,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","It builds and runs, but all of my Windows installations have the runtimes installed, so I can't actually test that the libraries are truly statically linked, so I'm okay with this PR.
My only question is why the ugly license from the tidy.h header with the stupid Doxygen comments? The older .md file was a lot more readable.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/516#issuecomment-289022427,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","@balthisar Thanks for testing...
There are a few clues that the libraries are statically linked. The first is the size... I see at least 150K added. But the best is to run dumpbin /ALL tidy.exe > temp.txt, and search for imports:. There you will see a list for the /MD version, and just one for the /MT version... You need to be in a MSVC prompt to run dumpbin...
I have my own dump4, but it is broken at the moment for the 64-bit build... It also list the imported DLLs, when it is working ;=))

why the ugly license from the tidy.h header with the stupid Doxygen comments?

Initially just needed a file to test - one of the windows binary builders insists it be a .txt file - then forgot about it...
Maybe it could be a straight copy of LICENSE.md, or maybe delete what I hastily added, and rename that to .txt?
What do you think?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/516#issuecomment-289024650,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","Maybe it could be a straight copy of LICENSE.md, or maybe delete what I hastily added, and rename that to .txt?

Either or. I've been spending a lot of time with Doxygen lately, and the ugly syntax is driving me crazy. I've got to say, though, that it generates pretty websites.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/AlbertWiersch,5,https://github.com/htacg/tidy-html5/pull/516#issuecomment-289051493,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","If you test a build with virustotal.com and go to the 'File detail' tab, it will show the 'PE imports'. The one that is statically linked only shows 'KERNEL32.dll' whereas the others show a lot of other required DLLs.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/516#issuecomment-289056324,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","Yes, thanks for that... I just did a 5.5.12 /MT build of tidy.exe, and unfortunately it still show Qihoo-360... are you a member there... can you leave a comment that this appears to be a false positive?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,516,2017-03-23T13:58:41Z,2017-03-24T14:21:18Z,2017-03-24T17:02:05Z,MERGED,True,94,6,2,https://github.com/geoffmcl,Cpack test,12,[],https://github.com/htacg/tidy-html5/pull/516,https://github.com/AlbertWiersch,7,https://github.com/htacg/tidy-html5/pull/516#issuecomment-289081899,"Added ability to add system DLLs to packages, but it seems to miss some...
Add an option to build the MSVC static runtime, /MT, version.","Sorry, I'm not a member there. I would just ignore it... with all those virus checkers and constant changes and updates, false positives happen rather often it seems. If you still want to contact someone then I think you need to contact Qihoo directly. Most anti-malware companies should have a way to submit false positives.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,517,2017-03-26T15:01:46Z,2017-03-31T17:35:42Z,2017-05-16T16:20:48Z,MERGED,True,37,17,2,https://github.com/geoffmcl,Issue 333,5,[],https://github.com/htacg/tidy-html5/pull/517,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/517,This looks like a fix to issue #333... hope others get a chance to pull and test... thanks...,This looks like a fix to issue #333... hope others get a chance to pull and test... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,517,2017-03-26T15:01:46Z,2017-03-31T17:35:42Z,2017-05-16T16:20:48Z,MERGED,True,37,17,2,https://github.com/geoffmcl,Issue 333,5,[],https://github.com/htacg/tidy-html5/pull/517,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/517#issuecomment-290778056,This looks like a fix to issue #333... hope others get a chance to pull and test... thanks...,Hmmm... I thought I commented on this as tested a few days ago. Works for me.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,518,2017-03-26T20:21:50Z,2017-09-21T11:39:56Z,2021-07-29T10:53:18Z,CLOSED,False,5846,4668,19,https://github.com/balthisar,Word wrap squashed,9,[],https://github.com/htacg/tidy-html5/pull/518,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/518,"Implement word-wrapping in Tidy

Give Tidy an internal TY_(tidyWrappedText) and external tidyWrappedText service.
Add TidyConsoleWidth to configuration options (--console-width).
Implement wrapping for non-report messages.
language_en.h updated a bit for changed newlines.
Implemented wrapping in the console application strings.
tidy.c console application sniffs out terminal width in Win/*nix.

Improved documentation

Fully documented tidy.c in Doxygen format.
This file contents are re-ordered so that the functions can be easily grouped
in Doxygen. There's a word_wrap branch in the API website right now that
shows this documentation. Will update that site after this merge.

Compiler warnings

Snuffed out a couple of outstanding compiler warnings on Windows and Linux.

Tested to build and run on:

Mac OS X
Ubuntu
Windows 10

Regression testing:

Using the new branch word_wrap, there are zero regressions when tested in
Mac OS X, Ubuntu, and Windows 10.
In word_wrap, all of the config files were updated to use --console-width 80,
so that regression testing won't be dependent on the testers' console width!
Will update the testing branch after merge.","Implement word-wrapping in Tidy

Give Tidy an internal TY_(tidyWrappedText) and external tidyWrappedText service.
Add TidyConsoleWidth to configuration options (--console-width).
Implement wrapping for non-report messages.
language_en.h updated a bit for changed newlines.
Implemented wrapping in the console application strings.
tidy.c console application sniffs out terminal width in Win/*nix.

Improved documentation

Fully documented tidy.c in Doxygen format.
This file contents are re-ordered so that the functions can be easily grouped
in Doxygen. There's a word_wrap branch in the API website right now that
shows this documentation. Will update that site after this merge.

Compiler warnings

Snuffed out a couple of outstanding compiler warnings on Windows and Linux.

Tested to build and run on:

Mac OS X
Ubuntu
Windows 10

Regression testing:

Using the new branch word_wrap, there are zero regressions when tested in
Mac OS X, Ubuntu, and Windows 10.
In word_wrap, all of the config files were updated to use --console-width 80,
so that regression testing won't be dependent on the testers' console width!
Will update the testing branch after merge.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,518,2017-03-26T20:21:50Z,2017-09-21T11:39:56Z,2021-07-29T10:53:18Z,CLOSED,False,5846,4668,19,https://github.com/balthisar,Word wrap squashed,9,[],https://github.com/htacg/tidy-html5/pull/518,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/518#issuecomment-289538089,"Implement word-wrapping in Tidy

Give Tidy an internal TY_(tidyWrappedText) and external tidyWrappedText service.
Add TidyConsoleWidth to configuration options (--console-width).
Implement wrapping for non-report messages.
language_en.h updated a bit for changed newlines.
Implemented wrapping in the console application strings.
tidy.c console application sniffs out terminal width in Win/*nix.

Improved documentation

Fully documented tidy.c in Doxygen format.
This file contents are re-ordered so that the functions can be easily grouped
in Doxygen. There's a word_wrap branch in the API website right now that
shows this documentation. Will update that site after this merge.

Compiler warnings

Snuffed out a couple of outstanding compiler warnings on Windows and Linux.

Tested to build and run on:

Mac OS X
Ubuntu
Windows 10

Regression testing:

Using the new branch word_wrap, there are zero regressions when tested in
Mac OS X, Ubuntu, and Windows 10.
In word_wrap, all of the config files were updated to use --console-width 80,
so that regression testing won't be dependent on the testers' console width!
Will update the testing branch after merge.","@balthisar I have reviewed this - it compiles and runs fine in Windows... thanks...
But as usual it is quite difficult to review a 230K diff file... As suggested previously, it would be much better if done in increments, and keep issues separate... new feature vs formats vs ... but ok, understand when you are on a roll, you are on a roll... ;=))
What exactly is word wrapping? Is this addressing a bug, or a specific Feature Request. Simply, why do we need a new configuration, --console-width?
In reading the TidyConsoleWidth, and some of the code... I think I understand - but in language-en.h I can see you sometimes removed the newline, \n, but in other case kept, or added them... And I can still read output to 78 characters per line here and there... Quite confusing, sort of contrary...
AFAIK the console will wrap a string anyway... in linux and Windows at least... but I was happy that tidy had long ago sort of chosen a wrap at about 70+ chars... because again if I read correctly, if I have redirection in place, such wrapping will now not take place - still to test this - but then not all editors I use either support, or can be configured to do, line wrap, so long lines would go out of view...
And as you point out, this means updating the tidy-tests bases to match, which you mention will happen after the merge... and adding this new config option, already in branch word_wrap...
Not that I am against it, just rather curious about the use case...
Of course the other big part seems to be the Doxygen formatting... although still to carefully read through all the changed wording, aside from the format changes, but what I did read looks good... thanks...
Just a small coloring changed noted in the API docs since 5.4.0... while I consider myself a poor judge of style, I do not like the red on green... seems to lack sufficient contrast, but perhaps that is just my failing sight...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,518,2017-03-26T20:21:50Z,2017-09-21T11:39:56Z,2021-07-29T10:53:18Z,CLOSED,False,5846,4668,19,https://github.com/balthisar,Word wrap squashed,9,[],https://github.com/htacg/tidy-html5/pull/518,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/518#issuecomment-289547584,"Implement word-wrapping in Tidy

Give Tidy an internal TY_(tidyWrappedText) and external tidyWrappedText service.
Add TidyConsoleWidth to configuration options (--console-width).
Implement wrapping for non-report messages.
language_en.h updated a bit for changed newlines.
Implemented wrapping in the console application strings.
tidy.c console application sniffs out terminal width in Win/*nix.

Improved documentation

Fully documented tidy.c in Doxygen format.
This file contents are re-ordered so that the functions can be easily grouped
in Doxygen. There's a word_wrap branch in the API website right now that
shows this documentation. Will update that site after this merge.

Compiler warnings

Snuffed out a couple of outstanding compiler warnings on Windows and Linux.

Tested to build and run on:

Mac OS X
Ubuntu
Windows 10

Regression testing:

Using the new branch word_wrap, there are zero regressions when tested in
Mac OS X, Ubuntu, and Windows 10.
In word_wrap, all of the config files were updated to use --console-width 80,
so that regression testing won't be dependent on the testers' console width!
Will update the testing branch after merge.","But as usual it is quite difficult to review a 230K diff file... As suggested previously, it would be much better if done in increments, and keep issues separate... new feature vs formats vs ... but ok, understand when you are on a roll, you are on a roll... ;=))

Yeah, sorry about that. When I was looking through the code to figure out where to wrap text in the console, it seemed like a good opportunity to document it, too. The actual functional changes are pretty small. I'll resist that urge to document in the future (i.e., change existing documentation in a separate step).

What exactly is word wrapping? Is this addressing a bug, or a specific Feature Request. Simply, why do we need a new configuration, --console-width?

Feature request. One that I've had for a while.

language-en.h I can see you sometimes removed the newline, \n, but in other case kept, or added them... And I can still read output to 78 characters per line here and there... Quite confusing, sort of contrary...

I kept the newlines where paragraph breaks should occur, or when wanting to force a line wrap, like in the help text. In some cases it was grouping the newlines, e.g., ""\n\n"" just to make it easier to manage the paragraph text. Ah, yes, that note about 78 characters per line is still important for East Asian languages, because they very often don't have spaces! Strictly speaking I could borrow code from Unicode people that implements rules for East Asian line breaks, but I think most of that is C++ code. If anyone ever bothers to translate into Chinese and they raise a fuss, I can revisit this issue.

AFAIK the console will wrap a string anyway...

If the console is fewer than 80 characters, it won't wrap at work breaks; it just wraps wherever. But mostly I like to work with wider terminals, and this allows wrapping much longer.

if I have redirection in place, such wrapping will now not take place

Nope. If you have redirection in place, then wrapping will be per the console-width setting, which defaults to 80. We could change this to 78 if desired. In effect, with redirection Tidy behaves like it always has done (other than 80 vs 78 columns).

Just a small coloring changed noted in the API docs since 5.4.0... while I consider myself a poor judge of style, I do not like the red on green... seems to lack sufficient contrast, but perhaps that is just my failing sight...

Yeah, that does look hideous, both with the color theme but also in its own right! I'll make that change in the word_wrap branch.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,518,2017-03-26T20:21:50Z,2017-09-21T11:39:56Z,2021-07-29T10:53:18Z,CLOSED,False,5846,4668,19,https://github.com/balthisar,Word wrap squashed,9,[],https://github.com/htacg/tidy-html5/pull/518,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/518#issuecomment-289609684,"Implement word-wrapping in Tidy

Give Tidy an internal TY_(tidyWrappedText) and external tidyWrappedText service.
Add TidyConsoleWidth to configuration options (--console-width).
Implement wrapping for non-report messages.
language_en.h updated a bit for changed newlines.
Implemented wrapping in the console application strings.
tidy.c console application sniffs out terminal width in Win/*nix.

Improved documentation

Fully documented tidy.c in Doxygen format.
This file contents are re-ordered so that the functions can be easily grouped
in Doxygen. There's a word_wrap branch in the API website right now that
shows this documentation. Will update that site after this merge.

Compiler warnings

Snuffed out a couple of outstanding compiler warnings on Windows and Linux.

Tested to build and run on:

Mac OS X
Ubuntu
Windows 10

Regression testing:

Using the new branch word_wrap, there are zero regressions when tested in
Mac OS X, Ubuntu, and Windows 10.
In word_wrap, all of the config files were updated to use --console-width 80,
so that regression testing won't be dependent on the testers' console width!
Will update the testing branch after merge.","@balthisar this is nothing about your Doxygen improvements... everything there seems very good... and lots of work... thanks...

Feature request. One that I've had for a while.

Well, we are owners, so I guess in a way, what we would like will prevail... no discussion...
But me, on, wrap text, I would like to discuss this more...
Simply, you have not yet convinced me that we must remove the \n from many messages, and replace it with this console-width option...
I think today everybody uses a console much wider that something like about 80 characters, but I really have no problem that tidy messages wrap at about that length... with a \n embedded in the message stream...
So, no, I do not see the introduction of this new option, as necessary, required, or desired... but maybe I am wrong!
Note, have still to test what happens when one of the outputs is redirected...
Remove this from the PR, and the rest is ok... great even...
If you feel very strongly on wrap text, then open an issue, and let's discuss it... in detail, advantages, disadvantages, reasons, gains, losses, etc... including languages that do not normally have a space wrap...
But right now, I personalty am against this all inclusive PR... sorry...
And very thankful for some color style changes in the API docs... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,518,2017-03-26T20:21:50Z,2017-09-21T11:39:56Z,2021-07-29T10:53:18Z,CLOSED,False,5846,4668,19,https://github.com/balthisar,Word wrap squashed,9,[],https://github.com/htacg/tidy-html5/pull/518,https://github.com/balthisar,5,https://github.com/htacg/tidy-html5/pull/518#issuecomment-289636462,"Implement word-wrapping in Tidy

Give Tidy an internal TY_(tidyWrappedText) and external tidyWrappedText service.
Add TidyConsoleWidth to configuration options (--console-width).
Implement wrapping for non-report messages.
language_en.h updated a bit for changed newlines.
Implemented wrapping in the console application strings.
tidy.c console application sniffs out terminal width in Win/*nix.

Improved documentation

Fully documented tidy.c in Doxygen format.
This file contents are re-ordered so that the functions can be easily grouped
in Doxygen. There's a word_wrap branch in the API website right now that
shows this documentation. Will update that site after this merge.

Compiler warnings

Snuffed out a couple of outstanding compiler warnings on Windows and Linux.

Tested to build and run on:

Mac OS X
Ubuntu
Windows 10

Regression testing:

Using the new branch word_wrap, there are zero regressions when tested in
Mac OS X, Ubuntu, and Windows 10.
In word_wrap, all of the config files were updated to use --console-width 80,
so that regression testing won't be dependent on the testers' console width!
Will update the testing branch after merge.","I'll open an issue tomorrow, but the biggest argument is, if you pretend it doesn't exist, then there's zero difference in how Tidy behaves. If you know that it exists, you can use the full width of your console, or when redirecting, eliminate carriage returns from the file output. Perhaps the biggest gain is for message API users; they gain complete strings for UI applications without spurious newlines that upset formatting with proportional fonts or different sized text containers.",True,{'THUMBS_UP': ['https://github.com/fyiman']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,529,2017-04-15T00:29:06Z,2017-04-15T03:00:04Z,2017-05-06T20:53:11Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,[],https://github.com/htacg/tidy-html5/pull/529,https://github.com/lhchavez,1,https://github.com/htacg/tidy-html5/pull/529,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Fixes #461.","HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Fixes #461.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,529,2017-04-15T00:29:06Z,2017-04-15T03:00:04Z,2017-05-06T20:53:11Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,[],https://github.com/htacg/tidy-html5/pull/529,https://github.com/lhchavez,2,https://github.com/htacg/tidy-html5/pull/529#issuecomment-294267900,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Fixes #461.","After a bit more though, I think I'd rather fix #461 more generally. I still want to submit this, but I'll rename the branch to something more appropriate.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,1,https://github.com/htacg/tidy-html5/pull/530,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,2,https://github.com/htacg/tidy-html5/pull/530#issuecomment-294268332,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","PTAL! I tested this against geoffmcl/tidy-test@4f6089b and passes, and against https://github.com/htacg/tidy-html5-tests , where the insert-inline-tags config needs to be added to case-1015959.conf in order to pass completely.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/530#issuecomment-297101888,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez sorry for the brief delay in replying on this...
Although I have not yet tested it, it looks good eye-balling the changes...
Unless someone has a negative comment, I will merge this in a few days... thanks...
PS: The same for #531 and #532... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/530#issuecomment-297792843,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.",Test successful on macOS.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298176698,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez ok, have now had a chance to pull your fork, branch add-insert-inline-tag, build and test...
It certainly passes using my in_461.html, in that, now by default, tidy will not propagate the <span>, unless I add --insert-inline-tags yes to the config... so this is good...
But I guess I am confused with the current state of the regression tests! Using the next branch, I get problems on much more than case 1015959! And there is no case-1015959.conf. That case uses config_default.conf, but even adding insert-inline-tags: yes to it does not clear up the several problems...
@balthisar, you say ""Test successful on macOS"", but is that the simple in_461.html test, or the full 232 regression tests... maybe I should be using some other tests branch? Or something...
Maybe we should, initially at least, default the insert-inline-tags option to yes, to keep the current behavior? Just for a certain period of time... or something...
Anyway, seek more comments, feedback before merging this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,6,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298177770,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","hmm interesting. let me try running that again AND sending the patch to the regression tests, which I should have done from the beginning instead of just mentioning it in the PR. Sorry about that.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,7,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298179067,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","All right, checking out the next branch plus this PR, building it and running it against htacg/tidy-html5-tests#13 passes everything on my machine. Let me know if there's anything else that's missing and thank you for your time :D",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298184688,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez ok, I can see you have added a case-1015959.conf, which is just a copy of the default with insert-inline-tags: yes added... thanks, and that gets through the first part of the tests, which just checks tidy's exit value...
But I am still getting differences when doing the diff -u ../cases/testbase-expects ../cases/testbase--results, which is the second part of the tests, but maybe I am doing something really wrong...
There is a diff on cases 1050673, 1062511, 1068087, 1410061b, 1410061c, 1423252, 1638062, 1773932, 427838, and quite a few more...
Naturally, I do not get these diffs when using next Tidy 5.5.14... Of course, leaving the new addition conf file there, I do get an expected diff, since 5.5.14 does not know about this option... of -
diff -u ..\cases\testbase-expects\case-1015959.txt ..\cases\testbase-results\case-1015959.txt
--- ..\cases\testbase-expects\case-1015959.txt	Sat Apr 29 18:19:59 2017
+++ ..\cases\testbase-results\case-1015959.txt	Sat Apr 29 19:17:25 2017
@@ -1,3 +1,4 @@
+Config: unknown option: insert-inline-tags
 line 7 column 1 - Warning: missing </font> before <p>
 line 8 column 4 - Warning: inserting implicit <font>
 line 9 column 4 - Warning: inserting implicit <font>
Taking just case 1050673... it is a simple html mess -
<HEAD>
<TITLE>
<MARQUEE>
</BASEFONT>
</BODY>
<B>
<BASE>
<HR>
Using 5.5.14 I get the output - and ignoring the different warnings issued for now -
<!DOCTYPE html>
<html>
<head>
<meta name=""generator"" content=
""HTML Tidy for HTML5 for Windows version 5.5.14"">
<title></title>
<base>
</head>
<body>
<hr>
</body>
</html>
When I use 5.5.14.I461 I get a completely different output -
<!DOCTYPE html>
<html>
<head>
<meta name=""generator"" content=
""HTML Tidy for HTML5 for Windows version 5.5.14.I461"">
<title></title>
</head>
<body>
<b>
<base>
<hr></b>
</body>
</html>
Quite a lot of striking differences... <base> not in <head>, <b> retained...
Note, to get that additional version numbering, you can add -DTIDY_RC_NUMBER=I461 to the cmake command line... this is how I try to make sure I am running the modified version of tidy...
This was all using a Windows build... maybe I have done something really crazy... tomorrow, or soonest, I will re-run the build and test in linux... sorry for the delay...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,9,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298185111,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","ah! I thought ./runalltests.sh ran everything :P okay, let me go back and investigate the failures. Sorry for any confusion I caused.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,10,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298186244,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez yes, sorry, maybe we do not make it clear enough that the tests are at two levels... will try to look at the docs on this...
Using the Windows tools-cmd bat files, I do do this diff, and report a problem if diff does not exit zero... maybe this 2nd diff part needs to be added to runalltests.sh also?
PS: Of course in testing 5.5.14.I461 using the option --insert-inline-tags yes, I do get back close to what is expected -
<!DOCTYPE html>
<html>
<head>
<meta name=""generator"" content=
""HTML Tidy for HTML5 for Windows version 5.5.14.I461"">
<title></title>
<base>
</head>
<body>
<hr>
</body>
</html>
Still to check this, and the warnings closely for an exact match...
As mentioned earlier, maybe the default should be yes at this time... but maybe there is also more to understand here... maybe need to add more checking to the PR... unfortunately out of time tonight... be back soonest...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,11,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298194433,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","All right, inspected a few of the failures and it turns out that having this flag off by default produces HTML that is incorrect in edge cases :( I agree that the default should be yes because it's probably more correct to deal with the edge cases on a case-by-case basis like I did for #531
This now passes with tip-of-tree https://github.com/htacg/tidy-html5-tests (and I made sure to inspect the diffs this time), so PTAAL!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,12,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298204928,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez back briefly after dinner...
Wow, really sorry you are feeling frustrated with trying to add a new option to tidy... I can say I also feel that many, many times...
Not sure what you describe as edge cases... Tidy tries very hard to deal with whatever it is given... whatever the html mess is... edge or not... and tries to produce valid html output, regardless...
Ok, you have flipped the default to yes... but have you fully described to the user what is likely to happen if they set this option to no? What are the full consequences... I agree your help text describes one case, but it seems there are others... quite difficult to describe...
Please do not get me wrong... I seem to support, encourage, such an option... it does do some things I may want, as in my simple in_461.html case... I only suggest maybe more could be done to protect against what you call edge cases...
Like in src/istack.c, should we block every InlineDup just because this option is no? Or in src/parser.c, where there is already a big comment about block level tags end this element... big consequences..., should it also be only on this option is no?
Now, I do not know yet the full answers to these questions! But am willing to explore!
Although I have still to test #531, there seems a good case for having a separate parser function for <button>... and will get around to testing this...
And again, thanks for the PR 14 on tidy-tests documentation... this looks good...
I have still to run the tests in linux, to see how we can clearly describe what the regression tests do...

stage 1 - just tidy exit value...
stage 2 - diff of the result to expected...

but on reading this feel sure it helps... and assume this negates the previous PR 13...
So again very sorry this feels like such a frustrating process...
While in some ways HTML Tidy is simple, in other ways it can be quite complex... developed over a long period of time, by many participants...
Please continue to try to help... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,13,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298810828,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez now that we are specifically addressing the <button> issue #461, with your, or my alternative, branch issue-461 patch, is this new option really required?
Are there other cases, like your <div> sample, where this is required, desired, beneficial?
Yes, in a way, we understand browsers, in general, accumulate, set, display type attributes, until the next DOM change, and do not close, revert, such attributes, on the next block element, but should Tidy also do this?
And as demonstrated, this can have dire consequences... at least for legacy doctypes, and certain html snippets...
You have now defaulted this option to yes, so it only influences those that add a no to the config...
Even if this option is accepted, then at the very least, I would like the help text expanded to -
        TidyInsertInlineTags,               0,
        ""This option enables inserting \""missing\"" inline elements around the\n""
        ""contents of blocklevel elements such as <code>P</code>,\n""
        ""<code>DIV</code>, etc. For instance, this causes\n""
        ""<code><span><div>OK</div></span></code> to become\n""
        ""<code><span><div><span>OK</span></div></span></code>.\n""
        ""Experimental: Warning - Setting this option to <code>no</code>\n""
        ""can have \""dire\"" consequences on some html documents!\n""
        ""It can result in Tidy outputting \""invalid\"" html!\n""
        ""Use at your own risk!\n""

Or something like that! It explains the risk...
Simply, abandoning the current default behavior of Tidy can produce invalid html... like case 1050673...
And now that we have identified, and have fixes for the <button> case, should not each such block element be dealt with individually, rather than a gross abandonment of this behavior?
Maybe I am really out of order here...
As always, just seek comments, feedback, ideas... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/lhchavez,14,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298817820,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","Ah sorry that I hadn't replied. I agree with you in general, but there is one use case I think this still might be useful: templating languages. If we declare a custom tag it has to be either blocklevel or inline, and whichever one you choose will cause Tidy to insert extraneous closing tags in some places.
The one I'm interested in is the one from Vue, but since they use <template>...</template>, and (after just going through the spec one more time) IIUC that one's content model includes almost every other tag and can be added mostly anywhere, I might have run into another bug. I'll probably re-try whatever I was doing and document the exact failures instead of adding workarounds.
Having said that, I'm fine with either adding this flag with the warnings you suggested, or adding a new kind of custom tag that can be placed anywhere and supports adding any element without Tidy trying to guess whether tags should be closed when the boundary is straddled (which is mostly the same as adding this flag, but containing its effect within a small scope of the file). Regardless, I'll try to send patches to fix any issues I see specifically with Vue :)",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,530,2017-04-15T03:06:17Z,2017-05-06T20:53:06Z,2017-05-06T20:53:07Z,CLOSED,False,24,1,5,https://github.com/lhchavez,Add a flag to avoid propagating inline elements across blocks,2,['Feature Request'],https://github.com/htacg/tidy-html5/pull/530,https://github.com/geoffmcl,15,https://github.com/htacg/tidy-html5/pull/530#issuecomment-298945794,"This change adds the InsertInlineTags flag (default=on) that propagates
inline elements across block boundaries. This causes
<span><div>OK</div></span>

to become
<span><div><span>OK</span></div></span>

This fixes issue #461.","@lhchavez given that you agree with the additional warning, if you can provide some use cases, samples, and show how it can be helpful, maybe there is an argument for this option... just concerned that it can also mangle a document... but not entirely against it...
But it seems your initial example is not exactly correct. The current, normal propagation of Tidy will close the <span> on reaching the <div>, and then reopen it, or inline-duplicate it, after the <div>, and then close it before the end </div>. And, unless you add --drop-empty-elements no, will then drop the leading empty <span>...
In other words, <span><div>OK</div></span> will become <div><span>OK</span></div>, and <span><p>OK</p></span> will become <p><span>OK</span></p>, etc...
Accordingly, below is the corrected text, plus the suggested warning, now conforming to the text template -
        TidyInsertInlineTags,               0,
        ""This option enables inserting \""missing\"" inline elements around the ""
        ""contents of blocklevel elements such as <code>P</code>, ""
        ""<code>DIV</code>, etc. For instance, this causes ""
        ""<code><span><div>OK</div></span></code> to become ""
        ""<code><div><span>OK</span></div></code>.""
        ""<br/>""
        ""Experimental: Warning - Setting this option to <var>no</var> ""
        ""can have \""dire\"" consequences on some html documents! ""
        ""It can result in Tidy outputting \""invalid\"" html! ""
        ""Use at your own risk!""

But now we agree it must default to yes, maybe this could be completely reworded, in light of the above - sort of making it clearer that this has always been Tidy's normal behavior, and this option allows that to be reversed...
Maybe you could add that text, or a modified version, to the PR... if you agree...
What do others think? Would certainly appreciate some more feedback on this option. For sure, I am still slightly on the negative side, but can be swayed by use cases, where it helps, with samples, and helpful comments... thanks...
PS: A +1 will not cut it here ;=))",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/lhchavez,1,https://github.com/htacg/tidy-html5/pull/531,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.","HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/lhchavez,2,https://github.com/htacg/tidy-html5/pull/531#issuecomment-294268263,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.",PTAL! This was tested against geoffmcl/tidy-test@4f6089b and passes.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/531#issuecomment-297102685,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.",As replied to #530...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/531#issuecomment-297792299,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.",Confirmed as working on macOS.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/531#issuecomment-298679986,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.","@lhchavez sorry for the delay on this...
I was working on an alternate patch, to put this change of the parser for <buttom> in TY_(ResetTags) - reset to html5, and TY_(AdjustTags) - set to html4 mode, if a legacy doctype is found. As you will see this is where several other such mode swithes are handled...
And have pushed my patch to the issue-461 branch for testing...
This would keep all the switches between html5 and htm4 mode in one place, rather than creating a new parser just for <button>, which does the same thing - switches between ParseInline and ParseBlock...
But ran into regression testing problems, in that my fix caused quite a number of diffs, and some exit value changes... Arrgh!!!
On investigating this, it seems some errors have crept into the regression tests!
Now most of the regression tests are still legacy documents. Take say 1086083. It is HTML 4.01, and testcase contains the code <li>Huh?</li>, and tidy is supposed to fix this by adding a <ul>, which, if we back up the tidy-tests repo is what we will find in the original out_1086083.html, but not in the current expects/case-1086083.html!
In other words, this expects/case-1086083.html now fails validation with the error Line 16, Column 6: document type does not allow element ""LI"" here; missing one of ""UL"", ""OL"" start-tag! While the original out_1086083.html passes!!
That is we now expect, allow some html5 tolerance in a legacy document, and this is an error! And there seems to be several other similar cases... yet to be explored fully...
Now this has nothing to do with <button>, or #461, and may in fact merge this, as is, until I can find time to investigate and correct the current expects, in a separate issue... please bear with me... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/531#issuecomment-298684091,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.","PS: Now opened Issue 15...
Any help appreciated... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,531,2017-04-15T03:06:28Z,2017-05-06T12:40:04Z,2017-05-06T20:53:09Z,CLOSED,False,18,1,3,https://github.com/lhchavez,Fix behavior of <button> elements in HTML 5,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/531,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/531#issuecomment-299637237,"HTML 5 restricts the children of  elements to only phrasing
content. HTML 4 also allowed block elements.
In particular, this change allows code such as
<span><button>OK</button></span>

to be left as-is, since the  does not need duplication for
crossing a block boundary. Mitigates #461.","@lhchavez as agreed have merged #540 and closed #461, so closing this...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,532,2017-04-15T03:19:02Z,2017-05-06T12:48:37Z,2017-05-06T20:53:08Z,MERGED,True,17,1,4,https://github.com/lhchavez,Add a flag to warn on proprietary attributes,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/532,https://github.com/lhchavez,1,https://github.com/htacg/tidy-html5/pull/532,"This change adds the TidyWarnPropAttrs flag (default=on) that emits a
warning every proprietary attribute it finds.","This change adds the TidyWarnPropAttrs flag (default=on) that emits a
warning every proprietary attribute it finds.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,532,2017-04-15T03:19:02Z,2017-05-06T12:48:37Z,2017-05-06T20:53:08Z,MERGED,True,17,1,4,https://github.com/lhchavez,Add a flag to warn on proprietary attributes,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/532,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/532#issuecomment-297103063,"This change adds the TidyWarnPropAttrs flag (default=on) that emits a
warning every proprietary attribute it finds.",As replied to #530... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,532,2017-04-15T03:19:02Z,2017-05-06T12:48:37Z,2017-05-06T20:53:08Z,MERGED,True,17,1,4,https://github.com/lhchavez,Add a flag to warn on proprietary attributes,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/532,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/532#issuecomment-297791814,"This change adds the TidyWarnPropAttrs flag (default=on) that emits a
warning every proprietary attribute it finds.",Works for me. Nice addition.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,532,2017-04-15T03:19:02Z,2017-05-06T12:48:37Z,2017-05-06T20:53:08Z,MERGED,True,17,1,4,https://github.com/lhchavez,Add a flag to warn on proprietary attributes,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/532,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/532#issuecomment-299637766,"This change adds the TidyWarnPropAttrs flag (default=on) that emits a
warning every proprietary attribute it finds.","@lhchavez have not had a chance to test this, but as @balthisar says, looks like a nice addition... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/spk,1,https://github.com/htacg/tidy-html5/pull/534,This allow to generate pkgconfig file from cmake for tidy,This allow to generate pkgconfig file from cmake for tidy,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/534#issuecomment-297105960,This allow to generate pkgconfig file from cmake for tidy,"@spk thanks for this PR... we like those...
But please remind me why we need a pkgconfig file... Working mainly in Windows, it seems this is not required, or used there... but...
And it seems you have only added it to the CPack package config... that is if a DEB/RPM/... is generated. What about a normal build and install from source?
However, it also seems no harm, so if no negative comments, will merge this in a few days... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/spk,3,https://github.com/htacg/tidy-html5/pull/534#issuecomment-297548541,This allow to generate pkgconfig file from cmake for tidy,"Hi @geoffmcl thanks for the feedback
The pkgconfig file is useful for people or tools that need to find information about the libs or headers; like the path of the tidy.h on the system with for example pkg-config --cflags tidy give for me -I/usr/local/include
I found an issue with the Debian package with your information; currently going to /usr/local where for Debian its a violation of the policy, I will make a fix soon",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/534#issuecomment-297765857,This allow to generate pkgconfig file from cmake for tidy,Seems okay by me.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/spk,5,https://github.com/htacg/tidy-html5/pull/534#issuecomment-298721339,This allow to generate pkgconfig file from cmake for tidy,@geoffmcl @balthisar I found a fix with pkgconfig with packages in 3333ca7 let me know what you think?,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/534#issuecomment-298802449,This allow to generate pkgconfig file from cmake for tidy,"@spk thank you for the update...
However, as a mainly Windows person, where this pkgconfig change is never used, I think?, then I am not the person to decide on this...
One comment against currently going to ""/usr/local"" where for Debian its a violation of the policy, when working with the last Debian update - a very long and arduous process - I got the opposite impression... but what do I know...
See https://answers.launchpad.net/ubuntu/+source/tidy/+question/276623, and https://launchpad.net/ubuntu/+source/tidy-html5 - added Tidy 5.2.0...
Especially see Issue #354, and maybe others, for more on this Debian process... with @AdamMajer, @danielhjames, @jasonethomas, @mcandre, and we urge them to update to release Tidy 5.4.0... when they get the chance...
And maybe during the Debian package creation, this was already done... I do not know...
For sure, CMake defaults to /usr/local if no -DCMAKE_INSTALL_PREFIX=<path> is given... that is known...
Simply, if this is ok by @balthisar, in OS X, a *nix type OS, then for sure I have no problem with this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/balthisar,7,https://github.com/htacg/tidy-html5/pull/534#issuecomment-299166745,This allow to generate pkgconfig file from cmake for tidy,"@geoffmcl, @spk, from the Mac perspective but not as a pkg-config user, I'm okay with this. The default make install isn't broken, and the only difference is the include headers are now in a subdirectory (but still within the default header search path).
However, when attempting to make package I encounter this error on macOS:
CPack Error: Cannot initialize CPack generator: PackageMaker.
This makes sense. PackageMaker on macOS is long-deprecated. Let me see if I can find out how to tell CMake to use the current tools, or at least put in a guard for macOS prior to merging this.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/balthisar,8,https://github.com/htacg/tidy-html5/pull/534#issuecomment-299191483,This allow to generate pkgconfig file from cmake for tidy,"Okay, I found the macOS issue, so I'll merge this and then apply the macOS fix.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/AdamMajer,9,https://github.com/htacg/tidy-html5/pull/534#issuecomment-299882044,This allow to generate pkgconfig file from cmake for tidy,"There should be no problem with this change for any Linux distribution. If they don't need it, they will just not distribute the .pc file.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,534,2017-04-17T22:23:25Z,2017-05-04T13:53:14Z,2017-05-09T11:32:54Z,MERGED,True,37,4,5,https://github.com/spk,Generate pkgconfig file for tidy,2,"['Distribute', 'Build/Install']",https://github.com/htacg/tidy-html5/pull/534,https://github.com/spk,10,https://github.com/htacg/tidy-html5/pull/534#issuecomment-300136632,This allow to generate pkgconfig file from cmake for tidy,"Great, thanks !",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/biodranik,1,https://github.com/htacg/tidy-html5/pull/537,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/537#issuecomment-297109813,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","@deathbaba thanks for the PR... we like those...
Have not yet tested, but this looks like a simple, effective change...
Have you run the Regression Tests with this change? While this seems to comply with all html5 spec read, I have a small concern about legacy html4 docs... Maybe the change needs to also check the active doctype... but maybe not...
Given a suitable consideration of the above, and time for other comments, and feedback, will consider merging this in a few days... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/537#issuecomment-297789689,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","@geoffmcl, there are no regressions in the next testing branch, but there are no test cases using gdoc. However when used with gdoc, it works as advertised.
I suggest that we can accept this PR as is, however, I wonder if we should also check HTML version level, @deathbaba. For example, in HTML5 documents, name is conforming but deprecated:

Authors should not specify the name attribute on a elements.

This PR correctly allows id to be used, as is current standard for HTML5, but I wonder if we should flag a warning if name is found (in HTML5).
For HTML<5, I don't see an issue.
We could accept this as it fixes gdoc, then open another issue to consider the deprecation of name.
Thoughts?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/biodranik,4,https://github.com/htacg/tidy-html5/pull/537#issuecomment-297868800,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","Regression tests are all passing.
I suppose the warning about deprecated name is not related to -gdoc option at all. -gdoc should only clean html exported from Google Docs and it does it well with this fix. Interestingly enough, html exported from gdoc does not have DOCTYPE at all.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/balthisar,5,https://github.com/htacg/tidy-html5/pull/537#issuecomment-299232797,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","Fair enough. If no one objects to merging this, let's plan on rolling it at the same time as 461 and 338.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/537#issuecomment-299640259,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","@deathbaba as stated thanks for this... while I share the idea with @balthisar that the name has been depreciated in html5, but this can be raised as a separate issue if needed...",True,{'THUMBS_UP': ['https://github.com/biodranik']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,537,2017-04-20T00:52:35Z,2017-05-06T13:35:57Z,2017-05-06T15:08:09Z,MERGED,True,5,0,1,https://github.com/biodranik,Correctly process 'bookmarks' in html exported from Google Doc.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/537,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/537#issuecomment-299645864,"HTML exported from Google Docs contains empty anchors like <a id=""random id""></a>. They are used to ""bookmark"" any part of the document and make a link to it.
Looks like in the past (or for some specific documents) Google has used anchors like <a name=""random id""></a>, but now I don't see them any more.
Previous code moved ""name"" attribute to the parent ""id"" tag and deleted empty anchors. Proposed fix also supports ""id"" attribute in addition to ""name"".","@deathbaba I just created a simple gdoc online, and downloaded it, as a html zip... my last creation there was 2012!
I only had a header, <h1>, and two <p>...
Wow what a giant <style> mess they create ;=)) Creating some 25+ style elements, and only use abt 5 in the document...
And yes no <!DOCTYLE ...>, which would default to html5, but then uses legacy meta - <meta content=""text/html; charset=utf-8"" http-equiv=""content-type"">, and style - <style type=""text/css"">...
It immediately reminded me of the old MS Word 2000 export to html, which added lots of proprietary tags and attributes, but maybe not quite as bad... but close ;=))
Default tidy barked about the some of these, and immediately deleted 4 empty spans...
But zut, adding the -gdoc option certainly massively simplified the content...
Then I got adventurous, and added a couple of internal links - bookmarks - to the page and saw how tidy-5.5.18 correctly adds the id to the paragraphs, while tidy-5.5.14 failed...
Good work, and now see the name attribute has nothing to do with this issue...
Seems a very good fix... thanks...
PS: Add test in_537.html to my tidy-test repo, so other can try and verify this fix...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,540,2017-05-03T16:26:06Z,2017-05-06T12:19:18Z,2017-05-06T12:19:28Z,MERGED,True,27,10,1,https://github.com/geoffmcl,Issue #461 - alternative patch for this issue,1,['Bug'],https://github.com/htacg/tidy-html5/pull/540,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/540,"@lhchavez while your PR #531 does the same thing, this fix includes a fix for Issue #539, and some other code tidying... and as mentioned collects all the html5/html4 mode switching into one place... and avoids creating a special parser just for <button>...
Would be appreciated if you could checkout the issue-461 branch, and make sure it does the same job... thanks...
Of course, at this time it will fail the compare on some 9 regression tests, which I will address through Issue 15 once this is merged...","@lhchavez while your PR #531 does the same thing, this fix includes a fix for Issue #539, and some other code tidying... and as mentioned collects all the html5/html4 mode switching into one place... and avoids creating a special parser just for <button>...
Would be appreciated if you could checkout the issue-461 branch, and make sure it does the same job... thanks...
Of course, at this time it will fail the compare on some 9 regression tests, which I will address through Issue 15 once this is merged...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,540,2017-05-03T16:26:06Z,2017-05-06T12:19:18Z,2017-05-06T12:19:28Z,MERGED,True,27,10,1,https://github.com/geoffmcl,Issue #461 - alternative patch for this issue,1,['Bug'],https://github.com/htacg/tidy-html5/pull/540,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/540#issuecomment-299230832,"@lhchavez while your PR #531 does the same thing, this fix includes a fix for Issue #539, and some other code tidying... and as mentioned collects all the html5/html4 mode switching into one place... and avoids creating a special parser just for <button>...
Would be appreciated if you could checkout the issue-461 branch, and make sure it does the same job... thanks...
Of course, at this time it will fail the compare on some 9 regression tests, which I will address through Issue 15 once this is merged...","@geoff, confirmed working in both HTML4 mode (i.e., current behavior) and HTML5 mode (desired behavior) on macOS.
Nice fix on the HTML detection; this is definitely preferable to adding a new option.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,541,2017-05-03T20:22:04Z,2017-05-06T13:20:55Z,2017-05-06T13:22:49Z,MERGED,True,71,6,1,https://github.com/balthisar,Fix #338,2,[],https://github.com/htacg/tidy-html5/pull/541,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/541,"Issue #338 occurs because the existing routines assume that any URI with an extension is a file, and so links to TLD's ending with .pl, .au, etc., will cause accessibility warnings. This fix attempts to distinguish between URI's that are likely to be files versus links to domains.
Tested with next and no exit code regressions and nothing in the diff.
@geoff's test case in #338 now passes, and I would offer this as a new test case:
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""utf-8"">
<title>#338 - href with .au</title>
</head>
<body>
<p><a href=""http://www.other.com.au/file.txt"">(yes) Go to this site.</a></p>
<p><a href=""mailto:something@other.com.au"">(no) Mail Me</a></p>
<p><a href=""http://www.other.com.au"">(no) Go to this site.</a></p>
<p><a href=""http://www.other.com/file.au"">(yes) Link to this audio file.</a></p>
<p><a href=""file.au"">(yes) Link to this audio file (relative).</a></p>
<p><a href=""/something/file.au"">(yes) Link to this audio file (relative again).</a></p>
<p><a href=""/something/file.au/"">(no) Link to a directory.</a></p>
</body>
</html>","Issue #338 occurs because the existing routines assume that any URI with an extension is a file, and so links to TLD's ending with .pl, .au, etc., will cause accessibility warnings. This fix attempts to distinguish between URI's that are likely to be files versus links to domains.
Tested with next and no exit code regressions and nothing in the diff.
@geoff's test case in #338 now passes, and I would offer this as a new test case:
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""utf-8"">
<title>#338 - href with .au</title>
</head>
<body>
<p><a href=""http://www.other.com.au/file.txt"">(yes) Go to this site.</a></p>
<p><a href=""mailto:something@other.com.au"">(no) Mail Me</a></p>
<p><a href=""http://www.other.com.au"">(no) Go to this site.</a></p>
<p><a href=""http://www.other.com/file.au"">(yes) Link to this audio file.</a></p>
<p><a href=""file.au"">(yes) Link to this audio file (relative).</a></p>
<p><a href=""/something/file.au"">(yes) Link to this audio file (relative again).</a></p>
<p><a href=""/something/file.au/"">(no) Link to a directory.</a></p>
</body>
</html>",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,541,2017-05-03T20:22:04Z,2017-05-06T13:20:55Z,2017-05-06T13:22:49Z,MERGED,True,71,6,1,https://github.com/balthisar,Fix #338,2,[],https://github.com/htacg/tidy-html5/pull/541,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/541#issuecomment-299218167,"Issue #338 occurs because the existing routines assume that any URI with an extension is a file, and so links to TLD's ending with .pl, .au, etc., will cause accessibility warnings. This fix attempts to distinguish between URI's that are likely to be files versus links to domains.
Tested with next and no exit code regressions and nothing in the diff.
@geoff's test case in #338 now passes, and I would offer this as a new test case:
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""utf-8"">
<title>#338 - href with .au</title>
</head>
<body>
<p><a href=""http://www.other.com.au/file.txt"">(yes) Go to this site.</a></p>
<p><a href=""mailto:something@other.com.au"">(no) Mail Me</a></p>
<p><a href=""http://www.other.com.au"">(no) Go to this site.</a></p>
<p><a href=""http://www.other.com/file.au"">(yes) Link to this audio file.</a></p>
<p><a href=""file.au"">(yes) Link to this audio file (relative).</a></p>
<p><a href=""/something/file.au"">(yes) Link to this audio file (relative again).</a></p>
<p><a href=""/something/file.au/"">(no) Link to a directory.</a></p>
</body>
</html>","@balthisar thanks for looking into this...
I have checked out your issue_338 branch, built and tested both cases, and it seems good...
Since I was in there, namely access.c, in debug, I took the opportunity to hopefully fix two other access warnings -

Access: [3.2.1.1]:  missing. - But there is a html5 <!DOCTYPE html> so got rid of this warning
Access: [13.2.1.1]: Metadata missing. - Well, not sure I understand this test exactly, but my original in_338.html and your above additional in_338-2.html do have <meta charset=""utf-8"">, so again suppressed this warning if in html5 mode if this meta found...

My simple patch for these 2 -
diff --git a/src/access.c b/src/access.c
index 7244492..ac3b9aa 100644
--- a/src/access.c
+++ b/src/access.c
@@ -2761,6 +2761,10 @@ static Bool CheckMetaData( TidyDocImpl* doc, Node* node, Bool HasMetaData )
                         TY_(ReportAccessError)( doc, node, REMOVE_AUTO_REDIRECT);
                     }
                 }
+                if (TY_(IsHTML5Mode)(doc) && attrIsCHARSET(av) && hasValue(av))
+                {
+                    ContainsAttr = yes;
+                }
             }
         
             if ( HasContent || HasHttpEquiv )
@@ -2840,9 +2844,17 @@ static void CheckDocType( TidyDocImpl* doc )
         if (DTnode && DTnode->end != 0)
         {
             ctmbstr word = textFromOneNode( doc, DTnode);
-            if ((strstr (word, ""HTML PUBLIC"") == NULL) &&
-                (strstr (word, ""html PUBLIC"") == NULL))
-                DTnode = NULL;
+            if (TY_(IsHTML5Mode)(doc))
+            {
+                if ((strstr(word, ""HTML"") == NULL) &&
+                    (strstr(word, ""html"") == NULL))
+                    DTnode = NULL;
+            }
+            else {
+                if ((strstr(word, ""HTML PUBLIC"") == NULL) &&
+                    (strstr(word, ""html PUBLIC"") == NULL))
+                    DTnode = NULL;
+            }
         }
         if (!DTnode)
            TY_(ReportAccessError)( doc, &doc->root, DOCTYPE_MISSING);
Of course, until I merge PR #540 to fix #461, that TY_(IsHTML5Mode)(doc) always returns yes... But that will happen shortly I hope, maybe after you and @lhchavez have had a chance to test my issue-461 branch...
How do you want to handle this? Even though not related to the audio 1.1.6.2 warning, I could push to this branch, so these get into there when eventually merged... It is all in the theme access warning need some TLC #338... and its earlier #11... Of course this merge probably means we need to re-set some the access test expects...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,541,2017-05-03T20:22:04Z,2017-05-06T13:20:55Z,2017-05-06T13:22:49Z,MERGED,True,71,6,1,https://github.com/balthisar,Fix #338,2,[],https://github.com/htacg/tidy-html5/pull/541,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/541#issuecomment-299221287,"Issue #338 occurs because the existing routines assume that any URI with an extension is a file, and so links to TLD's ending with .pl, .au, etc., will cause accessibility warnings. This fix attempts to distinguish between URI's that are likely to be files versus links to domains.
Tested with next and no exit code regressions and nothing in the diff.
@geoff's test case in #338 now passes, and I would offer this as a new test case:
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""utf-8"">
<title>#338 - href with .au</title>
</head>
<body>
<p><a href=""http://www.other.com.au/file.txt"">(yes) Go to this site.</a></p>
<p><a href=""mailto:something@other.com.au"">(no) Mail Me</a></p>
<p><a href=""http://www.other.com.au"">(no) Go to this site.</a></p>
<p><a href=""http://www.other.com/file.au"">(yes) Link to this audio file.</a></p>
<p><a href=""file.au"">(yes) Link to this audio file (relative).</a></p>
<p><a href=""/something/file.au"">(yes) Link to this audio file (relative again).</a></p>
<p><a href=""/something/file.au/"">(no) Link to a directory.</a></p>
</body>
</html>","How do you want to handle this?

Thanks for having a look, @geoffmcl. Go ahead and add the patch, and understand that the patch will become effective with #540. I'll try to have a look at issue-461 today.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,541,2017-05-03T20:22:04Z,2017-05-06T13:20:55Z,2017-05-06T13:22:49Z,MERGED,True,71,6,1,https://github.com/balthisar,Fix #338,2,[],https://github.com/htacg/tidy-html5/pull/541,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/541#issuecomment-299224782,"Issue #338 occurs because the existing routines assume that any URI with an extension is a file, and so links to TLD's ending with .pl, .au, etc., will cause accessibility warnings. This fix attempts to distinguish between URI's that are likely to be files versus links to domains.
Tested with next and no exit code regressions and nothing in the diff.
@geoff's test case in #338 now passes, and I would offer this as a new test case:
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""utf-8"">
<title>#338 - href with .au</title>
</head>
<body>
<p><a href=""http://www.other.com.au/file.txt"">(yes) Go to this site.</a></p>
<p><a href=""mailto:something@other.com.au"">(no) Mail Me</a></p>
<p><a href=""http://www.other.com.au"">(no) Go to this site.</a></p>
<p><a href=""http://www.other.com/file.au"">(yes) Link to this audio file.</a></p>
<p><a href=""file.au"">(yes) Link to this audio file (relative).</a></p>
<p><a href=""/something/file.au"">(yes) Link to this audio file (relative again).</a></p>
<p><a href=""/something/file.au/"">(no) Link to a directory.</a></p>
</body>
</html>",@balthisar done... pushed the patch to issue_338 branch... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,541,2017-05-03T20:22:04Z,2017-05-06T13:20:55Z,2017-05-06T13:22:49Z,MERGED,True,71,6,1,https://github.com/balthisar,Fix #338,2,[],https://github.com/htacg/tidy-html5/pull/541,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/541#issuecomment-299639678,"Issue #338 occurs because the existing routines assume that any URI with an extension is a file, and so links to TLD's ending with .pl, .au, etc., will cause accessibility warnings. This fix attempts to distinguish between URI's that are likely to be files versus links to domains.
Tested with next and no exit code regressions and nothing in the diff.
@geoff's test case in #338 now passes, and I would offer this as a new test case:
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""utf-8"">
<title>#338 - href with .au</title>
</head>
<body>
<p><a href=""http://www.other.com.au/file.txt"">(yes) Go to this site.</a></p>
<p><a href=""mailto:something@other.com.au"">(no) Mail Me</a></p>
<p><a href=""http://www.other.com.au"">(no) Go to this site.</a></p>
<p><a href=""http://www.other.com/file.au"">(yes) Link to this audio file.</a></p>
<p><a href=""file.au"">(yes) Link to this audio file (relative).</a></p>
<p><a href=""/something/file.au"">(yes) Link to this audio file (relative again).</a></p>
<p><a href=""/something/file.au/"">(no) Link to a directory.</a></p>
</body>
</html>",@balthisar this is a good start to #338 in that 3 spurious warnings have been dealt with... thanks for assisting this...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,543,2017-05-04T17:46:18Z,2017-05-06T13:44:46Z,2017-05-06T13:44:52Z,MERGED,True,4,4,1,https://github.com/balthisar,Address #436 just to close it.,1,[],https://github.com/htacg/tidy-html5/pull/543,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/543,"Low hanging fruit will allow us to close an issue, #436.
Not present in any other languages, so this one can stand on it's own. I'll update the POT and PO's after merge.","Low hanging fruit will allow us to close an issue, #436.
Not present in any other languages, so this one can stand on it's own. I'll update the POT and PO's after merge.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,544,2017-05-06T19:08:40Z,2017-05-07T19:03:15Z,2017-05-07T19:05:31Z,MERGED,True,5,88,7,https://github.com/balthisar,Remove Deprecations,3,[],https://github.com/htacg/tidy-html5/pull/544,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/544,Remove some items that have long been marked as deprecated or dangerous to use. This causes some regressions in testbase; see separate PR for corrections to those.,Remove some items that have long been marked as deprecated or dangerous to use. This causes some regressions in testbase; see separate PR for corrections to those.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,544,2017-05-06T19:08:40Z,2017-05-07T19:03:15Z,2017-05-07T19:05:31Z,MERGED,True,5,88,7,https://github.com/balthisar,Remove Deprecations,3,[],https://github.com/htacg/tidy-html5/pull/544,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/544#issuecomment-299704534,Remove some items that have long been marked as deprecated or dangerous to use. This causes some regressions in testbase; see separate PR for corrections to those.,"@balthisar this looks good... of course in conjunction with the tests PR 17... and assume you will do the usual version bump, in both places...
Go for it... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,544,2017-05-06T19:08:40Z,2017-05-07T19:03:15Z,2017-05-07T19:05:31Z,MERGED,True,5,88,7,https://github.com/balthisar,Remove Deprecations,3,[],https://github.com/htacg/tidy-html5/pull/544,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/544#issuecomment-299704779,Remove some items that have long been marked as deprecated or dangerous to use. This causes some regressions in testbase; see separate PR for corrections to those.,Thanks. I'll leave it for tonight unless you get to it first -- It looks like I'm about to support the better half for most of the rest of the day ;-),True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,546,2017-05-06T23:00:59Z,2017-05-18T12:43:54Z,2017-05-18T12:43:54Z,CLOSED,False,18,0,3,https://github.com/lhchavez,Add Travis-CI support,3,[],https://github.com/htacg/tidy-html5/pull/546,https://github.com/lhchavez,1,https://github.com/htacg/tidy-html5/pull/546,"This change adds the tidy-html5-tests repository as a submodule and
makes Travis-CI run the full suite of tests on every commit and PR.
This change is intended to fix #545,
but since this checks out the test repository as a submodule, there are two
downsides:

Any commit that requires modifications to the tests would either appear
as broken, or not receive automated coverage (in the case new tests are
to be added).
Every time the test repository is updated, the submodule must be uprevved.

This change also only runs the testbase set, because I could not find how to
run the others correctly.","This change adds the tidy-html5-tests repository as a submodule and
makes Travis-CI run the full suite of tests on every commit and PR.
This change is intended to fix #545,
but since this checks out the test repository as a submodule, there are two
downsides:

Any commit that requires modifications to the tests would either appear
as broken, or not receive automated coverage (in the case new tests are
to be added).
Every time the test repository is updated, the submodule must be uprevved.

This change also only runs the testbase set, because I could not find how to
run the others correctly.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,546,2017-05-06T23:00:59Z,2017-05-18T12:43:54Z,2017-05-18T12:43:54Z,CLOSED,False,18,0,3,https://github.com/lhchavez,Add Travis-CI support,3,[],https://github.com/htacg/tidy-html5/pull/546,https://github.com/lhchavez,2,https://github.com/htacg/tidy-html5/pull/546#issuecomment-299671248,"This change adds the tidy-html5-tests repository as a submodule and
makes Travis-CI run the full suite of tests on every commit and PR.
This change is intended to fix #545,
but since this checks out the test repository as a submodule, there are two
downsides:

Any commit that requires modifications to the tests would either appear
as broken, or not receive automated coverage (in the case new tests are
to be added).
Every time the test repository is updated, the submodule must be uprevved.

This change also only runs the testbase set, because I could not find how to
run the others correctly.","PTAL!
This is how it would look like: https://travis-ci.org/lhchavez/tidy-html5/builds/229552310 . Every pull request would also display a small green / red badge with the result of the tests, for immediate feedback to any PR author.
Note that this requires htacg/tidy-html5-tests#18 in order to work.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,547,2017-05-06T23:02:16Z,2017-05-08T21:36:52Z,2017-05-11T19:41:09Z,MERGED,True,76,4,4,https://github.com/balthisar,Attempt to address issue #352. ,2,[],https://github.com/htacg/tidy-html5/pull/547,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/547,"This patch correctly address the specific issues in #352, but I'm worried that there's some over-reach here.
Currently only implemented as a warning, with no switch to turn it off, which
maintains current behavior other than the warning.
In general, we're treating any string as a complete URL, rather than breaking
URL's into component parts. Thus the IsURLCodePoint() check includes a few
other generic characters that strictly speaking aren't valid codepoints, but
are valid as escape characters and delimiters.
When addressing #338, I ran into a similar situation in not having a built-in
method to separate path components (although a simple generalized solution was
good enough in that case).
Thus without introducing a new structure and functions to deconstruct a URL
into scheme, authority, path, parameters, etc., some variation of this patch
will have to be used to address #352.
Current no regressions with the next testing branch. I've used this as a proposed new test case:
<!doctype html>
<html>
<head>
<meta charset=""utf-8"" />
<title>issue 352, illegal character in path segment</title>
</head>
<body>
<a href=""€"">technically valid HTML5</a>
<br>
<a href=""http://€.com"">technically valid HTML5</a>
<br>
<a href="":|"">invalid HTML5</a>
<br>
<a href=""http://["">also invalid</a>
<br>
<a href=""http://www.example.com"">valid</a>
<br>
<IMG SRC=""circleincircle.gif""
   HEIGHT=158 WIDTH=158 ALT=""Click the O!"" BORDER=0
   USEMAP=""#map1""><BR>
<br>
<a href=""%E2%82%AC"">Same €, already escaped</a><br>
</body>
</html>","This patch correctly address the specific issues in #352, but I'm worried that there's some over-reach here.
Currently only implemented as a warning, with no switch to turn it off, which
maintains current behavior other than the warning.
In general, we're treating any string as a complete URL, rather than breaking
URL's into component parts. Thus the IsURLCodePoint() check includes a few
other generic characters that strictly speaking aren't valid codepoints, but
are valid as escape characters and delimiters.
When addressing #338, I ran into a similar situation in not having a built-in
method to separate path components (although a simple generalized solution was
good enough in that case).
Thus without introducing a new structure and functions to deconstruct a URL
into scheme, authority, path, parameters, etc., some variation of this patch
will have to be used to address #352.
Current no regressions with the next testing branch. I've used this as a proposed new test case:
<!doctype html>
<html>
<head>
<meta charset=""utf-8"" />
<title>issue 352, illegal character in path segment</title>
</head>
<body>
<a href=""€"">technically valid HTML5</a>
<br>
<a href=""http://€.com"">technically valid HTML5</a>
<br>
<a href="":|"">invalid HTML5</a>
<br>
<a href=""http://["">also invalid</a>
<br>
<a href=""http://www.example.com"">valid</a>
<br>
<IMG SRC=""circleincircle.gif""
   HEIGHT=158 WIDTH=158 ALT=""Click the O!"" BORDER=0
   USEMAP=""#map1""><BR>
<br>
<a href=""%E2%82%AC"">Same €, already escaped</a><br>
</body>
</html>",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,547,2017-05-06T23:02:16Z,2017-05-08T21:36:52Z,2017-05-11T19:41:09Z,MERGED,True,76,4,4,https://github.com/balthisar,Attempt to address issue #352. ,2,[],https://github.com/htacg/tidy-html5/pull/547,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/547#issuecomment-299707301,"This patch correctly address the specific issues in #352, but I'm worried that there's some over-reach here.
Currently only implemented as a warning, with no switch to turn it off, which
maintains current behavior other than the warning.
In general, we're treating any string as a complete URL, rather than breaking
URL's into component parts. Thus the IsURLCodePoint() check includes a few
other generic characters that strictly speaking aren't valid codepoints, but
are valid as escape characters and delimiters.
When addressing #338, I ran into a similar situation in not having a built-in
method to separate path components (although a simple generalized solution was
good enough in that case).
Thus without introducing a new structure and functions to deconstruct a URL
into scheme, authority, path, parameters, etc., some variation of this patch
will have to be used to address #352.
Current no regressions with the next testing branch. I've used this as a proposed new test case:
<!doctype html>
<html>
<head>
<meta charset=""utf-8"" />
<title>issue 352, illegal character in path segment</title>
</head>
<body>
<a href=""€"">technically valid HTML5</a>
<br>
<a href=""http://€.com"">technically valid HTML5</a>
<br>
<a href="":|"">invalid HTML5</a>
<br>
<a href=""http://["">also invalid</a>
<br>
<a href=""http://www.example.com"">valid</a>
<br>
<IMG SRC=""circleincircle.gif""
   HEIGHT=158 WIDTH=158 ALT=""Click the O!"" BORDER=0
   USEMAP=""#map1""><BR>
<br>
<a href=""%E2%82%AC"">Same €, already escaped</a><br>
</body>
</html>","@balthisar thanks for this, but in testing your issue_352 branch, have some questions which I will post on #352... that is in the originating issue... if that's ok with you?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,549,2017-05-07T21:06:20Z,2017-05-11T19:24:45Z,2017-05-11T19:41:39Z,MERGED,True,23,10,7,https://github.com/balthisar,Address #391. Tested on macOS and Win10.,2,[],https://github.com/htacg/tidy-html5/pull/549,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/549,"Add a check upon opening a file for validity of the file.
Add a new message to indicate that the path is not a file.","Add a check upon opening a file for validity of the file.
Add a new message to indicate that the path is not a file.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,549,2017-05-07T21:06:20Z,2017-05-11T19:24:45Z,2017-05-11T19:41:39Z,MERGED,True,23,10,7,https://github.com/balthisar,Address #391. Tested on macOS and Win10.,2,[],https://github.com/htacg/tidy-html5/pull/549,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/549#issuecomment-300241175,"Add a check upon opening a file for validity of the file.
Add a new message to indicate that the path is not a file.","@balthisar thank you for looking into this #391 issue...
I have only tested in Win10, and it seems to work... except you need to move the fclose(fn) up to before the #ifdef _WIN32 switch... windows will not allow that file to be opened again... now pushed - Close the file before the _WIN32 switch f7e7554...
I did think of using the existing libtidy service tidyFileExists, but this uses access, which, for some reason, I never liked, and at this time we have a TidyDocImpl *doc, not a TidyDoc tdoc required for that service - we would need to move it back to tidyParseFile(tdoc,...) - and maybe a directory would pass the access test... not tested, tried... forget it... too troublesome...
I also thought of using stat instead... this saves opening it as ""r+"" only to close it, also something I do not like, and could replace the later fstat done... but when I tried to do this, this added even more squiggly code... it would work...
But involves yet another macro for _WIN32 to test for a directory... just the usual with or without a leading underscore, like -
#ifdef _WIN32
#define M_IS_DIR _S_IFDIR
#else /* !_WIN32 */
#define M_IS_DIR S_IFDIR
#endif /* _WIN32 y/n */

So on balance, if this works across platforms, let's go for what you have... and like the new descriptive message...
Will get around to testing linux, but if it works on the macOS, no reason to think not... merge it... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/553,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301253546,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.",Builds and tests cleanly on Windows 10 and Ubuntu 16.04.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301255495,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","@balthisar just checked out new_picklists branch to test, in Windows 10, MSVC14, but the build FAILS???
  config.c
F:\Projects\tidy-html5\src\config.c(596): error C2065: 'ParseAutoBool': undeclared identifier [F:\Projects\tidy-html5\build\temp-553\tidy-static.vcxproj]
F:\Projects\tidy-html5\src\config.c(596): warning C4047: '==': 'ParseProperty (__cdecl *const )' differs in levels of indirection from 'int' [F:\Projects\tidy-html5\build\temp-553\tidy-static.vcxproj]

Have I missed something?
Have not had a chance to look into yet, but maybe you will see the reason immediately... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301255998,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","Yup, I see it. I'm using MSVC 17, and for some reason the _DEBUG macro isn't enabled for me, thus the function to the non-existent ParseAutoBool isn't being flagged for me.
I've just pushed a fix. I'm not sure how to enable _DEBUG when building for Windows. For that matter, I should figure out why Clang isn't defining that macro, too.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301256106,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","@balthisar starting to look into it...
One thing I remember you saying is that I think you only build the Release version... In the Release version an assert compiles to nothing...
Try -
build\Win64> cmake --build . --config Debug

Only then will an assert exist...  and this error is in such an assert... thanks...
PS: Looks like you found it... but for the future I always build both Debug and Release in Windows... Do you use the above cmake to do the building... I do not think _DEBUG is the same thing...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/balthisar,6,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301256273,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.",I usually build on Windows using --config Release because that's in the build instructions. I'll just remember to use Debug in the future.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301257110,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","Yes, it now builds, and will get on with testing...
In fact the controlling MSVC macro is /D NDEBUG... if this is defined then there is no assert!
And I think this is the same in gcc, so would assume same in Clang... it is defined that way in some standard header...
In fact, never sure why tidy uses assert at all, since only if there is no -DNDEBUG, does assert do anything, thus is really only for the Debug build...
So we are sort of asking all developers to first build and test in the debug version... But that is perhaps another topic...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301260769,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","@balthisar have now compiled and tested this branch, in Windows 10, and see no immediate problem in this merge...
A small niggle!
It would be really appreciated if you would consider opening a Feature Request prior to refactoring, and presenting a fait accompli PR, saying one can read the commit notes...
This would give us a chance to present objections, ideas, feedback, ... or nothing... before all the effort is expended... not that there would be any objection to such a change and cleanup, but would also allow for suggested improvements, enhancements, etc... that could be considered...
Just a quiet suggestion... it is already noted in the CONTRIBUTING.md, which you wrote - ""it is best to create an issue before putting the effort into a pull request"". Why not follow this?
Anyway, for what, at this time, after such a brief, pushed, review, looks like a good move... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,553,2017-05-11T19:01:41Z,2017-05-13T23:50:21Z,2017-05-13T23:50:25Z,MERGED,True,386,458,5,https://github.com/balthisar,New picklists and parsers,3,[],https://github.com/htacg/tidy-html5/pull/553,https://github.com/balthisar,9,https://github.com/htacg/tidy-html5/pull/553#issuecomment-301281591,"See the commit notes, but essentially this refactors the current picklists and option parsers to remove a bit of code redundancy, but more importantly, to make it vastly easier to implement new potential option values without having to write new parsers or awkwardly use existing parsers.
There are no testbase regressions on macOS; I've not built and tested on Windows as of yet.","Thanks for having a look, @geoffmcl. This was a pre-requisite for #365 and #378 -- infrastructure -- so a feature request really wasn't appropriate. A PR gives everyone a chance to say yay or nay, otherwise it would have been included in one of the bug fixes anyway.
Oops... meant to add, sorry about the commit notes. They were nicely typed up in the PR, and then an extra commit erased them.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,554,2017-05-12T12:50:19Z,2017-05-21T18:24:03Z,2017-05-21T18:24:09Z,MERGED,True,136,111,7,https://github.com/balthisar,Issue 365,5,[],https://github.com/htacg/tidy-html5/pull/554,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/554,"Address #365 by introducing a new option to uppercase-attributes.
Requires #553 to be merged, first, since this takes advantage of the updated picklist/parser system. Actually, #553 doesn't have to be merged first, but it would be better style than incorporating all of this at once.","Address #365 by introducing a new option to uppercase-attributes.
Requires #553 to be merged, first, since this takes advantage of the updated picklist/parser system. Actually, #553 doesn't have to be merged first, but it would be better style than incorporating all of this at once.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,554,2017-05-12T12:50:19Z,2017-05-21T18:24:03Z,2017-05-21T18:24:09Z,MERGED,True,136,111,7,https://github.com/balthisar,Issue 365,5,[],https://github.com/htacg/tidy-html5/pull/554,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/554#issuecomment-302875595,"Address #365 by introducing a new option to uppercase-attributes.
Requires #553 to be merged, first, since this takes advantage of the updated picklist/parser system. Actually, #553 doesn't have to be merged first, but it would be better style than incorporating all of this at once.",LGTM... see comments on #365...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,556,2017-05-14T00:48:46Z,2017-05-14T02:19:53Z,2017-05-14T02:27:20Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #378,1,[],https://github.com/htacg/tidy-html5/pull/556,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/556,"Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.","Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,556,2017-05-14T00:48:46Z,2017-05-14T02:19:53Z,2017-05-14T02:27:20Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #378,1,[],https://github.com/htacg/tidy-html5/pull/556,https://github.com/biodranik,2,https://github.com/htacg/tidy-html5/pull/556#issuecomment-301283930,"Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.",LGTM,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,556,2017-05-14T00:48:46Z,2017-05-14T02:19:53Z,2017-05-14T02:27:20Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #378,1,[],https://github.com/htacg/tidy-html5/pull/556,https://github.com/zmwangx,3,https://github.com/htacg/tidy-html5/pull/556#issuecomment-301284410,"Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.",LGTM.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,556,2017-05-14T00:48:46Z,2017-05-14T02:19:53Z,2017-05-14T02:27:20Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #378,1,[],https://github.com/htacg/tidy-html5/pull/556,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/556#issuecomment-301286398,"Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.","@deathbaba and @zmwangx I had to read up on the meaning of LGTM ;=)) assume Looks Good To Me...
Thanks for the support...
@balthisar as stated elsewhere, I think!, I also agree with this small change... thanks...",True,{'THUMBS_UP': ['https://github.com/biodranik']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,556,2017-05-14T00:48:46Z,2017-05-14T02:19:53Z,2017-05-14T02:27:20Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #378,1,[],https://github.com/htacg/tidy-html5/pull/556,https://github.com/balthisar,5,https://github.com/htacg/tidy-html5/pull/556#issuecomment-301286448,"Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.","@geoffmcl, isn't it about 3 in the morning for you? ;-) I'll merge it, then I'm off to bed!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,556,2017-05-14T00:48:46Z,2017-05-14T02:19:53Z,2017-05-14T02:27:20Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #378,1,[],https://github.com/htacg/tidy-html5/pull/556,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/556#issuecomment-301286684,"Addresses issue #378 by NOT emitting warnings if fix-uri is no, for HTML5
documents. This preserves existing behavior for legacy document types.
Test on Windows, macOS, Ubuntu. Test cases added as PR in tidy-html5-tests repository.",@balthisar well actually 4:25 am... not done too frequently these days... I too off to bed... ;=)),True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,557,2017-05-14T01:08:24Z,2017-05-14T02:24:43Z,2017-05-14T02:25:47Z,MERGED,True,144,290,10,https://github.com/balthisar,Update languages against current English.,1,[],https://github.com/htacg/tidy-html5/pull/557,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/557,This PR simply updates the PO's and POT against the current master language file.,This PR simply updates the PO's and POT against the current master language file.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,557,2017-05-14T01:08:24Z,2017-05-14T02:24:43Z,2017-05-14T02:25:47Z,MERGED,True,144,290,10,https://github.com/balthisar,Update languages against current English.,1,[],https://github.com/htacg/tidy-html5/pull/557,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/557#issuecomment-301286558,This PR simply updates the PO's and POT against the current master language file.,"@balthisar to use my newly learned acronym, LGTM ;=))",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,559,2017-05-16T17:19:21Z,2017-05-21T18:25:44Z,2017-05-21T18:29:59Z,MERGED,True,804,530,1,None,Improve french translations (next branch).,3,[],https://github.com/htacg/tidy-html5/pull/559,None,1,https://github.com/htacg/tidy-html5/pull/559,"This is an improvement proposal of the existing french translation.
I remain open to your feedbacks.","This is an improvement proposal of the existing french translation.
I remain open to your feedbacks.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,559,2017-05-16T17:19:21Z,2017-05-21T18:25:44Z,2017-05-21T18:29:59Z,MERGED,True,804,530,1,None,Improve french translations (next branch).,3,[],https://github.com/htacg/tidy-html5/pull/559,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/559#issuecomment-302381272,"This is an improvement proposal of the existing french translation.
I remain open to your feedbacks.","@sballeste, this looks fantastic. Thank you! I'll try to merge it in sometime today.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,559,2017-05-16T17:19:21Z,2017-05-21T18:25:44Z,2017-05-21T18:29:59Z,MERGED,True,804,530,1,None,Improve french translations (next branch).,3,[],https://github.com/htacg/tidy-html5/pull/559,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/559#issuecomment-302876637,"This is an improvement proposal of the existing french translation.
I remain open to your feedbacks.","@sballeste  LGTM, and @balthisar assume it is just that you have not yet found the time to do the merge... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,559,2017-05-16T17:19:21Z,2017-05-21T18:25:44Z,2017-05-21T18:29:59Z,MERGED,True,804,530,1,None,Improve french translations (next branch).,3,[],https://github.com/htacg/tidy-html5/pull/559,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/559#issuecomment-302954050,"This is an improvement proposal of the existing french translation.
I remain open to your feedbacks.","@sballeste, thanks for the contribution. It's now merged, and should be active when you build.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,563,2017-05-27T14:32:26Z,2017-05-27T14:33:16Z,2017-05-27T14:33:23Z,MERGED,True,2,0,1,https://github.com/geoffmcl,Issue 392 - creeping php,2,[],https://github.com/htacg/tidy-html5/pull/563,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/563,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,564,2017-05-27T16:24:03Z,2017-05-27T16:25:30Z,2017-05-27T16:29:03Z,MERGED,True,16,0,1,https://github.com/geoffmcl,Issue 395 - self closing tags,2,[],https://github.com/htacg/tidy-html5/pull/564,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/564,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,565,2017-05-27T16:41:52Z,2017-08-31T17:18:22Z,2017-09-07T15:27:45Z,MERGED,True,279,15,8,https://github.com/geoffmcl,Issue 456 - meta charset option,25,['Feature Request'],https://github.com/htacg/tidy-html5/pull/565,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/565,"Have not been finding the time or energy to work more on this #456... but in all tests so far feels complete...
Maybe as a PR someone will find the time to test, and maybe smooth it out... thanks...","Have not been finding the time or energy to work more on this #456... but in all tests so far feels complete...
Maybe as a PR someone will find the time to test, and maybe smooth it out... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,565,2017-05-27T16:41:52Z,2017-08-31T17:18:22Z,2017-09-07T15:27:45Z,MERGED,True,279,15,8,https://github.com/geoffmcl,Issue 456 - meta charset option,25,['Feature Request'],https://github.com/htacg/tidy-html5/pull/565,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/565#issuecomment-304468781,"Have not been finding the time or energy to work more on this #456... but in all tests so far feels complete...
Maybe as a PR someone will find the time to test, and maybe smooth it out... thanks...",See ongoing WIP discussion in #456...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,565,2017-05-27T16:41:52Z,2017-08-31T17:18:22Z,2017-09-07T15:27:45Z,MERGED,True,279,15,8,https://github.com/geoffmcl,Issue 456 - meta charset option,25,['Feature Request'],https://github.com/htacg/tidy-html5/pull/565,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/565#issuecomment-325452056,"Have not been finding the time or energy to work more on this #456... but in all tests so far feels complete...
Maybe as a PR someone will find the time to test, and maybe smooth it out... thanks...","It looks good. There were some merge conflicts because of previous PR's that I fixed and pushed back. I also changed some of the wording in the new descriptions. In testing, this works fine for me.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,577,2017-07-19T19:02:51Z,2017-08-28T14:01:49Z,2017-09-07T15:27:49Z,MERGED,True,26,3,1,https://github.com/geoffmcl,Issue 572,2,[],https://github.com/htacg/tidy-html5/pull/577,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/577,Pull request for patch for issue #572...,Pull request for patch for issue #572...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,579,2017-07-26T13:32:32Z,2017-08-28T14:02:25Z,2017-09-07T15:27:51Z,MERGED,True,80,2,7,https://github.com/geoffmcl,Issue 567 2 - style tag to head,2,[],https://github.com/htacg/tidy-html5/pull/579,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/579,"Patch for issue #567, to move all style tags to the head...","Patch for issue #567, to move all style tags to the head...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,583,2017-08-04T12:43:09Z,2017-08-28T18:24:26Z,2017-09-07T15:27:47Z,MERGED,True,6,3,1,https://github.com/geoffmcl,Issue #582 - Remove extra new line in 'classic' mode,1,"['Pretty Print', 'Bug']",https://github.com/htacg/tidy-html5/pull/583,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/583,"This is a patch for issue #582...
Need testing and reports... thanks...","This is a patch for issue #582...
Need testing and reports... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,589,2017-08-24T10:31:29Z,2017-08-28T18:24:49Z,2017-08-28T18:24:49Z,MERGED,True,45,4,1,https://github.com/niczero,Fixed some en_gb spellings,1,[],https://github.com/htacg/tidy-html5/pull/589,https://github.com/niczero,1,https://github.com/htacg/tidy-html5/pull/589,A handful of phrases hadn't yet been translated.,A handful of phrases hadn't yet been translated.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,590,2017-08-24T17:07:58Z,2017-08-28T18:25:36Z,2017-08-29T11:33:45Z,MERGED,True,7,0,1,https://github.com/mthorpe7,Fix NULL pointer issue with Word2000 empty attributes.,1,[],https://github.com/htacg/tidy-html5/pull/590,https://github.com/mthorpe7,1,https://github.com/htacg/tidy-html5/pull/590,"This appears to be an issue with Word2000 handling of empty attributes.
A reproduction case can be seen here:
$ cat test.html
<html xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <body>
        <table>
            <img class="""" />
        </table>
    </body>
</html>

$ ./tidy --tidy-mark no --word-2000 yes test.html
line 1 column 1 - Warning: missing <!DOCTYPE> declaration
line 3 column 1 - Warning: <img> isn't allowed in <table> elements
line 2 column 1 - Info: <table> previously mentioned
line 1 column 57 - Warning: inserting missing 'title' element
line 3 column 1 - Warning: <img> lacks ""alt"" attribute
line 3 column 1 - Warning: <img> lacks ""src"" attribute
line 2 column 1 - Warning: trimming empty <table>
line 1 column 1 - Warning: <html> proprietary attribute ""xmlns:o""
[2]    52405 segmentation fault  ./tidy --tidy-mark no --word-2000 yes test.html

This was called from 
  
    
      tidy-html5/src/clean.c
    
    
        Lines 1710 to 1747
      in
      6f2fb6e
    
  
  
    

        
          
           static void PurgeWord2000Attributes( TidyDocImpl* doc, Node* node ) 
        

        
          
           { 
        

        
          
               AttVal *attr, *next, *prev = NULL; 
        

        
          
            
        

        
          
               for ( attr = node->attributes; attr; attr = next ) 
        

        
          
               { 
        

        
          
                   next = attr->next; 
        

        
          
            
        

        
          
                   /* special check for class=""Code"" denoting pre text */ 
        

        
          
                   /* Pass thru user defined styles as HTML class names */ 
        

        
          
                   if (attrIsCLASS(attr)) 
        

        
          
                   { 
        

        
          
                       if (AttrValueIs(attr, ""Code"") || 
        

        
          
                            TY_(tmbstrncmp)(attr->value, ""Mso"", 3) != 0 ) 
        

        
          
                       { 
        

        
          
                           prev = attr; 
        

        
          
                           continue; 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (attrIsCLASS(attr) || 
        

        
          
                       attrIsSTYLE(attr) || 
        

        
          
                       attrIsLANG(attr)  || 
        

        
          
                        ( (attrIsHEIGHT(attr) || attrIsWIDTH(attr)) && 
        

        
          
                          (nodeIsTD(node) || nodeIsTR(node) || nodeIsTH(node)) ) || 
        

        
          
                        (attr->attribute && TY_(tmbstrncmp)(attr->attribute, ""x:"", 2) == 0) ) 
        

        
          
                   { 
        

        
          
                       if (prev) 
        

        
          
                           prev->next = next; 
        

        
          
                       else 
        

        
          
                           node->attributes = next; 
        

        
          
            
        

        
          
                       TY_(FreeAttribute)( doc, attr ); 
        

        
          
                   } 
        

        
          
                   else 
        

        
          
                       prev = attr; 
        

        
          
               } 
        

        
          
           } 
        
    
  


(It is technically undefined behaviour to call strncmp with NULL pointers however).","This appears to be an issue with Word2000 handling of empty attributes.
A reproduction case can be seen here:
$ cat test.html
<html xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <body>
        <table>
            <img class="""" />
        </table>
    </body>
</html>

$ ./tidy --tidy-mark no --word-2000 yes test.html
line 1 column 1 - Warning: missing <!DOCTYPE> declaration
line 3 column 1 - Warning: <img> isn't allowed in <table> elements
line 2 column 1 - Info: <table> previously mentioned
line 1 column 57 - Warning: inserting missing 'title' element
line 3 column 1 - Warning: <img> lacks ""alt"" attribute
line 3 column 1 - Warning: <img> lacks ""src"" attribute
line 2 column 1 - Warning: trimming empty <table>
line 1 column 1 - Warning: <html> proprietary attribute ""xmlns:o""
[2]    52405 segmentation fault  ./tidy --tidy-mark no --word-2000 yes test.html

This was called from 
  
    
      tidy-html5/src/clean.c
    
    
        Lines 1710 to 1747
      in
      6f2fb6e
    
  
  
    

        
          
           static void PurgeWord2000Attributes( TidyDocImpl* doc, Node* node ) 
        

        
          
           { 
        

        
          
               AttVal *attr, *next, *prev = NULL; 
        

        
          
            
        

        
          
               for ( attr = node->attributes; attr; attr = next ) 
        

        
          
               { 
        

        
          
                   next = attr->next; 
        

        
          
            
        

        
          
                   /* special check for class=""Code"" denoting pre text */ 
        

        
          
                   /* Pass thru user defined styles as HTML class names */ 
        

        
          
                   if (attrIsCLASS(attr)) 
        

        
          
                   { 
        

        
          
                       if (AttrValueIs(attr, ""Code"") || 
        

        
          
                            TY_(tmbstrncmp)(attr->value, ""Mso"", 3) != 0 ) 
        

        
          
                       { 
        

        
          
                           prev = attr; 
        

        
          
                           continue; 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (attrIsCLASS(attr) || 
        

        
          
                       attrIsSTYLE(attr) || 
        

        
          
                       attrIsLANG(attr)  || 
        

        
          
                        ( (attrIsHEIGHT(attr) || attrIsWIDTH(attr)) && 
        

        
          
                          (nodeIsTD(node) || nodeIsTR(node) || nodeIsTH(node)) ) || 
        

        
          
                        (attr->attribute && TY_(tmbstrncmp)(attr->attribute, ""x:"", 2) == 0) ) 
        

        
          
                   { 
        

        
          
                       if (prev) 
        

        
          
                           prev->next = next; 
        

        
          
                       else 
        

        
          
                           node->attributes = next; 
        

        
          
            
        

        
          
                       TY_(FreeAttribute)( doc, attr ); 
        

        
          
                   } 
        

        
          
                   else 
        

        
          
                       prev = attr; 
        

        
          
               } 
        

        
          
           } 
        
    
  


(It is technically undefined behaviour to call strncmp with NULL pointers however).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,590,2017-08-24T17:07:58Z,2017-08-28T18:25:36Z,2017-08-29T11:33:45Z,MERGED,True,7,0,1,https://github.com/mthorpe7,Fix NULL pointer issue with Word2000 empty attributes.,1,[],https://github.com/htacg/tidy-html5/pull/590,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/590#issuecomment-325364258,"This appears to be an issue with Word2000 handling of empty attributes.
A reproduction case can be seen here:
$ cat test.html
<html xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <body>
        <table>
            <img class="""" />
        </table>
    </body>
</html>

$ ./tidy --tidy-mark no --word-2000 yes test.html
line 1 column 1 - Warning: missing <!DOCTYPE> declaration
line 3 column 1 - Warning: <img> isn't allowed in <table> elements
line 2 column 1 - Info: <table> previously mentioned
line 1 column 57 - Warning: inserting missing 'title' element
line 3 column 1 - Warning: <img> lacks ""alt"" attribute
line 3 column 1 - Warning: <img> lacks ""src"" attribute
line 2 column 1 - Warning: trimming empty <table>
line 1 column 1 - Warning: <html> proprietary attribute ""xmlns:o""
[2]    52405 segmentation fault  ./tidy --tidy-mark no --word-2000 yes test.html

This was called from 
  
    
      tidy-html5/src/clean.c
    
    
        Lines 1710 to 1747
      in
      6f2fb6e
    
  
  
    

        
          
           static void PurgeWord2000Attributes( TidyDocImpl* doc, Node* node ) 
        

        
          
           { 
        

        
          
               AttVal *attr, *next, *prev = NULL; 
        

        
          
            
        

        
          
               for ( attr = node->attributes; attr; attr = next ) 
        

        
          
               { 
        

        
          
                   next = attr->next; 
        

        
          
            
        

        
          
                   /* special check for class=""Code"" denoting pre text */ 
        

        
          
                   /* Pass thru user defined styles as HTML class names */ 
        

        
          
                   if (attrIsCLASS(attr)) 
        

        
          
                   { 
        

        
          
                       if (AttrValueIs(attr, ""Code"") || 
        

        
          
                            TY_(tmbstrncmp)(attr->value, ""Mso"", 3) != 0 ) 
        

        
          
                       { 
        

        
          
                           prev = attr; 
        

        
          
                           continue; 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (attrIsCLASS(attr) || 
        

        
          
                       attrIsSTYLE(attr) || 
        

        
          
                       attrIsLANG(attr)  || 
        

        
          
                        ( (attrIsHEIGHT(attr) || attrIsWIDTH(attr)) && 
        

        
          
                          (nodeIsTD(node) || nodeIsTR(node) || nodeIsTH(node)) ) || 
        

        
          
                        (attr->attribute && TY_(tmbstrncmp)(attr->attribute, ""x:"", 2) == 0) ) 
        

        
          
                   { 
        

        
          
                       if (prev) 
        

        
          
                           prev->next = next; 
        

        
          
                       else 
        

        
          
                           node->attributes = next; 
        

        
          
            
        

        
          
                       TY_(FreeAttribute)( doc, attr ); 
        

        
          
                   } 
        

        
          
                   else 
        

        
          
                       prev = attr; 
        

        
          
               } 
        

        
          
           } 
        
    
  


(It is technically undefined behaviour to call strncmp with NULL pointers however).","@mthorpe7, it's a good fix, but could you eliminate the .gitignore changes so that I can merge it? Feel free to submit a separate PR if you think we should change the .gitignore file.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,590,2017-08-24T17:07:58Z,2017-08-28T18:25:36Z,2017-08-29T11:33:45Z,MERGED,True,7,0,1,https://github.com/mthorpe7,Fix NULL pointer issue with Word2000 empty attributes.,1,[],https://github.com/htacg/tidy-html5/pull/590,https://github.com/mthorpe7,3,https://github.com/htacg/tidy-html5/pull/590#issuecomment-325369738,"This appears to be an issue with Word2000 handling of empty attributes.
A reproduction case can be seen here:
$ cat test.html
<html xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <body>
        <table>
            <img class="""" />
        </table>
    </body>
</html>

$ ./tidy --tidy-mark no --word-2000 yes test.html
line 1 column 1 - Warning: missing <!DOCTYPE> declaration
line 3 column 1 - Warning: <img> isn't allowed in <table> elements
line 2 column 1 - Info: <table> previously mentioned
line 1 column 57 - Warning: inserting missing 'title' element
line 3 column 1 - Warning: <img> lacks ""alt"" attribute
line 3 column 1 - Warning: <img> lacks ""src"" attribute
line 2 column 1 - Warning: trimming empty <table>
line 1 column 1 - Warning: <html> proprietary attribute ""xmlns:o""
[2]    52405 segmentation fault  ./tidy --tidy-mark no --word-2000 yes test.html

This was called from 
  
    
      tidy-html5/src/clean.c
    
    
        Lines 1710 to 1747
      in
      6f2fb6e
    
  
  
    

        
          
           static void PurgeWord2000Attributes( TidyDocImpl* doc, Node* node ) 
        

        
          
           { 
        

        
          
               AttVal *attr, *next, *prev = NULL; 
        

        
          
            
        

        
          
               for ( attr = node->attributes; attr; attr = next ) 
        

        
          
               { 
        

        
          
                   next = attr->next; 
        

        
          
            
        

        
          
                   /* special check for class=""Code"" denoting pre text */ 
        

        
          
                   /* Pass thru user defined styles as HTML class names */ 
        

        
          
                   if (attrIsCLASS(attr)) 
        

        
          
                   { 
        

        
          
                       if (AttrValueIs(attr, ""Code"") || 
        

        
          
                            TY_(tmbstrncmp)(attr->value, ""Mso"", 3) != 0 ) 
        

        
          
                       { 
        

        
          
                           prev = attr; 
        

        
          
                           continue; 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (attrIsCLASS(attr) || 
        

        
          
                       attrIsSTYLE(attr) || 
        

        
          
                       attrIsLANG(attr)  || 
        

        
          
                        ( (attrIsHEIGHT(attr) || attrIsWIDTH(attr)) && 
        

        
          
                          (nodeIsTD(node) || nodeIsTR(node) || nodeIsTH(node)) ) || 
        

        
          
                        (attr->attribute && TY_(tmbstrncmp)(attr->attribute, ""x:"", 2) == 0) ) 
        

        
          
                   { 
        

        
          
                       if (prev) 
        

        
          
                           prev->next = next; 
        

        
          
                       else 
        

        
          
                           node->attributes = next; 
        

        
          
            
        

        
          
                       TY_(FreeAttribute)( doc, attr ); 
        

        
          
                   } 
        

        
          
                   else 
        

        
          
                       prev = attr; 
        

        
          
               } 
        

        
          
           } 
        
    
  


(It is technically undefined behaviour to call strncmp with NULL pointers however).",@balthisar done 😄,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,593,2017-09-07T01:34:11Z,2017-09-08T23:41:48Z,2017-09-08T23:42:27Z,MERGED,True,2650,2063,21,https://github.com/balthisar,Messages increment,22,[],https://github.com/htacg/tidy-html5/pull/593,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/593,"This updates the internal messaging system to simplify the handling of report output. This is an internal API-only change and does not affect LibTidy users or change output in any way (verified by regression testing).

Complete audit on all report strings, with modifications where necessary.
Report strings are now tightly coupled to the TidyReportLevel.
Reduced the number of report-producing functions. It's possible to use a single report function, although convenience functions with simplified signatures were maintained.
Provides a logical infrastructure for potential new cross-reference and footnote features.

This implements the ""good ideas"" from #561, without touching the other things subject to further discussion.","This updates the internal messaging system to simplify the handling of report output. This is an internal API-only change and does not affect LibTidy users or change output in any way (verified by regression testing).

Complete audit on all report strings, with modifications where necessary.
Report strings are now tightly coupled to the TidyReportLevel.
Reduced the number of report-producing functions. It's possible to use a single report function, although convenience functions with simplified signatures were maintained.
Provides a logical infrastructure for potential new cross-reference and footnote features.

This implements the ""good ideas"" from #561, without touching the other things subject to further discussion.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,595,2017-09-11T19:23:18Z,2017-09-20T15:02:15Z,2017-09-23T00:02:21Z,MERGED,True,2,2,1,https://github.com/ablackton,Issue #594 - Parse XML element names beginning with Valid NameChar,1,['Bug'],https://github.com/htacg/tidy-html5/pull/595,https://github.com/ablackton,1,https://github.com/htacg/tidy-html5/pull/595,"Patch for issue #594
Allow xml elements names to begin with valid non-letter name characters.
This is a superset of the xml standard's defined NameStartChars.
https://www.w3.org/TR/REC-xml/#NT-NameStartChar","Patch for issue #594
Allow xml elements names to begin with valid non-letter name characters.
This is a superset of the xml standard's defined NameStartChars.
https://www.w3.org/TR/REC-xml/#NT-NameStartChar",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,595,2017-09-11T19:23:18Z,2017-09-20T15:02:15Z,2017-09-23T00:02:21Z,MERGED,True,2,2,1,https://github.com/ablackton,Issue #594 - Parse XML element names beginning with Valid NameChar,1,['Bug'],https://github.com/htacg/tidy-html5/pull/595,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/595#issuecomment-329970876,"Patch for issue #594
Allow xml elements names to begin with valid non-letter name characters.
This is a superset of the xml standard's defined NameStartChars.
https://www.w3.org/TR/REC-xml/#NT-NameStartChar","@ablackton as commented in #594 this looks good... thanks...
Will merge if someone else can test and confirm... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,595,2017-09-11T19:23:18Z,2017-09-20T15:02:15Z,2017-09-23T00:02:21Z,MERGED,True,2,2,1,https://github.com/ablackton,Issue #594 - Parse XML element names beginning with Valid NameChar,1,['Bug'],https://github.com/htacg/tidy-html5/pull/595,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/595#issuecomment-330521288,"Patch for issue #594
Allow xml elements names to begin with valid non-letter name characters.
This is a superset of the xml standard's defined NameStartChars.
https://www.w3.org/TR/REC-xml/#NT-NameStartChar","Builds, tests, and works for me. Feel free to merge. Thanks, @ablackton!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,595,2017-09-11T19:23:18Z,2017-09-20T15:02:15Z,2017-09-23T00:02:21Z,MERGED,True,2,2,1,https://github.com/ablackton,Issue #594 - Parse XML element names beginning with Valid NameChar,1,['Bug'],https://github.com/htacg/tidy-html5/pull/595,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/595#issuecomment-330881993,"Patch for issue #594
Allow xml elements names to begin with valid non-letter name characters.
This is a superset of the xml standard's defined NameStartChars.
https://www.w3.org/TR/REC-xml/#NT-NameStartChar","@ablackton, @balthisar, now merged... bumped to version 5.5.39, 2017.09.20... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,595,2017-09-11T19:23:18Z,2017-09-20T15:02:15Z,2017-09-23T00:02:21Z,MERGED,True,2,2,1,https://github.com/ablackton,Issue #594 - Parse XML element names beginning with Valid NameChar,1,['Bug'],https://github.com/htacg/tidy-html5/pull/595,https://github.com/ablackton,5,https://github.com/htacg/tidy-html5/pull/595#issuecomment-331585908,"Patch for issue #594
Allow xml elements names to begin with valid non-letter name characters.
This is a superset of the xml standard's defined NameStartChars.
https://www.w3.org/TR/REC-xml/#NT-NameStartChar","@geoffmcl and @balthisar, thank you!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,599,2017-09-17T17:20:50Z,2017-09-20T17:11:35Z,2017-09-20T17:20:51Z,MERGED,True,68,13,7,https://github.com/geoffmcl,Issue #597 - Memory tests/diagnostics,7,['Bug'],https://github.com/htacg/tidy-html5/pull/599,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/599,"Some slightly enhance old WIN32/MSVC memory diagnostic code, which could probably be ported to unix, the addition of a WIN32 <crtdbg.h> module, and added cmake options to enable...","Some slightly enhance old WIN32/MSVC memory diagnostic code, which could probably be ported to unix, the addition of a WIN32 <crtdbg.h> module, and added cmake options to enable...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,599,2017-09-17T17:20:50Z,2017-09-20T17:11:35Z,2017-09-20T17:20:51Z,MERGED,True,68,13,7,https://github.com/geoffmcl,Issue #597 - Memory tests/diagnostics,7,['Bug'],https://github.com/htacg/tidy-html5/pull/599,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/599#issuecomment-330523950,"Some slightly enhance old WIN32/MSVC memory diagnostic code, which could probably be ported to unix, the addition of a WIN32 <crtdbg.h> module, and added cmake options to enable...","Nice fix. Works on macOS; I need to get SPRTF working on macOS and Linux so that we have the same tools available.
Feel free to merge.
You don't mind if I start poking around SPRTF to make it cross-platform? Then I'd probably take a look at all of the macros that invoke it, too.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,599,2017-09-17T17:20:50Z,2017-09-20T17:11:35Z,2017-09-20T17:20:51Z,MERGED,True,68,13,7,https://github.com/geoffmcl,Issue #597 - Memory tests/diagnostics,7,['Bug'],https://github.com/htacg/tidy-html5/pull/599,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/599#issuecomment-330921245,"Some slightly enhance old WIN32/MSVC memory diagnostic code, which could probably be ported to unix, the addition of a WIN32 <crtdbg.h> module, and added cmake options to enable...","@balthisar now merged, and bumped to 5.5.40...
Re SPRTF, as replied on #604 look forward to this... advise if any probs... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/rffontenelle,1,https://github.com/htacg/tidy-html5/pull/605,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/rffontenelle,2,https://github.com/htacg/tidy-html5/pull/605#issuecomment-330636116,,"Looks like I messed a bit this PR. The localize/README.md says I should make a PR against ""master"" branch, but I seems I based my translation in the default branch ""next"". Which branch should I use?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/605#issuecomment-330655881,,"Looks like I messed a bit this PR. The localize/README.md says I should make a PR against ""master"" branch, but I seems I based my translation in the default branch ""next"". Which branch should I use?

@rffontenelle, thanks. Yup, good catch. It should be based on next. Sorry about that. Can you rebase based on next? That should clean up this PR greatly, and a Portuguese translation would be simply awesome!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/rffontenelle,4,https://github.com/htacg/tidy-html5/pull/605#issuecomment-330666504,,"Actually, I had it based in next thinking it was master and then I created this Pull Request against master. I changed the target branch to next, so it should be good to go. Any problems, please let me know.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/605#issuecomment-330939130,,"@rffontenelle AWESOME - thank you...
And sorry about the misleading PR against master, in localize/README.md.
We missed that when we switched to using next as the default development branch... and maybe this also needs to be fixed in README/CONTRIBUTING.md...
The file README/BRANCHES.md does already make it clear that a PR should be against the development next branch... but for sure all files should convey the same idea...
From my perspective this can be merged, but @balthisar is our language guru... thanks again...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/balthisar,6,https://github.com/htacg/tidy-html5/pull/605#issuecomment-330993345,,"@rffontenelle, thanks, it's merged. You might have a new look at it with the current PO or POT, just to make sure a translation didn't go missing. I had to rebase it because there was a previous merge that should have only affected string order, but better safe than sorry.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/balthisar,7,https://github.com/htacg/tidy-html5/pull/605#issuecomment-330995470,,"@rffontenelle, also it just occurred to me (and I should comment the POT) that TEXT_GENERAL_INFO_PLEA would probably read better if it referred to Brazilian Portuguese instead of English, because presumably someone in Brazil would be reading the message in Brazilian Portuguese.

""Você fala um idioma diferente do inglês, ou uma variante diferente do\n""
""inglês? Considere nos ajudar a traduzir HTML Tidy. Para detalhes, consulte\n""
""https://github.com/htacg/tidy-html5/blob/master/README/LOCALIZE.md""

Obviously this isn't a demand, but if you should happen to issue another PR, it would be accepted!
By the way, I can't understand spoken Brazilian, but can somewhat understand Portuguese people when I run into them. How different is the written language? I can understand most of what you wrote... would this be appropriate to use as the Portuguese base language, too? Or is it really, really specific to Brazil?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/rffontenelle,8,https://github.com/htacg/tidy-html5/pull/605#issuecomment-331006344,,"I don't mind translating TEXT_GENERAL_INFO_PLEA back to English, but would it be possible to mark this string as not translatable? This would be safer and easier for both translation and maintenance of the translations.

By the way, I can't understand spoken Brazilian, but can somewhat understand Portuguese people when I run into them. How different is the written language? I can understand most of what you wrote... would this be appropriate to use as the Portuguese base language, too? Or is it really, really specific to Brazil?

Indeed, the accent and slangs are very different between European Portuguese (pt) and Brazilian Portuguese (pt_BR), but the written language is not so different. It has its differences, like ""file"" in pt_br is ""arquivo"" and in pt is ""ficheiro"", but I understand their writing, so they should understand mine.
By the way, the Portuguese Language Orthographic Agreement of 1990, to which Portugal changed in 2008 and Brazil changed in 2009, made it easier for understading written Portuguese by lusophones of different countries.
So, I don't see as a problem using my translation as ""pt"" for now. When someone who speaks European Portuguese provide translation to pt, just move mine back to pt_br.  How does it sound?
If you decide to rename pt_br to pt, let me know and I'll wait before fixing TEXT_GENERAL_INFO_PLEA and fuzzy translations, if any.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/balthisar,9,https://github.com/htacg/tidy-html5/pull/605#issuecomment-331008336,,"I don't mind translating TEXT_GENERAL_INFO_PLEA back to English, but would it be possible to mark this string as not translatable? This would be safer and easier for both translation and maintenance of the translations.

Oh, my meaning was, leave the string in Portuguese, but change to it to something like:

""Você fala um idioma diferente do Portugues Brasileño, ou uma variante diferente do\n""
""Portugues Brasileño? Considere nos ajudar a traduzir HTML Tidy. Para detalhes, consulte\n""
""https://github.com/htacg/tidy-html5/blob/master/README/LOCALIZE.md""

My substitution is Spanish because I can't write Portuguese!
This way, Tidy users in Brazil who speak another language might want to offer another translation, too.
I'll leave it in pt_br.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,605,2017-09-19T18:49:50Z,2017-09-20T21:58:38Z,2017-09-21T02:44:54Z,MERGED,True,5345,0,3,https://github.com/rffontenelle,Add Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/605,https://github.com/rffontenelle,10,https://github.com/htacg/tidy-html5/pull/605#issuecomment-331010754,,"Oh, sorry for misreading your previous comment. Consider it done.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,606,2017-09-19T19:14:40Z,2017-09-20T21:48:01Z,2017-09-28T17:23:08Z,MERGED,True,831,649,16,https://github.com/balthisar,Dialogue cleanup,3,[],https://github.com/htacg/tidy-html5/pull/606,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/606,"Internal refactoring of non-report type messages emitted by Tidy. Each message has been categorized by purpose, and these are kept in a master array for each message type. Like the report messages, a dialogue message is now formatted by a ""formatter,"" giving us a single dialogue message output routine.
No diffs generated!
This is a nice preparation for some additional work I'd like to complete, for which I'll add feature requests.
Also added the doxygen documentation to the header file.","Internal refactoring of non-report type messages emitted by Tidy. Each message has been categorized by purpose, and these are kept in a master array for each message type. Like the report messages, a dialogue message is now formatted by a ""formatter,"" giving us a single dialogue message output routine.
No diffs generated!
This is a nice preparation for some additional work I'd like to complete, for which I'll add feature requests.
Also added the doxygen documentation to the header file.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,606,2017-09-19T19:14:40Z,2017-09-20T21:48:01Z,2017-09-28T17:23:08Z,MERGED,True,831,649,16,https://github.com/balthisar,Dialogue cleanup,3,[],https://github.com/htacg/tidy-html5/pull/606,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/606#issuecomment-330929734,"Internal refactoring of non-report type messages emitted by Tidy. Each message has been categorized by purpose, and these are kept in a master array for each message type. Like the report messages, a dialogue message is now formatted by a ""formatter,"" giving us a single dialogue message output routine.
No diffs generated!
This is a nice preparation for some additional work I'd like to complete, for which I'll add feature requests.
Also added the doxygen documentation to the header file.","@balthisar checked out this dialogue_cleanup branch, and it built fine in Windows...
And a run of the regression tests using this 5.5.37-exp-jsd, 2017.08.31 version showed no problems...
From my perspective, this can be merged, with the obvious version.txt change... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,610,2017-09-21T03:46:17Z,2017-09-21T11:38:41Z,2017-09-21T11:38:41Z,MERGED,True,19,15,2,https://github.com/rffontenelle,Update Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/610,https://github.com/rffontenelle,1,https://github.com/htacg/tidy-html5/pull/610,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,610,2017-09-21T03:46:17Z,2017-09-21T11:38:41Z,2017-09-21T11:38:41Z,MERGED,True,19,15,2,https://github.com/rffontenelle,Update Brazilian Portuguese translation,1,[],https://github.com/htacg/tidy-html5/pull/610,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/610#issuecomment-331131269,,Awesome! Thanks!,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,612,2017-09-22T23:03:08Z,2017-09-23T23:21:23Z,2017-09-28T17:23:11Z,MERGED,True,13,13,4,https://github.com/balthisar,Address #412,2,[],https://github.com/htacg/tidy-html5/pull/612,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/612,"Add a TidyInfo message each time an unquoted attribute is found. However,
refer to #412 for discussion before merging this.","Add a TidyInfo message each time an unquoted attribute is found. However,
refer to #412 for discussion before merging this.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,612,2017-09-22T23:03:08Z,2017-09-23T23:21:23Z,2017-09-28T17:23:11Z,MERGED,True,13,13,4,https://github.com/balthisar,Address #412,2,[],https://github.com/htacg/tidy-html5/pull/612,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/612#issuecomment-331579680,"Add a TidyInfo message each time an unquoted attribute is found. However,
refer to #412 for discussion before merging this.",Refer to #412 for additional discussion...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,613,2017-09-23T11:56:32Z,2017-09-23T23:21:21Z,2017-09-28T17:23:12Z,MERGED,True,320,30,11,https://github.com/balthisar,Issue 434,6,[],https://github.com/htacg/tidy-html5/pull/613,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/613,"Introduces priority-attributes configuration option to address #434.
Includes #412, unfortunately, as I forgot to start from next fresh.","Introduces priority-attributes configuration option to address #434.
Includes #412, unfortunately, as I forgot to start from next fresh.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,614,2017-09-24T17:43:03Z,2017-09-26T01:16:45Z,2017-09-28T17:23:17Z,MERGED,True,5,3,2,https://github.com/balthisar,Addresses #435 by updating documentation.,1,[],https://github.com/htacg/tidy-html5/pull/614,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/614,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,615,2017-09-24T23:06:25Z,2017-09-29T14:23:56Z,2017-09-29T14:24:10Z,MERGED,True,107,24,9,https://github.com/balthisar,"Address issue #476, which started out as a simple message update.",5,[],https://github.com/htacg/tidy-html5/pull/615,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/615,"Change default value of --fix-bad-comments to no.
Ensure that when not fixing, nothing is actually fixed.
Ensure that when fixing, initial adjacent hyphens actually are fixed.
Issue tidyinfo for all fixes made.
Issue tidywarning when when not making fixes for non-HTML5 doctypes.","Change default value of --fix-bad-comments to no.
Ensure that when not fixing, nothing is actually fixed.
Ensure that when fixing, initial adjacent hyphens actually are fixed.
Issue tidyinfo for all fixes made.
Issue tidywarning when when not making fixes for non-HTML5 doctypes.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,615,2017-09-24T23:06:25Z,2017-09-29T14:23:56Z,2017-09-29T14:24:10Z,MERGED,True,107,24,9,https://github.com/balthisar,"Address issue #476, which started out as a simple message update.",5,[],https://github.com/htacg/tidy-html5/pull/615,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/615#issuecomment-331746772,"Change default value of --fix-bad-comments to no.
Ensure that when not fixing, nothing is actually fixed.
Ensure that when fixing, initial adjacent hyphens actually are fixed.
Issue tidyinfo for all fixes made.
Issue tidywarning when when not making fixes for non-HTML5 doctypes.","There are a couple of obvious conflicts in the testbase, but reviewing them seems reasonable. I'll update testbase, and add a couple of test cases for this fix as a PR in the test branch.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,615,2017-09-24T23:06:25Z,2017-09-29T14:23:56Z,2017-09-29T14:24:10Z,MERGED,True,107,24,9,https://github.com/balthisar,"Address issue #476, which started out as a simple message update.",5,[],https://github.com/htacg/tidy-html5/pull/615,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/615#issuecomment-331747089,"Change default value of --fix-bad-comments to no.
Ensure that when not fixing, nothing is actually fixed.
Ensure that when fixing, initial adjacent hyphens actually are fixed.
Issue tidyinfo for all fixes made.
Issue tidywarning when when not making fixes for non-HTML5 doctypes.","Actually, don't merge this yes; small bug found in testing.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,615,2017-09-24T23:06:25Z,2017-09-29T14:23:56Z,2017-09-29T14:24:10Z,MERGED,True,107,24,9,https://github.com/balthisar,"Address issue #476, which started out as a simple message update.",5,[],https://github.com/htacg/tidy-html5/pull/615,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/615#issuecomment-331906224,"Change default value of --fix-bad-comments to no.
Ensure that when not fixing, nothing is actually fixed.
Ensure that when fixing, initial adjacent hyphens actually are fixed.
Issue tidyinfo for all fixes made.
Issue tidywarning when when not making fixes for non-HTML5 doctypes.","Okay, small issue fixed. Ready for review.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,617,2017-09-29T14:44:20Z,2017-10-02T17:11:04Z,2017-10-02T17:11:51Z,MERGED,True,4,4,3,https://github.com/balthisar,Address #542,1,[],https://github.com/htacg/tidy-html5/pull/617,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/617,"change message to indicated missing quote is only suspected.
change severity to TidyWarning.
Update POT with new string.","change message to indicated missing quote is only suspected.
change severity to TidyWarning.
Update POT with new string.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,618,2017-09-29T15:27:03Z,2017-10-02T17:21:36Z,2017-10-02T17:21:46Z,MERGED,True,87,51,7,https://github.com/balthisar,Address #575 by adding a new footnote in TY_(ErrorSummary) suggesting…,1,[],https://github.com/htacg/tidy-html5/pull/618,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/618,"… that if this behavior is not wanted, then which option to use to prevent it.","… that if this behavior is not wanted, then which option to use to prevent it.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,619,2017-09-29T18:49:59Z,2017-10-02T17:29:45Z,2017-10-02T17:30:05Z,MERGED,True,15,1,5,https://github.com/balthisar,Address #521,1,[],https://github.com/htacg/tidy-html5/pull/619,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/619,"Tidy will now emit a TidyInfo message when end tags are missing for li tags,
unless omit-optional-tags is yes.","Tidy will now emit a TidyInfo message when end tags are missing for li tags,
unless omit-optional-tags is yes.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,620,2017-09-29T19:16:28Z,2017-10-02T17:32:07Z,2017-10-02T17:32:24Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #616,1,[],https://github.com/htacg/tidy-html5/pull/620,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/620,Fix the declaration and parser for the bdi tag.,Fix the declaration and parser for the bdi tag.,True,{'THUMBS_UP': ['https://github.com/behnam']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,620,2017-09-29T19:16:28Z,2017-10-02T17:32:07Z,2017-10-02T17:32:24Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #616,1,[],https://github.com/htacg/tidy-html5/pull/620,https://github.com/behnam,2,https://github.com/htacg/tidy-html5/pull/620#issuecomment-333229964,Fix the declaration and parser for the bdi tag.,"I'm wondering what's the best way to double-check all the items in the list here. Many of the element display type lists that I check miss many of the tags, like bdi, and there's no clear property defined for this in newer specs.
Am I missing something in the specs? Or maybe there's a list maintained somewhere out of the HTML spec?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,620,2017-09-29T19:16:28Z,2017-10-02T17:32:07Z,2017-10-02T17:32:24Z,MERGED,True,1,1,1,https://github.com/balthisar,Address #616,1,[],https://github.com/htacg/tidy-html5/pull/620,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/620#issuecomment-333243798,Fix the declaration and parser for the bdi tag.,"@behnam, there's not really a master list; it's all based on convention, and with HTML5 in particular it's expressly not defined in the specification. Content versus appearance, and all of that. In general, we try to keep consistent with browsers' default stylesheets' display property for each element. These days, all of the browsers tend to agree. Of course you'll notice that a lot of our elements are mixed, and so it becomes a judgment call.",True,{'THUMBS_UP': ['https://github.com/behnam']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,621,2017-09-29T19:31:32Z,2017-10-02T17:35:55Z,2017-10-02T17:36:20Z,MERGED,True,3,0,3,https://github.com/balthisar,Address #598,1,[],https://github.com/htacg/tidy-html5/pull/621,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/621,Add the download attribute to the anchor tag.,Add the download attribute to the anchor tag.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,622,2017-09-29T19:43:12Z,2017-10-02T17:16:07Z,2017-10-02T17:16:23Z,MERGED,True,9,6,2,https://github.com/balthisar,Fix #588 and #591,1,[],https://github.com/htacg/tidy-html5/pull/622,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/622,Apply @geoffmcl's patches and tested.,Apply @geoffmcl's patches and tested.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,623,2017-10-01T23:53:52Z,2017-10-02T17:40:06Z,2017-10-02T17:40:20Z,MERGED,True,644,183,7,https://github.com/balthisar,Unix features,8,[],https://github.com/htacg/tidy-html5/pull/623,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/623,"Addresses #584 and #603. Actually, #584 was addressed with a direct push today, as it was pretty innocuous. However this PR addresses all of the related documentation updates involved with the mostly-silent push.
In particular, -help is updated, and the new -help-env, -export-config, and -export-default config address everything that could be needed for maximum rc file flexibility, and improves the documentation for non-rc-file systems as well.","Addresses #584 and #603. Actually, #584 was addressed with a direct push today, as it was pretty innocuous. However this PR addresses all of the related documentation updates involved with the mostly-silent push.
In particular, -help is updated, and the new -help-env, -export-config, and -export-default config address everything that could be needed for maximum rc file flexibility, and improves the documentation for non-rc-file systems as well.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,624,2017-10-03T18:31:27Z,2017-10-04T14:59:39Z,2017-10-04T15:00:24Z,MERGED,True,1164,2835,52,https://github.com/balthisar,Legacy conditionals,14,[],https://github.com/htacg/tidy-html5/pull/624,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/624,"Per #602, eliminate a lot of things that have become a permanent part of tidy now, as well as dead code (which is still available in git history, of course).","Per #602, eliminate a lot of things that have become a permanent part of tidy now, as well as dead code (which is still available in git history, of course).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,624,2017-10-03T18:31:27Z,2017-10-04T14:59:39Z,2017-10-04T15:00:24Z,MERGED,True,1164,2835,52,https://github.com/balthisar,Legacy conditionals,14,[],https://github.com/htacg/tidy-html5/pull/624,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/624#issuecomment-334184093,"Per #602, eliminate a lot of things that have become a permanent part of tidy now, as well as dead code (which is still available in git history, of course).","Passing all tests in Windows, Ubuntu, and macOS, so I will merge this. Binary output should be nearly identical, but will bump version anyway.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,626,2017-10-04T12:07:32Z,2017-10-04T15:12:01Z,2017-10-04T15:12:15Z,MERGED,True,1319,3020,54,https://github.com/balthisar,Sprtf,19,[],https://github.com/htacg/tidy-html5/pull/626,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/626,"This is based off of #624, due to the amount of merge conflicts otherwise. Builds and acts as expected on macOS, Windows 10, Ubuntu.
@geoffmcl, playing with this is a lot nicer than stepping through the code in a painstaking matter! I'm glad that it's basically already compatible with Unix.","This is based off of #624, due to the amount of merge conflicts otherwise. Builds and acts as expected on macOS, Windows 10, Ubuntu.
@geoffmcl, playing with this is a lot nicer than stepping through the code in a painstaking matter! I'm glad that it's basically already compatible with Unix.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,626,2017-10-04T12:07:32Z,2017-10-04T15:12:01Z,2017-10-04T15:12:15Z,MERGED,True,1319,3020,54,https://github.com/balthisar,Sprtf,19,[],https://github.com/htacg/tidy-html5/pull/626,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/626#issuecomment-334188407,"This is based off of #624, due to the amount of merge conflicts otherwise. Builds and acts as expected on macOS, Windows 10, Ubuntu.
@geoffmcl, playing with this is a lot nicer than stepping through the code in a painstaking matter! I'm glad that it's basically already compatible with Unix.","Doesn't break Windows, and works a treat on macOS, so in it goes.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,627,2017-10-04T22:17:05Z,2017-10-05T23:29:16Z,2017-10-05T23:36:04Z,MERGED,True,143,329,14,https://github.com/balthisar,Options categories,4,[],https://github.com/htacg/tidy-html5/pull/627,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/627,"Assign all existing options to new categories based on how they work with the document. Update the man page xsl in order to use them. This is purely a documentation change.
There is a corresponding PR in the api.html-tidy.org repository to update the quickref documents.","Assign all existing options to new categories based on how they work with the document. Update the man page xsl in order to use them. This is purely a documentation change.
There is a corresponding PR in the api.html-tidy.org repository to update the quickref documents.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,627,2017-10-04T22:17:05Z,2017-10-05T23:29:16Z,2017-10-05T23:36:04Z,MERGED,True,143,329,14,https://github.com/balthisar,Options categories,4,[],https://github.com/htacg/tidy-html5/pull/627,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/627#issuecomment-334305844,"Assign all existing options to new categories based on how they work with the document. Update the man page xsl in order to use them. This is purely a documentation change.
There is a corresponding PR in the api.html-tidy.org repository to update the quickref documents.","Here's an example of the new, proposed quickref with the new categories.
quickref_next.html.zip",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/629,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/629#issuecomment-335013095,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","I'll fork the test repo to add a #629 test case, too, which will provide an example.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/629#issuecomment-335327906,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","@balthisar wow, this sort of seems like an out-of-the-blue Feature Request ;=))
I have now had a chance to checkout this squelch_reports branch, and test it using the pr_629 branch of tests... and it works... thanks...
You say the reason for this is - This gives the user great control over hiding things that he or she doesn't care about seeing. - sounds good... no problem...
Is this a Feature Request by you, or do others feel the need for this as well? Please ponit me to the issues...
I am afraid I still do not see any use case where specific messages need to be suppressed, other than the control we already have...
Maybe you can open a Feature Request issue to discuss this further...
And the name, squelsh! Yes, in the lexicon of this word, there is a sense of suppress, maybe mute, but in general, at least in English dictionaries, as opposed to American, is has -

sound treading through mud
electronic: suppresses signals below certain level

And wikipedia seems to concentrate on the second meaning...
Yes, in say Merriam-Websters, I can find the senses of quell or silence... usually resistance or protests...
Then it seems you want the user to know the message identification name, internal to the library, like MISSING_ENDTAG_OPTIONAL. Where are these published, except in the source, in language_en.h, and tidyenum.h?
Assume you intend to massively expand the public API, so that I could find a message to be suppressed, and thus find its identification name, to even be able to use this squelch: <name> option... users should not have to search source code...
Finally, tidy library user can already install a message filter, which you also added, to filter out what they do not want...
You can see, at this moment, without lots more discussion, and reasoning, hopefully in a feature request issue, I do not see the reason for this... sorry...
Ok, back here later - I always prepare my replies offline - and trying to be positive...
First still against the choice of the option name, squelsh!
If I was searching for options to suppress, mute, silence, quell, stop, inhibit a particular message, I do not think I would ever think of squelsh! Maybe something in my Australian English education, but I have travelled, and worked, all over the world... But ok assume a better choice of the option name is chosen...
Really what is the use case, given that I understand it will still count in the warning/error count?
We can use -q to quiet them all... and there is a limiter, --show-error NN, and given that a library user can filter messages - The filter has had a chance to suppress *any* message from output.... what more is needed?
Is this just a way to retire at some point, TidyShowMetaChange and TidyWarnPropAttrs, and stop more of these? But then you add more code to replace these...
I guess I should stop here. It goes without saying, I do not support this PR, at this time...
Maybe more feedback will make it clearer... maybe I am just confused... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/629#issuecomment-335329442,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","""squelch,"" not ""squelsh,"" and as an electrical engineer, yeah, it means to silence (specifically it's to allow a certain signal threshold). Hmmm... maybe doesn't sound as good to non-American ears, but trivial to change to ""mute"" or ""silence"" or whatever. In our lingo, one might say ""squelch that idea,"" but also in our lingo to ""be pissed"" is ""be upset,"" so it's no surprise that it doesn't resonate in other regions.
Console users don't use the library, so they have no ability to filter. This offers a nice compromise between ""I don't want to see that warning!"" and ""Show me everything!""
Yes, the idea is to eliminate TidyShowMetaChange and TidyWarnPropAttrs, but more importantly, to prevent new options like them from ever having to appear again. These two new options avoid all of that nonsense in the future. Even if we don't retire those two options (a different conversation!), this gives users flexibility without breaking anything. Breaking things is a different conversation.
Oh, two new options. Try running the PR with the quelch-id option. No studying the source code is necessary. :-)
And, not really a new feature request, but kind of the backbone to #607 and #609.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/balthisar,5,https://github.com/htacg/tidy-html5/pull/629#issuecomment-335461963,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","Nomenclature
I've managed to push updates naming the options mute (for muting) and mute-id (for discovery).
Use Cases
Maintenance
This PR avoids a lot of future maintenance by avoiding the need to add new configuration options every time we want to add a new warning, but are afraid people won't like new warnings.
Precedent
For example TidyShowMetaChange was added, for what purpose? It doesn't protect against regressions for what Tidy produces; it only protects for regressions on the error output. Why do we care about error output, as long as it's not erroneous? If there's a case for hiding this particular message, then there's a case for the user to want to hide any message. Similar for TidyWarnPropAttrs; why do we feel that it's valid to accept that option but not offer silencing any option?
Other Feature Requests
#477, potentially generates changed output user might not want to see.
#505, potentially generates changed output user might not want to see.
Any other future feature requests that affect output...
Infrastructure
Infrastructure makes things more manageable for future maintenance, and eliminating options (either now or in the future) makes things more maintainable in the long run. This is primarily an infrastructure addition, while giving users a nice new feature.
User acceptance
Gives console application users something new, out of the box, without having to build their own libtidy applications. Tidy needs to be flexible for users, and we want people to want to use Tidy rather than have to use Tidy. That's means we sometimes do more than fix existing bugs.
Impact
It does not remove any additional options, or change any output (HTML or messages) any way on its own, unless activated knowingly.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/629#issuecomment-335577570,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","@balthisar ok, warming to the idea ;=)) with the name change to mute, and I had completely miss-read the meaning of the --mute-id yes option... now exploring with my tidy 5.5.63.I629...
Two things I found -

It seems it only works on warnings and errors?
The noisy Config: ... output seems not suppressed by -q?

The output of Info: Document content looks like HTML5 (STRING_CONTENT_LOOKS), and I add --mute STRING_CONTENT_LOOKS, will give me Config: option ""mute"" given bad argument ""STRING_CONTENT_LOOKS"". So is muting of Info: ... messages not possible, except by --show-info no?
And although I added -q I still see -
Config: messages of type ""MISSING_DOCTYPE"" will not be output
Config: messages of type ""INSERTING_TAG"" will not be output
Config: messages of type ""MISSING_TITLE_ELEMENT"" will not be output

I guess I expect -quiet to really be quiet?
Still exploring... thanks for the additional comments...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/balthisar,7,https://github.com/htacg/tidy-html5/pull/629#issuecomment-335639887,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","@geoffmcl, good catch with STRING_CONTENT_LOOKS; it falls outside of the range of REPORT_MESSAGE_FIRST and REPORT_MESSAGE_LAST, so it's being rejected, even though we've assigned TidyInfo to that. I've just pushed a quick fix.
I'll look at the -q option. I think this option -- even without this PR -- doesn't silence config category messages, but until now they've been uncommon and you've simply not noticed.
Recently I've made some meticulous, in-depth study into all of the conditions that cause all message output, and made several internal code changes to manage these conditions centrally, rather than spreading conditions all over code. I'm pretty sure that all LibTidy output decisions (not console output) are managed completely in messageOut() now. All that remains is actually quite simple!

Accept some slight changes to regression error output.
Decide what categories of messages we want -q to silence.
Ensure that messages are in the correct category.

Basically I think -q should turn off everything except for TidyWarning/TidyError/TidyInfo level messages. This is a trivial fix, but I didn't roll it into this PR because it does break some existing cases on errout.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/629#issuecomment-336637101,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","@balthisar, thanks, STRING_CONTENT_LOOKS has now been fixed...
I guess we have a different idea about changing the errout messages!
As you correctly point out, I added TidyShowMetaChange specifically, and only to maintain the existing errout regression test messages... The idea being that there would be a period where people could get used to these new messages... Then maybe we later switch the option default to yes, and again wait for maybe a few release cycles... And after all that patience, maybe remove the option... A steady, careful, measured progression...
But a recent PR, this?, or another?, you at the same time changed some 30 plus expected messages... This completely tosses out my very cautious approach...
I am trying hard to get over my caution ;=)) Maybe you are right! errout messages should not be considered important... but I still sit on the fence...
And certainly agree -q, if given early in the command, should also suppress Config:... messages. Did not test, but could only find one testbase-expects/*.txt that has a Config: message, case-431716, but does not have -q, so should not change... but as I say, not fully tested...
But ok, let's go for it ;=)) We may or may not get blow-back when we release 5.6, hopefully next month...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,629,2017-10-08T15:09:55Z,2017-10-19T21:21:38Z,2017-10-19T21:34:03Z,MERGED,True,551,46,19,https://github.com/balthisar,Squelch reports,14,[],https://github.com/htacg/tidy-html5/pull/629,https://github.com/balthisar,9,https://github.com/htacg/tidy-html5/pull/629#issuecomment-338041705,"Adds message squelching (muting) to Tidy, avoiding the need to specify a new option every time we might want to allow or disallow new output. Adds two new options:

squelch-id (default no) will provide tags during Tidy's output that
can be used to silence warnings. For example, MISSING_ENDTAG_OPTIONAL
will be shown after warnings of that type. Then in the future, the user can
use...
squelch (default NULL) takes a list of message identification tags.
Messages of this tag type will then be muted from output.

This gives the user great control over hiding things that he or she doesn't care
about seeing. However, muted errors/warnings still count toward error summaries.
If we merge this, then TidyShowMetaChange and TidyWarnPropAttrs are candidates
for removal (using the deprecation mechanism Tidy now has, these will continue
to work, though).","I'll merge this base on comments above, and will update the -q option separately. Right now, can't test the #604 fix, because it's already based on this branch!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,630,2017-10-13T17:49:35Z,2017-10-19T21:41:00Z,2017-10-20T02:47:31Z,MERGED,True,1,0,1,https://github.com/jokester,close stdin and free its FileSource in tidyDocParseStdin,1,['Bug'],https://github.com/htacg/tidy-html5/pull/630,https://github.com/jokester,1,https://github.com/htacg/tidy-html5/pull/630,This caused a tiny memory leak.,This caused a tiny memory leak.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,630,2017-10-13T17:49:35Z,2017-10-19T21:41:00Z,2017-10-20T02:47:31Z,MERGED,True,1,0,1,https://github.com/jokester,close stdin and free its FileSource in tidyDocParseStdin,1,['Bug'],https://github.com/htacg/tidy-html5/pull/630,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/630#issuecomment-336625558,This caused a tiny memory leak.,@jokester see issue #631... will merge this shortly... thanks...,True,{'THUMBS_UP': ['https://github.com/jokester']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,630,2017-10-13T17:49:35Z,2017-10-19T21:41:00Z,2017-10-20T02:47:31Z,MERGED,True,1,0,1,https://github.com/jokester,close stdin and free its FileSource in tidyDocParseStdin,1,['Bug'],https://github.com/htacg/tidy-html5/pull/630,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/630#issuecomment-336942594,This caused a tiny memory leak.,👍,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,630,2017-10-13T17:49:35Z,2017-10-19T21:41:00Z,2017-10-20T02:47:31Z,MERGED,True,1,0,1,https://github.com/jokester,close stdin and free its FileSource in tidyDocParseStdin,1,['Bug'],https://github.com/htacg/tidy-html5/pull/630,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/630#issuecomment-338046064,This caused a tiny memory leak.,"Passes regressions, and fixes a leak. Merging. Thanks!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,632,2017-10-14T12:23:31Z,2017-10-19T21:38:37Z,2018-03-25T16:07:37Z,MERGED,True,47,42,10,https://github.com/geoffmcl,For Issue #604,2,[],https://github.com/htacg/tidy-html5/pull/632,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/632,"For Issue #604 - Tested in Windows 10, Ubuntu and Raspbian, and all appears ok...
If others can review/test would merge this... thanks...","For Issue #604 - Tested in Windows 10, Ubuntu and Raspbian, and all appears ok...
If others can review/test would merge this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,632,2017-10-14T12:23:31Z,2017-10-19T21:38:37Z,2018-03-25T16:07:37Z,MERGED,True,47,42,10,https://github.com/geoffmcl,For Issue #604,2,[],https://github.com/htacg/tidy-html5/pull/632,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/632#issuecomment-336943944,"For Issue #604 - Tested in Windows 10, Ubuntu and Raspbian, and all appears ok...
If others can review/test would merge this... thanks...","@geoffmcl, it looks good by me. I did not test in macOS (I'm on the road and only have my Windows laptop). Given that we're not checking anything platform related, and it works for me in MSVC 2010, I'm good with this. Thanks for fixing it up.
If you have a chance to verify with Ubuntu, feel free to merge; otherwise I'll provide macOS and Ubuntu verification on Thursday most likely.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,632,2017-10-14T12:23:31Z,2017-10-19T21:38:37Z,2018-03-25T16:07:37Z,MERGED,True,47,42,10,https://github.com/geoffmcl,For Issue #604,2,[],https://github.com/htacg/tidy-html5/pull/632,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/632#issuecomment-337899389,"For Issue #604 - Tested in Windows 10, Ubuntu and Raspbian, and all appears ok...
If others can review/test would merge this... thanks...","@balthisar sorry for the brief delay on this. Got sucked into another project which should end shortly and can then cycle back to tidy...
Thanks for the addition testing, but want to add a MSVC only cmake option, DISABLE_DEBUG_LOG, to enable cutting out the extra debug code in the MSVC Debug build, if need be...
Be back soonest... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,634,2017-10-20T12:56:25Z,2017-10-25T23:59:07Z,2017-10-26T00:01:28Z,MERGED,True,43,61,9,https://github.com/balthisar,"Ensure that `TidyQuiet` silences everything that it currently quiets,…",2,[],https://github.com/htacg/tidy-html5/pull/634,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/634,"… plus
TidyConfig and TidyInfo messages. This causes a single regression by hiding
TidyInfo; will publish PR in testing repo.","… plus
TidyConfig and TidyInfo messages. This causes a single regression by hiding
TidyInfo; will publish PR in testing repo.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,634,2017-10-20T12:56:25Z,2017-10-25T23:59:07Z,2017-10-26T00:01:28Z,MERGED,True,43,61,9,https://github.com/balthisar,"Ensure that `TidyQuiet` silences everything that it currently quiets,…",2,[],https://github.com/htacg/tidy-html5/pull/634,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/634#issuecomment-339415685,"… plus
TidyConfig and TidyInfo messages. This causes a single regression by hiding
TidyInfo; will publish PR in testing repo.","@balthisar have tested this quiet_fix branch, and together with PR 24 quiet_fix branch in tests and it all works as expected...
Given that the one test case changed, 1067112, originally SF Issue 638 was about fixing an empty <o:p></o:p> tag, and nothing about message output, and this remains fixed in the html output, reducing the expects message text to a null file seems fully correct... with a config containing quiet: yes, and show-warnings: no, there should be no output...
Also thanks for undating the .po, and .pot files to better reflect the meaning of --quiet yes...
Accordingly, think this and PR 24 in tests should be merged, and will do so shortly, unless you beat me to it... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,634,2017-10-20T12:56:25Z,2017-10-25T23:59:07Z,2017-10-26T00:01:28Z,MERGED,True,43,61,9,https://github.com/balthisar,"Ensure that `TidyQuiet` silences everything that it currently quiets,…",2,[],https://github.com/htacg/tidy-html5/pull/634,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/634#issuecomment-339509583,"… plus
TidyConfig and TidyInfo messages. This causes a single regression by hiding
TidyInfo; will publish PR in testing repo.",Looks I beat you to it! Thanks for checking it out.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/jokester,1,https://github.com/htacg/tidy-html5/pull/637,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/637#issuecomment-339761136,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","@jokester, it looks good and builds fine for me on macOS.
In the future, you might want to consider the macros TidyAlloc and TidyFree, defined in forward.h; they'll make your life a little easier:
#define TidyAlloc(allocator, size) ((allocator)->vtbl->alloc((allocator), (size)))",True,{'THUMBS_UP': ['https://github.com/jokester']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/637#issuecomment-339973095,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","@jokester thanks for this PR replacing strdup/free with TY_(tmbstrdup)/TidyFree... this is great...
Not so sure about the need for the comment change in tmbstr.c but minor...
But your discovery of one case of a malloc, and changing it to TidyAlloc, certainly raises some questions!
As far as I can see it is not used in the library, and is passing the allocated memory out of the library for the user app to free. It guards, and warns in its comments, that it can be null, while TidyAlloc will abort if it fails... quite different behaviour...
This raises the question what is this API doing in a HTML parsing library at all... but will raise that as a separate issue soonest... if/when I get the chance...
Still to get around to a test in an app that replaces tidy's default allocator with its own... but expect no problems... Will do that shortly...
Meantime, no objection to a merge, as is... thanks...",True,{'HOORAY': ['https://github.com/jokester']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/jokester,4,https://github.com/htacg/tidy-html5/pull/637#issuecomment-340137285,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","Oops, I misunderstood what tidySystemLocale really does. Its comment says result: The buffer to use to return the string. while in the code result passed in is ignored. Also I don't get the latter half: Returns NULL on failure. seems more likely to be part of @return.
If we consider the first half comment to be truth, not allocating memory here seems more consistent to me (tidy.c need to allocate it instead).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/637#issuecomment-340182838,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","@jokester,

Oops, I misunderstood what tidySystemLocale really does.

Me too!, given its confusing comments, and that it only does setlocal(...)! Why is it in libtidy at all? If tidy.c needs to do this, and I am not sure it does, then it should do it all... It certainly does not seem required in Windows...
I would think that a user of a particular language would already have the console setup as desired, i.e. stdout/stderr, or could set it up differently, outside tidy, if need be... so maybe this API can be removed...
This is the jist of the separate issue I was going to raise, but maybe can be dealt with here...
Maybe @balthisar will comment when he gets a chance, since I think he introduced this code as part of localization... part of commit 53f2a2d, and maybe others...
Still to get around to a test the strdup replacement using an external allocator, but as stated, do not expect any problems... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/balthisar,6,https://github.com/htacg/tidy-html5/pull/637#issuecomment-340188384,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","@jokester, @geoffmcl, that function signature is a monstrosity of bad design decisions, and perhaps its functionality should be moved to the console application.
As for the signature, we should supply a buffer and size from the console:
void TY_(tidySystemLocale)(tmbstr buf, uint bufsize)
This breaks current API, though, but since no one uses it except the console application, I'd say bite the bullet, pull the trigger, and make the change.
Now the question as to why this exists:

Tidy does some sorting internally, e.g., eventually using TY_(tmbstrcmp). This is probably a good thing, because it avoids any locale-related sorting that a standard library might introduce.
When I added localization, I did not want to affect how Tidy sorts things (i.e., there was no audit on standard library sorting versus the use of Tidy's own sorting). The ""safe"" thing was to ensure that Tidy internally, always used the ""C"" locale despite the user locale, in order to work predictably.
TY_(tidySystemLocale) therefore checks the user's locale without affecting the executable's locale, i.e., the console (and therefore the library) will always run with the C locale. This doesn't apply to LibTidy users, though, because LibTidy will run in its executable's locale.

Of course, Tidy needs to know the user's locale in order to set the language automatically.
As to whether or not we need to preserve the C locale in console Tidy... maybe not! But it was the ""conservative"" (safe) choice at the time.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/637#issuecomment-340280130,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","@jokester now merged... and bumped to version 5.5.74... thanks...
Have done some initial tests with my tidy-opts, which has a test 2 which replaces the default tidy allocator  and all is ok, but need to do more...
Will try to open a separate issue to address the other API questions raised here...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,637,2017-10-26T10:55:21Z,2017-10-29T17:30:53Z,2017-10-30T05:56:17Z,MERGED,True,11,6,2,https://github.com/jokester,use default allocator in place of strdup/free,1,['Bug'],https://github.com/htacg/tidy-html5/pull/637,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/637#issuecomment-340283405,"This removes fully-unmanaged memory allocation, and happens to fix problem of non-standard strdup call (see #636 )","@jokester, @balthisar, OOPS, all is not right, or at least not what I expected!!!
It seems using doc = tidyCreateWithAllocator(&allocator.base); does not set the g_default_allocator/g_malloc/... as I expected!
It does set the allocator used in a TidyDoc, so most allocations are done using my replaced allocator, but not anything using the g_default_allocator...
That does not necessarily negate this merge, but it seems to point out more needs to be done...
If I create a doc giving my allocator I guess I expect that to be used in all allocations... seems to do that I maybe need to specifically do tidySetMallocCall with my malloc, etc, etc...
Will revert after much more testing, and understanding... further feedback appreciated... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,640,2017-10-30T11:53:53Z,2017-11-01T19:06:20Z,2017-11-01T22:45:17Z,MERGED,True,66,56,5,https://github.com/balthisar,Address #639.,2,[],https://github.com/htacg/tidy-html5/pull/640,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/640,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,641,2017-11-03T18:22:04Z,2017-11-20T14:34:17Z,2017-11-22T14:08:58Z,MERGED,True,40,5,5,https://github.com/geoffmcl,Issue #403 - New 'keep-tabs' option to address this.,4,[],https://github.com/htacg/tidy-html5/pull/641,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/641,Testing and feedback appreciated... thanks...,Testing and feedback appreciated... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,641,2017-11-03T18:22:04Z,2017-11-20T14:34:17Z,2017-11-22T14:08:58Z,MERGED,True,40,5,5,https://github.com/geoffmcl,Issue #403 - New 'keep-tabs' option to address this.,4,[],https://github.com/htacg/tidy-html5/pull/641,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/641#issuecomment-342597897,Testing and feedback appreciated... thanks...,This PR seems good-to-go... any testing and feedback appreciated... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,641,2017-11-03T18:22:04Z,2017-11-20T14:34:17Z,2017-11-22T14:08:58Z,MERGED,True,40,5,5,https://github.com/geoffmcl,Issue #403 - New 'keep-tabs' option to address this.,4,[],https://github.com/htacg/tidy-html5/pull/641,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/641#issuecomment-344597203,Testing and feedback appreciated... thanks...,"@geoffmcl, sorry I'd not reviewed this update earlier. Other than a typo -- ""elments"" -- I suggest that you merge this.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,641,2017-11-03T18:22:04Z,2017-11-20T14:34:17Z,2017-11-22T14:08:58Z,MERGED,True,40,5,5,https://github.com/geoffmcl,Issue #403 - New 'keep-tabs' option to address this.,4,[],https://github.com/htacg/tidy-html5/pull/641,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/641#issuecomment-346360133,Testing and feedback appreciated... thanks...,With the above hot fix tidy 5.5.85 seems to fully pass all tests...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,644,2017-11-07T18:22:44Z,2017-11-20T14:34:17Z,2018-03-25T16:39:49Z,MERGED,True,2098,285,5,https://github.com/geoffmcl,Issue #643 - Greatly expand entities list,11,[],https://github.com/htacg/tidy-html5/pull/644,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/644,Expand known entity list to 2031...,Expand known entity list to 2031...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,644,2017-11-07T18:22:44Z,2017-11-20T14:34:17Z,2018-03-25T16:39:49Z,MERGED,True,2098,285,5,https://github.com/geoffmcl,Issue #643 - Greatly expand entities list,11,[],https://github.com/htacg/tidy-html5/pull/644,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/644#issuecomment-343254290,Expand known entity list to 2031...,"Branch issue-643 now rebases to next to add the fixed header install location, see issue #646, PR #647 ...
Testers must do a pull to update their local repo. issue-643 branch, for further testing, and should make sure any installs to include/tidy are deleted... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,644,2017-11-07T18:22:44Z,2017-11-20T14:34:17Z,2018-03-25T16:39:49Z,MERGED,True,2098,285,5,https://github.com/geoffmcl,Issue #643 - Greatly expand entities list,11,[],https://github.com/htacg/tidy-html5/pull/644,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/644#issuecomment-343293514,Expand known entity list to 2031...,"Beautiful! There are a couple of obvious regressions in 412 and 437468, but regenerating the testbase-expects seems acceptable in this case.
For VERS_CHECK, though, I would assume that anything that's not part of the original set is HTML5 only (citation).
If I used (this document)[https://dev.w3.org/html5/html-author/charref] and change the doctype to an HTML4 doctype, they still render in my modern browsers, but is this behavior we can count on across the board?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,644,2017-11-07T18:22:44Z,2017-11-20T14:34:17Z,2018-03-25T16:39:49Z,MERGED,True,2098,285,5,https://github.com/geoffmcl,Issue #643 - Greatly expand entities list,11,[],https://github.com/htacg/tidy-html5/pull/644,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/644#issuecomment-345321653,Expand known entity list to 2031...,This merge should be simultaneous with PR 25 in the tests repo...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/645,"Review, testing and feedback welcome... thanks...","Review, testing and feedback welcome... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/645#issuecomment-344607133,"Review, testing and feedback welcome... thanks...","@geoffmcl, testing is okay, but see followup discussion in #437.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/645#issuecomment-345721048,"Review, testing and feedback welcome... thanks...","@geoffmcl, I merged the others, but didn't merge this one in case you want to change the scope based on #437 additional discussion.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/645#issuecomment-346138494,"Review, testing and feedback welcome... thanks...",@balthisar see more discussion in #437...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/645#issuecomment-383318237,"Review, testing and feedback welcome... thanks...",@balthisar another plea #437 for just a yes or no reply...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/balthisar,6,https://github.com/htacg/tidy-html5/pull/645#issuecomment-383342691,"Review, testing and feedback welcome... thanks...","@geoffmcl, go for it. We can open inconsistencies as future issues. Yes, this is ad hoc, but let it happen. We can do logical engineering later.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,645,2017-11-07T19:43:40Z,2020-11-22T15:44:32Z,2020-11-22T15:45:28Z,MERGED,True,10,8,4,https://github.com/geoffmcl,Issue #437 - re-use of 'wrap-php' option,1,[],https://github.com/htacg/tidy-html5/pull/645,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/645#issuecomment-731767202,"Review, testing and feedback welcome... thanks...","@balthisar ok, went for it ;=))",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,647,2017-11-09T14:05:33Z,2017-11-09T18:30:34Z,2017-11-09T18:30:41Z,MERGED,True,1,1,1,https://github.com/geoffmcl,Issue #646 - Correct 'INCLUDE_INSTALL_DIR' per 'master',1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/647,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/647,"Addresses issue #646, correcting the header install location to as per released master...","Addresses issue #646, correcting the header install location to as per released master...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,647,2017-11-09T14:05:33Z,2017-11-09T18:30:34Z,2017-11-09T18:30:41Z,MERGED,True,1,1,1,https://github.com/geoffmcl,Issue #646 - Correct 'INCLUDE_INSTALL_DIR' per 'master',1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/647,https://github.com/spk,2,https://github.com/htacg/tidy-html5/pull/647#issuecomment-343191436,"Addresses issue #646, correcting the header install location to as per released master...","Look good to me, issue introduced in 3333ca7#diff-af3b638bc2a3e6c650974192a53c7291R208",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,648,2017-11-13T10:21:57Z,2017-11-15T13:49:32Z,2017-11-18T04:38:58Z,MERGED,True,1,1,1,https://github.com/aureliojargas,Fix typo,1,[],https://github.com/htacg/tidy-html5/pull/648,https://github.com/aureliojargas,1,https://github.com/htacg/tidy-html5/pull/648,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,648,2017-11-13T10:21:57Z,2017-11-15T13:49:32Z,2017-11-18T04:38:58Z,MERGED,True,1,1,1,https://github.com/aureliojargas,Fix typo,1,[],https://github.com/htacg/tidy-html5/pull/648,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/648#issuecomment-344597407,,"Great! Thanks, @aureliojargas.",True,{'HEART': ['https://github.com/aureliojargas']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,654,2017-11-20T18:11:31Z,2020-11-22T16:05:10Z,2020-11-22T16:05:10Z,CLOSED,False,219,8,12,https://github.com/balthisar,Added a new boolean-attributes configuration option.,1,[],https://github.com/htacg/tidy-html5/pull/654,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/654,Don't merge this without a discussion at #439...,Don't merge this without a discussion at #439...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,654,2017-11-20T18:11:31Z,2020-11-22T16:05:10Z,2020-11-22T16:05:10Z,CLOSED,False,219,8,12,https://github.com/balthisar,Added a new boolean-attributes configuration option.,1,[],https://github.com/htacg/tidy-html5/pull/654,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/654#issuecomment-346684808,Don't merge this without a discussion at #439...,@balthisar see more discussion in #439... not sure this is needed...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,654,2017-11-20T18:11:31Z,2020-11-22T16:05:10Z,2020-11-22T16:05:10Z,CLOSED,False,219,8,12,https://github.com/balthisar,Added a new boolean-attributes configuration option.,1,[],https://github.com/htacg/tidy-html5/pull/654,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/654#issuecomment-731769928,Don't merge this without a discussion at #439...,"@balthisar years later, and after re-reading all #439, still feel this is not needed, so closing it... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,661,2017-12-16T19:57:14Z,2018-01-01T17:15:33Z,2018-01-01T17:15:43Z,MERGED,True,4,2,1,https://github.com/geoffmcl,Issue #656 - protect against NULL node set in loop,1,['Bug'],https://github.com/htacg/tidy-html5/pull/661,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/661,Fix for issue #656...,Fix for issue #656...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,662,2017-12-16T20:12:23Z,2018-01-01T17:22:58Z,2018-01-01T17:23:04Z,MERGED,True,11,2,1,https://github.com/geoffmcl,Issue #655 - Fix unsafe use of output buffer as input param,1,['Bug'],https://github.com/htacg/tidy-html5/pull/662,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/662,Fix for #655 for testing and review... thanks...,Fix for #655 for testing and review... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,664,2017-12-26T02:01:21Z,2018-01-01T17:28:05Z,2018-01-01T17:28:11Z,MERGED,True,41,17,9,https://github.com/geoffmcl,Issue 663 - fixes for Haiku port,6,['Build/Install'],https://github.com/htacg/tidy-html5/pull/664,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/664,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,684,2018-03-03T06:49:21Z,2018-04-12T12:56:39Z,2018-04-13T13:22:31Z,MERGED,True,1,1,1,https://github.com/jidanni,Update language_en.h,1,['Docs'],https://github.com/htacg/tidy-html5/pull/684,https://github.com/jidanni,1,https://github.com/htacg/tidy-html5/pull/684,"Default: no means YES DO print out comments.
If set to YES, then DON'T print out comments.","Default: no means YES DO print out comments.
If set to YES, then DON'T print out comments.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,684,2018-03-03T06:49:21Z,2018-04-12T12:56:39Z,2018-04-13T13:22:31Z,MERGED,True,1,1,1,https://github.com/jidanni,Update language_en.h,1,['Docs'],https://github.com/htacg/tidy-html5/pull/684,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/684#issuecomment-371594525,"Default: no means YES DO print out comments.
If set to YES, then DON'T print out comments.","@jidanni thanks for this PR... we like those... ;=))
This reversal of the text sense of this option looks correct to me...
Subject to any further comments, will merge this shortly... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,684,2018-03-03T06:49:21Z,2018-04-12T12:56:39Z,2018-04-13T13:22:31Z,MERGED,True,1,1,1,https://github.com/jidanni,Update language_en.h,1,['Docs'],https://github.com/htacg/tidy-html5/pull/684,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/684#issuecomment-381133525,"Default: no means YES DO print out comments.
If set to YES, then DON'T print out comments.","@jidanni as you can see now merged, thanks...
It was not until after pushing the merge did I note this was to the master branch... EEEK!
Ok, have now cherry-picked the commit into next, so this docs the fix will march forward towards the next release... just hope this does not come back to bite me at that time...
Normally PR should always be to the next branch, and if thought fit we may choose to cherry-pick it back into a previous release, and make a new release... which we are not doing in this case...
But anyway, it is done... thanks...",True,{'THUMBS_UP': ['https://github.com/jidanni']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,695,2018-03-15T12:49:54Z,2018-04-13T13:25:33Z,2018-04-13T13:25:40Z,MERGED,True,93,6,2,https://github.com/geoffmcl,Issue 679,2,[],https://github.com/htacg/tidy-html5/pull/695,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/695,PR for Issue #679,PR for Issue #679,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,701,2018-03-25T17:47:27Z,2018-04-19T11:52:10Z,2018-04-19T11:52:18Z,MERGED,True,1,0,1,https://github.com/geoffmcl,Is #686 - Add attr COLOR to W3CAttrsFor_LINK,1,[],https://github.com/htacg/tidy-html5/pull/701,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/701,Suggested fix for issue #686 for testing... thanks...,Suggested fix for issue #686 for testing... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,702,2018-03-27T17:39:01Z,2018-04-19T12:49:52Z,2018-04-19T12:50:00Z,MERGED,True,3,2,1,https://github.com/geoffmcl,Issue 698 - docs update,3,[],https://github.com/htacg/tidy-html5/pull/702,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/702,"Per #698 mention the need for a colon, :, in a config file, and add that below there is a sample config to review...","Per #698 mention the need for a colon, :, in a config file, and add that below there is a sample config to review...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,703,2018-03-27T18:42:28Z,2018-04-19T16:59:13Z,2018-04-19T16:59:18Z,MERGED,True,2,1,1,https://github.com/geoffmcl,Is #700 - change script parsing if in html5 mode,1,[],https://github.com/htacg/tidy-html5/pull/703,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/703,NOTE: This merge must be done in conjunction with PR 27 in the regression tests to get a SUCCESS run...,NOTE: This merge must be done in conjunction with PR 27 in the regression tests to get a SUCCESS run...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,705,2018-03-29T18:09:53Z,2018-04-21T12:29:00Z,2018-11-28T19:40:14Z,MERGED,True,6,8,3,https://github.com/geoffmcl,Is #673 - Revert 350f7b4 and 86e62db AdjustConfig logic,1,['Bug'],https://github.com/htacg/tidy-html5/pull/705,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/705,"While these look like a code cleanup, they appear to have an adverse consequence in the use of libtidy by PHP 7+, so have been reverted. Changes in -
modified:   src/config.c
modified:   src/config.h
modified:   src/tidylib.c

As indicated while these look like seemingly innocuous changes in AdjustConfig logic, it has caused  some very undesirable changes... see #704 for more details...
As stated in #673, unless a better fix is found will consider merging the issue-673 to next...
Look forward to further feedback... thanks...","While these look like a code cleanup, they appear to have an adverse consequence in the use of libtidy by PHP 7+, so have been reverted. Changes in -
modified:   src/config.c
modified:   src/config.h
modified:   src/tidylib.c

As indicated while these look like seemingly innocuous changes in AdjustConfig logic, it has caused  some very undesirable changes... see #704 for more details...
As stated in #673, unless a better fix is found will consider merging the issue-673 to next...
Look forward to further feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,705,2018-03-29T18:09:53Z,2018-04-21T12:29:00Z,2018-11-28T19:40:14Z,MERGED,True,6,8,3,https://github.com/geoffmcl,Is #673 - Revert 350f7b4 and 86e62db AdjustConfig logic,1,['Bug'],https://github.com/htacg/tidy-html5/pull/705,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/705#issuecomment-442577839,"While these look like a code cleanup, they appear to have an adverse consequence in the use of libtidy by PHP 7+, so have been reverted. Changes in -
modified:   src/config.c
modified:   src/config.h
modified:   src/tidylib.c

As indicated while these look like seemingly innocuous changes in AdjustConfig logic, it has caused  some very undesirable changes... see #704 for more details...
As stated in #673, unless a better fix is found will consider merging the issue-673 to next...
Look forward to further feedback... thanks...","This seems related to #780 - looks like a prob. with wrap => 0, which seemed broken in 5.6, fixed in 5.7.9, and so is in current next...
If someone had the time to cherry pick this fix back into the 5.6, and issue a 5.6.1 release, that would be great...
But given that we have some difficulty in making a new release 5.8, or 6.0, given #743, that does not seem likely to happen... I don't know how to fix that... see stalled #741...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,708,2018-04-03T16:20:13Z,2018-04-22T12:38:01Z,2018-04-22T12:38:07Z,MERGED,True,2,1,1,https://github.com/geoffmcl,Is #697 - Add NOWRAP to print of pre tag,1,[],https://github.com/htacg/tidy-html5/pull/708,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/708,This seem a good addition for issue #697...,This seem a good addition for issue #697...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,712,2018-04-04T10:31:48Z,2018-04-23T16:51:18Z,2018-04-23T18:03:53Z,MERGED,True,2,2,1,https://github.com/doronbehar,Make global attribute `dir` accept auto as well.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/712,https://github.com/doronbehar,1,https://github.com/htacg/tidy-html5/pull/712,https://www.w3schools.com/tags/att_global_dir.asp,https://www.w3schools.com/tags/att_global_dir.asp,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,712,2018-04-04T10:31:48Z,2018-04-23T16:51:18Z,2018-04-23T18:03:53Z,MERGED,True,2,2,1,https://github.com/doronbehar,Make global attribute `dir` accept auto as well.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/712,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/712#issuecomment-378666637,https://www.w3schools.com/tags/att_global_dir.asp,"@doronbehar thank you for this PR... we like those...
But maybe this fix does not go far enough? Or maybe too far, depending on your perspective...
As far as I can quickly read in W3C documentation - note we do not normally accept w3schools, which as far as I know has no affiliation with the W3C - this auto value for the dir attribute was only introduced in HTML5...
See attribute-auto, dir-attribute, dirauto, and probably others references...
Since tidy works in legacy html4 or html5 mode depending on the doctype found, and none defaults to html5, maybe the CheckTextDir service should reflect this?
Maybe we could have something like (code not tested) -
/* checks dir attribute */
void CheckTextDir( TidyDocImpl* doc, Node *node, AttVal *attval)
{
    ctmbstr const values4[] = {""rtl"", ""ltr"", NULL};
    /* Is #712 - add 'auto' for HTML5 */
    ctmbstr const values5[] = {""rtl"", ""ltr"", ""auto"", NULL};
    CheckAttrValidity( doc, node, attval, 
       (TY_(IsHTML5Mode)(doc) ? values5 : values4) );
}

Or maybe there is a better way to do this switching...
What do you, or others, think? Thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,712,2018-04-04T10:31:48Z,2018-04-23T16:51:18Z,2018-04-23T18:03:53Z,MERGED,True,2,2,1,https://github.com/doronbehar,Make global attribute `dir` accept auto as well.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/712,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/712#issuecomment-383173067,https://www.w3schools.com/tags/att_global_dir.asp,"@doronbehar I have cycled around to shortly merging this PR, but still think the above patch is required...
It is only in a HTML5 document that auto is valid...
Yes I could add this after the merge, but it seems better if this was part of your fix... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,712,2018-04-04T10:31:48Z,2018-04-23T16:51:18Z,2018-04-23T18:03:53Z,MERGED,True,2,2,1,https://github.com/doronbehar,Make global attribute `dir` accept auto as well.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/712,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/712#issuecomment-383649469,https://www.w3schools.com/tags/att_global_dir.asp,"@doronbehar  now merged, and then patched as indicated... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,712,2018-04-04T10:31:48Z,2018-04-23T16:51:18Z,2018-04-23T18:03:53Z,MERGED,True,2,2,1,https://github.com/doronbehar,Make global attribute `dir` accept auto as well.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/712,https://github.com/doronbehar,5,https://github.com/htacg/tidy-html5/pull/712#issuecomment-383655168,https://www.w3schools.com/tags/att_global_dir.asp,"Thanks you so much for suggesting making this part of my fix, I just couldn't find the time to test it myself.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,712,2018-04-04T10:31:48Z,2018-04-23T16:51:18Z,2018-04-23T18:03:53Z,MERGED,True,2,2,1,https://github.com/doronbehar,Make global attribute `dir` accept auto as well.,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/712,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/712#issuecomment-383668370,https://www.w3schools.com/tags/att_global_dir.asp,"@doronbehar no problem...
Have added 2 tests to my tests repo, with dir=""auto"" -

in_712.html - a HTML5 doc, that now passes tidy 5.7.11 plus, with no warnings. And also passes the W3C nu validator.
in_712-1.html - a HTML4 doc, which tidy 5.7.11, and most other versions, earlier or later, will still flag as a warning, as does the W3C legacy validator.

As a note to myself, I guess I should also add these to the official regression tests, as a continual reminder of the addition of dir=""auto"" in HTML5, unless someone beats me to it...
Another little step forward... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,714,2018-04-06T18:48:08Z,2018-04-23T17:13:00Z,2018-04-23T17:13:06Z,MERGED,True,12,2,4,https://github.com/geoffmcl,Is #709 - Improve message if 'implict',1,[],https://github.com/htacg/tidy-html5/pull/714,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/714,"Try to make it clear the warning is in html added by tidy during a fixup, and not in the original user input html...","Try to make it clear the warning is in html added by tidy during a fixup, and not in the original user input html...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,715,2018-04-10T15:29:03Z,2018-04-24T12:49:06Z,2018-04-24T12:49:07Z,CLOSED,False,41,3,6,https://github.com/ler762,update --gnu-emac option documentation,3,[],https://github.com/htacg/tidy-html5/pull/715,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/715,"make it a bit clearer what the --gnu-emac option does and give an
example of tidy output with and without the option.","make it a bit clearer what the --gnu-emac option does and give an
example of tidy output with and without the option.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,715,2018-04-10T15:29:03Z,2018-04-24T12:49:06Z,2018-04-24T12:49:07Z,CLOSED,False,41,3,6,https://github.com/ler762,update --gnu-emac option documentation,3,[],https://github.com/htacg/tidy-html5/pull/715,https://github.com/ler762,2,https://github.com/htacg/tidy-html5/pull/715#issuecomment-380549312,"make it a bit clearer what the --gnu-emac option does and give an
example of tidy output with and without the option.","yeah, now I see why I should have made a branch for each change.  If someone really wants two separate patches I can redo it",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,715,2018-04-10T15:29:03Z,2018-04-24T12:49:06Z,2018-04-24T12:49:07Z,CLOSED,False,41,3,6,https://github.com/ler762,update --gnu-emac option documentation,3,[],https://github.com/htacg/tidy-html5/pull/715,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/715#issuecomment-380557245,"make it a bit clearer what the --gnu-emac option does and give an
example of tidy output with and without the option.","@ler762 yup, I thought about mentioning that separation, but this being your first PR, which we are always thankful for, decided to let it go in this case... will accept it as you like...
Hope you offer many more PR's, but watch-out next time ;=))
And due to my workflow, prefer comments in the issue #713 this started from, but again no problem really...
Anywhere is better than none ;=))",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,715,2018-04-10T15:29:03Z,2018-04-24T12:49:06Z,2018-04-24T12:49:07Z,CLOSED,False,41,3,6,https://github.com/ler762,update --gnu-emac option documentation,3,[],https://github.com/htacg/tidy-html5/pull/715,https://github.com/ler762,4,https://github.com/htacg/tidy-html5/pull/715#issuecomment-380610025,"make it a bit clearer what the --gnu-emac option does and give an
example of tidy output with and without the option.",hopefully the last change for this PR,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,715,2018-04-10T15:29:03Z,2018-04-24T12:49:06Z,2018-04-24T12:49:07Z,CLOSED,False,41,3,6,https://github.com/ler762,update --gnu-emac option documentation,3,[],https://github.com/htacg/tidy-html5/pull/715,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/715#issuecomment-383917838,"make it a bit clearer what the --gnu-emac option does and give an
example of tidy output with and without the option.",@ler762 have now merged #717 which I think contains all the same patches - I hope - so closing this...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,717,2018-04-13T16:15:15Z,2018-04-24T12:41:24Z,2018-04-24T12:41:25Z,MERGED,True,41,3,6,https://github.com/ler762,Doc nits,3,[],https://github.com/htacg/tidy-html5/pull/717,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/717,fix spelling mistake,fix spelling mistake,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,722,2018-04-20T18:01:10Z,2018-04-24T16:30:35Z,2018-04-24T16:30:43Z,MERGED,True,2,2,1,https://github.com/geoffmcl,Is #721 - cast away some gcc warnings,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/722,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/722,The addition of the simple cast seems to clear the gcc warnings...,The addition of the simple cast seems to clear the gcc warnings...,True,{'THUMBS_UP': ['https://github.com/Kristinita']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,722,2018-04-20T18:01:10Z,2018-04-24T16:30:35Z,2018-04-24T16:30:43Z,MERGED,True,2,2,1,https://github.com/geoffmcl,Is #721 - cast away some gcc warnings,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/722,https://github.com/Kristinita,2,https://github.com/htacg/tidy-html5/pull/722#issuecomment-383272533,The addition of the simple cast seems to clear the gcc warnings...,"Status: ✔️ Fixed for me.
No warnings in console.
Thanks.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,727,2018-04-30T03:11:43Z,2018-05-01T13:03:15Z,2018-05-01T13:03:15Z,CLOSED,False,57,27,1,https://github.com/ler762,Issue 718,3,[],https://github.com/htacg/tidy-html5/pull/727,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/727,update to CONTRIBUTING.md,update to CONTRIBUTING.md,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,727,2018-04-30T03:11:43Z,2018-05-01T13:03:15Z,2018-05-01T13:03:15Z,CLOSED,False,57,27,1,https://github.com/ler762,Issue 718,3,[],https://github.com/htacg/tidy-html5/pull/727,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/727#issuecomment-385665714,update to CONTRIBUTING.md,@ler762 accepted only the first commit... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,731,2018-05-14T15:40:31Z,2018-11-17T17:20:07Z,2018-11-17T17:20:18Z,MERGED,True,5,2,1,https://github.com/geoffmcl,Issue 726 upper case anchors,3,['Bug'],https://github.com/htacg/tidy-html5/pull/731,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/731,"WARNING As mentioned in #726, the regression testing, with this new version, case 588061 now shows multiple additional warnings, for a duplicated anchor of ""MAP details"", which previous versions missed...
The expects output needs to be adjusted at the same time this is merged...","WARNING As mentioned in #726, the regression testing, with this new version, case 588061 now shows multiple additional warnings, for a duplicated anchor of ""MAP details"", which previous versions missed...
The expects output needs to be adjusted at the same time this is merged...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,731,2018-05-14T15:40:31Z,2018-11-17T17:20:07Z,2018-11-17T17:20:18Z,MERGED,True,5,2,1,https://github.com/geoffmcl,Issue 726 upper case anchors,3,['Bug'],https://github.com/htacg/tidy-html5/pull/731,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/731#issuecomment-439130444,"WARNING As mentioned in #726, the regression testing, with this new version, case 588061 now shows multiple additional warnings, for a duplicated anchor of ""MAP details"", which previous versions missed...
The expects output needs to be adjusted at the same time this is merged...","@ler762 created a PR 29 for the test fix, some time ago...
Baring any last minute hiccups plan to merge this, and that PR over the next few days... thanks for any feedback...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,731,2018-05-14T15:40:31Z,2018-11-17T17:20:07Z,2018-11-17T17:20:18Z,MERGED,True,5,2,1,https://github.com/geoffmcl,Issue 726 upper case anchors,3,['Bug'],https://github.com/htacg/tidy-html5/pull/731,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/731#issuecomment-439476771,"WARNING As mentioned in #726, the regression testing, with this new version, case 588061 now shows multiple additional warnings, for a duplicated anchor of ""MAP details"", which previous versions missed...
The expects output needs to be adjusted at the same time this is merged...","Oops, the PR 29 mentioned is related to another issue... sorry...
So must get around to creating a PR just for this fix...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,731,2018-05-14T15:40:31Z,2018-11-17T17:20:07Z,2018-11-17T17:20:18Z,MERGED,True,5,2,1,https://github.com/geoffmcl,Issue 726 upper case anchors,3,['Bug'],https://github.com/htacg/tidy-html5/pull/731,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/731#issuecomment-439486708,"WARNING As mentioned in #726, the regression testing, with this new version, case 588061 now shows multiple additional warnings, for a duplicated anchor of ""MAP details"", which previous versions missed...
The expects output needs to be adjusted at the same time this is merged...",Have now created PR 31 which should be merged simultaneously with this one...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,747,2018-08-20T07:11:08Z,2019-01-14T18:36:20Z,2019-01-14T18:36:20Z,MERGED,True,2,2,1,https://github.com/drizt,Fix extra const modifier,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/747,https://github.com/drizt,1,https://github.com/htacg/tidy-html5/pull/747,Fix #746,Fix #746,True,{'THUMBS_UP': ['https://github.com/d1vanov']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,747,2018-08-20T07:11:08Z,2019-01-14T18:36:20Z,2019-01-14T18:36:20Z,MERGED,True,2,2,1,https://github.com/drizt,Fix extra const modifier,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/747,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/747#issuecomment-439133354,Fix #746,"This looks fine to me... will merge shortly...
Any last minute feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,747,2018-08-20T07:11:08Z,2019-01-14T18:36:20Z,2019-01-14T18:36:20Z,MERGED,True,2,2,1,https://github.com/drizt,Fix extra const modifier,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/747,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/747#issuecomment-441760842,Fix #746,"As commented in #746, maybe this PR should be extended to another 6 cases of the repeated const...
Hope you get the chance to add these... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,749,2018-08-23T02:41:16Z,2020-11-22T16:36:09Z,2020-11-22T16:36:10Z,CLOSED,False,174,0,11,https://github.com/brlin-tw,Is. #748 - Implement snap packaging,1,[],https://github.com/htacg/tidy-html5/pull/749,https://github.com/brlin-tw,1,https://github.com/htacg/tidy-html5/pull/749,"Snaps are universal Linux packages that can be installed and run on
multiple GNU+Linux distributions with ease.  This patch implements the
necessary files to build tidy as a snap.
Refer-to: Snapcraft - Snaps are universal Linux packages
https://snapcraft.io
Intent-To-Package: Snaps are Universal Linux Packages · Issue #748 · htacg/tidy-html5
#748
Conforming-to: tidy-html5/CONTRIBUTING.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CONTRIBUTING.md
Conforming-to: tidy-html5/CODESTYLE.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CODESTYLE.md
Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com","Snaps are universal Linux packages that can be installed and run on
multiple GNU+Linux distributions with ease.  This patch implements the
necessary files to build tidy as a snap.
Refer-to: Snapcraft - Snaps are universal Linux packages
https://snapcraft.io
Intent-To-Package: Snaps are Universal Linux Packages · Issue #748 · htacg/tidy-html5
#748
Conforming-to: tidy-html5/CONTRIBUTING.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CONTRIBUTING.md
Conforming-to: tidy-html5/CODESTYLE.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CODESTYLE.md
Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,749,2018-08-23T02:41:16Z,2020-11-22T16:36:09Z,2020-11-22T16:36:10Z,CLOSED,False,174,0,11,https://github.com/brlin-tw,Is. #748 - Implement snap packaging,1,[],https://github.com/htacg/tidy-html5/pull/749,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/749#issuecomment-421568607,"Snaps are universal Linux packages that can be installed and run on
multiple GNU+Linux distributions with ease.  This patch implements the
necessary files to build tidy as a snap.
Refer-to: Snapcraft - Snaps are universal Linux packages
https://snapcraft.io
Intent-To-Package: Snaps are Universal Linux Packages · Issue #748 · htacg/tidy-html5
#748
Conforming-to: tidy-html5/CONTRIBUTING.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CONTRIBUTING.md
Conforming-to: tidy-html5/CODESTYLE.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CODESTYLE.md
Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com","@Lin-Buo-Ren, I'd rather give you access to another repository under htacg, if you're willing to maintain this. Tidy does not distribute on any platform, and we can't take responsibility for every different distribution means that is out there. For example, you'll see that someone else maintains the Linux distros, Chocolately, homebrew, etc.
We do have build options in our CMakeLists.txt file that helps with various distros, however, and if you can come up with a pure cmake solution for snap, or want to add something to the CMakeLists.txt that makes it easier to distribute to snap from another repo, then that would be much, much more appropriate.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,749,2018-08-23T02:41:16Z,2020-11-22T16:36:09Z,2020-11-22T16:36:10Z,CLOSED,False,174,0,11,https://github.com/brlin-tw,Is. #748 - Implement snap packaging,1,[],https://github.com/htacg/tidy-html5/pull/749,https://github.com/brlin-tw,3,https://github.com/htacg/tidy-html5/pull/749#issuecomment-427641091,"Snaps are universal Linux packages that can be installed and run on
multiple GNU+Linux distributions with ease.  This patch implements the
necessary files to build tidy as a snap.
Refer-to: Snapcraft - Snaps are universal Linux packages
https://snapcraft.io
Intent-To-Package: Snaps are Universal Linux Packages · Issue #748 · htacg/tidy-html5
#748
Conforming-to: tidy-html5/CONTRIBUTING.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CONTRIBUTING.md
Conforming-to: tidy-html5/CODESTYLE.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CODESTYLE.md
Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com","Apologies for the delay.
Although it is definitely possible to publish the snap in a separate repository I would like to ask for a reconsideration of taking over the maintenance of the snap package.
In contrast to traditional packaging systems packages, snap packages can be installed on a broad range of Linux distributions that can run snapd, this makes it a suitable release target to be featured in the HTML Tidy Binary Releases page and provides an up-to-date and aligned experience to the users.  With the continuous integration and delivery setup it is also easier to let the user test changes in the latest development snapshots by simply telling them to install the package via the automatic publishing edge channel with a simple command:
sudo snap refresh --channel=edge tidy

The snap technology is built for the upstream, in addition to the release channels, it provides tracks that enable developers to publish multiple supported releases of their application under the same name.  By using this feature you can provide releases of both master and next branch as a track simultaneously with 4 independent release channels for QA purposes.
Last but not least the packaging of this snap is, in fact, the simplest one I have ever done and only took me less than one day to set it up into a usable state.  It would really be a pity if you don't take over the maintenance.
I appreciate your offer of providing the separate GitHub repository under the HTACG organization, but currently due to the limitation of the build infrastructure on build.snapcraft.io the automatic build and publish of edge channel snaps is only possible when the packaging files and the snapped app's source are in the same repository AND the snap publisher has the write access to the repository.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,749,2018-08-23T02:41:16Z,2020-11-22T16:36:09Z,2020-11-22T16:36:10Z,CLOSED,False,174,0,11,https://github.com/brlin-tw,Is. #748 - Implement snap packaging,1,[],https://github.com/htacg/tidy-html5/pull/749,https://github.com/brlin-tw,4,https://github.com/htacg/tidy-html5/pull/749#issuecomment-442556580,"Snaps are universal Linux packages that can be installed and run on
multiple GNU+Linux distributions with ease.  This patch implements the
necessary files to build tidy as a snap.
Refer-to: Snapcraft - Snaps are universal Linux packages
https://snapcraft.io
Intent-To-Package: Snaps are Universal Linux Packages · Issue #748 · htacg/tidy-html5
#748
Conforming-to: tidy-html5/CONTRIBUTING.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CONTRIBUTING.md
Conforming-to: tidy-html5/CODESTYLE.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CODESTYLE.md
Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com",I'm currently proposing of acquiring a webhook that can be set in the upstream's repository for triggering automatic third party snap build on every push and would like to ask if you're willing to set up one if it's available.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,749,2018-08-23T02:41:16Z,2020-11-22T16:36:09Z,2020-11-22T16:36:10Z,CLOSED,False,174,0,11,https://github.com/brlin-tw,Is. #748 - Implement snap packaging,1,[],https://github.com/htacg/tidy-html5/pull/749,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/749#issuecomment-731774079,"Snaps are universal Linux packages that can be installed and run on
multiple GNU+Linux distributions with ease.  This patch implements the
necessary files to build tidy as a snap.
Refer-to: Snapcraft - Snaps are universal Linux packages
https://snapcraft.io
Intent-To-Package: Snaps are Universal Linux Packages · Issue #748 · htacg/tidy-html5
#748
Conforming-to: tidy-html5/CONTRIBUTING.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CONTRIBUTING.md
Conforming-to: tidy-html5/CODESTYLE.md at next · htacg/tidy-html5
https://github.com/htacg/tidy-html5/blob/next/README/CODESTYLE.md
Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com","@Lin-Buo-Ren, agree with the comments of @balthisar, this should not be in this main tidy repo, but maybe other arrangements could be made... sorry...
Accordingly, closing this PR for now, and the associated issue #748... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,753,2018-09-05T15:27:05Z,2018-09-05T22:50:13Z,2018-09-06T13:25:16Z,MERGED,True,1,1,1,https://github.com/brlin-tw,Fix typo,1,[],https://github.com/htacg/tidy-html5/pull/753,https://github.com/brlin-tw,1,https://github.com/htacg/tidy-html5/pull/753,"Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com","Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,753,2018-09-05T15:27:05Z,2018-09-05T22:50:13Z,2018-09-06T13:25:16Z,MERGED,True,1,1,1,https://github.com/brlin-tw,Fix typo,1,[],https://github.com/htacg/tidy-html5/pull/753,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/753#issuecomment-419089249,"Signed-off-by: 林博仁(Buo-ren, Lin) Buo.Ren.Lin@gmail.com","@Lin-Buo-Ren now merged, and thanks...",True,{'HOORAY': ['https://github.com/brlin-tw']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,754,2018-09-10T22:01:20Z,2018-10-30T20:20:59Z,2018-10-30T20:20:59Z,CLOSED,False,47,38,1,https://github.com/ler762,change the processing of init files,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/754,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/754,"add a new ""-no-config"" command line option to not read any initialization file


refactor init file processing so that only one file is read
The search order is:



command line ""-config xxx"" or ""-no-config"" options
environment variable HTML_TIDY=xxx
~/.tidyrc
/etc/tidy.conf","add a new ""-no-config"" command line option to not read any initialization file


refactor init file processing so that only one file is read
The search order is:



command line ""-config xxx"" or ""-no-config"" options
environment variable HTML_TIDY=xxx
~/.tidyrc
/etc/tidy.conf",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,754,2018-09-10T22:01:20Z,2018-10-30T20:20:59Z,2018-10-30T20:20:59Z,CLOSED,False,47,38,1,https://github.com/ler762,change the processing of init files,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/754,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/754#issuecomment-421814170,"add a new ""-no-config"" command line option to not read any initialization file


refactor init file processing so that only one file is read
The search order is:



command line ""-config xxx"" or ""-no-config"" options
environment variable HTML_TIDY=xxx
~/.tidyrc
/etc/tidy.conf","See issue #752 for a comment on this PR... in general I do not see the need for this...
Or at least needs a hefty discussion...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,754,2018-09-10T22:01:20Z,2018-10-30T20:20:59Z,2018-10-30T20:20:59Z,CLOSED,False,47,38,1,https://github.com/ler762,change the processing of init files,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/754,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/754#issuecomment-433708873,"add a new ""-no-config"" command line option to not read any initialization file


refactor init file processing so that only one file is read
The search order is:



command line ""-config xxx"" or ""-no-config"" options
environment variable HTML_TIDY=xxx
~/.tidyrc
/etc/tidy.conf","@ler762 sorry, but think we have to close this PR...
There are several reasons for this, but the main one is technical. Somehow github has got it wrong...
Github shows ler762 wants to merge 1 commit into htacg:next from unknown repository... what is this unknown repository? not a lot of confidence in that...
And when I tried to use the command line to make a merge into a branch to do testing, it failed... saying some patch, or something, is missing... huh?
Usually works, and is one way admin has to merge a PR into a branch, build, and test, before the final merge to stable next... that is without cloning the full fork...
It does still show This branch has no conflicts with the base branch, thus the Merge Button is enabled... but does not feel safe... so it should be closed...
I am not sure it is your fault, but did you do something drastic to your fork after setting up the PR? Or something else...
Or is is that PR #755 was closed, and it contains the same commit 84b3e80 as here... good to know if true, but do not know...
But aside from that it is quite incomplete, even if eventually conceptually accepted...

It introduces a new undocumented option, -no-config - this needs to be added, and documented...
The man tidy help text, in man/tidy1.xsl.in - would need to be adjusted...
May conflict with PR #764, which more exactly addresses #752, and contains several other needed fixes...
Is moved into the loop and seems to ignore the fact that tidy supports multiple options1 input1.html option2 input2.html ... on the command line...

The 4th may not be a problem, but needs to be thought through, tested, discussed, etc...
Finally, if you want to pursue this Feature Request then open an issue for it first, to discuss it, although various comments are scattered in other issues - maybe bring them together -
At this time I am not convinced it is needed or desired, except by you of course, and perhaps @blacktrash, not sure... sorry...
Am really puzzled why github shows unknown repository, and fails an admin test merge... any thoughts on why very much appreciated... just to be able to help, report, understand, advise in future... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,754,2018-09-10T22:01:20Z,2018-10-30T20:20:59Z,2018-10-30T20:20:59Z,CLOSED,False,47,38,1,https://github.com/ler762,change the processing of init files,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/754,https://github.com/ler762,4,https://github.com/htacg/tidy-html5/pull/754#issuecomment-434428102,"add a new ""-no-config"" command line option to not read any initialization file


refactor init file processing so that only one file is read
The search order is:



command line ""-config xxx"" or ""-no-config"" options
environment variable HTML_TIDY=xxx
~/.tidyrc
/etc/tidy.conf","@geoffmcl no problem - go ahead and close it.

... did you do something drastic to your fork after setting up the PR?
Am really puzzled why github shows unknown repository ...

I've deleted & recreated my fork on github a couple of times.  I'm treating it as a temporary sandbox vs. something that has to be maintained - which might be a Bad Idea.
I'll try to pull all the comments together and create a new issue/feature request.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,754,2018-09-10T22:01:20Z,2018-10-30T20:20:59Z,2018-10-30T20:20:59Z,CLOSED,False,47,38,1,https://github.com/ler762,change the processing of init files,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/754,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/754#issuecomment-434454853,"add a new ""-no-config"" command line option to not read any initialization file


refactor init file processing so that only one file is read
The search order is:



command line ""-config xxx"" or ""-no-config"" options
environment variable HTML_TIDY=xxx
~/.tidyrc
/etc/tidy.conf","@ler762 well if github maintained some type of check-sum for a fork, then I guess deleting & recreating that fork might put it in a tizzy fit ;=))
One pet dislike I have about such sort of hidden config files is that -h, and specially the new -help-env, do not spell it out clear enough... could do more...
It does mention /etc/tidy.conf, and ~/.tidyrc, which is good, but does not mention if one or either exists... like it does mention that $HTML_TIDY is set or not, but then not whether the file exists, if set...
While this does not directly relate to the order in which these are processed, for issues like #742, asking the user to show an enhanced output of -help-env would go a long way to clearing this up...
And that help text would need to also be adjusted if the order of processing is changed...
Look forward to any new feature request... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,755,2018-09-16T01:03:27Z,2018-09-16T19:34:21Z,2018-09-16T19:34:21Z,CLOSED,False,64,39,2,https://github.com/ler762,Aslr,2,[],https://github.com/htacg/tidy-html5/pull/755,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/755,"having optimization, DEP and ASLR enabled if building with gcc seems like a Good Thing
I thought I'd made two separate branches
processrc for changing how init files were handled
aslr  for enabling DEP and ASLR
but it looks like I fucked it up yet again & both are in this pull request :(","having optimization, DEP and ASLR enabled if building with gcc seems like a Good Thing
I thought I'd made two separate branches
processrc for changing how init files were handled
aslr  for enabling DEP and ASLR
but it looks like I fucked it up yet again & both are in this pull request :(",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,755,2018-09-16T01:03:27Z,2018-09-16T19:34:21Z,2018-09-16T19:34:21Z,CLOSED,False,64,39,2,https://github.com/ler762,Aslr,2,[],https://github.com/htacg/tidy-html5/pull/755,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/755#issuecomment-421819049,"having optimization, DEP and ASLR enabled if building with gcc seems like a Good Thing
I thought I'd made two separate branches
processrc for changing how init files were handled
aslr  for enabling DEP and ASLR
but it looks like I fucked it up yet again & both are in this pull request :(","@ler762 yes, seems you created the aslr branch from the processrc branch, so naturally will contain all... to keep them separate you must start with next when creating a new branch...
$ git checkout next
$ git checkout -b newbranch

Assuming you can separate these two issues... meantime this dual PR should be closed, since the processrc #754 is not yet agreed... see comments in #752, specifically PR
Concerning just commit 66b7ed5 not sure these should be added for every non-win os, and every version of gcc out there...
Seems there should be a way to do this externally, without forcing everyone down the same road... deciding for them...
Maybe if you opened an separate issue to discuss this... and first to see and understand what cmake uses by default... if not already included, why cmake chooses otherwise... what advantages... etc, etc, etc, ...
I would certainly need much more feedback on what is proposed... and prefer an issue to discuss... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,762,2018-10-15T13:26:36Z,2019-01-12T13:55:53Z,2019-03-29T17:08:29Z,MERGED,True,1,1,1,https://github.com/cmb69,PHP ≥ 7.1.0 recognizes tidy-html5,1,['Docs'],https://github.com/htacg/tidy-html5/pull/762,https://github.com/cmb69,1,https://github.com/htacg/tidy-html5/pull/762,"Cf. php/php-src@a552ac5, which is
available as of PHP 7.1.0.","Cf. php/php-src@a552ac5, which is
available as of PHP 7.1.0.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,762,2018-10-15T13:26:36Z,2019-01-12T13:55:53Z,2019-03-29T17:08:29Z,MERGED,True,1,1,1,https://github.com/cmb69,PHP ≥ 7.1.0 recognizes tidy-html5,1,['Docs'],https://github.com/htacg/tidy-html5/pull/762,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/762#issuecomment-439140181,"Cf. php/php-src@a552ac5, which is
available as of PHP 7.1.0.",This doc change looks fine ... will merge shortly... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,762,2018-10-15T13:26:36Z,2019-01-12T13:55:53Z,2019-03-29T17:08:29Z,MERGED,True,1,1,1,https://github.com/cmb69,PHP ≥ 7.1.0 recognizes tidy-html5,1,['Docs'],https://github.com/htacg/tidy-html5/pull/762,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/762#issuecomment-453749888,"Cf. php/php-src@a552ac5, which is
available as of PHP 7.1.0.","@cmb69 done, and thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,764,2018-10-23T17:18:53Z,2019-01-31T18:13:15Z,2019-01-31T18:13:34Z,MERGED,True,71,7,5,https://github.com/geoffmcl,Issue 752,9,[],https://github.com/htacg/tidy-html5/pull/764,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/764,PR to address #752...,PR to address #752...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,764,2018-10-23T17:18:53Z,2019-01-31T18:13:15Z,2019-01-31T18:13:34Z,MERGED,True,71,7,5,https://github.com/geoffmcl,Issue 752,9,[],https://github.com/htacg/tidy-html5/pull/764,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/764#issuecomment-458252528,PR to address #752...,"Just a note, this PR needs tests PR 29 to be done at the same time...
Will try to attend to both shortly, baring any contrary comments... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,769,2018-11-05T03:12:31Z,2019-03-21T19:28:27Z,2019-03-21T19:28:27Z,MERGED,True,16,0,5,https://github.com/AntoniosHadji,Issue 649 adding tag <data>,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/769,https://github.com/AntoniosHadji,1,https://github.com/htacg/tidy-html5/pull/769,"The <data> element is similar to the <time> element.  The <time> element was used as a model for the changes to file attrdict.c
Other edits were as suggested in TAGS.md and ATTRIBUTES.md, and this comment from @geoffmcl","The <data> element is similar to the <time> element.  The <time> element was used as a model for the changes to file attrdict.c
Other edits were as suggested in TAGS.md and ATTRIBUTES.md, and this comment from @geoffmcl",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,769,2018-11-05T03:12:31Z,2019-03-21T19:28:27Z,2019-03-21T19:28:27Z,MERGED,True,16,0,5,https://github.com/AntoniosHadji,Issue 649 adding tag <data>,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/769,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/769#issuecomment-459478927,"The <data> element is similar to the <time> element.  The <time> element was used as a model for the changes to file attrdict.c
Other edits were as suggested in TAGS.md and ATTRIBUTES.md, and this comment from @geoffmcl","@AntoniosHadji under review... sorry for the delay...
As stated, looks good... please add any comments, updates, feedback, etc to #649... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,774,2018-11-13T13:44:13Z,2019-05-10T19:14:49Z,2019-05-10T19:14:49Z,CLOSED,False,41,27,1,https://github.com/ler762,change init file processing,1,[],https://github.com/htacg/tidy-html5/pull/774,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/774,"Change the processing of init files to read only one file.
The search order for finding the file is:

file specified by the command line '-config filename' option
file specified by the environment variable HTML_TIDY
~/.tidyrc
/etc/tidy.conf","Change the processing of init files to read only one file.
The search order for finding the file is:

file specified by the command line '-config filename' option
file specified by the environment variable HTML_TIDY
~/.tidyrc
/etc/tidy.conf",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,774,2018-11-13T13:44:13Z,2019-05-10T19:14:49Z,2019-05-10T19:14:49Z,CLOSED,False,41,27,1,https://github.com/ler762,change init file processing,1,[],https://github.com/htacg/tidy-html5/pull/774,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/774#issuecomment-491400894,"Change the processing of init files to read only one file.
The search order for finding the file is:

file specified by the command line '-config filename' option
file specified by the environment variable HTML_TIDY
~/.tidyrc
/etc/tidy.conf","@ler762 see base #772, now closed, so closing this... sorry...
PR presently rejected due to little or no support for change... and although this PR shows a proof-of-concept, it is very incomplete... lacks docs changes, as a minimum...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,779,2018-11-22T17:22:19Z,2018-12-04T19:48:55Z,2018-12-04T19:50:15Z,CLOSED,False,0,2,1,https://github.com/ler762,delay calling AdjustConfig,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/779,https://github.com/ler762,1,https://github.com/htacg/tidy-html5/pull/779,"Wait until after reading all the init files and parameters before calling AdjustConfig
Calling AdjustConfig right after reading an init file can break things since
tidy might not have the all of the config settings yet.  It needs to wait until
all the init files and parameters have been processed so that it can make it's
adjustments based on the full config.
ref: #778","Wait until after reading all the init files and parameters before calling AdjustConfig
Calling AdjustConfig right after reading an init file can break things since
tidy might not have the all of the config settings yet.  It needs to wait until
all the init files and parameters have been processed so that it can make it's
adjustments based on the full config.
ref: #778",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,779,2018-11-22T17:22:19Z,2018-12-04T19:48:55Z,2018-12-04T19:50:15Z,CLOSED,False,0,2,1,https://github.com/ler762,delay calling AdjustConfig,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/779,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/779#issuecomment-444233482,"Wait until after reading all the init files and parameters before calling AdjustConfig
Calling AdjustConfig right after reading an init file can break things since
tidy might not have the all of the config settings yet.  It needs to wait until
all the init files and parameters have been processed so that it can make it's
adjustments based on the full config.
ref: #778","@ler762 closing this... do not agree with the need to wait - Why? nor with can break things - What things?
Please explain if you think this should go further, hopefully in an issue that addresses these things ;=)) and not in a PR!
But also assume you only used it to show some code, but would always prefer that be attached, or inline patches, in the comment... thanks",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,782,2018-11-29T09:01:29Z,2019-03-29T23:56:31Z,2019-03-29T23:56:31Z,MERGED,True,0,2,2,https://github.com/brlin-tw,Is. #781 - Drop redundant blank lines in -help,1,[],https://github.com/htacg/tidy-html5/pull/782,https://github.com/brlin-tw,1,https://github.com/htacg/tidy-html5/pull/782,Fixes #781.,Fixes #781.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,782,2018-11-29T09:01:29Z,2019-03-29T23:56:31Z,2019-03-29T23:56:31Z,MERGED,True,0,2,2,https://github.com/brlin-tw,Is. #781 - Drop redundant blank lines in -help,1,[],https://github.com/htacg/tidy-html5/pull/782,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/782#issuecomment-443298536,Fixes #781.,@Lin-Buo-Ren looks good to me... let's see if we get anymore feedback in #781 ...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,784,2018-12-01T13:55:22Z,2019-05-26T18:55:20Z,2021-06-30T15:30:22Z,CLOSED,False,17,5,1,https://github.com/geoffmcl,"Is. #761 - Double capacity, and remove loop lock - still a 4GB 'uint'",1,['Bug'],https://github.com/htacg/tidy-html5/pull/784,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/784,"Will not exactly fix #761, but seems it should improve the situation...","Will not exactly fix #761, but seems it should improve the situation...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,784,2018-12-01T13:55:22Z,2019-05-26T18:55:20Z,2021-06-30T15:30:22Z,CLOSED,False,17,5,1,https://github.com/geoffmcl,"Is. #761 - Double capacity, and remove loop lock - still a 4GB 'uint'",1,['Bug'],https://github.com/htacg/tidy-html5/pull/784,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/784#issuecomment-496022963,"Will not exactly fix #761, but seems it should improve the situation...","Eventually got to fully test this, and something is WRONG!
In the first place it seems to increase the time to process large files, by more than a factor of 10!
It goes without saying this should not be merged until fully explored...
See issue #761 for further comments...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,785,2018-12-03T14:14:09Z,2019-01-08T13:41:55Z,2019-02-05T09:12:28Z,MERGED,True,8,1,1,https://github.com/brlin-tw,Is. #783 - Fix language detection,1,[],https://github.com/htacg/tidy-html5/pull/785,https://github.com/brlin-tw,1,https://github.com/htacg/tidy-html5/pull/785,"The setlocale call doesn't return a single locale name in glibc when
any of the locale category variable has a different value, instead it
returns a composite locale name which is a concatenation of the entire
list of locale name and its values, seperated by a semicolon, which causing
the language detection to fail.
This patch attempts to set the language via LC_MESSAGES and LANG
environment variables which are commonly used in POSIX-like systems,
then fallbacks to setlocale as the last resort.","The setlocale call doesn't return a single locale name in glibc when
any of the locale category variable has a different value, instead it
returns a composite locale name which is a concatenation of the entire
list of locale name and its values, seperated by a semicolon, which causing
the language detection to fail.
This patch attempts to set the language via LC_MESSAGES and LANG
environment variables which are commonly used in POSIX-like systems,
then fallbacks to setlocale as the last resort.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,793,2019-01-17T02:38:10Z,2019-05-31T18:08:47Z,2019-05-31T18:13:27Z,MERGED,True,1,1,1,https://github.com/SConaway,Update BRANCHES.md,1,['Docs'],https://github.com/htacg/tidy-html5/pull/793,https://github.com/SConaway,1,https://github.com/htacg/tidy-html5/pull/793,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,793,2019-01-17T02:38:10Z,2019-05-31T18:08:47Z,2019-05-31T18:13:27Z,MERGED,True,1,1,1,https://github.com/SConaway,Update BRANCHES.md,1,['Docs'],https://github.com/htacg/tidy-html5/pull/793,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/793#issuecomment-455807395,,@SConaway thanks for the typo fix... will merge this soonest... doc enhancements always welcome...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,793,2019-01-17T02:38:10Z,2019-05-31T18:08:47Z,2019-05-31T18:13:27Z,MERGED,True,1,1,1,https://github.com/SConaway,Update BRANCHES.md,1,['Docs'],https://github.com/htacg/tidy-html5/pull/793,https://github.com/SConaway,3,https://github.com/htacg/tidy-html5/pull/793#issuecomment-492438990,,Merging soon?,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,793,2019-01-17T02:38:10Z,2019-05-31T18:08:47Z,2019-05-31T18:13:27Z,MERGED,True,1,1,1,https://github.com/SConaway,Update BRANCHES.md,1,['Docs'],https://github.com/htacg/tidy-html5/pull/793,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/793#issuecomment-497809559,,@SConaway @da2x done... in 5.7.25... sorry for the delay... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,809,2019-03-18T19:17:48Z,2019-06-07T18:31:48Z,2019-06-07T18:31:58Z,MERGED,True,5,0,1,https://github.com/geoffmcl,Is. #791 - free some allocations,1,['Bug'],https://github.com/htacg/tidy-html5/pull/809,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/809,Seems I missed creating this PR...,Seems I missed creating this PR...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,809,2019-03-18T19:17:48Z,2019-06-07T18:31:48Z,2019-06-07T18:31:58Z,MERGED,True,5,0,1,https://github.com/geoffmcl,Is. #791 - free some allocations,1,['Bug'],https://github.com/htacg/tidy-html5/pull/809,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/809#issuecomment-474073356,Seems I missed creating this PR...,"In my folder, build/temp-791, just did a build of the issue-791 branch, using -DCMAKE_C_FLAGS=-fsanitize=address, and Debug build type, and the leak problem appears fixed, for this version 5.7.18.SN02...
Will merge this shortly, unless there are any objections... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,814,2019-04-22T16:18:38Z,2019-06-22T19:37:28Z,2019-06-23T19:11:29Z,CLOSED,False,2,1,1,https://github.com/da2x,"Require itemprop, property, or rel on link element",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/814,https://github.com/da2x,1,https://github.com/htacg/tidy-html5/pull/814,"<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax","<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,814,2019-04-22T16:18:38Z,2019-06-22T19:37:28Z,2019-06-23T19:11:29Z,CLOSED,False,2,1,1,https://github.com/da2x,"Require itemprop, property, or rel on link element",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/814,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/814#issuecomment-486790069,"<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax","@da2x thank you for the issue, and a potential fix, via this PR...
Still reading, understanding, and checking, but this looks good to merge... maybe with an added comment, linking the change back to this issue...
Meantime, look forward to any further, other feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,814,2019-04-22T16:18:38Z,2019-06-22T19:37:28Z,2019-06-23T19:11:29Z,CLOSED,False,2,1,1,https://github.com/da2x,"Require itemprop, property, or rel on link element",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/814,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/814#issuecomment-500174480,"<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax","@da2x this continues to look good... but need a simple test case...
Have not yet had a chance to run the regression tests, for this parsing change... have you?
Maybe just needs a synchronous test change, if a problem... Or maybe consider adding a test case... for the future...
Will work on this, unless someone beats me to it... adds info... comments...
Look forward to any further feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,814,2019-04-22T16:18:38Z,2019-06-22T19:37:28Z,2019-06-23T19:11:29Z,CLOSED,False,2,1,1,https://github.com/da2x,"Require itemprop, property, or rel on link element",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/814,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/814#issuecomment-504540275,"<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax","@da2x ran into probs... this PR is against master... ie version 5.6.0 currently...
As indicated in CONTRIBUTING.md, a PR can only be against next... maybe this needs to be made clearer...  so the PR is rejected... sorry... but your fix is required...
I am presently getting near to testing with the following patch applied... you will note I have added some comments, as suggested...
diff --git a/src/tags.c b/src/tags.c
index af2b7d9..e639e5b 100644
--- a/src/tags.c
+++ b/src/tags.c
@@ -1008,19 +1008,25 @@ void CheckTABLE( TidyDocImpl* doc, Node *node )
     }
 }
 
-/* report missing href attribute; report missing rel attribute */
+/* report missing href attribute; report missing rel attribute
+   Is. #814 - change from link[itemprop|rel] to link[itemprop|property|rel]
+   to support the HTML5+RDFa syntax.
+   Ref: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax
+ */
 void CheckLINK( TidyDocImpl* doc, Node *node )
 {
     Bool HasHref = TY_(AttrGetById)(node, TidyAttr_HREF) != NULL;
     Bool HasRel = TY_(AttrGetById)(node, TidyAttr_REL) != NULL;
     Bool HasItemprop = TY_(AttrGetById)(node, TidyAttr_ITEMPROP) != NULL;
+    Bool HasProperty = TY_(AttrGetById)(node, TidyAttr_PROPERTY) != NULL; /* Is #814 */
 
     if (!HasHref)
     {
       TY_(ReportMissingAttr)( doc, node, ""href"" );
     }
 
-    if (!HasItemprop && !HasRel)
+    /* Is. #814 - @da2x patch - add 'property' attr */
+    if (!HasItemprop && !HasRel && !HasProperty)
     {
       TY_(ReportMissingAttr)( doc, node, ""rel"" );
     }
Will shortly, hopefully get to the regression testing... and maybe adding a test sample...
Look forward to any further feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,814,2019-04-22T16:18:38Z,2019-06-22T19:37:28Z,2019-06-23T19:11:29Z,CLOSED,False,2,1,1,https://github.com/da2x,"Require itemprop, property, or rel on link element",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/814,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/814#issuecomment-504692844,"<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax","@da2x after doing the regression tests, no probs, expanded patch to deal with legacy docs -
diff --git a/src/tags.c b/src/tags.c
index af2b7d9..ecc0ee7 100644
--- a/src/tags.c
+++ b/src/tags.c
@@ -1008,21 +1008,44 @@ void CheckTABLE( TidyDocImpl* doc, Node *node )
     }
 }
 
-/* report missing href attribute; report missing rel attribute */
+/* report missing href attribute; report missing rel attribute
+   Is. #814 - change from link[itemprop|rel] to link[itemprop|property|rel]
+   to support the HTML5+RDFa syntax.
+   Ref: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax
+ */
 void CheckLINK( TidyDocImpl* doc, Node *node )
 {
     Bool HasHref = TY_(AttrGetById)(node, TidyAttr_HREF) != NULL;
     Bool HasRel = TY_(AttrGetById)(node, TidyAttr_REL) != NULL;
     Bool HasItemprop = TY_(AttrGetById)(node, TidyAttr_ITEMPROP) != NULL;
+    AttVal *prop = TY_(AttrGetById)(node, TidyAttr_PROPERTY);
+    Bool HasProperty = (prop == NULL) ? no : yes; /* Is #814 */
 
     if (!HasHref)
     {
       TY_(ReportMissingAttr)( doc, node, ""href"" );
     }
 
-    if (!HasItemprop && !HasRel)
+    if (TY_(IsHTML5Mode)(doc))
+    {
+        /* Is. #814 - @da2x patch - add 'property' attr */
+        if (!HasItemprop && !HasRel && !HasProperty)
+        {
+            TY_(ReportMissingAttr)(doc, node, ""rel"");
+        }
+    }
+    else 
     {
-      TY_(ReportMissingAttr)( doc, node, ""rel"" );
+        /* legacy doc parsing */
+        if (HasProperty)
+        {
+            TY_(ReportAttrError)(doc, node, prop, MISMATCHED_ATTRIBUTE_WARN);
+        }
+        else if (!HasItemprop && !HasRel)
+        {
+            TY_(ReportMissingAttr)(doc, node, ""rel"");
+        }
+
     }
 }

Added 2 tests - in_814.html for html5, and in_814-1.html for legacy html4... which can be put to the W3C validator... should get pass and fail respectively...
Somehow feel the addition of the property attr should have maybe been flagged earlier than here... still testing, experimenting, reviewing, etc...
But now feel this PR has to be closed, and will try to get around to opening a new issue, to fully explore this change... unless someone beats me to it...
Further feedback should be directed to that new issue, when created... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,814,2019-04-22T16:18:38Z,2019-06-22T19:37:28Z,2019-06-23T19:11:29Z,CLOSED,False,2,1,1,https://github.com/da2x,"Require itemprop, property, or rel on link element",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/814,https://github.com/geoffmcl,6,https://github.com/htacg/tidy-html5/pull/814#issuecomment-504778592,"<link itemprop=""subject"" href=""../example""> in Microdata is equivalent to <link property=""subject"" href=""../example""> in RDFa. This HTML+RDFa syntax doesn’t trigger any errors or warnings from the W3C Nu Html Checker in HTML5 mode.
This change changes the requirement from link[itemprop|rel] to link[itemprop|property|rel] to support the HTML5+RDFa syntax.
See also: https://www.w3.org/TR/html-rdfa/#extensions-to-the-html5-syntax","All discussion on this link, property issue moved to #833 - look forward to your participation... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,817,2019-04-30T21:10:40Z,2020-11-22T16:56:51Z,2020-11-22T16:56:51Z,CLOSED,False,125,97,5,https://github.com/russianfool,Issue #816: tags_def not MT-safe,4,[],https://github.com/htacg/tidy-html5/pull/817,https://github.com/russianfool,1,https://github.com/htacg/tidy-html5/pull/817,"Issue #816
This addresses the ""MT-safeness"" of the tags_def, as far as I can tell. Tests pass, valgrind looks clean on the samples in the test repo (and there's no allocation happening here; no one owns memory, we just toggle where the hashtable points to, between the two global tables).
Let me know if you'd like to see any changes.","Issue #816
This addresses the ""MT-safeness"" of the tags_def, as far as I can tell. Tests pass, valgrind looks clean on the samples in the test repo (and there's no allocation happening here; no one owns memory, we just toggle where the hashtable points to, between the two global tables).
Let me know if you'd like to see any changes.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,817,2019-04-30T21:10:40Z,2020-11-22T16:56:51Z,2020-11-22T16:56:51Z,CLOSED,False,125,97,5,https://github.com/russianfool,Issue #816: tags_def not MT-safe,4,[],https://github.com/htacg/tidy-html5/pull/817,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/817#issuecomment-500543396,"Issue #816
This addresses the ""MT-safeness"" of the tags_def, as far as I can tell. Tests pass, valgrind looks clean on the samples in the test repo (and there's no allocation happening here; no one owns memory, we just toggle where the hashtable points to, between the two global tables).
Let me know if you'd like to see any changes.",@russianfool PR on hold ATM... please see discussion in #816 - add any questions you may have there... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,817,2019-04-30T21:10:40Z,2020-11-22T16:56:51Z,2020-11-22T16:56:51Z,CLOSED,False,125,97,5,https://github.com/russianfool,Issue #816: tags_def not MT-safe,4,[],https://github.com/htacg/tidy-html5/pull/817,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/817#issuecomment-731776808,"Issue #816
This addresses the ""MT-safeness"" of the tags_def, as far as I can tell. Tests pass, valgrind looks clean on the samples in the test repo (and there's no allocation happening here; no one owns memory, we just toggle where the hashtable points to, between the two global tables).
Let me know if you'd like to see any changes.","@russianfool although you have put some time and effort into this, it seems a conclusion has not been reached, and since there has been no further feedback in over a year, am reluctantly closing this PR, and the associated issue #816... sorry...
While making libTidy thread-safe is a very worthy aim this does not seem there yet... And I am sure any further steps taken in this regard will take into account these comments, and in the associated issue... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,822,2019-05-08T07:23:41Z,2019-05-08T08:05:50Z,2019-05-08T08:05:51Z,CLOSED,False,1,1,1,https://github.com/naveedpash,added OS __ANDROID__ in tidyplatform.h,1,[],https://github.com/htacg/tidy-html5/pull/822,https://github.com/naveedpash,1,https://github.com/htacg/tidy-html5/pull/822,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,822,2019-05-08T07:23:41Z,2019-05-08T08:05:50Z,2019-05-08T08:05:51Z,CLOSED,False,1,1,1,https://github.com/naveedpash,added OS __ANDROID__ in tidyplatform.h,1,[],https://github.com/htacg/tidy-html5/pull/822,https://github.com/naveedpash,2,https://github.com/htacg/tidy-html5/pull/822#issuecomment-490390752,,"Sorry, wrong branch",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,823,2019-05-08T08:00:08Z,2019-06-07T18:52:08Z,2019-06-07T18:56:13Z,MERGED,True,1,1,1,https://github.com/naveedpash,added OS __ANDROID__ in tidyplatform.h,1,[],https://github.com/htacg/tidy-html5/pull/823,https://github.com/naveedpash,1,https://github.com/htacg/tidy-html5/pull/823,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,823,2019-05-08T08:00:08Z,2019-06-07T18:52:08Z,2019-06-07T18:56:13Z,MERGED,True,1,1,1,https://github.com/naveedpash,added OS __ANDROID__ in tidyplatform.h,1,[],https://github.com/htacg/tidy-html5/pull/823,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/823#issuecomment-500000426,,@naveedpash Sorry for being so slow... @da2x thanks for the push on this...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,825,2019-05-10T19:27:33Z,2019-05-25T12:46:06Z,2019-07-08T18:58:53Z,CLOSED,False,24,24,6,https://github.com/MrSorcus,Small improvements.,2,['Docs'],https://github.com/htacg/tidy-html5/pull/825,https://github.com/MrSorcus,1,https://github.com/htacg/tidy-html5/pull/825,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,825,2019-05-10T19:27:33Z,2019-05-25T12:46:06Z,2019-07-08T18:58:53Z,CLOSED,False,24,24,6,https://github.com/MrSorcus,Small improvements.,2,['Docs'],https://github.com/htacg/tidy-html5/pull/825,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/825#issuecomment-491645690,,"@MrSorcus thank you for your interest in tidy... the time... and this PR... thanks...
The Change ""tidyLocalMapItem"" to ""tidyLocaleMapItem"" cd58c31 looks good... no probs... thank you..
The Change some functions name to lower case. 83e8b35 is NOT so small... sorry...
That is a published 5.6.x, or before, API change, and that is serious...
If I understand correctly, such a change requires a bump in the major shared library version number... presently 5.x.x to 6.x.x... etc...
And while I like, and agree with, the case correction, I do not think it is worth such a major version bump... at this time...
It should however be kept in mind, if/when such a major bump is on hand... for other reasons...
So that second commit needs to be removed from the PR... requires great git shui...
OR this PR closed, and a new PR opened, usually from a forked branch... containing only the first change... thanks...
OT: github issue: It is not good for you, even if this PR was all accepted... because it is in your MrSorcus:next branch... ugh!
If/when this were to be merged to htacg:next, you can have problems, when updating your fork... conflicts...
It is better you do such changes in a new branch... like $ git checkout -b newbranch... do changes, commit,... then $ git push -u origin newbranch... the convention is to use issue-XXXX branch, but not important... and base your PR on that branch...
Look forward to further feedback... thanks...",True,{'THUMBS_UP': ['https://github.com/MrSorcus']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,825,2019-05-10T19:27:33Z,2019-05-25T12:46:06Z,2019-07-08T18:58:53Z,CLOSED,False,24,24,6,https://github.com/MrSorcus,Small improvements.,2,['Docs'],https://github.com/htacg/tidy-html5/pull/825,https://github.com/MrSorcus,3,https://github.com/htacg/tidy-html5/pull/825#issuecomment-495917725,,"I reopen PR with only first commit.
But what about second commit?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,825,2019-05-10T19:27:33Z,2019-05-25T12:46:06Z,2019-07-08T18:58:53Z,CLOSED,False,24,24,6,https://github.com/MrSorcus,Small improvements.,2,['Docs'],https://github.com/htacg/tidy-html5/pull/825,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/825#issuecomment-499989125,,"@MrSorcus thank you for the new PR #829, addressing the docs issue... this will be merged in due course... just as a docs correction...
Concerning the API changes, this could be in another branch, like say api-6.0.0, or something... that is if my assumption that such API changes must be in a new major version... seek discussion, confirmation of that... but they should somehow be preserved... thanks...",True,{'THUMBS_UP': ['https://github.com/MrSorcus']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,825,2019-05-10T19:27:33Z,2019-05-25T12:46:06Z,2019-07-08T18:58:53Z,CLOSED,False,24,24,6,https://github.com/MrSorcus,Small improvements.,2,['Docs'],https://github.com/htacg/tidy-html5/pull/825,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/825#issuecomment-509350048,,"@MrSorcus first part - docs fix - done...
As stated, we need to remember the API change, at the appropriate time... thanks",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,829,2019-05-25T13:10:50Z,2019-07-08T18:48:58Z,2020-05-05T09:34:18Z,MERGED,True,9,9,3,https://github.com/MrSorcus,"Change ""tidyLocalMapItem"" to ""tidyLocaleMapItem""",1,['Docs'],https://github.com/htacg/tidy-html5/pull/829,https://github.com/MrSorcus,1,https://github.com/htacg/tidy-html5/pull/829,See #825,See #825,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,830,2019-05-28T18:59:14Z,2020-10-02T15:16:46Z,2020-10-02T15:16:54Z,MERGED,True,3,0,1,https://github.com/geoffmcl,Is. #761 - just deal with the 'uint' wrap,1,['Bug'],https://github.com/htacg/tidy-html5/pull/830,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/830,"Have done some testing on this, with large files, ... seems all ok... and aborts, if lexer text, from the input, is greater than 2GB ie the max int32 32-bit offset current design limit...","Have done some testing on this, with large files, ... seems all ok... and aborts, if lexer text, from the input, is greater than 2GB ie the max int32 32-bit offset current design limit...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,831,2019-06-05T20:14:12Z,2019-10-18T01:14:21Z,2019-10-18T01:14:22Z,CLOSED,False,3,0,1,https://github.com/codetriage-readme-bot,Add CodeTriage badge to htacg/tidy-html5,1,"['Docs', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/831,https://github.com/codetriage-readme-bot,1,https://github.com/htacg/tidy-html5/pull/831,"Adds a badge showing the number of people helping this repo on CodeTriage.

What is CodeTriage?
CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed
Read more about the CodeTriage project.
Why am I getting this PR?
Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly about 3 years ago, barbosa11 added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.
What does adding a badge accomplish?
Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.
You can see an example of a CodeTriage badge on these popular OSS READMEs:

 https://github.com/rails/rails
 https://github.com/crystal-lang/crystal

Have a question or comment?
While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.
If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.
Thanks for making your project Open Source! Any feedback is greatly appreciated.","Adds a badge showing the number of people helping this repo on CodeTriage.

What is CodeTriage?
CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed
Read more about the CodeTriage project.
Why am I getting this PR?
Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly about 3 years ago, barbosa11 added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.
What does adding a badge accomplish?
Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.
You can see an example of a CodeTriage badge on these popular OSS READMEs:

 https://github.com/rails/rails
 https://github.com/crystal-lang/crystal

Have a question or comment?
While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.
If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.
Thanks for making your project Open Source! Any feedback is greatly appreciated.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,831,2019-06-05T20:14:12Z,2019-10-18T01:14:21Z,2019-10-18T01:14:22Z,CLOSED,False,3,0,1,https://github.com/codetriage-readme-bot,Add CodeTriage badge to htacg/tidy-html5,1,"['Docs', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/831,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/831#issuecomment-499981410,"Adds a badge showing the number of people helping this repo on CodeTriage.

What is CodeTriage?
CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed
Read more about the CodeTriage project.
Why am I getting this PR?
Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly about 3 years ago, barbosa11 added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.
What does adding a badge accomplish?
Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.
You can see an example of a CodeTriage badge on these popular OSS READMEs:

 https://github.com/rails/rails
 https://github.com/crystal-lang/crystal

Have a question or comment?
While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.
If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.
Thanks for making your project Open Source! Any feedback is greatly appreciated.","@schneems thank you for the issue, or the bot offer...
I am not sure how this badge would draw more helpers to tidy's issues... but we do need those... so, on the other hand, I suppose every little bit might help...
But specifically, on the CONTRIBUTING.md patch, the addition you suggest is following a H3 header - Help Tidy Get Better - , which is ok, yet the patch uses H2, ie 2 ##, which seems wrong...
At best this new Issue triage header should be a H3 header, or maybe even a H4, to fit in better with the existing document style and content...
In general have no objection to adding this badge, under the corrected header style...
But look forward to further feedback... especially from those who use this CodeTriage link, rather than, or even in addition to, the direct joining/watching of this project... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,831,2019-06-05T20:14:12Z,2019-10-18T01:14:21Z,2019-10-18T01:14:22Z,CLOSED,False,3,0,1,https://github.com/codetriage-readme-bot,Add CodeTriage badge to htacg/tidy-html5,1,"['Docs', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/831,https://github.com/schneems,3,https://github.com/htacg/tidy-html5/pull/831#issuecomment-500013247,"Adds a badge showing the number of people helping this repo on CodeTriage.

What is CodeTriage?
CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed
Read more about the CodeTriage project.
Why am I getting this PR?
Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly about 3 years ago, barbosa11 added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.
What does adding a badge accomplish?
Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.
You can see an example of a CodeTriage badge on these popular OSS READMEs:

 https://github.com/rails/rails
 https://github.com/crystal-lang/crystal

Have a question or comment?
While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.
If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.
Thanks for making your project Open Source! Any feedback is greatly appreciated.","Hey, thanks for the review! I fixed the header.

I am not sure how this badge would draw more helpers to tidy's issues... but we do need those... so, on the other hand, I suppose every little bit might help...

Mostly it's to get people in the door. Getting contributions to a project is a bit of a funnel process. At the top you have all your users, then fewer below that is people who are interrested in contributing, then fewer under that is people who actually engage, and fewer under that is people who end up being core contributors etc.
The badge is a nice to have, but I find that inviting people to get starting to contribute and giving them a good first step helps to retain potential contributors. I've not got a ton of metrics on how adding a badge affects a project, as I'm not able to normalize for the null case.

But look forward to further feedback... especially from those who use this CodeTriage link, rather than, or even in addition to, the direct joining/watching of this project... thanks...

The biggest difference is that the current github issue subscription process is a firehose that is overwhelming to people for even moderately large repos. We also have some niceties on top of that, for example we have a ""streaks"" feature to encourage consistency, and we have automated backoffs when people get busy so they don't get overwhelmed. I would invite you to sign up to triage a few of your own repos. If you've feedback after a bit of time with the project, i'm all ears.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,831,2019-06-05T20:14:12Z,2019-10-18T01:14:21Z,2019-10-18T01:14:22Z,CLOSED,False,3,0,1,https://github.com/codetriage-readme-bot,Add CodeTriage badge to htacg/tidy-html5,1,"['Docs', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/831,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/831#issuecomment-501833932,"Adds a badge showing the number of people helping this repo on CodeTriage.

What is CodeTriage?
CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed
Read more about the CodeTriage project.
Why am I getting this PR?
Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly about 3 years ago, barbosa11 added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.
What does adding a badge accomplish?
Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.
You can see an example of a CodeTriage badge on these popular OSS READMEs:

 https://github.com/rails/rails
 https://github.com/crystal-lang/crystal

Have a question or comment?
While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.
If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.
Thanks for making your project Open Source! Any feedback is greatly appreciated.","@schneems thank you for the additional feedback...
Ok, you suggest the github issue subscription process... is a firehose... that spells FUD... sorry ;=))
It is ok to direct such notices, to email review folders, to see what you may be interested in... takes time to organize... to deal with 100's... or more...
You further suggest such recipients may be overwhelmed ... and may be saved by CodeTriage, because... but I suppose I am missing the point...
At the moment I can only see something like, in header organisation, if at all -
### Help Tidy Get Better
 blah blah blah...
 This is all using the [github issue subscription](https://help.github.com/en/articles/subscribing-to-and-unsubscribing-from-notifications) 
 process - **recommended!**...
#### Alternative help paths
##### Issue triage [![Open Source Helpers](https://www.codetriage.com/htacg/tidy-html5/badges/users.svg)](https://www.codetriage.com/htacg/tidy-html5)
 blip

Certainly hope interest in your service grows... at getting people in the door, as you say... that maybe helps open source to grow... do not yet see this would aid htacg/tidy at this time...
So this PR idea is fading, even with the better header organisation...
Look forward to further feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,831,2019-06-05T20:14:12Z,2019-10-18T01:14:21Z,2019-10-18T01:14:22Z,CLOSED,False,3,0,1,https://github.com/codetriage-readme-bot,Add CodeTriage badge to htacg/tidy-html5,1,"['Docs', 'Technical Discussion']",https://github.com/htacg/tidy-html5/pull/831,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/831#issuecomment-543436737,"Adds a badge showing the number of people helping this repo on CodeTriage.

What is CodeTriage?
CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed
Read more about the CodeTriage project.
Why am I getting this PR?
Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly about 3 years ago, barbosa11 added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.
What does adding a badge accomplish?
Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.
You can see an example of a CodeTriage badge on these popular OSS READMEs:

 https://github.com/rails/rails
 https://github.com/crystal-lang/crystal

Have a question or comment?
While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.
If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.
Thanks for making your project Open Source! Any feedback is greatly appreciated.","No positive feedback in many months, so closing this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,832,2019-06-13T18:57:21Z,2020-09-28T18:27:21Z,2020-09-28T18:27:32Z,MERGED,True,5,1,1,https://github.com/geoffmcl,Is #815 - Use case-insensitive test 'html',1,['Bug'],https://github.com/htacg/tidy-html5/pull/832,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/832,Please leave comments on #815,Please leave comments on #815,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,843,2019-10-01T08:05:56Z,2019-10-02T01:06:52Z,2019-10-02T01:07:18Z,CLOSED,False,3,2,1,https://github.com/duttrohan0302,"Updated the c code, initalized a var argumentc",1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/843,https://github.com/duttrohan0302,1,https://github.com/htacg/tidy-html5/pull/843,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,843,2019-10-01T08:05:56Z,2019-10-02T01:06:52Z,2019-10-02T01:07:18Z,CLOSED,False,3,2,1,https://github.com/duttrohan0302,"Updated the c code, initalized a var argumentc",1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/843,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/843#issuecomment-537292503,,"@duttrohan0302 thanks for the issue, but do not understand... please explain...
@@ -352,8 +353,8 @@ int main(int argc, char **argv)

         --argc;
         ++argv;
-
-        if (argc <= 1)
+        int argumentc = argc
+        if (argumentc <= 1)
            break;
    }
As the patch stands at the moment, there seems no reason to create a new stack variable, int argumentc, copy the current argc stack variable to it, and test it for exit/break... over testing argc itself...
What does this gain? What bug is it addressing?
That is aside from the fact that creating this new variable in the middle of code breaks the general K&R C rule, that all stack variable should be created at the beginning of a context... before all code statements (see maybe #550)... but this is minor...
And the given code seems incomplete - int argumentc = argc - will not compile! Did you missing adding a ;?
Additionally, github shows @duttrohan0302 wants to merge ... from unknown repository, which usually indicates that the forked repository has been deleted... or changed... or whatever... so what is the source of this PR?
Am I missing something?
Am closing this until, at least some, of the above questions are addressed... thanks...
OT: In general, a PR should only be created follow a bug|feature request|... issue, which explains the reasons, the details, the RFC,... and allows discussion on its merits/testing/need/use/etc/etc ... before presenting code... but there are exceptions...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/lhchavez,1,https://github.com/htacg/tidy-html5/pull/848,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","was added to the WHATWG HTML5 Living Standard on April 20, 2016.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/848#issuecomment-559874619,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez thanks for the Feature Request...
I pulled your fork, built a 5.7.28.I848 version... created some sample html... it seems great on some things... but puzzled by a few things...
I had added <style> element, in the template, and found that I needed --fix-style-tags no to the config...
Then still got a warning - moved <style> tag to <head>! fix-style-tags: no to avoid. - hmmm, I said I understood.. why a continued nag...
Then from the code -
  <div>
    <span slot='title-1'>Title A</span> 
    <span slot='title-2'>Title B...
   ...
got a warning - <span> proprietary attribute ""slot"" - but maybe this requires an addition to the span tag....
On another sample -
<p><slot name=""my-text"">My default text</slot></p>

Tidy outputs -
<p></p>
<slot name=""my-text"">My default text</slot>
<p></p>

Just thinking aloud, should slot have an inline bit, too,... but maybe the code is wrong in other ways... the nu html checker reports - Error: Element slot not allowed as child of element p in this context. - but maybe this is a different issue... still deciding...
With those niggles discussed, solved, added... looks like a good PR... thanks...
To continue testing, could you supply some, hopefully small sample html to test, explore, etc... thanks",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/lhchavez,3,https://github.com/htacg/tidy-html5/pull/848#issuecomment-559880941,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","Done, added one testcase that has some snippets pulled from https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot and should now pass cleanly.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/lhchavez,4,https://github.com/htacg/tidy-html5/pull/848#issuecomment-559882997,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","the one thing i could not find an easy way to do is to allow both <template> and <slot> to include any arbitrary HTML content (since they both have a transparent content model). that's what causing the move of the <style> to <head>.
I'm using ParseInline for <slot> in this case, but that's not the correct choice, since the other example in MDN (<slot name=""attributes""><p>None</p></slot>) does not work. ParseBlock does some other weird things since the code does not expect it to be called from within an inline context.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/848#issuecomment-560018580,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez thank you for the additional pushes to this PR, but not sure I agree with all, yet...
But pulled and built tidy-rc848-1 for continued testing...
And thanks for the case-848.html test sample, from MDN docs...
There, in PR-32, suggest a small enhancement, to remove some nu nags -
diff --git a/cases/testbase/case-848.html b/cases/testbase/case-848.html
index d74c3ca..2ff2bf9 100644
--- a/cases/testbase/case-848.html
+++ b/cases/testbase/case-848.html
@@ -1,7 +1,8 @@
 <!DOCTYPE html>
-<html>
+<html lang=""en"">
 <head>
-  <title>test</title>
+<meta charset=""utf-8"">
+<title>add 'slot' tag</title>
 </head>
 <body>
   <p><slot name=""my-text"">My default text</slot></p>
But these are not particularly important...
Question on <p><slot name=""my-text"">My default text</slot></p>?
I do want to understand why nu issues the ERROR: Element slot not allowed as child of element p in this context. ... for this case-848.html source... while libtidy thinks it is ok... who is right, wrong, maybe,.. here...
I have a test file in_848.html, which satisfies nu, and tidy-rc848-1, which contains code like <th><slot name='title-1'></slot></th>... just trying to understand...
Yes, strongly note you have switched <slot> from CM_BLOCK/ParseBlock to CM_INLINE/ParseInline... but still have some doubts about that... others have both bits... and use ParseBlock... and other combinations... what is most correct for <slot>... do not know yet...
And that raises the question about <slot name=""my-text""><p>My default text</p></slot>, which I think would be valid in a template... need to try more examples/samples... help on those appreciated...
Using definitions by MDN, or even by W3C, for that matter, does little to understand the problem in the libtidy context... which started before such definitions came into style... but maybe they help describe the tag/attr... and thus help where to look...
I started to look back in the issues related to template, and found some - #199, #282, #310, ... and I am sure there are others... presently trying to wade through those...
Feel the PR has advanced, but still some definition questions, trial, tests, ...
Look forward to further feedback, comment, patches, PR, etc on this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/lhchavez,6,https://github.com/htacg/tidy-html5/pull/848#issuecomment-560035171,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","I do want to understand why nu issues the ERROR: Element slot not allowed as child of element p in this context.

This might be a bug in nu, since it says that

Contexts in which element slot may be used:

Where phrasing content is expected.

Content model for element p:

Phrasing content.


Which sounds like it's contradicting itself.

And that raises the question about <slot name=""my-text""><p>My default text</p></slot>, which I think would be valid in a template...

yes, that should be valid in a template, but there is no ready-to-use solution to parse arbitrary HTML that should be allowed in <template>. Both ParseBlock and ParseInline are wrong in this case, but ParseBlock triggers fewer edge cases after manual inspection. I can definitely create a ParseTransparent that just calls ParseBlock and has a TODO comment explaining that it's a subpar solution that needs more work, linking to an issue about it.
Re: CM_INLINE vs CM_BLOCK/CM_INLINE|CM_BLOCK|CM_MIXED, I think that for <slot>, CM_INLINE is the better choice, since <slot> is only allowed in places where phrasing content is expected (per the error from nu above and MDN). Tidy's model does not match exactly, but the the vast majority of the tags in the Phrasing content category are marked as only CM_INLINE in Tidy.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,7,https://github.com/htacg/tidy-html5/pull/848#issuecomment-560203078,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez thank you for the feedback...
It seems we are 90% there, only differing on the slot def_tags definition...
You suggest CM_INLINE in 'libtidycan be **equated** toPhrasing content` in MDN...no, no, no...
I can not find slot in their list... lost... but that is not the point... that is MDN...
Presently libtidy has NO concept of Phrasing content... maybe it could be added... somehow... if it can be defined...

Both ParseBlock and ParseInline are wrong in this case

You further suggest a ParseTransparent, based on ParseBlock, with some TODO notes, but at the moment the PR uses ParseInline... an important choice...
Is what you suggest based on performance on edge cases... that smacks of trial and error... all for that... yeah ;=))
What happens
What happens if the flag is say, CM_INLINE|CM_BLOCK[|CM_MIXED], and the parser ParseBlock is used...
Or some other combinations...
How do they perform in the main, AND edge cases... not sure what that is...
Started an analysis of the current tag_defs table... to see if that would yield some categorization of the entries...  especially. inline&|block with parser... but that is SLOW going...

RE: template... no ready-to-use solution to parse arbitrary HTML ...

Here, I tried to point to some earlier - turn off tidy - discussion... in general, it seems the consensis is - This HTML Tidy - what do you want it to do?
There are many other text manipulation tools, to avoid libTidy seeing this funny html code, or mess... to tidy...
Parsing by libTidy is OFF, well, mostly OFF, when, parsing tags like <script>...
Is it suggested that the <template> tag be treated as such... refs for that...
But that seems a different, and NEW issue... must refer to the previous discussions... thanks...

This might be a bug in nu, since it says that

Maybe, but maybe we do not understand, fully, those cute definitions of Phrasing content, et al... this time in nu... in a libTidy context...
More importantly, how that can that be simulated in libTidy... if it is required...
But back to this great PR -
I would like to see some more testing of other table options... before deciding which is the best... will continue that... options/example/results testing appreciated...
Look forward to further feedback, comment, patches, PR, etc on this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,8,https://github.com/htacg/tidy-html5/pull/848#issuecomment-566726378,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez I have now conducted lots of further test, and concluded slot should use ParseBlock, in libTidy terms, with the bit flags of inline|block|mixed, and thus suggest the following additional patch to this PR -
diff --git a/src/tags.c b/src/tags.c
index 9f72a70..760c37b 100644
--- a/src/tags.c
+++ b/src/tags.c
@@ -323,7 +323,7 @@ static Dict tag_defs[] =
   { TidyTag_OUTPUT,      ""output"",       VERS_ELEM_OUTPUT,      &TY_(W3CAttrsFor_OUTPUT)[0],      (CM_INLINE),                   TY_(ParseInline),    NULL           },
   { TidyTag_PROGRESS,    ""progress"",     VERS_ELEM_PROGRESS,    &TY_(W3CAttrsFor_PROGRESS)[0],    (CM_INLINE),                   TY_(ParseInline),    NULL           },
   { TidyTag_SECTION,     ""section"",      VERS_ELEM_SECTION,     &TY_(W3CAttrsFor_SECTION)[0],     (CM_BLOCK),                    TY_(ParseBlock),     NULL           },
-  { TidyTag_SLOT,        ""slot"",         VERS_ELEM_SLOT,        &TY_(W3CAttrsFor_SLOT)[0],        (CM_INLINE),                   TY_(ParseInline),    NULL           },
+  { TidyTag_SLOT,        ""slot"",         VERS_ELEM_SLOT,        &TY_(W3CAttrsFor_SLOT)[0],        (CM_INLINE|CM_BLOCK|CM_MIXED), TY_(ParseBlock),     NULL           },
   { TidyTag_SOURCE,      ""source"",       VERS_ELEM_SOURCE,      &TY_(W3CAttrsFor_SOURCE)[0],      (CM_BLOCK|CM_INLINE|CM_EMPTY), TY_(ParseBlock),     NULL           },
   { TidyTag_SUMMARY,     ""summary"",      VERS_ELEM_SUMMARY,     &TY_(W3CAttrsFor_SUMMARY)[0],     (CM_BLOCK),                    TY_(ParseInline),    NULL           },
   { TidyTag_TEMPLATE,    ""template"",     VERS_ELEM_TEMPLATE,    &TY_(W3CAttrsFor_TEMPLATE)[0],    (CM_BLOCK),                    TY_(ParseBlock),     NULL           },
At first I tried to reason it out, analyzing the current def_tags definition table, using a tidy-tags.pl script, which outputs a html table version...
See the temptable.htm using your slot branch, and temptable2.htm using my slot2 branch... WARNING These are only in my web tmp folder, and can be deleted/overwritten at any time... sorry...
But they do not seem to answer the question...
I then constructed more samples for testing... in addition to in_848.html, already published to my repo, added 848-1, 848-11, 848-12, 848-2, 848-3, and eventually 848-4... will try to get around to publishing these... but...
I built more versions of tidy... if we consider the table is made using 3 bit flags, inline (I), block (B), mixed (M), and 2 parsers, inline (I), and block, (B)... so built versions -

tidy-I-I.exe - your slot branch version - 1 inline flag, inline parser
tidy-IBM-B.exe - my slot2 branch - 3 flags, block parser
then others - B-B, block/block, IB-B, add inline, IBM-I... etc

Then used each version of tidy, on each of my samples... the best run is using my IBM-B version... your I-I fails, creates bad, incompatible, html output, on several samples...
Perhaps the most important is 848-4, which is based on the working, online sample, at  MDN/web-components ... with the addition of a config -
// issue 848-4
// new-blocklevel-tags: element-details
custom-tags: blocklevel
fix-style-tags: no

It also re-open the addition of the fix-style-tags option, but that can be a separate issue...
So I am now convinced the above patch needs to be applied to this PR... then feel it is good to go... at least after maybe a few tweaks, time, more tests...
Look forward to further feedback, comment, patches, PR, etc on this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/lhchavez,9,https://github.com/htacg/tidy-html5/pull/848#issuecomment-568268043,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","You suggest CM_INLINE in libtidy can be equated toPhrasing content in MDN...no, no, no...
I can not find slot in their list... lost... but that is not the point... that is MDN...

welp, that was my bad. i should have linked the canonical W3C definition of Phrasing content, which does contain the <slot> tag. MDN is a great resource, but it can go out of sync every now and then.
And I'm sorry if I sounded like I was suggesting that CM_INLINE was equal to the Phrasing content concept. I realize they are slightly different, but it's the closest that is available at the moment. At least, it's very close conceptually IIUC.

Presently libtidy has NO concept of Phrasing content... maybe it could be added... somehow... if it can be defined...

IIUC the definifion is ""if it is contained in the canonical Phrasing content tag list"".


Both ParseBlock and ParseInline are wrong in this case

You further suggest a ParseTransparent, based on ParseBlock, with some TODO notes, but at the moment the PR uses ParseInline... an important choice...

Errr, sorry, I got a bit confused with the ParseBlock bit, since I was thinking about <template>. For <slot>, the W3C spec says that it has a Transparent content model, which means that it inherits the content model of the container tag.
Here's where it gets tricky. <slot> can only be found in places where Phrasing content is allowed, but since Phrasing content is itself Flow content, this is allowed by the spec:
<section>  <!-- this is Sectioning content, that has a Flow content model -->
  <slot>...</slot> <!-- this now has a Flow content model, so ParseBlock is more correct -->
  <p>  <!-- this is Flow content, that has a Phrasing content model -->
    <slot>...</slot> <!-- this now has a Phrasing content model, so ParseInline is more correct -->
  </p>
</section>

Is what you suggest based on performance on edge cases... that smacks of trial and error... all for that... yeah ;=))

yeah :/ as I mentioned, both options are suboptimal and break some cases, as outlined above.

What happens
What happens if the flag is say, CM_INLINE|CM_BLOCK[|CM_MIXED], and the parser ParseBlock is used...

Orginally I made the decision of using ParseInline on a less exhaustive list of examples, but it looks like ParseBlock should let all the cases that the spec allows at the expense of also allowing things that the spec does not allow. But I guess it's an okay tradeoff.


RE: template... no ready-to-use solution to parse arbitrary HTML ...

Here, I tried to point to some earlier - turn off tidy - discussion... in general, it seems the consensis is - This HTML Tidy - what do you want it to do?

What I'm most interested in is the automatic rewriting feature of tidy, which we would lose by turning it off :(",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,10,https://github.com/htacg/tidy-html5/pull/848#issuecomment-570323617,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez thank you for the additional commit 99b6c660 ... this looks good...
Have not yet had a chance to update, rebuild, and test... etc... will try to get to that soonest... but the PR looks good...
I can see you are still trying to tie together the two sets of logic, W3C/MDM - Flow/Phrasing vs libTidy - ParseBlock/ParseInline... and do not quite agree with all the comments, in your sample... but, no problem...
It is important to have a reasonable sample set... and more welcome... actual use cases...
So along with the other 7, in my repo, in_848.html in_848-1.html in_848-11.html in_848-12.html in_848-2.html in_848-3.html in_848-4.html, added yours, as  in_848-5.html... tks...
But am not sure what extra it adds... it is passed by both tidy-I-I.exe and the tidy-IBM-B.exe... so does not sway the argument either way... ParseBlock vs ParseInline, in tidy terms...
So, perhaps it is agreed, as it stands at the moment, if merged, libTidy can be too liberal with its acceptance of the tag slot... but maybe that could be left to a new issue, being raised later...
There is also the pending problem with the style tag, the fix-style-tags option, in in_848-4.html, but as stated, that can also be a separate issue...
It seems downright wrong to move style to the head, in this instance... aside from also causing bad rendering...
I don't exactly understand to turn off the automatic rewriting feature of tidy... you will have to explain this more... if you want to persue this...
So after I get around to a bit more testing, I think this is a good addition, to libTidy... thanks...
Look forward to further feedback, comment, patches, PR, etc on this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,11,https://github.com/htacg/tidy-html5/pull/848#issuecomment-700804527,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez sorry for the long delay on this... I have subsequently changed PCs, and am in the process of setting up the testing of this again...
At least one quick change in the PR, is where we add the TidyAttr_SLOT enum, in tidyenum.h! The list looks alphabetic, but read #851... The SO version of the library would need to be bumped almost everytime such a new option is added...
As further suggested there, I think the wording in OPTIONS.md, ATTRIBUTES.md, and probably others, needs to be reverted to state something like a new option must be added just before the last... ... maybe @balthisar could help with this?
Meantime, I will try to get back to testing slot... it is an important addition to libtidy...
Look forward to further feedback, comments, other patches, PR, etc, on this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,12,https://github.com/htacg/tidy-html5/pull/848#issuecomment-700871843,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.","@lhchavez have build your forks slot branch, with the following patch, in line with #851...
diff --git a/include/tidyenum.h b/include/tidyenum.h
index 543a82e..8fe5f52 100644
--- a/include/tidyenum.h
+++ b/include/tidyenum.h
@@ -988,13 +988,13 @@ typedef enum
   TidyTag_OUTPUT,        /**< OUTPUT */
   TidyTag_PROGRESS,      /**< PROGRESS */
   TidyTag_SECTION,       /**< SECTION */
-  TidyTag_SLOT,          /**< SLOT */
   TidyTag_SOURCE,        /**< SOURCE */
   TidyTag_SUMMARY,       /**< SUMMARY */
   TidyTag_TEMPLATE,      /**< TEMPLATE */
   TidyTag_TIME,          /**< TIME */
   TidyTag_TRACK,         /**< TRACK */
   TidyTag_VIDEO,         /**< VIDEO */
+  TidyTag_SLOT,          /**< SLOT */
 
   N_TIDY_TAGS            /**< Must be last */
 } TidyTagId;
@@ -1144,7 +1144,6 @@ typedef enum
   TidyAttr_SHOWGRIDX,              /**< SHOWGRIDX= */
   TidyAttr_SHOWGRIDY,              /**< SHOWGRIDY= */
   TidyAttr_SIZE,                   /**< SIZE= */
-  TidyAttr_SLOT,                   /**< SLOT= */
   TidyAttr_SPAN,                   /**< SPAN= */
   TidyAttr_SRC,                    /**< SRC= */
   TidyAttr_SRCSET,                 /**< SRCSET= (HTML5) */
@@ -1344,7 +1343,8 @@ typedef enum
   TidyAttr_AS,                     /**< AS= */
    
   TidyAttr_XMLNSXLINK,             /**< svg xmls:xlink=""url"" */
-   
+  TidyAttr_SLOT,                   /**< SLOT= */
+
   N_TIDY_ATTRIBS                   /**< Must be last */
 } TidyAttrId;
If you agree, appreciate it being added to this PR... thanks...
I built your slot branch, and used it to run your forked regression tests, pr-848 branch, and it all ran fine, passing the new case-848.html...
And of course that case fails using the current 5.7.29, as expected... thanks...
Are there any other tests I need to run? I will look around for some slot usage examples...
So, if the above enum change, in the PR, is agreed, then it seems we are ready to go...
Look forward to further feedback, comments, other patches, PR, etc, on this... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,848,2019-11-28T16:34:35Z,2020-11-21T15:31:29Z,2020-11-21T15:45:07Z,MERGED,True,19,0,6,https://github.com/lhchavez,Support the <slot> tag,3,"['Feature Request', 'Technical Discussion', 'Help Needed']",https://github.com/htacg/tidy-html5/pull/848,https://github.com/geoffmcl,13,https://github.com/htacg/tidy-html5/pull/848#issuecomment-731596074,"was added to the WHATWG HTML5 Living Standard on April 20, 2016.",@lhchavez eventually got to it... now merged... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,853,2019-12-18T19:28:15Z,2020-10-02T15:48:07Z,2020-10-02T15:48:07Z,MERGED,True,3,0,1,https://github.com/esclim,Protect against NULL in PruneSection.,1,['Bug'],https://github.com/htacg/tidy-html5/pull/853,https://github.com/esclim,1,https://github.com/htacg/tidy-html5/pull/853,A Null node happens when pruning unbalanced <![if ...]> <![endif]>.,A Null node happens when pruning unbalanced <![if ...]> <![endif]>.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,853,2019-12-18T19:28:15Z,2020-10-02T15:48:07Z,2020-10-02T15:48:07Z,MERGED,True,3,0,1,https://github.com/esclim,Protect against NULL in PruneSection.,1,['Bug'],https://github.com/htacg/tidy-html5/pull/853,https://github.com/esclim,2,https://github.com/htacg/tidy-html5/pull/853#issuecomment-567178954,A Null node happens when pruning unbalanced <![if ...]> <![endif]>.,"Sample HTML file and config file.
test.zip",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,853,2019-12-18T19:28:15Z,2020-10-02T15:48:07Z,2020-10-02T15:48:07Z,MERGED,True,3,0,1,https://github.com/esclim,Protect against NULL in PruneSection.,1,['Bug'],https://github.com/htacg/tidy-html5/pull/853,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/853#issuecomment-567201933,A Null node happens when pruning unbalanced <![if ...]> <![endif]>.,"@esclim after a quick test, with your supplied sample... thanks for that...
Looks like a good catch, and fix... of a bug just waiting to happen... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,853,2019-12-18T19:28:15Z,2020-10-02T15:48:07Z,2020-10-02T15:48:07Z,MERGED,True,3,0,1,https://github.com/esclim,Protect against NULL in PruneSection.,1,['Bug'],https://github.com/htacg/tidy-html5/pull/853,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/853#issuecomment-702312605,A Null node happens when pruning unbalanced <![if ...]> <![endif]>.,"@esclim, sorry for the delay...
Have added your sample to my repo, as in_853.html and cfg_853.txt ... so I could pull, and test in linux...
$ tidy -v
HTML Tidy for Linux version 5.7.28
$ tidy -config test/input5/cfg_853.txt test/input5/in_853.html
line 3 column 6 - Warning: inserting missing 'title' element
Segmentation fault (core dump)

WOW, there, this BUG causes a segfault!!!
Must get to merging this PR soonest... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,865,2020-02-21T13:18:34Z,2020-09-20T14:25:56Z,2020-09-21T02:07:12Z,CLOSED,False,11,0,1,https://github.com/PhoebeHui,Add vcpkg installation instructions,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/865,https://github.com/PhoebeHui,1,https://github.com/htacg/tidy-html5/pull/865,"Tidy-html5 is available as a port in VCPKG , documenting the install process here will help users get started by providing a single set of commands to build tidy , ready to be included in their projects.
VCPKG is a C++ library manager that simplifies installation for tidy-html5 and other project dependencies, we also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.","Tidy-html5 is available as a port in VCPKG , documenting the install process here will help users get started by providing a single set of commands to build tidy , ready to be included in their projects.
VCPKG is a C++ library manager that simplifies installation for tidy-html5 and other project dependencies, we also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,865,2020-02-21T13:18:34Z,2020-09-20T14:25:56Z,2020-09-21T02:07:12Z,CLOSED,False,11,0,1,https://github.com/PhoebeHui,Add vcpkg installation instructions,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/865,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/865#issuecomment-695793347,"Tidy-html5 is available as a port in VCPKG , documenting the install process here will help users get started by providing a single set of commands to build tidy , ready to be included in their projects.
VCPKG is a C++ library manager that simplifies installation for tidy-html5 and other project dependencies, we also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.","@PhoebeHui, thank you for your PR, and nothing wrong with mentioning vcpkg in our docs, somewhere, but...
But I do not think it necessary to offer VCPKG as an ""Alternatively, you can build and install tidy using ...""... in our BUILD.md... where we want to promote the simple git clone/cmake ...
Perhaps VCPKG is best mentioned in our Get Tidy, where other Package Managers are added...
I have experience with other projects, which use VCPKG to good effect, especially when 3rdparty libraries, multiple sources, are involved... or elsewhere...
But HTML Tidy, has no such dependencies, so ... no!
Anyway, the site pages, offers you an alternative... so am closing this PR...
Look forward to further feedback... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,865,2020-02-21T13:18:34Z,2020-09-20T14:25:56Z,2020-09-21T02:07:12Z,CLOSED,False,11,0,1,https://github.com/PhoebeHui,Add vcpkg installation instructions,1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/865,https://github.com/PhoebeHui,3,https://github.com/htacg/tidy-html5/pull/865#issuecomment-695871851,"Tidy-html5 is available as a port in VCPKG , documenting the install process here will help users get started by providing a single set of commands to build tidy , ready to be included in their projects.
VCPKG is a C++ library manager that simplifies installation for tidy-html5 and other project dependencies, we also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.",Thanks for your response!,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,881,2020-05-18T22:52:06Z,2020-10-02T15:57:49Z,2020-10-02T15:57:49Z,MERGED,True,67,22,1,https://github.com/hugotiburtino,Complete pt_br translation,11,"['Infrastructure', 'Docs']",https://github.com/htacg/tidy-html5/pull/881,https://github.com/hugotiburtino,1,https://github.com/htacg/tidy-html5/pull/881,Complete some missing fields at the localize/translations/language_pt_br.po,Complete some missing fields at the localize/translations/language_pt_br.po,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,881,2020-05-18T22:52:06Z,2020-10-02T15:57:49Z,2020-10-02T15:57:49Z,MERGED,True,67,22,1,https://github.com/hugotiburtino,Complete pt_br translation,11,"['Infrastructure', 'Docs']",https://github.com/htacg/tidy-html5/pull/881,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/881#issuecomment-696281622,Complete some missing fields at the localize/translations/language_pt_br.po,"@hugotiburtino, thanks for these...
I will try to get around to merging this, when I start considering the outstanding PRs... soon I hope... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,884,2020-06-20T01:20:31Z,2020-10-02T16:07:34Z,2020-10-02T16:14:13Z,MERGED,True,16,0,1,https://github.com/ltx2018,fix memleak in GetTokenFromStream,1,['Bug'],https://github.com/htacg/tidy-html5/pull/884,https://github.com/ltx2018,1,https://github.com/htacg/tidy-html5/pull/884,check asp & php if ParseAttribute return NULL,check asp & php if ParseAttribute return NULL,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,884,2020-06-20T01:20:31Z,2020-10-02T16:07:34Z,2020-10-02T16:14:13Z,MERGED,True,16,0,1,https://github.com/ltx2018,fix memleak in GetTokenFromStream,1,['Bug'],https://github.com/htacg/tidy-html5/pull/884,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/884#issuecomment-696843517,check asp & php if ParseAttribute return NULL,"@ltx2018 thank you for the PR...
I have reviewed the commit 4377ab8, and it all looks fine... but...
Can you supply some small asp and php samples, to show the current memory leak... for testing the patch, to verify a fix... etc... etc... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,884,2020-06-20T01:20:31Z,2020-10-02T16:07:34Z,2020-10-02T16:14:13Z,MERGED,True,16,0,1,https://github.com/ltx2018,fix memleak in GetTokenFromStream,1,['Bug'],https://github.com/htacg/tidy-html5/pull/884,https://github.com/ltx2018,3,https://github.com/htacg/tidy-html5/pull/884#issuecomment-701141308,check asp & php if ParseAttribute return NULL,"@ltx2018 thank you for the PR...
I have reviewed the commit 4377ab8, and it all looks fine... but...
Can you supply some small asp and php samples, to show the current memory leak... for testing the patch, to verify a fix... etc... etc... thanks...

Thanks for the review.
Here is the reproduce testcode(based from oss-fuzz):
poc.zip.
While running under valgrind can get err like this:
==50584== Memcheck, a memory error detector
==50584== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==50584== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==50584== Command: ./poc
==50584==
==50584==
==50584== HEAP SUMMARY:
==50584==     in use at exit: 104 bytes in 1 blocks
==50584==   total heap usage: 483 allocs, 482 frees, 103,910 bytes allocated
==50584==
==50584== 104 bytes in 1 blocks are definitely lost in loss record 1 of 1
==50584==    at 0x4873BC0: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-arm64-linux.so)
==50584==    by 0x4917CFF: defaultAlloc (alloc.c:64)
==50584==    by 0x4907FEF: prvTidyNewNode (lexer.c:1430)
==50584==    by 0x49083FB: NewToken (lexer.c:1614)
==50584==    by 0x49083FB: ParsePhp (lexer.c:3561)
==50584==    by 0x49083FB: ParseAttribute (lexer.c:3616)
==50584==    by 0x490A29B: GetTokenFromStream (lexer.c:3261)
==50584==    by 0x490A29B: prvTidyGetToken (lexer.c:2506)
==50584==    by 0x4903C87: prvTidyParseDocument (parser.c:4606)
==50584==    by 0x491BB8B: prvTidyDocParseStream (tidylib.c:1488)
==50584==    by 0x491BE83: tidyDocParseBuffer (tidylib.c:1182)
==50584==    by 0x491BE83: tidyParseBuffer (tidylib.c:1109)
==50584==    by 0x400A13: run_tidy_parser (in /root/poc)
==50584==    by 0x400AAB: LLVMFuzzerTestOneInput (in /root/poc)
==50584==    by 0x400AF7: main (in /root/poc)
==50584==
==50584== LEAK SUMMARY:
==50584==    definitely lost: 104 bytes in 1 blocks
==50584==    indirectly lost: 0 bytes in 0 blocks
==50584==      possibly lost: 0 bytes in 0 blocks
==50584==    still reachable: 0 bytes in 0 blocks
==50584==         suppressed: 0 bytes in 0 blocks
==50584==
==50584== For counts of detected and suppressed errors, rerun with: -v
==50584== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,884,2020-06-20T01:20:31Z,2020-10-02T16:07:34Z,2020-10-02T16:14:13Z,MERGED,True,16,0,1,https://github.com/ltx2018,fix memleak in GetTokenFromStream,1,['Bug'],https://github.com/htacg/tidy-html5/pull/884,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/884#issuecomment-702246738,check asp & php if ParseAttribute return NULL,"@ltx2018 thank you for the feedback... particularly your poc.c app, giving us a sample - in_884.xml -
<?xml
<?x

Built, in windows, where we do not have the valgrind tool, a memory debug version of the library... ran tidy.exe -q -xml in_884.xml and, in temptidy.txt output, note the allocation, and missing free of 104 bytes...
Applying commit 4377ab8, from your fork, this is certainly fixed... thanks...
Will get around to merging this PR soonest...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,884,2020-06-20T01:20:31Z,2020-10-02T16:07:34Z,2020-10-02T16:14:13Z,MERGED,True,16,0,1,https://github.com/ltx2018,fix memleak in GetTokenFromStream,1,['Bug'],https://github.com/htacg/tidy-html5/pull/884,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/884#issuecomment-702824084,check asp & php if ParseAttribute return NULL,@ltx2018 thanks again... look forward to more...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,886,2020-06-29T07:05:05Z,2020-10-02T16:16:05Z,2020-10-02T16:16:05Z,MERGED,True,1,3,1,https://github.com/SvenPStarFinanz,"COMPILE_FLAGS property only once per target, avoid overwriting.",1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/886,https://github.com/SvenPStarFinanz,1,https://github.com/htacg/tidy-html5/pull/886,Helps fixing shared build.,Helps fixing shared build.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,886,2020-06-29T07:05:05Z,2020-10-02T16:16:05Z,2020-10-02T16:16:05Z,MERGED,True,1,3,1,https://github.com/SvenPStarFinanz,"COMPILE_FLAGS property only once per target, avoid overwriting.",1,['Build/Install'],https://github.com/htacg/tidy-html5/pull/886,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/886#issuecomment-696297883,Helps fixing shared build.,"@SvenPStarFinanz, commit #74a7b2e looks fine... thanks...
I will try to get around to merging this, when I start considering the outstanding PRs... soon I hope... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,887,2020-06-30T15:34:23Z,2020-09-22T17:02:11Z,2020-12-15T23:13:10Z,CLOSED,False,62,0,4,https://github.com/Taxxodium,Added support for Swift Package Manager,2,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/887,https://github.com/Taxxodium,1,https://github.com/htacg/tidy-html5/pull/887,"This will allow tidy-html5 to be used with the Swift Package Manager.
Once installed, the developer just has to write import tidy-html5 in their Swift code.","This will allow tidy-html5 to be used with the Swift Package Manager.
Once installed, the developer just has to write import tidy-html5 in their Swift code.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,887,2020-06-30T15:34:23Z,2020-09-22T17:02:11Z,2020-12-15T23:13:10Z,CLOSED,False,62,0,4,https://github.com/Taxxodium,Added support for Swift Package Manager,2,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/887,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/887#issuecomment-696852146,"This will allow tidy-html5 to be used with the Swift Package Manager.
Once installed, the developer just has to write import tidy-html5 in their Swift code.","@Taxxodium, thank you for the PR... I think...
Assuming we want support for Swift Package Manager, I guess it depends on what we must add to our repo...
Commit ba561e5 seems to add a whole host of things, which is NOT agreed...
Could you present a simple proposal to Tidy, get that discussed, decided, before we consider a PR... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,887,2020-06-30T15:34:23Z,2020-09-22T17:02:11Z,2020-12-15T23:13:10Z,CLOSED,False,62,0,4,https://github.com/Taxxodium,Added support for Swift Package Manager,2,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/887,https://github.com/Taxxodium,3,https://github.com/htacg/tidy-html5/pull/887#issuecomment-701658567,"This will allow tidy-html5 to be used with the Swift Package Manager.
Once installed, the developer just has to write import tidy-html5 in their Swift code.","@geoffmcl This PR just makes it easy for Swift developers to add the library to their projects using the Swift Package Manager. Before this, developers would need to go either through various configuration settings to use the C library in their Swift code or make an Objective C wrapper.
By adding support for the Swift Package Manager, developers just include it and can use it off the bat.
Unless you don't want the library to be used in such languages as Swift, then this PR is not needed and I guess developers could use my fork instead of the official repository.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,897,2020-09-29T02:41:47Z,2020-10-02T16:25:25Z,2020-10-02T22:23:35Z,MERGED,True,1,2,1,https://github.com/arrmo,Correction for issue-895,1,['Bug'],https://github.com/htacg/tidy-html5/pull/897,https://github.com/arrmo,1,https://github.com/htacg/tidy-html5/pull/897,"As proposed by @geoffmcl - thanks!
To address incorrect handling of  block, when header formatting is inside summary.","As proposed by @geoffmcl - thanks!
To address incorrect handling of  block, when header formatting is inside summary.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,897,2020-09-29T02:41:47Z,2020-10-02T16:25:25Z,2020-10-02T22:23:35Z,MERGED,True,1,2,1,https://github.com/arrmo,Correction for issue-895,1,['Bug'],https://github.com/htacg/tidy-html5/pull/897,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/897#issuecomment-700770162,"As proposed by @geoffmcl - thanks!
To address incorrect handling of  block, when header formatting is inside summary.","@arrmo see #895 for some additional commits, that could be added to this PR, or done at the time of the merge... will get to it soonest... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,897,2020-09-29T02:41:47Z,2020-10-02T16:25:25Z,2020-10-02T22:23:35Z,MERGED,True,1,2,1,https://github.com/arrmo,Correction for issue-895,1,['Bug'],https://github.com/htacg/tidy-html5/pull/897,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/897#issuecomment-702836752,"As proposed by @geoffmcl - thanks!
To address incorrect handling of  block, when header formatting is inside summary.",@arrmo thank you for the additional commits... PR #897 now merged... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,897,2020-09-29T02:41:47Z,2020-10-02T16:25:25Z,2020-10-02T22:23:35Z,MERGED,True,1,2,1,https://github.com/arrmo,Correction for issue-895,1,['Bug'],https://github.com/htacg/tidy-html5/pull/897,https://github.com/arrmo,4,https://github.com/htacg/tidy-html5/pull/897#issuecomment-702982926,"As proposed by @geoffmcl - thanks!
To address incorrect handling of  block, when header formatting is inside summary.","NP, glad I could help!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,898,2020-10-05T17:11:24Z,2020-11-21T15:47:58Z,2020-11-21T15:48:10Z,MERGED,True,11,7,4,https://github.com/geoffmcl,Is. #896 - make 'bear' docs match code,2,"['Docs', 'Bug']",https://github.com/htacg/tidy-html5/pull/898,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/898,"For issue #896 - clear up and clarify the options bare and word-2000, mainly in the docs, although there is one code change...","For issue #896 - clear up and clarify the options bare and word-2000, mainly in the docs, although there is one code change...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,899,2020-10-09T10:04:31Z,2020-11-21T16:10:13Z,2020-11-21T16:13:33Z,MERGED,True,4,0,1,https://github.com/ltx2018,Free attributes before return NULL,1,['Bug'],https://github.com/htacg/tidy-html5/pull/899,https://github.com/ltx2018,1,https://github.com/htacg/tidy-html5/pull/899,fix memleak in GetTokenFromStream(),fix memleak in GetTokenFromStream(),True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,899,2020-10-09T10:04:31Z,2020-11-21T16:10:13Z,2020-11-21T16:13:33Z,MERGED,True,4,0,1,https://github.com/ltx2018,Free attributes before return NULL,1,['Bug'],https://github.com/htacg/tidy-html5/pull/899,https://github.com/ltx2018,2,https://github.com/htacg/tidy-html5/pull/899#issuecomment-706092717,fix memleak in GetTokenFromStream(),"And here is the reproduce testcode(based from oss-fuzz):
poc.zip",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,899,2020-10-09T10:04:31Z,2020-11-21T16:10:13Z,2020-11-21T16:13:33Z,MERGED,True,4,0,1,https://github.com/ltx2018,Free attributes before return NULL,1,['Bug'],https://github.com/htacg/tidy-html5/pull/899,https://github.com/geoffmcl,3,https://github.com/htacg/tidy-html5/pull/899#issuecomment-706277542,fix memleak in GetTokenFromStream(),"@ltx2018 thank you for this next PR... and the poc.c sample code, to reproduce...
But actually you can use tidy itself,  like just running -
$ echo ""<?xml a"" | valgrind tidy -q

And applying your 9e05e16 patch clears the heap summery - in use at exit: 0 bytes in 0 blocks - great...
Look forward to others testing this, and reporting... thanks...
Baring any negative reports, but do not expect any, will get to merging this soonest... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,899,2020-10-09T10:04:31Z,2020-11-21T16:10:13Z,2020-11-21T16:13:33Z,MERGED,True,4,0,1,https://github.com/ltx2018,Free attributes before return NULL,1,['Bug'],https://github.com/htacg/tidy-html5/pull/899,https://github.com/ltx2018,4,https://github.com/htacg/tidy-html5/pull/899#issuecomment-707740173,fix memleak in GetTokenFromStream(),"@ltx2018 thank you for this next PR... and the poc.c sample code, to reproduce...
But actually you can use tidy itself, like just running -
$ echo ""<?xml a"" | valgrind tidy -q

And applying your 9e05e16 patch clears the heap summery - in use at exit: 0 bytes in 0 blocks - great...
Look forward to others testing this, and reporting... thanks...
Baring any negative reports, but do not expect any, will get to merging this soonest... thanks...

Thanks for the review and comments",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,899,2020-10-09T10:04:31Z,2020-11-21T16:10:13Z,2020-11-21T16:13:33Z,MERGED,True,4,0,1,https://github.com/ltx2018,Free attributes before return NULL,1,['Bug'],https://github.com/htacg/tidy-html5/pull/899,https://github.com/geoffmcl,5,https://github.com/htacg/tidy-html5/pull/899#issuecomment-731599662,fix memleak in GetTokenFromStream(),@ltx2018 PR now merged... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,902,2020-10-25T10:25:08Z,2020-11-21T17:03:21Z,2020-11-22T18:34:55Z,MERGED,True,13,0,3,https://github.com/sidvishnoi,"Is. #879: add loading attribute for img, iframe",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/902,https://github.com/sidvishnoi,1,https://github.com/htacg/tidy-html5/pull/902,"Fixes #879

Test input
<!DOCTYPE html>
<html lang=""en"">
<head>
  <title>Document</title>
</head>
<body>
  <img src=""foo"" loading=""lazy"" alt=""PASS"">
  <img src=""foo"" loading=""eager"" alt=""PASS"">
  
  <iframe src=""foo"" loading=""lazy"">PASS</iframe>
  <iframe src=""foo"" loading=""eager"">PASS</iframe>
  
  <div loading=""lazy"">FAIL</div>
  <iframe src=""foo"" loading=""what"">FAIL</iframe>
  <img src=""foo"" loading=""what"" alt=""FAIL"">
  <img src=""foo"" loading="""" alt=""FAIL"">
</body>
</html>


tidy -q test.html > /dev/null
line 7 column 3 - Warning: <img> proprietary attribute ""loading""
line 8 column 3 - Warning: <img> proprietary attribute ""loading""
line 10 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 11 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 13 column 3 - Warning: <div> proprietary attribute ""loading""
line 14 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 15 column 3 - Warning: <img> proprietary attribute ""loading""
line 16 column 3 - Warning: <img> proprietary attribute ""loading""



./build/cmake/tidy -q test.html > /dev/null
line 14 column 3 - Warning: <iframe> attribute ""loading"" has invalid value ""what""
line 15 column 3 - Warning: <img> attribute ""loading"" has invalid value ""what""
line 16 column 3 - Warning: <img> attribute ""loading"" lacks value
line 13 column 3 - Warning: <div> proprietary attribute ""loading""","Fixes #879

Test input
<!DOCTYPE html>
<html lang=""en"">
<head>
  <title>Document</title>
</head>
<body>
  <img src=""foo"" loading=""lazy"" alt=""PASS"">
  <img src=""foo"" loading=""eager"" alt=""PASS"">
  
  <iframe src=""foo"" loading=""lazy"">PASS</iframe>
  <iframe src=""foo"" loading=""eager"">PASS</iframe>
  
  <div loading=""lazy"">FAIL</div>
  <iframe src=""foo"" loading=""what"">FAIL</iframe>
  <img src=""foo"" loading=""what"" alt=""FAIL"">
  <img src=""foo"" loading="""" alt=""FAIL"">
</body>
</html>


tidy -q test.html > /dev/null
line 7 column 3 - Warning: <img> proprietary attribute ""loading""
line 8 column 3 - Warning: <img> proprietary attribute ""loading""
line 10 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 11 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 13 column 3 - Warning: <div> proprietary attribute ""loading""
line 14 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 15 column 3 - Warning: <img> proprietary attribute ""loading""
line 16 column 3 - Warning: <img> proprietary attribute ""loading""



./build/cmake/tidy -q test.html > /dev/null
line 14 column 3 - Warning: <iframe> attribute ""loading"" has invalid value ""what""
line 15 column 3 - Warning: <img> attribute ""loading"" has invalid value ""what""
line 16 column 3 - Warning: <img> attribute ""loading"" lacks value
line 13 column 3 - Warning: <div> proprietary attribute ""loading""",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,902,2020-10-25T10:25:08Z,2020-11-21T17:03:21Z,2020-11-22T18:34:55Z,MERGED,True,13,0,3,https://github.com/sidvishnoi,"Is. #879: add loading attribute for img, iframe",1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/902,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/902#issuecomment-725516495,"Fixes #879

Test input
<!DOCTYPE html>
<html lang=""en"">
<head>
  <title>Document</title>
</head>
<body>
  <img src=""foo"" loading=""lazy"" alt=""PASS"">
  <img src=""foo"" loading=""eager"" alt=""PASS"">
  
  <iframe src=""foo"" loading=""lazy"">PASS</iframe>
  <iframe src=""foo"" loading=""eager"">PASS</iframe>
  
  <div loading=""lazy"">FAIL</div>
  <iframe src=""foo"" loading=""what"">FAIL</iframe>
  <img src=""foo"" loading=""what"" alt=""FAIL"">
  <img src=""foo"" loading="""" alt=""FAIL"">
</body>
</html>


tidy -q test.html > /dev/null
line 7 column 3 - Warning: <img> proprietary attribute ""loading""
line 8 column 3 - Warning: <img> proprietary attribute ""loading""
line 10 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 11 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 13 column 3 - Warning: <div> proprietary attribute ""loading""
line 14 column 3 - Warning: <iframe> proprietary attribute ""loading""
line 15 column 3 - Warning: <img> proprietary attribute ""loading""
line 16 column 3 - Warning: <img> proprietary attribute ""loading""



./build/cmake/tidy -q test.html > /dev/null
line 14 column 3 - Warning: <iframe> attribute ""loading"" has invalid value ""what""
line 15 column 3 - Warning: <img> attribute ""loading"" has invalid value ""what""
line 16 column 3 - Warning: <img> attribute ""loading"" lacks value
line 13 column 3 - Warning: <div> proprietary attribute ""loading""","@sidvishnoi thank you for this PR...
Except for the fact that you inserted the TidyAttr_LOADING alphabetically, in tidyenum.h, it looks good...
I know the present docs says Please try to keep this enumeration in alphabetical order., but doing that would mean bumping the SOVERSION number for every change. See #851, and the many mentions of this in other comments here...
But no problem, this can be dealt with at the time of the merge, if I've got all the facts straight...
Again, thank you for the PR... will try to get to it soonest...",True,{'THUMBS_UP': ['https://github.com/sidvishnoi']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,907,2020-11-20T19:51:25Z,2020-11-22T17:02:01Z,2020-11-22T17:12:09Z,MERGED,True,241,2,5,https://github.com/cqcallaw,Add SVG paint attributes,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/907,https://github.com/cqcallaw,1,https://github.com/htacg/tidy-html5/pull/907,Fixes #903,Fixes #903,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,907,2020-11-20T19:51:25Z,2020-11-22T17:02:01Z,2020-11-22T17:12:09Z,MERGED,True,241,2,5,https://github.com/cqcallaw,Add SVG paint attributes,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/907,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/907#issuecomment-731609842,Fixes #903,@cqcallaw looks good... will get to it soonest... thanks...,True,{'HOORAY': ['https://github.com/cqcallaw']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,911,2020-11-20T20:26:44Z,2021-02-17T17:40:14Z,2021-02-17T17:40:14Z,CLOSED,False,1356,1337,69,https://github.com/cqcallaw,Trim trailing whitespace,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/911,https://github.com/cqcallaw,1,https://github.com/htacg/tidy-html5/pull/911,"No code changes here, just a quality-of-life edit per #903. I simply ran the following command:
find * -type f -exec sed -i 's/[ \t]*$//' ""{}"" \;","No code changes here, just a quality-of-life edit per #903. I simply ran the following command:
find * -type f -exec sed -i 's/[ \t]*$//' ""{}"" \;",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,911,2020-11-20T20:26:44Z,2021-02-17T17:40:14Z,2021-02-17T17:40:14Z,CLOSED,False,1356,1337,69,https://github.com/cqcallaw,Trim trailing whitespace,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/911,https://github.com/geoffmcl,2,https://github.com/htacg/tidy-html5/pull/911#issuecomment-733911418,"No code changes here, just a quality-of-life edit per #903. I simply ran the following command:
find * -type f -exec sed -i 's/[ \t]*$//' ""{}"" \;","@cqcallaw thank you for this PR... and the recent update to clear merge conflicts...
I am afraid I really can't fully explain why I hesitate on this...
It is something to do with my workflow... when chasing down a bug, I often do code diffs to previous, old, code, to explore, understand, get clues, etc, etc... Yes, I know diff has a -bB options to ignore spaces and blank line, but that does not feel the same... somehow I feel I might lose something, since as pointed out many of the trailing space do come from quite old code... perhaps not very rational...
Maybe we could split it up into two parts - one for the code, *.c|h, and one for the other docs, which I am not so concerned about... or something...
But I am 49:51, so not all against... it does nearly seem a good thing... I think!
Maybe, with some more time, I will come around... please bear with me... feedback welcome... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,911,2020-11-20T20:26:44Z,2021-02-17T17:40:14Z,2021-02-17T17:40:14Z,CLOSED,False,1356,1337,69,https://github.com/cqcallaw,Trim trailing whitespace,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/911,https://github.com/cqcallaw,3,https://github.com/htacg/tidy-html5/pull/911#issuecomment-736953943,"No code changes here, just a quality-of-life edit per #903. I simply ran the following command:
find * -type f -exec sed -i 's/[ \t]*$//' ""{}"" \;","Philosophically, I like keeping the source code tidy, since tidiness is the project's raison d'être, but I've seen enough code to respect a maintainer's intuition.
The whitespace does present a challenge to me as a contributor, as I have to toggle a setting in my editing environment (Visual Studio Code) when I switch projects; the per-project setting seems to be broken. Breaking your workflows probably does more harm to the project than breaking mine, though.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,911,2020-11-20T20:26:44Z,2021-02-17T17:40:14Z,2021-02-17T17:40:14Z,CLOSED,False,1356,1337,69,https://github.com/cqcallaw,Trim trailing whitespace,1,['Technical Discussion'],https://github.com/htacg/tidy-html5/pull/911,https://github.com/geoffmcl,4,https://github.com/htacg/tidy-html5/pull/911#issuecomment-780727528,"No code changes here, just a quality-of-life edit per #903. I simply ran the following command:
find * -type f -exec sed -i 's/[ \t]*$//' ""{}"" \;","@cqcallaw, sorry, but this PR gives me the heebie geebies ;=() It has some positive attributes, but...
But, in fact, for some reason, hinders me working on other parts of Tidy, maybe more important than the normally, invisible, do nothing, trailing space...
Asside from my workflow concerns mentioned, maybe there are cases where a trailing 2 spaces is significant as in *.md docs. Need to check for those...
But also really do not want to send the message that tidy main repo is 100% trailing space intolerant... And, not that it really matters, find quite a number of other FOSS repos likewise inclined...
Like historically, tidy is, with tabs in code... even has a tool tab2space... which I also never quite understood...
Of course, we also do not want to imply that anything goes... but that should be dealt with on a case by case basis...
Also reject the raison d'être argument. The tidy in tidy is about pretty printing HTML code, not 'C' code, and other text documents...
On the whole, still remain 49:51, so closing this all-in-one PR for now... sorry... and sorry if it breaks your editor workflow...
As suggested, if there are any particularly bad cases, then these shoud be dealt with separately...
Further comments and feedback welcome... maybe I am missing something... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,912,2020-11-21T22:09:04Z,2020-11-22T18:45:33Z,2020-11-22T18:51:40Z,MERGED,True,7,1,1,https://github.com/cqcallaw,Fix percentage validation in CheckLength,1,[],https://github.com/htacg/tidy-html5/pull/912,https://github.com/cqcallaw,1,https://github.com/htacg/tidy-html5/pull/912,Fixes #910,Fixes #910,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,914,2020-11-25T19:01:02Z,2020-11-30T15:24:13Z,2020-12-04T21:32:46Z,MERGED,True,441,30,2,https://github.com/cqcallaw,Support extended color names in HTML 5 validation,1,[],https://github.com/htacg/tidy-html5/pull/914,https://github.com/cqcallaw,1,https://github.com/htacg/tidy-html5/pull/914,Fixes #908,Fixes #908,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,915,2020-12-15T23:12:52Z,2020-12-15T23:13:04Z,2020-12-15T23:13:10Z,CLOSED,False,62,0,4,https://github.com/Taxxodium,chore: missing files,2,[],https://github.com/htacg/tidy-html5/pull/915,https://github.com/Taxxodium,1,https://github.com/htacg/tidy-html5/pull/915,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,926,2021-03-27T14:57:24Z,2021-04-14T16:02:10Z,2021-04-14T16:02:21Z,MERGED,True,13,7,1,https://github.com/geoffmcl,"Is. #681 - read-only files, and dirs",1,['Bug'],https://github.com/htacg/tidy-html5/pull/926,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/926,"Please test, and report/comment in issue #681... thanks...","Please test, and report/comment in issue #681... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,926,2021-03-27T14:57:24Z,2021-04-14T16:02:10Z,2021-04-14T16:02:21Z,MERGED,True,13,7,1,https://github.com/geoffmcl,"Is. #681 - read-only files, and dirs",1,['Bug'],https://github.com/htacg/tidy-html5/pull/926,https://github.com/jmadiot,2,https://github.com/htacg/tidy-html5/pull/926#issuecomment-809448083,"Please test, and report/comment in issue #681... thanks...","Hello, thank you for the fix!  This fixes the problem for me (linux). I detail here what I did for @geoffmcl to check that I correctly tested and maybe to make it easier for others to test:
mkdir /tmp/testtidy
cd /tmp/testtidy
git clone https://github.com/htacg/tidy-html5.git
cd tidy-html5/
git switch issue-681
cd build/cmake/
cmake ../.. -DCMAKE_BUILD_TYPE=Release
make
echo ""foo"" > foo.html
./tidy foo.html
# correct output
chmod -w foo.html
./tidy foo.html
# also correct output!
# I also check that the branch next had the problem:
git switch next
make
./tidy foo.html
# expectedly got the error of issue 681: Document: ""foo.html"" is not a file!
chmod +w foo.html
./tidy foo.html
# normal output again",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,927,2021-03-27T15:05:40Z,2021-06-30T13:29:59Z,2021-06-30T13:30:06Z,MERGED,True,91,1,7,https://github.com/geoffmcl,Issue #692 - too many titles,4,['Bug'],https://github.com/htacg/tidy-html5/pull/927,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/927,Please test and report/comment in issue #692 ... thanks...,Please test and report/comment in issue #692 ... thanks...,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,927,2021-03-27T15:05:40Z,2021-06-30T13:29:59Z,2021-06-30T13:30:06Z,MERGED,True,91,1,7,https://github.com/geoffmcl,Issue #692 - too many titles,4,['Bug'],https://github.com/htacg/tidy-html5/pull/927,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/927#issuecomment-828791677,Please test and report/comment in issue #692 ... thanks...,"I recommend this PR for merging.

Tested on macOS 11.4 and corrects the issue in #692.
I've added branch case_692 to our testing repository, which can merged if this PR is merged.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,927,2021-03-27T15:05:40Z,2021-06-30T13:29:59Z,2021-06-30T13:30:06Z,MERGED,True,91,1,7,https://github.com/geoffmcl,Issue #692 - too many titles,4,['Bug'],https://github.com/htacg/tidy-html5/pull/927,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/927#issuecomment-871405925,Please test and report/comment in issue #692 ... thanks...,"Based on successful multi-platform automated testing, I will merge this PR.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,928,2021-03-27T15:10:46Z,2021-06-30T14:21:59Z,2021-06-30T14:22:06Z,MERGED,True,122,2,8,https://github.com/geoffmcl,Is #729 - Show 'warnings' in all td cases,3,['Bug'],https://github.com/htacg/tidy-html5/pull/928,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/928,"Please test and report, comment, in issue #729","Please test and report, comment, in issue #729",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,928,2021-03-27T15:10:46Z,2021-06-30T14:21:59Z,2021-06-30T14:22:06Z,MERGED,True,122,2,8,https://github.com/geoffmcl,Is #729 - Show 'warnings' in all td cases,3,['Bug'],https://github.com/htacg/tidy-html5/pull/928,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/928#issuecomment-871449381,"Please test and report, comment, in issue #729","Based on successful testing, I will merge this PR.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,929,2021-03-27T15:26:19Z,2021-06-30T14:56:10Z,2021-06-30T14:56:11Z,CLOSED,False,20,5,2,https://github.com/geoffmcl,Is. #738 - textarea tag broken,4,['Bug'],https://github.com/htacg/tidy-html5/pull/929,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/929,"Please test this, and report, comment, ... in issue #738 ... thanks...","Please test this, and report, comment, ... in issue #738 ... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,929,2021-03-27T15:26:19Z,2021-06-30T14:56:10Z,2021-06-30T14:56:11Z,CLOSED,False,20,5,2,https://github.com/geoffmcl,Is. #738 - textarea tag broken,4,['Bug'],https://github.com/htacg/tidy-html5/pull/929,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/929#issuecomment-871477474,"Please test this, and report, comment, ... in issue #738 ... thanks...","As mentioned in the conversation in #738, this change currently breaks the HTML display output in at least one of the test case regressions. I'll close this for now, although the branch will remain for further development. Please feel free to re-open when this is addressed.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,930,2021-03-27T15:41:31Z,2021-06-30T15:21:19Z,2021-06-30T15:21:35Z,MERGED,True,70,7,12,https://github.com/geoffmcl,Is. #839 -  new message for 'blank' title,4,['Feature Request'],https://github.com/htacg/tidy-html5/pull/930,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/930,"WARNING - This merge needs at least 5 fixes, in the regression tests...
Please test, and report, comment, ... in issue #839 ... thanks...","WARNING - This merge needs at least 5 fixes, in the regression tests...
Please test, and report, comment, ... in issue #839 ... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,930,2021-03-27T15:41:31Z,2021-06-30T15:21:19Z,2021-06-30T15:21:35Z,MERGED,True,70,7,12,https://github.com/geoffmcl,Is. #839 -  new message for 'blank' title,4,['Feature Request'],https://github.com/htacg/tidy-html5/pull/930,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/930#issuecomment-871497493,"WARNING - This merge needs at least 5 fixes, in the regression tests...
Please test, and report, comment, ... in issue #839 ... thanks...",I will merge this based on successful automated regression testing.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,931,2021-03-27T15:49:43Z,,2021-06-30T16:35:36Z,OPEN,False,23,3,3,https://github.com/geoffmcl,"Issue #921 - warning for unknown config, and others...",5,['Feature Request'],https://github.com/htacg/tidy-html5/pull/931,https://github.com/geoffmcl,1,https://github.com/htacg/tidy-html5/pull/931,"Please test, and report, comment, feedback on Issue #921... thanks...","Please test, and report, comment, feedback on Issue #921... thanks...",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,932,2021-03-28T17:04:23Z,2021-04-15T16:21:00Z,2021-04-16T00:28:58Z,MERGED,True,1,1,1,https://github.com/arrmo,Change open tag to Boolean,1,['Bug'],https://github.com/htacg/tidy-html5/pull/932,https://github.com/arrmo,1,https://github.com/htacg/tidy-html5/pull/932,To address issue-925,To address issue-925,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,934,2021-03-31T13:32:23Z,,2021-07-01T05:35:20Z,OPEN,False,36,2,5,https://github.com/Lucas-C,Zero return status code when all errors & warnings have been muted - close #933,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/934,https://github.com/Lucas-C,1,https://github.com/htacg/tidy-html5/pull/934,cf. #933,cf. #933,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,934,2021-03-31T13:32:23Z,,2021-07-01T05:35:20Z,OPEN,False,36,2,5,https://github.com/Lucas-C,Zero return status code when all errors & warnings have been muted - close #933,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/934,https://github.com/Lucas-C,2,https://github.com/htacg/tidy-html5/pull/934#issuecomment-811080798,cf. #933,"Tests execution output:
testall.sh: Will process 240 tests from ../cases/testbase/_manifest.txt on 20210331154123
testall.sh: Tidy version in use...
HTML Tidy pour Cygwin version 5.7.45
Testbase is for HTML Tidy version 5.7.21.
========================================
Testing 426885
Testing 427633
Testing 427662
Testing 427664
Testing 427671
Testing 427672
Testing 427675
Testing 427676
Testing 427677
Testing 427810
Testing 427811
Testing 427813
Testing 427816
Testing 427818
Testing 427819
Testing 427820
Testing 427821
Testing 427822
Testing 427823
Testing 427825
Testing 427826
Testing 427827
Testing 427830
Testing 119a
Testing 119b
Testing 119c
Testing 119d
Testing 119e
Testing 119f
Testing 427833
Testing 427834
Testing 427835
Testing 427836
Testing 427837
Testing 427838
Testing 427839
Testing 427840
Testing 427841
Testing 427845
Testing 427846
Testing 431716
Testing 431721
Testing 431731
Testing 431736
Testing 431739
Testing 431874
Testing 431889
Testing 431898
Testing 431964
Testing 432677
Testing 433012
Testing 433021
Testing 433040
Testing 433359
Testing 433360
Testing 433604
Testing 433607
Testing 433656
Testing 433666
Testing 433672
Testing 434047
Testing 434100
Testing 434940
Testing 435903
Testing 435917
Testing 435919
Testing 435920
Testing 435922
Testing 435923
Testing 437468
Testing 438650
Testing 438658
Testing 438954
Testing 438956
Testing 441508
Testing 441568
Testing 443362
Testing 443576
Testing 443678
Testing 445074
Testing 445394
Testing 445557
Testing 449348
Testing 470663
Testing 473490
Testing 480406
Testing 480701
Testing 487204
Testing 487283
Testing 501669
Testing 503436
Testing 504206
Testing 505770
Testing 511679
Testing 511243
Testing 533233
Testing 540571
Testing 543262
Testing 545772
Testing 553468
Testing 566542
Testing 586555
Testing 586562
Testing 588061
Testing 590716
Testing 593705
Testing 609058
Testing 616744
Testing 620531
Testing 629885
Testing 634889
Testing 640473
Testing 640474
Testing 646946
Testing 647255
Testing 647900
Testing 649812
Testing 655338
Testing 656889
Testing 658230
Testing 660397
Testing 671087
Testing 676156
Testing 676205
Testing 678268
Testing 688746
Testing 695408
Testing 696799
Testing 706260
Testing 765852
Testing 795643a
Testing 795643b
Testing 836462a
Testing 836462b
Testing 836462c
Testing 837023
Testing 978947
Testing 996484
Testing 1002509
Testing 1003361
Testing 1004051
Testing 1004512
Testing 1014993
Testing 1015959
Testing 1027888
Testing 1050673
Testing 1052758
Testing 1053626
Testing 1055304
Testing 1055398
Testing 1056023
Testing 1056910
Testing 1062345
Testing 1062511
Testing 1062661
Testing 1063256
Testing 1067112
Testing 1068087
Testing 1069549
Testing 1069553
Testing 1072528
Testing 1078345
Testing 1079820
Testing 1086083
Testing 1090318
Testing 1098012
Testing 1107622
Testing 1117013
Testing 1115094
Testing 1145571
Testing 1145572
Testing 1168193
Testing 1183751
Testing 1198501
Testing 1207443
Testing 1210752
Testing 1231279
Testing 1235296
Testing 1241723
Testing 1263391
Testing 1266647
Testing 1282835
Testing 1286029
Testing 1286278
Testing 1316258
Testing 1316307a
Testing 1316307b
Testing 1326520
Testing 1331849
Testing 1333579
Testing 1359292
Testing 1398397
Testing 1407266
Testing 1408034
Testing 1410061a
Testing 1410061b
Testing 1410061c
Testing 1415137
Testing 1423252
Testing 1426419
Testing 1436578
Testing 1452744
Testing 1445570
Testing 1503897
Testing 1586158
Testing 1590220a
Testing 1590220b
Testing 1603538a
Testing 1603538b
Testing 1610888a
Testing 1610888b
Testing 1632470
Testing 1632218
Testing 1638062
Testing 1674502
Testing 1707836
Testing 1715153
Testing 1720953
Testing 1773932
Testing 1986717a
Testing 1986717b
Testing 1986717c
Testing 2046048
Testing 2085175
Testing 2359929
Testing 2705873a
Testing 2705873b
Testing 2709860
Testing 1642186b
Testing 427664-1
Testing 483
Testing 352
Testing 365
Testing 378a
Testing 378b
Testing 412
Testing 434
Testing 476a
Testing 476b
Testing 629
========================================
testall.sh: Done 240 tests...
run-tests.sh: Running 'diff -ua ../cases/testbase-expects ../cases/testbase-results'
======================================================
======================================================
run-tests.sh: Appear to have PASSED test 2",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,934,2021-03-31T13:32:23Z,,2021-07-01T05:35:20Z,OPEN,False,36,2,5,https://github.com/Lucas-C,Zero return status code when all errors & warnings have been muted - close #933,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/934,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/934#issuecomment-871454410,cf. #933,"Re-opened to invoke the automatic testing.
@Lucas-C, sorry for the backlog. Would you mind merging next into your pr, and then write a test case or two in the new regression_testing directory? You've already done more than most contributors but demonstrating the regression testing, but now the regression testing is even easier, automatic, and it's helpful to include test cases.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,934,2021-03-31T13:32:23Z,,2021-07-01T05:35:20Z,OPEN,False,36,2,5,https://github.com/Lucas-C,Zero return status code when all errors & warnings have been muted - close #933,1,['Feature Request'],https://github.com/htacg/tidy-html5/pull/934,https://github.com/Lucas-C,4,https://github.com/htacg/tidy-html5/pull/934#issuecomment-871935445,cf. #933,I rebased this PR on the next branch of this repo,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,941,2021-04-28T17:02:37Z,2021-05-21T12:25:59Z,2021-05-21T12:26:05Z,MERGED,True,17,0,2,https://github.com/balthisar,Support modern macOS security features,1,[],https://github.com/htacg/tidy-html5/pull/941,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/941,"macOS requires embedding plist files in order to enable modern security features such
as enabling the hardened runtime and notarizing executables and disk images containing
them. This change provides a plist file to be embedded, and modifies the linker flags
for macOS targets in order to include the plist in the binary. This is done to the
Mach O executable in a backwards-compatible way, and has been tested as far back as
macOS 10.12 High Sierra.
Note: expect to carry this forward to 'next' branch; however this is being applied
to current official release master version 5.6.0 so that release disk images can be
notarized.
The consequences of not adopting modern security features is that unsigned code simply won't run.
This is a PR against master; I've rebuilt the released version of the disk image to support modern security and multiple-architecture binaries.","macOS requires embedding plist files in order to enable modern security features such
as enabling the hardened runtime and notarizing executables and disk images containing
them. This change provides a plist file to be embedded, and modifies the linker flags
for macOS targets in order to include the plist in the binary. This is done to the
Mach O executable in a backwards-compatible way, and has been tested as far back as
macOS 10.12 High Sierra.
Note: expect to carry this forward to 'next' branch; however this is being applied
to current official release master version 5.6.0 so that release disk images can be
notarized.
The consequences of not adopting modern security features is that unsigned code simply won't run.
This is a PR against master; I've rebuilt the released version of the disk image to support modern security and multiple-architecture binaries.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,942,2021-04-28T18:51:42Z,2021-05-21T12:27:04Z,2021-05-21T12:27:07Z,MERGED,True,27,0,3,https://github.com/balthisar,Link macOS console application with required plist,2,[],https://github.com/htacg/tidy-html5/pull/942,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/942,"Add support for the required Info.plist to the Tidy console application, thus enabling
notarization support that's now required on macOS.
Unlike the similar pull request on the master branch, this one ensures that the proper
version is always used, via the same mechanism that CMakeLists uses to set the version.
Since there's now a 5.7.47 stable release, I'll build the macOS disk images with it.","Add support for the required Info.plist to the Tidy console application, thus enabling
notarization support that's now required on macOS.
Unlike the similar pull request on the master branch, this one ensures that the proper
version is always used, via the same mechanism that CMakeLists uses to set the version.
Since there's now a 5.7.47 stable release, I'll build the macOS disk images with it.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,943,2021-04-28T20:23:16Z,2021-05-21T12:39:26Z,2021-05-21T12:43:23Z,MERGED,True,7006,1,6,https://github.com/balthisar,Add German Language,2,[],https://github.com/htacg/tidy-html5/pull/943,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/943,"Courtesy of michael.uplawski@uplawski.eu, who did not wish to create a Github account to make this PR.
Header was supplied by Micheal; I generated the PO file and updated the source to include it.","Courtesy of michael.uplawski@uplawski.eu, who did not wish to create a Github account to make this PR.
Header was supplied by Micheal; I generated the PO file and updated the source to include it.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,949,2021-05-12T03:58:37Z,2021-06-30T17:40:57Z,2021-06-30T17:51:16Z,MERGED,True,6,0,3,https://github.com/drichardson,Add muted and playsinline video attributes for HTML5.,1,[],https://github.com/htacg/tidy-html5/pull/949,https://github.com/drichardson,1,https://github.com/htacg/tidy-html5/pull/949,"Fix for video tag issues in #938.
Tested with this html file:
<!DOCTYPE html>
<html>
        <head>
                <meta charset=""UTF-8"">
                <title>Video Muted Attribute Test</title>
        </head>

        <body>
                <video autoplay loop muted playsinline>
                        <source src=""video/Mine.mp4"" type=""video/mp4"">
                </video>
        </body>
</html>

Testing Done
Before changes, the output was:
debian ~/code/tidy-html5 (next)$ build/cmake/tidy -quiet -errors test.html
line 9 column 17 - Warning: <video> proprietary attribute ""muted""
line 9 column 17 - Warning: <video> proprietary attribute ""playsinline""
debian ~/code/tidy-html5 (next)$ echo $?
1

After changes, the output was:
debian ~/code/tidy-html5 (add-muted)$ build/cmake/tidy -quiet -errors test.html
debian ~/code/tidy-html5 (add-muted)$ echo $?
0","Fix for video tag issues in #938.
Tested with this html file:
<!DOCTYPE html>
<html>
        <head>
                <meta charset=""UTF-8"">
                <title>Video Muted Attribute Test</title>
        </head>

        <body>
                <video autoplay loop muted playsinline>
                        <source src=""video/Mine.mp4"" type=""video/mp4"">
                </video>
        </body>
</html>

Testing Done
Before changes, the output was:
debian ~/code/tidy-html5 (next)$ build/cmake/tidy -quiet -errors test.html
line 9 column 17 - Warning: <video> proprietary attribute ""muted""
line 9 column 17 - Warning: <video> proprietary attribute ""playsinline""
debian ~/code/tidy-html5 (next)$ echo $?
1

After changes, the output was:
debian ~/code/tidy-html5 (add-muted)$ build/cmake/tidy -quiet -errors test.html
debian ~/code/tidy-html5 (add-muted)$ echo $?
0",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,949,2021-05-12T03:58:37Z,2021-06-30T17:40:57Z,2021-06-30T17:51:16Z,MERGED,True,6,0,3,https://github.com/drichardson,Add muted and playsinline video attributes for HTML5.,1,[],https://github.com/htacg/tidy-html5/pull/949,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/949#issuecomment-871585148,"Fix for video tag issues in #938.
Tested with this html file:
<!DOCTYPE html>
<html>
        <head>
                <meta charset=""UTF-8"">
                <title>Video Muted Attribute Test</title>
        </head>

        <body>
                <video autoplay loop muted playsinline>
                        <source src=""video/Mine.mp4"" type=""video/mp4"">
                </video>
        </body>
</html>

Testing Done
Before changes, the output was:
debian ~/code/tidy-html5 (next)$ build/cmake/tidy -quiet -errors test.html
line 9 column 17 - Warning: <video> proprietary attribute ""muted""
line 9 column 17 - Warning: <video> proprietary attribute ""playsinline""
debian ~/code/tidy-html5 (next)$ echo $?
1

After changes, the output was:
debian ~/code/tidy-html5 (add-muted)$ build/cmake/tidy -quiet -errors test.html
debian ~/code/tidy-html5 (add-muted)$ echo $?
0",Closed and Reopening to force automated testing.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,951,2021-05-21T19:23:59Z,2021-06-30T12:54:23Z,2021-06-30T12:54:23Z,CLOSED,False,39,1,4,https://github.com/balthisar,Issue 692 (test PR into non-canonical branch),2,[],https://github.com/htacg/tidy-html5/pull/951,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/951,This is just an integrated-testing PR test. Please disregard.,This is just an integrated-testing PR test. Please disregard.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,951,2021-05-21T19:23:59Z,2021-06-30T12:54:23Z,2021-06-30T12:54:23Z,CLOSED,False,39,1,4,https://github.com/balthisar,Issue 692 (test PR into non-canonical branch),2,[],https://github.com/htacg/tidy-html5/pull/951,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/951#issuecomment-846200723,This is just an integrated-testing PR test. Please disregard.,"So, this PR builds on three OS and four development environments. I need to dig into the test repository to see if any test cases exist, and then add them to this PR to be a complete demonstration, but I think this has a very good potential to reduce the time it takes us to merge PRs.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,951,2021-05-21T19:23:59Z,2021-06-30T12:54:23Z,2021-06-30T12:54:23Z,CLOSED,False,39,1,4,https://github.com/balthisar,Issue 692 (test PR into non-canonical branch),2,[],https://github.com/htacg/tidy-html5/pull/951,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/951#issuecomment-871378864,This is just an integrated-testing PR test. Please disregard.,"Closing, as this was a successful test.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,953,2021-06-13T12:25:46Z,2021-06-30T18:09:59Z,2021-06-30T18:10:00Z,MERGED,True,1,1,1,https://github.com/ihsinme,simple fix for the range of the condition.,1,[],https://github.com/htacg/tidy-html5/pull/953,https://github.com/ihsinme,1,https://github.com/htacg/tidy-html5/pull/953,simple fix for the range of the condition.,simple fix for the range of the condition.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,953,2021-06-13T12:25:46Z,2021-06-30T18:09:59Z,2021-06-30T18:10:00Z,MERGED,True,1,1,1,https://github.com/ihsinme,simple fix for the range of the condition.,1,[],https://github.com/htacg/tidy-html5/pull/953,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/953#issuecomment-871608327,simple fix for the range of the condition.,"@ihsinme, is there a bug associated with this? Can you provide a failing testcase for current behavior, and a passing testcase with your changes?
I'm not a character encoding expert, and your change is to some very old, presumed stable code, so I'd really like you to coach me on what this is supposed to do.
Thanks.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,953,2021-06-13T12:25:46Z,2021-06-30T18:09:59Z,2021-06-30T18:10:00Z,MERGED,True,1,1,1,https://github.com/ihsinme,simple fix for the range of the condition.,1,[],https://github.com/htacg/tidy-html5/pull/953,https://github.com/ihsinme,3,https://github.com/htacg/tidy-html5/pull/953#issuecomment-871618100,simple fix for the range of the condition.,"good day.
in this code, everything is just if (159 <c && c <191) does not restrict rigidly. in fact, for c equal to 160,161,162,163, the switch has no handlers.
and to optimize the code to correct the condition correctly.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,953,2021-06-13T12:25:46Z,2021-06-30T18:09:59Z,2021-06-30T18:10:00Z,MERGED,True,1,1,1,https://github.com/ihsinme,simple fix for the range of the condition.,1,[],https://github.com/htacg/tidy-html5/pull/953,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/953#issuecomment-871621407,simple fix for the range of the condition.,"@ihsinme, thanks, I see. I should have looked a bit more closely! I'll merge this then bump the version.",True,{'THUMBS_UP': ['https://github.com/ihsinme']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,957,2021-06-30T12:50:37Z,2021-06-30T12:55:35Z,2021-06-30T12:55:41Z,MERGED,True,27036,4,1409,https://github.com/balthisar,Automated Testing,1,['Infrastructure'],https://github.com/htacg/tidy-html5/pull/957,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/957,"Move the testing repository back into the Tidy codebase.
Automate testing of any PR's.
Updated README's explaining new processes.

As maintainer support is currently limited, we need some mechanism to automatically run regression tests against PR's that have been submitted. This initial automated testing attempt provides the following:

Testing on macOS, Windows native linkage, Windows min-gw, and Linux.
Enforces the updating and discussion of new/modified test cases by moving them back into the main repository. Standard practice seems to support in-source testing, so this makes sense on its own.

I plan to merge this immediately, but wanted to open a PR for the sake of the paper trail.","Move the testing repository back into the Tidy codebase.
Automate testing of any PR's.
Updated README's explaining new processes.

As maintainer support is currently limited, we need some mechanism to automatically run regression tests against PR's that have been submitted. This initial automated testing attempt provides the following:

Testing on macOS, Windows native linkage, Windows min-gw, and Linux.
Enforces the updating and discussion of new/modified test cases by moving them back into the main repository. Standard practice seems to support in-source testing, so this makes sense on its own.

I plan to merge this immediately, but wanted to open a PR for the sake of the paper trail.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,959,2021-07-01T20:10:17Z,2021-07-01T20:13:17Z,2021-07-01T20:13:22Z,MERGED,True,40,12,4,https://github.com/balthisar,Fix issues with user-specified settings changing,1,[],https://github.com/htacg/tidy-html5/pull/959,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/959,"User-specified settings were being fiddled with by tidy internally. User
settings set by the user should always be able to be read back by the
user, but AdjustConfig() would change them. This change contributes
toward fixing the situation by using AdjustConfig() at the only point
that it's needed, as well by NOT automatically reverting to the snapshot
after outputting a buffer (which should be stateless, but caused PHP to
break because it tried to save buffer more than once, so subsequent calls
would use non-fiddle settings.).","User-specified settings were being fiddled with by tidy internally. User
settings set by the user should always be able to be read back by the
user, but AdjustConfig() would change them. This change contributes
toward fixing the situation by using AdjustConfig() at the only point
that it's needed, as well by NOT automatically reverting to the snapshot
after outputting a buffer (which should be stateless, but caused PHP to
break because it tried to save buffer more than once, so subsequent calls
would use non-fiddle settings.).",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,961,2021-07-02T23:47:55Z,2021-07-10T17:52:58Z,2021-07-10T17:52:58Z,MERGED,True,2,0,1,https://github.com/vitaly-zdanevich,README.md: add Wikidata link,1,[],https://github.com/htacg/tidy-html5/pull/961,https://github.com/vitaly-zdanevich,1,https://github.com/htacg/tidy-html5/pull/961,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,963,2021-07-09T03:48:32Z,,2021-07-09T11:29:28Z,OPEN,False,72,7,3,https://github.com/gbebgdee,Dripping,1,[],https://github.com/htacg/tidy-html5/pull/963,https://github.com/gbebgdee,1,https://github.com/htacg/tidy-html5/pull/963,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,963,2021-07-09T03:48:32Z,,2021-07-09T11:29:28Z,OPEN,False,72,7,3,https://github.com/gbebgdee,Dripping,1,[],https://github.com/htacg/tidy-html5/pull/963,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/963#issuecomment-877119441,,"I like it (see #519), but can you clean up the commit a little bit? We shouldn't leave the console application with the callback code activated, for example, as well as the other commented out code.
More importantly, are you certain that the generic approach works for EVERY existing string? A quick scan doesn't look like there would be any issues. One concern, though, is if you take a look at e.g., TC_TXT_HELP_3,  by swallowing the newlines, you're also swallowing the vertical spacing. Maybe it's not a concern.
I'm looking at this quickly, but if a string ends with two newlines, are you going to overrun the string that you're copying?
I wonder if it's not time to finally just remove the newlines from the source, and perform wrapping in the console application. This has been done and rejected before.
Let me know your thoughts.
Whatever the case, I may defer this a couple of weeks in order to issue a stable 5.8 release with strings as they are, and make this the first commit on 5.9.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,964,2021-07-10T00:01:42Z,2021-07-10T00:02:33Z,2021-07-10T15:21:05Z,CLOSED,False,544,526,26,https://github.com/balthisar,Issue 743,3,[],https://github.com/htacg/tidy-html5/pull/964,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/964,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,965,2021-07-10T15:14:35Z,2021-07-10T15:19:25Z,2021-07-10T15:20:38Z,MERGED,True,545,528,26,https://github.com/balthisar,Fixed merge conflict; fixed non-build issue on macOS. RC for testing.,1,[],https://github.com/htacg/tidy-html5/pull/965,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/965,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,965,2021-07-10T15:14:35Z,2021-07-10T15:19:25Z,2021-07-10T15:20:38Z,MERGED,True,545,528,26,https://github.com/balthisar,Fixed merge conflict; fixed non-build issue on macOS. RC for testing.,1,[],https://github.com/htacg/tidy-html5/pull/965,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/965#issuecomment-877654068,,"This is an updated version of issue-743 branch, with a slight fix to build on macOS, and fixes a merge conflict resulting from another improvement in the base repo. It passes all regression tests, but more importantly, it passes all of the API tests that I have written in Swift in another repository. At some point I may make those tests public.
Thanks, @geoffmcl for all the dirty work on this one.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,966,2021-07-10T17:27:48Z,2021-07-10T17:29:34Z,2021-07-10T17:32:35Z,MERGED,True,18,1,1,https://github.com/balthisar,Fixes #743.,1,[],https://github.com/htacg/tidy-html5/pull/966,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/966,"Only generates SOVERSION on stable (even minor version) releases.


Guaranteed API/ABI stability for same SOVERSION from this point on.","Only generates SOVERSION on stable (even minor version) releases.


Guaranteed API/ABI stability for same SOVERSION from this point on.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,970,2021-07-14T15:22:34Z,2021-07-14T15:31:06Z,2021-07-14T15:31:10Z,MERGED,True,95,0,1,https://github.com/balthisar,Create api_test.yml,1,[],https://github.com/htacg/tidy-html5/pull/970,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/970,Perform LibTidy API testing upon PR's or pushes.,Perform LibTidy API testing upon PR's or pushes.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,970,2021-07-14T15:22:34Z,2021-07-14T15:31:06Z,2021-07-14T15:31:10Z,MERGED,True,95,0,1,https://github.com/balthisar,Create api_test.yml,1,[],https://github.com/htacg/tidy-html5/pull/970,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/970#issuecomment-879992451,Perform LibTidy API testing upon PR's or pushes.,"Based on passing tests, I'm going to merge this. As there's no binary impact, I won't bump the version.
Github Actions have been a great thing. Previous integrated build solutions were previously rejected because it meant the complexity of managing organizations across multiple suppliers, and this just works. Automated testing will help us release Tidy much more quickly in the future!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,971,2021-07-14T18:38:43Z,2021-07-14T19:10:09Z,2021-07-14T19:10:13Z,MERGED,True,1,1,1,https://github.com/balthisar,Don't pull test from personal repo.,1,[],https://github.com/htacg/tidy-html5/pull/971,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/971,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,972,2021-07-16T21:04:25Z,2021-07-16T21:11:10Z,2021-07-16T21:11:10Z,MERGED,True,191,0,1,https://github.com/balthisar,Build Files When Releasing,1,[],https://github.com/htacg/tidy-html5/pull/972,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/972,"Whelp, it can finally happen. This PR builds releases automatically when the release is published. Maybe we old C programmers are behind the times, but this is majorly cool.
Some caveats:

We only build on systems for which Github has runners (64 bit Linux, Windows, and macOS).
We're not building a million iterations of Windows. You get MSVC. It shouldn't matter; you don't get your choice of NotePad++ compiled with 20 different toolchains.
We're not actually testing the builds. I've tested that things work initially, but if the build system starts making bad builds, someone needs to let us know.
Windows and macOS installers are not signed. Simpler users will likely be confused.
I (@balthisar) am an Apple developer, so I will manually build developer signed and Apple-notarized installers in addition to the automatic ones, but I need someone else to do this on Windows if you want signed binaries.","Whelp, it can finally happen. This PR builds releases automatically when the release is published. Maybe we old C programmers are behind the times, but this is majorly cool.
Some caveats:

We only build on systems for which Github has runners (64 bit Linux, Windows, and macOS).
We're not building a million iterations of Windows. You get MSVC. It shouldn't matter; you don't get your choice of NotePad++ compiled with 20 different toolchains.
We're not actually testing the builds. I've tested that things work initially, but if the build system starts making bad builds, someone needs to let us know.
Windows and macOS installers are not signed. Simpler users will likely be confused.
I (@balthisar) am an Apple developer, so I will manually build developer signed and Apple-notarized installers in addition to the automatic ones, but I need someone else to do this on Windows if you want signed binaries.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,976,2021-07-21T19:51:35Z,2021-07-21T19:59:16Z,2021-07-21T19:59:23Z,MERGED,True,72,72,37,https://github.com/balthisar,"Spelling fixes, thanks to @jschleus.",1,[],https://github.com/htacg/tidy-html5/pull/976,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/976,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,976,2021-07-21T19:51:35Z,2021-07-21T19:59:16Z,2021-07-21T19:59:23Z,MERGED,True,72,72,37,https://github.com/balthisar,"Spelling fixes, thanks to @jschleus.",1,[],https://github.com/htacg/tidy-html5/pull/976,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/976#issuecomment-884459411,,"As there is no public-facing implication, I will not bump the version.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,977,2021-07-21T20:58:21Z,2021-07-21T21:22:15Z,2021-07-21T21:22:19Z,CLOSED,False,1537,1381,313,https://github.com/balthisar,Updated links with working https versions from http.,3,[],https://github.com/htacg/tidy-html5/pull/977,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/977,"Removed rotten links.
Updated links that have since resolved to new addresses.
Generated all new po's and pot from existing headers.","Removed rotten links.
Updated links that have since resolved to new addresses.
Generated all new po's and pot from existing headers.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,978,2021-07-21T21:22:29Z,2021-07-21T21:29:39Z,2021-07-21T21:29:43Z,MERGED,True,1537,1381,313,https://github.com/balthisar,HTTPS Migration,1,[],https://github.com/htacg/tidy-html5/pull/978,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/978,"Updated links with working https versions from http.
Removed rotten links.
Updated links that have since resolved to new addresses.
Generated all new po's and pot from existing headers.
Updated the regression tests to account for the new https:// URLS, and the
changed reference to specification.","Updated links with working https versions from http.
Removed rotten links.
Updated links that have since resolved to new addresses.
Generated all new po's and pot from existing headers.
Updated the regression tests to account for the new https:// URLS, and the
changed reference to specification.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,980,2021-07-27T12:57:19Z,2021-07-28T22:20:39Z,2021-07-29T00:05:15Z,MERGED,True,3,5,1,https://github.com/SpaceIm,CMake: robust installation of pdb files,1,[],https://github.com/htacg/tidy-html5/pull/980,https://github.com/SpaceIm,1,https://github.com/htacg/tidy-html5/pull/980,fixes #979,fixes #979,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,980,2021-07-27T12:57:19Z,2021-07-28T22:20:39Z,2021-07-29T00:05:15Z,MERGED,True,3,5,1,https://github.com/SpaceIm,CMake: robust installation of pdb files,1,[],https://github.com/htacg/tidy-html5/pull/980,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/980#issuecomment-888655695,fixes #979,"I'm going to open and then close this to trigger testing, as the script didn't capture this.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,980,2021-07-27T12:57:19Z,2021-07-28T22:20:39Z,2021-07-29T00:05:15Z,MERGED,True,3,5,1,https://github.com/SpaceIm,CMake: robust installation of pdb files,1,[],https://github.com/htacg/tidy-html5/pull/980,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/980#issuecomment-888658715,fixes #979,"Well, it doesn't break our automated build systems, and I'm not a Windows user, and it doesn't look nefarious, so, great! Thanks for making things better!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,981,2021-07-28T23:53:36Z,2021-07-29T10:22:48Z,2021-07-29T10:22:57Z,MERGED,True,3873,1684,9,https://github.com/balthisar,Documentation and Recursion,1,[],https://github.com/htacg/tidy-html5/pull/981,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/981,"Increase documentation.
Reduce recursion.
Merging this now as a somewhat ""intrusive"" change, so that subsequent changes can be smaller and more informative.","Increase documentation.
Reduce recursion.
Merging this now as a somewhat ""intrusive"" change, so that subsequent changes can be smaller and more informative.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,982,2021-07-30T20:41:18Z,2021-07-30T20:48:18Z,2021-07-30T20:48:22Z,MERGED,True,86,7,9,https://github.com/balthisar,"Fixes #719. Pass the string representation of the parameter name, and…",1,[],https://github.com/htacg/tidy-html5/pull/982,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/982,… post process before output. Adds strrep() service to support.,… post process before output. Adds strrep() service to support.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,983,2021-07-30T21:18:14Z,2021-07-30T21:23:17Z,2021-07-30T21:23:42Z,MERGED,True,43,11,3,https://github.com/balthisar,Remove recursion,2,[],https://github.com/htacg/tidy-html5/pull/983,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/983,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,984,2021-07-31T12:26:59Z,2021-07-31T12:32:12Z,2021-07-31T12:32:15Z,MERGED,True,388,6,6,https://github.com/balthisar,Fixes #946,1,[],https://github.com/htacg/tidy-html5/pull/984,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/984,"by refactoring the recursion into a loop with a heap-based stack.
Bump version.","by refactoring the recursion into a loop with a heap-based stack.
Bump version.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,986,2021-08-15T00:44:13Z,2021-08-15T00:52:23Z,2021-08-15T00:52:28Z,MERGED,True,4090,4236,23,https://github.com/balthisar,Recurse squash,2,[],https://github.com/htacg/tidy-html5/pull/986,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/986,Don't recurse.,Don't recurse.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,987,2021-08-17T11:14:01Z,2021-08-17T11:25:49Z,2021-08-17T11:25:49Z,CLOSED,False,637,320,19,https://github.com/balthisar,The XML Parser and XML Pretty Printer are now non-recursive.,2,[],https://github.com/htacg/tidy-html5/pull/987,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/987,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,988,2021-08-17T11:26:20Z,2021-08-17T11:32:07Z,2021-08-17T11:32:10Z,MERGED,True,637,320,19,https://github.com/balthisar,The XML Parser and XML Pretty Printer are now non-recursive.,1,[],https://github.com/htacg/tidy-html5/pull/988,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/988,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,989,2021-08-17T15:39:56Z,2021-08-17T15:52:07Z,2021-08-17T15:52:11Z,MERGED,True,217,4,10,https://github.com/balthisar,Fixes #464. Test cases added.,1,[],https://github.com/htacg/tidy-html5/pull/989,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/989,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,990,2021-08-17T18:53:55Z,2021-08-17T19:02:43Z,2021-08-17T19:02:46Z,MERGED,True,202,1,14,https://github.com/balthisar,Issue 611,2,[],https://github.com/htacg/tidy-html5/pull/990,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/990,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,992,2021-08-19T20:16:19Z,2021-08-19T20:42:05Z,2021-08-19T20:42:05Z,CLOSED,False,950,680,7,https://github.com/balthisar,Primarily documentation of the pprint.c/h,1,[],https://github.com/htacg/tidy-html5/pull/992,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/992,with some file organization and function cleanup.,with some file organization and function cleanup.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,993,2021-08-19T22:14:40Z,2021-08-19T22:19:36Z,2021-08-19T22:19:38Z,MERGED,True,955,684,8,https://github.com/balthisar,Pprinter dox,2,[],https://github.com/htacg/tidy-html5/pull/993,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/993,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,994,2021-08-21T19:30:46Z,2021-08-21T19:36:05Z,2021-08-23T15:12:31Z,CLOSED,False,65,21,4,https://github.com/balthisar,Ignore,1,[],https://github.com/htacg/tidy-html5/pull/994,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/994,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,995,2021-08-23T15:03:12Z,2021-08-23T15:11:09Z,2021-08-23T15:11:13Z,MERGED,True,319,212,2,https://github.com/balthisar,Refactored debug output.,1,[],https://github.com/htacg/tidy-html5/pull/995,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/995,,,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,998,2021-08-26T20:03:15Z,2021-08-26T21:33:14Z,2021-08-26T21:33:18Z,MERGED,True,102,1,6,https://github.com/balthisar,Fixes #523.,1,[],https://github.com/htacg/tidy-html5/pull/998,https://github.com/balthisar,1,https://github.com/htacg/tidy-html5/pull/998,"Added test case to test flexibility.
Updated old test case 443678, which is better with this fix.
This fixes #523 and tries to be as general as possible. Right now the fix is
only applied if the prev or next tag is a body level div, but perhaps should
be applied for anything that's acting as block level element. In any case,
the specific bug is killed.","Added test case to test flexibility.
Updated old test case 443678, which is better with this fix.
This fixes #523 and tries to be as general as possible. Right now the fix is
only applied if the prev or next tag is a body level div, but perhaps should
be applied for anything that's acting as block level element. In any case,
the specific bug is killed.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1008,2021-10-27T19:20:05Z,,2022-02-02T01:26:01Z,OPEN,False,52,5,8,https://github.com/alpire,OSS-Fuzz Fixes,4,[],https://github.com/htacg/tidy-html5/pull/1008,https://github.com/alpire,1,https://github.com/htacg/tidy-html5/pull/1008,"This MR fixes a number of issues reported by OSS-Fuzz.
Infinite loop in ParsePre
The loop was introduced 91f29ea when switching to a non-recursive algorithm. InlineDup should not be called when ParsePre restarts. This issue has been preventing OSS-Fuzz builds for a few months, which means recent code changes haven't been fuzzed yet.
OSS-Fuzz Issue
Fix initialization of stack buffer in strrep
strlen(buf) is not guaranteed to return the size of the buffer, as it might contain some null bytes in the middle, so this PR switches to sizeof instead. Fixes #1001. This wasn't reported by OSS-Fuzz due to the build failure above, but it triggers quickly when running the fuzzer locally.
Fix out-of-bounds write in NormalizeSpaces
NormalizeSpaces decodes and re-encodes UTF-8 characters while looking to replace non-breaking spaces with regular spaces. When the UTF-8 decoding hits an error, a replacement character (0xFFFD) is returned and re-encoded as a 3-byte UTF-8 character. In some cases, this increases the size of strings, leading to writing past the end of the allocated buffer.
Note that this changes the behavior of the function in the case of invalid UTF-8 strings. This is my first time contributing to the project, so it was difficult to determine if the behavior change made sense even though the tests are passing. I'd be happy to try another fix if you had another solution in mind.
OSS-Fuzz Issue","This MR fixes a number of issues reported by OSS-Fuzz.
Infinite loop in ParsePre
The loop was introduced 91f29ea when switching to a non-recursive algorithm. InlineDup should not be called when ParsePre restarts. This issue has been preventing OSS-Fuzz builds for a few months, which means recent code changes haven't been fuzzed yet.
OSS-Fuzz Issue
Fix initialization of stack buffer in strrep
strlen(buf) is not guaranteed to return the size of the buffer, as it might contain some null bytes in the middle, so this PR switches to sizeof instead. Fixes #1001. This wasn't reported by OSS-Fuzz due to the build failure above, but it triggers quickly when running the fuzzer locally.
Fix out-of-bounds write in NormalizeSpaces
NormalizeSpaces decodes and re-encodes UTF-8 characters while looking to replace non-breaking spaces with regular spaces. When the UTF-8 decoding hits an error, a replacement character (0xFFFD) is returned and re-encoded as a 3-byte UTF-8 character. In some cases, this increases the size of strings, leading to writing past the end of the allocated buffer.
Note that this changes the behavior of the function in the case of invalid UTF-8 strings. This is my first time contributing to the project, so it was difficult to determine if the behavior change made sense even though the tests are passing. I'd be happy to try another fix if you had another solution in mind.
OSS-Fuzz Issue",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1008,2021-10-27T19:20:05Z,,2022-02-02T01:26:01Z,OPEN,False,52,5,8,https://github.com/alpire,OSS-Fuzz Fixes,4,[],https://github.com/htacg/tidy-html5/pull/1008,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/1008#issuecomment-1021208699,"This MR fixes a number of issues reported by OSS-Fuzz.
Infinite loop in ParsePre
The loop was introduced 91f29ea when switching to a non-recursive algorithm. InlineDup should not be called when ParsePre restarts. This issue has been preventing OSS-Fuzz builds for a few months, which means recent code changes haven't been fuzzed yet.
OSS-Fuzz Issue
Fix initialization of stack buffer in strrep
strlen(buf) is not guaranteed to return the size of the buffer, as it might contain some null bytes in the middle, so this PR switches to sizeof instead. Fixes #1001. This wasn't reported by OSS-Fuzz due to the build failure above, but it triggers quickly when running the fuzzer locally.
Fix out-of-bounds write in NormalizeSpaces
NormalizeSpaces decodes and re-encodes UTF-8 characters while looking to replace non-breaking spaces with regular spaces. When the UTF-8 decoding hits an error, a replacement character (0xFFFD) is returned and re-encoded as a 3-byte UTF-8 character. In some cases, this increases the size of strings, leading to writing past the end of the allocated buffer.
Note that this changes the behavior of the function in the case of invalid UTF-8 strings. This is my first time contributing to the project, so it was difficult to determine if the behavior change made sense even though the tests are passing. I'd be happy to try another fix if you had another solution in mind.
OSS-Fuzz Issue","Closing, then re-opening. Hopefully this triggers the CI, which should have run.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1008,2021-10-27T19:20:05Z,,2022-02-02T01:26:01Z,OPEN,False,52,5,8,https://github.com/alpire,OSS-Fuzz Fixes,4,[],https://github.com/htacg/tidy-html5/pull/1008,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/1008#issuecomment-1021217550,"This MR fixes a number of issues reported by OSS-Fuzz.
Infinite loop in ParsePre
The loop was introduced 91f29ea when switching to a non-recursive algorithm. InlineDup should not be called when ParsePre restarts. This issue has been preventing OSS-Fuzz builds for a few months, which means recent code changes haven't been fuzzed yet.
OSS-Fuzz Issue
Fix initialization of stack buffer in strrep
strlen(buf) is not guaranteed to return the size of the buffer, as it might contain some null bytes in the middle, so this PR switches to sizeof instead. Fixes #1001. This wasn't reported by OSS-Fuzz due to the build failure above, but it triggers quickly when running the fuzzer locally.
Fix out-of-bounds write in NormalizeSpaces
NormalizeSpaces decodes and re-encodes UTF-8 characters while looking to replace non-breaking spaces with regular spaces. When the UTF-8 decoding hits an error, a replacement character (0xFFFD) is returned and re-encoded as a 3-byte UTF-8 character. In some cases, this increases the size of strings, leading to writing past the end of the allocated buffer.
Note that this changes the behavior of the function in the case of invalid UTF-8 strings. This is my first time contributing to the project, so it was difficult to determine if the behavior change made sense even though the tests are passing. I'd be happy to try another fix if you had another solution in mind.
OSS-Fuzz Issue","@alpire, thanks for the PR, and sorry for taking so long to get to it. Things are a bit behind since @geoffmcl has been absent.
I'm especially sorry that the integration testing didn't run automatically when you posted the PR; you wouldn't have wasted time waiting for me to force it to run manually. As you can see, though, there seem to be regression test failures on two out of the three Windows builds. Given that Cygwin passed and the other two environments are Unix-like, too, it's probably a Windows-specific bug.
I'd be happy to merge this PR if you can correct the issue. At some point, I may have time to work on it myself, but as you can see, there's a HUGE backlog.
Thanks!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1008,2021-10-27T19:20:05Z,,2022-02-02T01:26:01Z,OPEN,False,52,5,8,https://github.com/alpire,OSS-Fuzz Fixes,4,[],https://github.com/htacg/tidy-html5/pull/1008,https://github.com/alpire,4,https://github.com/htacg/tidy-html5/pull/1008#issuecomment-1027488077,"This MR fixes a number of issues reported by OSS-Fuzz.
Infinite loop in ParsePre
The loop was introduced 91f29ea when switching to a non-recursive algorithm. InlineDup should not be called when ParsePre restarts. This issue has been preventing OSS-Fuzz builds for a few months, which means recent code changes haven't been fuzzed yet.
OSS-Fuzz Issue
Fix initialization of stack buffer in strrep
strlen(buf) is not guaranteed to return the size of the buffer, as it might contain some null bytes in the middle, so this PR switches to sizeof instead. Fixes #1001. This wasn't reported by OSS-Fuzz due to the build failure above, but it triggers quickly when running the fuzzer locally.
Fix out-of-bounds write in NormalizeSpaces
NormalizeSpaces decodes and re-encodes UTF-8 characters while looking to replace non-breaking spaces with regular spaces. When the UTF-8 decoding hits an error, a replacement character (0xFFFD) is returned and re-encoded as a 3-byte UTF-8 character. In some cases, this increases the size of strings, leading to writing past the end of the allocated buffer.
Note that this changes the behavior of the function in the case of invalid UTF-8 strings. This is my first time contributing to the project, so it was difficult to determine if the behavior change made sense even though the tests are passing. I'd be happy to try another fix if you had another solution in mind.
OSS-Fuzz Issue","@balthisar Thanks for taking a look at the PR. The failing test was the one I just added, but the failure was (surprisingly) unrelated to the PR changes. The bug was in the windows mapped IO EOF handling. A fix is available in 5f3eb66, which hopefully won't break other tests on windows.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1011,2021-11-19T09:53:28Z,2022-01-25T14:17:32Z,2022-01-28T09:43:10Z,MERGED,True,5,2,1,https://github.com/catenacyber,PPrintXMLTree: avoids infinite loop on root node with no content,1,[],https://github.com/htacg/tidy-html5/pull/1011,https://github.com/catenacyber,1,https://github.com/htacg/tidy-html5/pull/1011,"This should fix oss-fuzz build failure
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36721
Because of this infinite loop, the target tidy_xml_fuzzer times out on an empty input and thus oss-fuzz considers the build as broken","This should fix oss-fuzz build failure
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36721
Because of this infinite loop, the target tidy_xml_fuzzer times out on an empty input and thus oss-fuzz considers the build as broken",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1011,2021-11-19T09:53:28Z,2022-01-25T14:17:32Z,2022-01-28T09:43:10Z,MERGED,True,5,2,1,https://github.com/catenacyber,PPrintXMLTree: avoids infinite loop on root node with no content,1,[],https://github.com/htacg/tidy-html5/pull/1011,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/1011#issuecomment-1021218304,"This should fix oss-fuzz build failure
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36721
Because of this infinite loop, the target tidy_xml_fuzzer times out on an empty input and thus oss-fuzz considers the build as broken","Closing then reopening. Sorry, my CI doesn't seem to be working correctly unless I open the PR myself for some reason.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1011,2021-11-19T09:53:28Z,2022-01-25T14:17:32Z,2022-01-28T09:43:10Z,MERGED,True,5,2,1,https://github.com/catenacyber,PPrintXMLTree: avoids infinite loop on root node with no content,1,[],https://github.com/htacg/tidy-html5/pull/1011,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/1011#issuecomment-1021218410,"This should fix oss-fuzz build failure
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36721
Because of this infinite loop, the target tidy_xml_fuzzer times out on an empty input and thus oss-fuzz considers the build as broken",And open again.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1011,2021-11-19T09:53:28Z,2022-01-25T14:17:32Z,2022-01-28T09:43:10Z,MERGED,True,5,2,1,https://github.com/catenacyber,PPrintXMLTree: avoids infinite loop on root node with no content,1,[],https://github.com/htacg/tidy-html5/pull/1011,https://github.com/balthisar,4,https://github.com/htacg/tidy-html5/pull/1011#issuecomment-1021227104,"This should fix oss-fuzz build failure
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36721
Because of this infinite loop, the target tidy_xml_fuzzer times out on an empty input and thus oss-fuzz considers the build as broken","@catenacyber, thanks for your contribution, and sorry for delay in getting to this. Things are considerably behind since @geoffmcl has taken a break. Merging.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1011,2021-11-19T09:53:28Z,2022-01-25T14:17:32Z,2022-01-28T09:43:10Z,MERGED,True,5,2,1,https://github.com/catenacyber,PPrintXMLTree: avoids infinite loop on root node with no content,1,[],https://github.com/htacg/tidy-html5/pull/1011,https://github.com/catenacyber,5,https://github.com/htacg/tidy-html5/pull/1011#issuecomment-1024046795,"This should fix oss-fuzz build failure
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36721
Because of this infinite loop, the target tidy_xml_fuzzer times out on an empty input and thus oss-fuzz considers the build as broken","Thanks.
Looks like there are more fuzz targets to be fixed : tidy_parse_string_fuzzer, tidy_fuzzer and tidy_parse_file_fuzzer
There is a memory leak like
    #1 0x60f642 in defaultAlloc /src/tidy-html5/src/alloc.c:64:45
    #2 0x5ca5eb in prvTidynewStack /src/tidy-html5/src/lexer.c:4462:29
    #3 0x5f78c1 in prvTidyFixLanguageInformation /src/tidy-html5/src/clean.c:2595:20
    #4 0x564072 in tidyDocCleanAndRepair /src/tidy-html5/src/tidylib.c
    #5 0x564072 in tidyCleanAndRepair /src/tidy-html5/src/tidylib.c:1422:14",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1013,2021-12-10T12:11:08Z,,2022-01-26T12:50:44Z,OPEN,False,3,2,2,https://github.com/hoijui,Adds missing {} to else and fixes a cosmetic issue,2,[],https://github.com/htacg/tidy-html5/pull/1013,https://github.com/hoijui,1,https://github.com/htacg/tidy-html5/pull/1013,found through compiler-warnings,found through compiler-warnings,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1013,2021-12-10T12:11:08Z,,2022-01-26T12:50:44Z,OPEN,False,3,2,2,https://github.com/hoijui,Adds missing {} to else and fixes a cosmetic issue,2,[],https://github.com/htacg/tidy-html5/pull/1013,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/1013#issuecomment-1021229312,found through compiler-warnings,"Closing, then re-opening in order to trigger CI.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1013,2021-12-10T12:11:08Z,,2022-01-26T12:50:44Z,OPEN,False,3,2,2,https://github.com/hoijui,Adds missing {} to else and fixes a cosmetic issue,2,[],https://github.com/htacg/tidy-html5/pull/1013,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/1013#issuecomment-1021271407,found through compiler-warnings,"@hoijui, thanks for the contribution. The change looks straightforward and the regression tests pass on all platforms. However there's an internal API change causing the API test to fail.
I'll try to dig into it eventually, but if you have any insight, that would be appreciated.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1013,2021-12-10T12:11:08Z,,2022-01-26T12:50:44Z,OPEN,False,3,2,2,https://github.com/hoijui,Adds missing {} to else and fixes a cosmetic issue,2,[],https://github.com/htacg/tidy-html5/pull/1013,https://github.com/hoijui,4,https://github.com/htacg/tidy-html5/pull/1013#issuecomment-1021966478,found through compiler-warnings,"uff.. had a look at it, but could not see why it would fail. :/
the whole output does not contain ""error"", just a lot of warnings ...
I did not really use C since more then 10 years.
... ouh, should I maybe just rebase on current HEAD?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1013,2021-12-10T12:11:08Z,,2022-01-26T12:50:44Z,OPEN,False,3,2,2,https://github.com/hoijui,Adds missing {} to else and fixes a cosmetic issue,2,[],https://github.com/htacg/tidy-html5/pull/1013,https://github.com/balthisar,5,https://github.com/htacg/tidy-html5/pull/1013#issuecomment-1022168339,found through compiler-warnings,"I'll have a look at it sometime this weekend. It's possible that the API test isn't robust, and is at fault.",True,{'THUMBS_UP': ['https://github.com/hoijui']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1015,2021-12-22T03:05:56Z,2021-12-22T03:27:49Z,2021-12-22T03:27:49Z,CLOSED,False,2,0,1,https://github.com/SuperCodeHero,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.",1,[],https://github.com/htacg/tidy-html5/pull/1015,https://github.com/SuperCodeHero,1,https://github.com/htacg/tidy-html5/pull/1015,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.
See https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them/40242257","makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.
See https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them/40242257",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1016,2021-12-22T03:35:35Z,2022-01-25T15:16:18Z,2022-01-25T15:16:19Z,MERGED,True,2,0,1,https://github.com/SuperCodeHero,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately",1,[],https://github.com/htacg/tidy-html5/pull/1016,https://github.com/SuperCodeHero,1,https://github.com/htacg/tidy-html5/pull/1016,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.
See https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them/40242257","makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.
See https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them/40242257",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1016,2021-12-22T03:35:35Z,2022-01-25T15:16:18Z,2022-01-25T15:16:19Z,MERGED,True,2,0,1,https://github.com/SuperCodeHero,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately",1,[],https://github.com/htacg/tidy-html5/pull/1016,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/1016#issuecomment-1021273909,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.
See https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them/40242257",Closing and re-opening to force CI testing.,True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1016,2021-12-22T03:35:35Z,2022-01-25T15:16:18Z,2022-01-25T15:16:19Z,MERGED,True,2,0,1,https://github.com/SuperCodeHero,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately",1,[],https://github.com/htacg/tidy-html5/pull/1016,https://github.com/balthisar,3,https://github.com/htacg/tidy-html5/pull/1016#issuecomment-1021294335,"makes sure that when building a target, its dependencies' PUBLIC and INTERFACE include directories will be used appropriately.
See https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them/40242257","@SuperCodeHero, thanks for the PR. Merging now.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1019,2022-01-05T08:54:30Z,2022-01-25T15:12:34Z,2022-01-25T15:12:34Z,MERGED,True,1,1,1,https://github.com/MarkusPister,Attribute 'type' in tag 'ol' allowed for (X)HTML5,1,[],https://github.com/htacg/tidy-html5/pull/1019,https://github.com/MarkusPister,1,https://github.com/htacg/tidy-html5/pull/1019,"Mark the attribute 'type' as allowed for tag 'ol' in (X)HTML5.
The attribute type was deprecated in HTML4. This decision was reverted
for HTML5, see
https://www.w3.org/TR/2014/NOTE-html5-diff-20141209/#changed-attributes

This fixes #1012.","Mark the attribute 'type' as allowed for tag 'ol' in (X)HTML5.
The attribute type was deprecated in HTML4. This decision was reverted
for HTML5, see
https://www.w3.org/TR/2014/NOTE-html5-diff-20141209/#changed-attributes

This fixes #1012.",True,"{'HOORAY': ['https://github.com/ip1981', 'https://github.com/ncaq']}"
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1019,2022-01-05T08:54:30Z,2022-01-25T15:12:34Z,2022-01-25T15:12:34Z,MERGED,True,1,1,1,https://github.com/MarkusPister,Attribute 'type' in tag 'ol' allowed for (X)HTML5,1,[],https://github.com/htacg/tidy-html5/pull/1019,https://github.com/balthisar,2,https://github.com/htacg/tidy-html5/pull/1019#issuecomment-1021290366,"Mark the attribute 'type' as allowed for tag 'ol' in (X)HTML5.
The attribute type was deprecated in HTML4. This decision was reverted
for HTML5, see
https://www.w3.org/TR/2014/NOTE-html5-diff-20141209/#changed-attributes

This fixes #1012.","@MarkusPister, thanks. Although a case file would have been appreciated, all of the current regression tests pass, so I'll merge this and bump the version. Thanks!",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1027,2022-03-02T12:49:59Z,,2022-03-02T12:55:57Z,OPEN,False,1,1,1,https://github.com/da2x,The itemtype attribute is a space-separated list,1,[],https://github.com/htacg/tidy-html5/pull/1027,https://github.com/da2x,1,https://github.com/htacg/tidy-html5/pull/1027,"The itemtype attribute accepts a space-separated list of URLs.
https://html.spec.whatwg.org/#attr-itemtype
Tidy incorrectly merges space-separated itemtype values into one value and URL-encodes the separator whitespace.
E.g.
<div itemtype=""https://schema.org/Organization https://schema.org/WebSite"">

turns into
<div itemtype=""https://schema.org/Organization%20https://schema.org/WebSite"">

This patch changes CH_URL to CH_PCDATA. (CH_RDFATERMS, used on the RDFa-equivalent typeof attribute, is the closest datatype, but it expects prefixes and not URLS. CH_URLS is the most similar data type, but it also allows comma-separated lists, which isn’t appropriate here. Switching to CH_PCDATA is better than leaving it broken.)","The itemtype attribute accepts a space-separated list of URLs.
https://html.spec.whatwg.org/#attr-itemtype
Tidy incorrectly merges space-separated itemtype values into one value and URL-encodes the separator whitespace.
E.g.
<div itemtype=""https://schema.org/Organization https://schema.org/WebSite"">

turns into
<div itemtype=""https://schema.org/Organization%20https://schema.org/WebSite"">

This patch changes CH_URL to CH_PCDATA. (CH_RDFATERMS, used on the RDFa-equivalent typeof attribute, is the closest datatype, but it expects prefixes and not URLS. CH_URLS is the most similar data type, but it also allows comma-separated lists, which isn’t appropriate here. Switching to CH_PCDATA is better than leaving it broken.)",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1028,2022-03-09T12:36:49Z,,2022-04-24T21:35:00Z,OPEN,False,1,1,1,https://github.com/ihsinme,fixing a possible write beyond the array boundary.,1,[],https://github.com/htacg/tidy-html5/pull/1028,https://github.com/ihsinme,1,https://github.com/htacg/tidy-html5/pull/1028,"If you don't initialize array buf and use strlen to determine the zero length, there is a possibility that the value of function memset will go beyond array buf. This will happen if there are no zeros in the declared array.","If you don't initialize array buf and use strlen to determine the zero length, there is a possibility that the value of function memset will go beyond array buf. This will happen if there are no zeros in the declared array.",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1028,2022-03-09T12:36:49Z,,2022-04-24T21:35:00Z,OPEN,False,1,1,1,https://github.com/ihsinme,fixing a possible write beyond the array boundary.,1,[],https://github.com/htacg/tidy-html5/pull/1028,https://github.com/ihsinme,2,https://github.com/htacg/tidy-html5/pull/1028#issuecomment-1089237802,"If you don't initialize array buf and use strlen to determine the zero length, there is a possibility that the value of function memset will go beyond array buf. This will happen if there are no zeros in the declared array.","good afternoon.
any news on this PR?",True,{}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1028,2022-03-09T12:36:49Z,,2022-04-24T21:35:00Z,OPEN,False,1,1,1,https://github.com/ihsinme,fixing a possible write beyond the array boundary.,1,[],https://github.com/htacg/tidy-html5/pull/1028,https://github.com/chloekek,3,https://github.com/htacg/tidy-html5/pull/1028#issuecomment-1107922802,"If you don't initialize array buf and use strlen to determine the zero length, there is a possibility that the value of function memset will go beyond array buf. This will happen if there are no zeros in the declared array.","On line 262 it also calls strcpy(buf,rep); with seemingly no bounds check? If rep is larger than 1024 then it’ll overflow the buffer. Not an immediate problem as strrep is currently only called with constants and localized messages, but if it ever ends up being called with user input this is catastrophic.",True,{'THUMBS_UP': ['https://github.com/ihsinme']}
htacg/tidy-html5,https://github.com/htacg/tidy-html5,1036,2022-05-20T09:12:48Z,,2022-05-20T09:12:48Z,OPEN,False,4,2,1,https://github.com/sikmir,Cross-compilation support,1,[],https://github.com/htacg/tidy-html5/pull/1036,https://github.com/sikmir,1,https://github.com/htacg/tidy-html5/pull/1036,"Cross-compile with cmake flag -DHOST_TIDY=path/to/host/tidy.
Fixes #1018.","Cross-compile with cmake flag -DHOST_TIDY=path/to/host/tidy.
Fixes #1018.",True,{}
