glennrp/libpng,https://github.com/glennrp/libpng,92,2016-03-07T08:33:25Z,2016-03-07T12:28:03Z,2016-03-07T12:28:03Z,MERGED,True,28,28,3,https://github.com/krrishnarraj,gcc6: fix misleading indentation warning,1,[],https://github.com/glennrp/libpng/pull/92,https://github.com/krrishnarraj,1,https://github.com/glennrp/libpng/pull/92,"Although not a bug in this case, but shows up when -Wall is used
http://developerblog.redhat.com/2016/02/26/gcc-6-wmisleading-indentation-vs-goto-fail/","Although not a bug in this case, but shows up when -Wall is used
http://developerblog.redhat.com/2016/02/26/gcc-6-wmisleading-indentation-vs-goto-fail/",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,93,2016-03-14T15:24:09Z,2016-03-15T12:57:24Z,2016-03-15T12:57:24Z,MERGED,True,14,0,1,https://github.com/dago,Force back to C89 if needed. This fixes #245,1,[],https://github.com/glennrp/libpng/pull/93,https://github.com/dago,1,https://github.com/glennrp/libpng/pull/93,"This is a fix for bug #245 on SourceForge:
https://sourceforge.net/p/libpng/bugs/245/","This is a fix for bug #245 on SourceForge:
https://sourceforge.net/p/libpng/bugs/245/",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,94,2016-03-31T20:46:21Z,2016-05-02T00:28:40Z,2016-05-02T00:28:40Z,MERGED,True,1,1,1,https://github.com/dacap,Fix CMAKE_C_FLAGS with multiple values when genout is compiled on MSVC,1,[],https://github.com/glennrp/libpng/pull/94,https://github.com/dacap,1,https://github.com/glennrp/libpng/pull/94,"Without this patch, CMAKE_C_FLAGS will be processed as a string/filename on MSVC (e.g. when CMAKE_C_FLAGS is equal to "" /D_WIN32 /D_WINDOWS /W3"") and the whole compilation fails.
(Same issue as in #87)","Without this patch, CMAKE_C_FLAGS will be processed as a string/filename on MSVC (e.g. when CMAKE_C_FLAGS is equal to "" /D_WIN32 /D_WINDOWS /W3"") and the whole compilation fails.
(Same issue as in #87)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,94,2016-03-31T20:46:21Z,2016-05-02T00:28:40Z,2016-05-02T00:28:40Z,MERGED,True,1,1,1,https://github.com/dacap,Fix CMAKE_C_FLAGS with multiple values when genout is compiled on MSVC,1,[],https://github.com/glennrp/libpng/pull/94,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/94#issuecomment-204129051,"Without this patch, CMAKE_C_FLAGS will be processed as a string/filename on MSVC (e.g. when CMAKE_C_FLAGS is equal to "" /D_WIN32 /D_WINDOWS /W3"") and the whole compilation fails.
(Same issue as in #87)",Duplicate of #87 Fix win errors,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,95,2016-03-31T20:46:59Z,2016-05-02T00:28:40Z,2016-05-02T00:28:40Z,MERGED,True,3,1,1,https://github.com/dacap,Add support to use multiple directories in ZLIBINCDIR variable,1,[],https://github.com/glennrp/libpng/pull/95,https://github.com/dacap,1,https://github.com/glennrp/libpng/pull/95,"For example, ZLIB_INCLUDE_DIR might include the directory where zlib.h is located (source dir) and the zconf.h file is located (binary dir).","For example, ZLIB_INCLUDE_DIR might include the directory where zlib.h is located (source dir) and the zconf.h file is located (binary dir).",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,96,2016-03-31T20:47:18Z,2016-05-02T00:28:41Z,2016-05-04T14:26:11Z,MERGED,True,8,0,1,https://github.com/dacap,Fix pnglibconf.c compilation on OS X including the sysroot path,1,[],https://github.com/glennrp/libpng/pull/96,https://github.com/dacap,1,https://github.com/glennrp/libpng/pull/96,Without these flags pnglibconf.c compilation fails because it includes zlib.h -> zconf.h -> sys/types.h which is not found until we give a correct SDK path with -isysroot flag.,Without these flags pnglibconf.c compilation fails because it includes zlib.h -> zconf.h -> sys/types.h which is not found until we give a correct SDK path with -isysroot flag.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,96,2016-03-31T20:47:18Z,2016-05-02T00:28:41Z,2016-05-04T14:26:11Z,MERGED,True,8,0,1,https://github.com/dacap,Fix pnglibconf.c compilation on OS X including the sysroot path,1,[],https://github.com/glennrp/libpng/pull/96,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/96#issuecomment-216880157,Without these flags pnglibconf.c compilation fails because it includes zlib.h -> zconf.h -> sys/types.h which is not found until we give a correct SDK path with -isysroot flag.,See issue #100 -- this patch seems to have broken clang builds.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,96,2016-03-31T20:47:18Z,2016-05-02T00:28:41Z,2016-05-04T14:26:11Z,MERGED,True,8,0,1,https://github.com/dacap,Fix pnglibconf.c compilation on OS X including the sysroot path,1,[],https://github.com/glennrp/libpng/pull/96,https://github.com/dacap,3,https://github.com/glennrp/libpng/pull/96#issuecomment-216881050,Without these flags pnglibconf.c compilation fails because it includes zlib.h -> zconf.h -> sys/types.h which is not found until we give a correct SDK path with -isysroot flag.,"Hi @glennrp, there is a patch for this here: aseprite@74a4abe
Do you want a PR or can you just cherry-pick the commit? (the commit is in aseprite branch in https://github.com/aseprite/libpng)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,96,2016-03-31T20:47:18Z,2016-05-02T00:28:41Z,2016-05-04T14:26:11Z,MERGED,True,8,0,1,https://github.com/dacap,Fix pnglibconf.c compilation on OS X including the sysroot path,1,[],https://github.com/glennrp/libpng/pull/96,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/96#issuecomment-216881689,Without these flags pnglibconf.c compilation fails because it includes zlib.h -> zconf.h -> sys/types.h which is not found until we give a correct SDK path with -isysroot flag.,PR would be helpful,True,{'THUMBS_UP': ['https://github.com/dacap']}
glennrp/libpng,https://github.com/glennrp/libpng,98,2016-04-04T20:15:34Z,2016-04-05T17:18:34Z,2016-04-05T17:18:34Z,MERGED,True,88,17,1,https://github.com/mtklein,SSE filter speed improvements for bpp=3.,1,[],https://github.com/glennrp/libpng/pull/98,https://github.com/mtklein,1,https://github.com/glennrp/libpng/pull/98,"- memcpy-free implementations of load3() / store3().
These should have less variance compiler to compiler.

- call load3() only when needed at the end of a scanline.
In the middle, we can use the faster load4(), ignoring that byte.

Depending on the image, we're seeing a 10-25% overall decode speedup.","- memcpy-free implementations of load3() / store3().
These should have less variance compiler to compiler.

- call load3() only when needed at the end of a scanline.
In the middle, we can use the faster load4(), ignoring that byte.

Depending on the image, we're seeing a 10-25% overall decode speedup.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,99,2016-04-15T15:49:20Z,2016-04-15T16:31:12Z,2016-04-15T16:31:13Z,MERGED,True,37,7,1,https://github.com/jbowler,timepng: compilation fixes,12,[],https://github.com/glennrp/libpng/pull/99,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/99,"Now timepng is in the build it needs support for various valid build configurations and various odd compilers (well, GCC) to remove warnings and non-compilation on de-configured systems.","Now timepng is in the build it needs support for various valid build configurations and various odd compilers (well, GCC) to remove warnings and non-compilation on de-configured systems.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,101,2016-05-04T14:33:44Z,2016-05-04T15:40:01Z,2016-05-04T15:40:01Z,MERGED,True,6,1,1,https://github.com/dacap,Fix genout compilation when CMAKE_OSX_ARCHITECTURES isn't specified (fix #100),1,[],https://github.com/glennrp/libpng/pull/101,https://github.com/dacap,1,https://github.com/glennrp/libpng/pull/101,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,102,2016-05-05T00:11:12Z,2016-05-05T03:04:52Z,2016-05-05T07:38:34Z,MERGED,True,1711,1207,10,https://github.com/jbowler,Write code update,1,[],https://github.com/glennrp/libpng/pull/102,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/102,"Implemented better defaulting of zlib settings based on image properties.
Implemented pass-through of png_write_rows when the rows can be used directly (a
common case) optimizing the handling of previous-row buffering.
Removed the METHODICAL filter selection method and disabled the HEURISTIC one;
the first was ridiculously slow (though useful for experiments) the second
doesn't work.  Filter selection is temporarily disabled (it defaults to the
lowest numbered filter in the list; typically 'none').
New handling of compression settings (incomplete), new PNG compression level
(not yet visible in an API).
Back ported 'PNG_FAST_FILTERS' from 1.6 (in png.h).
There are minimal API changes beyond removal of the selection options.  Work is
still to be done to investigate a filter selection mechanism that is at least as
good as the previous one.
Signed-off-by: John Bowler jbowler@acm.org","Implemented better defaulting of zlib settings based on image properties.
Implemented pass-through of png_write_rows when the rows can be used directly (a
common case) optimizing the handling of previous-row buffering.
Removed the METHODICAL filter selection method and disabled the HEURISTIC one;
the first was ridiculously slow (though useful for experiments) the second
doesn't work.  Filter selection is temporarily disabled (it defaults to the
lowest numbered filter in the list; typically 'none').
New handling of compression settings (incomplete), new PNG compression level
(not yet visible in an API).
Back ported 'PNG_FAST_FILTERS' from 1.6 (in png.h).
There are minimal API changes beyond removal of the selection options.  Work is
still to be done to investigate a filter selection mechanism that is at least as
good as the previous one.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,103,2016-05-06T21:53:12Z,2016-05-07T00:12:05Z,2016-05-07T01:10:45Z,MERGED,True,70,168,4,https://github.com/jbowler,"Minor write bug-fixes, remove unimplemented code",1,[],https://github.com/glennrp/libpng/pull/103,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/103,"A debug() assert fired if windowBits was set to 8 for the Huffman only and
no-compression cases.  This commit changes it to do some extra checking.  Remove
unreachable code in pz_default_settings, eliminate a spurious warning in pngcp
for small files.
Signed-off-by: John Bowler jbowler@acm.org","A debug() assert fired if windowBits was set to 8 for the Huffman only and
no-compression cases.  This commit changes it to do some extra checking.  Remove
unreachable code in pz_default_settings, eliminate a spurious warning in pngcp
for small files.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,103,2016-05-06T21:53:12Z,2016-05-07T00:12:05Z,2016-05-07T01:10:45Z,MERGED,True,70,168,4,https://github.com/jbowler,"Minor write bug-fixes, remove unimplemented code",1,[],https://github.com/glennrp/libpng/pull/103,https://github.com/jbowler,2,https://github.com/glennrp/libpng/pull/103#issuecomment-217569574,"A debug() assert fired if windowBits was set to 8 for the Huffman only and
no-compression cases.  This commit changes it to do some extra checking.  Remove
unreachable code in pz_default_settings, eliminate a spurious warning in pngcp
for small files.
Signed-off-by: John Bowler jbowler@acm.org",This should fix the Coverity dead code issue.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,104,2016-05-21T15:49:47Z,2016-05-21T18:28:18Z,2016-05-22T01:31:00Z,MERGED,True,1644,940,18,https://github.com/jbowler,20160506 write,9,[],https://github.com/glennrp/libpng/pull/104,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/104,timepng fixes and (re)enabling of the filter selection algorithm,timepng fixes and (re)enabling of the filter selection algorithm,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,105,2016-05-29T05:25:35Z,2016-05-29T15:26:04Z,2016-05-29T16:07:43Z,CLOSED,False,441,50,2,https://github.com/jbowler,pngvalid.c: validate weird IDAT lengths,1,[],https://github.com/glennrp/libpng/pull/105,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/105,"Also pngpread.c, fix a warning that is detected as a result.
(NOTE: requires a patch to pngpread.c for the progressive tests to pass.)
Signed-off-by: John Bowler jbowler@acm.org","Also pngpread.c, fix a warning that is detected as a result.
(NOTE: requires a patch to pngpread.c for the progressive tests to pass.)
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,105,2016-05-29T05:25:35Z,2016-05-29T15:26:04Z,2016-05-29T16:07:43Z,CLOSED,False,441,50,2,https://github.com/jbowler,pngvalid.c: validate weird IDAT lengths,1,[],https://github.com/glennrp/libpng/pull/105,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/105#issuecomment-222366336,"Also pngpread.c, fix a warning that is detected as a result.
(NOTE: requires a patch to pngpread.c for the progressive tests to pass.)
Signed-off-by: John Bowler jbowler@acm.org",I applied this patch manually to libpng-1.6.23beta01.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,106,2016-05-29T20:28:18Z,2016-05-29T21:01:04Z,2016-05-29T21:21:11Z,MERGED,True,14,7,1,https://github.com/jbowler,pngvalid.c: correct progressive read input buffer,1,[],https://github.com/glennrp/libpng/pull/106,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/106,"The previous version of the code invariably passed just one byte at a time to
libpng.  The intention was to pass a random number of bytes in the range 0..511
(and this is what happens now).
Signed-off-by: John Bowler jbowler@acm.org","The previous version of the code invariably passed just one byte at a time to
libpng.  The intention was to pass a random number of bytes in the range 0..511
(and this is what happens now).
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,107,2016-05-29T20:28:31Z,2016-05-29T21:01:05Z,2016-05-29T21:01:05Z,MERGED,True,432,44,1,https://github.com/jbowler,Backported pngvalid changes from libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/107,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/107,Signed-off-by: John Bowler jbowler@acm.org,Signed-off-by: John Bowler jbowler@acm.org,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,108,2016-05-29T21:16:09Z,2016-05-29T21:55:39Z,2016-05-30T00:09:26Z,MERGED,True,433,45,1,https://github.com/jbowler,Back-port 1.6 pngvalid.c,1,[],https://github.com/glennrp/libpng/pull/108,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/108,"No changes; files are identical
Signed-off-by: John Bowler jbowler@acm.org","No changes; files are identical
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,109,2016-05-30T15:14:42Z,2016-05-30T15:47:15Z,2016-05-30T15:55:01Z,MERGED,True,31,46,1,https://github.com/jbowler,pngvalid.c: don't use size_t count arguments,1,[],https://github.com/glennrp/libpng/pull/109,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/109,"Coverity rejects code where an array element count has type size_t, this
elminates the code in question from contrib/libtests/pngvalid.c
Signed-off-by: John Bowler jbowler@acm.org","Coverity rejects code where an array element count has type size_t, this
elminates the code in question from contrib/libtests/pngvalid.c
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,109,2016-05-30T15:14:42Z,2016-05-30T15:47:15Z,2016-05-30T15:55:01Z,MERGED,True,31,46,1,https://github.com/jbowler,pngvalid.c: don't use size_t count arguments,1,[],https://github.com/glennrp/libpng/pull/109,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/109#issuecomment-222516056,"Coverity rejects code where an array element count has type size_t, this
elminates the code in question from contrib/libtests/pngvalid.c
Signed-off-by: John Bowler jbowler@acm.org","I'll apply this patch to libpng15, libpng16, and libpng17.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,110,2016-06-07T14:35:44Z,2016-06-07T16:05:01Z,2016-06-07T18:08:21Z,MERGED,True,1606,1069,18,https://github.com/jbowler,"API reduction, PNG compression level",1,[],https://github.com/glennrp/libpng/pull/110,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/110,"PNG compression level setting API: this allows the various compression settings
controlling deflate, fitlering, and so on to be set via a single setting with
six values.  This is currently documented in png.h (""Write compression
settings"").
Internally the compression settings have been tuned both for the overall setting
and for any specific settings made by the original APIs.
APIs to control iCCP chunk compression separately have been added.
contrib/examples/pngcp.c has been modified to accomodate the new compression
setting and to include options for separate control of iCCP chunk compression.
The new ABI, png_setting, has been modified to accomodate a wider range of
settings and most of the old compression control ABIs have been replaced by
function-like macros with the same API which call png_setting.  This is an API
check in 1.7.0 for png_setting (alone).  png_setting now handles all of
png_set_option.  This eliminates 19 ABIs at the cost of adding 1 (png_setting).
CRC and benign error checking has been updated internally to use bit-fields and
the CRC calculation skip when the CRC is not used has been improved slightly to
avoid the initialization of the CRC.  A new png_setting based API allows more
detailed control of benign error/warning messages (this may change, the internal
error handling seems too complex.)  The ERROR_NUMBERS support has been removed
with the intent of implementing proper i18n.
The memcpy-size-0 issue in png_push_fill_buffer has been fixed, with an
appropriate debug() assert if a fill for 0 bytes occurs.
Most PNG_FLAG_ values for png_struct::flags have been eliminated (as a result of
the benign error handling changes).  Only one remains.
Signed-off-by: John Bowler jbowler@acm.org","PNG compression level setting API: this allows the various compression settings
controlling deflate, fitlering, and so on to be set via a single setting with
six values.  This is currently documented in png.h (""Write compression
settings"").
Internally the compression settings have been tuned both for the overall setting
and for any specific settings made by the original APIs.
APIs to control iCCP chunk compression separately have been added.
contrib/examples/pngcp.c has been modified to accomodate the new compression
setting and to include options for separate control of iCCP chunk compression.
The new ABI, png_setting, has been modified to accomodate a wider range of
settings and most of the old compression control ABIs have been replaced by
function-like macros with the same API which call png_setting.  This is an API
check in 1.7.0 for png_setting (alone).  png_setting now handles all of
png_set_option.  This eliminates 19 ABIs at the cost of adding 1 (png_setting).
CRC and benign error checking has been updated internally to use bit-fields and
the CRC calculation skip when the CRC is not used has been improved slightly to
avoid the initialization of the CRC.  A new png_setting based API allows more
detailed control of benign error/warning messages (this may change, the internal
error handling seems too complex.)  The ERROR_NUMBERS support has been removed
with the intent of implementing proper i18n.
The memcpy-size-0 issue in png_push_fill_buffer has been fixed, with an
appropriate debug() assert if a fill for 0 bytes occurs.
Most PNG_FLAG_ values for png_struct::flags have been eliminated (as a result of
the benign error handling changes).  Only one remains.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,111,2016-06-07T18:35:07Z,2016-06-07T19:47:40Z,2016-06-07T20:33:37Z,MERGED,True,91,54,5,https://github.com/jbowler,LOW_MEMORY and COMPAT bug fixes,1,[],https://github.com/glennrp/libpng/pull/111,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/111,"The LOW_MEMORY PNG_COMPRESSION option should not be setting HUFFMAN_ONLY or
using a low deflate 'level'; according to the comments in zconf.h only
windowBits and memLevel affect the memory.  pngwutil.c has been changed to use
the same values as HIGH compression.
The COMPAT option turned on the old optimize_cmf code (now in fix_cinfo),
however there was a serious bug in that code; it put the wrong value in z_cmf.
The setting was also not handled correctly in pz_compression_settings.
pngtest now verifies the operation of COMPAT and, as a result, pngtest.png has
been reverted to the libpng 1.6 (etc) version.
IDAT size handling has been improved; if not explicitly set values appropriate
to png_level are now chosen (in addition to the handling for the COMPAT
setting).  HIGH and HIGH_READ_SPEED now create unlimited size IDAT chunks, which
requires buffering the whole of the IDAT data in memory but reflects what other
programs and optimizers do.
Signed-off-by: John Bowler jbowler@acm.org","The LOW_MEMORY PNG_COMPRESSION option should not be setting HUFFMAN_ONLY or
using a low deflate 'level'; according to the comments in zconf.h only
windowBits and memLevel affect the memory.  pngwutil.c has been changed to use
the same values as HIGH compression.
The COMPAT option turned on the old optimize_cmf code (now in fix_cinfo),
however there was a serious bug in that code; it put the wrong value in z_cmf.
The setting was also not handled correctly in pz_compression_settings.
pngtest now verifies the operation of COMPAT and, as a result, pngtest.png has
been reverted to the libpng 1.6 (etc) version.
IDAT size handling has been improved; if not explicitly set values appropriate
to png_level are now chosen (in addition to the handling for the COMPAT
setting).  HIGH and HIGH_READ_SPEED now create unlimited size IDAT chunks, which
requires buffering the whole of the IDAT data in memory but reflects what other
programs and optimizers do.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,112,2016-06-08T15:42:37Z,2016-06-08T18:46:33Z,2016-06-08T21:23:48Z,MERGED,True,35,62,7,https://github.com/jbowler,Compression changes/fixes,2,[],https://github.com/glennrp/libpng/pull/112,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/112,"Simplified API: change handling of PNG_IMAGE_FLAG_FAST to use
PNG_COMPRESSION_HIGH_SPEED, and PNG_COMPRESSION_HIGH otherwise.
Compression: add missing break statements that caused some compression settings
to fall through to the 'HIGH' setting.
Internal: remove png_struct::flags, it only stored the 'library mismatch' flag
and that could never be accessed (because immediately after it was set the
png_struct, which was on the stack, was eliminated.)
Signed-off-by: John Bowler jbowler@acm.org","Simplified API: change handling of PNG_IMAGE_FLAG_FAST to use
PNG_COMPRESSION_HIGH_SPEED, and PNG_COMPRESSION_HIGH otherwise.
Compression: add missing break statements that caused some compression settings
to fall through to the 'HIGH' setting.
Internal: remove png_struct::flags, it only stored the 'library mismatch' flag
and that could never be accessed (because immediately after it was set the
png_struct, which was on the stack, was eliminated.)
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,113,2016-06-11T17:16:50Z,2016-06-11T19:23:09Z,2016-06-11T19:23:09Z,CLOSED,False,24,1,1,https://github.com/jbowler,Change image size checks,1,[],https://github.com/glennrp/libpng/pull/113,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/113,"This covers the case where PNG_IMAGE_BUFFER_SIZE can overflow in the application
as a result of the application using an increased 'row_stride'; previously
png_image_finish_read only checked for overflow on the base calculation of
components.  (I.e. it checked for overflow of a 32-bit number on the total
number of pixel components in the output format, not the possibly padded row
length and not the number of bytes, which for linear formats is twice the number
of components.)
Signed-off-by: John Bowler jbowler@acm.org","This covers the case where PNG_IMAGE_BUFFER_SIZE can overflow in the application
as a result of the application using an increased 'row_stride'; previously
png_image_finish_read only checked for overflow on the base calculation of
components.  (I.e. it checked for overflow of a 32-bit number on the total
number of pixel components in the output format, not the possibly padded row
length and not the number of bytes, which for linear formats is twice the number
of components.)
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,113,2016-06-11T17:16:50Z,2016-06-11T19:23:09Z,2016-06-11T19:23:09Z,CLOSED,False,24,1,1,https://github.com/jbowler,Change image size checks,1,[],https://github.com/glennrp/libpng/pull/113,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/113#issuecomment-225388722,"This covers the case where PNG_IMAGE_BUFFER_SIZE can overflow in the application
as a result of the application using an increased 'row_stride'; previously
png_image_finish_read only checked for overflow on the base calculation of
components.  (I.e. it checked for overflow of a 32-bit number on the total
number of pixel components in the output format, not the possibly padded row
length and not the number of bytes, which for linear formats is twice the number
of components.)
Signed-off-by: John Bowler jbowler@acm.org",Patch applied manually,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,114,2016-06-11T17:17:14Z,2016-06-11T19:22:35Z,2016-06-11T21:20:08Z,MERGED,True,21,4,2,https://github.com/jbowler,Change image size checks,1,[],https://github.com/glennrp/libpng/pull/114,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/114,"This covers the case where PNG_IMAGE_BUFFER_SIZE can overflow in the application
as a result of the application using an increased 'row_stride'; previously
png_image_finish_read only checked for overflow on the base calculation of
components.  (I.e. it checked for overflow of a png_alloc_size_t number on the
total number of pixel components in the output format, not the possibly padded
row length and not the number of bytes, which for linear formats is twice the
number of components.)","This covers the case where PNG_IMAGE_BUFFER_SIZE can overflow in the application
as a result of the application using an increased 'row_stride'; previously
png_image_finish_read only checked for overflow on the base calculation of
components.  (I.e. it checked for overflow of a png_alloc_size_t number on the
total number of pixel components in the output format, not the possibly padded
row length and not the number of bytes, which for linear formats is twice the
number of components.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,1,https://github.com/glennrp/libpng/pull/116,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,2,https://github.com/glennrp/libpng/pull/116#issuecomment-226964439,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","You might like to take a look at the arguments to 'png_set_compression' in libpng 1.7; around line 1696 in png.h and implemented primarily in pngwutil.c .  I got those settings using about 147,000 test files and (in fact) primarily the 1.6 encoder; they're derived primarily from consideration of the file size then working out what switching off the options that slow down the encoder and decode speed does to the file size.  There's a set of figures around line 1353 of pngwutil.c in the implementation of pz_default_settings.
Anyway, 1.7 doesn't suffer from the issue you identified in 1.6; the single-filter route bypasses the entire heuristic calculation, however libpng 1.7 just does all the filters at once so it's probably slower as a result.  We've never optimized the write code!
As for your fix it doesn't work because in the 'else' branch where mins is used it can overflow.  An example of the failure that results is with the vertical-stripe PNG, where 'up' is optimal but 'sub' can overflow (particularly on 16-bit systems).
Anyway, isn't there a bug in there?   Like, a fairly serious one?  Doesn't it bail anyway, even if sum isn't used (as a result of the (void) of the call result?)  I think that probably leaves a row terminated by garbage, but maybe I'm seeing bugs where they don't exist.  If I'm right the (correct) fix to the overflow bug would probably fix your issue without potentially selecting the wrong filter, though it would probably slow down the rest of the code.
One simple fix is to delete the overflow test everywhere except the basic test at line 2454; move that to the head of the routine and if it fails execute 'filter_to_do &= -filter_to_do' to leave just one (the lowest numbered) filter.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,3,https://github.com/glennrp/libpng/pull/116#issuecomment-226974198,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","libpng 1.0 selects the 'NONE' filter if all the filters in the list overflow and 'NONE' is not in the list.  If 'NONE' is in the list the sum is calculated for it but overflow is ignored.  If overflow doesn't happen this might cause overflow in the subsequent calculations to be ignored, if the 'NONE' sum is >= 0xfffffff8.
Given this behavior selecting the first filter in the list if overflow is possible seems reasonable.  Passing an 'mins' of PNG_SIZE_MAX to the png_setup routines in the case where there is only one filter will prevent the 'break' and turn the optimization back on (because the fixed value for lmins will cause the test and break to be eliminated in the in-line version.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,4,https://github.com/glennrp/libpng/pull/116#issuecomment-227001361,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","I tested:
https://github.com/jbowler/libpng/tree/20160618-filter-select
I think it's correct, it passes all my tests (on x86_64), but it's another case of code review required; I find it very difficult to even see the original bug and once I've been able to see it it's difficult to keep in the crosshairs.  I think what I wrote is more clear, but then I wrote it...",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/glennrp,5,https://github.com/glennrp/libpng/pull/116#issuecomment-227030936,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",See  commits 9c04f57 and 2913516 in the libpng16 branch.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,6,https://github.com/glennrp/libpng/pull/116#issuecomment-227156527,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",Thanks a lot for this fix!  I've verified locally that this fixes the performance regressions.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,7,https://github.com/glennrp/libpng/pull/116#issuecomment-228769550,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","So it turns out that this fix works great on Mac/Linux clang, but has no effect on some GCC and Windows builds.
I know it's a pain to support various versions of dumb compilers, but can we reopen this and reconsider landing 2913516 ?
This seems to fix the problem everywhere.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,8,https://github.com/glennrp/libpng/pull/116#issuecomment-228797522,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","I don't think that's appropriate.  Different compilers produce different
optimizations; some are better than others.  Some architectures and some
compilers favor code size over CPU time, for very good reasons; loading the
code can take as long as running it.
Manual code duplication cannot be easily undone by the compiler.  It needs
to be done very very carefully and certainly not because a given compiler
chooses to not do it.  Normally the compiler writer knows best.
The amount of inlining done is very architecture dependent, although with
GCC there is explicit control, so what happens with those options?  Anyway;
what are the compilers (i.e. the arch-os-compiler plus optimization
options?)
This is all particularly true in this case; we are talking about two or
three extra instructions per byte yet there are hundreds of other
instructions per byte.  Even though the case is concocted (turning off
everything except 'none' and 'up') the whole of the deflate code is still
there and it does a string search for each byte.
So, second question, what are the overall timing figures?
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,9,https://github.com/glennrp/libpng/pull/116#issuecomment-228824546,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","I don't think that's appropriate.  Different compilers produce different
optimizations; some are better than others.  Some architectures and some
compilers favor code size over CPU time, for very good reasons; loading the
code can take as long as running it.

Manual code duplication cannot be easily undone by the compiler.  It needs
to be done very very carefully and certainly not because a given compiler
chooses to *not* do it.  Normally the compiler writer knows best.

I can't speak for other clients, but I suspect that we care more about performance than the trivial (for a large application) increase in code size that this duplication would cause.  Though I'm aware that not all clients are so large...

The amount of inlining done is very architecture dependent, although with
GCC there is explicit control, so what happens with those options?  Anyway;
what are the compilers (i.e. the arch-os-compiler plus optimization
options?)

Agreed that all of this stuff is very architecture/compiler dependent.  That's why, IMHO, fixing a performance regression with a compiler dependent optimization might not make sense.
Here's a few specifics on the impact.  The benchmark test I'm running is dominated by PNG encode time.
Android Nexus 5X (GCC 4.6)
Benchmark Time libpng1.2   871ms
Benchmark Time libpng1.6  1114ms
Windows 7 (MSVS)
Benchmark Time libpng1.2  189ms
Benchmark Time libpng1.6  246ms
I can't provide specifics on the compiler options, but FWIW, they are set to maximize optimizations.

This is all particularly true in this case; we are talking about two or
three extra instructions per byte yet there are hundreds of other
instructions per byte.  Even though the case is concocted (turning off
everything except 'none' and 'up') the whole of the deflate code is still
there and it does a string search for each byte.

I tend to disagree that this case is ""concocted"".  Setting the encode options to a specific, fast filter seems like a reasonable way to client to optimize filter runtime.
It is strange that this set of a few instructions is causing such a large slowdown.  I would guess that having a branch instruction inside of what would be a loop of plain arithmetic prevents auto-vectorization of the code.
FWIW, we also make similar ""optimized for runtime"" decisions on the zlib settings.

I hope the above doesn't come across as argumentative - I'm aware that there is a certainly a performance vs. code size/clarity/maintainability trade-off here.  And that's a decision that you (as libpng maintainers) certainly should be the ones to make.
What's troublesome for me is that, in trying to update an application's libpng, I have the (possibly unfair) burden of demonstrating that the new version is ""better"" than the old across a wide variety of tests.  And I don't want to let that block what I believe is a positive change.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,10,https://github.com/glennrp/libpng/pull/116#issuecomment-228846303,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Those aren't the figures I was asking about; I was interested in the
difference in the total time between the two versions of pngwutil.c
currently in the 1.6 tree.  Specifically between Glenn's backed out change
from commit 291xxx and the tip revision, commit ed5xxx.  It is easy just to
git-checkout each of the pngwutil.c versions and test and, indeed, that is
what I am doing.
It's pretty near impossible for me to hypothesize where a 30% difference in
time comes from when two such different pieces of code are compared.  When
I compare 291 with ed5 using tests that are substantially 'write', take
about 160s to run and can be analyzed statistically (I run them a number of
times) So far I haven't got a significant difference in time, but the 291
executable is certainly bigger.  I.e. the original bug report is currently
not-repro; if I can repro it I can run perf and find out what's going on.
​

What's troublesome for me is that, in trying to update an application's
libpng,
I have the (possibly unfair) burden of demonstrating that the new version
is ""better""
than the old across a wide variety of tests.

No, you can just patch libpng any way you like; Glenn has already provided
a different version!  The issue is that changes to the Official source code
have to be for the benefit of everyone (on aggregate), not just one very
specific commercial case.  In the past (when I was actually paid to do
this) I maintained patched versions of libpng because the changes I made
were for a single, proprietary, application and the management (well, more
senior developers) were on my back about code bloat.
John Bowler",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,11,https://github.com/glennrp/libpng/pull/116#issuecomment-228855958,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Sorry for being unclear.  The benchmark times I provided for libpng 1.2 are virtually identical to libpng 1.6 with Glenn's patch.  Please interpret those times as ""libpng 1.6 plus Glenn's patch"".  The 30% difference is entirely due to the sum calculation and branch instruction in the middle of the png_setup_sub_row() loop.
I'm disappointed you can't reproduce, though I'd guess that's because this seems to be a compiler/platform dependent case.  Is it possible for you to try Windows MSVC or an Android device under the following settings?
png_set_compression_level(png, 3);
png_set_compression_strategy(png, Z_FILTERED);
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);

No, you can just patch libpng any way you like.

Yes that is certainly a potential solution.  Obviously, I'd prefer to have a libpng that is maintained by the libpng experts (you and Glenn), rather than taking than taking on that responsibility.  And once we start adding patches to libpng, it makes it much more difficult to update to future versions.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,12,https://github.com/glennrp/libpng/pull/116#issuecomment-228870757,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","On Mon, Jun 27, 2016 at 12:53 PM, mattsarett notifications@github.com
wrote:

Sorry for being unclear. The benchmark times I provided for libpng 1.2 are
virtually identical to libpng 1.6 with Glenn's patch. Please interpret
those times as ""libpng 1.6 plus Glenn's patch"". The 30% difference is
entirely due to the sum calculation and branch instruction in the middle of
the png_setup_sub_row() loop.
So I can't repro that; with gcc-5.4.0 -O2 -finline-functions and using
gdb when I put a breakpoint on png_setup_sub_row it does, as expected, put
a break in two locations.  When I run ""pngcp --filter=sub"" I do hit the
PNG_SIZE_MAX case and there is no png_setup_sub_row function.  When I step
through this there is no 'sum' calculation.

With Glenn's code the same thing happens regardless of -finline-functions
because there is only one call to each of the static functions so, at -O2,
GCC inlines them because '-finline-functions-called-once' is turned on at
-O2.
So I think you can see what I suspect...
I don't have 4.6; it's pretty old.  I checked the manual for 4.6.4 and the
description of -finline-functions and -finline-functions-called-once is the
same, I guess maybe it could have a bug, but I think you should double
check this statement:

I can't provide specifics on the compiler options, but FWIW,
they are set to maximize optimizations.

I can't see why those instructions exist in your code if you really have
enabled -O3 (i.e. optimize for speed even at the cost of significant space
increase).
I'll test with those zlib options; it's going to be interesting if the
inline vs non-inline case does produce +30%...",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,13,https://github.com/glennrp/libpng/pull/116#issuecomment-228879313,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",Thanks for looking into this!  I'll do my best to verify the compiler flags.  Agreed that GCC 4.6 is old.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,14,https://github.com/glennrp/libpng/pull/116#issuecomment-229188318,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","I used GCC 4.8.5 and a minimally configure libpng, producing (at -O2) a statically linked pngcp of text size 58kbytes on X86-64.  I used Glenn's hand duplicated 291xxx revision and the 1.6 ed5xxx tip revision.
Using a randomly selected test set of 59002 files from my bigger test set I ran pngcp with the above zlib options and filter=sub on all the files at once.  This took 80s with 291.  Swapping to the non-inlined version in ed5 added 4s to this time.  Using other tests such as forcing 291 through the other (still inlined) branch with filter=sub,none and testing ed5 with -finline-functions showed that it isn't the inlining that helps; it is the code duplication.
So I looked at what perf reports for the two versions; perf diff 291 ed5.  ed5  was about 5% slower than 291 and perf record did record 4.8% more samples, perf diff --compute=ratio showed that most of the time when inside deflate; the top three functions were all part of deflate and took over 56% of the total time in 291.  inflate and the libpng Paeth filter accounted for more than 20% of the remaining time.
So far as png_write_find_filter is concerned, however, it took 1.79% of the time in 291 and the non-inlined function png_setup_sub_row took the equivalent of 6.56% of the samples in ed5 (png_write_find_filter did not appear in ed5).  The difference, 4.79%, accounts for the increased samples in ed5 even though other sample counts moved around quite a lot in other functions; I assume that this is simply a result of the change in png_write_find_filter changing where cache waits happen.  The time increase is 6.56/1.79 = 3.66.
So... examining the code under gdb, comparing the two inlined/hand crafted versions of png_setup_sub_row, seems to show that the problem is the compiler/architecture inability to deal with the expression:
  sum += (v < 128) ? v : 256 - v;

Just eliminating the 'if (sum > lmins)' test doesn't make much difference; less than 0.5s.  (Notice that the test is unnecessary; overflow is now handled so it is only worth doing as an optimzation!)  The problem is that the code without the 'sum' calculation introduces many instructions into the loop.  Without it the inlined version is a minimal byte subtract/copy; there are 6 instructions in the whole loop, including 3 for the loop counter/test.  With the sum calculation there are 16 instructions, with the same three instruction overhead, and, curiously, the copy part is compiled with 4 instructions not 3.  The sum calculation takes 7 instructions and the test 2.
j
Ok, so the time increase is 3.66 and the instruction count increase is 16/6; 2.66.  This is less even though not all 16 instructions are executed each time round.  I believe the problem is either that the CPU has to wait for the ALU pipeline to do the check or that the CPU branch prediction fails causing a wait.
It is relative easy to rewrite the expression to avoid tests, either by using signed arithmetic and abs() or unsigned arithmetic.  The figures this gives, in seconds, are:
291: 79.8s +/- 0.1s
ed5: 84.1s +/- 0.5s  [+4.3s +/-0.5s]
ed5-inline: 79.7s +/- 0.1s [no change]
This is just ed5 compiled -O2 -finline-functions.  The text size of pngcp increases to 69kbytes (+11kbytes/+18%).
ed5-noif: 84.0s +/- 0.2s [+4.2s +/- 0.3s]
In this and the following figures I removed the test on lmins and the break (leaving lmins unused).  Notice that this is the original suggestion; so far as I can see it doesn't may much change!
ed5-abs: 82.2s +/- 0.1s [+2.4s +/-0.1s]
I changed the sum += calculation to use ""128 - abs(v-128)""; note that v is signed.
ed5-bitx: 81.6s +/- 0.1s [+1.8s +/- 0.1s]
I changed 'v' to be (unsigned int) and used the following bit manipulation:
unsigned int q = 0U - (v >> 7);   /* v < 128 ? 0 : -1 */
sum += (0x7F & (v ^ q)) - q;
The 'bitx' approach is really just one of the standard 'abs' implementations with optimization of the operand.  It's a pity GCC fails to detect this optimization.
Based on this and the fact that 'abs' is a function that is normally inlined, and normally inlined well (the GCC version isn't too bad) I think it's reasonable to use this approach - better than the hard coded v < 128 implementation currently used.  I experimented with adding the test on lmins back in to both the bitx and abs variants.  This showed the following results:
ed5-abs-if: 82.4s +/- 0.1s [extra 0.2s over no if]
ed5-bitx-if: 82.3s +/- 0.2s [extra 0.7s over no if]
So the branch cost is the difference between the GCC 'abs' and 'bitx' compilations and putting in the extra branch makes no difference.  All the same, using abs increases the performance of the normal code (where the sum is required).
As a result I propose using 'abs' but including the early-out.  As discussed any disadvantages are only likely to apply to the single-filter case and this is rare.  I'll prepare and test a patch with the same changed applied to all the 'setup' functions; I'll be able to test what, if anything, this does to the normal libpng case where png_set_filter is not called and all the filters are checked.
I can abstract the sum heuristic as a macro which can be redefined if required.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,15,https://github.com/glennrp/libpng/pull/116#issuecomment-229463314,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","These changes are here:

https://github.com/jbowler/libpng/tree/20160627-pngcp

16f25a is the base change above with 'sum' calculation moved to a macro,
there's a macro in there to disable the early-out, but as suggested
previously it isn't present in;

6a3797 is based on the libpng 1.7 approach and calculates the sum
separately, then just runs the selected filter.  It still writes a separate
(third) 'filtered' row but I think that is unnecessary; either row_buf or
prev_row can be overwritten, avoiding the need to allocate a third row
buffer.

I'm testing these now, but this will take some time; tests with the
heuristic take about 200s to run each and I want to run 10 of each
possibility to check for statistical significance in any results.
​
John Bowler",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/glennrp,16,https://github.com/glennrp/libpng/pull/116#issuecomment-229546323,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Note that the abs() calls were replaced with ternary statements in 1998 (see CHANGES)
Version 1.0.1a [April 21, 1998]
Optimized Paeth calculations by replacing abs() function calls with intrinsics
plus other loop optimizations. Improves avg decoding speed by about 20%.
Evidently things have changed in the compiler world since then.  The PNG_USE_ABS
macro has always been available to switch back to using abs() but it's undefined by default.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,17,https://github.com/glennrp/libpng/pull/116#issuecomment-229551217,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",Yep.  Optimizing for GCC has always been a mistake.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,18,https://github.com/glennrp/libpng/pull/116#issuecomment-229558286,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","65f4392 removes the need for the third row buffer (so only row_buf and prev_row are ever needed) and includes some optimizations to deal with the consequences.  The code size with O2 is, curiously, exactly the same as the current HEAD of the official libpng16.
I'm having difficulty getting statistically significant results; even though I use /usr/bin/time with %U (for just the user time of the process) the results seem highly dependent on, I think, file access timing.
All the same, 65f allocates half the number of row buffers as the current HEAD and gets times that are certainly about the same.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,19,https://github.com/glennrp/libpng/pull/116#issuecomment-229560887,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","I think I need to check on ARM v8 (well, RPi3) too.  Even in 1998
(actually, from the dawn of ARM, 1986) abs() of an integer expression just
computed was one instruction, when correctly compiled; RSBMI result, arg,
#0; if (flags say minus) result := 0 - arg.

Since the heuristic depends so heavily on an operation conditional on
'minus' there really shouldn't be much change on ARM with a good compiler.

Gresham wrote a law for compilers.
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/glennrp,20,https://github.com/glennrp/libpng/pull/116#issuecomment-229766383,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",Comparing pngcrush built with libpng-1.6.23 with and without PNG_USE_ABS produces imperceptible difference in the time to decode an all-PAETH image.  gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,21,https://github.com/glennrp/libpng/pull/116#issuecomment-229786103,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Yes; same here on the Paeth encode side (i.e. I can't get statistically
significant results testing filter=paeth; I'm really only getting something
that is probably significant with filter=sub!)

I think the only reason this shows up is because the png_setup_sub_row loop
comes down to just this (leaving out the casts to avoid undefined behavior
from clearing a sign bit):

for (i=bpp; i < row_bytes; ++i) {
   png_byte filtered = 0xFFU & (rp[i] - rp[i-bpp]));
   dp[i] = filtered;
   PNG_FILTER_HEURISTIC_SUM(sum, filtered);
}

Then the 'abs' implementation of the heuristic is twice as fast, on an
x86_64, as the (filtered < 128 ...) version with GCC 4.8.5.

Of course that is half of a very small number; 6 x86_64 instructions as
opposed to 13 (or there-abouts), so it disappears in the noise unless the
test case is set up to be really, really special.

The real argument for using abs() is that it gives the compiler a piece of
code that, with any luck, it is good at compiling; it may not always make a
difference but, absent pre-ANSI function level C compilers, it should not
make things worse.

I'm still trying to get statistically significant results.  I have an ARM
build now and it's running on the same basic CPU as the Nexus machine, but
it runs in 32-bit mode.  I don't know if the Nexus was operating in 32-bit
or 64-bit mode and it is said that the AArch64 64-bit instruction set
removes the conditional instructions (or most of them), so it would be
interesting to know if the Nexus is 64 or 32-bit.

I'm left wondering whether the whole thing comes down to bogus compilation
of that particular loop with GCC 4.6 and 4.8.5, but until I can reliably
get statistically significant results (I think I need to use the
clock_gettime approach from timepng) I'm unwilling to run hundreds of tests
on different compiler versions.

John Bowler",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,22,https://github.com/glennrp/libpng/pull/116#issuecomment-230778171,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Sorry for the delayed response!

I used GCC 4.8.5 and a minimally configure libpng, producing (at -O2) a statically linked pngcp of text size 58kbytes on X86-64. I used Glenn's hand duplicated 291xxx revision and the 1.6 ed5xxx tip revision.
...
So far as png_write_find_filter is concerned, however, it took 1.79% of the time in 291 and the non-inlined function png_setup_sub_row took the equivalent of 6.56% of the samples in ed5 (png_write_find_filter did not appear in ed5). The difference, 4.79%, accounts for the increased samples in ed5 even though other sample counts moved around quite a lot in other functions; I assume that this is simply a result of the change in png_write_find_filter changing where cache waits happen. The time increase is 6.56/1.79 = 3.66.

Thanks for your time and effort in reproducing this.  I'm a little confused about why the paeth filter shows up on the profile when you are specifying filter=sub, but I understand the general results.
Just a guess as to why your results seem to be more zlib dominated than ours: we are compressing web graphics which should have more identical pixels and be easier to handle than a photograph (for example).

Just eliminating the 'if (sum > lmins)' test doesn't make much difference; less than 0.5s. (Notice that the test is unnecessary; overflow is now handled so it is only worth doing as an optimzation!) The problem is that the code without the 'sum' calculation introduces many instructions into the loop. Without it the inlined version is a minimal byte subtract/copy; there are 6 instructions in the whole loop, including 3 for the loop counter/test. With the sum calculation there are 16 instructions, with the same three instruction overhead, and, curiously, the copy part is compiled with 4 instructions not 3. The sum calculation takes 7 instructions and the test 2.

Yes absolutely!  I think it'd be great to get those extra instructions out of the loop.

I was actually able to eliminate the regressions using -O2 and -finline-functions (function gets inlined, sum calculation get optimized out), but it turns out that isn't an acceptable fix for our platform.  Sorry for having misspoken earlier.
I'm currently awaiting performance results of using PNG_USE_ABS.  I'm hopeful it will help, but not so confident that it will completely solve the problem.
John, I've also been reading through your recent commits to jbowler/libpng.  Looks like https://github.com/jbowler/libpng/commit/6a3797ae7dd79419b56e18e2494fe204dcfd5f76 would solve the regression?  Is this going to be merged to libpng16?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/jbowler,23,https://github.com/glennrp/libpng/pull/116#issuecomment-230828723,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Paeth shows up in all the tests on the read side because the input files
(which are web graphics, sampled from Googles image search a while back)
use Paeth.
My testing covers 'all' filters, the 'fast' subset (none,sub,up) and my
'superfast' subset (none,sub) together with each filter individually.  I
don't believe other combos are worth testing in 1.6 because, in practice,
no one will select them and the results are showing that obvious
optimizations can have bad effects on the 'all' case; that case is the
primary one to optimize because it is the default!
My tests take some time because I'm running them with the default zlib
settings, with strategy/filtered, level/3 (which is a recommended high
speed setting) and with strategy/RLE level/1 (which is the fastest and
actually quite good for read speed.)  I'm also running on a high speed
x86_64 box and on an ARMv8 (RPi3) running in ARMv7a emulation mode; I don't
know whether the Nexus platform is AArch 64-bit or ARM 32-bit; is it
possible to reveal that?  I've got no way of doing 64-bit testing unless
the RPi foundation release a 64-bit kernel/user-space and I suspect they
won't do that because, quite frankly, running 64-bit, even on a Nexus,
seems very likely to be a mistake.
The executive summary is that I can't repro anything like a 30% change
unless I compress really really big (ridiculously big) images; 4000+ pixels
per row.  On those images the timing figures flip from a significant
inter-dependence between the filter code and the deflate code to one where
the deflate time and the row-filter time seem independent.  Reducing the
time in deflate (via the RLE/1 settings) then starts to show timing figures
in the write side (specifically just measuring the time for png_write_png
to complete) that show up to about 15% differences.
The positive effect of abs() is restricted to the normal sized images, and
is not consistent.  With the large images abs results in a slow-down with
either GCC 4.8.5 or 5.4.0 on both platforms.  I don't understand why this
happens on ARM, maybe the v7a core no longer supports RSBMI, or maybe GCC
still generates bad code.  After all the x86_64 code looks pretty weird too.
The one good thing is that I can halve the dynamic memory requirement of a
'streamed' write where the row is sufficiently large without much affecting
the time.  Worst case is 10%, and I think that is because my new code is
using abs().  (I'm going to change it to handle PNG_USE_ABS).
As with any optimization doing it the first time requires a lot of
measurements.
John Bowler",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,24,https://github.com/glennrp/libpng/pull/116#issuecomment-230837229,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Paeth shows up in all the tests on the read side because the input files
(which are web graphics, sampled from Googles image search a while back)
use Paeth.

Ahh thanks!

My tests take some time because I'm running them with the default zlib
settings, with strategy/filtered, level/3 (which is a recommended high
speed setting) and with strategy/RLE level/1 (which is the fastest and
actually quite good for read speed.)  I'm also running on a high speed
x86_64 box and on an ARMv8 (RPi3) running in ARMv7a emulation mode; I don't
know whether the Nexus platform is AArch 64-bit or ARM 32-bit; is it
possible to reveal that?  I've got no way of doing 64-bit testing unless
the RPi foundation release a 64-bit kernel/user-space and I suspect they
won't do that because, quite frankly, running 64-bit, even on a Nexus,
seems very likely to be a mistake.

FWIW, the Nexus 5X and 6P are AArch64.

The executive summary is that I can't repro anything like a 30% change
unless I compress really really big (ridiculously big) images; 4000+ pixels
per row.  On those images the timing figures flip from a significant
inter-dependence between the filter code and the deflate code to one where
the deflate time and the row-filter time seem independent.  Reducing the
time in deflate (via the RLE/1 settings) then starts to show timing figures
in the write side (specifically just measuring the time for png_write_png
to complete) that show up to about 15% differences.

Yes, I'd agree that the 30% change is an anomaly related to a specific test case.  And the performance is highly variable across image size/content/filter settings/zlib setting etc.  But I think we have identified to cause of the change.

As with any optimization doing it the first time requires a lot of
measurements.

Yes thanks for your efforts on this.  To follow up on my above comment, unfortunately the PNG_USE_ABS change hasn't impacted any of my tests.  Any news on integrating jbowler@6a3797a?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/glennrp,25,https://github.com/glennrp/libpng/pull/116#issuecomment-231393447,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!",See commit f7d5419,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,116,2016-06-16T13:37:25Z,2016-06-20T15:47:25Z,2016-07-08T15:56:00Z,CLOSED,False,0,6,1,https://github.com/mattsarett,Fix png encoding perf regression in libpng 1.6,1,[],https://github.com/glennrp/libpng/pull/116,https://github.com/mattsarett,26,https://github.com/glennrp/libpng/pull/116#issuecomment-231397985,"Applications that care about encoding performance may choose to
select a fast encoding filter.  Ex:
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_SUB);
or
png_set_filter(png, PNG_FILTER_TYPE_BASE, PNG_FILTER_UP);
This improves encode performance (1) because applying the filter
is fast and (2) because we have selected a single filter, there
is no need to calculate and track filter choosing heuristics.
libpng 1.2 takes advantage of both (1) and (2), but I'm seeing a
significant performance regression in libpng 1.6 (1.75x slower on
a particular benchmark) because it does not take advantage of (2).
png_setup_sub_row() is inlined, so the compiler should be able to
detect that ""sum"" is unused and decide not to calculate it.
However, since we check the ""sum"" on every loop iteration, the sum
is being calculated regardless of whether we need it or not.
I'm proposing that we don't bother to check (sum > lmin) on the
""fast filters"" since they are fast anyway (so it's not too bad to
complete the entire row, even if it turns out to be unnecessary).
This will make them much faster when they are the only filter
selected.
Another potential fix would be to actually inline the
png_setup_sub_row() code (like libpng 1.2 does) rather than
sharing the code in a function.
Let me know what you think!","Woohoo, thanks Glenn!",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,117,2016-06-20T13:07:18Z,2016-06-20T13:30:47Z,2016-06-20T13:30:47Z,MERGED,True,1,1,1,https://github.com/mattsarett,More efficient absolute value on SSE2,1,[],https://github.com/glennrp/libpng/pull/117,https://github.com/mattsarett,1,https://github.com/glennrp/libpng/pull/117,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,117,2016-06-20T13:07:18Z,2016-06-20T13:30:47Z,2016-06-20T13:30:47Z,MERGED,True,1,1,1,https://github.com/mattsarett,More efficient absolute value on SSE2,1,[],https://github.com/glennrp/libpng/pull/117,https://github.com/mattsarett,2,https://github.com/glennrp/libpng/pull/117#issuecomment-227136738,,"On behalf of mayeut from:
#88 (comment)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,118,2016-06-23T00:51:58Z,2016-06-23T15:52:45Z,2016-06-23T15:52:46Z,MERGED,True,97,78,11,https://github.com/jbowler,Libpng16,8,[],https://github.com/glennrp/libpng/pull/118,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/118,"The real changes are at the bottom; the merges end up as a no-op (they're there because of the hand-merge of the image size check pull request).
I split them up into four; the pngstest.c one definitely needs to go in.  The projects/vstudio one will probably help avoid questions about warnings in the future because it effectively documents them.  The other two are the specific fixes for the warnings we are talking about; if these don't go in zlib.props needs to have the corresponding warning number added to the list.  Given that the pngwutil.c one is at level 2 it should probably go in just to avoid annoyance.  The pngvalid.c one is harmless, a big ugly (a self-evidently redundant cast) but harmless.","The real changes are at the bottom; the merges end up as a no-op (they're there because of the hand-merge of the image size check pull request).
I split them up into four; the pngstest.c one definitely needs to go in.  The projects/vstudio one will probably help avoid questions about warnings in the future because it effectively documents them.  The other two are the specific fixes for the warnings we are talking about; if these don't go in zlib.props needs to have the corresponding warning number added to the list.  Given that the pngwutil.c one is at level 2 it should probably go in just to avoid annoyance.  The pngvalid.c one is harmless, a big ugly (a self-evidently redundant cast) but harmless.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,119,2016-06-23T16:23:47Z,2016-06-23T17:15:00Z,2016-06-23T17:15:01Z,MERGED,True,9,9,1,https://github.com/jbowler,SKIP definition in pngstest.c misplaced,1,[],https://github.com/glennrp/libpng/pull/119,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/119,"The SKIP definition needs to come after the png.h include (see all the other .c
files in contrib/libtests) because it depends on PNG_LIBPNG_VER.  This commit
puts it in the correct place.
Signed-off-by: John Bowler jbowler@acm.org","The SKIP definition needs to come after the png.h include (see all the other .c
files in contrib/libtests) because it depends on PNG_LIBPNG_VER.  This commit
puts it in the correct place.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,119,2016-06-23T16:23:47Z,2016-06-23T17:15:00Z,2016-06-23T17:15:01Z,MERGED,True,9,9,1,https://github.com/jbowler,SKIP definition in pngstest.c misplaced,1,[],https://github.com/glennrp/libpng/pull/119,https://github.com/jbowler,2,https://github.com/glennrp/libpng/pull/119#issuecomment-228104623,"The SKIP definition needs to come after the png.h include (see all the other .c
files in contrib/libtests) because it depends on PNG_LIBPNG_VER.  This commit
puts it in the correct place.
Signed-off-by: John Bowler jbowler@acm.org",git cherry-pick from libpng16,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,120,2016-07-01T19:21:35Z,2016-07-01T23:43:15Z,2016-07-02T00:26:52Z,MERGED,True,2522,3,7,https://github.com/jbowler,20160701 pngcp,3,[],https://github.com/glennrp/libpng/pull/120,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/120,This adds pngcp to libpng 16 as a new tool.  The changes outside pngcp.c are to fix bugs in the #ifdefs revealed by contrib/conftests/pngcp.dfa.,This adds pngcp to libpng 16 as a new tool.  The changes outside pngcp.c are to fix bugs in the #ifdefs revealed by contrib/conftests/pngcp.dfa.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,121,2016-07-02T05:43:51Z,2016-07-02T13:55:15Z,2016-07-02T14:50:56Z,MERGED,True,405,120,11,https://github.com/jbowler,20160701 pngcp 1.7,3,[],https://github.com/glennrp/libpng/pull/121,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/121,Port libpng 1.6 pngcp related changes to 1.7,Port libpng 1.6 pngcp related changes to 1.7,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,121,2016-07-02T05:43:51Z,2016-07-02T13:55:15Z,2016-07-02T14:50:56Z,MERGED,True,405,120,11,https://github.com/jbowler,20160701 pngcp 1.7,3,[],https://github.com/glennrp/libpng/pull/121,https://github.com/jbowler,2,https://github.com/glennrp/libpng/pull/121#issuecomment-230104800,Port libpng 1.6 pngcp related changes to 1.7,"Somehow the latest changes for libpng 1.7 to contrib/libtests/pngimage.c
got lost; it's now identical to libpng 1.6 one and, as a result, building
-DPNG_NO_WRITE_INTERLACE fails.
I'll send another pull request
John
On Sat, Jul 2, 2016 at 6:55 AM, Glenn Randers-Pehrson <
notifications@github.com> wrote:

Merged #121 #121.
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#121 (comment), or mute the
thread
https://github.com/notifications/unsubscribe/AAfSaFh29cu-kFhlk5RAH5f6DOLBXPCfks5qRm3EgaJpZM4JDm5i
.


John Bowler john.cunningham.bowler@gmail.com
+1 (541) 450-9885
PO BOX 3151
KERBY OR 97531-3151
USA",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,122,2016-07-02T14:51:21Z,2016-07-02T15:09:06Z,2016-07-02T15:09:06Z,MERGED,True,25,14,1,https://github.com/jbowler,pngimage: correct #define checking,1,[],https://github.com/glennrp/libpng/pull/122,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/122,"In libpng 1.7 pngimage needs to check PNG_WRITE_PNG_SUPPORTED (new in 1.7), not
PNG_WRITE_SUPPORTED because png_write_png can be disabled without disabling
PNG_WRITE_SUPPORTED.  Copied the approach from 1.6 pngcp.c (so this still works
in 1.6 as well.)","In libpng 1.7 pngimage needs to check PNG_WRITE_PNG_SUPPORTED (new in 1.7), not
PNG_WRITE_SUPPORTED because png_write_png can be disabled without disabling
PNG_WRITE_SUPPORTED.  Copied the approach from 1.6 pngcp.c (so this still works
in 1.6 as well.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,123,2016-07-02T18:56:30Z,2016-07-02T19:33:35Z,2016-07-02T20:59:27Z,MERGED,True,25,14,1,https://github.com/jbowler,pngimage: correct #define checking (cherry-picked from libpng17),1,[],https://github.com/glennrp/libpng/pull/123,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/123,"In libpng 1.7 pngimage needs to check PNG_WRITE_PNG_SUPPORTED (new in 1.7), not
PNG_WRITE_SUPPORTED because png_write_png can be disabled without disabling
PNG_WRITE_SUPPORTED.  Copied the approach from 1.6 pngcp.c (so this still works
in 1.6 as well.)","In libpng 1.7 pngimage needs to check PNG_WRITE_PNG_SUPPORTED (new in 1.7), not
PNG_WRITE_SUPPORTED because png_write_png can be disabled without disabling
PNG_WRITE_SUPPORTED.  Copied the approach from 1.6 pngcp.c (so this still works
in 1.6 as well.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,124,2016-07-03T20:52:57Z,2016-07-03T23:11:14Z,2016-07-03T23:11:14Z,MERGED,True,11,4,1,https://github.com/jbowler,pngcp bug fixes,1,[],https://github.com/glennrp/libpng/pull/124,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/124,"The fixed size buffer for the file name being processed could have a byte
written beyond the end; a bug where the test was updated without changing the
size of the buffer.  This commit reduces the buffer to the system maximum.
png_getrowbytes could, in theory, return 0; probably only if there is a bug in
libpng but the code now checks.
Signed-off-by: John Bowler jbowler@acm.org","The fixed size buffer for the file name being processed could have a byte
written beyond the end; a bug where the test was updated without changing the
size of the buffer.  This commit reduces the buffer to the system maximum.
png_getrowbytes could, in theory, return 0; probably only if there is a bug in
libpng but the code now checks.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,127,2016-07-16T15:30:27Z,2016-07-16T16:39:02Z,2016-07-17T06:37:07Z,MERGED,True,12,15,4,https://github.com/jbowler,Remove/rearrange png_struct fields,1,[],https://github.com/glennrp/libpng/pull/127,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/127,"Certain fields are only used in reading.  This attempts to do some minor
cleanup/rearrangement.
Signed-off-by: John Bowler jbowler@acm.org","Certain fields are only used in reading.  This attempts to do some minor
cleanup/rearrangement.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,128,2016-07-23T21:08:51Z,2016-07-23T21:42:32Z,2016-07-23T23:32:34Z,MERGED,True,32,3,3,https://github.com/jbowler,Fix debug test of output gamma,1,[],https://github.com/glennrp/libpng/pull/128,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/128,"The test would fire when a gamma transform was eliminated because it was not
significant if other transforms remained.  This is a debug-only change to alter
the test to check for an insignificant mis-match of the actual output gamma from
the requested output gamma.
Signed-off-by: John Bowler jbowler@acm.org","The test would fire when a gamma transform was eliminated because it was not
significant if other transforms remained.  This is a debug-only change to alter
the test to check for an insignificant mis-match of the actual output gamma from
the requested output gamma.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,129,2016-08-10T22:45:21Z,2016-08-11T01:53:17Z,2016-08-11T01:53:17Z,MERGED,True,85,38,5,https://github.com/jbowler,[libpng16] Reject oversized iCCP profile length,1,[],https://github.com/glennrp/libpng/pull/129,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/129,"The code now validates the ICC profile length against the user chunk limit
before the buffer is allocated, as opposed to doing it while the buffer is read.
This removes the potential to consume virtual address space with a carefully
crafted ICC profile; only an issue on 32-bit systems where a valid profile can
be up to 2^32-4 bytes in length.  libpng never writes beyond the application
supplied limit, but previously it did allocate a buffer of the size specified in
the profile header.  The exploitability of this is almost zero; the address
space is released as soon as the PNG read completes.
Also clean up PNG_DEBUG compile of pngtest.c.
Signed-off-by: John Bowler jbowler@acm.org","The code now validates the ICC profile length against the user chunk limit
before the buffer is allocated, as opposed to doing it while the buffer is read.
This removes the potential to consume virtual address space with a carefully
crafted ICC profile; only an issue on 32-bit systems where a valid profile can
be up to 2^32-4 bytes in length.  libpng never writes beyond the application
supplied limit, but previously it did allocate a buffer of the size specified in
the profile header.  The exploitability of this is almost zero; the address
space is released as soon as the PNG read completes.
Also clean up PNG_DEBUG compile of pngtest.c.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,131,2016-08-29T13:41:01Z,2016-08-29T14:14:22Z,2016-08-29T22:47:37Z,MERGED,True,544,7,8,https://github.com/mandar-sahastrabuddhe,Added build support for MIPS MSA,1,[],https://github.com/glennrp/libpng/pull/131,https://github.com/mandar-sahastrabuddhe,1,https://github.com/glennrp/libpng/pull/131,Added build support for MIPS MSA with one msa optimized function: png_read_filter_row_up_msa,Added build support for MIPS MSA with one msa optimized function: png_read_filter_row_up_msa,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,131,2016-08-29T13:41:01Z,2016-08-29T14:14:22Z,2016-08-29T22:47:37Z,MERGED,True,544,7,8,https://github.com/mandar-sahastrabuddhe,Added build support for MIPS MSA,1,[],https://github.com/glennrp/libpng/pull/131,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/131#issuecomment-243280961,Added build support for MIPS MSA with one msa optimized function: png_read_filter_row_up_msa,This is included in libpng-1.6.25rc03.  I don't have access to a MIPS platform to test it though.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,132,2016-08-30T08:31:09Z,2016-08-30T09:27:04Z,2016-08-30T09:27:04Z,MERGED,True,654,3,3,https://github.com/mandar-sahastrabuddhe,Added MIPS MSA optimization for filter functions,2,[],https://github.com/glennrp/libpng/pull/132,https://github.com/mandar-sahastrabuddhe,1,https://github.com/glennrp/libpng/pull/132,"Added MIPS MSA optimization for following functions:
1. png_read_filter_row_sub4_msa
2. png_read_filter_row_avg4_msa
3. png_read_filter_row_paeth4_msa
4. png_read_filter_row_sub3_msa
5. png_read_filter_row_avg3_msa
6. png_read_filter_row_paeth3_msa","Added MIPS MSA optimization for following functions:
1. png_read_filter_row_sub4_msa
2. png_read_filter_row_avg4_msa
3. png_read_filter_row_paeth4_msa
4. png_read_filter_row_sub3_msa
5. png_read_filter_row_avg3_msa
6. png_read_filter_row_paeth3_msa",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,134,2016-09-01T20:33:40Z,2016-09-01T22:37:51Z,2016-09-01T22:37:51Z,MERGED,True,5,4,1,https://github.com/jbowler,Libpng16,2,[],https://github.com/glennrp/libpng/pull/134,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/134,Fix for 1.6.24 bug in pngfix (#130),Fix for 1.6.24 bug in pngfix (#130),True,{}
glennrp/libpng,https://github.com/glennrp/libpng,135,2016-09-03T02:29:55Z,2016-09-03T16:52:13Z,2016-09-03T16:52:13Z,MERGED,True,17,5,1,https://github.com/jbowler,[libpng16] png_set_pCAL: do not png_error on read,1,[],https://github.com/glennrp/libpng/pull/135,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/135,"Because png_handle_pCAL has allocated memory to free.
Signed-off-by: John Bowler jbowler@acm.org","Because png_handle_pCAL has allocated memory to free.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/140,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org","Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/140#issuecomment-250886375,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org","Your pull request came in after I pushed a fix.  I had kept the ""while (y-- > 0)""  statements but added 1 to
the initialization of the various ""y"" and changed the statments to ""while (y-- > 1)"".  One of the loop variable (ntext) was being used.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/jbowler,3,https://github.com/glennrp/libpng/pull/140#issuecomment-250886418,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org","Um, where did those come from?  They weren't there when I submitted the pull request.  (This from gentoo; Qupzilla, which works quite well.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/140#issuecomment-250886601,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org",While (ntext-- > 0) is in pngunknown.c,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/jbowler,5,https://github.com/glennrp/libpng/pull/140#issuecomment-250886603,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org","I don't think you can guarantee ab-initio that 'y' is not 0xFFFFFFFF.
I did think of changing it to just put the --y after the {, but once I had looked at the loop body it was obvious (aka /y/) that the control variable wasn't used so the for loop expansion seemed more correct; the code does not use the value of 'y-1' when 'y' is 0, and must not.
It's clearer in pngvalid.c 2425 where, irc, the variable is 'rows'.  Really 'y' should be 'h' in all the simplified API cases; obfuscated code on my part.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/glennrp,6,https://github.com/glennrp/libpng/pull/140#issuecomment-250886672,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org",OK.  I don't mind switching from while() to for() anyhow.  Just take care with ntext.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/glennrp,7,https://github.com/glennrp/libpng/pull/140#issuecomment-250886741,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org",Height is limited to 7FFFFFF so y+1 will be OK.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/jbowler,8,https://github.com/glennrp/libpng/pull/140#issuecomment-250886850,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org","I commented the ntext case.
I did review all of the changes to double check that the control variable was not used after the loop.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,140,2016-10-01T01:56:26Z,2016-10-01T02:57:43Z,2016-10-01T02:57:43Z,MERGED,True,52,21,6,https://github.com/jbowler,Unsigned overflow,1,[],https://github.com/glennrp/libpng/pull/140,https://github.com/jbowler,9,https://github.com/glennrp/libpng/pull/140#issuecomment-250887422,"Remove all currently detected cases of unsigned overflow.  Detection is
runtime, so test case dependent.  The changes to pngvalid.c eliminate
spurious and probably invalid tests with one while loop exception.
Apart from that and the change to the dependence on the intended
unsigned overflow in pngtrans.c the changes are limited to altering the
meme for an unsigned 'x' from:
while (x-- > 0)
to
for (; x > 0; --x)
This works because, in all cases, the control variable is not used in
the loop.  The 'while' meme was, at one time, warn'ed by GCC so it is
probably a good change, for some weird religious value of good.
Signed-off-by: John Bowler jbowler@acm.org","The thing about 'x+1' is that it is not self-evident that it won't overflow, so using the meme to prevent an overflow in another place seems wrong.   The while loops (both the ntext cases and the y cases) were being lazy; relying on the post-decrement value not being used, so regardless of my objection to the original report not being, itself, ISO-C, it seems reasonable to adopt a meme where the overflow cannot happen.
The for loop is self evidently correct even if the control variable is used in the loop.  The only change is to the use after the loop and, yes, 'y' cannot be 0 (I'm not so sure about ntext), but if y, or ntext, is 0, surely the code after the loop must be bogus?   (Not wrong, bogus; it's subtly different.)
Oh, and I hate it when people fail to put the dot over an i, unless they are Turkish of course.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,141,2016-10-28T09:51:07Z,2016-11-09T09:58:38Z,2016-11-09T09:58:38Z,CLOSED,False,25,0,1,https://github.com/andy-held,added PNG_ARM_NEON switch and enabled building with NEON support with CMake,1,[],https://github.com/glennrp/libpng/pull/141,https://github.com/andy-held,1,https://github.com/glennrp/libpng/pull/141,"CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is set to 'check' and NEON support is checked dynamically at runtime. Other possible values are 'on' and 'off'. The deprecated option 'api' is not used here.","CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is set to 'check' and NEON support is checked dynamically at runtime. Other possible values are 'on' and 'off'. The deprecated option 'api' is not used here.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,141,2016-10-28T09:51:07Z,2016-11-09T09:58:38Z,2016-11-09T09:58:38Z,CLOSED,False,25,0,1,https://github.com/andy-held,added PNG_ARM_NEON switch and enabled building with NEON support with CMake,1,[],https://github.com/glennrp/libpng/pull/141,https://github.com/jbowler,2,https://github.com/glennrp/libpng/pull/141#issuecomment-259259384,"CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is set to 'check' and NEON support is checked dynamically at runtime. Other possible values are 'on' and 'off'. The deprecated option 'api' is not used here.","Regardless of the cmake stuff there seems to be some misunderstanding here, from the comment (the change matches this):
""Behaviour is copied from autoconf; by default PNG_ARM_NEON is set to 'check' and NEON support is checked dynamically at runtime. Other possible values are 'on' and 'off'. The deprecated option 'api' is not used here.""
The default is, and must be, to not set PNG_ARM_NEON.
It is the 'check' option which is deprecated!  It only works on a subset of GNU/Linux operating systems, so enabling it by default will break libpng on pretty much everything except the slew of IoT devices
that are not secure.
In any case the only reason --enable-arm-neon still exists in 1.5 and 1.6 (it isn't in 1.7) is that it was a part of the original, very broken, implementation.  All it does is set certain build configuration CFLAGS  however, as was pointed out soon after people started moving from 1.4, this can't be done at configuration time; it has to be done automatically at compile time.  This is why the default must be 'unset' (see the test in pngpriv.h).
Libpng 1.6 and, I think 1.5, automatically handle the ARM NEON optimizations.  I'm not aware of any situation where this doesn't work though as with any configurable item of libpng people might want to
change things; this is done by setting CFLAGS when pnglibconf.h is built.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,141,2016-10-28T09:51:07Z,2016-11-09T09:58:38Z,2016-11-09T09:58:38Z,CLOSED,False,25,0,1,https://github.com/andy-held,added PNG_ARM_NEON switch and enabled building with NEON support with CMake,1,[],https://github.com/glennrp/libpng/pull/141,https://github.com/andy-held,3,https://github.com/glennrp/libpng/pull/141#issuecomment-259375654,"CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is set to 'check' and NEON support is checked dynamically at runtime. Other possible values are 'on' and 'off'. The deprecated option 'api' is not used here.","Oh, I see.
Evidently I did not understand this correctly.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,142,2016-11-11T16:15:39Z,2016-11-11T16:16:15Z,2016-11-11T16:16:15Z,CLOSED,False,18,1,1,https://github.com/andy-held,added PNG_ARM_NEON switch and enabled building with NEON support in CMake,1,[],https://github.com/glennrp/libpng/pull/142,https://github.com/andy-held,1,https://github.com/glennrp/libpng/pull/142,"CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is not set. If it is manually set to 'api', 'on' or 'off' the same defines as in using autotools are defined. The deprecated 'check' option is not supported here.","CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is not set. If it is manually set to 'api', 'on' or 'off' the same defines as in using autotools are defined. The deprecated 'check' option is not supported here.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,143,2016-11-11T16:33:13Z,2016-12-27T16:58:06Z,2016-12-27T16:58:06Z,CLOSED,False,18,1,1,https://github.com/andy-held,added sources under 'arm/' to build when building for arm with CMake,1,[],https://github.com/glennrp/libpng/pull/143,https://github.com/andy-held,1,https://github.com/glennrp/libpng/pull/143,"CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is not set. If it is manually set to 'api', 'on' or 'off' the same defines as in using autotools are defined. The deprecated 'check' option is not supported here.","CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is not set. If it is manually set to 'api', 'on' or 'off' the same defines as in using autotools are defined. The deprecated 'check' option is not supported here.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,143,2016-11-11T16:33:13Z,2016-12-27T16:58:06Z,2016-12-27T16:58:06Z,CLOSED,False,18,1,1,https://github.com/andy-held,added sources under 'arm/' to build when building for arm with CMake,1,[],https://github.com/glennrp/libpng/pull/143,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/143#issuecomment-269352273,"CMAKE_SYSTEM_PROCESSOR is checked to discern whether to build for arm or not, as it is the canonical variable for this.
Behaviour is copied from autoconf; by default PNG_ARM_NEON is not set. If it is manually set to 'api', 'on' or 'off' the same defines as in using autotools are defined. The deprecated 'check' option is not supported here.",I think this has been completed in the libpng16 and libpng17 branches.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,145,2016-12-27T01:14:27Z,2016-12-27T01:29:46Z,2016-12-27T01:29:46Z,MERGED,True,32,27,4,https://github.com/jbowler,Libpng15,3,[],https://github.com/glennrp/libpng/pull/145,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/145,"Each of the patches here can be applied independently (I think); i.e. there should be no inconvenient overlap.  I recommend the first patch to ensure consistency in pngvalid; I'll send pull requests for 1.6 and 1.7 with the same patch (I just git am'ed it in each branch).
The second (unsigned overflow) patch should be harmless and, with the third patch, it allows builds with clang unsigned overflow checking to pass.  It isn't necessary; the unsigned overflow is safe, but it allows builds with that option.
The third patch fixes a genuine signed overflow problem; signed overflow behavior is undefined so it is worthwhile to fix it, however 1.5 does actually work on all the platforms it is used on (else someone would have reported this before) and this patch is moderately big for a release which has been superseded (by 1.6).","Each of the patches here can be applied independently (I think); i.e. there should be no inconvenient overlap.  I recommend the first patch to ensure consistency in pngvalid; I'll send pull requests for 1.6 and 1.7 with the same patch (I just git am'ed it in each branch).
The second (unsigned overflow) patch should be harmless and, with the third patch, it allows builds with clang unsigned overflow checking to pass.  It isn't necessary; the unsigned overflow is safe, but it allows builds with that option.
The third patch fixes a genuine signed overflow problem; signed overflow behavior is undefined so it is worthwhile to fix it, however 1.5 does actually work on all the platforms it is used on (else someone would have reported this before) and this patch is moderately big for a release which has been superseded (by 1.6).",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,146,2016-12-27T01:20:52Z,2016-12-27T01:57:45Z,2016-12-27T01:57:45Z,MERGED,True,5,2,1,https://github.com/jbowler,Remove 'defined' within macro,1,[],https://github.com/glennrp/libpng/pull/146,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/146,"This removes the use of a macro containing the pre-processor 'defined'
operator.  It is unclear whether this is valid; a macro which
""generates"" 'defined' is not permitted, but the use of the work
""generates"" within the C90 standard seems to imply more than simple
substitution of an expression itself containing a well-formed defined
operation.
Signed-off-by: John Bowler jbowler@acm.org","This removes the use of a macro containing the pre-processor 'defined'
operator.  It is unclear whether this is valid; a macro which
""generates"" 'defined' is not permitted, but the use of the work
""generates"" within the C90 standard seems to imply more than simple
substitution of an expression itself containing a well-formed defined
operation.
Signed-off-by: John Bowler jbowler@acm.org",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,147,2016-12-27T01:26:31Z,2016-12-27T16:35:05Z,2016-12-27T16:35:05Z,MERGED,True,0,0,0,https://github.com/jbowler,Remove use of 'defined' within a macro expansion,4,[],https://github.com/glennrp/libpng/pull/147,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/147,"This contains the libpng15 change to pngvalid.c plus removal of an additional pair of 'defined within macro' cases that only exists in 1.7
pngvalid.c is a copy of 1.5; this contains the copyright change you (so far as I can see) made a while back in 1.5 and 1.6.
At this point clang unsigned overflow sanity checking will not pass on 1.7; clang seems to object to any expression which converts a negative integer to unsigned.  Adding 'U' to some constants will probably fix it but I'm not going to even try until I've merged my development branch back in.","This contains the libpng15 change to pngvalid.c plus removal of an additional pair of 'defined within macro' cases that only exists in 1.7
pngvalid.c is a copy of 1.5; this contains the copyright change you (so far as I can see) made a while back in 1.5 and 1.6.
At this point clang unsigned overflow sanity checking will not pass on 1.7; clang seems to object to any expression which converts a negative integer to unsigned.  Adding 'U' to some constants will probably fix it but I'm not going to even try until I've merged my development branch back in.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,147,2016-12-27T01:26:31Z,2016-12-27T16:35:05Z,2016-12-27T16:35:05Z,MERGED,True,0,0,0,https://github.com/jbowler,Remove use of 'defined' within a macro expansion,4,[],https://github.com/glennrp/libpng/pull/147,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/147#issuecomment-269349011,"This contains the libpng15 change to pngvalid.c plus removal of an additional pair of 'defined within macro' cases that only exists in 1.7
pngvalid.c is a copy of 1.5; this contains the copyright change you (so far as I can see) made a while back in 1.5 and 1.6.
At this point clang unsigned overflow sanity checking will not pass on 1.7; clang seems to object to any expression which converts a negative integer to unsigned.  Adding 'U' to some constants will probably fix it but I'm not going to even try until I've merged my development branch back in.",Not sure why this is still open.  See 8d4110b#diff-0e5c6c7610a0e71539bb73bab1bdefc0,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,148,2017-01-02T14:46:01Z,2017-01-02T15:41:25Z,2017-01-02T15:41:25Z,MERGED,True,9,2,1,https://github.com/dooglz,Add Cmake option for custom ZLib location,1,[],https://github.com/glennrp/libpng/pull/148,https://github.com/dooglz,1,https://github.com/glennrp/libpng/pull/148,"This is useful in a scenario where libpng is being built as a subproject alongside zlib by another project.
By default this is off, so won't break any existing scripts.","This is useful in a scenario where libpng is being built as a subproject alongside zlib by another project.
By default this is off, so won't break any existing scripts.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,150,2017-01-20T19:33:30Z,2017-01-20T20:46:41Z,2017-01-20T21:43:00Z,MERGED,True,5,3,1,https://github.com/RomeroMalaquias,Avoiding conditional directives that break statements,1,[],https://github.com/glennrp/libpng/pull/150,https://github.com/RomeroMalaquias,1,https://github.com/glennrp/libpng/pull/150,"Hello, this change is only aesthetic, it's a suggestion to avoid the use of conditional directives that break statements i think that kind of concern improve the code maintainability do you agree?","Hello, this change is only aesthetic, it's a suggestion to avoid the use of conditional directives that break statements i think that kind of concern improve the code maintainability do you agree?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,150,2017-01-20T19:33:30Z,2017-01-20T20:46:41Z,2017-01-20T21:43:00Z,MERGED,True,5,3,1,https://github.com/RomeroMalaquias,Avoiding conditional directives that break statements,1,[],https://github.com/glennrp/libpng/pull/150,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/150#issuecomment-274169049,"Hello, this change is only aesthetic, it's a suggestion to avoid the use of conditional directives that break statements i think that kind of concern improve the code maintainability do you agree?","I agree.  In fact, it's in the libpng17 TODO list:
Refactor preprocessor conditionals to compile entire statements",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,150,2017-01-20T19:33:30Z,2017-01-20T20:46:41Z,2017-01-20T21:43:00Z,MERGED,True,5,3,1,https://github.com/RomeroMalaquias,Avoiding conditional directives that break statements,1,[],https://github.com/glennrp/libpng/pull/150,https://github.com/glennrp,3,https://github.com/glennrp/libpng/pull/150#issuecomment-274172841,"Hello, this change is only aesthetic, it's a suggestion to avoid the use of conditional directives that break statements i think that kind of concern improve the code maintainability do you agree?","The declaration of is_invalid_depth has to appear ahead of the png_debug statement, to avoid
a clang warning about misplaced declaration.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,150,2017-01-20T19:33:30Z,2017-01-20T20:46:41Z,2017-01-20T21:43:00Z,MERGED,True,5,3,1,https://github.com/RomeroMalaquias,Avoiding conditional directives that break statements,1,[],https://github.com/glennrp/libpng/pull/150,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/150#issuecomment-274175950,"Hello, this change is only aesthetic, it's a suggestion to avoid the use of conditional directives that break statements i think that kind of concern improve the code maintainability do you agree?","I moved the declaration of is_invalid_depth and applied the same treatment to the other colortypes.
See f604c74",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,1,https://github.com/glennrp/libpng/pull/151,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,2,https://github.com/glennrp/libpng/pull/151#issuecomment-276245544,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@glennrp
Code is ready. Please review and merge it. It is for POWER8 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,3,https://github.com/glennrp/libpng/pull/151#issuecomment-276276087,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",I should add that my position is that using configure to enable or disable hardware optimizations is fundamentally broken; it breaks multilib builds because those have to decide at compile time what to build.  The ARM optimizations only have the configure option to support older build scripts that use it; deleting it requires a major version change.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,4,https://github.com/glennrp/libpng/pull/151#issuecomment-276336914,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler thanks for you remark about adding ""deprecated"" code. I will remove this phrase from comment.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,5,https://github.com/glennrp/libpng/pull/151#issuecomment-276346681,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler I've change default runtime CPU checking method to auxv. It requires >=2.6 kernel, is it okay?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,6,https://github.com/glennrp/libpng/pull/151#issuecomment-276348945,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler @significant-bit It's ready to review (again). The only problem is I doubt if my files' license headers are correct.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,7,https://github.com/glennrp/libpng/pull/151#issuecomment-276503582,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler could you review it please?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,8,https://github.com/glennrp/libpng/pull/151#issuecomment-276563011,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","You changed it to use auxv, which is even less portable than /proc/cpuinfo
and is only nominally supported by Android; if you try to build code using
auxv (at least in the ARM variant) it doesn't even link.

You also deleted the explanation of the option, which is, I guess, a good
way of stopping people using it; I was pointing out that it wasn't
deprecated because you were supporting it!

My position was and still is that doing this in configure (or, for that
matter, cmake, or the makefiles) is flawed because it cannot possibly work
in a multilib build and anyway the approach isn't portable (show me a
Windows (!Ubuntu) version, show me a BSD version), and it creates a never
ending stream of bugs which no one understands (see the history of the ARM
attempts).

That doesn't mean you can't do it, but you have to work out a response for
when the bugs come from people building on Windows or BSD or, indeed,
Solaris; a system which supports PowerPC (it was designed for it) but which
doesn't have /proc/cpuinfo.

John Bowler
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,9,https://github.com/glennrp/libpng/pull/151#issuecomment-276654737,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler What should I do? Shall I add comment about advicing not using this internal check code? Or add support for *BSD, OSX detection ?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,10,https://github.com/glennrp/libpng/pull/151#issuecomment-276671690,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler I added warning about list of runtime detection supported OSes. Issue starter said he wants only linux support (which is implemented). When compiling, developer will receive warning and check that list in README. If he will need this feature on other OS he should implement it himself. Is it acceptable solution?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,11,https://github.com/glennrp/libpng/pull/151#issuecomment-276705720,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","That seems reasonable.  So long as the default is to use the compiler flags
and there is some warning there it should raise minimal problems; the ARM
stuff had particular problems because the default didn't work on most
systems and there was no documentation.

John Bowler
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,12,https://github.com/glennrp/libpng/pull/151#issuecomment-276722464,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler @glennrp
So if this it ready to merge or I should do anything else?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,13,https://github.com/glennrp/libpng/pull/151#issuecomment-276726457,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I think Glenn is waiting for testing from someone who actually has a
PowerPC build, I'm not aware of anything else blocking it, but I don't know
how Glenn wants to merge it or if he has issues.​

John Bowler",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,14,https://github.com/glennrp/libpng/pull/151#issuecomment-276746024,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I requested, months ago, testing of the MIPS-MSA code that was donated.
I have not heard a peep from anyone, and am considering removing it.

Glenn
…
On Wed, Feb 1, 2017 at 11:41 AM, John Bowler ***@***.***> wrote:
 I think Glenn is waiting for testing from someone who actually has a
 PowerPC build, I'm not aware of anything else blocking it, but I don't know
 how Glenn wants to merge it or if he has issues.​

 John Bowler

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#151 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ABe25iR3YXUdYo5W5PV0Fm_NaItjeHWIks5rYMPEgaJpZM4Lw02J>
 .",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,15,https://github.com/glennrp/libpng/pull/151#issuecomment-276791279,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@glennrp What kind of testing is needed? Am I capable to do that or it must be done by someone else?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,16,https://github.com/glennrp/libpng/pull/151#issuecomment-277348714,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","The MIPS code requires GCC 7.0, while this is the ""current"" GCC Gentoo doesn't even have it yet as an unstable pacakge.   The code won't get independently tested until GCC 7.0 is widely available.
This code should  be supported on any recent version of GCC; I checked and the Altivec support is there in 4.8.4 (which is what my Ubuntu uses, my dev system uses 5.4.0 by default; 6.3.0 isn't supported yet on x86_64).
Unfortunately I tried installing powerpc 5.4.0 and gcc crashed while compiling itself, so I would probably have to got back to 4.8.5 or 4.9.3 or forward to 6.3.0.  It's difficult with cross compilers working out what works in advance.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,17,https://github.com/glennrp/libpng/pull/151#issuecomment-278338657,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler
I can provide you access to Power8 little endian virtual machine via SSH (hosted on osuosl.org). Please give me your RSA public key (email me on neverscaired@gmail.com or via Github).",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,18,https://github.com/glennrp/libpng/pull/151#issuecomment-278382691,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I can run tests on that only if it is UNIX-like and has gcc, bash, awk
(the-one-true-awk is sufficient) and an *installed* zlib (I mean the
headers and a linkable library; it doesn't much matter which version).
Some tests use POSIX specific code but IRC they compile without it, it just
removes the capability to do any timing tests.

If that works, how many cores does it have, and do you mind if I use them
all?  I'll send you the key separately.  I've been unable to build a GCC
cross-compiler regardless of version; the compiler always crashes compiling
itself somewhere in handling the Gentoo linux headers.

John Bowler",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,19,https://github.com/glennrp/libpng/pull/151#issuecomment-278742634,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler @glennrp
Good news. I've fixed some bugs and now all of functions pass all tests on ppc64le. Now I'll will test code on ppc64 big endian and will report results.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,20,https://github.com/glennrp/libpng/pull/151#issuecomment-278743321,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler This virtual machine has Debian on board so it has all common Linux tools you probably need to test with. You can provide me your public RSA key for ssh login if you want to test this code yourself (neverscaired@gmail.com).,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,21,https://github.com/glennrp/libpng/pull/151#issuecomment-278744292,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I sent you the key yesterday; it's in the attachment (you responded to the
email, albeit a response intended for Glenn).

John Bowler
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,22,https://github.com/glennrp/libpng/pull/151#issuecomment-278860858,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler @glennrp ppc64 big endian tests pass too. Now it is ready to merge completely. Waiting for your testing.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,23,https://github.com/glennrp/libpng/pull/151#issuecomment-279159486,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","The LE build does not compile when I test it; I think somewhere something is using a non-C90 structure; I think it's a literal array {x,y,z}, which is not something I've seen before, but it is in a macro expansion so something else may be happening.  The build log is here:

debian@dlib-debian-le-1:~/jcb/src/libpng/barkovv/build/powerpc64le-linux-gcc-6.3.0+vsx=on/make.out


I only tested gcc 6.3.0; the gcc 4.9.2 installed on that system (and the g++ 4.9.2) are, I assume, not the right compiler and, anyway, a basic build of an unmodified libpng 4.9.2 fails because of strict-overflow problems in that version of GCC (connected to warning messages being produced as a result of O2 optimizations).


I didn't test with the ""correct"" compiler flags and the default builds (which all pass) of the modified libpng16 all pass because the VSX code does not get built.  I need to research the compiler flags again, but I assume that if I get the flags right all the builds will fail because of the non-ANSI code.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,24,https://github.com/glennrp/libpng/pull/151#issuecomment-279160015,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","There is a test script that anyone can use on the test system.  I made hacks to support powerpc and the weird way the compilers are installed (""gcc-6"", which is fine, but there is no ""gcc-6.3.0"").  The script is:
~debian/jcb/bin/regen
to use it:
PATH=~debian/jcb/bin:$PATH export PATH
then clone the github repo in a directory called ""code"", mkdir a sister directory called ""build"" and;
cd code
autoreconf -f -i
cd ../build
regen -f powerpc64le-linux-gcc-6.3.0+*
and that will build each of about 38 build configurations 2 at a time (the machine only has on CPU).  The arguments to regen are a list of the builds to build, it creates identically named directories.  The primary log file is make.out, everything else is normal build stuff (config.out etc).",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,25,https://github.com/glennrp/libpng/pull/151#issuecomment-279178089,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler Problem is fixed, please continue testing if it is needed.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,26,https://github.com/glennrp/libpng/pull/151#issuecomment-279184680,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I didn't provide those flags; that is my next text, to ensure that the
correct code gets compiled with the VSX option turned on at the compiler
level.  (This is the requirement for a successful multilib build).

John Bow;ler
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/significant-bit,27,https://github.com/glennrp/libpng/pull/151#issuecomment-279186504,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I'd be glad to test this on Power7 big endian.
Just git clone, configure, and make?
What is a good way to see the performance difference?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,28,https://github.com/glennrp/libpng/pull/151#issuecomment-279203155,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@significant-bit
git clone ...
./autogen.sh
./configure --enable-powerpc-vsx=yes
make
#if build failes
make CFLAGS=""-mvsx -maltivec""

Code compiles successful on Power8le Debian machine without theese flags. But when I compile code on my qemu emulator (Debian Power8 PPCbe), it fails to compile and require to provide ""-maltivec -mvsx"".",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,29,https://github.com/glennrp/libpng/pull/151#issuecomment-279205681,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","On Sat, Feb 11, 2017 at 4:26 PM, Mike Erwin ***@***.***> wrote:
 I'd be glad to test this on Power7 big endian.

 Just git clone, configure, and make?

This *SHOULD* work but doesn't, it looks like the autodetection of VSX is
not functioning:

git clone --branch=libpng16 --depth=1 https://github.com/barkovv/libpng.git
barkovv
cd barkovv
autoreconf -f -i
CC=""gcc -mvsx -maltivec"" ./configure
make check

Choose the CC definition so you get the compiler you want running with the
machine options you need.

This should pass (though I only just started testing the LE variant).  If
it does it will generate a program timepng in the build directory.  You
then run something like:

timepng --assemble bigfile png1.png png2.png png3.png ...
timepng --dissemble bigfile <count>

Where <count> is the number of files you put into ""bigfile"" with the first
command.  It times the decode.  You can put every PNG in your internet
browser cache in to get a random sample of typical PNG files on the
internet (well, typical of the www pages you visit.)  timepng outputs a
help message.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,30,https://github.com/glennrp/libpng/pull/151#issuecomment-279207245,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I'm at the version you pulled into jcb/src/libpng/barkovv/code, i.e. this revision:
a343882
And with vsx=on I am now getting 0 sized objects from ""size powerpc/*.o"".  l also couldn't see any VSX related options in pnglibconf.h (the ARM_NEON ones are there, but nothing for VSX).  There's nothing for MIPS either.  The common bug there is that the required changes are missing from scripts/pnglibconf.dfa; search for ""NEON"".
That's not a complete explanation though because I expect to see PNG_POWERPC_VSX_OPT in a gcc command line somewhere in 'make.out' and I don't see it.  The checks in pngpriv.h that set PNG_POWERPC_VSX_OPT are wrong; I hacked PNG_POWERPC_VSX_OPT into pnglibconf.h (with value 2) and the powerpc object modules started to have code in them (and the tests passed).
I then tried this:
gcc-6.3.0 -mvsx -maltivec -E - <<EOF
__ppc64__
__ALTIVEC__
__VSX__
EOF

and I got this:
# 1 ""<stdin>""
# 1 ""<built-in>""
# 1 ""<command-line>""
# 1 ""/usr/include/stdc-predef.h"" 1 3 4
# 1 ""<command-line>"" 2
# 1 ""<stdin>""
__ppc64__
1
1

I think that speaks for itself.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,31,https://github.com/glennrp/libpng/pull/151#issuecomment-279207419,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","The bug is it should be uppercase, i.e:
__PPC64__",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,32,https://github.com/glennrp/libpng/pull/151#issuecomment-279207953,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler Great thanks for finding that. Fixed.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,33,https://github.com/glennrp/libpng/pull/151#issuecomment-279214961,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler I've added some similar to ARM code to scripts/ files. Now pnglibconfig.h is correct.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,34,https://github.com/glennrp/libpng/pull/151#issuecomment-279231069,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","My previous comment about the ""check"" option was incorrect; I was getting
mixed up with the regular (no-option) option; I suggest just reverting to
the ARM/MIPS comment.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,35,https://github.com/glennrp/libpng/pull/151#issuecomment-279235149,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","I completed some timepng based speed tests last night.  Analysis of the results suggests a 1/74% speed up from using the Altivec code; this is suspiciously large so other tests would be valuable.  The test methodology is as I described before.  I used contrib/testpngs/*.png for the input, producing an assembly with 104 files and a bigger one by adding the same 104 files 100 times:
debian@dlib-debian-le-1:~/jcb/src/libpng$ ls
barkovv  big.10400.ass  libpng16  test.104.ass  timepng.out

The file ""timepng.out"" is the result of running two ""release"" builds of the libpng16 and barkovv git heads 100 times each (I used a faked release build to eliminate non-release tests and warnings).  The result (in seconds), expressed as average +/- standard deviation, is:
jbowler@PETUNIA:~$ ./timepng.awk timepng.out
barkovv 2.36439 +/- 0.00553637
libpng16 3.17475 +/- 0.00700532
barkovv/libpng16:  74.475%

Note that these figures are the real process time used to decode those 104 PNG files and the PNG files represent all of the PNG formats; so the selection is not representative of frequency of occurrence of formats.  The files that hit the optimizations are also quite large and very regular; 256x256 pixels in the RGB cases and this will give a false over-estimate of the speed up.  Nevertheless the test is a real-world test, so apart from my doubts about the quality of test data the speed up seems significant.
As always I qualify these comments with the observation; in software engineering you can prove anything by using the right data.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,36,https://github.com/glennrp/libpng/pull/151#issuecomment-279260792,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@jbowler it seems that 3644db2 commit doesn't make any sense. I can revert it ofcourse (if it is not needed). Are some aditional tests going to be done?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,37,https://github.com/glennrp/libpng/pull/151#issuecomment-279275663,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","On Sun, Feb 12, 2017 at 3:23 PM, Vadim Barkov ***@***.***> wrote:
 @jbowler <https://github.com/jbowler> it seems that 3644db2
 <3644db2>
 comment doesn't make any sense.

Well, I think I wrote the original (ARM) version and it makes sense to me
but it may benefit from some editing to make it clear; it is documenting
[PNG_]ARM_NEON_OPT.  *Normally* this is not set to anything and it gets
defaulted in pngpriv.h.

Setting it to 0 via -D, or via configure (though I don't like the use of
configure) is useful to disable the machine code.

Setting it to 1 should not be done because it happens automatically if
either ARM_NEON_API or ARM_NEON_CHECK (well,
PNG_ARM_NEON_API/CHECK_SUPPORTED) is set (defined).  This happens when
pnglibconf.h is built.

Setting it to 2 shouldn't be done because pngpriv.h does this automatically.

In the original implementations the people providing the code required the
person who built libpng to get everything right; setting the required
#defines *and* getting the compiler flags right.  This was complex and
resulted in bug reports because, as you seem to have found, sometimes it is
possible to get code like this to compile without adding special compiler
flags (PowerPC64LE) and sometimes it isn't (ARM works in a cross-build
without -mfpu=neon but does not in a host build, PowerPC64BE apparently
doesn't work.)

This is why I added the ""inadvisable"" comment about setting ""2"".
…
-- 
John Bowler <john.cunningham.bowler@gmail.com>
+1 (541) 450-9885
PO BOX 3151
KERBY OR 97531-3151
USA",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,38,https://github.com/glennrp/libpng/pull/151#issuecomment-279276130,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@jbowler  okay, I get it. would you lile to continue testing?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,39,https://github.com/glennrp/libpng/pull/151#issuecomment-279284719,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Well, I will continue testing.  Whether I like it, I don't know.​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,40,https://github.com/glennrp/libpng/pull/151#issuecomment-279628537,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Final results: about 8% improvement in (just) decode time of typical PNGs; remember this is just the decode time, it doesn't include any modifications or use of the resultant bitmap data.
I rebuilt everything and retested with a better sample set; 1000 randomly sampled files.  I've described this set before on the png-mng-implement mailing list.  It reflects a static snapshot of web pages spidered by Google; I've previously published the issues with this approach to sampling.
I observe that the provided test machine has compilers (both of them) which have -maltivec -mvsx built in as the target defaults, so my tests reveal nothing about the behavior with respect to the same code compiled without VSX; it may be faster or slower, I don't know.
So, on a system which is built with the VSX hardware switched on and with GCC 6.3.0 the time to decode my 1000 files is 0.480 seconds.  When the machine code is used, however, the time is reduced to 0.443 seconds; an 8% reduction (speed up).
I also tested a complete set of my build configurations and all passed.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,41,https://github.com/glennrp/libpng/pull/151#issuecomment-279659499,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","@glennrp
Can this PR be merged now?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,42,https://github.com/glennrp/libpng/pull/151#issuecomment-281552654,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Merged into libpng16, thanks.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,43,https://github.com/glennrp/libpng/pull/151#issuecomment-281761536,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Here are my results for Earth10k.png with an instrumented pngcrush.
Note that there is some speedup, but a much larger payoff is obtained
by running ""pngcrush -speed"" on the file to avoid using the AVG and PAETH
filters.
Glenn
Timing tests for firefox linux earth10k (not optimized)
Linux dlib-debian-le-1 4.9.0-1-powerpc64le #1
SMP Debian 4.9.6-3 (2017-01-28) ppc64le GNU/Linux
gcc (Debian 4.9.2-10) 4.9.2
Earth10k.png      CPU time decode 2.633772, total 2.801144 sec
Earth10k_fast.png CPU time decode 1.898273, total 2.006459 sec
Earth10k_slow.png CPU time decode 2.601996, total 2.712496 sec
Timing tests for firefox linux earth10k (powerpc-vsx optimized)
Linux dlib-debian-le-1 4.9.0-1-powerpc64le #1
SMP Debian 4.9.6-3 (2017-01-28) ppc64le GNU/Linux
gcc (Debian 4.9.2-10) 4.9.2
Earth10k.png      CPU time decode 2.458045, total 2.623693 sec
Earth10k_fast.png CPU time decode 1.841627, total 1.947361 sec
Earth10k_slow.png CPU time decode 2.434269, total 2.544447 sec
-rw-r--r-- 1 debian debian 72360235 Feb 22 16:53 Earth10k.png
-rw-r--r-- 1 debian debian 63285602 Feb 22 18:03 Earth10k_fast.png
-rw-r--r-- 1 debian debian 66843433 Feb 22 18:13 Earth10k_slow.png
Earth10k.png was provided by debian
Earth10k_fast is from ""pngcrush -brute -speed -force Earth10k.png""
Earth10k_slow is from ""pngcrush -force Earth10k.png""",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,44,https://github.com/glennrp/libpng/pull/151#issuecomment-281763249,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@glennrp Could you test Intel in similar way please?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,45,https://github.com/glennrp/libpng/pull/151#issuecomment-281775402,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","On Wed, Feb 22, 2017 at 10:41 AM, Glenn Randers-Pehrson < ***@***.***> wrote:
 Here are my results for Earth10k.png with an instrumeted pngcrush.
 Note that there is some speedup, but a much larger payoff is obtained
 by running ""pngcrush -speed"" on the file to avoid using the AVG and PAETH
 filters.

Well, indeed.  From your numbers:

Fast decode: +6% file size, +24% speed improvement

The ""right"" answer depends on the usage scenario.  Someone might care about
that 6%, and not care about the 24% cost; only the user can know.

I guess one useful test is to compare the cost of Paeth vs Sub; i.e. encode
the same image with just Sub or just Paeth and see whether a performance
improvement substantially reduces the 24% cost.  All the same, even if a
hardware improvement does make Paeth less of a cost on decode, so what?  In
most applications when a PNG is authored the author does not know it will
be decoded on specific hardware.
…
-- 
John Bowler <john.cunningham.bowler@gmail.com>
+1 (541) 450-9885
PO BOX 3151
KERBY OR 97531-3151
USA",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,46,https://github.com/glennrp/libpng/pull/151#issuecomment-281779578,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Timing tests for firefox linux earth10k on intel:

Linux studio 4.4.0-62-generic #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017
x86_64 x86_64 x86_64 GNU/Linux
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609

pngcrush-1.8.12:
Earth10k.png      CPU time decode 2.880897, total 3.077706 sec
Earth10k_fast.png CPU time decode 2.317034, total 2.457742 sec
Earth10k_slow.png CPU time decode 2.994704, total 3.149903 sec

pngcrush_1.8.12_no_opt:
Earth10k.png      CPU time decode 3.266601, total 3.469199 sec
Earth10k_fast.png CPU time decode 2.359044, total 2.504768 sec
Earth10k_slow.png CPU time decode 3.355562, total 3.509613 sec

The speedup is slightly better but still nothing to write home about.

Glenn
…
On Wed, Feb 22, 2017 at 1:47 PM, Vadim Barkov ***@***.***> wrote:
 @glennrp <https://github.com/glennrp> Could you test Intel in similar way
 please?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#151 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ABe25nrzAgSwLOa0UPGl1whZhYe9__Vjks5rfILIgaJpZM4Lw02J>
 .",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/barkovv,47,https://github.com/glennrp/libpng/pull/151#issuecomment-281781800,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)",@glennrp can you say that PowerPC and Intel optimizations are about equal by speed? I cannot understand results and how I should interpret it.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,48,https://github.com/glennrp/libpng/pull/151#issuecomment-281782030,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","On Wed, Feb 22, 2017 at 2:29 PM, John Bowler <notifications@github.com>
wrote:
 On Wed, Feb 22, 2017 at 10:41 AM, Glenn Randers-Pehrson <
 ***@***.***> wrote:

 > Here are my results for Earth10k.png with an instrumeted pngcrush.
 > Note that there is some speedup, but a much larger payoff is obtained
 > by running ""pngcrush -speed"" on the file to avoid using the AVG and PAETH
 > filters.
 >
 Well, indeed. From your numbers:

 Fast decode: +6% file size, +24% speed improvement

 The ""right"" answer depends on the usage scenario. Someone might care about
 that 6%, and not care about the 24% cost; only the user can know.

Well, it's +6% *improvement* on filesize, so it doesn't matter if they care.
I don't know why the ""-speed"" option resulted in a smaller Earth10k.png
file, but
there it is.

Glenn",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,49,https://github.com/glennrp/libpng/pull/151#issuecomment-281784861,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Just based on Earth10k.png, the Intel optimization produced a slightly greater speedup
than the Powerpc optimization.  But neither improves the decoding speed enough
for anyone to notice it without instrumenting their code.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,50,https://github.com/glennrp/libpng/pull/151#issuecomment-281800112,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","It isn't meaningful to compare hardware optimizations like this across different architectures, indeed, it isn't meaningful to compare hardware optimizations like this on the same CPU between different memory memory architectures or (even worse) different OS versions.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,51,https://github.com/glennrp/libpng/pull/151#issuecomment-281843788,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Glenn; I tested the assembly I had used before on the PowerPC system but using the Intel code and I couldn't get results that were statistically significant a the 90% level when I ran 100 test pairs, I had to run 1000 test pairs to get something that might be.  The results are greatly affected by machine load (even though timepng only measures process CPU time).  Are your results (on Intel) statistically significant?
pngcrush-1.8.12: Earth10k_slow.png CPU time decode 2.994704, total 3.149903 sec
pngcrush_1.8.12_no_opt: Earth10k_slow.png CPU time decode 3.355562, total 3.509613 sec
That's around a 12% speed up, but I saw the same and THAT was not statistically significant.
The PowerPC figures were significant; see my results above (the first test with 104 PNGs in the assembly), but that's a machine with, apparently, little load (it helped that I was running the tests at 3AM in the morning and I'm in the same state ;-)
John",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,52,https://github.com/glennrp/libpng/pull/151#issuecomment-281860194,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","My tests were on an otherwise idle workstation.  Each line actually
represented the smallest result for 5 runs (using pngcrush -bench 5).
I've just repeated the test six more times and the results look rock
solid:+
Timing tests for firefox linux earth10k
Linux studio 4.4.0-62-generic #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
pngcrush:
Earth10k.png      CPU time decode 2.882007,total 3.088203 sec
Earth10k.png      CPU time decode 2.881014,total 3.079939 sec
Earth10k.png      CPU time decode 2.880405,total 3.077050 sec
Earth10k.png      CPU time decode 2.881332,total 3.077632 sec
Earth10k.png      CPU time decode 2.880103,total 3.087936 sec
Earth10k_fast.png CPU time decode 2.316118,total 2.463541 sec
Earth10k_fast.png CPU time decode 2.316148,total 2.456554 sec
Earth10k_fast.png CPU time decode 2.315933,total 2.456326 sec
Earth10k_fast.png CPU time decode 2.315886,total 2.454998 sec
Earth10k_fast.png CPU time decode 2.316710,total 2.456888 sec
Earth10k_slow.png CPU time decode 2.994725,total 3.142210 sec
Earth10k_slow.png CPU time decode 3.001122,total 3.153591 sec
Earth10k_slow.png CPU time decode 2.994478,total 3.140198 sec
Earth10k_slow.png CPU time decode 2.995042,total 3.150825 sec
Earth10k_slow.png CPU time decode 2.994208,total 3.141076 sec
pngcrush_1812_no_opt:
Earth10k.png      CPU time decode 3.266963,total 3.473339 sec
Earth10k.png      CPU time decode 3.266716,total 3.474361 sec
Earth10k.png      CPU time decode 3.267167,total 3.473555 sec
Earth10k.png      CPU time decode 3.266481,total 3.473016 sec
Earth10k.png      CPU time decode 3.266488,total 3.481209 sec
Earth10k_fast.png CPU time decode 2.357406,total 2.512220 sec
Earth10k_fast.png CPU time decode 2.357070,total 2.512753 sec
Earth10k_fast.png CPU time decode 2.359321,total 2.506265 sec
Earth10k_fast.png CPU time decode 2.357918,total 2.512319 sec
Earth10k_fast.png CPU time decode 2.359186,total 2.505328 sec
Earth10k_slow.png CPU time decode 3.355757,total 3.511169 sec
Earth10k_slow.png CPU time decode 3.355778,total 3.510183 sec
Earth10k_slow.png CPU time decode 3.354734,total 3.507664 sec
Earth10k_slow.png CPU time decode 3.355413,total 3.508895 sec
Earth10k_slow.png CPU time decode 3.356333,total 3.509265 sec
Glenn",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/glennrp,53,https://github.com/glennrp/libpng/pull/151#issuecomment-281860812,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","Also about my tests,
| Executable name is pngcrush
| It was built with   bundled libpng-1.6.29beta02
| and is running with bundled libpng-1.6.29beta02
|    Copyright (C) 1998-2004, 2006-2016 Glenn Randers-Pehrson,
|    Copyright (C) 1996, 1997 Andreas Dilger,
|    Copyright (C) 1995, Guy Eric Schalnat, Group 42 Inc.,
| and bundled zlib-1.2.11, Copyright (C) 1995-2017,
|    Jean-loup Gailly and Mark Adler,
| and using ""clock_gettime(CLOCK_MONOTONIC_RAW,&t)"".
Glenn",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,151,2017-01-29T15:59:59Z,2017-02-22T02:46:50Z,2017-02-23T03:38:54Z,MERGED,True,1214,4,13,https://github.com/barkovv,PowerPC VSX optimized filter functions,38,[],https://github.com/glennrp/libpng/pull/151,https://github.com/jbowler,54,https://github.com/glennrp/libpng/pull/151#issuecomment-281885342,"@glennrp
Resolves #136
It can be compiled with gcc or clang. Optimization speedup is measured by gprof with size of row 1024 kB.
Status of work (both for bpp=4 and bpp=3)

 filter_up (spedup x5.6)
 filter_sub (speedup x1.5)
 filter_avg (speedup x2.8)
 filter_paeth (speedup x1.08)

Now code is for POWER7 or later due to vec_vsx_ld function. I can try to find analog for earlier CPU's if needed (but I think that optimize code for Power G5 from 2004 is a worthless idea in 2017)","What I observed is that if I look at the standard deviation of the timing
figures from a single test it is large, however I interleaved the
optimized/not tests and if I divide times from successive pairs and
consider the standard deviation of the resultant ratio it is small.  This
is on a loaded machine.

Anyway, but doing that rearrangement of the numbers I get results which are
about -14% time improvement with the SSE optimizations and my test
assembly.  Consistent with Glenn's results and (now) reproducible.

John Bowler
​",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,152,2017-02-21T23:22:03Z,2017-02-22T02:12:24Z,2017-02-22T02:12:24Z,MERGED,True,10,9,1,https://github.com/jbowler,Libpng16,12,[],https://github.com/glennrp/libpng/pull/152,https://github.com/jbowler,1,https://github.com/glennrp/libpng/pull/152,"The cleanup code was one level up from where it should have been; the comments were correct, the code was just in the wrong place.","The cleanup code was one level up from where it should have been; the comments were correct, the code was just in the wrong place.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,1,https://github.com/glennrp/libpng/pull/154,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/154#issuecomment-289854783,,"Who assigns the version number (7799, 7800, ...)?  What happens when libpng version number is bumped to (e.g.) 1.6.30beta01 ?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,3,https://github.com/glennrp/libpng/pull/154#issuecomment-289872281,,"Greetings Glen,
The nuspec files contains the version number.
In general, I generate Nuget version from a simple suffix to the version number of base project.
Nugets enable easy continuous integration.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/154#issuecomment-289884556,,"Yes, I saw that the version number is in nuspec.  My question is how do I maintain the ""nuspec"" file when I update libpng to a new version?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,5,https://github.com/glennrp/libpng/pull/154#issuecomment-289892474,,"The nuget require the cmake build.  Given the new version doesn't break the cmake build.  simply edit the nuspec to your desire.  Then re-execute the build scripts.  The resulting nuget is what you upload to nuget servers for use with appveyor, etc...",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/glennrp,6,https://github.com/glennrp/libpng/pull/154#issuecomment-290120705,,"I still need to know where the 7799/7800 version number comes from.  What is the version number for libpng-1.6.30beta01?  Do I just assign it myself, e.g., to 7801?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,7,https://github.com/glennrp/libpng/pull/154#issuecomment-290125542,,"These numbers (7799/7800) are arbitrary values.  Nuget requires each package has a unique version. For libpng-1.6.30beta01; 1.6.30.01.7801
…
 On Mar 29, 2017, at 11:09 AM, Glenn Randers-Pehrson ***@***.***> wrote:

 I still need to know where the 7799/7800 version number comes from. What is the version number for libpng-1.6.30beta01? Do I just assign it myself, e.g., to 7801?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/glennrp,8,https://github.com/glennrp/libpng/pull/154#issuecomment-290133234,,"OK, thanks.  And for libpng-1.6.30beta02, libpng-1.7.0beta87, libpng-1.6.30rc01, libpng-1.6.30?  May I use the same number (7801) for all of the 1.6.30* and a different number (what?) for all of 1.7.0* ?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,9,https://github.com/glennrp/libpng/pull/154#issuecomment-290136770,,"Essentially, you can use whatever number you want to use as long as it keeps increasing with each nuget package release/upload.  I try to keep nuget versions as an extension of the actual library version number.  Add an arbitrary nuget version number to the end of the png library version.  You could use the same number (7801), but that will confuse the end users when they refer back to this GIT repo to checkout the exact commit used to build the nuget.  Increment the nuspec every time you re-run the build batch.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,10,https://github.com/glennrp/libpng/pull/154#issuecomment-290138816,,"Also, I would avoid release beta/RC nuget packages.  It could accidentally break someone else's build on continuous integration.  Nugets cannot be easily deleted, and end users such as myself, tend to update nugets frequently in MSBuild Solutions using Nuget Packet Manager.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/glennrp,11,https://github.com/glennrp/libpng/pull/154#issuecomment-290141787,,"avoid release beta/RC nuget packages

That's not consistent with libpng's philosophy of testing everything thoroughly in beta/rc before public release.  How do you propose that we validate the nuget stuff, then?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,12,https://github.com/glennrp/libpng/pull/154#issuecomment-290210186,,"Imagine Nuget as the windows version of 'YUM' or 'APT'.
The goal is to avoid 'release' of packages that have not already been tested.
The current Nuget includes stable libpng code base.
Most of these Nuget downloads are for (autonomous) continuous integration.
https://www.nuget.org/packages/libpng-msvc14-x64/",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/glennrp,13,https://github.com/glennrp/libpng/pull/154#issuecomment-290213571,,"Understood.  But we don't distribute .deb and similar packages; we leave those to downstream distributors to develop.  It seems that the Nuget packaging stuff belongs in Nuget (as it is now, apparently), not in the libpng distribution.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,None,14,https://github.com/glennrp/libpng/pull/154#issuecomment-290216943,,"Honestly, I made the Pull Request to offer new features to libpng.  I try to publish the Nuget build scripts upstream for commonly used packages as Nuget doesn't really have a distribution.  It is up to you and PNG Development Group if you want to support Windows Continuous Integration.  That is why the files are located in a subfolder of the contrib folder.   This is just one of MANY libraries that I use for continuous integration of Mandelbulber.  Please feel free to close this PR without merging.  However, I would prefer that the build scripts for libpng Nuget get merged.
REF: buddhi1980/mandelbulber2@24b6d79",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,154,2017-03-21T00:45:17Z,2018-07-04T06:01:23Z,2018-07-04T06:01:23Z,CLOSED,False,292,0,7,None,Support NUGET,1,[],https://github.com/glennrp/libpng/pull/154,https://github.com/ctruta,15,https://github.com/glennrp/libpng/pull/154#issuecomment-402372233,,"I agree with Glenn: I appreciate the usefulness of this contribution, but we have traditionally left downstream packaging (scripts, artifacts, etc.), as well as the associated maintenance efforts, for the downstream package maintainers.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,157,2017-03-29T23:56:14Z,2017-03-30T17:26:25Z,2017-03-30T19:37:40Z,MERGED,True,75,33,5,https://github.com/vszakats,silence clang -Wcomma warnings,1,[],https://github.com/glennrp/libpng/pull/157,https://github.com/vszakats,1,https://github.com/glennrp/libpng/pull/157,Ref: #156,Ref: #156,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,158,2017-03-30T00:13:54Z,2017-03-30T17:26:25Z,2017-03-30T19:37:33Z,MERGED,True,10,1,1,https://github.com/vszakats,silence clang -Wcast-qual const drop warnings,2,[],https://github.com/glennrp/libpng/pull/158,https://github.com/vszakats,1,https://github.com/glennrp/libpng/pull/158,Ref: #156,Ref: #156,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,159,2017-03-31T22:57:28Z,2017-04-01T16:53:32Z,2017-04-01T16:55:22Z,CLOSED,False,2,2,2,https://github.com/vszakats,fix casing typo in name,1,[],https://github.com/glennrp/libpng/pull/159,https://github.com/vszakats,1,https://github.com/glennrp/libpng/pull/159,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,159,2017-03-31T22:57:28Z,2017-04-01T16:53:32Z,2017-04-01T16:55:22Z,CLOSED,False,2,2,2,https://github.com/vszakats,fix casing typo in name,1,[],https://github.com/glennrp/libpng/pull/159,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/159#issuecomment-290932292,,I had already fixed this typo in my copy (see commit 82add75) .  Thanks.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,159,2017-03-31T22:57:28Z,2017-04-01T16:53:32Z,2017-04-01T16:55:22Z,CLOSED,False,2,2,2,https://github.com/vszakats,fix casing typo in name,1,[],https://github.com/glennrp/libpng/pull/159,https://github.com/vszakats,3,https://github.com/glennrp/libpng/pull/159#issuecomment-290932355,,Thank you!,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,1,https://github.com/glennrp/libpng/pull/160,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,2,https://github.com/glennrp/libpng/pull/160#issuecomment-291256536,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","@glennrp Thank you for the merge. But, I've noticed that in this commit: 82add75
all of these were reverted. Was this intended? If so, what was wrong with these updates?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,3,https://github.com/glennrp/libpng/pull/160#issuecomment-291257405,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","By the looks of it, only those files were reverted where the date got bumped. So this may have been the result of a script doing it automatically based on a pre-patch version of these text files.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/160#issuecomment-291265885,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/",I think it was just libpng.3 and libpng-manual.txt which are actually built from another file that did not get properly updated.  I've reapplied 160.patch to the man pages.  See commit 64f8110,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,5,https://github.com/glennrp/libpng/pull/160#issuecomment-291266431,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","Thank you @glennrp, it looks alright now!",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/glennrp,6,https://github.com/glennrp/libpng/pull/160#issuecomment-291267155,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","There are still a few remaining ""http:"" instances in the man page, though.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,7,https://github.com/glennrp/libpng/pull/160#issuecomment-291267927,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/",I may have missed some. Which one(s) do you have in mind?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/glennrp,8,https://github.com/glennrp/libpng/pull/160#issuecomment-291271938,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","www.w3.org responds to both ""http:"" and ""https:"".  www.libpng.org and www.poynton.com still only respond to ""http:"".",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,9,https://github.com/glennrp/libpng/pull/160#issuecomment-291275670,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/","Yes, I had to skip those unfortunately. (I use a script to find the ones responding to HTTPS with similar output)
On a more careful check some updates stayed reverted indeed inside libpng.3. Here's the patch to correct those:
diff --git a/libpng.3 b/libpng.3
index ce0159b0a..3079c7dca 100644
--- a/libpng.3
+++ b/libpng.3
@@ -5987,7 +5987,7 @@ release number plus ""betaNN"" or ""rcNN"".
 .LP
 .IR libpng :
 .IP
-http://libpng.sourceforge.net (follow the [DOWNLOAD] link)
+https://libpng.sourceforge.io/ (follow the [DOWNLOAD] link)
 http://www.libpng.org/pub/png
 
 .LP
@@ -5997,7 +5997,7 @@ http://www.libpng.org/pub/png
 .I libpng
 or at
 .br
-ftp://ftp.info-zip.org/pub/infozip/zlib
+http://zlib.net/
 
 .LP
 .IR PNG specification: RFC 2083
@@ -6006,11 +6006,11 @@ ftp://ftp.info-zip.org/pub/infozip/zlib
 .I libpng
 or at
 .br
-ftp://ftp.rfc-editor.org:/in-notes/rfc2083.txt
+https://www.ietf.org/rfc/rfc2083.txt
 .br
 or (as a W3C Recommendation) at
 .br
-http://www.w3.org/TR/REC-png.html
+https://www.w3.org/TR/REC-png.html
 
 .LP
 In the case of any inconsistency between the PNG specification",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,160,2017-03-31T23:28:12Z,2017-04-01T16:31:52Z,2017-04-03T21:23:59Z,MERGED,True,45,45,11,https://github.com/vszakats,URL updates,1,[],https://github.com/glennrp/libpng/pull/160,https://github.com/vszakats,10,https://github.com/glennrp/libpng/pull/160#issuecomment-291278438,"It'd be nice to enable HTTPS on the SourceForge website of libpng, as described here:
https://sourceforge.net/blog/introducing-https-for-project-websites/",Issued a PR with the above: #161,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,161,2017-04-03T21:23:44Z,2017-04-03T22:03:21Z,2017-04-03T22:03:40Z,MERGED,True,4,4,1,https://github.com/vszakats,fix URL regressions,1,[],https://github.com/glennrp/libpng/pull/161,https://github.com/vszakats,1,https://github.com/glennrp/libpng/pull/161,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/rcdailey,1,https://github.com/glennrp/libpng/pull/162,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/162#issuecomment-295919758,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","The CMAKE_HOST_WIN32 part looks reasonable.  I don't know why you needed to follow the ""NO AWK"" branch with android.  Where does scripts/png_prefix.h_prebuilt come from?  It isn't in the libpng16 distribution.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/rcdailey,3,https://github.com/glennrp/libpng/pull/162#issuecomment-296016580,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","So, I made the change to check if ANDROID is defined because I do have AWK on my system; probably just sitting on my PATH due to Git. However, it is triggering a whole slew of procedural code generation, which fails miserably while cross compiling. I got several compiler errors related to options CMake is passing to clang. I didn't bother investigating it further.
My change ensures that the stubbed out (prebuilt) headers are used. Concerning the pngprefix.h, I am not sure what it is for, but the libpng code is trying to include it. The code generation step just creates an empty header file. That file had to be present for my build to succeed.
I hope that explains everything. I basically had to do a lot of finagling to get this compiling. I am not familiar with libpng at all, so this was all a means to an end for me. I'll provide some environment/tool details below specific to my configuration.

CMake v3.8.0
Android NDK r14
Compiler: Clang
STL: gnustl_shared
ABI: armeabi-v7a
Host OS: Windows",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/162#issuecomment-302566920,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?",I took the WIN32 -> CMAKE_HOST_WIN32 change but not the android/awk part.  See commit a1577bf,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/rcdailey,5,https://github.com/glennrp/libpng/pull/162#issuecomment-325465108,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","Sorry it took me so long to get back with you. Note that on master, I am still not able to build on Android without all of my changes. Here is the error I get:
-- [1/64] Generating pngprefix.h
[2/64] Generating scripts/symbols.out
FAILED: scripts/symbols.out
cmd.exe /C ""cd /D E:\code\frontend\android_release\third_party\build\libpng && ""E:\Program Files\CMake\bin\cmake.exe"" -DINPUT=E:/code/frontend/source/Core/ThirdParty/libpng/source/scripts/symbols.c -DOUTPUT=E:/code/frontend/android_release/third_party/build/libpng/scripts/symbols.out -P E:/code/frontend/android_release/third_party/build/libpng/scripts/genout.cmake""
clang.exe: warning: argument unused during compilation: '-mfloat-abi=softfp' [-Wunused-command-line-argument]
clang.exe: warning: argument unused during compilation: '-mfpu=vfpv3-d16' [-Wunused-command-line-argument]
clang.exe: warning: argument unused during compilation: '-mthumb' [-Wunused-command-line-argument]
clang.exe: warning: argument unused during compilation: '-Wa,--noexecstack' [-Wunused-command-line-argument]
error: unknown target CPU 'armv7-a'
CMake Error at scripts/genout.cmake:78 (message):
  Failed to generate
  E:/code/frontend/android_release/third_party/build/libpng/scripts/symbols.out.tf1",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/rcdailey,6,https://github.com/glennrp/libpng/pull/162#issuecomment-325465310,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?",I am using the armeabi-v7a architecture in Android NDK toolchain file (comes with NDK r15).,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/rcdailey,7,https://github.com/glennrp/libpng/pull/162#issuecomment-328118889,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","@glennrp Would really love to get your feedback. It's been 11 days since my last reply. Sorry to push you on this, but I'd like to get this working since I have a requirement at my workplace for this. Thanks in advance.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/glennrp,8,https://github.com/glennrp/libpng/pull/162#issuecomment-328165578,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","I pushed part of this, but still don't understand why pngprefix.h.prebuilt is necessary.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/glennrp,9,https://github.com/glennrp/libpng/pull/162#issuecomment-328167597,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","It should be sufficient to generate an empty pngprefix.h in the ""if(NOT AWK OR ANDROID)"" block.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,162,2017-04-20T20:14:39Z,2017-09-08T17:45:20Z,2017-09-08T17:45:20Z,CLOSED,False,10,7,1,https://github.com/rcdailey,Get CMake builds for Android NDK working,1,[],https://github.com/glennrp/libpng/pull/162,https://github.com/rcdailey,10,https://github.com/glennrp/libpng/pull/162#issuecomment-328169667,"Use CMAKE_HOST_WIN32 appropriately (for cross compiling)
Disable procedurally generated code steps for Android (They don't work)

Note: I am sure that you do not want to merge this, especially since I basically hacked some of these changes just to get libpng building for Android NDK. But could you offer some pointers to how to make these changes permanent for upstream consumption? Why do the code generations steps not work for Android? Is disabling the generation custom targets appropriate for Android?","@glennrp I apologize for the confusion. I will open another issue to discuss the thing I'm talking about. It's slightly off-topic at this point. I will use the result of that discussion to figure out any further CMake changes needed, if any. I'll mention you in that issue.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,164,2017-05-04T16:42:59Z,2017-05-16T21:17:01Z,2017-05-16T21:18:41Z,CLOSED,False,4,4,1,https://github.com/KindDragon,Don't double eval CMAKE_SYSTEM_PROCESSOR,1,[],https://github.com/glennrp/libpng/pull/164,https://github.com/KindDragon,1,https://github.com/glennrp/libpng/pull/164,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,164,2017-05-04T16:42:59Z,2017-05-16T21:17:01Z,2017-05-16T21:18:41Z,CLOSED,False,4,4,1,https://github.com/KindDragon,Don't double eval CMAKE_SYSTEM_PROCESSOR,1,[],https://github.com/glennrp/libpng/pull/164,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/164#issuecomment-301917781,,"Patches should be against the libpng16 or libpng17 branch, not the master.  I've applied your change manually to the libpng16 branch.  See  commit 30d1f90",True,{'THUMBS_UP': ['https://github.com/KindDragon']}
glennrp/libpng,https://github.com/glennrp/libpng,165,2017-05-16T21:22:32Z,2017-05-16T22:11:02Z,2017-05-16T22:36:30Z,CLOSED,False,3,3,1,https://github.com/KindDragon,Fix libpng.sourceforge.net url,1,[],https://github.com/glennrp/libpng/pull/165,https://github.com/KindDragon,1,https://github.com/glennrp/libpng/pull/165,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,165,2017-05-16T21:22:32Z,2017-05-16T22:11:02Z,2017-05-16T22:36:30Z,CLOSED,False,3,3,1,https://github.com/KindDragon,Fix libpng.sourceforge.net url,1,[],https://github.com/glennrp/libpng/pull/165,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/165#issuecomment-301928762,,"According to https://sourceforge.net/p/forge/documentation/Project%20Web%20Services/
As of Nov 2016 new projects will default to using https for their project web:
https://PROJECT_NAME.sourceforge.io

Currently registered projects will remain with their same settings but have the ability to switch their project web over at any point
I've just done the switch to HTTPS.  According to the site documentation, requests to the old sf.net address will be redirected to the new sf.io address.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,165,2017-05-16T21:22:32Z,2017-05-16T22:11:02Z,2017-05-16T22:36:30Z,CLOSED,False,3,3,1,https://github.com/KindDragon,Fix libpng.sourceforge.net url,1,[],https://github.com/glennrp/libpng/pull/165,https://github.com/KindDragon,3,https://github.com/glennrp/libpng/pull/165#issuecomment-301930443,,Ok,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,165,2017-05-16T21:22:32Z,2017-05-16T22:11:02Z,2017-05-16T22:36:30Z,CLOSED,False,3,3,1,https://github.com/KindDragon,Fix libpng.sourceforge.net url,1,[],https://github.com/glennrp/libpng/pull/165,https://github.com/glennrp,4,https://github.com/glennrp/libpng/pull/165#issuecomment-301935119,,Thanks.  This did remind me to update README to mention the new ftp site.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,166,2017-05-27T13:55:35Z,2017-05-27T17:34:48Z,2017-05-27T17:54:42Z,MERGED,True,6,6,4,https://github.com/vszakats,use HTTPS for zlib.net,1,[],https://github.com/glennrp/libpng/pull/166,https://github.com/vszakats,1,https://github.com/glennrp/libpng/pull/166,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,174,2017-09-02T13:15:36Z,2017-09-03T00:36:32Z,2017-09-06T19:06:09Z,MERGED,True,1,1,1,https://github.com/bkuhls,CMakeLists.txt: Enable building asm code,1,[],https://github.com/glennrp/libpng/pull/174,https://github.com/bkuhls,1,https://github.com/glennrp/libpng/pull/174,"NEON support is provided by filter_neon.S which is currently not build
by cmake causing an error when linking with libpng16.so.16.32.0:
[ 97%] Linking C executable pngstest
libpng16.so.16.32.0: undefined reference to png_read_filter_row_avg4_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_paeth3_neon'
libpng16.so.16.32.0: undefined reference to png_read_filter_row_up_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_avg3_neon'
libpng16.so.16.32.0: undefined reference to png_read_filter_row_paeth4_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_sub4_neon'
libpng16.so.16.32.0: undefined reference to `png_read_filter_row_sub3_neon'","NEON support is provided by filter_neon.S which is currently not build
by cmake causing an error when linking with libpng16.so.16.32.0:
[ 97%] Linking C executable pngstest
libpng16.so.16.32.0: undefined reference to png_read_filter_row_avg4_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_paeth3_neon'
libpng16.so.16.32.0: undefined reference to png_read_filter_row_up_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_avg3_neon'
libpng16.so.16.32.0: undefined reference to png_read_filter_row_paeth4_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_sub4_neon'
libpng16.so.16.32.0: undefined reference to `png_read_filter_row_sub3_neon'",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,174,2017-09-02T13:15:36Z,2017-09-03T00:36:32Z,2017-09-06T19:06:09Z,MERGED,True,1,1,1,https://github.com/bkuhls,CMakeLists.txt: Enable building asm code,1,[],https://github.com/glennrp/libpng/pull/174,https://github.com/glennrp,2,https://github.com/glennrp/libpng/pull/174#issuecomment-326777148,"NEON support is provided by filter_neon.S which is currently not build
by cmake causing an error when linking with libpng16.so.16.32.0:
[ 97%] Linking C executable pngstest
libpng16.so.16.32.0: undefined reference to png_read_filter_row_avg4_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_paeth3_neon'
libpng16.so.16.32.0: undefined reference to png_read_filter_row_up_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_avg3_neon'
libpng16.so.16.32.0: undefined reference to png_read_filter_row_paeth4_neon' libpng16.so.16.32.0: undefined reference to png_read_filter_row_sub4_neon'
libpng16.so.16.32.0: undefined reference to `png_read_filter_row_sub3_neon'",Thanks.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,176,2017-09-05T21:02:29Z,2017-09-05T23:46:01Z,2017-09-05T23:46:01Z,MERGED,True,2,2,1,https://github.com/kcc,properly define PNG_CLEANUP,1,[],https://github.com/glennrp/libpng/pull/176,https://github.com/kcc,1,https://github.com/glennrp/libpng/pull/176,Should fix google/oss-fuzz#809,Should fix google/oss-fuzz#809,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,1,https://github.com/glennrp/libpng/pull/177,Let me know what you think.,Let me know what you think.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,2,https://github.com/glennrp/libpng/pull/177#issuecomment-327378129,Let me know what you think.,"I didn't bother writing documentation because I'm not sure what will change... but once we settle on something (or nothing), I can write something.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,3,https://github.com/glennrp/libpng/pull/177#issuecomment-327378621,Let me know what you think.,"One more thing which I think would be useful, would be the ability to save PNG on disk using an associated alpha format. The only real difference is a flag in the binary data stream, and the ability to convert to pre/post multiplied on load as required.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,4,https://github.com/glennrp/libpng/pull/177#issuecomment-327379049,Let me know what you think.,"Oh, one more thing to consider... if the buffer is converted to associated alpha on load, it may also need to be converted back to unassociated on save... unless we directly support that in the file format.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/glennrp,5,https://github.com/glennrp/libpng/pull/177#issuecomment-327668552,Let me know what you think.,"Converting back to non-premultiplied from premultiplied is necessarily lossy.  At the extreme, when alpha is 0 the color samples become 0 as well regardless of their original content.  It's not possible to recover the original underlying color from a {0,0,0,0} pixel.",True,"{'THUMBS_UP': ['https://github.com/ioquatix', 'https://github.com/d-pollard', 'https://github.com/vsartor', 'https://github.com/georgemblack']}"
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,6,https://github.com/glennrp/libpng/pull/177#issuecomment-327669061,Let me know what you think.,"@glennrp Absolutely, there is a fundamental difference between associated and un-associated alpha, and the ability to convert between them in either direction is a lossy process.
Both formats require different blending functions, but with modern compositors preferring associated alpha. (iOS CoreImage converts PNGs to associated alpha format, OpenGL, DirectX, Vulkan all only support associated-alpha frame buffers AFAIK).
I think what would make sense is for PNG to add support for associated alpha in the file format, and to allow the user to specify what they want in the pixel buffer. PNG should convert as required.
When saving a file, it should be saved in it's native format, unless the user explicitly requests that it should be converted.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,7,https://github.com/glennrp/libpng/pull/177#issuecomment-327669329,Let me know what you think.,"Taking into consideration the blending function for associated alpha pixels, one can see that when alpha=0 the blend function becomes additive, which means the rgb components are added to the destination. It's a useful trait of the data representation. Just FYI.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/glennrp,8,https://github.com/glennrp/libpng/pull/177#issuecomment-331550371,Let me know what you think.,"There's no real good way to signal that a PNG file contains associated alpha.  It would require either a new chunk (like CgBI but not placed ahead of IHDR) or a revised existing chunk (such as a new field in IHDR).  One possibility would be some additional colortypes, e.g., with bit 4 representing associated alpha (color_type 12: black-white-premultiplied_alpha, 14: color,premultiplied_alpha). Either of these would be incompatible with existing decoders.  Alternatively add a new ancillary chunk to signal that the alpha is associated.  Probably the latter is the only way that is really feasible.",True,{'THUMBS_UP': ['https://github.com/ioquatix']}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,9,https://github.com/glennrp/libpng/pull/177#issuecomment-331564068,Let me know what you think.,"All good thoughts.
As it seems you know, Apple is already doing something with CoreImage and making pre-multiplied images for iOS. This happens when you compile code with Xcode for iOS deployment. CoreImage somehow detects these mutant PNGs and loads them appropriately. http://iphonedevwiki.net/index.php/CgBI_file_format
I know that at the very least there would be some incompatibility, even if you just load the pixel data, it won't be displayed correctly, but this can be fixed going forward.
In addition, even if applications just get raw pixel data, at least it can be displayed, albeit incorrectly.
Given what we have to deal with, I'd probably vote for a new chunk, but my intuition is not very good since I don't know this project inside out. If you think it should come before the IHDR, but right now Apple doesn't? We can support both but issue a warning for Apple's format?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/glennrp,10,https://github.com/glennrp/libpng/pull/177#issuecomment-331576953,Let me know what you think.,"If you think it should come before the IHDR, but right now Apple doesn't?
The other way around.  No chunks should come before IHDR.
Apple's CgBI format does other weird things like omitting CRC's and rearranging sample order.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,11,https://github.com/glennrp/libpng/pull/177#issuecomment-331578663,Let me know what you think.,"I see.
I think from a pragmatic point of view.
Let's try to offer Apple a standard way forward that doesn't alienate all the existing users of that tool.
We may disagree with how they did it. We can ignore the file format, but it simply alienates users.
My suggestion is to:
1/ Implement it how we think is best.
2/ At some level, support Apple's implementation where possible. Perhaps optionally emit a warning if the structure doesn't conform to 1 above.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,12,https://github.com/glennrp/libpng/pull/177#issuecomment-331582873,Let me know what you think.,"I just wanted to add, that Apple is probably doing the arrangement of samples in order to maximise throughput when loading from disk. The less work they have to do to get the image into the GPU memory, the better. I think you'll find there are a lot of use cases where this would be of benefit.
Calling it ""weird"" is probably disingenuous as I'm sure they have their reasons for doing it and they are probably directly tied to performance, which is a good target to optimise for.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,13,https://github.com/glennrp/libpng/pull/177#issuecomment-331670475,Let me know what you think.,Did you test this code before merging? I think we should consider documentation and tests too..,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/glennrp,14,https://github.com/glennrp/libpng/pull/177#issuecomment-331672488,Let me know what you think.,"No, I just put it out there for people to try.  Perhaps it would have been more sensible to put it in libpng17.",True,"{'THUMBS_UP': ['https://github.com/ioquatix', 'https://github.com/aloisdg', 'https://github.com/d-pollard', 'https://github.com/pendo324', 'https://github.com/Swyter'], 'HEART': ['https://github.com/agumonkey', 'https://github.com/alex3305', 'https://github.com/mount2010', 'https://github.com/bool3max', 'https://github.com/Turbots', 'https://github.com/AffanIndo', 'https://github.com/Hissvard', 'https://github.com/matthewtrask', 'https://github.com/Shumatsu', 'https://github.com/nochirmag', 'https://github.com/vivin', 'https://github.com/zmcgohan', 'https://github.com/13steinj', 'https://github.com/Pazaz', 'https://github.com/jackwilsdon', 'https://github.com/hassankhan', 'https://github.com/jrdnrc', 'https://github.com/utrack', 'https://github.com/webstackdev', 'https://github.com/pdaddyo', 'https://github.com/cooljacob204', 'https://github.com/dwightyy', 'https://github.com/pendo324', 'https://github.com/biggestcookie', 'https://github.com/niloc132', 'https://github.com/sehrgut', 'https://github.com/t00', 'https://github.com/mendhak', 'https://github.com/Kyu', 'https://github.com/gabrielbull', 'https://github.com/NicoHarg', 'https://github.com/JacobPatenaude-AI', 'https://github.com/samsawan', 'https://github.com/TobiX', 'https://github.com/ggppjj', 'https://github.com/mwilmsm', 'https://github.com/Jeroen52', 'https://github.com/Insomniac66', 'https://github.com/Polyducks', 'https://github.com/connorjclark', 'https://github.com/lukefor', 'https://github.com/flesnuk', 'https://github.com/GiedriusS', 'https://github.com/ianb', 'https://github.com/mghoffmann', 'https://github.com/vedrxn', 'https://github.com/casept', 'https://github.com/umutseven92'], 'CONFUSED': ['https://github.com/mount2010', 'https://github.com/bool3max']}"
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,15,https://github.com/glennrp/libpng/pull/177#issuecomment-331680577,Let me know what you think.,"I see. I would like to think that we can bring a more comprehensive solution, but this is a good start.
In my case, I needed to support pre-multiplied alpha in both WebP and PNG, so I finally implemented the conversion a layer up: https://github.com/kurocha/images/blob/master/source/Images/Conversions.cpp - a bit of a hack to get things working and probably worth revisiting at some point. We have to convert 8-bit sRGB from unassociated to associated alpha.
However, I do think it would be a great addition to support it in the format itself.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,177,2017-09-06T05:23:45Z,2017-09-23T20:14:18Z,2018-10-25T01:27:28Z,MERGED,True,13,1,2,https://github.com/ioquatix,Add support for loading images with associated alpha.,1,[],https://github.com/glennrp/libpng/pull/177,https://github.com/ioquatix,16,https://github.com/glennrp/libpng/pull/177#issuecomment-432881802,Let me know what you think.,@glennrp thanks so much for your effort. May you rest in peace.,False,"{'THUMBS_UP': ['https://github.com/darwinrlo', 'https://github.com/joshumax', 'https://github.com/chrisnovello', 'https://github.com/czaux', 'https://github.com/nosnaj', 'https://github.com/gabrielkw', 'https://github.com/NourdineMazali', 'https://github.com/gurpreetshanky', 'https://github.com/kumarharsh', 'https://github.com/dopeboy', 'https://github.com/jakeogh', 'https://github.com/theo-chassaigne', 'https://github.com/Shazib', 'https://github.com/bryndyment', 'https://github.com/winterthediplomat', 'https://github.com/nimarb', 'https://github.com/suranah', 'https://github.com/PikachuEXE', 'https://github.com/tianshuo', 'https://github.com/bleuge', 'https://github.com/halwa', 'https://github.com/voyc-jean', 'https://github.com/bheinks', 'https://github.com/giu', 'https://github.com/DaMan69', 'https://github.com/jamie-lord', 'https://github.com/joereynolds', 'https://github.com/GarethPW', 'https://github.com/sergilazaro', 'https://github.com/metabrain', 'https://github.com/agumonkey', 'https://github.com/dpt', 'https://github.com/oaeide', 'https://github.com/hako', 'https://github.com/benjohnston', 'https://github.com/vszakats', 'https://github.com/d4nyll', 'https://github.com/DestRoYeDnz', 'https://github.com/mount2010', 'https://github.com/bool3max', 'https://github.com/citrusui'], 'HEART': ['https://github.com/thosakwe', 'https://github.com/czaux', 'https://github.com/llorllale', 'https://github.com/nosnaj', 'https://github.com/gabrielkw', 'https://github.com/artnez', 'https://github.com/NourdineMazali', 'https://github.com/briandoll', 'https://github.com/ebfull', 'https://github.com/elliottregan', 'https://github.com/bcgalvin', 'https://github.com/dandelany', 'https://github.com/kebertxela', 'https://github.com/b0o', 'https://github.com/infogulch', 'https://github.com/torce', 'https://github.com/dopeboy', 'https://github.com/jakeogh', 'https://github.com/theo-chassaigne', 'https://github.com/Shazib', 'https://github.com/okal', 'https://github.com/suranah', 'https://github.com/bassplayerch', 'https://github.com/tianshuo', 'https://github.com/Gnapstar', 'https://github.com/haarp', 'https://github.com/bleuge', 'https://github.com/voyc-jean', 'https://github.com/sop', 'https://github.com/bheinks', 'https://github.com/giu', 'https://github.com/DSteve595', 'https://github.com/vysker', 'https://github.com/joereynolds', 'https://github.com/jayvn', 'https://github.com/GarethPW', 'https://github.com/markronquillo', 'https://github.com/atomheartother', 'https://github.com/MeLlamoPablo', 'https://github.com/metabrain', 'https://github.com/agumonkey', 'https://github.com/oaeide', 'https://github.com/hako', 'https://github.com/pfrenssen', 'https://github.com/alexanderwasey', 'https://github.com/vszakats', 'https://github.com/josh-perry', 'https://github.com/d4nyll', 'https://github.com/DestRoYeDnz', 'https://github.com/Gustash', 'https://github.com/willbamford', 'https://github.com/kieran-paddle', 'https://github.com/alex3305', 'https://github.com/mount2010', 'https://github.com/motform', 'https://github.com/bool3max', 'https://github.com/citrusui', 'https://github.com/IsaacWoods', 'https://github.com/vegidio']}"
glennrp/libpng,https://github.com/glennrp/libpng,184,2017-11-03T04:52:35Z,2017-11-03T16:32:16Z,2017-11-03T16:52:45Z,MERGED,True,54,54,24,https://github.com/luzpaz,Misc. typos,1,[],https://github.com/glennrp/libpng/pull/184,https://github.com/luzpaz,1,https://github.com/glennrp/libpng/pull/184,"Some are user facing. Some are in actual code. Most are in source comments. Also, please double check the changes in contrib/tools/pngfix.c","Some are user facing. Some are in actual code. Most are in source comments. Also, please double check the changes in contrib/tools/pngfix.c",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,184,2017-11-03T04:52:35Z,2017-11-03T16:32:16Z,2017-11-03T16:52:45Z,MERGED,True,54,54,24,https://github.com/luzpaz,Misc. typos,1,[],https://github.com/glennrp/libpng/pull/184,https://github.com/luzpaz,2,https://github.com/glennrp/libpng/pull/184#issuecomment-341692387,"Some are user facing. Some are in actual code. Most are in source comments. Also, please double check the changes in contrib/tools/pngfix.c","I would have submitted PR to master but it was behind both libpng17 and libpng16
Is there a preference as to which branch I should submit to ?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,184,2017-11-03T04:52:35Z,2017-11-03T16:32:16Z,2017-11-03T16:52:45Z,MERGED,True,54,54,24,https://github.com/luzpaz,Misc. typos,1,[],https://github.com/glennrp/libpng/pull/184,https://github.com/glennrp,3,https://github.com/glennrp/libpng/pull/184#issuecomment-341698867,"Some are user facing. Some are in actual code. Most are in source comments. Also, please double check the changes in contrib/tools/pngfix.c","libpng16 first, then a separate patch for libpng17.  ""master"" will be taken care of automatically from libpng16.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,184,2017-11-03T04:52:35Z,2017-11-03T16:32:16Z,2017-11-03T16:52:45Z,MERGED,True,54,54,24,https://github.com/luzpaz,Misc. typos,1,[],https://github.com/glennrp/libpng/pull/184,https://github.com/luzpaz,4,https://github.com/glennrp/libpng/pull/184#issuecomment-341699479,"Some are user facing. Some are in actual code. Most are in source comments. Also, please double check the changes in contrib/tools/pngfix.c",cool 👍,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,188,2017-11-09T03:06:10Z,2018-08-19T05:16:23Z,2018-08-19T07:11:28Z,MERGED,True,10,24,1,https://github.com/ioquatix,Prefer memcpy to manual pointer arithmetic.,1,[],https://github.com/glennrp/libpng/pull/188,https://github.com/ioquatix,1,https://github.com/glennrp/libpng/pull/188,"Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?","Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?",True,"{'THUMBS_UP': ['https://github.com/feroldi', 'https://github.com/kevincox']}"
glennrp/libpng,https://github.com/glennrp/libpng,188,2017-11-09T03:06:10Z,2018-08-19T05:16:23Z,2018-08-19T07:11:28Z,MERGED,True,10,24,1,https://github.com/ioquatix,Prefer memcpy to manual pointer arithmetic.,1,[],https://github.com/glennrp/libpng/pull/188,https://github.com/ioquatix,2,https://github.com/glennrp/libpng/pull/188#issuecomment-343033877,"Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?",I don't really know how to run tests - can you advise how I can test these changes?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,188,2017-11-09T03:06:10Z,2018-08-19T05:16:23Z,2018-08-19T07:11:28Z,MERGED,True,10,24,1,https://github.com/ioquatix,Prefer memcpy to manual pointer arithmetic.,1,[],https://github.com/glennrp/libpng/pull/188,https://github.com/ioquatix,3,https://github.com/glennrp/libpng/pull/188#issuecomment-360373364,"Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?",Any update to this?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,188,2017-11-09T03:06:10Z,2018-08-19T05:16:23Z,2018-08-19T07:11:28Z,MERGED,True,10,24,1,https://github.com/ioquatix,Prefer memcpy to manual pointer arithmetic.,1,[],https://github.com/glennrp/libpng/pull/188,https://github.com/ioquatix,4,https://github.com/glennrp/libpng/pull/188#issuecomment-367501882,"Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?",Bump :),True,{}
glennrp/libpng,https://github.com/glennrp/libpng,188,2017-11-09T03:06:10Z,2018-08-19T05:16:23Z,2018-08-19T07:11:28Z,MERGED,True,10,24,1,https://github.com/ioquatix,Prefer memcpy to manual pointer arithmetic.,1,[],https://github.com/glennrp/libpng/pull/188,https://github.com/ioquatix,5,https://github.com/glennrp/libpng/pull/188#issuecomment-386780577,"Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?",Bump :),True,{}
glennrp/libpng,https://github.com/glennrp/libpng,188,2017-11-09T03:06:10Z,2018-08-19T05:16:23Z,2018-08-19T07:11:28Z,MERGED,True,10,24,1,https://github.com/ioquatix,Prefer memcpy to manual pointer arithmetic.,1,[],https://github.com/glennrp/libpng/pull/188,https://github.com/ioquatix,6,https://github.com/glennrp/libpng/pull/188#issuecomment-414108634,"Fixes #181
However, I couldn't see the same code in libpng17 - has the intel specific code path been removed?",Awesome thanks for merging this!,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,190,2017-11-13T21:07:56Z,2017-12-17T23:51:22Z,2020-02-04T21:44:01Z,MERGED,True,6,0,1,https://github.com/vadz,Avoid -Wundef warnings when building libpng,1,[],https://github.com/glennrp/libpng/pull/190,https://github.com/vadz,1,https://github.com/glennrp/libpng/pull/190,"Always define PNG_INTEL_SSE_OPT and PNG_INTEL_SSE_IMPLEMENTATION before
comparing them with 0.

Just a trivial patch to avoid a few dozens of warnings such as:
pngpriv.h:217:5: warning: ""PNG_INTEL_SSE_OPT"" is not defined [-Wundef]
 #if PNG_INTEL_SSE_OPT > 0
     ^~~~~~~~~~~~~~~~~
...
pngpriv.h:1343:5: warning: ""PNG_INTEL_SSE_IMPLEMENTATION"" is not defined [-Wundef]
 #if PNG_INTEL_SSE_IMPLEMENTATION > 0
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~","Always define PNG_INTEL_SSE_OPT and PNG_INTEL_SSE_IMPLEMENTATION before
comparing them with 0.

Just a trivial patch to avoid a few dozens of warnings such as:
pngpriv.h:217:5: warning: ""PNG_INTEL_SSE_OPT"" is not defined [-Wundef]
 #if PNG_INTEL_SSE_OPT > 0
     ^~~~~~~~~~~~~~~~~
...
pngpriv.h:1343:5: warning: ""PNG_INTEL_SSE_IMPLEMENTATION"" is not defined [-Wundef]
 #if PNG_INTEL_SSE_IMPLEMENTATION > 0
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~",True,{'THUMBS_UP': ['https://github.com/alalek']}
glennrp/libpng,https://github.com/glennrp/libpng,193,2017-11-18T19:20:22Z,2022-03-04T18:21:27Z,2022-03-04T18:21:27Z,CLOSED,False,2,0,1,None,Suggestion for code style fix.,1,[],https://github.com/glennrp/libpng/pull/193,None,1,https://github.com/glennrp/libpng/pull/193,Adding brackets to show explicitly which else belongs to which if statement.,Adding brackets to show explicitly which else belongs to which if statement.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,195,2017-12-06T10:05:32Z,2020-05-18T04:36:05Z,2020-05-18T04:36:05Z,CLOSED,False,8,9,2,https://github.com/mpoullet,[libpng15] fix memset in pngrutil.c,2,[],https://github.com/glennrp/libpng/pull/195,https://github.com/mpoullet,1,https://github.com/glennrp/libpng/pull/195,"There's a small issue in pngrutil.c that is already fixed in libpng16 branch.
Two warnings fixed too:
> pngpriv.h:1281:17: warning: redundant redeclaration of 'png_check_chunk_name' [-Wredundant-decls]
> pngpriv.h:1272:17: note: previous declaration of 'png_check_chunk_name' was here","There's a small issue in pngrutil.c that is already fixed in libpng16 branch.
Two warnings fixed too:
> pngpriv.h:1281:17: warning: redundant redeclaration of 'png_check_chunk_name' [-Wredundant-decls]
> pngpriv.h:1272:17: note: previous declaration of 'png_check_chunk_name' was here",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,195,2017-12-06T10:05:32Z,2020-05-18T04:36:05Z,2020-05-18T04:36:05Z,CLOSED,False,8,9,2,https://github.com/mpoullet,[libpng15] fix memset in pngrutil.c,2,[],https://github.com/glennrp/libpng/pull/195,https://github.com/mpoullet,2,https://github.com/glennrp/libpng/pull/195#issuecomment-390134272,"There's a small issue in pngrutil.c that is already fixed in libpng16 branch.
Two warnings fixed too:
> pngpriv.h:1281:17: warning: redundant redeclaration of 'png_check_chunk_name' [-Wredundant-decls]
> pngpriv.h:1272:17: note: previous declaration of 'png_check_chunk_name' was here",I'd still like to have this change merged. Is there any reviewer available?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,195,2017-12-06T10:05:32Z,2020-05-18T04:36:05Z,2020-05-18T04:36:05Z,CLOSED,False,8,9,2,https://github.com/mpoullet,[libpng15] fix memset in pngrutil.c,2,[],https://github.com/glennrp/libpng/pull/195,https://github.com/mpoullet,3,https://github.com/glennrp/libpng/pull/195#issuecomment-452283455,"There's a small issue in pngrutil.c that is already fixed in libpng16 branch.
Two warnings fixed too:
> pngpriv.h:1281:17: warning: redundant redeclaration of 'png_check_chunk_name' [-Wredundant-decls]
> pngpriv.h:1272:17: note: previous declaration of 'png_check_chunk_name' was here",I'm still waiting for a review. What is the correct way to contribute to libpng?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,195,2017-12-06T10:05:32Z,2020-05-18T04:36:05Z,2020-05-18T04:36:05Z,CLOSED,False,8,9,2,https://github.com/mpoullet,[libpng15] fix memset in pngrutil.c,2,[],https://github.com/glennrp/libpng/pull/195,https://github.com/ctruta,4,https://github.com/glennrp/libpng/pull/195#issuecomment-629940713,"There's a small issue in pngrutil.c that is already fixed in libpng16 branch.
Two warnings fixed too:
> pngpriv.h:1281:17: warning: redundant redeclaration of 'png_check_chunk_name' [-Wredundant-decls]
> pngpriv.h:1272:17: note: previous declaration of 'png_check_chunk_name' was here","Hello, thank you for your submission, and sorry about this very very belated answer.
libpng15 is no longer under development, and it is strongly recommended against using this version. The last update to libpng15 was in September 2017. There have been many bug fixes applied to libpng since then. Some of these fixes were quite important, but none of them have been back-ported to this old branch, and there are no further intentions to do so.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,197,2017-12-20T12:49:25Z,2018-01-08T14:01:51Z,2018-01-08T14:01:51Z,CLOSED,False,3,0,1,https://github.com/mpw96,avoid buffer overrun,1,[],https://github.com/glennrp/libpng/pull/197,https://github.com/mpw96,1,https://github.com/glennrp/libpng/pull/197,"Hi,
buffer has size length. If buffer does not contain a 0 byte, we can leave the for-loop a few lines above with keyword_length==length-1.
The check for the compression type below will then try to access buffer[length], which is illegal.
Best regards
Marc-Philip","Hi,
buffer has size length. If buffer does not contain a 0 byte, we can leave the for-loop a few lines above with keyword_length==length-1.
The check for the compression type below will then try to access buffer[length], which is illegal.
Best regards
Marc-Philip",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,197,2017-12-20T12:49:25Z,2018-01-08T14:01:51Z,2018-01-08T14:01:51Z,CLOSED,False,3,0,1,https://github.com/mpw96,avoid buffer overrun,1,[],https://github.com/glennrp/libpng/pull/197,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/197#issuecomment-355873020,"Hi,
buffer has size length. If buffer does not contain a 0 byte, we can leave the for-loop a few lines above with keyword_length==length-1.
The check for the compression type below will then try to access buffer[length], which is illegal.
Best regards
Marc-Philip","The issue that you're mentioning doesn't happen. The previous check already covers this case, because (keyword_length + 3 > length) is less strict than (keyword_length + 1 >= length). You'll only get to see (correctly) the ""truncated"" error.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,197,2017-12-20T12:49:25Z,2018-01-08T14:01:51Z,2018-01-08T14:01:51Z,CLOSED,False,3,0,1,https://github.com/mpw96,avoid buffer overrun,1,[],https://github.com/glennrp/libpng/pull/197,https://github.com/mpw96,3,https://github.com/glennrp/libpng/pull/197#issuecomment-355974045,"Hi,
buffer has size length. If buffer does not contain a 0 byte, we can leave the for-loop a few lines above with keyword_length==length-1.
The check for the compression type below will then try to access buffer[length], which is illegal.
Best regards
Marc-Philip","Yes, you are right. Thank you for checking!",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,203,2018-02-01T18:50:00Z,2018-09-04T03:06:32Z,2018-09-04T03:06:32Z,MERGED,True,213,10,7,https://github.com/richard-townsend-arm,Optimize png_do_expand_palette for ARM,1,[],https://github.com/glennrp/libpng/pull/203,https://github.com/richard-townsend-arm,1,https://github.com/glennrp/libpng/pull/203,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,203,2018-02-01T18:50:00Z,2018-09-04T03:06:32Z,2018-09-04T03:06:32Z,MERGED,True,213,10,7,https://github.com/richard-townsend-arm,Optimize png_do_expand_palette for ARM,1,[],https://github.com/glennrp/libpng/pull/203,https://github.com/richard-townsend-arm,2,https://github.com/glennrp/libpng/pull/203#issuecomment-362366225,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,"I recently tested this in Chromium and found that it it improves performance considerably for palette-based PNGs with transparency (24% on a Cortex A53 little core, and 10% on an Cortex A72 core) and without (22% on an A53 core). With that complete, I hope we can improve libpng for everybody, so please let me know what you think.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,203,2018-02-01T18:50:00Z,2018-09-04T03:06:32Z,2018-09-04T03:06:32Z,MERGED,True,213,10,7,https://github.com/richard-townsend-arm,Optimize png_do_expand_palette for ARM,1,[],https://github.com/glennrp/libpng/pull/203,https://github.com/glennrp,3,https://github.com/glennrp/libpng/pull/203#issuecomment-362440059,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,Thanks.  I have invited the png-mng-implement mailing list members to evaluate this.  I would be interested in seeing a port to INTEL-SSE.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,203,2018-02-01T18:50:00Z,2018-09-04T03:06:32Z,2018-09-04T03:06:32Z,MERGED,True,213,10,7,https://github.com/richard-townsend-arm,Optimize png_do_expand_palette for ARM,1,[],https://github.com/glennrp/libpng/pull/203,https://github.com/mtklein,4,https://github.com/glennrp/libpng/pull/203#issuecomment-362574465,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,"Hey there!  I helped review[1] this to get it into Chromium, and you may remember the work Matt Sarett and I did a while back on the optimized filter functions.
The particular approach this patch takes is something that's really only directly possible with NEON's deinterlacing load and reinterlacing store instructions.  It probably would be possible to accelerate these functions using SSSE3 and above (taking advantage of pshufb) but it wouldn't really be a ""port""... I'd expect the x86 approach would want some new thought and not be a 1:1 translation.
All that's to say, while I think x86 versions of these routines are possibly valuable, here on ARM is where platform-specific code will have the greatest impact.  On ARM it's very natural to work with packed 3-byte rgb arrays, but that'll be a bit of an interesting obstacle on x86.
[1] https://chromium-review.googlesource.com/c/chromium/src/+/817116 for most of the history of that review, landed for good in https://chromium-review.googlesource.com/c/chromium/src/+/868396",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,203,2018-02-01T18:50:00Z,2018-09-04T03:06:32Z,2018-09-04T03:06:32Z,MERGED,True,213,10,7,https://github.com/richard-townsend-arm,Optimize png_do_expand_palette for ARM,1,[],https://github.com/glennrp/libpng/pull/203,https://github.com/Adenilson,5,https://github.com/glennrp/libpng/pull/203#issuecomment-365008001,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,"We should start shipping this optimization on Chromium M66 (branch on March 1th), it would be awesome if it could be merged upstream in the future.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,203,2018-02-01T18:50:00Z,2018-09-04T03:06:32Z,2018-09-04T03:06:32Z,MERGED,True,213,10,7,https://github.com/richard-townsend-arm,Optimize png_do_expand_palette for ARM,1,[],https://github.com/glennrp/libpng/pull/203,https://github.com/richard-townsend-arm,6,https://github.com/glennrp/libpng/pull/203#issuecomment-412878678,ARM-specific optimization processes 8 or 4 pixels at once. Improves performance by around 10-22% on a recent ARM Chromebook.,"Hi folks, given that this project is still under active development, it'd be great to contribute this optimisation so that Chromium can re-sync with the canonical libpng. Does anybody have some review comments (especially @glennrp, @ctruta)?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,204,2018-02-09T11:57:53Z,2018-03-05T17:19:44Z,2018-06-05T04:30:17Z,MERGED,True,39,39,24,https://github.com/luzpaz,More misc. typos,1,[],https://github.com/glennrp/libpng/pull/204,https://github.com/luzpaz,1,https://github.com/glennrp/libpng/pull/204,"found via codespell-q 3
please review
Follow-up to #184","found via codespell-q 3
please review
Follow-up to #184",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,204,2018-02-09T11:57:53Z,2018-03-05T17:19:44Z,2018-06-05T04:30:17Z,MERGED,True,39,39,24,https://github.com/luzpaz,More misc. typos,1,[],https://github.com/glennrp/libpng/pull/204,https://github.com/luzpaz,2,https://github.com/glennrp/libpng/pull/204#issuecomment-368468687,"found via codespell-q 3
please review
Follow-up to #184",please review at your convenience,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,208,2018-02-17T03:37:11Z,,2020-05-25T05:36:38Z,OPEN,False,176,71,7,https://github.com/pps83,Avoid mixing incompatible CRTs when linking to libpng.dll,1,[],https://github.com/glennrp/libpng/pull/208,https://github.com/pps83,1,https://github.com/glennrp/libpng/pull/208,"If libpng.dll is built using static linking (without importing C runtimes from whatever version of ms compiler that was used to build it), or when it was build by mingw then such dll won't work properly as stdio fread/fwrite will try to interpret FILE pointers from unrelated CRT and will result in undefined behavior.","If libpng.dll is built using static linking (without importing C runtimes from whatever version of ms compiler that was used to build it), or when it was build by mingw then such dll won't work properly as stdio fread/fwrite will try to interpret FILE pointers from unrelated CRT and will result in undefined behavior.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,208,2018-02-17T03:37:11Z,,2020-05-25T05:36:38Z,OPEN,False,176,71,7,https://github.com/pps83,Avoid mixing incompatible CRTs when linking to libpng.dll,1,[],https://github.com/glennrp/libpng/pull/208,https://github.com/pps83,2,https://github.com/glennrp/libpng/pull/208#issuecomment-366413957,"If libpng.dll is built using static linking (without importing C runtimes from whatever version of ms compiler that was used to build it), or when it was build by mingw then such dll won't work properly as stdio fread/fwrite will try to interpret FILE pointers from unrelated CRT and will result in undefined behavior.","In my case I built a libpng dll using MS VS2015 compiler and wanted to run tests to validate that everything is ok. To run tests I compiled a separate version of libpng using msys/mingw and simply replaced dll with my own build. Some of tests failed:

I tried to debug and it appears that FILE pointers from the side of test executable are passed across DLL boundary. This change introduces three new api functions: png_init_io2, png_init_read_io and png_init_write_io and these differ from png_init_io by passing function pointers to fread/fwrite/fflush along with FILE pointer.
Also, png_init_io is redefined as a macro that forwards FILE pointer to png_init_io2 along with fread/fwrite/fflush. This way simple recompilation of existing code that uses png_init_io will make it use png_init_io2.
No changes were needed to code that uses libpng and all the tests passed. In short, libpng could use stdio internally and create/read/write/close files but if these pass across api boundary then it might become and issue with static builds on windows.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,210,2018-03-05T14:18:36Z,2018-03-05T17:17:15Z,2018-03-05T17:17:16Z,MERGED,True,1,1,1,https://github.com/taigacon,Fix png_set_option to work.,1,[],https://github.com/glennrp/libpng/pull/210,https://github.com/taigacon,1,https://github.com/glennrp/libpng/pull/210,"The type of png_ptr->options has changed from png_byte to png_uint_32, therefore '& 0xFF' is undesired.","The type of png_ptr->options has changed from png_byte to png_uint_32, therefore '& 0xFF' is undesired.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,214,2018-03-19T15:43:35Z,2020-05-25T05:36:13Z,2020-05-25T05:36:14Z,MERGED,True,1,1,1,https://github.com/crrodriguez,libpng.pc.in: zlib dependency is private,1,[],https://github.com/glennrp/libpng/pull/214,https://github.com/crrodriguez,1,https://github.com/glennrp/libpng/pull/214,zlib should be injected only when pkgconfig is ran requesting flags suitable for static linking..,zlib should be injected only when pkgconfig is ran requesting flags suitable for static linking..,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,215,2018-03-26T00:31:15Z,2020-05-18T04:46:54Z,2020-05-18T04:46:55Z,CLOSED,False,1,1,1,https://github.com/VileLasagna,[CMake] Corrected typo regarding disabling PNG_INTEL_SSE,1,[],https://github.com/glennrp/libpng/pull/215,https://github.com/VileLasagna,1,https://github.com/glennrp/libpng/pull/215,"The ideal solution would be to change PNG_INTEL_SSE into a proper cmake OPTION, but I'm not 100% confident casing on ON/OFF wouldn't be an issue so this is the smaller change.
Regardless, code as is is broken as it's impossible to disable it should the user want to, for whatever reason","The ideal solution would be to change PNG_INTEL_SSE into a proper cmake OPTION, but I'm not 100% confident casing on ON/OFF wouldn't be an issue so this is the smaller change.
Regardless, code as is is broken as it's impossible to disable it should the user want to, for whatever reason",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,215,2018-03-26T00:31:15Z,2020-05-18T04:46:54Z,2020-05-18T04:46:55Z,CLOSED,False,1,1,1,https://github.com/VileLasagna,[CMake] Corrected typo regarding disabling PNG_INTEL_SSE,1,[],https://github.com/glennrp/libpng/pull/215,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/215#issuecomment-629943192,"The ideal solution would be to change PNG_INTEL_SSE into a proper cmake OPTION, but I'm not 100% confident casing on ON/OFF wouldn't be an issue so this is the smaller change.
Regardless, code as is is broken as it's impossible to disable it should the user want to, for whatever reason",A fix for all architectures was applied in commit ddc842b.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,218,2018-04-11T20:28:46Z,2018-04-26T13:09:52Z,2018-04-26T13:09:52Z,CLOSED,False,3,3,1,https://github.com/fhoech,Let original HP/MS sRGB ICC profiles pass checks,1,[],https://github.com/glennrp/libpng/pull/218,https://github.com/fhoech,1,https://github.com/glennrp/libpng/pull/218,"Following the rationale for letting these profiles pass the checks.
Most importantly, the technical rationale: The HP/MS sRGB profile is not broken, and therefore no reason exists for it to arbitrarily fail the checks. It's whitepoint is set to the D65 values, but this is not an error for ICC v2 profiles like this one - the ICC itself recommends using a media white of D50 (and storing chromatic adaptation information in the 'chad' tag), but it is not a requirement in that case. See http://www.color.org/srgbprofiles.xalter#v2
There's also practical rationale:

The presence of these checks tends to burden end-users (and in some cases developers/packagers) with undue confusion, because graphical applications or intermediate libraries used by such applications which in turn use libpng may make any error/warning messages coming from libpng visible in the form of a popup modal window, for perfectly valid PNG images (and likewise, perfectly valid embedded sRGB profiles), whilst not pointing to any real problem (""Warning: The sky is blue!"" - well, yes, but so what?).
The HP/MS sRGB profile is still the original sRGB profile, with millions upon millions of copies circulating in active use, it ships with Windows from versions 98 through 10 (and likely future versions as well), and many applications including Photoshop ship an identical sRGB profile, or use the system sRGB profile. Graphical assets used in a very wide variety of software are created (and will keep getting created) with this profile embedded.
The HP/MS sRGB profile is not the only valid sRGB ICCv2 profile that has a D65 whitepoint (ArgyllCMS ships its own equivalent sRGB profile).
It is unrealistic to expect millions of existing PNGs to be re-saved just to pass an (imho) ill-conceived check. The answer so far by most distributions and upstreams seems to have been to just disable the checks entirely, thus demoting them to superfluous code.","Following the rationale for letting these profiles pass the checks.
Most importantly, the technical rationale: The HP/MS sRGB profile is not broken, and therefore no reason exists for it to arbitrarily fail the checks. It's whitepoint is set to the D65 values, but this is not an error for ICC v2 profiles like this one - the ICC itself recommends using a media white of D50 (and storing chromatic adaptation information in the 'chad' tag), but it is not a requirement in that case. See http://www.color.org/srgbprofiles.xalter#v2
There's also practical rationale:

The presence of these checks tends to burden end-users (and in some cases developers/packagers) with undue confusion, because graphical applications or intermediate libraries used by such applications which in turn use libpng may make any error/warning messages coming from libpng visible in the form of a popup modal window, for perfectly valid PNG images (and likewise, perfectly valid embedded sRGB profiles), whilst not pointing to any real problem (""Warning: The sky is blue!"" - well, yes, but so what?).
The HP/MS sRGB profile is still the original sRGB profile, with millions upon millions of copies circulating in active use, it ships with Windows from versions 98 through 10 (and likely future versions as well), and many applications including Photoshop ship an identical sRGB profile, or use the system sRGB profile. Graphical assets used in a very wide variety of software are created (and will keep getting created) with this profile embedded.
The HP/MS sRGB profile is not the only valid sRGB ICCv2 profile that has a D65 whitepoint (ArgyllCMS ships its own equivalent sRGB profile).
It is unrealistic to expect millions of existing PNGs to be re-saved just to pass an (imho) ill-conceived check. The answer so far by most distributions and upstreams seems to have been to just disable the checks entirely, thus demoting them to superfluous code.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,223,2018-04-28T11:04:06Z,2020-05-18T03:48:34Z,2020-05-18T03:48:35Z,CLOSED,False,2,4,1,https://github.com/dlemstra,Fixed memory leak in png_handle_eXIf (#220).,1,[],https://github.com/glennrp/libpng/pull/223,https://github.com/dlemstra,1,https://github.com/glennrp/libpng/pull/223,This patch fixes the memory leak reported in #220.,This patch fixes the memory leak reported in #220.,True,{'THUMBS_UP': ['https://github.com/alalek']}
glennrp/libpng,https://github.com/glennrp/libpng,223,2018-04-28T11:04:06Z,2020-05-18T03:48:34Z,2020-05-18T03:48:35Z,CLOSED,False,2,4,1,https://github.com/dlemstra,Fixed memory leak in png_handle_eXIf (#220).,1,[],https://github.com/glennrp/libpng/pull/223,https://github.com/dlemstra,2,https://github.com/glennrp/libpng/pull/223#issuecomment-478345174,This patch fixes the memory leak reported in #220.,Just did a rebase to fix this PR. Would love to finally see this get merged.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,223,2018-04-28T11:04:06Z,2020-05-18T03:48:34Z,2020-05-18T03:48:35Z,CLOSED,False,2,4,1,https://github.com/dlemstra,Fixed memory leak in png_handle_eXIf (#220).,1,[],https://github.com/glennrp/libpng/pull/223,https://github.com/tangyaofang,3,https://github.com/glennrp/libpng/pull/223#issuecomment-498135637,This patch fixes the memory leak reported in #220.,"The perfect solution, memory leaks should occur with if (png_crc_finish(png_ptr, 0) != 0).",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,223,2018-04-28T11:04:06Z,2020-05-18T03:48:34Z,2020-05-18T03:48:35Z,CLOSED,False,2,4,1,https://github.com/dlemstra,Fixed memory leak in png_handle_eXIf (#220).,1,[],https://github.com/glennrp/libpng/pull/223,https://github.com/dlemstra,4,https://github.com/glennrp/libpng/pull/223#issuecomment-499518229,This patch fixes the memory leak reported in #220.,Do you want me to do anything else @ctruta or can we merge this?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,223,2018-04-28T11:04:06Z,2020-05-18T03:48:34Z,2020-05-18T03:48:35Z,CLOSED,False,2,4,1,https://github.com/dlemstra,Fixed memory leak in png_handle_eXIf (#220).,1,[],https://github.com/glennrp/libpng/pull/223,https://github.com/ctruta,5,https://github.com/glennrp/libpng/pull/223#issuecomment-629930214,This patch fixes the memory leak reported in #220.,"Hi, Dirk. As I was going through the pull requests in a completely non-scientific order, I missed the fact that your commit was submitted way before Skal's. I should have applied your fix. Many apologies.
As I am preparing (finally!) the libpng-1.6.38 release, I will give credit to both you and Skal.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,225,2018-05-17T07:37:50Z,,2020-05-25T05:36:37Z,OPEN,False,696,0,6,https://github.com/zhanglixia-hf,LOONGSON MIPS MMI SIMD optimized filter functions on 64 bits OS,1,[],https://github.com/glennrp/libpng/pull/225,https://github.com/zhanglixia-hf,1,https://github.com/glennrp/libpng/pull/225,"Implement SIMD vector support for LOONGSON MIPS MMI SIMD equivalent to libpng support for SIMD optimizations for Intel SSE, ARM Neon, MIPS MSA and PowerPC VSX. Achieve speedup appropriate for LOONGSON vector width and processor pipeline in 64 bits OS.","Implement SIMD vector support for LOONGSON MIPS MMI SIMD equivalent to libpng support for SIMD optimizations for Intel SSE, ARM Neon, MIPS MSA and PowerPC VSX. Achieve speedup appropriate for LOONGSON vector width and processor pipeline in 64 bits OS.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,225,2018-05-17T07:37:50Z,,2020-05-25T05:36:37Z,OPEN,False,696,0,6,https://github.com/zhanglixia-hf,LOONGSON MIPS MMI SIMD optimized filter functions on 64 bits OS,1,[],https://github.com/glennrp/libpng/pull/225,https://github.com/gxw-loongson,2,https://github.com/glennrp/libpng/pull/225#issuecomment-573984045,"Implement SIMD vector support for LOONGSON MIPS MMI SIMD equivalent to libpng support for SIMD optimizations for Intel SSE, ARM Neon, MIPS MSA and PowerPC VSX. Achieve speedup appropriate for LOONGSON vector width and processor pipeline in 64 bits OS.","This pull request can close, I have create a new pull request (# 328) for loongson platform. @zhanglixia-hf",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,226,2018-05-20T22:49:18Z,2020-05-19T07:03:46Z,2020-05-19T12:37:08Z,CLOSED,False,2,1,1,https://github.com/alex,Added a flag to the build system to disable building binaries,1,[],https://github.com/glennrp/libpng/pull/226,https://github.com/alex,1,https://github.com/glennrp/libpng/pull/226,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,226,2018-05-20T22:49:18Z,2020-05-19T07:03:46Z,2020-05-19T12:37:08Z,CLOSED,False,2,1,1,https://github.com/alex,Added a flag to the build system to disable building binaries,1,[],https://github.com/glennrp/libpng/pull/226,https://github.com/alex,2,https://github.com/glennrp/libpng/pull/226#issuecomment-493804156,,@ctruta do you need anything from me on this? I see you rebased it a few times :-),True,{}
glennrp/libpng,https://github.com/glennrp/libpng,226,2018-05-20T22:49:18Z,2020-05-19T07:03:46Z,2020-05-19T12:37:08Z,CLOSED,False,2,1,1,https://github.com/alex,Added a flag to the build system to disable building binaries,1,[],https://github.com/glennrp/libpng/pull/226,https://github.com/ctruta,3,https://github.com/glennrp/libpng/pull/226#issuecomment-630592576,,"Hi. I have finally applied your patch (to be pushed shortly), with a modification: I renamed PNG_BINARIES to PNG_EXECUTABLES, in order to follow the CMake terminology.
Thank you very much for your contribution.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,226,2018-05-20T22:49:18Z,2020-05-19T07:03:46Z,2020-05-19T12:37:08Z,CLOSED,False,2,1,1,https://github.com/alex,Added a flag to the build system to disable building binaries,1,[],https://github.com/glennrp/libpng/pull/226,https://github.com/ctruta,4,https://github.com/glennrp/libpng/pull/226#issuecomment-630626408,,Integrated.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,228,2018-06-05T04:39:48Z,2018-08-19T04:57:21Z,2018-08-19T16:19:50Z,MERGED,True,14,14,9,https://github.com/luzpaz,Some more trivial source typos,1,[],https://github.com/glennrp/libpng/pull/228,https://github.com/luzpaz,1,https://github.com/glennrp/libpng/pull/228,Found via codespell and grep,Found via codespell and grep,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,231,2018-06-18T00:43:45Z,2018-06-18T03:16:04Z,2018-06-18T03:16:04Z,CLOSED,False,308,312,36,https://github.com/ctruta,[libpng16] Replace the remaining instances of png_size_t with size_t,1,[],https://github.com/glennrp/libpng/pull/231,https://github.com/ctruta,1,https://github.com/glennrp/libpng/pull/231,"In v1.6.0, size_t became a required type. It should be used
consistently. To maintain backwards compatibility, png_size_t
is still maintained in deprecated form.","In v1.6.0, size_t became a required type. It should be used
consistently. To maintain backwards compatibility, png_size_t
is still maintained in deprecated form.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,232,2018-06-18T04:27:49Z,2018-07-04T05:49:24Z,2018-07-04T05:49:24Z,MERGED,True,369,371,36,https://github.com/ctruta,Bug fix + code cleanup,3,[],https://github.com/glennrp/libpng/pull/232,https://github.com/ctruta,1,https://github.com/glennrp/libpng/pull/232,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,233,2018-06-26T11:21:14Z,,2020-05-25T05:36:37Z,OPEN,False,3,3,2,https://github.com/jwilk,contrib/gregbook: fix syntax errors,1,[],https://github.com/glennrp/libpng/pull/233,https://github.com/jwilk,1,https://github.com/glennrp/libpng/pull/233,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,233,2018-06-26T11:21:14Z,,2020-05-25T05:36:37Z,OPEN,False,3,3,2,https://github.com/jwilk,contrib/gregbook: fix syntax errors,1,[],https://github.com/glennrp/libpng/pull/233,https://github.com/tangyaofang,2,https://github.com/glennrp/libpng/pull/233#issuecomment-498155870,,"Obvious grammatical mistakes, thank you for discovering.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,241,2018-07-17T01:31:18Z,2018-07-17T02:50:33Z,2018-07-17T03:23:30Z,MERGED,True,24,0,1,https://github.com/endrift,CMakeLists: Fix disabling hardware optimizations,1,[],https://github.com/glennrp/libpng/pull/241,https://github.com/endrift,1,https://github.com/glennrp/libpng/pull/241,"Formerly, disabling hardware optimizations wouldn't actually disable hardware optimization testing logic in pngpriv.h","Formerly, disabling hardware optimizations wouldn't actually disable hardware optimization testing logic in pngpriv.h",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,242,2018-07-17T01:32:06Z,2018-07-17T02:52:05Z,2018-07-17T03:23:16Z,MERGED,True,4,4,1,https://github.com/endrift,"CMakeLists: Fix passing ""off"" for PNG optimizations",1,[],https://github.com/glennrp/libpng/pull/242,https://github.com/endrift,1,https://github.com/glennrp/libpng/pull/242,"Passing ""off"" for hardware optimizations wouldn't match against ""no"" and passing ""no"" wouldn't work because it wasn't in the option lists.","Passing ""off"" for hardware optimizations wouldn't match against ""no"" and passing ""no"" wouldn't work because it wasn't in the option lists.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,243,2018-07-17T01:34:56Z,2018-07-17T02:52:25Z,2018-07-17T03:23:01Z,MERGED,True,4,1,1,https://github.com/endrift,ARM: Disable hand-written AArch32 NEON on AArch64,1,[],https://github.com/glennrp/libpng/pull/243,https://github.com/endrift,1,https://github.com/glennrp/libpng/pull/243,"The NEON assembler does not work on AArch64 and might not properly enable the intrinsics version in all cases. This should enable the intrinsics version.
Note that it doesn't disable the AArch32 code on GCC < 4.6 but GCC did not gain AArch64 support until 4.8 so this isn't an issue.","The NEON assembler does not work on AArch64 and might not properly enable the intrinsics version in all cases. This should enable the intrinsics version.
Note that it doesn't disable the AArch32 code on GCC < 4.6 but GCC did not gain AArch64 support until 4.8 so this isn't an issue.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,251,2018-07-31T22:04:33Z,2018-08-01T04:21:40Z,2018-08-01T10:53:36Z,MERGED,True,1,0,1,https://github.com/ccawley2011,CMake: Fix compilation on systems without libm,1,[],https://github.com/glennrp/libpng/pull/251,https://github.com/ccawley2011,1,https://github.com/glennrp/libpng/pull/251,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,253,2018-08-15T13:20:21Z,2018-09-04T02:32:50Z,2018-09-04T02:32:50Z,MERGED,True,20,3,1,https://github.com/zzzzRuby,Fix error in arm_neon.h on msvc ARM64,1,[],https://github.com/glennrp/libpng/pull/253,https://github.com/zzzzRuby,1,https://github.com/glennrp/libpng/pull/253,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,253,2018-08-15T13:20:21Z,2018-09-04T02:32:50Z,2018-09-04T02:32:50Z,MERGED,True,20,3,1,https://github.com/zzzzRuby,Fix error in arm_neon.h on msvc ARM64,1,[],https://github.com/glennrp/libpng/pull/253,https://github.com/zzzzRuby,2,https://github.com/glennrp/libpng/pull/253#issuecomment-414116203,,"@ctruta OK. I merged the three commits into one and added some comment.
And my real name is Zhijie Liang.
Thanks.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,258,2018-11-08T13:04:51Z,,2020-05-25T05:36:37Z,OPEN,False,1,1,1,https://github.com/eldruin,Allow overwriting library debug postfix,1,[],https://github.com/glennrp/libpng/pull/258,https://github.com/eldruin,1,https://github.com/glennrp/libpng/pull/258,This allows overwriting the library debug postfix from the outside by making it a cmake cache variable.,This allows overwriting the library debug postfix from the outside by making it a cmake cache variable.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,258,2018-11-08T13:04:51Z,,2020-05-25T05:36:37Z,OPEN,False,1,1,1,https://github.com/eldruin,Allow overwriting library debug postfix,1,[],https://github.com/glennrp/libpng/pull/258,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/258#issuecomment-441536985,This allows overwriting the library debug postfix from the outside by making it a cmake cache variable.,"Out of curiosity: why would people want to override this? I thought the 'd' postfix is more or less standard. Besides, this (I would guess) is only for local workflows, since debug builds don't usually get published.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,258,2018-11-08T13:04:51Z,,2020-05-25T05:36:37Z,OPEN,False,1,1,1,https://github.com/eldruin,Allow overwriting library debug postfix,1,[],https://github.com/glennrp/libpng/pull/258,https://github.com/eldruin,3,https://github.com/glennrp/libpng/pull/258#issuecomment-441543991,This allows overwriting the library debug postfix from the outside by making it a cmake cache variable.,We use different debug suffixes in our builds: _d on Windows and Linux and _debug on macOS.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,259,2018-11-08T13:05:30Z,,2020-05-25T05:36:37Z,OPEN,False,1,1,1,https://github.com/eldruin,Allow overwriting png library name,1,[],https://github.com/glennrp/libpng/pull/259,https://github.com/eldruin,1,https://github.com/glennrp/libpng/pull/259,This allows overwriting the png library output name from the outside by making it a cmake cache variable.,This allows overwriting the png library output name from the outside by making it a cmake cache variable.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,259,2018-11-08T13:05:30Z,,2020-05-25T05:36:37Z,OPEN,False,1,1,1,https://github.com/eldruin,Allow overwriting png library name,1,[],https://github.com/glennrp/libpng/pull/259,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/259#issuecomment-441536273,This allows overwriting the png library output name from the outside by making it a cmake cache variable.,"Thank you, this may be useful, but before that:
I inherited the code base with both PNGLIB_NAME and PNG_LIB_NAME. There should only be one, and I need to resolve that, eventually.
As far as nomenclature is concerned, I see that CMake uses both _LIB_NAME and _LIBRARY_NAME, and I don't know which name is appropriate for which use case.
(I'm not a CMake expert, BTW.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,259,2018-11-08T13:05:30Z,,2020-05-25T05:36:37Z,OPEN,False,1,1,1,https://github.com/eldruin,Allow overwriting png library name,1,[],https://github.com/glennrp/libpng/pull/259,https://github.com/eldruin,3,https://github.com/glennrp/libpng/pull/259#issuecomment-441552360,This allows overwriting the png library output name from the outside by making it a cmake cache variable.,"I see. I do not know if there is an actual convention about _LIB_NAME vs ._LIBRARY_NAME. What is somewhat unusual is not having an underscore before LIB (i.e. PNGLIB_NAME), I would say. Although I see that it matches the other PNGLIB_* variable names nicely.
Looking at the CMake modules, here are the occurrences of LIB_NAME and LIBRARY_NAME
I think having just one variable is much more important than whatever is named. I saw that the difference in both variables is that PNGLIB_NAME contains the library prefix for all platforms (but is only used for POSIX platform cases) and PNG_LIB_NAME does not contain the library prefix and is used to actually give the library the name, which will make CMake add the lib prefix only where appropriate.
I will open a separate PR addressing this.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,260,2018-11-26T09:48:32Z,,2020-05-25T05:36:37Z,OPEN,False,14,16,1,https://github.com/eldruin,Repurpose PNGLIB_NAME to remove internal variable PNG_LIB_NAME,2,[],https://github.com/glennrp/libpng/pull/260,https://github.com/eldruin,1,https://github.com/glennrp/libpng/pull/260,As discussed in #259,As discussed in #259,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,260,2018-11-26T09:48:32Z,,2020-05-25T05:36:37Z,OPEN,False,14,16,1,https://github.com/eldruin,Repurpose PNGLIB_NAME to remove internal variable PNG_LIB_NAME,2,[],https://github.com/glennrp/libpng/pull/260,https://github.com/eldruin,2,https://github.com/glennrp/libpng/pull/260#issuecomment-461351690,As discussed in #259,I just resolved the conflicts.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,261,2018-11-27T20:07:40Z,,2020-05-25T05:36:36Z,OPEN,False,4,1,2,https://github.com/mrserb,Support of PNG_ADLER32_SUPPORTED,1,[],https://github.com/glennrp/libpng/pull/261,https://github.com/mrserb,1,https://github.com/glennrp/libpng/pull/261,"This is the fix for #187
The new ""official"" options is added to enable/disable ADLER32","This is the fix for #187
The new ""official"" options is added to enable/disable ADLER32",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,261,2018-11-27T20:07:40Z,,2020-05-25T05:36:36Z,OPEN,False,4,1,2,https://github.com/mrserb,Support of PNG_ADLER32_SUPPORTED,1,[],https://github.com/glennrp/libpng/pull/261,https://github.com/tangyaofang,2,https://github.com/glennrp/libpng/pull/261#issuecomment-497183946,"This is the fix for #187
The new ""official"" options is added to enable/disable ADLER32",It is a good solution.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,263,2018-12-04T20:11:51Z,2018-12-10T04:26:38Z,2018-12-10T04:26:38Z,CLOSED,False,7,1,1,https://github.com/a-kulakov,Fix png_set_filter() with PNG_FILTER_VALUE_* as filter,1,[],https://github.com/glennrp/libpng/pull/263,https://github.com/a-kulakov,1,https://github.com/glennrp/libpng/pull/263,Also set PNG_FILTER_NONE for undocumented values within (PNG_ALL_FILTERS | 0x07) mask,Also set PNG_FILTER_NONE for undocumented values within (PNG_ALL_FILTERS | 0x07) mask,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,263,2018-12-04T20:11:51Z,2018-12-10T04:26:38Z,2018-12-10T04:26:38Z,CLOSED,False,7,1,1,https://github.com/a-kulakov,Fix png_set_filter() with PNG_FILTER_VALUE_* as filter,1,[],https://github.com/glennrp/libpng/pull/263,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/263#issuecomment-445673985,Also set PNG_FILTER_NONE for undocumented values within (PNG_ALL_FILTERS | 0x07) mask,"Thanks, but this is against the originally-intended design. It is allowed to set custom (private) compression methods >= 128, and custom (private) filters >= 128 also. For MNG, there is filter value 64 for intra-pixel differencing. Now, MNG has failed to get significant traction, but that is another story.
Although nobody came forward to register new filter methods, and it is highly unlikely that new filters will ever come up and be registered, I would still like libpng to follow the original design.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,268,2018-12-31T06:25:24Z,2019-01-21T06:53:48Z,2019-01-21T06:53:49Z,CLOSED,False,14,8,3,https://github.com/ctruta,Fix a memory leak in the ARM-specific riffled palette optimization,1,[],https://github.com/glennrp/libpng/pull/268,https://github.com/ctruta,1,https://github.com/glennrp/libpng/pull/268,"The riffled palette was incorrectly deallocated in png_write_destroy,
instead of png_read_destroy.","The riffled palette was incorrectly deallocated in png_write_destroy,
instead of png_read_destroy.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,270,2019-01-10T08:04:37Z,,2020-05-25T05:36:36Z,OPEN,False,375,11,5,https://github.com/CyberShadow,Fixes pertaining background color and grayscale conversions,2,[],https://github.com/glennrp/libpng/pull/270,https://github.com/CyberShadow,1,https://github.com/glennrp/libpng/pull/270,"After adding libpng support to my image library, I wrote some test code which generated PNG files with all valid combinations of relevant parameters, and asked libpng to parse each into every compatible format supported by my image library. Some of these combinations produced unexpected results, which seem to be caused by bugs in libpng.
This pull request includes two patches which attempt to rectify these bugs. Please see the individual commits' commit messages for details.
FWIW - the source code for my test suite that identified this bug is here:
https://github.com/CyberShadow/ae/blob/master/utils/graphics/libpng.d","After adding libpng support to my image library, I wrote some test code which generated PNG files with all valid combinations of relevant parameters, and asked libpng to parse each into every compatible format supported by my image library. Some of these combinations produced unexpected results, which seem to be caused by bugs in libpng.
This pull request includes two patches which attempt to rectify these bugs. Please see the individual commits' commit messages for details.
FWIW - the source code for my test suite that identified this bug is here:
https://github.com/CyberShadow/ae/blob/master/utils/graphics/libpng.d",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,270,2019-01-10T08:04:37Z,,2020-05-25T05:36:36Z,OPEN,False,375,11,5,https://github.com/CyberShadow,Fixes pertaining background color and grayscale conversions,2,[],https://github.com/glennrp/libpng/pull/270,https://github.com/tangyaofang,2,https://github.com/glennrp/libpng/pull/270#issuecomment-496831201,"After adding libpng support to my image library, I wrote some test code which generated PNG files with all valid combinations of relevant parameters, and asked libpng to parse each into every compatible format supported by my image library. Some of these combinations produced unexpected results, which seem to be caused by bugs in libpng.
This pull request includes two patches which attempt to rectify these bugs. Please see the individual commits' commit messages for details.
FWIW - the source code for my test suite that identified this bug is here:
https://github.com/CyberShadow/ae/blob/master/utils/graphics/libpng.d",Thank you for your use and contribution to libpng.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,271,2019-01-11T19:50:03Z,2019-01-11T19:54:27Z,2019-01-11T19:54:45Z,CLOSED,False,8,0,2,https://github.com/richard-townsend-arm,"Cleanup riffled palette in more places, fix tests ",2,[],https://github.com/glennrp/libpng/pull/271,https://github.com/richard-townsend-arm,1,https://github.com/glennrp/libpng/pull/271,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #268.,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #268.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,272,2019-01-11T19:56:58Z,2020-05-18T05:21:43Z,2020-05-18T05:21:43Z,CLOSED,False,8,0,2,https://github.com/richard-townsend-arm,"Clean up riffled palette in more places, fix tests",2,[],https://github.com/glennrp/libpng/pull/272,https://github.com/richard-townsend-arm,1,https://github.com/glennrp/libpng/pull/272,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #266.,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #266.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,272,2019-01-11T19:56:58Z,2020-05-18T05:21:43Z,2020-05-18T05:21:43Z,CLOSED,False,8,0,2,https://github.com/richard-townsend-arm,"Clean up riffled palette in more places, fix tests",2,[],https://github.com/glennrp/libpng/pull/272,https://github.com/richard-townsend-arm,2,https://github.com/glennrp/libpng/pull/272#issuecomment-453638445,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #266.,Supersedes #271 with a corrected issue number.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,272,2019-01-11T19:56:58Z,2020-05-18T05:21:43Z,2020-05-18T05:21:43Z,CLOSED,False,8,0,2,https://github.com/richard-townsend-arm,"Clean up riffled palette in more places, fix tests",2,[],https://github.com/glennrp/libpng/pull/272,https://github.com/LocutusOfBorg,3,https://github.com/glennrp/libpng/pull/272#issuecomment-453822556,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #266.,ok this fixes my issue thanks,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,272,2019-01-11T19:56:58Z,2020-05-18T05:21:43Z,2020-05-18T05:21:43Z,CLOSED,False,8,0,2,https://github.com/richard-townsend-arm,"Clean up riffled palette in more places, fix tests",2,[],https://github.com/glennrp/libpng/pull/272,https://github.com/tangyaofang,4,https://github.com/glennrp/libpng/pull/272#issuecomment-496770030,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #266.,"I see it in version 1.6.37, the latest code is:
#if defined(PNG_READ_EXPAND_SUPPORTED) && 
     Defined(PNG_ARM_NEON_IMPLEMENTATION)
    Png_free(png_ptr, png_ptr->riffled_palette);
    Png_ptr->riffled_palette = NULL;
#endif
Your problem should be solved in version 1.6.37.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,272,2019-01-11T19:56:58Z,2020-05-18T05:21:43Z,2020-05-18T05:21:43Z,CLOSED,False,8,0,2,https://github.com/richard-townsend-arm,"Clean up riffled palette in more places, fix tests",2,[],https://github.com/glennrp/libpng/pull/272,https://github.com/ctruta,5,https://github.com/glennrp/libpng/pull/272#issuecomment-629952232,This PR adds additional cleanup logic in png_read_destroy to deallocate the palette if necessary and also fixes the pngvalid.c regression tests to call this method. This should fix #266.,This was indeed fixed in 1.6.37. (I had forgotten to close this issue at that time.),True,{}
glennrp/libpng,https://github.com/glennrp/libpng,277,2019-01-30T16:29:52Z,,2019-04-25T04:47:12Z,OPEN,False,123,129,23,https://github.com/cuva,Adds podspec to repo,5,[],https://github.com/glennrp/libpng/pull/277,https://github.com/cuva,1,https://github.com/glennrp/libpng/pull/277,"This repo is the source of https://cocoapods.org/pods/libpng. The current podspec wasn't checked in which makes updating the pod more difficult.
This spec resolves #273","This repo is the source of https://cocoapods.org/pods/libpng. The current podspec wasn't checked in which makes updating the pod more difficult.
This spec resolves #273",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/sboukortt,1,https://github.com/glennrp/libpng/pull/279,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/sboukortt,2,https://github.com/glennrp/libpng/pull/279#issuecomment-463571789,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","This may not be the best or most elegant fix but now that the problem is identified, possible solutions can be discussed.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/kcc,3,https://github.com/glennrp/libpng/pull/279#issuecomment-481459923,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","This leak is still not fixed, right?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/sboukortt,4,https://github.com/glennrp/libpng/pull/279#issuecomment-481463849,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","Indeed not, as far as I can tell. The file that this pull request changes (pngset.c) has not been touched since the request was opened.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/tangyaofang,5,https://github.com/glennrp/libpng/pull/279#issuecomment-493897711,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","@kcc :
Do you validate this modification scheme?
To ensure that the incorporated code really solves the problem.
I don't see sboukortt submitting test cases.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/sboukortt,6,https://github.com/glennrp/libpng/pull/279#issuecomment-493903983,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","The test cases are the fuzz targets mentioned in #274, and I have verified that my modifications do stop the fuzz target from erroring.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/kcc,7,https://github.com/glennrp/libpng/pull/279#issuecomment-494083357,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","Yes, I did verify that this change fixes the leak. (@tangyaofang, was that your question?)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/tangyaofang,8,https://github.com/glennrp/libpng/pull/279#issuecomment-494291940,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;",But why did the author not merge these modifications into the code library.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/sboukortt,9,https://github.com/glennrp/libpng/pull/279#issuecomment-494487255,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;","Sorry, I am not sure that I understand the question. Do you mean the fuzz targets?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,279,2019-02-14T10:13:54Z,,2021-03-17T10:14:05Z,OPEN,False,3,0,1,https://github.com/sboukortt,Fix the memory leak mentioned in #274,1,[],https://github.com/glennrp/libpng/pull/279,https://github.com/sboukortt,10,https://github.com/glennrp/libpng/pull/279#issuecomment-632627385,"The old structure of the code was along the lines of:
allocate trans_alpha;
if (problem) {
  // Jumps away from this function
  png_warning(""tRNS chunk has out-of-range samples for bit_depth"");
}
mark trans_alpha as to-free;",@ctruta Is there anything I can help with to unblock this?,True,{'THUMBS_UP': ['https://github.com/v1993']}
glennrp/libpng,https://github.com/glennrp/libpng,284,2019-04-12T08:54:47Z,2019-04-14T15:25:20Z,2019-04-14T15:25:20Z,MERGED,True,1,1,1,https://github.com/ojeda,Fix typo in the new v2 license,1,[],https://github.com/glennrp/libpng/pull/284,https://github.com/ojeda,1,https://github.com/glennrp/libpng/pull/284,The new v2 license has a typo in one of the sentences. I guess it was introduced when the text was manually re-formatted from the all caps style of other licenses which contain a very similar sentence (e.g. BSD).,The new v2 license has a typo in one of the sentences. I guess it was introduced when the text was manually re-formatted from the all caps style of other licenses which contain a very similar sentence (e.g. BSD).,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,284,2019-04-12T08:54:47Z,2019-04-14T15:25:20Z,2019-04-14T15:25:20Z,MERGED,True,1,1,1,https://github.com/ojeda,Fix typo in the new v2 license,1,[],https://github.com/glennrp/libpng/pull/284,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/284#issuecomment-482998463,The new v2 license has a typo in one of the sentences. I guess it was introduced when the text was manually re-formatted from the all caps style of other licenses which contain a very similar sentence (e.g. BSD).,I must apply your change both to the license file and to png.h. Thank you very much!,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,285,2019-04-16T16:58:04Z,2019-04-25T03:57:16Z,2019-04-25T13:18:19Z,MERGED,True,3,3,3,https://github.com/rvandermeulen,Use arm_neon.h when compiling aarch64 intrinsics with clang-cl.,1,[],https://github.com/glennrp/libpng/pull/285,https://github.com/rvandermeulen,1,https://github.com/glennrp/libpng/pull/285,"When building for Windows aarch64 with clang-cl, linking fails due to a number of missing ARM intrinsics symbols. This is because arm64_neon.h is an MSVC-specific header and clang-cl doesn't know what to do with it.
The solution is to add a check for clang in the conditional so that clang-cl builds will use arm_neon.h like clang builds on other platforms.","When building for Windows aarch64 with clang-cl, linking fails due to a number of missing ARM intrinsics symbols. This is because arm64_neon.h is an MSVC-specific header and clang-cl doesn't know what to do with it.
The solution is to add a check for clang in the conditional so that clang-cl builds will use arm_neon.h like clang builds on other platforms.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,285,2019-04-16T16:58:04Z,2019-04-25T03:57:16Z,2019-04-25T13:18:19Z,MERGED,True,3,3,3,https://github.com/rvandermeulen,Use arm_neon.h when compiling aarch64 intrinsics with clang-cl.,1,[],https://github.com/glennrp/libpng/pull/285,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/285#issuecomment-486510942,"When building for Windows aarch64 with clang-cl, linking fails due to a number of missing ARM intrinsics symbols. This is because arm64_neon.h is an MSVC-specific header and clang-cl doesn't know what to do with it.
The solution is to add a check for clang in the conditional so that clang-cl builds will use arm_neon.h like clang builds on other platforms.","Thank you, Ryan, for the fix. I would have normally asked you to restyle your patch a little bit, and place the two compiler macros near one another. But then I noticed that @mtklein did exactly that, independently, in a later pull request (#286), which he has eventually withdrawn.
OTOH I prefer the subject line from this commit (#285), because it's more descriptive while fitting in the 72 character limit, and there is still room left for the arm: prefix.
Would it be ok if I credit you both, by the means of ""Signed-off-by"" lines, and then later on, in the release change log?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,285,2019-04-16T16:58:04Z,2019-04-25T03:57:16Z,2019-04-25T13:18:19Z,MERGED,True,3,3,3,https://github.com/rvandermeulen,Use arm_neon.h when compiling aarch64 intrinsics with clang-cl.,1,[],https://github.com/glennrp/libpng/pull/285,https://github.com/mtklein,3,https://github.com/glennrp/libpng/pull/285#issuecomment-486668875,"When building for Windows aarch64 with clang-cl, linking fails due to a number of missing ARM intrinsics symbols. This is because arm64_neon.h is an MSVC-specific header and clang-cl doesn't know what to do with it.
The solution is to add a check for clang in the conditional so that clang-cl builds will use arm_neon.h like clang builds on other platforms.","Sure, however you like.  Thanks for merging #285.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,286,2019-04-17T16:36:27Z,2019-04-24T16:54:13Z,2019-04-24T16:54:13Z,CLOSED,False,3,3,3,https://github.com/mtklein,use arm_neon.h with clang-cl,1,[],https://github.com/glennrp/libpng/pull/286,https://github.com/mtklein,1,https://github.com/glennrp/libpng/pull/286,"MSVC's arm64_neon.h header doesn't work with clang-cl;
if you try you'll find yourself missing symbols like
""neon_foo"" at link time.  These are cl.exe intrinsics,
but clang-cl doesn't know that.
Instead have clang-cl use the normal arm_neon.h.","MSVC's arm64_neon.h header doesn't work with clang-cl;
if you try you'll find yourself missing symbols like
""neon_foo"" at link time.  These are cl.exe intrinsics,
but clang-cl doesn't know that.
Instead have clang-cl use the normal arm_neon.h.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,286,2019-04-17T16:36:27Z,2019-04-24T16:54:13Z,2019-04-24T16:54:13Z,CLOSED,False,3,3,3,https://github.com/mtklein,use arm_neon.h with clang-cl,1,[],https://github.com/glennrp/libpng/pull/286,https://github.com/mtklein,2,https://github.com/glennrp/libpng/pull/286#issuecomment-484167394,"MSVC's arm64_neon.h header doesn't work with clang-cl;
if you try you'll find yourself missing symbols like
""neon_foo"" at link time.  These are cl.exe intrinsics,
but clang-cl doesn't know that.
Instead have clang-cl use the normal arm_neon.h.","Oh, I guess I should have looked at the open pull requests!  Looks like #285 beat me to this.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,290,2019-05-31T07:46:17Z,2019-06-10T03:08:12Z,2019-06-10T03:21:58Z,CLOSED,False,1,1,1,https://github.com/tangyaofang,Fix the memory leak mentioned in #238 #288,1,[],https://github.com/glennrp/libpng/pull/290,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/290,"Fix the memory leak mentioned in #238 #288, repair of CVE-2018-14048.","Fix the memory leak mentioned in #238 #288, repair of CVE-2018-14048.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,291,2019-05-31T07:59:56Z,2019-06-10T03:07:14Z,2019-06-10T03:21:52Z,CLOSED,False,21,37,2,https://github.com/tangyaofang,"Fix the memory leak mentioned in #269,Repair of CVE-2018-14048",2,[],https://github.com/glennrp/libpng/pull/291,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/291,"Fix the memory leak mentioned in #269,Repair of CVE-2018-14048.","Fix the memory leak mentioned in #269,Repair of CVE-2018-14048.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,293,2019-06-10T03:32:40Z,,2020-06-16T08:27:43Z,OPEN,False,1,1,1,https://github.com/tangyaofang,Repair of CVE-2019-6129 #269,1,[],https://github.com/glennrp/libpng/pull/293,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/293,Repair of CVE-2019-6129 #269,Repair of CVE-2019-6129 #269,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,293,2019-06-10T03:32:40Z,,2020-06-16T08:27:43Z,OPEN,False,1,1,1,https://github.com/tangyaofang,Repair of CVE-2019-6129 #269,1,[],https://github.com/glennrp/libpng/pull/293,https://github.com/heaven-hq,2,https://github.com/glennrp/libpng/pull/293#issuecomment-644616426,Repair of CVE-2019-6129 #269,"@ctruta @ctruta I have also verified this PR. When an abnormal situation is entered, it will enter
static void display_clean_read(struct display *dp)
if (dp->read_pp != NULL)
      png_destroy_read_struct(&dp->read_pp, NULL, NULL);

branch and cause memory leak.This patch could solve this problem very well. Do you plan to merge this PR?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,294,2019-06-10T03:42:57Z,,2020-05-25T05:36:35Z,OPEN,False,12,37,1,https://github.com/tangyaofang,Repair of CVE-2019-6129  #269 and issue #255,2,[],https://github.com/glennrp/libpng/pull/294,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/294,Repair of CVE-2019-6129  #269 and issue #255,Repair of CVE-2019-6129  #269 and issue #255,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,295,2019-06-10T06:32:17Z,,2020-06-30T07:08:47Z,OPEN,False,10,0,1,https://github.com/tangyaofang,Repair of CVE-2018-14048 #238,1,[],https://github.com/glennrp/libpng/pull/295,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/295,Repair of CVE-2018-14048  #238,Repair of CVE-2018-14048  #238,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,295,2019-06-10T06:32:17Z,,2020-06-30T07:08:47Z,OPEN,False,10,0,1,https://github.com/tangyaofang,Repair of CVE-2018-14048 #238,1,[],https://github.com/glennrp/libpng/pull/295,https://github.com/heaven-hq,2,https://github.com/glennrp/libpng/pull/295#issuecomment-644609296,Repair of CVE-2018-14048  #238,"@ctruta I have verified this PR. When an abnormal situation is entered, it will enter
if (setjmp (png_jmpbuf(png_ptr)))
{
    png_destroy_read_struct (&png_ptr, &info_ptr, NULL);  
    return FALSE;
}

branch and cause memory leak.This patch could solve this problem very well. Do you plan to merge this PR?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,296,2019-06-10T08:49:12Z,,2020-05-25T05:36:35Z,OPEN,False,2,5,1,https://github.com/tangyaofang,Repair of issue 264,1,[],https://github.com/glennrp/libpng/pull/296,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/296,Repair of issue #264,Repair of issue #264,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,297,2019-06-12T03:46:14Z,,2020-05-25T05:36:35Z,OPEN,False,13,0,4,https://github.com/tangyaofang,add test case: test non-png,1,[],https://github.com/glennrp/libpng/pull/297,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/297,add test case: test non-png,add test case: test non-png,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,300,2019-06-21T07:01:04Z,,2020-05-25T05:36:35Z,OPEN,False,2,2,2,https://github.com/tangyaofang,Fix comments.,1,[],https://github.com/glennrp/libpng/pull/300,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/300,Fix comments.,Fix comments.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,303,2019-07-04T13:19:08Z,2020-04-27T03:54:12Z,2022-02-10T17:40:42Z,MERGED,True,6,6,1,https://github.com/ledocc,fix(cmake): use correct ZLIB_* variables,1,[],https://github.com/glennrp/libpng/pull/303,https://github.com/ledocc,1,https://github.com/glennrp/libpng/pull/303,"ZLIB_LIBRARIES and ZLIB_INCLUDE_DIRS are official cmake variable name
ZLIB_LIBRARY should be empty","ZLIB_LIBRARIES and ZLIB_INCLUDE_DIRS are official cmake variable name
ZLIB_LIBRARY should be empty",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,303,2019-07-04T13:19:08Z,2020-04-27T03:54:12Z,2022-02-10T17:40:42Z,MERGED,True,6,6,1,https://github.com/ledocc,fix(cmake): use correct ZLIB_* variables,1,[],https://github.com/glennrp/libpng/pull/303,https://github.com/arsnyder16,2,https://github.com/glennrp/libpng/pull/303#issuecomment-1035220163,"ZLIB_LIBRARIES and ZLIB_INCLUDE_DIRS are official cmake variable name
ZLIB_LIBRARY should be empty","@ledocc @ctruta  This also needed to change in genout.cmake.in
https://github.com/glennrp/libpng/blob/libpng16/scripts/genout.cmake.in",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,304,2019-07-08T03:22:32Z,,2020-05-25T05:36:34Z,OPEN,False,6,6,4,https://github.com/tangyaofang,B windowbits,2,[],https://github.com/glennrp/libpng/pull/304,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/304,Fix comments.,Fix comments.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,306,2019-07-10T07:43:01Z,,2020-05-25T05:36:34Z,OPEN,False,11,0,1,https://github.com/tangyaofang,Fix a bug in png_set_compression_strategy.,1,[],https://github.com/glennrp/libpng/pull/306,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/306,Fix a bug in png_set_compression_strategy.,Fix a bug in png_set_compression_strategy.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,308,2019-07-11T08:55:50Z,,2020-05-25T05:36:34Z,OPEN,False,11,0,1,https://github.com/tangyaofang,Fix a bug in png_set_compression_level.,1,[],https://github.com/glennrp/libpng/pull/308,https://github.com/tangyaofang,1,https://github.com/glennrp/libpng/pull/308,Fix a bug in png_set_compression_level.,Fix a bug in png_set_compression_level.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,311,2019-07-18T10:53:57Z,2019-07-29T12:33:23Z,2019-07-29T12:33:23Z,CLOSED,False,8,4,1,https://github.com/diizzyy,CMakeLists: Add 64-bit detection for ARM and x86 on FreeBSD,1,[],https://github.com/glennrp/libpng/pull/311,https://github.com/diizzyy,1,https://github.com/glennrp/libpng/pull/311,"FreeBSD's definitions differs slight from Linux
Signed-off-by: Daniel Engberg daniel.engberg.lists@pyret.net","FreeBSD's definitions differs slight from Linux
Signed-off-by: Daniel Engberg daniel.engberg.lists@pyret.net",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,311,2019-07-18T10:53:57Z,2019-07-29T12:33:23Z,2019-07-29T12:33:23Z,CLOSED,False,8,4,1,https://github.com/diizzyy,CMakeLists: Add 64-bit detection for ARM and x86 on FreeBSD,1,[],https://github.com/glennrp/libpng/pull/311,https://github.com/diizzyy,2,https://github.com/glennrp/libpng/pull/311#issuecomment-512767721,"FreeBSD's definitions differs slight from Linux
Signed-off-by: Daniel Engberg daniel.engberg.lists@pyret.net",Not sure if it's needed but @ctruta,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,311,2019-07-18T10:53:57Z,2019-07-29T12:33:23Z,2019-07-29T12:33:23Z,CLOSED,False,8,4,1,https://github.com/diizzyy,CMakeLists: Add 64-bit detection for ARM and x86 on FreeBSD,1,[],https://github.com/glennrp/libpng/pull/311,https://github.com/diizzyy,3,https://github.com/glennrp/libpng/pull/311#issuecomment-515971969,"FreeBSD's definitions differs slight from Linux
Signed-off-by: Daniel Engberg daniel.engberg.lists@pyret.net",Nevermind...,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,313,2019-07-29T13:22:50Z,2020-04-27T04:10:00Z,2020-04-27T04:10:00Z,MERGED,True,4,4,1,https://github.com/skal65535,Fix Memory leak in case eXIf has incorrect crc,1,[],https://github.com/glennrp/libpng/pull/313,https://github.com/skal65535,1,https://github.com/glennrp/libpng/pull/313,"problem description:
Imagine a bitstream with an eXIf data segment that has invalid CRC.
if png_crc_finish() fails at line 2090, info_ptr->eXIf_buf is not free'd (despite the free_me setting at line 2062) because png_free_data() is not called.
png_read_info() is actually looping several time over the png_eXIf chunk, calling png_handle_eXIf() several time in a row without freeing the buffer.
This patch fixes the problem by leaving info_ptr's content in a clean state in case of failure, like is done at 2084.
I can probably supply privately a repro vector for this failure case.
skal/","problem description:
Imagine a bitstream with an eXIf data segment that has invalid CRC.
if png_crc_finish() fails at line 2090, info_ptr->eXIf_buf is not free'd (despite the free_me setting at line 2062) because png_free_data() is not called.
png_read_info() is actually looping several time over the png_eXIf chunk, calling png_handle_eXIf() several time in a row without freeing the buffer.
This patch fixes the problem by leaving info_ptr's content in a clean state in case of failure, like is done at 2084.
I can probably supply privately a repro vector for this failure case.
skal/",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,314,2019-07-30T07:16:17Z,,2020-04-27T04:33:25Z,OPEN,False,3,3,1,https://github.com/fredgan,rename MACRO gv name to GV,1,[],https://github.com/glennrp/libpng/pull/314,https://github.com/fredgan,1,https://github.com/glennrp/libpng/pull/314,"When I read the code,  the following code really confuse me,
static int
cppng(struct display *dp, const char *file, const char *gv dest)
I spend some time to find that gv is a macro.  Macro should be written in UPPER CASE.","When I read the code,  the following code really confuse me,
static int
cppng(struct display *dp, const char *file, const char *gv dest)
I spend some time to find that gv is a macro.  Macro should be written in UPPER CASE.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,315,2019-07-30T08:03:58Z,2020-04-27T05:31:16Z,2020-04-27T05:31:16Z,MERGED,True,2,0,1,https://github.com/willson-chen,Close _BSD_SOURCE warning,1,[],https://github.com/glennrp/libpng/pull/315,https://github.com/willson-chen,1,https://github.com/glennrp/libpng/pull/315,"I got a warning while compiling under Ubuntu 18.04 and gcc 7.4.
/usr/include/features.h:184:3: warning: #warning ""__BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE"" [-Wcpp]
 # warning ""__BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE""
    ^~~~~~~

the safest (glibc backwards compatibility) way should be define ""#define _DEFAULT_SOURCE 1"".
The official manpage quote:
To allow code that requires
_BSD_SOURCE in glibc 2.19 and earlier and _DEFAULT_SOURCE in
glibc 2.20 and later to compile without warnings, define both
_BSD_SOURCE and _DEFAULT_SOURCE.","I got a warning while compiling under Ubuntu 18.04 and gcc 7.4.
/usr/include/features.h:184:3: warning: #warning ""__BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE"" [-Wcpp]
 # warning ""__BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE""
    ^~~~~~~

the safest (glibc backwards compatibility) way should be define ""#define _DEFAULT_SOURCE 1"".
The official manpage quote:
To allow code that requires
_BSD_SOURCE in glibc 2.19 and earlier and _DEFAULT_SOURCE in
glibc 2.20 and later to compile without warnings, define both
_BSD_SOURCE and _DEFAULT_SOURCE.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,316,2019-08-02T23:55:33Z,2020-04-29T05:33:32Z,2020-04-29T08:03:55Z,MERGED,True,1,0,1,https://github.com/zturtleman,Fix compiling 'pngtopng' at top of example.c,1,[],https://github.com/glennrp/libpng/pull/316,https://github.com/zturtleman,1,https://github.com/glennrp/libpng/pull/316,Compiling pngtopng at top of example.c fails due to missing brace. I tested after adding brace and it works (reads and writes png image).,Compiling pngtopng at top of example.c fails due to missing brace. I tested after adding brace and it works (reads and writes png image).,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,318,2019-08-24T20:50:58Z,2020-05-17T23:55:38Z,2020-05-17T23:55:38Z,MERGED,True,3,3,1,https://github.com/ssrobins,Fix clang: error: invalid arch name '-arch armv7 arm64',1,[],https://github.com/glennrp/libpng/pull/318,https://github.com/ssrobins,1,https://github.com/glennrp/libpng/pull/318,"I originally posted about this error here:
https://sourceforge.net/p/libpng/code/merge-requests/4/
Let me know if you have any questions or want the PR into a different branch. Thanks!","I originally posted about this error here:
https://sourceforge.net/p/libpng/code/merge-requests/4/
Let me know if you have any questions or want the PR into a different branch. Thanks!",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,319,2019-08-26T22:08:40Z,2020-05-18T00:00:47Z,2021-06-02T05:16:38Z,MERGED,True,5,0,2,https://github.com/dnfield,"Add an __LLVM,__asm section for clang builds on ARM",1,[],https://github.com/glennrp/libpng/pull/319,https://github.com/dnfield,1,https://github.com/glennrp/libpng/pull/319,"When building with upstream clang and using the -fembed-bitcode or -fembed-bitcode-marker, it expects to find this section.  Without this section, the build will fail complaining that the object file doesn't have bitcode.
For unknown reasons, the Xcode version of clang does not need this to compile with bitcode, but it doesn't hurt anything to have it in that case.","When building with upstream clang and using the -fembed-bitcode or -fembed-bitcode-marker, it expects to find this section.  Without this section, the build will fail complaining that the object file doesn't have bitcode.
For unknown reasons, the Xcode version of clang does not need this to compile with bitcode, but it doesn't hurt anything to have it in that case.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,320,2019-08-30T08:09:52Z,2020-05-18T00:21:52Z,2020-05-18T09:42:31Z,MERGED,True,1,1,1,https://github.com/tronical,Fix CMake build with Emscripten,1,[],https://github.com/glennrp/libpng/pull/320,https://github.com/tronical,1,https://github.com/glennrp/libpng/pull/320,"When building with Emscripten, linkage to libm is neither required nor
does it will. As find_library will fail, M_LIBRARY will be set to
NOTFOUND and the build would fail later. The build works just fine
without libm linkage.","When building with Emscripten, linkage to libm is neither required nor
does it will. As find_library will fail, M_LIBRARY will be set to
NOTFOUND and the build would fail later. The build works just fine
without libm linkage.",True,{'THUMBS_UP': ['https://github.com/dlemstra']}
glennrp/libpng,https://github.com/glennrp/libpng,320,2019-08-30T08:09:52Z,2020-05-18T00:21:52Z,2020-05-18T09:42:31Z,MERGED,True,1,1,1,https://github.com/tronical,Fix CMake build with Emscripten,1,[],https://github.com/glennrp/libpng/pull/320,https://github.com/tronical,2,https://github.com/glennrp/libpng/pull/320#issuecomment-630069448,"When building with Emscripten, linkage to libm is neither required nor
does it will. As find_library will fail, M_LIBRARY will be set to
NOTFOUND and the build would fail later. The build works just fine
without libm linkage.",Thank you very much :),True,{}
glennrp/libpng,https://github.com/glennrp/libpng,321,2019-09-16T22:20:16Z,2020-05-18T01:44:51Z,2020-05-18T01:44:51Z,CLOSED,False,2,4,1,https://github.com/eliteraspberries,Fix use after free.,1,[],https://github.com/glennrp/libpng/pull/321,https://github.com/eliteraspberries,1,https://github.com/glennrp/libpng/pull/321,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,321,2019-09-16T22:20:16Z,2020-05-18T01:44:51Z,2020-05-18T01:44:51Z,CLOSED,False,2,4,1,https://github.com/eliteraspberries,Fix use after free.,1,[],https://github.com/glennrp/libpng/pull/321,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/321#issuecomment-629901806,,"Looking further into this: there's no danger of use-after-free, because there is no continuation from png_error() at pngpread.c:502. If you found this error with a static analyzer, you need to show that analyzer, somehow, that png_error() is marked as PNG_NORETURN.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,326,2019-12-19T10:36:19Z,2021-03-15T08:22:47Z,2021-03-15T22:46:02Z,MERGED,True,1,1,1,https://github.com/nju04zq,FIX: decode fail on image with invalid eXIf chunk,1,[],https://github.com/glennrp/libpng/pull/326,https://github.com/nju04zq,1,https://github.com/glennrp/libpng/pull/326,"libpng failed to decode this image, http://p3-tt.byteimg.com/pgc-image/Rksod8L9ccqahW~tplv-obj.image.
Change-Id: Ibe5cbff3411126696279ca1d81627d4f9325cfed","libpng failed to decode this image, http://p3-tt.byteimg.com/pgc-image/Rksod8L9ccqahW~tplv-obj.image.
Change-Id: Ibe5cbff3411126696279ca1d81627d4f9325cfed",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,326,2019-12-19T10:36:19Z,2021-03-15T08:22:47Z,2021-03-15T22:46:02Z,MERGED,True,1,1,1,https://github.com/nju04zq,FIX: decode fail on image with invalid eXIf chunk,1,[],https://github.com/glennrp/libpng/pull/326,https://github.com/wader,2,https://github.com/glennrp/libpng/pull/326#issuecomment-654425072,"libpng failed to decode this image, http://p3-tt.byteimg.com/pgc-image/Rksod8L9ccqahW~tplv-obj.image.
Change-Id: Ibe5cbff3411126696279ca1d81627d4f9325cfed","Hello, i've run into images with this issue and this fix seems to fix them. Is this fix planned for next stable release?
Any ideas what programs that write these kind of exif chunks?",True,{'THUMBS_UP': ['https://github.com/RomanIakovlev']}
glennrp/libpng,https://github.com/glennrp/libpng,326,2019-12-19T10:36:19Z,2021-03-15T08:22:47Z,2021-03-15T22:46:02Z,MERGED,True,1,1,1,https://github.com/nju04zq,FIX: decode fail on image with invalid eXIf chunk,1,[],https://github.com/glennrp/libpng/pull/326,https://github.com/LocutusOfBorg,3,https://github.com/glennrp/libpng/pull/326#issuecomment-693188822,"libpng failed to decode this image, http://p3-tt.byteimg.com/pgc-image/Rksod8L9ccqahW~tplv-obj.image.
Change-Id: Ibe5cbff3411126696279ca1d81627d4f9325cfed",@ctruta can you please have a look here?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,326,2019-12-19T10:36:19Z,2021-03-15T08:22:47Z,2021-03-15T22:46:02Z,MERGED,True,1,1,1,https://github.com/nju04zq,FIX: decode fail on image with invalid eXIf chunk,1,[],https://github.com/glennrp/libpng/pull/326,https://github.com/ctruta,4,https://github.com/glennrp/libpng/pull/326#issuecomment-799219203,"libpng failed to decode this image, http://p3-tt.byteimg.com/pgc-image/Rksod8L9ccqahW~tplv-obj.image.
Change-Id: Ibe5cbff3411126696279ca1d81627d4f9325cfed","Hi! I applied this fix, with many thanks and apologies for the very large delay.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,326,2019-12-19T10:36:19Z,2021-03-15T08:22:47Z,2021-03-15T22:46:02Z,MERGED,True,1,1,1,https://github.com/nju04zq,FIX: decode fail on image with invalid eXIf chunk,1,[],https://github.com/glennrp/libpng/pull/326,https://github.com/LocutusOfBorg,5,https://github.com/glennrp/libpng/pull/326#issuecomment-799804957,"libpng failed to decode this image, http://p3-tt.byteimg.com/pgc-image/Rksod8L9ccqahW~tplv-obj.image.
Change-Id: Ibe5cbff3411126696279ca1d81627d4f9325cfed",yay thanks!,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,327,2020-01-14T03:04:10Z,2020-01-14T03:05:15Z,2020-01-14T03:05:15Z,CLOSED,False,767,0,6,https://github.com/gxw-loongson,Optimize png16 with loongson mmi for 64-bit os,1,[],https://github.com/glennrp/libpng/pull/327,https://github.com/gxw-loongson,1,https://github.com/glennrp/libpng/pull/327,"Add Optimizations for loongson platform(3A3000, 3A4000, etc.), make check passed.","Add Optimizations for loongson platform(3A3000, 3A4000, etc.), make check passed.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,328,2020-01-14T03:29:20Z,2020-02-27T01:28:16Z,2020-02-27T01:28:17Z,CLOSED,False,0,0,0,https://github.com/gxw-loongson,Optimize png16 with loongson mmi for 64-bit os,0,[],https://github.com/glennrp/libpng/pull/328,https://github.com/gxw-loongson,1,https://github.com/glennrp/libpng/pull/328,"Add Optimizations for loongson platform(3A3000, 3A4000, etc.), make check passed.","Add Optimizations for loongson platform(3A3000, 3A4000, etc.), make check passed.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,328,2020-01-14T03:29:20Z,2020-02-27T01:28:16Z,2020-02-27T01:28:17Z,CLOSED,False,0,0,0,https://github.com/gxw-loongson,Optimize png16 with loongson mmi for 64-bit os,0,[],https://github.com/glennrp/libpng/pull/328,https://github.com/FlyGoat,2,https://github.com/glennrp/libpng/pull/328#issuecomment-582250759,"Add Optimizations for loongson platform(3A3000, 3A4000, etc.), make check passed.",You're leaving CMake building scripts untouched.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,330,2020-02-04T21:52:05Z,,2020-05-25T05:36:34Z,OPEN,False,6,0,1,https://github.com/vadz,Avoid -Wundef warnings for non-x86 architectures too,2,[],https://github.com/glennrp/libpng/pull/330,https://github.com/vadz,1,https://github.com/glennrp/libpng/pull/330,"Define this symbol as 0 instead of leaving it undefined when not using
ARM NEON optimizations.
No real changes, but just avoid a bunch of
""PNG_ARM_NEON_IMPLEMENTATION"" is not defined, evaluates to 0 [-Wundef]
warnings when building the library.","Define this symbol as 0 instead of leaving it undefined when not using
ARM NEON optimizations.
No real changes, but just avoid a bunch of
""PNG_ARM_NEON_IMPLEMENTATION"" is not defined, evaluates to 0 [-Wundef]
warnings when building the library.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,333,2020-03-06T06:39:59Z,2020-05-18T03:42:49Z,2020-05-18T03:42:49Z,MERGED,True,3,1,1,https://github.com/gxw-loongson,Fixed bug: close the file before returning,1,[],https://github.com/glennrp/libpng/pull/333,https://github.com/gxw-loongson,1,https://github.com/glennrp/libpng/pull/333,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,333,2020-03-06T06:39:59Z,2020-05-18T03:42:49Z,2020-05-18T03:42:49Z,MERGED,True,3,1,1,https://github.com/gxw-loongson,Fixed bug: close the file before returning,1,[],https://github.com/glennrp/libpng/pull/333,https://github.com/yinshiyou,2,https://github.com/glennrp/libpng/pull/333#issuecomment-610743003,,Looks good to me.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,337,2020-07-08T16:02:19Z,,2020-07-08T16:02:19Z,OPEN,False,2,2,1,https://github.com/XMuli,docs: Add spaces around '/*' and '*/',1,[],https://github.com/glennrp/libpng/pull/337,https://github.com/XMuli,1,https://github.com/glennrp/libpng/pull/337,"Like most other Qt coding styles, the necessary spaces should be added
to the sides of the '/' and '/'","Like most other Qt coding styles, the necessary spaces should be added
to the sides of the '/' and '/'",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,338,2020-07-28T12:25:03Z,2021-03-15T08:16:16Z,2021-03-15T08:16:41Z,MERGED,True,3,2,1,https://github.com/klebertarcisio,Adding a check,1,[],https://github.com/glennrp/libpng/pull/338,https://github.com/klebertarcisio,1,https://github.com/glennrp/libpng/pull/338,Adding a check as in the function we have in the update_display function,Adding a check as in the function we have in the update_display function,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,338,2020-07-28T12:25:03Z,2021-03-15T08:16:16Z,2021-03-15T08:16:41Z,MERGED,True,3,2,1,https://github.com/klebertarcisio,Adding a check,1,[],https://github.com/glennrp/libpng/pull/338,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/338#issuecomment-799213371,Adding a check as in the function we have in the update_display function,Patch applied. Thank you very much.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,339,2020-07-28T19:09:02Z,2021-03-15T06:46:50Z,2021-03-15T06:46:50Z,CLOSED,False,10,9,1,https://github.com/klebertarcisio,Avoiding using a null reference,1,[],https://github.com/glennrp/libpng/pull/339,https://github.com/klebertarcisio,1,https://github.com/glennrp/libpng/pull/339,Value may be null and it should be checked before dereferencing.,Value may be null and it should be checked before dereferencing.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,339,2020-07-28T19:09:02Z,2021-03-15T06:46:50Z,2021-03-15T06:46:50Z,CLOSED,False,10,9,1,https://github.com/klebertarcisio,Avoiding using a null reference,1,[],https://github.com/glennrp/libpng/pull/339,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/339#issuecomment-799160676,Value may be null and it should be checked before dereferencing.,"Hello, and thank you for your contribution.
You will find that early on, in the while loop, inside the buffer_read function, the value of last should not be null. That value is, nevertheless, checked, although such situation would be abnormal -- see the two /*NOTREACHED*/ comments -- and the loop is exited.
The original code is, therefore, secure.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,340,2020-07-28T19:45:00Z,2021-03-15T07:04:53Z,2021-03-15T07:04:54Z,CLOSED,False,5,1,1,https://github.com/klebertarcisio,Insufficient memory,1,[],https://github.com/glennrp/libpng/pull/340,https://github.com/klebertarcisio,1,https://github.com/glennrp/libpng/pull/340,"We should check all results returned by png_voidcast function
Regards.","We should check all results returned by png_voidcast function
Regards.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,340,2020-07-28T19:45:00Z,2021-03-15T07:04:53Z,2021-03-15T07:04:54Z,CLOSED,False,5,1,1,https://github.com/klebertarcisio,Insufficient memory,1,[],https://github.com/glennrp/libpng/pull/340,https://github.com/benkasminbullock,2,https://github.com/glennrp/libpng/pull/340#issuecomment-777179215,"We should check all results returned by png_voidcast function
Regards.","png_malloc already checks for NULL:
https://github.com/glennrp/libpng/blob/libpng16/pngmem.c#L171-L185
If there is no memory it produces an error:
https://github.com/glennrp/libpng/blob/libpng16/pngmem.c#L182",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,340,2020-07-28T19:45:00Z,2021-03-15T07:04:53Z,2021-03-15T07:04:54Z,CLOSED,False,5,1,1,https://github.com/klebertarcisio,Insufficient memory,1,[],https://github.com/glennrp/libpng/pull/340,https://github.com/ctruta,3,https://github.com/glennrp/libpng/pull/340#issuecomment-799170616,"We should check all results returned by png_voidcast function
Regards.","Thank you. As @benkasminbullock pointed out, png_malloc already checks for allocation errors inside, and it never returns a null pointer.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,345,2020-10-03T11:54:41Z,,2021-01-04T14:25:12Z,OPEN,False,2,2,2,https://github.com/ferivoz,Fix typo in libpng manual,1,[],https://github.com/glennrp/libpng/pull/345,https://github.com/ferivoz,1,https://github.com/glennrp/libpng/pull/345,,,True,{'THUMBS_UP': ['https://github.com/benkasminbullock']}
glennrp/libpng,https://github.com/glennrp/libpng,348,2020-10-31T20:22:29Z,,2020-10-31T20:22:29Z,OPEN,False,14,14,2,https://github.com/ccawley2011,Update the Norcroft makefile,1,[],https://github.com/glennrp/libpng/pull/348,https://github.com/ccawley2011,1,https://github.com/glennrp/libpng/pull/348,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,351,2020-12-11T10:14:57Z,2021-03-15T08:18:32Z,2021-03-15T08:22:17Z,MERGED,True,13,19,5,https://github.com/benkasminbullock,Remove second call to write_eXIf,4,[],https://github.com/glennrp/libpng/pull/351,https://github.com/benkasminbullock,1,https://github.com/glennrp/libpng/pull/351,"The second call to write_eXIf doesn't check whether the first call
succeeded; no other chunks except tIME and the text chunks seem to be
doubled like this.
The second call causes the eXIf chunk to incorrectly be written twice.","The second call to write_eXIf doesn't check whether the first call
succeeded; no other chunks except tIME and the text chunks seem to be
doubled like this.
The second call causes the eXIf chunk to incorrectly be written twice.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,351,2020-12-11T10:14:57Z,2021-03-15T08:18:32Z,2021-03-15T08:22:17Z,MERGED,True,13,19,5,https://github.com/benkasminbullock,Remove second call to write_eXIf,4,[],https://github.com/glennrp/libpng/pull/351,https://github.com/ctruta,2,https://github.com/glennrp/libpng/pull/351#issuecomment-799216853,"The second call to write_eXIf doesn't check whether the first call
succeeded; no other chunks except tIME and the text chunks seem to be
doubled like this.
The second call causes the eXIf chunk to incorrectly be written twice.","Thank you for all the contributions, and especially for the EXIF fix.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,354,2020-12-14T21:41:48Z,,2021-01-28T19:17:04Z,OPEN,False,27,16,1,https://github.com/orudge,cmake: Fix cross-compilation on macOS,1,[],https://github.com/glennrp/libpng/pull/354,https://github.com/orudge,1,https://github.com/glennrp/libpng/pull/354,"When cross-compiling on macOS (e.g., on Intel for arm64 or vice versa) using the CMAKE_OSX_ARCHITECTURES variable, the CMAKE_SYSTEM_PROCESSOR variable does not get updated with the target architecture; instead it uses the host CPU architecture (or, in some versions of cmake, the architecture of the cmake binary itself, which may be different).
This appears to be a cmake bug/design decision, and may be a consequence of the fact that you can specify multiple architectures in the CMAKE_OSX_ARCHITECTURES variable to generate universal/fat binaries. However, it does cause problems when trying to cross-compile libpng with hardware optimisations enabled, as the incorrect architecture-specific files or flags get included/enabled.
This pull request fixes cross-compilation (and native compilation, when using an older version of cmake on Apple Silicon) on macOS, and should have no effect on other platforms. Note that this will likely fail if the user tries to build a universal binary (e.g., CMAKE_OSX_ARCHITECTURES=arm64;x86_64), but that would have been the case before this patch too. The only way to build libpng as a universal binary with hardware optimisations would be to perform two separate builds then lipo them together.","When cross-compiling on macOS (e.g., on Intel for arm64 or vice versa) using the CMAKE_OSX_ARCHITECTURES variable, the CMAKE_SYSTEM_PROCESSOR variable does not get updated with the target architecture; instead it uses the host CPU architecture (or, in some versions of cmake, the architecture of the cmake binary itself, which may be different).
This appears to be a cmake bug/design decision, and may be a consequence of the fact that you can specify multiple architectures in the CMAKE_OSX_ARCHITECTURES variable to generate universal/fat binaries. However, it does cause problems when trying to cross-compile libpng with hardware optimisations enabled, as the incorrect architecture-specific files or flags get included/enabled.
This pull request fixes cross-compilation (and native compilation, when using an older version of cmake on Apple Silicon) on macOS, and should have no effect on other platforms. Note that this will likely fail if the user tries to build a universal binary (e.g., CMAKE_OSX_ARCHITECTURES=arm64;x86_64), but that would have been the case before this patch too. The only way to build libpng as a universal binary with hardware optimisations would be to perform two separate builds then lipo them together.",True,{'THUMBS_UP': ['https://github.com/szigetics']}
glennrp/libpng,https://github.com/glennrp/libpng,354,2020-12-14T21:41:48Z,,2021-01-28T19:17:04Z,OPEN,False,27,16,1,https://github.com/orudge,cmake: Fix cross-compilation on macOS,1,[],https://github.com/glennrp/libpng/pull/354,https://github.com/rdb,2,https://github.com/glennrp/libpng/pull/354#issuecomment-748456357,"When cross-compiling on macOS (e.g., on Intel for arm64 or vice versa) using the CMAKE_OSX_ARCHITECTURES variable, the CMAKE_SYSTEM_PROCESSOR variable does not get updated with the target architecture; instead it uses the host CPU architecture (or, in some versions of cmake, the architecture of the cmake binary itself, which may be different).
This appears to be a cmake bug/design decision, and may be a consequence of the fact that you can specify multiple architectures in the CMAKE_OSX_ARCHITECTURES variable to generate universal/fat binaries. However, it does cause problems when trying to cross-compile libpng with hardware optimisations enabled, as the incorrect architecture-specific files or flags get included/enabled.
This pull request fixes cross-compilation (and native compilation, when using an older version of cmake on Apple Silicon) on macOS, and should have no effect on other platforms. Note that this will likely fail if the user tries to build a universal binary (e.g., CMAKE_OSX_ARCHITECTURES=arm64;x86_64), but that would have been the case before this patch too. The only way to build libpng as a universal binary with hardware optimisations would be to perform two separate builds then lipo them together.","I think a better fix would be to check if CMAKE_OSX_ARCHITECTURES contains arm64, and if necessary check via the preprocessor definitions whether ARM support is actually available for the current target.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,354,2020-12-14T21:41:48Z,,2021-01-28T19:17:04Z,OPEN,False,27,16,1,https://github.com/orudge,cmake: Fix cross-compilation on macOS,1,[],https://github.com/glennrp/libpng/pull/354,https://github.com/vespakoen,3,https://github.com/glennrp/libpng/pull/354#issuecomment-769305388,"When cross-compiling on macOS (e.g., on Intel for arm64 or vice versa) using the CMAKE_OSX_ARCHITECTURES variable, the CMAKE_SYSTEM_PROCESSOR variable does not get updated with the target architecture; instead it uses the host CPU architecture (or, in some versions of cmake, the architecture of the cmake binary itself, which may be different).
This appears to be a cmake bug/design decision, and may be a consequence of the fact that you can specify multiple architectures in the CMAKE_OSX_ARCHITECTURES variable to generate universal/fat binaries. However, it does cause problems when trying to cross-compile libpng with hardware optimisations enabled, as the incorrect architecture-specific files or flags get included/enabled.
This pull request fixes cross-compilation (and native compilation, when using an older version of cmake on Apple Silicon) on macOS, and should have no effect on other platforms. Note that this will likely fail if the user tries to build a universal binary (e.g., CMAKE_OSX_ARCHITECTURES=arm64;x86_64), but that would have been the case before this patch too. The only way to build libpng as a universal binary with hardware optimisations would be to perform two separate builds then lipo them together.","I don't think optimisations are possible at all when compiling for a different target? unless you know about them beforehand, e.g. you cannot test them at compile time.
How about turning optimisations off when compiling for other targets?
set(TARGET_ARCH ${CMAKE_SYSTEM_PROCESSOR})
if(APPLE AND NOT (${CMAKE_OSX_ARCHITECTURES} STREQUAL ${CMAKE_SYSTEM_PROCESSOR}))
  set(PNG_HARDWARE_OPTIMIZATIONS OFF)
endif()
I don't think we can do any optimizations when cross compiling, I could be compiling arm64 on a x86_64 machine, and when testing for arm64 features it will just fail?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,354,2020-12-14T21:41:48Z,,2021-01-28T19:17:04Z,OPEN,False,27,16,1,https://github.com/orudge,cmake: Fix cross-compilation on macOS,1,[],https://github.com/glennrp/libpng/pull/354,https://github.com/orudge,4,https://github.com/glennrp/libpng/pull/354#issuecomment-769308493,"When cross-compiling on macOS (e.g., on Intel for arm64 or vice versa) using the CMAKE_OSX_ARCHITECTURES variable, the CMAKE_SYSTEM_PROCESSOR variable does not get updated with the target architecture; instead it uses the host CPU architecture (or, in some versions of cmake, the architecture of the cmake binary itself, which may be different).
This appears to be a cmake bug/design decision, and may be a consequence of the fact that you can specify multiple architectures in the CMAKE_OSX_ARCHITECTURES variable to generate universal/fat binaries. However, it does cause problems when trying to cross-compile libpng with hardware optimisations enabled, as the incorrect architecture-specific files or flags get included/enabled.
This pull request fixes cross-compilation (and native compilation, when using an older version of cmake on Apple Silicon) on macOS, and should have no effect on other platforms. Note that this will likely fail if the user tries to build a universal binary (e.g., CMAKE_OSX_ARCHITECTURES=arm64;x86_64), but that would have been the case before this patch too. The only way to build libpng as a universal binary with hardware optimisations would be to perform two separate builds then lipo them together.","In the case of macOS we are compiling for a known platform in terms of ARM64 capabilities. Of course, this may not be the case for other non-Apple platforms.
(For clarity, my use of libpng on Mac is via vcpkg, where the optimisations are hard-coded to be enabled; no detection is performed.)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,359,2020-12-23T06:28:57Z,,2021-12-04T12:00:17Z,OPEN,False,0,8,1,https://github.com/ssrobins,Make CMake compatible with Xcode's 'New build system',1,[],https://github.com/glennrp/libpng/pull/359,https://github.com/ssrobins,1,https://github.com/glennrp/libpng/pull/359,"As of CMake 3.19, CMake now defaults to Xcode's new build system when generating for Xcode 12.0 or higher.
If I run cmake -G Xcode -B build to generate a macOS build with Xcode, I get these configuration errors (they show one at a time, you have to fix one to see the next one):
CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/pnglibconf.c

  is attached to multiple targets:

    genfiles
    gensym
    genvers

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

  CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/scripts/symbols.out

  is attached to multiple targets:

    symbol-check
    genfiles

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

  CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/pnglibconf.c

  is attached to multiple targets:

    genfiles
    genvers

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

I noticed that the symbol-check, genvers, and gensym targets weren't referenced anywhere else in the source tree so I removed them, which fixed the error. The genfiles target also references these files and is a dependent of png and png_static so that's the target that's actually getting used in the build.
I confirmed that this fixed the build with CMake 3.19. I also ran builds with CMake 3.18 to make sure generating to Xcode's legacy build system still works. Also made sure everything still built on Windows, Linux, iOS, and Android through my CI checks:
ssrobins/conan-libpng#3","As of CMake 3.19, CMake now defaults to Xcode's new build system when generating for Xcode 12.0 or higher.
If I run cmake -G Xcode -B build to generate a macOS build with Xcode, I get these configuration errors (they show one at a time, you have to fix one to see the next one):
CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/pnglibconf.c

  is attached to multiple targets:

    genfiles
    gensym
    genvers

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

  CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/scripts/symbols.out

  is attached to multiple targets:

    symbol-check
    genfiles

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

  CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/pnglibconf.c

  is attached to multiple targets:

    genfiles
    genvers

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

I noticed that the symbol-check, genvers, and gensym targets weren't referenced anywhere else in the source tree so I removed them, which fixed the error. The genfiles target also references these files and is a dependent of png and png_static so that's the target that's actually getting used in the build.
I confirmed that this fixed the build with CMake 3.19. I also ran builds with CMake 3.18 to make sure generating to Xcode's legacy build system still works. Also made sure everything still built on Windows, Linux, iOS, and Android through my CI checks:
ssrobins/conan-libpng#3",True,"{'HOORAY': ['https://github.com/vespakoen'], 'THUMBS_UP': ['https://github.com/hanseuljun']}"
glennrp/libpng,https://github.com/glennrp/libpng,359,2020-12-23T06:28:57Z,,2021-12-04T12:00:17Z,OPEN,False,0,8,1,https://github.com/ssrobins,Make CMake compatible with Xcode's 'New build system',1,[],https://github.com/glennrp/libpng/pull/359,https://github.com/glebm,2,https://github.com/glennrp/libpng/pull/359#issuecomment-986016036,"As of CMake 3.19, CMake now defaults to Xcode's new build system when generating for Xcode 12.0 or higher.
If I run cmake -G Xcode -B build to generate a macOS build with Xcode, I get these configuration errors (they show one at a time, you have to fix one to see the next one):
CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/pnglibconf.c

  is attached to multiple targets:

    genfiles
    gensym
    genvers

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

  CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/scripts/symbols.out

  is attached to multiple targets:

    symbol-check
    genfiles

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

  CMake Error in CMakeLists.txt:
  The custom command generating

    /Users/steve/Code/github/libpng/build/pnglibconf.c

  is attached to multiple targets:

    genfiles
    genvers

  but none of these is a common dependency of the other(s).  This is not
  allowed by the Xcode ""new build system"".

I noticed that the symbol-check, genvers, and gensym targets weren't referenced anywhere else in the source tree so I removed them, which fixed the error. The genfiles target also references these files and is a dependent of png and png_static so that's the target that's actually getting used in the build.
I confirmed that this fixed the build with CMake 3.19. I also ran builds with CMake 3.18 to make sure generating to Xcode's legacy build system still works. Also made sure everything still built on Windows, Linux, iOS, and Android through my CI checks:
ssrobins/conan-libpng#3",I've also sent an alternative fix in #403,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,364,2021-02-13T01:11:22Z,2021-03-15T07:23:45Z,2021-03-15T07:23:46Z,CLOSED,False,0,0,2,https://github.com/fSQRL,pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.t…,1,[],https://github.com/glennrp/libpng/pull/364,https://github.com/fSQRL,1,https://github.com/glennrp/libpng/pull/364,"pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.txt' ;
intermediate LibreOffice document 'libpng-manual_1.6.37.odt' put in new directory 'contrib/doc-src' for further editing","pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.txt' ;
intermediate LibreOffice document 'libpng-manual_1.6.37.odt' put in new directory 'contrib/doc-src' for further editing",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,364,2021-02-13T01:11:22Z,2021-03-15T07:23:45Z,2021-03-15T07:23:46Z,CLOSED,False,0,0,2,https://github.com/fSQRL,pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.t…,1,[],https://github.com/glennrp/libpng/pull/364,https://github.com/fSQRL,2,https://github.com/glennrp/libpng/pull/364#issuecomment-778537442,"pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.txt' ;
intermediate LibreOffice document 'libpng-manual_1.6.37.odt' put in new directory 'contrib/doc-src' for further editing","pdf document not in final state (page breaks must be revised)
it's the 'pure' libpng-manual.txt reworked in LibreOffice
opening .odt file permits futher editing",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,364,2021-02-13T01:11:22Z,2021-03-15T07:23:45Z,2021-03-15T07:23:46Z,CLOSED,False,0,0,2,https://github.com/fSQRL,pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.t…,1,[],https://github.com/glennrp/libpng/pull/364,https://github.com/ctruta,3,https://github.com/glennrp/libpng/pull/364#issuecomment-799181562,"pdf document 'libpng-manual_1.6.37.pdf' created from 'libpng-manual.txt' ;
intermediate LibreOffice document 'libpng-manual_1.6.37.odt' put in new directory 'contrib/doc-src' for further editing","Thanks, but we'd rather avoid storing binary artifacts (other than PNG files) in the repo, especially if they're documents that need to be opened in an external editor for corrections. Maintenance of such files would not be sustainable in the long term.
On the other hand, conversions of the libpng manual to a modern lightweight markup format like Markdown or Asciidoc, which can then be further converted automatically to PDF or XPS or ODT, etc., would be something worth considering.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,374,2021-04-15T21:54:38Z,,2021-04-15T21:54:38Z,OPEN,False,2,0,1,https://github.com/mscarfo,Update libpng.3,1,[],https://github.com/glennrp/libpng/pull/374,https://github.com/mscarfo,1,https://github.com/glennrp/libpng/pull/374,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,375,2021-04-15T22:02:36Z,,2021-04-15T22:06:07Z,OPEN,False,2,0,1,https://github.com/mscarfo,Update pngpread.c,1,[],https://github.com/glennrp/libpng/pull/375,https://github.com/mscarfo,1,https://github.com/glennrp/libpng/pull/375,,,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,375,2021-04-15T22:02:36Z,,2021-04-15T22:06:07Z,OPEN,False,2,0,1,https://github.com/mscarfo,Update pngpread.c,1,[],https://github.com/glennrp/libpng/pull/375,https://github.com/benkasminbullock,2,https://github.com/glennrp/libpng/pull/375#issuecomment-820759152,,"This and the other pull request both look like just adding blank lines, did something go wrong?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,377,2021-04-25T15:04:29Z,,2021-04-25T15:04:29Z,OPEN,False,87,0,1,https://github.com/mrpossoms,Adapted makefile.clang to invoke emscripten toolchain utilities,1,[],https://github.com/glennrp/libpng/pull/377,https://github.com/mrpossoms,1,https://github.com/glennrp/libpng/pull/377,Created makefile.emcc adapted from makefile.clang to invoke the appropriate emscripten toolchain utilities when building using only a makefile.,Created makefile.emcc adapted from makefile.clang to invoke the appropriate emscripten toolchain utilities when building using only a makefile.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,1,https://github.com/glennrp/libpng/pull/378,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/benkasminbullock,2,https://github.com/glennrp/libpng/pull/378#issuecomment-830451244,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","While I don't think that chaining function calls using a bitwise operator is at all a good practice, I think it would be better to give the commit a message such as ""order of evaluation is undefined here"". Also note that this is part of the contrib/tools directory not libpng itself.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,3,https://github.com/glennrp/libpng/pull/378#issuecomment-832139479,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.",if I have to do something else. let me know.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,4,https://github.com/glennrp/libpng/pull/378#issuecomment-846892469,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","good day.
have you made a decision on this PR?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ValZapod,5,https://github.com/glennrp/libpng/pull/378#issuecomment-879635914,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","undefined behavior in

Unspecified behaviour. Also, with comma operator function calls are left from right, so why not use that?",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,6,https://github.com/glennrp/libpng/pull/378#issuecomment-879649239,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","good day.
if you mean to use comma-separated function calls in a condition, then this will not allow you to trace the return value.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ValZapod,7,https://github.com/glennrp/libpng/pull/378#issuecomment-879653310,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","Are there any side effects? I mean, is file->out modifed? If not, I think it will evaluate from left to right.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,8,https://github.com/glennrp/libpng/pull/378#issuecomment-879669214,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.","there are no side effects when using the call f1() ,f2(), f3().
but maybe I do not quite understand you correctly.
if you want to do so
if (f1 (), f2 (), f3 ())
then it is similar
f1 ();
f2 ();
if (f3 ())
`",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,9,https://github.com/glennrp/libpng/pull/378#issuecomment-971722842,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.",ping,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,378,2021-04-30T13:56:32Z,,2022-02-11T07:23:37Z,OPEN,False,5,4,1,https://github.com/ihsinme,fix dangerous undefined behavior.,1,[],https://github.com/glennrp/libpng/pull/378,https://github.com/ihsinme,10,https://github.com/glennrp/libpng/pull/378#issuecomment-1035939742,"unfortunately your construction is subject to undefined behavior in terms of the sequence of function calls. which can lead to incorrect work.
I propose to fix this point.",ping,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,380,2021-05-22T00:33:50Z,,2021-05-22T00:33:50Z,OPEN,False,3,0,1,https://github.com/ccawley2011,CMake: Fix compilation on systems without libm,1,[],https://github.com/glennrp/libpng/pull/380,https://github.com/ccawley2011,1,https://github.com/glennrp/libpng/pull/380,"This was previously merged as PR #251, but got reverted by commit ee7967e. The change is needed for building on RISC OS.","This was previously merged as PR #251, but got reverted by commit ee7967e. The change is needed for building on RISC OS.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,381,2021-05-25T08:37:36Z,,2021-05-25T08:37:37Z,OPEN,False,1,0,1,https://github.com/h3ndrk,Add libpng:: namespace,1,[],https://github.com/glennrp/libpng/pull/381,https://github.com/h3ndrk,1,https://github.com/glennrp/libpng/pull/381,"This PR adds a libpng:: namespace to CMakeLists.txt. I'm pasting/quoting the answer of https://stackoverflow.com/a/48526017:
The cmake-developer documentation gives the following advice on namespaces:

When providing imported targets, these should be namespaced (hence the Foo:: prefix); CMake will recognize that values passed to target_link_libraries() that contain :: in their name are supposed to be imported targets (rather than just library names), and will produce appropriate diagnostic messages if that target does not exist (see policy CMP0028).

And the CMP0028 policy documentation says on the ""common pattern"" in the use of namespaces:

The use of double-colons is a common pattern used to namespace IMPORTED targets and ALIAS targets. When computing the link dependencies of a target, the name of each dependency could either be a target, or a file on disk. Previously, if a target was not found with a matching name, the name was considered to refer to a file on disk. This can lead to confusing error messages if there is a typo in what should be a target name.","This PR adds a libpng:: namespace to CMakeLists.txt. I'm pasting/quoting the answer of https://stackoverflow.com/a/48526017:
The cmake-developer documentation gives the following advice on namespaces:

When providing imported targets, these should be namespaced (hence the Foo:: prefix); CMake will recognize that values passed to target_link_libraries() that contain :: in their name are supposed to be imported targets (rather than just library names), and will produce appropriate diagnostic messages if that target does not exist (see policy CMP0028).

And the CMP0028 policy documentation says on the ""common pattern"" in the use of namespaces:

The use of double-colons is a common pattern used to namespace IMPORTED targets and ALIAS targets. When computing the link dependencies of a target, the name of each dependency could either be a target, or a file on disk. Previously, if a target was not found with a matching name, the name was considered to refer to a file on disk. This can lead to confusing error messages if there is a typo in what should be a target name.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,383,2021-06-02T05:13:46Z,,2021-08-28T15:13:25Z,OPEN,False,0,4,1,https://github.com/dnfield,"Remove obsolete/incorrect __LLVM,__asm section",2,[],https://github.com/glennrp/libpng/pull/383,https://github.com/dnfield,1,https://github.com/glennrp/libpng/pull/383,"Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.","Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,383,2021-06-02T05:13:46Z,,2021-08-28T15:13:25Z,OPEN,False,0,4,1,https://github.com/dnfield,"Remove obsolete/incorrect __LLVM,__asm section",2,[],https://github.com/glennrp/libpng/pull/383,https://github.com/dnfield,2,https://github.com/glennrp/libpng/pull/383#issuecomment-852730160,"Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.",/cc @ctruta who reviewed/landed the original patch.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,383,2021-06-02T05:13:46Z,,2021-08-28T15:13:25Z,OPEN,False,0,4,1,https://github.com/dnfield,"Remove obsolete/incorrect __LLVM,__asm section",2,[],https://github.com/glennrp/libpng/pull/383,https://github.com/dnfield,3,https://github.com/glennrp/libpng/pull/383#issuecomment-853401126,"Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.","If preferred, we could even remove this, since upstream clang has pretty long since done away with asking authors to add this themselves (see https://bugs.llvm.org/show_bug.cgi?id=39659)",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,383,2021-06-02T05:13:46Z,,2021-08-28T15:13:25Z,OPEN,False,0,4,1,https://github.com/dnfield,"Remove obsolete/incorrect __LLVM,__asm section",2,[],https://github.com/glennrp/libpng/pull/383,https://github.com/mgood7123,4,https://github.com/glennrp/libpng/pull/383#issuecomment-864586657,"Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.",is this ever going to be merged?,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,383,2021-06-02T05:13:46Z,,2021-08-28T15:13:25Z,OPEN,False,0,4,1,https://github.com/dnfield,"Remove obsolete/incorrect __LLVM,__asm section",2,[],https://github.com/glennrp/libpng/pull/383,https://github.com/dnfield,5,https://github.com/glennrp/libpng/pull/383#issuecomment-864739564,"Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.",@ctruta appears to be inactive on GitHub.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,383,2021-06-02T05:13:46Z,,2021-08-28T15:13:25Z,OPEN,False,0,4,1,https://github.com/dnfield,"Remove obsolete/incorrect __LLVM,__asm section",2,[],https://github.com/glennrp/libpng/pull/383,https://github.com/mgood7123,6,https://github.com/glennrp/libpng/pull/383#issuecomment-907640086,"Fixes #347
This non-standard section is only meant to be used on Apple platforms and may not be supported on others.","@ctruta appears to be inactive on GitHub.

aw",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,384,2021-06-12T16:07:19Z,,2021-06-12T16:07:19Z,OPEN,False,1,0,1,https://github.com/CAMOBAP,Add dedicated match for aarch32 (for handling ARMv8 32-bit mode),1,[],https://github.com/glennrp/libpng/pull/384,https://github.com/CAMOBAP,1,https://github.com/glennrp/libpng/pull/384,"Intro
My host platform is ARMv8 which is running under 32bit Linux.
Problem
I have faced a linker issue while trying to compile libpng with  CMAKE_SYSTEM_PROCESSOR=aarch32:
/root/.conan/data/libpng/1.6.37/_/_/package/e76f081ae59ebc813f8ac6ca750e5ac280154df0/lib/libpng16d.a(pngrtran.c.o): In function `png_do_expand_palette':
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrtran.c:4323: undefined reference to `png_do_expand_palette_rgba8_neon'
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrtran.c:4354: undefined reference to `png_do_expand_palette_rgb8_neon'
/root/.conan/data/libpng/1.6.37/_/_/package/e76f081ae59ebc813f8ac6ca750e5ac280154df0/lib/libpng16d.a(pngrtran.c.o): In function `png_do_read_transformations':
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrtran.c:4782: undefined reference to `png_riffle_palette_neon'
/root/.conan/data/libpng/1.6.37/_/_/package/e76f081ae59ebc813f8ac6ca750e5ac280154df0/lib/libpng16d.a(pngrutil.c.o): In function `png_init_filter_functions':
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrutil.c:4126: undefined reference to `png_init_filter_functions_neon'
Proposed solution
I propose to add a dedicated match in CMake for aarch32 as an alias for armv8 32-bit, checkout PR","Intro
My host platform is ARMv8 which is running under 32bit Linux.
Problem
I have faced a linker issue while trying to compile libpng with  CMAKE_SYSTEM_PROCESSOR=aarch32:
/root/.conan/data/libpng/1.6.37/_/_/package/e76f081ae59ebc813f8ac6ca750e5ac280154df0/lib/libpng16d.a(pngrtran.c.o): In function `png_do_expand_palette':
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrtran.c:4323: undefined reference to `png_do_expand_palette_rgba8_neon'
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrtran.c:4354: undefined reference to `png_do_expand_palette_rgb8_neon'
/root/.conan/data/libpng/1.6.37/_/_/package/e76f081ae59ebc813f8ac6ca750e5ac280154df0/lib/libpng16d.a(pngrtran.c.o): In function `png_do_read_transformations':
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrtran.c:4782: undefined reference to `png_riffle_palette_neon'
/root/.conan/data/libpng/1.6.37/_/_/package/e76f081ae59ebc813f8ac6ca750e5ac280154df0/lib/libpng16d.a(pngrutil.c.o): In function `png_init_filter_functions':
/root/.conan/data/libpng/1.6.37/_/_/build/e76f081ae59ebc813f8ac6ca750e5ac280154df0/source_subfolder/pngrutil.c:4126: undefined reference to `png_init_filter_functions_neon'
Proposed solution
I propose to add a dedicated match in CMake for aarch32 as an alias for armv8 32-bit, checkout PR",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,386,2021-07-15T15:08:21Z,,2021-07-15T15:08:21Z,OPEN,False,3,1,1,https://github.com/arichardson,Use __UINTPTR_TYPE__ for png_ptruint when available,1,[],https://github.com/glennrp/libpng/pull/386,https://github.com/arichardson,1,https://github.com/glennrp/libpng/pull/386,"This ensures that libpng can also be used on archictures where uintptr_t
is not the same as unsigned long. This is needed e.g. for CHERI-extended
architectures such CHERI-RISC-V or Arm Morello where uintptr_t is twice
the size of long since it carries additional metadata. Without this
change the CHERI build fails and if we disable -Werror, the binary will
crash at run time.
/Users/alex/cheri/libpng/pngerror.c:83:30: error: cast from provenance-free integer type to pointer type will give pointer that can not be dereferenced [-Werror,-Wcheri-capability-misuse]
      (*(png_ptr->error_fn))(png_constcast(png_structrp,png_ptr),
                             ^
/Users/alex/cheri/libpng/pngpriv.h:504:39: note: expanded from macro 'png_constcast'
#  define png_constcast(type, value) ((type)(png_ptruint)(const void*)(value))

The ISO C standard compliant fix for this would be to use uintptr_t from
<stdint.h>, but I am not sure if this is supported by the minimum compiler
version. Therefore, use the compiler-defined UINTPTR_TYPE macro
(supported in GCC 4.6+ and Clang since about 3.0) before checking for
_WIN64 and falling back to unsigned long.","This ensures that libpng can also be used on archictures where uintptr_t
is not the same as unsigned long. This is needed e.g. for CHERI-extended
architectures such CHERI-RISC-V or Arm Morello where uintptr_t is twice
the size of long since it carries additional metadata. Without this
change the CHERI build fails and if we disable -Werror, the binary will
crash at run time.
/Users/alex/cheri/libpng/pngerror.c:83:30: error: cast from provenance-free integer type to pointer type will give pointer that can not be dereferenced [-Werror,-Wcheri-capability-misuse]
      (*(png_ptr->error_fn))(png_constcast(png_structrp,png_ptr),
                             ^
/Users/alex/cheri/libpng/pngpriv.h:504:39: note: expanded from macro 'png_constcast'
#  define png_constcast(type, value) ((type)(png_ptruint)(const void*)(value))

The ISO C standard compliant fix for this would be to use uintptr_t from
<stdint.h>, but I am not sure if this is supported by the minimum compiler
version. Therefore, use the compiler-defined UINTPTR_TYPE macro
(supported in GCC 4.6+ and Clang since about 3.0) before checking for
_WIN64 and falling back to unsigned long.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,388,2021-07-27T04:45:51Z,,2021-07-27T04:45:51Z,OPEN,False,0,3,1,https://github.com/pkasting,Fix an instance of -Wunused-but-set-variable.,1,[],https://github.com/glennrp/libpng/pull/388,https://github.com/pkasting,1,https://github.com/glennrp/libpng/pull/388,Bug: chromium:1203071,Bug: chromium:1203071,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,391,2021-08-08T08:59:10Z,,2021-12-03T15:02:16Z,OPEN,False,1,1,1,https://github.com/vkrause,Fix shared build on Android,1,[],https://github.com/glennrp/libpng/pull/391,https://github.com/vkrause,1,https://github.com/glennrp/libpng/pull/391,"The ld version script is not generated on Android, so also don't try to use it there.","The ld version script is not generated on Android, so also don't try to use it there.",True,{'THUMBS_UP': ['https://github.com/AJenbo']}
glennrp/libpng,https://github.com/glennrp/libpng,391,2021-08-08T08:59:10Z,,2021-12-03T15:02:16Z,OPEN,False,1,1,1,https://github.com/vkrause,Fix shared build on Android,1,[],https://github.com/glennrp/libpng/pull/391,https://github.com/AJenbo,2,https://github.com/glennrp/libpng/pull/391#issuecomment-985590663,"The ld version script is not generated on Android, so also don't try to use it there.",@ctruta looks like Xcode is affected by the same issue.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,395,2021-08-28T15:21:19Z,,2021-12-04T11:59:15Z,OPEN,False,10,4,1,https://github.com/mgood7123,fix: libpng cant generate config for xcode new build system,1,[],https://github.com/glennrp/libpng/pull/395,https://github.com/mgood7123,1,https://github.com/glennrp/libpng/pull/395,"libpng does not currently support generating files for multiple targets using the Xcode ""new build system""","libpng does not currently support generating files for multiple targets using the Xcode ""new build system""",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,395,2021-08-28T15:21:19Z,,2021-12-04T11:59:15Z,OPEN,False,10,4,1,https://github.com/mgood7123,fix: libpng cant generate config for xcode new build system,1,[],https://github.com/glennrp/libpng/pull/395,https://github.com/glebm,2,https://github.com/glennrp/libpng/pull/395#issuecomment-986015899,"libpng does not currently support generating files for multiple targets using the Xcode ""new build system""",I've sent a somewhat cleaner fix in #403,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,396,2021-09-30T04:09:33Z,,2021-09-30T06:54:45Z,OPEN,False,30,26,1,https://github.com/fanc999,CMake: Generate pkg-config files for all Windows builds,1,[],https://github.com/glennrp/libpng/pull/396,https://github.com/fanc999,1,https://github.com/glennrp/libpng/pull/396,"Hi,
This PR is opened to support generating pkg-config files also for native (non-Cygwin) Windows builds, in addition to MinGW/mingw-w64 builds, since the Meson build system (which uses pkg-config and CMake to find dependencies for most packages) is becoming more widespread for building items such as Cairo and the GNOME/GTK stack and the current CMake config files generated by the CMake builds are not usable by Meson as a consequence of #179, which should be fixed in a PR of its own.
With blessings, thank you!","Hi,
This PR is opened to support generating pkg-config files also for native (non-Cygwin) Windows builds, in addition to MinGW/mingw-w64 builds, since the Meson build system (which uses pkg-config and CMake to find dependencies for most packages) is becoming more widespread for building items such as Cairo and the GNOME/GTK stack and the current CMake config files generated by the CMake builds are not usable by Meson as a consequence of #179, which should be fixed in a PR of its own.
With blessings, thank you!",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,397,2021-10-25T10:16:01Z,,2021-10-28T12:20:51Z,OPEN,False,2881,1458,11,https://github.com/gaborkertesz-linaro,Enable win-arm64 platform,5,[],https://github.com/glennrp/libpng/pull/397,https://github.com/gaborkertesz-linaro,1,https://github.com/glennrp/libpng/pull/397,These changes are targeting the enablement Windows on Arm (win-arm64) platform.,These changes are targeting the enablement Windows on Arm (win-arm64) platform.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,399,2021-11-11T16:27:11Z,,2021-11-11T16:27:11Z,OPEN,False,23,34,1,https://github.com/suijingfeng,contrib/mips-msa: implement runtime-time Mips MSA discovery function …,1,[],https://github.com/glennrp/libpng/pull/399,https://github.com/suijingfeng,1,https://github.com/glennrp/libpng/pull/399,"…correctly
The old implement cause Bus error when png_have_msa() is called
if the word is longer than 10 bytes.
char word[10] in original function is too short, word[i++] = ch
will cause a stack smash if the characters between space is more
than 10.
And fclose(f) should be called before leaving.
For example on loongson ls3a4000 cpu platform:
$ cat /proc/cpuinfo
system type		: Generic Loongson64 System
machine			: loongson,loongson64g-4core-ls7a
processor		: 0
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3594.02
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 0
VCED exceptions		: not available
VCEI exceptions		: not available
processor		: 1
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3611.26
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 1
VCED exceptions		: not available
VCEI exceptions		: not available
Signed-off-by: Sui Jingfeng 15330273260@189.cn","…correctly
The old implement cause Bus error when png_have_msa() is called
if the word is longer than 10 bytes.
char word[10] in original function is too short, word[i++] = ch
will cause a stack smash if the characters between space is more
than 10.
And fclose(f) should be called before leaving.
For example on loongson ls3a4000 cpu platform:
$ cat /proc/cpuinfo
system type		: Generic Loongson64 System
machine			: loongson,loongson64g-4core-ls7a
processor		: 0
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3594.02
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 0
VCED exceptions		: not available
VCEI exceptions		: not available
processor		: 1
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3611.26
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 1
VCED exceptions		: not available
VCEI exceptions		: not available
Signed-off-by: Sui Jingfeng 15330273260@189.cn",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,400,2021-11-11T16:29:26Z,,2021-11-11T16:29:26Z,OPEN,False,23,34,1,https://github.com/suijingfeng,contrib/mips-msa: implement runtime-time Mips MSA discovery function …,1,[],https://github.com/glennrp/libpng/pull/400,https://github.com/suijingfeng,1,https://github.com/glennrp/libpng/pull/400,"…correctly
The old implement cause Bus error when png_have_msa() is called
if the word is longer than 10 bytes.
char word[10] in original function is too short, word[i++] = ch
will cause a stack smash if the characters between space is more
than 10.
And fclose(f) should be called before leaving.
For example on loongson ls3a4000 cpu platform:
$ cat /proc/cpuinfo
system type		: Generic Loongson64 System
machine			: loongson,loongson64g-4core-ls7a
processor		: 0
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3594.02
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 0
VCED exceptions		: not available
VCEI exceptions		: not available
processor		: 1
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3611.26
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 1
VCED exceptions		: not available
VCEI exceptions		: not available
Signed-off-by: Sui Jingfeng 15330273260@189.cn","…correctly
The old implement cause Bus error when png_have_msa() is called
if the word is longer than 10 bytes.
char word[10] in original function is too short, word[i++] = ch
will cause a stack smash if the characters between space is more
than 10.
And fclose(f) should be called before leaving.
For example on loongson ls3a4000 cpu platform:
$ cat /proc/cpuinfo
system type		: Generic Loongson64 System
machine			: loongson,loongson64g-4core-ls7a
processor		: 0
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3594.02
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 0
VCED exceptions		: not available
VCEI exceptions		: not available
processor		: 1
cpu model		: ICT Loongson-3 V0.1  FPU V0.1
BogoMIPS		: 3611.26
wait instruction	: yes
microsecond timers	: yes
tlb_entries		: 2112
extra interrupt vector	: no
hardware watchpoint	: no
isa			: mips1 mips2 mips3 mips4 mips5 mips32r1 mips32r2 mips64r1 mips64r2
ASEs implemented	: vz msa loongson-mmi loongson-cam loongson-ext loongson-ext2
shadow register sets	: 1
kscratch registers	: 6
package			: 0
core			: 1
VCED exceptions		: not available
VCEI exceptions		: not available
Signed-off-by: Sui Jingfeng 15330273260@189.cn",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,403,2021-12-04T11:27:31Z,,2022-03-27T21:39:28Z,OPEN,False,48,32,1,https://github.com/glebm,CMake: Correctly handle generated files,1,[],https://github.com/glennrp/libpng/pull/403,https://github.com/glebm,1,https://github.com/glennrp/libpng/pull/403,"Generated files depend on other generated files, and this previously resulted in the same custom command output being a dependency of multiple other custom commands without a shared custom targets.
Adds a top-level target for each generated file and ensures that commands that depend on generated files also depend on the corresponding custom targets.
Per CMake documentation:

Do not list the output in more than one independent target that may build in parallel or the two instances of the rule may conflict (instead use add_custom_target to drive the command and make the other targets depend on that one).

Fixes #344
Fixes #394","Generated files depend on other generated files, and this previously resulted in the same custom command output being a dependency of multiple other custom commands without a shared custom targets.
Adds a top-level target for each generated file and ensures that commands that depend on generated files also depend on the corresponding custom targets.
Per CMake documentation:

Do not list the output in more than one independent target that may build in parallel or the two instances of the rule may conflict (instead use add_custom_target to drive the command and make the other targets depend on that one).

Fixes #344
Fixes #394",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,403,2021-12-04T11:27:31Z,,2022-03-27T21:39:28Z,OPEN,False,48,32,1,https://github.com/glebm,CMake: Correctly handle generated files,1,[],https://github.com/glennrp/libpng/pull/403,https://github.com/glebm,2,https://github.com/glennrp/libpng/pull/403#issuecomment-1007217245,"Generated files depend on other generated files, and this previously resulted in the same custom command output being a dependency of multiple other custom commands without a shared custom targets.
Adds a top-level target for each generated file and ensures that commands that depend on generated files also depend on the corresponding custom targets.
Per CMake documentation:

Do not list the output in more than one independent target that may build in parallel or the two instances of the rule may conflict (instead use add_custom_target to drive the command and make the other targets depend on that one).

Fixes #344
Fixes #394",@glennrp This merges cleanly into both the master and the libpng16 branches,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,403,2021-12-04T11:27:31Z,,2022-03-27T21:39:28Z,OPEN,False,48,32,1,https://github.com/glebm,CMake: Correctly handle generated files,1,[],https://github.com/glennrp/libpng/pull/403,https://github.com/cjhowedev,3,https://github.com/glennrp/libpng/pull/403#issuecomment-1080024358,"Generated files depend on other generated files, and this previously resulted in the same custom command output being a dependency of multiple other custom commands without a shared custom targets.
Adds a top-level target for each generated file and ensures that commands that depend on generated files also depend on the corresponding custom targets.
Per CMake documentation:

Do not list the output in more than one independent target that may build in parallel or the two instances of the rule may conflict (instead use add_custom_target to drive the command and make the other targets depend on that one).

Fixes #344
Fixes #394","I have to use @glebm's branch because the Xcode CMake build is broken. I'm not sure how iOS builds are going to work without this, as they require Xcode. I verified that @glebm's branch is working in Xcode 13.3 with CMake 3.22.3.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,405,2021-12-20T10:53:25Z,,2021-12-20T10:53:25Z,OPEN,False,987,16,15,https://github.com/mschlaegl,Support for RISC-V Vector Extension,2,[],https://github.com/glennrp/libpng/pull/405,https://github.com/mschlaegl,1,https://github.com/glennrp/libpng/pull/405,"(corresponds to https://sourceforge.net/p/png-mng/mailman/message/37402426/ on the png-mng-implement mailing list)
Hello,
The long awaited RISC-V Vector Extension (RVV) is finally in
ratification.1 This pull request includes two changes:

INSTALL: added missing contrib content

Contains a simple fix in INSTALL but is necessary for
applying the main patch


libpng: Add support for RISC-V Vector Extension

Support for RISC-V Vector Extension



It supports RVV versions: 0.7.1, 0.8, 0.9, 0.10 and 1.0.
Development and performance evaluation of the filter type
implementations (up, sub, avg and paeth) was done on Allwinner D1 with
RVV 0.7.1 using RVVRadar. Details on that can be found in an article
published on github 2.
The integration in libpng was done very similarly as for other
architectures (ARM NEON, MIPS MSA, ...): There exists a configure
switch ""riscv-vector"" which can be set to no/off, check, api, yes/on.
And there is also run-time checking code (like for ARM NEON,
MIPS MSA, ...).
More important are the differences:

We introduce a separate configure switch ""riscv-vector-compat""
We use inline assembler instead of compiler intrinsics

Both is done for the same reason: To support multiple RVV versions.
As mentioned above, RVV 1.0 is under ratification now. But there are
earlier draft versions which are sporadically already implemented in
real existing hardware. One example is the Allwinner D1 with RVV 0.7.1
which was used for performance evaluation and optimization of these
filter implementations.2 We therefore decided to support the
following RVV versions: 0.7.1, 0.8, 0.9, 0.10 and 1.0.
Unfortunately, there is no easy way to detect the RVV version
supported by the toolchain. It was therefore necessary to add an
additional configure switch ""riscv-vector-compat"" with following
behavior:

not-set/off(default): RVV release 1.0
set to ""0.10"": RVV draft 0.10
set to ""0.9"": RVV draft 0.9
set to ""0.8"": RVV draft 0.8
set to ""0.7.1"": RVV draft 0.7.1

Furthermore compiler intrinsics were not available for all supported
RVV versions. For this reason we had to use inline assembler instead
of compiler intrinsics.
The filter implementations for all supported RVV versions were tested
in the following setups:



RVV Version
Branch of riscv-gnu-toolchain3
Test system




1.0
""basic-rvv""
qemu_sifive 4


0.10
""rvv-intrinsic""
qemu_sifive 4


0.9
""rvv-0.9.x""
Allwinner D1 (binary compatible)


0.8
""rvv-0.8.x""
Allwinner D1 (binary compatible)


0.7.1
""rvv-0.7.1""
Allwinner D1 (RVV 0.7.1)



References:
Footnotes


https://riscv.org/announcements/2021/12/riscv-ratifies-15-new-specifications/ ↩


https://github.com/mschlaegl/libpng_rvv-doc/blob/main/README.md ↩ ↩2


https://github.com/riscv-collab/riscv-gnu-toolchain ↩


https://github.com/sifive/qemu/tree/rvv-1.0-upstream-v10 ↩ ↩2","(corresponds to https://sourceforge.net/p/png-mng/mailman/message/37402426/ on the png-mng-implement mailing list)
Hello,
The long awaited RISC-V Vector Extension (RVV) is finally in
ratification.1 This pull request includes two changes:

INSTALL: added missing contrib content

Contains a simple fix in INSTALL but is necessary for
applying the main patch


libpng: Add support for RISC-V Vector Extension

Support for RISC-V Vector Extension



It supports RVV versions: 0.7.1, 0.8, 0.9, 0.10 and 1.0.
Development and performance evaluation of the filter type
implementations (up, sub, avg and paeth) was done on Allwinner D1 with
RVV 0.7.1 using RVVRadar. Details on that can be found in an article
published on github 2.
The integration in libpng was done very similarly as for other
architectures (ARM NEON, MIPS MSA, ...): There exists a configure
switch ""riscv-vector"" which can be set to no/off, check, api, yes/on.
And there is also run-time checking code (like for ARM NEON,
MIPS MSA, ...).
More important are the differences:

We introduce a separate configure switch ""riscv-vector-compat""
We use inline assembler instead of compiler intrinsics

Both is done for the same reason: To support multiple RVV versions.
As mentioned above, RVV 1.0 is under ratification now. But there are
earlier draft versions which are sporadically already implemented in
real existing hardware. One example is the Allwinner D1 with RVV 0.7.1
which was used for performance evaluation and optimization of these
filter implementations.2 We therefore decided to support the
following RVV versions: 0.7.1, 0.8, 0.9, 0.10 and 1.0.
Unfortunately, there is no easy way to detect the RVV version
supported by the toolchain. It was therefore necessary to add an
additional configure switch ""riscv-vector-compat"" with following
behavior:

not-set/off(default): RVV release 1.0
set to ""0.10"": RVV draft 0.10
set to ""0.9"": RVV draft 0.9
set to ""0.8"": RVV draft 0.8
set to ""0.7.1"": RVV draft 0.7.1

Furthermore compiler intrinsics were not available for all supported
RVV versions. For this reason we had to use inline assembler instead
of compiler intrinsics.
The filter implementations for all supported RVV versions were tested
in the following setups:



RVV Version
Branch of riscv-gnu-toolchain3
Test system




1.0
""basic-rvv""
qemu_sifive 4


0.10
""rvv-intrinsic""
qemu_sifive 4


0.9
""rvv-0.9.x""
Allwinner D1 (binary compatible)


0.8
""rvv-0.8.x""
Allwinner D1 (binary compatible)


0.7.1
""rvv-0.7.1""
Allwinner D1 (RVV 0.7.1)



References:
Footnotes


https://riscv.org/announcements/2021/12/riscv-ratifies-15-new-specifications/ ↩


https://github.com/mschlaegl/libpng_rvv-doc/blob/main/README.md ↩ ↩2


https://github.com/riscv-collab/riscv-gnu-toolchain ↩


https://github.com/sifive/qemu/tree/rvv-1.0-upstream-v10 ↩ ↩2",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,406,2022-01-08T11:31:22Z,,2022-01-08T11:44:39Z,OPEN,False,14,14,10,https://github.com/luzpaz,FIx various typos,1,[],https://github.com/glennrp/libpng/pull/406,https://github.com/luzpaz,1,https://github.com/glennrp/libpng/pull/406,"Found via codespell -q 3 -S ./ltmain.sh,./scripts/libtool.m4 -L ake,ans,ba,bloc,crashers,doed,inout,lengthh,maked,paeth,parm,parms,redy,unx","Found via codespell -q 3 -S ./ltmain.sh,./scripts/libtool.m4 -L ake,ans,ba,bloc,crashers,doed,inout,lengthh,maked,paeth,parm,parms,redy,unx",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,406,2022-01-08T11:31:22Z,,2022-01-08T11:44:39Z,OPEN,False,14,14,10,https://github.com/luzpaz,FIx various typos,1,[],https://github.com/glennrp/libpng/pull/406,https://github.com/luzpaz,2,https://github.com/glennrp/libpng/pull/406#issuecomment-1007968518,"Found via codespell -q 3 -S ./ltmain.sh,./scripts/libtool.m4 -L ake,ans,ba,bloc,crashers,doed,inout,lengthh,maked,paeth,parm,parms,redy,unx",Sorry for all the noise. Seems like my editor (vs-code) introduced an edit that I didn't intend. Should be fixed now.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,412,2022-03-10T06:43:02Z,,2022-03-10T06:43:02Z,OPEN,False,11,4,2,https://github.com/brlcad,fix windows issue when sources got with git but built with wsl fail.,1,[],https://github.com/glennrp/libpng/pull/412,https://github.com/brlcad,1,https://github.com/glennrp/libpng/pull/412,"issue is that by default git for windows checks out text files with
CRLF line endings.  this is a problem for awk which is expecting
unix-style LF line endings.  so when an unsuspecting dev clones, but
then attempts to compile on WSL, Mingw, or Cygwin, they'll get an
error from awk.
fix used here is to leverage cmake's ability to configure a file and
perform eol conversions, so we copy the awk scripts from source to
binary. this portable method ensures they have LF endings and build
logic is updated to use the build dir version.
intentionally avoiding .gitattributes to avoid setting precedent.","issue is that by default git for windows checks out text files with
CRLF line endings.  this is a problem for awk which is expecting
unix-style LF line endings.  so when an unsuspecting dev clones, but
then attempts to compile on WSL, Mingw, or Cygwin, they'll get an
error from awk.
fix used here is to leverage cmake's ability to configure a file and
perform eol conversions, so we copy the awk scripts from source to
binary. this portable method ensures they have LF endings and build
logic is updated to use the build dir version.
intentionally avoiding .gitattributes to avoid setting precedent.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,413,2022-04-05T12:25:31Z,,2022-04-19T12:40:50Z,OPEN,False,1,1,1,https://github.com/eustas,Drop possible tail byte in hIST chunk,1,[],https://github.com/glennrp/libpng/pull/413,https://github.com/eustas,1,https://github.com/glennrp/libpng/pull/413,"When I feed png decoder with complete chunks I expect that nothing remains in internal buffer.
Here is the case I've met (via fuzzing): empty palette followed by hIST chunk with 1 byte of payload.
Decoder gives a warning and picks one byte into internal buffer.
For the next chunk it uses this byte -- this is unexpected for the embedder (as chunk start for embedder and png decoder is placed at different positions).
There is no public API to check how much is stored in internal buffer, so it is better to be consistent on processing of ""tails"" of chunks.","When I feed png decoder with complete chunks I expect that nothing remains in internal buffer.
Here is the case I've met (via fuzzing): empty palette followed by hIST chunk with 1 byte of payload.
Decoder gives a warning and picks one byte into internal buffer.
For the next chunk it uses this byte -- this is unexpected for the embedder (as chunk start for embedder and png decoder is placed at different positions).
There is no public API to check how much is stored in internal buffer, so it is better to be consistent on processing of ""tails"" of chunks.",True,{}
glennrp/libpng,https://github.com/glennrp/libpng,413,2022-04-05T12:25:31Z,,2022-04-19T12:40:50Z,OPEN,False,1,1,1,https://github.com/eustas,Drop possible tail byte in hIST chunk,1,[],https://github.com/glennrp/libpng/pull/413,https://github.com/eustas,2,https://github.com/glennrp/libpng/pull/413#issuecomment-1088656720,"When I feed png decoder with complete chunks I expect that nothing remains in internal buffer.
Here is the case I've met (via fuzzing): empty palette followed by hIST chunk with 1 byte of payload.
Decoder gives a warning and picks one byte into internal buffer.
For the next chunk it uses this byte -- this is unexpected for the embedder (as chunk start for embedder and png decoder is placed at different positions).
There is no public API to check how much is stored in internal buffer, so it is better to be consistent on processing of ""tails"" of chunks.",Similar to 9f2ad49,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,413,2022-04-05T12:25:31Z,,2022-04-19T12:40:50Z,OPEN,False,1,1,1,https://github.com/eustas,Drop possible tail byte in hIST chunk,1,[],https://github.com/glennrp/libpng/pull/413,https://github.com/eustas,3,https://github.com/glennrp/libpng/pull/413#issuecomment-1102595700,"When I feed png decoder with complete chunks I expect that nothing remains in internal buffer.
Here is the case I've met (via fuzzing): empty palette followed by hIST chunk with 1 byte of payload.
Decoder gives a warning and picks one byte into internal buffer.
For the next chunk it uses this byte -- this is unexpected for the embedder (as chunk start for embedder and png decoder is placed at different positions).
There is no public API to check how much is stored in internal buffer, so it is better to be consistent on processing of ""tails"" of chunks.",Friendly ping.,True,{}
glennrp/libpng,https://github.com/glennrp/libpng,415,2022-04-28T11:31:36Z,,2022-04-28T11:31:36Z,OPEN,False,1,0,1,https://github.com/hkctkuy,Added missing include,1,[],https://github.com/glennrp/libpng/pull/415,https://github.com/hkctkuy,1,https://github.com/glennrp/libpng/pull/415,Added include for malloc() and free () functions,Added include for malloc() and free () functions,True,{}
